
TestDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080035a0  080035a0  000045a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e8  080035e8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080035e8  080035e8  000045e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035f0  080035f0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035f4  080035f4  000045f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff4  2000000c  08003604  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002000  08003604  00006000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a86f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b4  00000000  00000000  0000f8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ed  00000000  00000000  00011a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c95  00000000  00000000  00012155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9ee  00000000  00000000  00036dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f5c  00000000  00000000  000417d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002438  00000000  00000000  00125778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00127bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003588 	.word	0x08003588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003588 	.word	0x08003588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db0c      	blt.n	80004e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 021f 	and.w	r2, r3, #31
 80004d0:	4907      	ldr	r1, [pc, #28]	@ (80004f0 <__NVIC_ClearPendingIRQ+0x38>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	095b      	lsrs	r3, r3, #5
 80004d8:	2001      	movs	r0, #1
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
 80004de:	3360      	adds	r3, #96	@ 0x60
 80004e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e100 	.word	0xe000e100

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fc6f 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f825 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8a5 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f873 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_DMA_Init();
 800050a:	f000 f947 	bl	800079c <MX_DMA_Init>
  MX_SPI2_Init();
 800050e:	f000 f939 	bl	8000784 <MX_SPI2_Init>
  ad7676_clock_configuration();
 8000512:	f000 f9e7 	bl	80008e4 <ad7676_clock_configuration>
  ad7676_spi_configuration();
 8000516:	f000 f95f 	bl	80007d8 <ad7676_spi_configuration>
  ad7676_dma_configuration();
 800051a:	f000 f997 	bl	800084c <ad7676_dma_configuration>
  AD7676_CNVST_ON;
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <main+0x54>)
 8000520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000524:	619a      	str	r2, [r3, #24]
  AD7676_CONVST_DELAY;
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e003      	b.n	8000534 <main+0x40>
 800052c:	bf00      	nop
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	3301      	adds	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d9f8      	bls.n	800052c <main+0x38>
  AD7676_CNVST_OFF;
 800053a:	4b03      	ldr	r3, [pc, #12]	@ (8000548 <main+0x54>)
 800053c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	bf00      	nop
 8000544:	e7fd      	b.n	8000542 <main+0x4e>
 8000546:	bf00      	nop
 8000548:	48000800 	.word	0x48000800

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	@ 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	@ 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 ffe7 	bl	800352e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000572:	f000 ffa9 	bl	80014c8 <HAL_PWREx_ControlVoltageScaling>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800057c:	f000 fb34 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800059a:	230a      	movs	r3, #10
 800059c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059e:	2307      	movs	r3, #7
 80005a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ffe0 	bl	8001574 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ba:	f000 fb15 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fba8 	bl	8001d2c <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005e2:	f000 fb01 	bl	8000be8 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3758      	adds	r7, #88	@ 0x58
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	@ (800064c <MX_USART2_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fa:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_USART2_UART_Init+0x58>)
 8000634:	f002 fa5a 	bl	8002aec <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 fad3 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b45      	ldr	r3, [pc, #276]	@ (800077c <MX_GPIO_Init+0x12c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a44      	ldr	r2, [pc, #272]	@ (800077c <MX_GPIO_Init+0x12c>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b42      	ldr	r3, [pc, #264]	@ (800077c <MX_GPIO_Init+0x12c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b3f      	ldr	r3, [pc, #252]	@ (800077c <MX_GPIO_Init+0x12c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a3e      	ldr	r2, [pc, #248]	@ (800077c <MX_GPIO_Init+0x12c>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b3c      	ldr	r3, [pc, #240]	@ (800077c <MX_GPIO_Init+0x12c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b39      	ldr	r3, [pc, #228]	@ (800077c <MX_GPIO_Init+0x12c>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	4a38      	ldr	r2, [pc, #224]	@ (800077c <MX_GPIO_Init+0x12c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a2:	4b36      	ldr	r3, [pc, #216]	@ (800077c <MX_GPIO_Init+0x12c>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b33      	ldr	r3, [pc, #204]	@ (800077c <MX_GPIO_Init+0x12c>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	4a32      	ldr	r2, [pc, #200]	@ (800077c <MX_GPIO_Init+0x12c>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ba:	4b30      	ldr	r3, [pc, #192]	@ (800077c <MX_GPIO_Init+0x12c>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f000 febd 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d8:	4829      	ldr	r0, [pc, #164]	@ (8000780 <MX_GPIO_Init+0x130>)
 80006da:	f000 feb7 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e8:	f000 feb0 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin ADC_BUSY_Pin */
  GPIO_InitStruct.Pin = B1_Pin|ADC_BUSY_Pin;
 80006ec:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	481f      	ldr	r0, [pc, #124]	@ (8000780 <MX_GPIO_Init+0x130>)
 8000704:	f000 fcf8 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000722:	f000 fce9 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CNVST_Pin */
  GPIO_InitStruct.Pin = ADC_CNVST_Pin;
 8000726:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4810      	ldr	r0, [pc, #64]	@ (8000780 <MX_GPIO_Init+0x130>)
 8000740:	f000 fcda 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000760:	f000 fcca 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2017      	movs	r0, #23
 800076a:	f000 fc8e 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800076e:	2017      	movs	r0, #23
 8000770:	f000 fca7 	bl	80010c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	@ 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <MX_SPI2_Init>:

/* USER CODE BEGIN 4 */
void MX_SPI2_Init(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	2024      	movs	r0, #36	@ 0x24
 800078e:	f000 fc7c 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000792:	2024      	movs	r0, #36	@ 0x24
 8000794:	f000 fc95 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_DMA_Init>:
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_DMA_Init+0x38>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a6:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <MX_DMA_Init+0x38>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_DMA_Init+0x38>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	200e      	movs	r0, #14
 80007c0:	f000 fc63 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007c4:	200e      	movs	r0, #14
 80007c6:	f000 fc7c 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <ad7676_spi_configuration>:

static void ad7676_spi_configuration(){
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
//	SPI_CR1_BIDIMODE 0
//	SPI_CR1_BIDIOE 0
//	SPI2->CR1 |= SPI_CR1_CRCEN;
	SPI2->CR1 |= SPI_CR1_RXONLY;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <ad7676_spi_configuration+0x70>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <ad7676_spi_configuration+0x70>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007e6:	6013      	str	r3, [r2, #0]
//	SPI_CR1_LSBFIRST 0
//	SPI2->CR1 |= SPI_CR1_SPE; //enable when ready
	SPI2->CR1 |= SPI_CR1_BR_0; // | SPI_CR1_BR_1); //ultimately leave 0
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <ad7676_spi_configuration+0x70>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a16      	ldr	r2, [pc, #88]	@ (8000848 <ad7676_spi_configuration+0x70>)
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_MSTR;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <ad7676_spi_configuration+0x70>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <ad7676_spi_configuration+0x70>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_CPOL; //spi configuration CPOL 1 CPHA 0
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <ad7676_spi_configuration+0x70>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <ad7676_spi_configuration+0x70>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	6013      	str	r3, [r2, #0]

//	SPI2->CR1 = SPI_CR1_CRCEN | SPI_CR1_RXONLY |
//			SPI_CR1_BR_2 | SPI_CR1_MSTR | SPI_CR1_CPOL;

//	SPI2->CR2 |= SPI_CR2_FRXTH 0
	SPI2->CR2 |= SPI_CR2_DS;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <ad7676_spi_configuration+0x70>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <ad7676_spi_configuration+0x70>)
 8000812:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000816:	6053      	str	r3, [r2, #4]
//	SPI2->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2);
	SPI2->CR2 |= SPI_CR2_RXNEIE; //enable when RXNE interrupt necessary
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <ad7676_spi_configuration+0x70>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <ad7676_spi_configuration+0x70>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	6053      	str	r3, [r2, #4]
//	SPI2->CR2 |= SPI_CR2_NSSP; //no NSS pulse between data
	SPI2->CR2 |= SPI_CR2_SSOE; //master SS enabled
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <ad7676_spi_configuration+0x70>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <ad7676_spi_configuration+0x70>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6053      	str	r3, [r2, #4]
	SPI2->CR2 |= SPI_CR2_RXDMAEN; //DMA request is set with every RXNE flag
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <ad7676_spi_configuration+0x70>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <ad7676_spi_configuration+0x70>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6053      	str	r3, [r2, #4]

//	SPI2->CR2 = SPI_CR2_DS | SPI_CR2_SSOE |
//			SPI_CR2_RXDMAEN;
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40003800 	.word	0x40003800

0800084c <ad7676_dma_configuration>:

static void ad7676_dma_configuration(){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
	DMA1_Channel4->CCR |= DMA_CCR_PL_1; //priority high
 8000852:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000858:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800085c:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_MSIZE_0; //mem size 16-bit
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1e      	ldr	r2, [pc, #120]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000864:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000868:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_PSIZE_0; //periph size 16-bit
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <ad7676_dma_configuration+0x90>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000874:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_MINC; //mem increment
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <ad7676_dma_configuration+0x90>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6013      	str	r3, [r2, #0]
//	DMA1_Channel4->CCR |= DMA_CCR_PINC; //periph increment - we reads spi register so its always the same
//	DMA1_Channel4->CCR |= DMA_CCR_DIR 0
	DMA1_Channel4->CCR |= DMA_CCR_TCIE; //transfer complete interrupt en
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <ad7676_dma_configuration+0x90>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6013      	str	r3, [r2, #0]
//	DMA1_Channel4->CCR |= DMA_CCR_EN; //TODO check if needed to set
	uint8_t num_channel = 4;
 800088e:	2304      	movs	r3, #4
 8000890:	71fb      	strb	r3, [r7, #7]
	uint8_t num_half_bytes = 4;
 8000892:	2304      	movs	r3, #4
 8000894:	71bb      	strb	r3, [r7, #6]
	DMA1_CSELR->CSELR &= ~(0xF << num_half_bytes*(num_channel-1));
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <ad7676_dma_configuration+0x94>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	79f9      	ldrb	r1, [r7, #7]
 800089e:	3901      	subs	r1, #1
 80008a0:	fb01 f202 	mul.w	r2, r1, r2
 80008a4:	210f      	movs	r1, #15
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	43d2      	mvns	r2, r2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a0c      	ldr	r2, [pc, #48]	@ (80008e0 <ad7676_dma_configuration+0x94>)
 80008b0:	400b      	ands	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
	DMA1_CSELR->CSELR |= 1 << num_half_bytes*(num_channel-1);
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <ad7676_dma_configuration+0x94>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	79ba      	ldrb	r2, [r7, #6]
 80008ba:	79f9      	ldrb	r1, [r7, #7]
 80008bc:	3901      	subs	r1, #1
 80008be:	fb01 f202 	mul.w	r2, r1, r2
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	4611      	mov	r1, r2
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <ad7676_dma_configuration+0x94>)
 80008cc:	430b      	orrs	r3, r1
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40020044 	.word	0x40020044
 80008e0:	400200a8 	.word	0x400200a8

080008e4 <ad7676_clock_configuration>:

static void ad7676_clock_configuration(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI2_CLK_ENABLE();
 80008ea:	4b28      	ldr	r3, [pc, #160]	@ (800098c <ad7676_clock_configuration+0xa8>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ee:	4a27      	ldr	r2, [pc, #156]	@ (800098c <ad7676_clock_configuration+0xa8>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <ad7676_clock_configuration+0xa8>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <ad7676_clock_configuration+0xa8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a21      	ldr	r2, [pc, #132]	@ (800098c <ad7676_clock_configuration+0xa8>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <ad7676_clock_configuration+0xa8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <ad7676_clock_configuration+0xa8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a1b      	ldr	r2, [pc, #108]	@ (800098c <ad7676_clock_configuration+0xa8>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <ad7676_clock_configuration+0xa8>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000942:	2304      	movs	r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <ad7676_clock_configuration+0xac>)
 800095e:	f000 fbcb 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000962:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000966:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000974:	2305      	movs	r3, #5
 8000976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <ad7676_clock_configuration+0xb0>)
 8000980:	f000 fbba 	bl	80010f8 <HAL_GPIO_Init>

//    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(SPI2_IRQn);
}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400

08000998 <ad7676_dma_enable_stream>:

static void ad7676_dma_enable_stream(uint16_t data_size, uint32_t src_addr, uint32_t dst_addr){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	81fb      	strh	r3, [r7, #14]
	DMA1_Channel4->CNDTR = data_size;
 80009a6:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <ad7676_dma_enable_stream+0x2c>)
 80009a8:	89fb      	ldrh	r3, [r7, #14]
 80009aa:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CPAR = src_addr;
 80009ac:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <ad7676_dma_enable_stream+0x2c>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	6093      	str	r3, [r2, #8]
	DMA1_Channel4->CMAR = dst_addr;
 80009b2:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <ad7676_dma_enable_stream+0x2c>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40020044 	.word	0x40020044

080009c8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	SPI2->CR1 &= ~SPI_CR1_SPE;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <SPI2_IRQHandler+0x4c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <SPI2_IRQHandler+0x4c>)
 80009d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009d6:	6013      	str	r3, [r2, #0]
	spi_itr_count++;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <SPI2_IRQHandler+0x50>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <SPI2_IRQHandler+0x50>)
 80009e0:	6013      	str	r3, [r2, #0]
	while((SPI2->SR & SPI_CR1_SPE) != 0);
 80009e2:	bf00      	nop
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <SPI2_IRQHandler+0x4c>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f9      	bne.n	80009e4 <SPI2_IRQHandler+0x1c>
	while((SPI2->SR & SPI_SR_FRLVL) != 0);
 80009f0:	bf00      	nop
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <SPI2_IRQHandler+0x4c>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f9      	bne.n	80009f2 <SPI2_IRQHandler+0x2a>
	__NVIC_ClearPendingIRQ(SPI2_IRQn);
 80009fe:	2024      	movs	r0, #36	@ 0x24
 8000a00:	f7ff fd5a 	bl	80004b8 <__NVIC_ClearPendingIRQ>
	SPI2->CR1 |= SPI_CR1_SPE;
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <SPI2_IRQHandler+0x4c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a02      	ldr	r2, [pc, #8]	@ (8000a14 <SPI2_IRQHandler+0x4c>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40003800 	.word	0x40003800
 8000a18:	20001ff8 	.word	0x20001ff8

08000a1c <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void) //Remember to comment out this line in stm32l4xx_it.c row 170
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF4){
 8000a22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <DMA1_Channel4_IRQHandler+0xb8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d04b      	beq.n	8000ac6 <DMA1_Channel4_IRQHandler+0xaa>

		SPI2->CR2 &= ~(SPI_CR2_RXDMAEN);
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4a29      	ldr	r2, [pc, #164]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a34:	f023 0301 	bic.w	r3, r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
		SPI2->CR1 &= ~(SPI_CR1_SPE);
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a26      	ldr	r2, [pc, #152]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a44:	6013      	str	r3, [r2, #0]
		while((SPI2->SR & SPI_SR_BSY) != 0);
 8000a46:	bf00      	nop
 8000a48:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f9      	bne.n	8000a48 <DMA1_Channel4_IRQHandler+0x2c>
		DMA1->IFCR |= DMA_IFCR_CTCIF4; // clear interrupt
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <DMA1_Channel4_IRQHandler+0xb8>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <DMA1_Channel4_IRQHandler+0xb8>)
 8000a5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a5e:	6053      	str	r3, [r2, #4]
		SPI2->CR2 &= ~SPI_CR2_RXNEIE;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <DMA1_Channel4_IRQHandler+0xbc>)
 8000a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a6a:	6053      	str	r3, [r2, #4]
		AD7676_CS_ON;
 8000a6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a74:	619a      	str	r2, [r3, #24]
		buf_ptr = (buf_ptr+1)%1000;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <DMA1_Channel4_IRQHandler+0xc0>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ae0 <DMA1_Channel4_IRQHandler+0xc4>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	1191      	asrs	r1, r2, #6
 8000a84:	17da      	asrs	r2, r3, #31
 8000a86:	1a8a      	subs	r2, r1, r2
 8000a88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a8c:	fb01 f202 	mul.w	r2, r1, r2
 8000a90:	1a9a      	subs	r2, r3, r2
 8000a92:	b292      	uxth	r2, r2
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <DMA1_Channel4_IRQHandler+0xc0>)
 8000a96:	801a      	strh	r2, [r3, #0]
		dma_itr_count++;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <DMA1_Channel4_IRQHandler+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ae4 <DMA1_Channel4_IRQHandler+0xc8>)
 8000aa0:	6013      	str	r3, [r2, #0]
		AD7676_CNVST_ON;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <DMA1_Channel4_IRQHandler+0xcc>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa8:	619a      	str	r2, [r3, #24]
		AD7676_CONVST_DELAY;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	e003      	b.n	8000ab8 <DMA1_Channel4_IRQHandler+0x9c>
 8000ab0:	bf00      	nop
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d9f8      	bls.n	8000ab0 <DMA1_Channel4_IRQHandler+0x94>
		AD7676_CNVST_OFF;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <DMA1_Channel4_IRQHandler+0xcc>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
	} //do sth if DMA transfer complete is raised
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40003800 	.word	0x40003800
 8000adc:	20001ff0 	.word	0x20001ff0
 8000ae0:	10624dd3 	.word	0x10624dd3
 8000ae4:	20001ff4 	.word	0x20001ff4
 8000ae8:	48000800 	.word	0x48000800

08000aec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ADC_BUSY_Pin){
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000afc:	d116      	bne.n	8000b2c <HAL_GPIO_EXTI_Callback+0x40>
		if (buf_ptr > last_buf_ptr || buf_ptr == 0){
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b00:	881a      	ldrh	r2, [r3, #0]
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d803      	bhi.n	8000b12 <HAL_GPIO_EXTI_Callback+0x26>
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10c      	bne.n	8000b2c <HAL_GPIO_EXTI_Callback+0x40>
			  ad7676_spi_read_raw((uint8_t*) buf[buf_ptr], 4);
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f80e 	bl	8000b40 <ad7676_spi_read_raw>
			  last_buf_ptr = buf_ptr;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b26:	881a      	ldrh	r2, [r3, #0]
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b2a:	801a      	strh	r2, [r3, #0]
		  }
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20001ff0 	.word	0x20001ff0
 8000b38:	20001ff2 	.word	0x20001ff2
 8000b3c:	200000b0 	.word	0x200000b0

08000b40 <ad7676_spi_read_raw>:

static void ad7676_spi_read_raw(uint8_t* buf, uint16_t size){ //try changing to 16_bit
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
	AD7676_CS_OFF;
 8000b4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b54:	629a      	str	r2, [r3, #40]	@ 0x28
	SPI2->CR1 &= ~(SPI_CR1_SPE);
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b60:	6013      	str	r3, [r2, #0]
	SPI2->CR2 &= ~(SPI_CR2_RXDMAEN);
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000b68:	f023 0301 	bic.w	r3, r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
	SPI2->CR2 &= ~(SPI_CR2_FRXTH);
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b78:	6053      	str	r3, [r2, #4]

	DMA1_Channel4->CCR &= ~(DMA_CCR_EN);
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <ad7676_spi_read_raw+0x9c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <ad7676_spi_read_raw+0x9c>)
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	6013      	str	r3, [r2, #0]
	DMA1->IFCR |= DMA_ISR_GIF4;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <ad7676_spi_read_raw+0xa0>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <ad7676_spi_read_raw+0xa0>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b90:	6053      	str	r3, [r2, #4]
	ad7676_dma_enable_stream(size, (uint32_t)&(SPI2->DR), (uint32_t)buf);
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4913      	ldr	r1, [pc, #76]	@ (8000be4 <ad7676_spi_read_raw+0xa4>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fefd 	bl	8000998 <ad7676_dma_enable_stream>
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <ad7676_spi_read_raw+0x9c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bdc <ad7676_spi_read_raw+0x9c>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_EN; //DMA en
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <ad7676_spi_read_raw+0x9c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <ad7676_spi_read_raw+0x9c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6013      	str	r3, [r2, #0]

	SPI2->CR1 |= SPI_CR1_SPE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc0:	6013      	str	r3, [r2, #0]
	SPI2->CR2 |= SPI_CR2_RXDMAEN; //enable RX DMA interrupt
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <ad7676_spi_read_raw+0x98>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
//	SPI2->CR2 |= SPI_CR2_RXNEIE;
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40003800 	.word	0x40003800
 8000bdc:	40020044 	.word	0x40020044
 8000be0:	40020000 	.word	0x40020000
 8000be4:	4000380c 	.word	0x4000380c

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2288      	movs	r2, #136	@ 0x88
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fc66 	bl	800352e <memset>
  if(huart->Instance==USART2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <HAL_UART_MspInit+0xb0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d13b      	bne.n	8000ce4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fa7b 	bl	8002174 <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c84:	f7ff ffb0 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8c:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca4:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce0:	f000 fa0a 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ce4:	bf00      	nop
 8000ce6:	37b0      	adds	r7, #176	@ 0xb0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f8a3 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_BUSY_Pin);
 8000d56:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d5a:	f000 fb8f 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fbc3 	bl	8003540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fb9b 	bl	80004f4 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dcc:	080035f8 	.word	0x080035f8
  ldr r2, =_sbss
 8000dd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd4:	20002000 	.word	0x20002000

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_Init+0x3c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <HAL_Init+0x3c>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f000 f93e 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 f80f 	bl	8000e1c <HAL_InitTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	e001      	b.n	8000e0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0a:	f7ff fef3 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40022000 	.word	0x40022000

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <HAL_InitTick+0x6c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d023      	beq.n	8000e78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_InitTick+0x70>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_InitTick+0x6c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f949 	bl	80010de <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d809      	bhi.n	8000e6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f913 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e64:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <HAL_InitTick+0x74>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e007      	b.n	8000e7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e004      	b.n	8000e7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e001      	b.n	8000e7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20001ffc 	.word	0x20001ffc

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20001ffc 	.word	0x20001ffc

08000ed4 <__NVIC_SetPriorityGrouping>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e17f      	b.n	8001408 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8171 	beq.w	8001402 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d005      	beq.n	8001138 <HAL_GPIO_Init+0x40>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d130      	bne.n	800119a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116e:	2201      	movs	r2, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 0201 	and.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d118      	bne.n	80011d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	6939      	ldr	r1, [r7, #16]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80ac 	beq.w	8001402 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001428 <HAL_GPIO_Init+0x330>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001428 <HAL_GPIO_Init+0x330>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <HAL_GPIO_Init+0x330>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c2:	4a5a      	ldr	r2, [pc, #360]	@ (800142c <HAL_GPIO_Init+0x334>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x242>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001430 <HAL_GPIO_Init+0x338>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x23e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <HAL_GPIO_Init+0x33c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x23a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4d      	ldr	r2, [pc, #308]	@ (8001438 <HAL_GPIO_Init+0x340>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x236>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <HAL_GPIO_Init+0x344>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x232>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	@ (8001440 <HAL_GPIO_Init+0x348>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x22e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4a      	ldr	r2, [pc, #296]	@ (8001444 <HAL_GPIO_Init+0x34c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x22a>
 800131e:	2306      	movs	r3, #6
 8001320:	e00c      	b.n	800133c <HAL_GPIO_Init+0x244>
 8001322:	2307      	movs	r3, #7
 8001324:	e00a      	b.n	800133c <HAL_GPIO_Init+0x244>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x244>
 800132a:	2304      	movs	r3, #4
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x244>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x244>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x244>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x244>
 800133a:	2300      	movs	r3, #0
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800134c:	4937      	ldr	r1, [pc, #220]	@ (800142c <HAL_GPIO_Init+0x334>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800135a:	4b3b      	ldr	r3, [pc, #236]	@ (8001448 <HAL_GPIO_Init+0x350>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800137e:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_GPIO_Init+0x350>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001384:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_GPIO_Init+0x350>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a8:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <HAL_GPIO_Init+0x350>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <HAL_GPIO_Init+0x350>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_GPIO_Init+0x350>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_GPIO_Init+0x350>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_GPIO_Init+0x350>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	f47f ae78 	bne.w	8001108 <HAL_GPIO_Init+0x10>
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	48000400 	.word	0x48000400
 8001434:	48000800 	.word	0x48000800
 8001438:	48000c00 	.word	0x48000c00
 800143c:	48001000 	.word	0x48001000
 8001440:	48001400 	.word	0x48001400
 8001444:	48001800 	.word	0x48001800
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb26 	bl	8000aec <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d6:	d130      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d8:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014e4:	d038      	beq.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2232      	movs	r2, #50	@ 0x32
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9b      	lsrs	r3, r3, #18
 8001508:	3301      	adds	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150c:	e002      	b.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3b01      	subs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001520:	d102      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f2      	bne.n	800150e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001534:	d110      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e00f      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001546:	d007      	beq.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e3ca      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001586:	4b97      	ldr	r3, [pc, #604]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001590:	4b94      	ldr	r3, [pc, #592]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80e4 	beq.w	8001770 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_RCC_OscConfig+0x4a>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	f040 808b 	bne.w	80016cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 8087 	bne.w	80016cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015be:	4b89      	ldr	r3, [pc, #548]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x62>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e3a2      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	4b82      	ldr	r3, [pc, #520]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <HAL_RCC_OscConfig+0x7c>
 80015e6:	4b7f      	ldr	r3, [pc, #508]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ee:	e005      	b.n	80015fc <HAL_RCC_OscConfig+0x88>
 80015f0:	4b7c      	ldr	r3, [pc, #496]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d223      	bcs.n	8001648 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd55 	bl	80020b4 <RCC_SetFlashLatencyFromMSIRange>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e383      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4b73      	ldr	r3, [pc, #460]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a72      	ldr	r2, [pc, #456]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b70      	ldr	r3, [pc, #448]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	496d      	ldr	r1, [pc, #436]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001632:	4b6c      	ldr	r3, [pc, #432]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	4968      	ldr	r1, [pc, #416]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
 8001646:	e025      	b.n	8001694 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001648:	4b66      	ldr	r3, [pc, #408]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b63      	ldr	r3, [pc, #396]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4960      	ldr	r1, [pc, #384]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001666:	4b5f      	ldr	r3, [pc, #380]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	495b      	ldr	r1, [pc, #364]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fd15 	bl	80020b4 <RCC_SetFlashLatencyFromMSIRange>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e343      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001694:	f000 fc4a 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	4950      	ldr	r1, [pc, #320]	@ (80017e8 <HAL_RCC_OscConfig+0x274>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	4a4e      	ldr	r2, [pc, #312]	@ (80017ec <HAL_RCC_OscConfig+0x278>)
 80016b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fbaf 	bl	8000e1c <HAL_InitTick>
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d052      	beq.n	800176e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	e327      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d032      	beq.n	800173a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016d4:	4b43      	ldr	r3, [pc, #268]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a42      	ldr	r2, [pc, #264]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fbec 	bl	8000ebc <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e8:	f7ff fbe8 	bl	8000ebc <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e310      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016fa:	4b3a      	ldr	r3, [pc, #232]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4931      	ldr	r1, [pc, #196]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001724:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	492c      	ldr	r1, [pc, #176]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e01a      	b.n	8001770 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800173a:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001746:	f7ff fbb9 	bl	8000ebc <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174e:	f7ff fbb5 	bl	8000ebc <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e2dd      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x1da>
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d074      	beq.n	8001866 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x21a>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d10e      	bne.n	80017a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d10b      	bne.n	80017a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d064      	beq.n	8001864 <HAL_RCC_OscConfig+0x2f0>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d160      	bne.n	8001864 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e2ba      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x24a>
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e026      	b.n	800180c <HAL_RCC_OscConfig+0x298>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c6:	d115      	bne.n	80017f4 <HAL_RCC_OscConfig+0x280>
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a02      	ldr	r2, [pc, #8]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x298>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	080035a0 	.word	0x080035a0
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004
 80017f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a9f      	ldr	r2, [pc, #636]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b9d      	ldr	r3, [pc, #628]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a9c      	ldr	r2, [pc, #624]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb52 	bl	8000ebc <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb4e 	bl	8000ebc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e276      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182e:	4b92      	ldr	r3, [pc, #584]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x2a8>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb3e 	bl	8000ebc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fb3a 	bl	8000ebc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e262      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001856:	4b88      	ldr	r3, [pc, #544]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x2d0>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d060      	beq.n	8001934 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d005      	beq.n	8001884 <HAL_RCC_OscConfig+0x310>
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d119      	bne.n	80018b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d116      	bne.n	80018b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001884:	4b7c      	ldr	r3, [pc, #496]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x328>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e23f      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b76      	ldr	r3, [pc, #472]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	4973      	ldr	r1, [pc, #460]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	e040      	b.n	8001934 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d023      	beq.n	8001902 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6e      	ldr	r2, [pc, #440]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff faf9 	bl	8000ebc <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff faf5 	bl	8000ebc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e21d      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e0:	4b65      	ldr	r3, [pc, #404]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b62      	ldr	r3, [pc, #392]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	495f      	ldr	r1, [pc, #380]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
 8001900:	e018      	b.n	8001934 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001902:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5c      	ldr	r2, [pc, #368]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fad5 	bl	8000ebc <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fad1 	bl	8000ebc <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1f9      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03c      	beq.n	80019ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01c      	beq.n	8001982 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001948:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff fab0 	bl	8000ebc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff faac 	bl	8000ebc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1d4      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001972:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x3ec>
 8001980:	e01b      	b.n	80019ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001988:	4a3b      	ldr	r2, [pc, #236]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff fa93 	bl	8000ebc <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199a:	f7ff fa8f 	bl	8000ebc <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e1b7      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ac:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ef      	bne.n	800199a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a6 	beq.w	8001b14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10d      	bne.n	80019f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e4:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f0:	2301      	movs	r3, #1
 80019f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d118      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa56 	bl	8000ebc <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff fa52 	bl	8000ebc <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e17a      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4d8>
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a40:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4a:	e029      	b.n	8001aa0 <HAL_RCC_OscConfig+0x52c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d115      	bne.n	8001a80 <HAL_RCC_OscConfig+0x50c>
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5a:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6a:	4a03      	ldr	r2, [pc, #12]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x52c>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	4b9c      	ldr	r3, [pc, #624]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a86:	4a9b      	ldr	r2, [pc, #620]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a90:	4b98      	ldr	r3, [pc, #608]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a96:	4a97      	ldr	r2, [pc, #604]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d016      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fa08 	bl	8000ebc <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fa04 	bl	8000ebc <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e12a      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ed      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x53c>
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f9f1 	bl	8000ebc <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff f9ed 	bl	8000ebc <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e113      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ed      	bne.n	8001ade <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	4a79      	ldr	r2, [pc, #484]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80fe 	beq.w	8001d1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	f040 80d0 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b28:	4b72      	ldr	r3, [pc, #456]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d130      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	3b01      	subs	r3, #1
 8001b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d127      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d11f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b68:	2a07      	cmp	r2, #7
 8001b6a:	bf14      	ite	ne
 8001b6c:	2201      	movne	r2, #1
 8001b6e:	2200      	moveq	r2, #0
 8001b70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d113      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	3b01      	subs	r3, #1
 8001b98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d06e      	beq.n	8001c7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d069      	beq.n	8001c78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba4:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bb0:	4b50      	ldr	r3, [pc, #320]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0ad      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bcc:	f7ff f976 	bl	8000ebc <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f972 	bl	8000ebc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e09a      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be6:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c02:	3a01      	subs	r2, #1
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c0c:	0212      	lsls	r2, r2, #8
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c14:	0852      	lsrs	r2, r2, #1
 8001c16:	3a01      	subs	r2, #1
 8001c18:	0552      	lsls	r2, r2, #21
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c20:	0852      	lsrs	r2, r2, #1
 8001c22:	3a01      	subs	r2, #1
 8001c24:	0652      	lsls	r2, r2, #25
 8001c26:	4311      	orrs	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c2c:	0912      	lsrs	r2, r2, #4
 8001c2e:	0452      	lsls	r2, r2, #17
 8001c30:	430a      	orrs	r2, r1
 8001c32:	4930      	ldr	r1, [pc, #192]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c50:	f7ff f934 	bl	8000ebc <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f930 	bl	8000ebc <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e058      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c76:	e050      	b.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e04f      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d148      	bne.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ca0:	f7ff f90c 	bl	8000ebc <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f908 	bl	8000ebc <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e030      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x734>
 8001cc6:	e028      	b.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d023      	beq.n	8001d16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f8ef 	bl	8000ebc <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	e00c      	b.n	8001cfc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f8eb 	bl	8000ebc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d905      	bls.n	8001cfc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e013      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ec      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4905      	ldr	r1, [pc, #20]	@ (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_RCC_OscConfig+0x7b4>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
 8001d14:	e001      	b.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	feeefffc 	.word	0xfeeefffc

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0e7      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b75      	ldr	r3, [pc, #468]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0207 	bic.w	r2, r3, #7
 8001d56:	4970      	ldr	r1, [pc, #448]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0cf      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b63      	ldr	r3, [pc, #396]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4960      	ldr	r1, [pc, #384]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d04c      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d121      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0a6      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dca:	4b54      	ldr	r3, [pc, #336]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e09a      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e08e      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df2:	4b4a      	ldr	r3, [pc, #296]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e086      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4943      	ldr	r1, [pc, #268]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e14:	f7ff f852 	bl	8000ebc <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f84e 	bl	8000ebc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e06e      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b3a      	ldr	r3, [pc, #232]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d010      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d208      	bcs.n	8001e72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	492b      	ldr	r1, [pc, #172]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d210      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 0207 	bic.w	r2, r3, #7
 8001e88:	4923      	ldr	r1, [pc, #140]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e036      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4918      	ldr	r1, [pc, #96]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4910      	ldr	r1, [pc, #64]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee0:	f000 f824 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	490b      	ldr	r1, [pc, #44]	@ (8001f20 <HAL_RCC_ClockConfig+0x1f4>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_RCC_ClockConfig+0x1fc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe ff89 	bl	8000e1c <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	080035a0 	.word	0x080035a0
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f44:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x34>
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d121      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d11e      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f60:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f6c:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f88:	4a2b      	ldr	r2, [pc, #172]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e004      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d134      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fba:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d003      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001fd0:	e005      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fda:	617b      	str	r3, [r7, #20]
      break;
 8001fdc:	e002      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	617b      	str	r3, [r7, #20]
      break;
 8001fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	3301      	adds	r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	fb03 f202 	mul.w	r2, r3, r2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0e5b      	lsrs	r3, r3, #25
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	3301      	adds	r3, #1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002024:	69bb      	ldr	r3, [r7, #24]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	080035b8 	.word	0x080035b8
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_RCC_GetHCLKFreq+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002060:	f7ff fff0 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4904      	ldr	r1, [pc, #16]	@ (8002084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	080035b0 	.word	0x080035b0

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800208c:	f7ff ffda 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	080035b0 	.word	0x080035b0

080020b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c0:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020cc:	f7ff f9ee 	bl	80014ac <HAL_PWREx_GetVoltageRange>
 80020d0:	6178      	str	r0, [r7, #20]
 80020d2:	e014      	b.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4a24      	ldr	r2, [pc, #144]	@ (800216c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020ec:	f7ff f9de 	bl	80014ac <HAL_PWREx_GetVoltageRange>
 80020f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002104:	d10b      	bne.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b80      	cmp	r3, #128	@ 0x80
 800210a:	d919      	bls.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002110:	d902      	bls.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002112:	2302      	movs	r3, #2
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e013      	b.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002118:	2301      	movs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e010      	b.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b80      	cmp	r3, #128	@ 0x80
 8002122:	d902      	bls.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002124:	2303      	movs	r3, #3
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e00a      	b.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	@ 0x80
 800212e:	d102      	bne.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002130:	2302      	movs	r3, #2
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e004      	b.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b70      	cmp	r3, #112	@ 0x70
 800213a:	d101      	bne.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 0207 	bic.w	r2, r3, #7
 8002148:	4909      	ldr	r1, [pc, #36]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002150:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	40022000 	.word	0x40022000

08002174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800217c:	2300      	movs	r3, #0
 800217e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002180:	2300      	movs	r3, #0
 8002182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218c:	2b00      	cmp	r3, #0
 800218e:	d041      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002194:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002198:	d02a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800219a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800219e:	d824      	bhi.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021a4:	d008      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021aa:	d81e      	bhi.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021b4:	d010      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021b6:	e018      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021b8:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a85      	ldr	r2, [pc, #532]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c4:	e015      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fabb 	bl	8002748 <RCCEx_PLLSAI1_Config>
 80021d2:	4603      	mov	r3, r0
 80021d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d6:	e00c      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3320      	adds	r3, #32
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fba6 	bl	8002930 <RCCEx_PLLSAI2_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e8:	e003      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	74fb      	strb	r3, [r7, #19]
      break;
 80021ee:	e000      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f8:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002206:	4973      	ldr	r1, [pc, #460]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800220e:	e001      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d041      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002224:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002228:	d02a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800222a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800222e:	d824      	bhi.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002230:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002234:	d008      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800223a:	d81e      	bhi.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002244:	d010      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002246:	e018      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002248:	4b62      	ldr	r3, [pc, #392]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a61      	ldr	r2, [pc, #388]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002252:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002254:	e015      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fa73 	bl	8002748 <RCCEx_PLLSAI1_Config>
 8002262:	4603      	mov	r3, r0
 8002264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002266:	e00c      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3320      	adds	r3, #32
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fb5e 	bl	8002930 <RCCEx_PLLSAI2_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002278:	e003      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	74fb      	strb	r3, [r7, #19]
      break;
 800227e:	e000      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002288:	4b52      	ldr	r3, [pc, #328]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002296:	494f      	ldr	r1, [pc, #316]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800229e:	e001      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a0 	beq.w	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b6:	4b47      	ldr	r3, [pc, #284]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00d      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a40      	ldr	r2, [pc, #256]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d8:	4b3e      	ldr	r3, [pc, #248]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e8:	4b3b      	ldr	r3, [pc, #236]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a3a      	ldr	r2, [pc, #232]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f4:	f7fe fde2 	bl	8000ebc <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022fa:	e009      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fc:	f7fe fdde 	bl	8000ebc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d902      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	74fb      	strb	r3, [r7, #19]
        break;
 800230e:	e005      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002310:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ef      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d15c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002322:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01f      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d019      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800234a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002352:	4a20      	ldr	r2, [pc, #128]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002362:	4a1c      	ldr	r2, [pc, #112]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800236c:	4a19      	ldr	r2, [pc, #100]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fd9d 	bl	8000ebc <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002384:	e00b      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fd99 	bl	8000ebc <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d902      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	74fb      	strb	r3, [r7, #19]
            break;
 800239c:	e006      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ec      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023c2:	4904      	ldr	r1, [pc, #16]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023ca:	e009      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
 80023d0:	e006      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e0:	7c7b      	ldrb	r3, [r7, #17]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fe:	4b98      	ldr	r3, [pc, #608]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f023 0203 	bic.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	4994      	ldr	r1, [pc, #592]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002420:	4b8f      	ldr	r3, [pc, #572]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f023 020c 	bic.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	498c      	ldr	r1, [pc, #560]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002442:	4b87      	ldr	r3, [pc, #540]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	4983      	ldr	r1, [pc, #524]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002464:	4b7e      	ldr	r3, [pc, #504]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	497b      	ldr	r1, [pc, #492]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002486:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002494:	4972      	ldr	r1, [pc, #456]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	496a      	ldr	r1, [pc, #424]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ca:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	4961      	ldr	r1, [pc, #388]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	4959      	ldr	r1, [pc, #356]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800250e:	4b54      	ldr	r3, [pc, #336]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002514:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251c:	4950      	ldr	r1, [pc, #320]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002530:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253e:	4948      	ldr	r1, [pc, #288]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002552:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002558:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	493f      	ldr	r1, [pc, #252]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d028      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002574:	4b3a      	ldr	r3, [pc, #232]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002582:	4937      	ldr	r1, [pc, #220]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002592:	d106      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002594:	4b32      	ldr	r3, [pc, #200]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a31      	ldr	r2, [pc, #196]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800259e:	60d3      	str	r3, [r2, #12]
 80025a0:	e011      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f8c8 	bl	8002748 <RCCEx_PLLSAI1_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d028      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025d2:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e0:	491f      	ldr	r1, [pc, #124]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f0:	d106      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025fc:	60d3      	str	r3, [r2, #12]
 80025fe:	e011      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002608:	d10c      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f899 	bl	8002748 <RCCEx_PLLSAI1_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d02b      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800264e:	d109      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002650:	4b03      	ldr	r3, [pc, #12]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a02      	ldr	r2, [pc, #8]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800265a:	60d3      	str	r3, [r2, #12]
 800265c:	e014      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f867 	bl	8002748 <RCCEx_PLLSAI1_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02f      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002694:	4b2b      	ldr	r3, [pc, #172]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026a2:	4928      	ldr	r1, [pc, #160]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026b2:	d10d      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f844 	bl	8002748 <RCCEx_PLLSAI1_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d014      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	74bb      	strb	r3, [r7, #18]
 80026ce:	e011      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3320      	adds	r3, #32
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f925 	bl	8002930 <RCCEx_PLLSAI2_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002700:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002706:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800270e:	490d      	ldr	r1, [pc, #52]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002728:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002732:	4904      	ldr	r1, [pc, #16]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800273a:	7cbb      	ldrb	r3, [r7, #18]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000

08002748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002756:	4b75      	ldr	r3, [pc, #468]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d018      	beq.n	8002794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002762:	4b72      	ldr	r3, [pc, #456]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d10d      	bne.n	800278e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
       ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800277a:	4b6c      	ldr	r3, [pc, #432]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
       ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d047      	beq.n	800281e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	e044      	b.n	800281e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d018      	beq.n	80027ce <RCCEx_PLLSAI1_Config+0x86>
 800279c:	2b03      	cmp	r3, #3
 800279e:	d825      	bhi.n	80027ec <RCCEx_PLLSAI1_Config+0xa4>
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d002      	beq.n	80027aa <RCCEx_PLLSAI1_Config+0x62>
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d009      	beq.n	80027bc <RCCEx_PLLSAI1_Config+0x74>
 80027a8:	e020      	b.n	80027ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027aa:	4b60      	ldr	r3, [pc, #384]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ba:	e01a      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027bc:	4b5b      	ldr	r3, [pc, #364]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d116      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027cc:	e013      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ea:	e006      	b.n	80027fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e004      	b.n	80027fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f2:	bf00      	nop
 80027f4:	e002      	b.n	80027fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002802:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	430b      	orrs	r3, r1
 8002818:	4944      	ldr	r1, [pc, #272]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d17d      	bne.n	8002920 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002824:	4b41      	ldr	r3, [pc, #260]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a40      	ldr	r2, [pc, #256]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800282e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002830:	f7fe fb44 	bl	8000ebc <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002836:	e009      	b.n	800284c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002838:	f7fe fb40 	bl	8000ebc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d902      	bls.n	800284c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	73fb      	strb	r3, [r7, #15]
        break;
 800284a:	e005      	b.n	8002858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800284c:	4b37      	ldr	r3, [pc, #220]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ef      	bne.n	8002838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d160      	bne.n	8002920 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d111      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002864:	4b31      	ldr	r3, [pc, #196]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800286c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6892      	ldr	r2, [r2, #8]
 8002874:	0211      	lsls	r1, r2, #8
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68d2      	ldr	r2, [r2, #12]
 800287a:	0912      	lsrs	r2, r2, #4
 800287c:	0452      	lsls	r2, r2, #17
 800287e:	430a      	orrs	r2, r1
 8002880:	492a      	ldr	r1, [pc, #168]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
 8002886:	e027      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d112      	bne.n	80028b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288e:	4b27      	ldr	r3, [pc, #156]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002896:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6892      	ldr	r2, [r2, #8]
 800289e:	0211      	lsls	r1, r2, #8
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6912      	ldr	r2, [r2, #16]
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0552      	lsls	r2, r2, #21
 80028aa:	430a      	orrs	r2, r1
 80028ac:	491f      	ldr	r1, [pc, #124]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	610b      	str	r3, [r1, #16]
 80028b2:	e011      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b4:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6952      	ldr	r2, [r2, #20]
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0652      	lsls	r2, r2, #25
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4916      	ldr	r1, [pc, #88]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028d8:	4b14      	ldr	r3, [pc, #80]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a13      	ldr	r2, [pc, #76]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe faea 	bl	8000ebc <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ea:	e009      	b.n	8002900 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028ec:	f7fe fae6 	bl	8000ebc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d902      	bls.n	8002900 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	73fb      	strb	r3, [r7, #15]
          break;
 80028fe:	e005      	b.n	800290c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002900:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4904      	ldr	r1, [pc, #16]	@ (800292c <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800293e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d018      	beq.n	800297c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800294a:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d10d      	bne.n	8002976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
       ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002962:	4b61      	ldr	r3, [pc, #388]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
       ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d047      	beq.n	8002a06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	e044      	b.n	8002a06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d018      	beq.n	80029b6 <RCCEx_PLLSAI2_Config+0x86>
 8002984:	2b03      	cmp	r3, #3
 8002986:	d825      	bhi.n	80029d4 <RCCEx_PLLSAI2_Config+0xa4>
 8002988:	2b01      	cmp	r3, #1
 800298a:	d002      	beq.n	8002992 <RCCEx_PLLSAI2_Config+0x62>
 800298c:	2b02      	cmp	r3, #2
 800298e:	d009      	beq.n	80029a4 <RCCEx_PLLSAI2_Config+0x74>
 8002990:	e020      	b.n	80029d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002992:	4b55      	ldr	r3, [pc, #340]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d11d      	bne.n	80029da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a2:	e01a      	b.n	80029da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a4:	4b50      	ldr	r3, [pc, #320]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d116      	bne.n	80029de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e013      	b.n	80029de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029b6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029c2:	4b49      	ldr	r3, [pc, #292]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029d2:	e006      	b.n	80029e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e004      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	430b      	orrs	r3, r1
 8002a00:	4939      	ldr	r1, [pc, #228]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d167      	bne.n	8002adc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a35      	ldr	r2, [pc, #212]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7fe fa50 	bl	8000ebc <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a1e:	e009      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a20:	f7fe fa4c 	bl	8000ebc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	73fb      	strb	r3, [r7, #15]
        break;
 8002a32:	e005      	b.n	8002a40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ef      	bne.n	8002a20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d14a      	bne.n	8002adc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d111      	bne.n	8002a70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a4c:	4b26      	ldr	r3, [pc, #152]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6892      	ldr	r2, [r2, #8]
 8002a5c:	0211      	lsls	r1, r2, #8
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68d2      	ldr	r2, [r2, #12]
 8002a62:	0912      	lsrs	r2, r2, #4
 8002a64:	0452      	lsls	r2, r2, #17
 8002a66:	430a      	orrs	r2, r1
 8002a68:	491f      	ldr	r1, [pc, #124]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	614b      	str	r3, [r1, #20]
 8002a6e:	e011      	b.n	8002a94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	0211      	lsls	r1, r2, #8
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6912      	ldr	r2, [r2, #16]
 8002a86:	0852      	lsrs	r2, r2, #1
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	0652      	lsls	r2, r2, #25
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4916      	ldr	r1, [pc, #88]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fa0c 	bl	8000ebc <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa8:	f7fe fa08 	bl	8000ebc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4904      	ldr	r1, [pc, #16]	@ (8002ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e040      	b.n	8002b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe f894 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	@ 0x24
 8002b18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fae0 	bl	80030f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f825 	bl	8002b88 <UART_SetConfig>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e01b      	b.n	8002b80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fb5f 	bl	800323c <UART_CheckIdleState>
 8002b7e:	4603      	mov	r3, r0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b08a      	sub	sp, #40	@ 0x28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4ba4      	ldr	r3, [pc, #656]	@ (8002e48 <UART_SetConfig+0x2c0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a99      	ldr	r2, [pc, #612]	@ (8002e4c <UART_SetConfig+0x2c4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a90      	ldr	r2, [pc, #576]	@ (8002e50 <UART_SetConfig+0x2c8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d126      	bne.n	8002c60 <UART_SetConfig+0xd8>
 8002c12:	4b90      	ldr	r3, [pc, #576]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d81b      	bhi.n	8002c58 <UART_SetConfig+0xd0>
 8002c20:	a201      	add	r2, pc, #4	@ (adr r2, 8002c28 <UART_SetConfig+0xa0>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c49 	.word	0x08002c49
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c51 	.word	0x08002c51
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c3e:	e116      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002c40:	2302      	movs	r3, #2
 8002c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c46:	e112      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c4e:	e10e      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002c50:	2308      	movs	r3, #8
 8002c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c56:	e10a      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c5e:	e106      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7c      	ldr	r2, [pc, #496]	@ (8002e58 <UART_SetConfig+0x2d0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d138      	bne.n	8002cdc <UART_SetConfig+0x154>
 8002c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d82d      	bhi.n	8002cd4 <UART_SetConfig+0x14c>
 8002c78:	a201      	add	r2, pc, #4	@ (adr r2, 8002c80 <UART_SetConfig+0xf8>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002cb5 	.word	0x08002cb5
 8002c84:	08002cd5 	.word	0x08002cd5
 8002c88:	08002cd5 	.word	0x08002cd5
 8002c8c:	08002cd5 	.word	0x08002cd5
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002cd5 	.word	0x08002cd5
 8002c98:	08002cd5 	.word	0x08002cd5
 8002c9c:	08002cd5 	.word	0x08002cd5
 8002ca0:	08002cbd 	.word	0x08002cbd
 8002ca4:	08002cd5 	.word	0x08002cd5
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	08002cd5 	.word	0x08002cd5
 8002cb0:	08002ccd 	.word	0x08002ccd
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cba:	e0d8      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc2:	e0d4      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cca:	e0d0      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002ccc:	2308      	movs	r3, #8
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd2:	e0cc      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cda:	e0c8      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8002e5c <UART_SetConfig+0x2d4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d125      	bne.n	8002d32 <UART_SetConfig+0x1aa>
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cf0:	2b30      	cmp	r3, #48	@ 0x30
 8002cf2:	d016      	beq.n	8002d22 <UART_SetConfig+0x19a>
 8002cf4:	2b30      	cmp	r3, #48	@ 0x30
 8002cf6:	d818      	bhi.n	8002d2a <UART_SetConfig+0x1a2>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d00a      	beq.n	8002d12 <UART_SetConfig+0x18a>
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d814      	bhi.n	8002d2a <UART_SetConfig+0x1a2>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <UART_SetConfig+0x182>
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d008      	beq.n	8002d1a <UART_SetConfig+0x192>
 8002d08:	e00f      	b.n	8002d2a <UART_SetConfig+0x1a2>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d10:	e0ad      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d12:	2302      	movs	r3, #2
 8002d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d18:	e0a9      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d20:	e0a5      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d22:	2308      	movs	r3, #8
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d28:	e0a1      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d30:	e09d      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a4a      	ldr	r2, [pc, #296]	@ (8002e60 <UART_SetConfig+0x2d8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d125      	bne.n	8002d88 <UART_SetConfig+0x200>
 8002d3c:	4b45      	ldr	r3, [pc, #276]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d48:	d016      	beq.n	8002d78 <UART_SetConfig+0x1f0>
 8002d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d4c:	d818      	bhi.n	8002d80 <UART_SetConfig+0x1f8>
 8002d4e:	2b80      	cmp	r3, #128	@ 0x80
 8002d50:	d00a      	beq.n	8002d68 <UART_SetConfig+0x1e0>
 8002d52:	2b80      	cmp	r3, #128	@ 0x80
 8002d54:	d814      	bhi.n	8002d80 <UART_SetConfig+0x1f8>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <UART_SetConfig+0x1d8>
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	d008      	beq.n	8002d70 <UART_SetConfig+0x1e8>
 8002d5e:	e00f      	b.n	8002d80 <UART_SetConfig+0x1f8>
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d66:	e082      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d6e:	e07e      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d70:	2304      	movs	r3, #4
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d76:	e07a      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d7e:	e076      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d80:	2310      	movs	r3, #16
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d86:	e072      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a35      	ldr	r2, [pc, #212]	@ (8002e64 <UART_SetConfig+0x2dc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12a      	bne.n	8002de8 <UART_SetConfig+0x260>
 8002d92:	4b30      	ldr	r3, [pc, #192]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002da0:	d01a      	beq.n	8002dd8 <UART_SetConfig+0x250>
 8002da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002da6:	d81b      	bhi.n	8002de0 <UART_SetConfig+0x258>
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dac:	d00c      	beq.n	8002dc8 <UART_SetConfig+0x240>
 8002dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db2:	d815      	bhi.n	8002de0 <UART_SetConfig+0x258>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <UART_SetConfig+0x238>
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dbc:	d008      	beq.n	8002dd0 <UART_SetConfig+0x248>
 8002dbe:	e00f      	b.n	8002de0 <UART_SetConfig+0x258>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dc6:	e052      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dce:	e04e      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dd6:	e04a      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002dd8:	2308      	movs	r3, #8
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dde:	e046      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002de0:	2310      	movs	r3, #16
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de6:	e042      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <UART_SetConfig+0x2c4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d13a      	bne.n	8002e68 <UART_SetConfig+0x2e0>
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002dfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e00:	d01a      	beq.n	8002e38 <UART_SetConfig+0x2b0>
 8002e02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e06:	d81b      	bhi.n	8002e40 <UART_SetConfig+0x2b8>
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0c:	d00c      	beq.n	8002e28 <UART_SetConfig+0x2a0>
 8002e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e12:	d815      	bhi.n	8002e40 <UART_SetConfig+0x2b8>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <UART_SetConfig+0x298>
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1c:	d008      	beq.n	8002e30 <UART_SetConfig+0x2a8>
 8002e1e:	e00f      	b.n	8002e40 <UART_SetConfig+0x2b8>
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e26:	e022      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2e:	e01e      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002e30:	2304      	movs	r3, #4
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e01a      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002e38:	2308      	movs	r3, #8
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3e:	e016      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002e40:	2310      	movs	r3, #16
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e46:	e012      	b.n	8002e6e <UART_SetConfig+0x2e6>
 8002e48:	efff69f3 	.word	0xefff69f3
 8002e4c:	40008000 	.word	0x40008000
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40004400 	.word	0x40004400
 8002e5c:	40004800 	.word	0x40004800
 8002e60:	40004c00 	.word	0x40004c00
 8002e64:	40005000 	.word	0x40005000
 8002e68:	2310      	movs	r3, #16
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a9f      	ldr	r2, [pc, #636]	@ (80030f0 <UART_SetConfig+0x568>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d17a      	bne.n	8002f6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d824      	bhi.n	8002eca <UART_SetConfig+0x342>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <UART_SetConfig+0x300>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002ecb 	.word	0x08002ecb
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002ecb 	.word	0x08002ecb
 8002e98:	08002ebb 	.word	0x08002ebb
 8002e9c:	08002ecb 	.word	0x08002ecb
 8002ea0:	08002ecb 	.word	0x08002ecb
 8002ea4:	08002ecb 	.word	0x08002ecb
 8002ea8:	08002ec3 	.word	0x08002ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7ff f8d6 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8002eb0:	61f8      	str	r0, [r7, #28]
        break;
 8002eb2:	e010      	b.n	8002ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80030f4 <UART_SetConfig+0x56c>)
 8002eb6:	61fb      	str	r3, [r7, #28]
        break;
 8002eb8:	e00d      	b.n	8002ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eba:	f7ff f837 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8002ebe:	61f8      	str	r0, [r7, #28]
        break;
 8002ec0:	e009      	b.n	8002ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec6:	61fb      	str	r3, [r7, #28]
        break;
 8002ec8:	e005      	b.n	8002ed6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80fb 	beq.w	80030d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d305      	bcc.n	8002efa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d903      	bls.n	8002f02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f00:	e0e8      	b.n	80030d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2200      	movs	r2, #0
 8002f06:	461c      	mov	r4, r3
 8002f08:	4615      	mov	r5, r2
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	022b      	lsls	r3, r5, #8
 8002f14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f18:	0222      	lsls	r2, r4, #8
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	6849      	ldr	r1, [r1, #4]
 8002f1e:	0849      	lsrs	r1, r1, #1
 8002f20:	2000      	movs	r0, #0
 8002f22:	4688      	mov	r8, r1
 8002f24:	4681      	mov	r9, r0
 8002f26:	eb12 0a08 	adds.w	sl, r2, r8
 8002f2a:	eb43 0b09 	adc.w	fp, r3, r9
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f3c:	4650      	mov	r0, sl
 8002f3e:	4659      	mov	r1, fp
 8002f40:	f7fd f942 	bl	80001c8 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f52:	d308      	bcc.n	8002f66 <UART_SetConfig+0x3de>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5a:	d204      	bcs.n	8002f66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e0b6      	b.n	80030d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f6c:	e0b2      	b.n	80030d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f76:	d15e      	bne.n	8003036 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002f78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d828      	bhi.n	8002fd2 <UART_SetConfig+0x44a>
 8002f80:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <UART_SetConfig+0x400>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	08002fd3 	.word	0x08002fd3
 8002f98:	08002fc3 	.word	0x08002fc3
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08002fd3 	.word	0x08002fd3
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002fcb 	.word	0x08002fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fac:	f7ff f856 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8002fb0:	61f8      	str	r0, [r7, #28]
        break;
 8002fb2:	e014      	b.n	8002fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb4:	f7ff f868 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	61f8      	str	r0, [r7, #28]
        break;
 8002fba:	e010      	b.n	8002fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80030f4 <UART_SetConfig+0x56c>)
 8002fbe:	61fb      	str	r3, [r7, #28]
        break;
 8002fc0:	e00d      	b.n	8002fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc2:	f7fe ffb3 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8002fc6:	61f8      	str	r0, [r7, #28]
        break;
 8002fc8:	e009      	b.n	8002fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fce:	61fb      	str	r3, [r7, #28]
        break;
 8002fd0:	e005      	b.n	8002fde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d077      	beq.n	80030d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005a      	lsls	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	441a      	add	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d916      	bls.n	800302e <UART_SetConfig+0x4a6>
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003006:	d212      	bcs.n	800302e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f023 030f 	bic.w	r3, r3, #15
 8003010:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	b29b      	uxth	r3, r3
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	b29a      	uxth	r2, r3
 800301e:	8afb      	ldrh	r3, [r7, #22]
 8003020:	4313      	orrs	r3, r2
 8003022:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	8afa      	ldrh	r2, [r7, #22]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	e052      	b.n	80030d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003034:	e04e      	b.n	80030d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003036:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800303a:	2b08      	cmp	r3, #8
 800303c:	d827      	bhi.n	800308e <UART_SetConfig+0x506>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0x4bc>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003069 	.word	0x08003069
 8003048:	08003071 	.word	0x08003071
 800304c:	08003079 	.word	0x08003079
 8003050:	0800308f 	.word	0x0800308f
 8003054:	0800307f 	.word	0x0800307f
 8003058:	0800308f 	.word	0x0800308f
 800305c:	0800308f 	.word	0x0800308f
 8003060:	0800308f 	.word	0x0800308f
 8003064:	08003087 	.word	0x08003087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7fe fff8 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 800306c:	61f8      	str	r0, [r7, #28]
        break;
 800306e:	e014      	b.n	800309a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7ff f80a 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003074:	61f8      	str	r0, [r7, #28]
        break;
 8003076:	e010      	b.n	800309a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003078:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <UART_SetConfig+0x56c>)
 800307a:	61fb      	str	r3, [r7, #28]
        break;
 800307c:	e00d      	b.n	800309a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307e:	f7fe ff55 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003082:	61f8      	str	r0, [r7, #28]
        break;
 8003084:	e009      	b.n	800309a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800308a:	61fb      	str	r3, [r7, #28]
        break;
 800308c:	e005      	b.n	800309a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003098:	bf00      	nop
    }

    if (pclk != 0U)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d019      	beq.n	80030d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	085a      	lsrs	r2, r3, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	441a      	add	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	d909      	bls.n	80030ce <UART_SetConfig+0x546>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d205      	bcs.n	80030ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	e002      	b.n	80030d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3728      	adds	r7, #40	@ 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ee:	bf00      	nop
 80030f0:	40008000 	.word	0x40008000
 80030f4:	00f42400 	.word	0x00f42400

080030f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01a      	beq.n	800320e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f6:	d10a      	bne.n	800320e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
  }
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b098      	sub	sp, #96	@ 0x60
 8003240:	af02      	add	r7, sp, #8
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800324c:	f7fd fe36 	bl	8000ebc <HAL_GetTick>
 8003250:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d12e      	bne.n	80032be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f88c 	bl	800338c <UART_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d021      	beq.n	80032be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800328e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003298:	647b      	str	r3, [r7, #68]	@ 0x44
 800329a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800329e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e6      	bne.n	800327a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e062      	b.n	8003384 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d149      	bne.n	8003360 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d4:	2200      	movs	r2, #0
 80032d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f856 	bl	800338c <UART_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03c      	beq.n	8003360 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	623b      	str	r3, [r7, #32]
   return(result);
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003304:	633b      	str	r3, [r7, #48]	@ 0x30
 8003306:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800330a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e6      	bne.n	80032e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3308      	adds	r3, #8
 800331e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	60fb      	str	r3, [r7, #12]
   return(result);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3308      	adds	r3, #8
 8003336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003338:	61fa      	str	r2, [r7, #28]
 800333a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	617b      	str	r3, [r7, #20]
   return(result);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e5      	bne.n	8003318 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e011      	b.n	8003384 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3758      	adds	r7, #88	@ 0x58
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339c:	e04f      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d04b      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7fd fd89 	bl	8000ebc <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <UART_WaitOnFlagUntilTimeout+0x30>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e04e      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d037      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b80      	cmp	r3, #128	@ 0x80
 80033d2:	d034      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d031      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d110      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2208      	movs	r2, #8
 80033ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f838 	bl	8003466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2208      	movs	r2, #8
 80033fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e029      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003418:	d111      	bne.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f81e 	bl	8003466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d0a0      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003466:	b480      	push	{r7}
 8003468:	b095      	sub	sp, #84	@ 0x54
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348c:	643b      	str	r3, [r7, #64]	@ 0x40
 800348e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d118      	bne.n	800350e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f023 0310 	bic.w	r3, r3, #16
 80034f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6979      	ldr	r1, [r7, #20]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	613b      	str	r3, [r7, #16]
   return(result);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e6      	bne.n	80034dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003522:	bf00      	nop
 8003524:	3754      	adds	r7, #84	@ 0x54
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <memset>:
 800352e:	4402      	add	r2, r0
 8003530:	4603      	mov	r3, r0
 8003532:	4293      	cmp	r3, r2
 8003534:	d100      	bne.n	8003538 <memset+0xa>
 8003536:	4770      	bx	lr
 8003538:	f803 1b01 	strb.w	r1, [r3], #1
 800353c:	e7f9      	b.n	8003532 <memset+0x4>
	...

08003540 <__libc_init_array>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4d0d      	ldr	r5, [pc, #52]	@ (8003578 <__libc_init_array+0x38>)
 8003544:	4c0d      	ldr	r4, [pc, #52]	@ (800357c <__libc_init_array+0x3c>)
 8003546:	1b64      	subs	r4, r4, r5
 8003548:	10a4      	asrs	r4, r4, #2
 800354a:	2600      	movs	r6, #0
 800354c:	42a6      	cmp	r6, r4
 800354e:	d109      	bne.n	8003564 <__libc_init_array+0x24>
 8003550:	4d0b      	ldr	r5, [pc, #44]	@ (8003580 <__libc_init_array+0x40>)
 8003552:	4c0c      	ldr	r4, [pc, #48]	@ (8003584 <__libc_init_array+0x44>)
 8003554:	f000 f818 	bl	8003588 <_init>
 8003558:	1b64      	subs	r4, r4, r5
 800355a:	10a4      	asrs	r4, r4, #2
 800355c:	2600      	movs	r6, #0
 800355e:	42a6      	cmp	r6, r4
 8003560:	d105      	bne.n	800356e <__libc_init_array+0x2e>
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	f855 3b04 	ldr.w	r3, [r5], #4
 8003568:	4798      	blx	r3
 800356a:	3601      	adds	r6, #1
 800356c:	e7ee      	b.n	800354c <__libc_init_array+0xc>
 800356e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003572:	4798      	blx	r3
 8003574:	3601      	adds	r6, #1
 8003576:	e7f2      	b.n	800355e <__libc_init_array+0x1e>
 8003578:	080035f0 	.word	0x080035f0
 800357c:	080035f0 	.word	0x080035f0
 8003580:	080035f0 	.word	0x080035f0
 8003584:	080035f4 	.word	0x080035f4

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
