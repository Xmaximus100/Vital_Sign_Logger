
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009508  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b0  080097b0  0000b0ac  2**0
                  CONTENTS
  4 .ARM          00000008  080097b0  080097b0  0000a7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097b8  080097b8  0000b0ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b8  080097b8  0000a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097bc  080097bc  0000a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  080097c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c64  200000b0  0800986c  0000b0b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d14  0800986c  0000bd14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a04  00000000  00000000  0000b0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000544d  00000000  00000000  0002dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  00032f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168c  00000000  00000000  00034c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ccea  00000000  00000000  00036324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f20  00000000  00000000  0006300e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010369e  00000000  00000000  00088f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c5cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d84  00000000  00000000  0018c610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  00194394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009680 	.word	0x08009680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08009680 	.word	0x08009680

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	@ 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_d2uiz>:
 800056c:	004a      	lsls	r2, r1, #1
 800056e:	d211      	bcs.n	8000594 <__aeabi_d2uiz+0x28>
 8000570:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000574:	d211      	bcs.n	800059a <__aeabi_d2uiz+0x2e>
 8000576:	d50d      	bpl.n	8000594 <__aeabi_d2uiz+0x28>
 8000578:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800057c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000580:	d40e      	bmi.n	80005a0 <__aeabi_d2uiz+0x34>
 8000582:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000586:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800058a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800058e:	fa23 f002 	lsr.w	r0, r3, r2
 8000592:	4770      	bx	lr
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	4770      	bx	lr
 800059a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800059e:	d102      	bne.n	80005a6 <__aeabi_d2uiz+0x3a>
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	4770      	bx	lr
 80005a6:	f04f 0000 	mov.w	r0, #0
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295
 80005c0:	f000 b96a 	b.w	8000898 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f806 	bl	80005dc <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__udivmoddi4>:
 80005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e0:	9d08      	ldr	r5, [sp, #32]
 80005e2:	460c      	mov	r4, r1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14e      	bne.n	8000686 <__udivmoddi4+0xaa>
 80005e8:	4694      	mov	ip, r2
 80005ea:	458c      	cmp	ip, r1
 80005ec:	4686      	mov	lr, r0
 80005ee:	fab2 f282 	clz	r2, r2
 80005f2:	d962      	bls.n	80006ba <__udivmoddi4+0xde>
 80005f4:	b14a      	cbz	r2, 800060a <__udivmoddi4+0x2e>
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	4091      	lsls	r1, r2
 80005fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	4319      	orrs	r1, r3
 8000606:	fa00 fe02 	lsl.w	lr, r0, r2
 800060a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800060e:	fa1f f68c 	uxth.w	r6, ip
 8000612:	fbb1 f4f7 	udiv	r4, r1, r7
 8000616:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061a:	fb07 1114 	mls	r1, r7, r4, r1
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb04 f106 	mul.w	r1, r4, r6
 8000626:	4299      	cmp	r1, r3
 8000628:	d90a      	bls.n	8000640 <__udivmoddi4+0x64>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000632:	f080 8112 	bcs.w	800085a <__udivmoddi4+0x27e>
 8000636:	4299      	cmp	r1, r3
 8000638:	f240 810f 	bls.w	800085a <__udivmoddi4+0x27e>
 800063c:	3c02      	subs	r4, #2
 800063e:	4463      	add	r3, ip
 8000640:	1a59      	subs	r1, r3, r1
 8000642:	fa1f f38e 	uxth.w	r3, lr
 8000646:	fbb1 f0f7 	udiv	r0, r1, r7
 800064a:	fb07 1110 	mls	r1, r7, r0, r1
 800064e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000652:	fb00 f606 	mul.w	r6, r0, r6
 8000656:	429e      	cmp	r6, r3
 8000658:	d90a      	bls.n	8000670 <__udivmoddi4+0x94>
 800065a:	eb1c 0303 	adds.w	r3, ip, r3
 800065e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000662:	f080 80fc 	bcs.w	800085e <__udivmoddi4+0x282>
 8000666:	429e      	cmp	r6, r3
 8000668:	f240 80f9 	bls.w	800085e <__udivmoddi4+0x282>
 800066c:	4463      	add	r3, ip
 800066e:	3802      	subs	r0, #2
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000676:	2100      	movs	r1, #0
 8000678:	b11d      	cbz	r5, 8000682 <__udivmoddi4+0xa6>
 800067a:	40d3      	lsrs	r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	e9c5 3200 	strd	r3, r2, [r5]
 8000682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000686:	428b      	cmp	r3, r1
 8000688:	d905      	bls.n	8000696 <__udivmoddi4+0xba>
 800068a:	b10d      	cbz	r5, 8000690 <__udivmoddi4+0xb4>
 800068c:	e9c5 0100 	strd	r0, r1, [r5]
 8000690:	2100      	movs	r1, #0
 8000692:	4608      	mov	r0, r1
 8000694:	e7f5      	b.n	8000682 <__udivmoddi4+0xa6>
 8000696:	fab3 f183 	clz	r1, r3
 800069a:	2900      	cmp	r1, #0
 800069c:	d146      	bne.n	800072c <__udivmoddi4+0x150>
 800069e:	42a3      	cmp	r3, r4
 80006a0:	d302      	bcc.n	80006a8 <__udivmoddi4+0xcc>
 80006a2:	4290      	cmp	r0, r2
 80006a4:	f0c0 80f0 	bcc.w	8000888 <__udivmoddi4+0x2ac>
 80006a8:	1a86      	subs	r6, r0, r2
 80006aa:	eb64 0303 	sbc.w	r3, r4, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d0e6      	beq.n	8000682 <__udivmoddi4+0xa6>
 80006b4:	e9c5 6300 	strd	r6, r3, [r5]
 80006b8:	e7e3      	b.n	8000682 <__udivmoddi4+0xa6>
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	f040 8090 	bne.w	80007e0 <__udivmoddi4+0x204>
 80006c0:	eba1 040c 	sub.w	r4, r1, ip
 80006c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006c8:	fa1f f78c 	uxth.w	r7, ip
 80006cc:	2101      	movs	r1, #1
 80006ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006d6:	fb08 4416 	mls	r4, r8, r6, r4
 80006da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006de:	fb07 f006 	mul.w	r0, r7, r6
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d908      	bls.n	80006f8 <__udivmoddi4+0x11c>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80006ee:	d202      	bcs.n	80006f6 <__udivmoddi4+0x11a>
 80006f0:	4298      	cmp	r0, r3
 80006f2:	f200 80cd 	bhi.w	8000890 <__udivmoddi4+0x2b4>
 80006f6:	4626      	mov	r6, r4
 80006f8:	1a1c      	subs	r4, r3, r0
 80006fa:	fa1f f38e 	uxth.w	r3, lr
 80006fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000702:	fb08 4410 	mls	r4, r8, r0, r4
 8000706:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070a:	fb00 f707 	mul.w	r7, r0, r7
 800070e:	429f      	cmp	r7, r3
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0x148>
 8000712:	eb1c 0303 	adds.w	r3, ip, r3
 8000716:	f100 34ff 	add.w	r4, r0, #4294967295
 800071a:	d202      	bcs.n	8000722 <__udivmoddi4+0x146>
 800071c:	429f      	cmp	r7, r3
 800071e:	f200 80b0 	bhi.w	8000882 <__udivmoddi4+0x2a6>
 8000722:	4620      	mov	r0, r4
 8000724:	1bdb      	subs	r3, r3, r7
 8000726:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072a:	e7a5      	b.n	8000678 <__udivmoddi4+0x9c>
 800072c:	f1c1 0620 	rsb	r6, r1, #32
 8000730:	408b      	lsls	r3, r1
 8000732:	fa22 f706 	lsr.w	r7, r2, r6
 8000736:	431f      	orrs	r7, r3
 8000738:	fa20 fc06 	lsr.w	ip, r0, r6
 800073c:	fa04 f301 	lsl.w	r3, r4, r1
 8000740:	ea43 030c 	orr.w	r3, r3, ip
 8000744:	40f4      	lsrs	r4, r6
 8000746:	fa00 f801 	lsl.w	r8, r0, r1
 800074a:	0c38      	lsrs	r0, r7, #16
 800074c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000750:	fbb4 fef0 	udiv	lr, r4, r0
 8000754:	fa1f fc87 	uxth.w	ip, r7
 8000758:	fb00 441e 	mls	r4, r0, lr, r4
 800075c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000760:	fb0e f90c 	mul.w	r9, lr, ip
 8000764:	45a1      	cmp	r9, r4
 8000766:	fa02 f201 	lsl.w	r2, r2, r1
 800076a:	d90a      	bls.n	8000782 <__udivmoddi4+0x1a6>
 800076c:	193c      	adds	r4, r7, r4
 800076e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000772:	f080 8084 	bcs.w	800087e <__udivmoddi4+0x2a2>
 8000776:	45a1      	cmp	r9, r4
 8000778:	f240 8081 	bls.w	800087e <__udivmoddi4+0x2a2>
 800077c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000780:	443c      	add	r4, r7
 8000782:	eba4 0409 	sub.w	r4, r4, r9
 8000786:	fa1f f983 	uxth.w	r9, r3
 800078a:	fbb4 f3f0 	udiv	r3, r4, r0
 800078e:	fb00 4413 	mls	r4, r0, r3, r4
 8000792:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000796:	fb03 fc0c 	mul.w	ip, r3, ip
 800079a:	45a4      	cmp	ip, r4
 800079c:	d907      	bls.n	80007ae <__udivmoddi4+0x1d2>
 800079e:	193c      	adds	r4, r7, r4
 80007a0:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a4:	d267      	bcs.n	8000876 <__udivmoddi4+0x29a>
 80007a6:	45a4      	cmp	ip, r4
 80007a8:	d965      	bls.n	8000876 <__udivmoddi4+0x29a>
 80007aa:	3b02      	subs	r3, #2
 80007ac:	443c      	add	r4, r7
 80007ae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b2:	fba0 9302 	umull	r9, r3, r0, r2
 80007b6:	eba4 040c 	sub.w	r4, r4, ip
 80007ba:	429c      	cmp	r4, r3
 80007bc:	46ce      	mov	lr, r9
 80007be:	469c      	mov	ip, r3
 80007c0:	d351      	bcc.n	8000866 <__udivmoddi4+0x28a>
 80007c2:	d04e      	beq.n	8000862 <__udivmoddi4+0x286>
 80007c4:	b155      	cbz	r5, 80007dc <__udivmoddi4+0x200>
 80007c6:	ebb8 030e 	subs.w	r3, r8, lr
 80007ca:	eb64 040c 	sbc.w	r4, r4, ip
 80007ce:	fa04 f606 	lsl.w	r6, r4, r6
 80007d2:	40cb      	lsrs	r3, r1
 80007d4:	431e      	orrs	r6, r3
 80007d6:	40cc      	lsrs	r4, r1
 80007d8:	e9c5 6400 	strd	r6, r4, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	e750      	b.n	8000682 <__udivmoddi4+0xa6>
 80007e0:	f1c2 0320 	rsb	r3, r2, #32
 80007e4:	fa20 f103 	lsr.w	r1, r0, r3
 80007e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80007ec:	fa24 f303 	lsr.w	r3, r4, r3
 80007f0:	4094      	lsls	r4, r2
 80007f2:	430c      	orrs	r4, r1
 80007f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f8:	fa00 fe02 	lsl.w	lr, r0, r2
 80007fc:	fa1f f78c 	uxth.w	r7, ip
 8000800:	fbb3 f0f8 	udiv	r0, r3, r8
 8000804:	fb08 3110 	mls	r1, r8, r0, r3
 8000808:	0c23      	lsrs	r3, r4, #16
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb00 f107 	mul.w	r1, r0, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d908      	bls.n	8000828 <__udivmoddi4+0x24c>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f100 36ff 	add.w	r6, r0, #4294967295
 800081e:	d22c      	bcs.n	800087a <__udivmoddi4+0x29e>
 8000820:	4299      	cmp	r1, r3
 8000822:	d92a      	bls.n	800087a <__udivmoddi4+0x29e>
 8000824:	3802      	subs	r0, #2
 8000826:	4463      	add	r3, ip
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000830:	fb08 3311 	mls	r3, r8, r1, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb01 f307 	mul.w	r3, r1, r7
 800083c:	42a3      	cmp	r3, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x276>
 8000840:	eb1c 0404 	adds.w	r4, ip, r4
 8000844:	f101 36ff 	add.w	r6, r1, #4294967295
 8000848:	d213      	bcs.n	8000872 <__udivmoddi4+0x296>
 800084a:	42a3      	cmp	r3, r4
 800084c:	d911      	bls.n	8000872 <__udivmoddi4+0x296>
 800084e:	3902      	subs	r1, #2
 8000850:	4464      	add	r4, ip
 8000852:	1ae4      	subs	r4, r4, r3
 8000854:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000858:	e739      	b.n	80006ce <__udivmoddi4+0xf2>
 800085a:	4604      	mov	r4, r0
 800085c:	e6f0      	b.n	8000640 <__udivmoddi4+0x64>
 800085e:	4608      	mov	r0, r1
 8000860:	e706      	b.n	8000670 <__udivmoddi4+0x94>
 8000862:	45c8      	cmp	r8, r9
 8000864:	d2ae      	bcs.n	80007c4 <__udivmoddi4+0x1e8>
 8000866:	ebb9 0e02 	subs.w	lr, r9, r2
 800086a:	eb63 0c07 	sbc.w	ip, r3, r7
 800086e:	3801      	subs	r0, #1
 8000870:	e7a8      	b.n	80007c4 <__udivmoddi4+0x1e8>
 8000872:	4631      	mov	r1, r6
 8000874:	e7ed      	b.n	8000852 <__udivmoddi4+0x276>
 8000876:	4603      	mov	r3, r0
 8000878:	e799      	b.n	80007ae <__udivmoddi4+0x1d2>
 800087a:	4630      	mov	r0, r6
 800087c:	e7d4      	b.n	8000828 <__udivmoddi4+0x24c>
 800087e:	46d6      	mov	lr, sl
 8000880:	e77f      	b.n	8000782 <__udivmoddi4+0x1a6>
 8000882:	4463      	add	r3, ip
 8000884:	3802      	subs	r0, #2
 8000886:	e74d      	b.n	8000724 <__udivmoddi4+0x148>
 8000888:	4606      	mov	r6, r0
 800088a:	4623      	mov	r3, r4
 800088c:	4608      	mov	r0, r1
 800088e:	e70f      	b.n	80006b0 <__udivmoddi4+0xd4>
 8000890:	3e02      	subs	r6, #2
 8000892:	4463      	add	r3, ip
 8000894:	e730      	b.n	80006f8 <__udivmoddi4+0x11c>
 8000896:	bf00      	nop

08000898 <__aeabi_idiv0>:
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void Initialize_Delay()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim6);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <Initialize_Delay+0x10>)
 80008a2:	f004 f8cd 	bl	8004a40 <HAL_TIM_Base_Start>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001ec 	.word	0x200001ec

080008b0 <delay_us>:

void delay_us(uint32_t us)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <delay_us+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008be:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 80008c4:	e003      	b.n	80008ce <delay_us+0x1e>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <delay_us+0x40>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008cc:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bfb8      	it	lt
 80008d8:	425b      	neglt	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4293      	cmp	r3, r2
 80008e0:	d8f1      	bhi.n	80008c6 <delay_us+0x16>
	}
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	20000000 	.word	0x20000000

080008f4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f001 fcfb 	bl	80022f8 <HAL_Delay>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000910:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <MX_FREERTOS_Init+0x38>)
 8000912:	2100      	movs	r1, #0
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <MX_FREERTOS_Init+0x3c>)
 8000916:	f006 f85f 	bl	80069d8 <osThreadNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a0b      	ldr	r2, [pc, #44]	@ (800094c <MX_FREERTOS_Init+0x40>)
 800091e:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <MX_FREERTOS_Init+0x44>)
 8000922:	2100      	movs	r1, #0
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <MX_FREERTOS_Init+0x48>)
 8000926:	f006 f857 	bl	80069d8 <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <MX_FREERTOS_Init+0x4c>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 8000930:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <MX_FREERTOS_Init+0x50>)
 8000932:	2100      	movs	r1, #0
 8000934:	480a      	ldr	r0, [pc, #40]	@ (8000960 <MX_FREERTOS_Init+0x54>)
 8000936:	f006 f84f 	bl	80069d8 <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a09      	ldr	r2, [pc, #36]	@ (8000964 <MX_FREERTOS_Init+0x58>)
 800093e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080096fc 	.word	0x080096fc
 8000948:	08000969 	.word	0x08000969
 800094c:	2000012c 	.word	0x2000012c
 8000950:	08009720 	.word	0x08009720
 8000954:	08000979 	.word	0x08000979
 8000958:	20000130 	.word	0x20000130
 800095c:	08009744 	.word	0x08009744
 8000960:	080009c9 	.word	0x080009c9
 8000964:	20000134 	.word	0x20000134

08000968 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f006 f8c3 	bl	8006afc <osDelay>
 8000976:	e7fb      	b.n	8000970 <StartDefaultTask+0x8>

08000978 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
	uint8_t received_data[32];
	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <StartADC+0x40>)
 8000984:	480d      	ldr	r0, [pc, #52]	@ (80009bc <StartADC+0x44>)
 8000986:	f004 fc87 	bl	8005298 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
//	  UART_Log("Hello World\n\r");
//	  osDelay(1);
	  if(received_lines > 0){
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <StartADC+0x48>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0fb      	beq.n	800098a <StartADC+0x12>
		  ParserTakeLine(&buffer, received_data);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480a      	ldr	r0, [pc, #40]	@ (80009c4 <StartADC+0x4c>)
 800099a:	f000 fa11 	bl	8000dc0 <ParserTakeLine>
		  ParserParse((char*)received_data);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fa32 	bl	8000e0c <ParserParse>
		  received_lines--;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <StartADC+0x48>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <StartADC+0x48>)
 80009b2:	701a      	strb	r2, [r3, #0]
	  if(received_lines > 0){
 80009b4:	e7e9      	b.n	800098a <StartADC+0x12>
 80009b6:	bf00      	nop
 80009b8:	20000128 	.word	0x20000128
 80009bc:	20000238 	.word	0x20000238
 80009c0:	20000129 	.word	0x20000129
 80009c4:	20000104 	.word	0x20000104

080009c8 <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPLL */
	Initialize_Delay();
 80009d0:	f7ff ff64 	bl	800089c <Initialize_Delay>
	ADF5355_Param_Init();
 80009d4:	f000 f80c 	bl	80009f0 <ADF5355_Param_Init>
	basic_example_main(&hadf5355);
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <StartPLL+0x20>)
 80009da:	f001 fbdb 	bl	8002194 <basic_example_main>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f006 f88c 	bl	8006afc <osDelay>
 80009e4:	e7fb      	b.n	80009de <StartPLL+0x16>
 80009e6:	bf00      	nop
 80009e8:	200000d0 	.word	0x200000d0
 80009ec:	00000000 	.word	0x00000000

080009f0 <ADF5355_Param_Init>:
  /* USER CODE END StartPLL */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void ADF5355_Param_Init(void){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 80009f4:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 80009f6:	4a2d      	ldr	r2, [pc, #180]	@ (8000aac <ADF5355_Param_Init+0xbc>)
 80009f8:	601a      	str	r2, [r3, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 80009fa:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	711a      	strb	r2, [r3, #4]
	hadf5355.freq_req = 12000000000; // Żądana częstotliwość wyjściowa w Hz
 8000a00:	4929      	ldr	r1, [pc, #164]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a02:	a327      	add	r3, pc, #156	@ (adr r3, 8000aa0 <ADF5355_Param_Init+0xb0>)
 8000a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a08:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hadf5355.freq_req_chan = 0; // Kanał częstotliwości
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = 120000000; // Częstotliwość zegara wejściowego w Hz
 8000a12:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a14:	4a26      	ldr	r2, [pc, #152]	@ (8000ab0 <ADF5355_Param_Init+0xc0>)
 8000a16:	615a      	str	r2, [r3, #20]
	hadf5355.cp_ua = 1000; // Prąd pompy ładunkowej w mikroamperach
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a1e:	619a      	str	r2, [r3, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 8000a20:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = false;  // Flaga aktywacji bramkowania prądu wycieku
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = true;  // Flaga aktywacji wyjścia A
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = false;  // Flaga aktywacji wyjścia B
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.outa_power = 10;  // Moc wyjścia A
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.outb_power = 0;  // Moc wyjścia B
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.phase_detector_polarity_neg = true;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8000a70:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.mux_out_sel = 0;  // Wybór wyjścia mux
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <ADF5355_Param_Init+0xb8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	f3af 8000 	nop.w
 8000aa0:	cb417800 	.word	0xcb417800
 8000aa4:	00000002 	.word	0x00000002
 8000aa8:	200000d0 	.word	0x200000d0
 8000aac:	20000138 	.word	0x20000138
 8000ab0:	07270e00 	.word	0x07270e00

08000ab4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <HAL_UART_RxCpltCallback+0x4c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d117      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x42>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp)){
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_UART_RxCpltCallback+0x50>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	480e      	ldr	r0, [pc, #56]	@ (8000b08 <HAL_UART_RxCpltCallback+0x54>)
 8000ace:	f000 f9cf 	bl	8000e70 <WriteToBuffer>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <HAL_UART_RxCpltCallback+0x38>
			if(receive_tmp == ENDLINE){
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_UART_RxCpltCallback+0x50>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d105      	bne.n	8000aec <HAL_UART_RxCpltCallback+0x38>
				received_lines++;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_UART_RxCpltCallback+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_UART_RxCpltCallback+0x58>)
 8000aea:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	4905      	ldr	r1, [pc, #20]	@ (8000b04 <HAL_UART_RxCpltCallback+0x50>)
 8000af0:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <HAL_UART_RxCpltCallback+0x5c>)
 8000af2:	f004 fbd1 	bl	8005298 <HAL_UART_Receive_IT>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	20000128 	.word	0x20000128
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	20000129 	.word	0x20000129
 8000b10:	20000238 	.word	0x20000238

08000b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b57      	ldr	r3, [pc, #348]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a56      	ldr	r2, [pc, #344]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b54      	ldr	r3, [pc, #336]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	4b51      	ldr	r3, [pc, #324]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a50      	ldr	r2, [pc, #320]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b48      	ldr	r3, [pc, #288]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b45      	ldr	r3, [pc, #276]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a44      	ldr	r2, [pc, #272]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b42      	ldr	r3, [pc, #264]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f001 ffd5 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2101      	movs	r1, #1
 8000b9a:	483c      	ldr	r0, [pc, #240]	@ (8000c8c <MX_GPIO_Init+0x178>)
 8000b9c:	f001 ffd0 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CNVST_GPIO_Port, AD_CNVST_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ba6:	483a      	ldr	r0, [pc, #232]	@ (8000c90 <MX_GPIO_Init+0x17c>)
 8000ba8:	f001 ffca 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADF_CS_GPIO_Port, ADF_CS_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb6:	f001 ffc3 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|AD_BUSY_Pin;
 8000bba:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	482f      	ldr	r0, [pc, #188]	@ (8000c90 <MX_GPIO_Init+0x17c>)
 8000bd2:	f001 fd17 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D15_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D15_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4829      	ldr	r0, [pc, #164]	@ (8000c90 <MX_GPIO_Init+0x17c>)
 8000bea:	f001 fd0b 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bee:	2320      	movs	r3, #32
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f001 fcfc 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	481a      	ldr	r0, [pc, #104]	@ (8000c8c <MX_GPIO_Init+0x178>)
 8000c24:	f001 fcee 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D9_Pin|D10_Pin
 8000c28:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8000c2c:	617b      	str	r3, [r7, #20]
                          |D11_Pin|D12_Pin|D13_Pin|D14_Pin
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <MX_GPIO_Init+0x178>)
 8000c3e:	f001 fce1 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_CNVST_Pin;
 8000c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <MX_GPIO_Init+0x17c>)
 8000c5c:	f001 fcd2 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin;
 8000c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADF_CS_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f001 fcc2 	bl	8002604 <HAL_GPIO_Init>

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48000800 	.word	0x48000800

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f001 faee 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f812 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f7ff ff38 	bl	8000b14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ca4:	f000 fb58 	bl	8001358 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000ca8:	f000 fb00 	bl	80012ac <MX_TIM6_Init>
  MX_SPI3_Init();
 8000cac:	f000 f93c 	bl	8000f28 <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000cb0:	f000 f859 	bl	8000d66 <MX_NVIC_Init>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cb4:	f005 fe46 	bl	8006944 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cb8:	f7ff fe28 	bl	800090c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cbc:	f005 fe66 	bl	800698c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <main+0x2c>

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	@ 0x58
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2244      	movs	r2, #68	@ 0x44
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f008 fc82 	bl	80095dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ce6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cea:	f001 ff67 	bl	8002bbc <HAL_PWREx_ControlVoltageScaling>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cf4:	f000 f85e 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d12:	230a      	movs	r3, #10
 8000d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d16:	2307      	movs	r3, #7
 8000d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 ff9e 	bl	8002c68 <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d32:	f000 f83f 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fb66 	bl	8003420 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d5a:	f000 f82b 	bl	8000db4 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3758      	adds	r7, #88	@ 0x58
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	2017      	movs	r0, #23
 8000d70:	f001 fb9e 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d74:	2017      	movs	r0, #23
 8000d76:	f001 fbb7 	bl	80024e8 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	2026      	movs	r0, #38	@ 0x26
 8000d80:	f001 fb96 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d84:	2026      	movs	r0, #38	@ 0x26
 8000d86:	f001 fbaf 	bl	80024e8 <HAL_NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da2:	f001 fa89 	bl	80022b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000c00 	.word	0x40000c00

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <Error_Handler+0x8>

08000dc0 <ParserTakeLine>:
#include "utils.h"
#include "ring_buffer.h"
#include "string.h"
#include "parser.h"

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 8000dce:	f107 030e 	add.w	r3, r7, #14
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f87e 	bl	8000ed6 <ReadFromBuffer>
		  if(tmp == ENDLINE){
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	2b0a      	cmp	r3, #10
 8000dde:	d105      	bne.n	8000dec <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e004      	b.n	8000df6 <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	7bba      	ldrb	r2, [r7, #14]
 8000df4:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b0a      	cmp	r3, #10
 8000e00:	d1e5      	bne.n	8000dce <ParserTakeLine+0xe>
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <ParserParse>:

void ParserParse(char* received_string){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(strcmp("LED_ON", received_string) == 0){
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4812      	ldr	r0, [pc, #72]	@ (8000e60 <ParserParse+0x54>)
 8000e18:	f7ff f9da 	bl	80001d0 <strcmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d109      	bne.n	8000e36 <ParserParse+0x2a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2120      	movs	r1, #32
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2a:	f001 fe89 	bl	8002b40 <HAL_GPIO_WritePin>
		UART_Log("LED ON\n\r");
 8000e2e:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <ParserParse+0x58>)
 8000e30:	f000 fb1e 	bl	8001470 <UART_Log>
	}
	else if(strcmp("LED_OFF", received_string) == 0){
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		UART_Log("LED OFF\n\r");
	}
}
 8000e34:	e00f      	b.n	8000e56 <ParserParse+0x4a>
	else if(strcmp("LED_OFF", received_string) == 0){
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <ParserParse+0x5c>)
 8000e3a:	f7ff f9c9 	bl	80001d0 <strcmp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <ParserParse+0x4a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2120      	movs	r1, #32
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f001 fe78 	bl	8002b40 <HAL_GPIO_WritePin>
		UART_Log("LED OFF\n\r");
 8000e50:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <ParserParse+0x60>)
 8000e52:	f000 fb0d 	bl	8001470 <UART_Log>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	080096bc 	.word	0x080096bc
 8000e64:	080096c4 	.word	0x080096c4
 8000e68:	080096d0 	.word	0x080096d0
 8000e6c:	080096d8 	.word	0x080096d8

08000e70 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8c1b      	ldrh	r3, [r3, #32]
 8000e80:	3301      	adds	r3, #1
 8000e82:	425a      	negs	r2, r3
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	f002 021f 	and.w	r2, r2, #31
 8000e8c:	bf58      	it	pl
 8000e8e:	4253      	negpl	r3, r2
 8000e90:	73fb      	strb	r3, [r7, #15]

	if( TempHead == Buffer->Tail) // No room for new data
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d101      	bne.n	8000ea2 <WriteToBuffer+0x32>
	{
		return RB_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e013      	b.n	8000eca <WriteToBuffer+0x5a>
	}
	else
	{
            Buffer->Buffer[Buffer->Head] = Data;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	8c1b      	ldrh	r3, [r3, #32]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	545a      	strb	r2, [r3, r1]

            Buffer->Head++;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	8c1b      	ldrh	r3, [r3, #32]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	841a      	strh	r2, [r3, #32]
            Buffer->Head %= BUFFER_SIZE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	8c1b      	ldrh	r3, [r3, #32]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	841a      	strh	r2, [r3, #32]
	}

	return RB_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	8c1b      	ldrh	r3, [r3, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d101      	bne.n	8000ef0 <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e014      	b.n	8000f1a <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	5c9a      	ldrb	r2, [r3, r2]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f02:	3301      	adds	r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <MX_SPI3_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f42:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f5e:	2220      	movs	r2, #32
 8000f60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_SPI3_Init+0x74>)
 8000f88:	f003 f95c 	bl	8004244 <HAL_SPI_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f7ff ff0f 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000138 	.word	0x20000138
 8000fa0:	40003c00 	.word	0x40003c00

08000fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <HAL_SPI_MspInit+0x7c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d128      	bne.n	8001018 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <HAL_SPI_MspInit+0x80>)
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_SPI_MspInit+0x80>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_SPI_MspInit+0x80>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ff6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001008:	2306      	movs	r3, #6
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_SPI_MspInit+0x84>)
 8001014:	f001 faf6 	bl	8002604 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	@ 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40003c00 	.word	0x40003c00
 8001024:	40021000 	.word	0x40021000
 8001028:	48000800 	.word	0x48000800

0800102c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_SPI_MspDeInit+0x30>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10a      	bne.n	8001054 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_SPI_MspDeInit+0x34>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <HAL_SPI_MspDeInit+0x34>)
 8001044:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001048:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800104a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <HAL_SPI_MspDeInit+0x38>)
 8001050:	f001 fc82 	bl	8002958 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40003c00 	.word	0x40003c00
 8001060:	40021000 	.word	0x40021000
 8001064:	48000800 	.word	0x48000800

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	@ 0x60
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_MspInit+0x4c>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <HAL_MspInit+0x4c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	@ 0x58
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	210f      	movs	r1, #15
 80010a2:	f06f 0001 	mvn.w	r0, #1
 80010a6:	f001 fa03 	bl	80024b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	@ 0x38
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80010c6:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <HAL_InitTick+0xe0>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a33      	ldr	r2, [pc, #204]	@ (8001198 <HAL_InitTick+0xe0>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <HAL_InitTick+0xe0>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010de:	f107 0210 	add.w	r2, r7, #16
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fb5d 	bl	80037a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010f8:	f002 fb2a 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 80010fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80010fe:	e004      	b.n	800110a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001100:	f002 fb26 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8001104:	4603      	mov	r3, r0
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800110a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110c:	4a23      	ldr	r2, [pc, #140]	@ (800119c <HAL_InitTick+0xe4>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9b      	lsrs	r3, r3, #18
 8001114:	3b01      	subs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_InitTick+0xe8>)
 800111a:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <HAL_InitTick+0xec>)
 800111c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_InitTick+0xe8>)
 8001120:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001124:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001126:	4a1e      	ldr	r2, [pc, #120]	@ (80011a0 <HAL_InitTick+0xe8>)
 8001128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_InitTick+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_InitTick+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_InitTick+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800113e:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <HAL_InitTick+0xe8>)
 8001140:	f003 fc26 	bl	8004990 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800114a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11b      	bne.n	800118a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001152:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <HAL_InitTick+0xe8>)
 8001154:	f003 fcdc 	bl	8004b10 <HAL_TIM_Base_Start_IT>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800115e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001162:	2b00      	cmp	r3, #0
 8001164:	d111      	bne.n	800118a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001166:	2032      	movs	r0, #50	@ 0x32
 8001168:	f001 f9be 	bl	80024e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d808      	bhi.n	8001184 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001172:	2200      	movs	r2, #0
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	2032      	movs	r0, #50	@ 0x32
 8001178:	f001 f99a 	bl	80024b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_InitTick+0xf0>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e002      	b.n	800118a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800118a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800118e:	4618      	mov	r0, r3
 8001190:	3738      	adds	r7, #56	@ 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	431bde83 	.word	0x431bde83
 80011a0:	2000019c 	.word	0x2000019c
 80011a4:	40000c00 	.word	0x40000c00
 80011a8:	20000050 	.word	0x20000050

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_BUSY_Pin);
 80011e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011ea:	f001 fcc1 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <USART2_IRQHandler+0x10>)
 80011fa:	f004 f899 	bl	8005330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000238 	.word	0x20000238

08001208 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <TIM5_IRQHandler+0x10>)
 800120e:	f003 fcef 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000019c 	.word	0x2000019c

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f008 f9de 	bl	800960c <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20018000 	.word	0x20018000
 800127c:	00000400 	.word	0x00000400
 8001280:	200001e8 	.word	0x200001e8
 8001284:	20001d18 	.word	0x20001d18

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <MX_TIM6_Init+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012c4:	224f      	movs	r2, #79	@ 0x4f
 80012c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012de:	f003 fb57 	bl	8004990 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e8:	f7ff fd64 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012fa:	f003 fe4f 	bl	8004f9c <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001304:	f7ff fd56 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200001ec 	.word	0x200001ec
 8001314:	40001000 	.word	0x40001000

08001318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_TIM_Base_MspInit+0x38>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_TIM_Base_MspInit+0x3c>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <HAL_TIM_Base_MspInit+0x3c>)
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	6593      	str	r3, [r2, #88]	@ 0x58
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_TIM_Base_MspInit+0x3c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40001000 	.word	0x40001000
 8001354:	40021000 	.word	0x40021000

08001358 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800135e:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <MX_USART2_UART_Init+0x5c>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USART2_UART_Init+0x58>)
 800139c:	f003 fea4 	bl	80050e8 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f7ff fd05 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000238 	.word	0x20000238
 80013b4:	40004400 	.word	0x40004400

080013b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0ac      	sub	sp, #176	@ 0xb0
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2288      	movs	r2, #136	@ 0x88
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f008 f8ff 	bl	80095dc <memset>
  if(uartHandle->Instance==USART2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a21      	ldr	r2, [pc, #132]	@ (8001468 <HAL_UART_MspInit+0xb0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13b      	bne.n	8001460 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fa69 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001400:	f7ff fcd8 	bl	8000db4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_UART_MspInit+0xb4>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_UART_MspInit+0xb4>)
 800140a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_UART_MspInit+0xb4>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_UART_MspInit+0xb4>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_UART_MspInit+0xb4>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_UART_MspInit+0xb4>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001434:	230c      	movs	r3, #12
 8001436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144c:	2307      	movs	r3, #7
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f001 f8d2 	bl	8002604 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001460:	bf00      	nop
 8001462:	37b0      	adds	r7, #176	@ 0xb0
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40004400 	.word	0x40004400
 800146c:	40021000 	.word	0x40021000

08001470 <UART_Log>:
#include "string.h"
#include "usart.h"
#include "utils.h"

void UART_Log(char* message)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7fe feb3 	bl	80001e4 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <UART_Log+0x28>)
 800148a:	f003 fe7b 	bl	8005184 <HAL_UART_Transmit>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000238 	.word	0x20000238

0800149c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a0:	f7ff fef2 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f008 f8a5 	bl	8009618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ce:	f7ff fbe1 	bl	8000c94 <main>

080014d2 <LoopForever>:

LoopForever:
    b LoopForever
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80014e0:	080097c0 	.word	0x080097c0
  ldr r2, =_sbss
 80014e4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80014e8:	20001d14 	.word	0x20001d14

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>

080014ee <HAL_GPIO_EXTI_Callback>:


extern Data_Collector* ad7676_data;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == AD_BUSY_Pin){
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014fe:	d101      	bne.n	8001504 <HAL_GPIO_EXTI_Callback+0x16>
		ad7676_read_one_sample();
 8001500:	f000 f822 	bl	8001548 <ad7676_read_one_sample>
	}
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <ad7676_acquire_data>:

	*ad7676_data = init_data;
}

ad7676_acquire_data(Data_Collector* ad7676_data, uint16_t data)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
	ad7676_data->data_buf[ad7676_data->data_ptr++] = data;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 800151e:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	b291      	uxth	r1, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 800152c:	f8a2 1ffe 	strh.w	r1, [r2, #4094]	@ 0xffe
 8001530:	4619      	mov	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <ad7676_read_one_sample>:

ad7676_read_one_sample()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0

//	(GPIOx->IDR & GPIO_Pin);
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <ad7676_read_one_sample+0x48>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f023 030c 	bic.w	r3, r3, #12
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <ad7676_read_one_sample+0x4c>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	b29b      	uxth	r3, r3
 8001560:	03db      	lsls	r3, r3, #15
 8001562:	b29b      	uxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	80fb      	strh	r3, [r7, #6]
	ad7676_acquire_data(ad7676_data, sample);
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <ad7676_read_one_sample+0x50>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffc9 	bl	800150c <ad7676_acquire_data>
	AD7676_CNVST_OFF;
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	4804      	ldr	r0, [pc, #16]	@ (8001594 <ad7676_read_one_sample+0x4c>)
 8001582:	f001 fadd 	bl	8002b40 <HAL_GPIO_WritePin>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	20000100 	.word	0x20000100

0800159c <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	460b      	mov	r3, r1
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0e1b      	lsrs	r3, r3, #24
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0c1b      	lsrs	r3, r3, #16
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015da:	f001 fab1 	bl	8002b40 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f107 0110 	add.w	r1, r7, #16
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	2204      	movs	r2, #4
 80015ec:	f002 fef5 	bl	80043da <HAL_SPI_Transmit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fe:	f001 fa9f 	bl	8002b40 <HAL_GPIO_WritePin>

	return ret;
 8001602:	7dfb      	ldrb	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001616:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 800161a:	f107 0108 	add.w	r1, r7, #8
 800161e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001622:	4608      	mov	r0, r1
 8001624:	f000 fdff 	bl	8002226 <no_os_do_div>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 8001630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	060b      	lsls	r3, r1, #24
 800163e:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001642:	0602      	lsls	r2, r0, #24
 8001644:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8001648:	f107 0110 	add.w	r1, r7, #16
 800164c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001650:	4608      	mov	r0, r1
 8001652:	f000 fde8 	bl	8002226 <no_os_do_div>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800165c:	601a      	str	r2, [r3, #0]

	*integer = vco;
 800165e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001664:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8001666:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166c:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001672:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8001674:	e009      	b.n	800168a <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8001676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	085a      	lsrs	r2, r3, #1
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 8001680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	085a      	lsrs	r2, r3, #1
 8001686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001688:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 800168a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001690:	429a      	cmp	r2, r3
 8001692:	d3f0      	bcc.n	8001676 <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8001694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f000 fd99 	bl	80021d6 <no_os_greatest_common_divisor>
 80016a4:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 80016a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b2:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 80016b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80016be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d003      	beq.n	80016e8 <adf5355_reg_config+0x1c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d101      	bne.n	80016ec <adf5355_reg_config+0x20>
 80016e8:	230d      	movs	r3, #13
 80016ea:	e000      	b.n	80016ee <adf5355_reg_config+0x22>
 80016ec:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 80016ee:	613b      	str	r3, [r7, #16]

	if (sync_all || !dev->all_synced) {
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <adf5355_reg_config+0x38>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01d      	beq.n	8001740 <adf5355_reg_config+0x74>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e013      	b.n	8001732 <adf5355_reg_config+0x66>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	b2d9      	uxtb	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	3202      	adds	r2, #2
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	461a      	mov	r2, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff3e 	bl	800159c <adf5355_write>
 8001720:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <adf5355_reg_config+0x60>
				return ret;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	e0a6      	b.n	800187a <adf5355_reg_config+0x1ae>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3b01      	subs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e8      	bne.n	800170a <adf5355_reg_config+0x3e>
		}

		dev->all_synced = true;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	715a      	strb	r2, [r3, #5]
 800173e:	e073      	b.n	8001828 <adf5355_reg_config+0x15c>

	} else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d003      	beq.n	8001750 <adf5355_reg_config+0x84>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d10c      	bne.n	800176a <adf5355_reg_config+0x9e>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001754:	461a      	mov	r2, r3
 8001756:	210d      	movs	r1, #13
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff1f 	bl	800159c <adf5355_write>
 800175e:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <adf5355_reg_config+0x9e>
				return ret;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	e087      	b.n	800187a <adf5355_reg_config+0x1ae>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	461a      	mov	r2, r3
 8001770:	210a      	movs	r1, #10
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff12 	bl	800159c <adf5355_write>
 8001778:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <adf5355_reg_config+0xb8>
			return ret;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	e07a      	b.n	800187a <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	461a      	mov	r2, r3
 800178a:	2106      	movs	r1, #6
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff05 	bl	800159c <adf5355_write>
 8001792:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <adf5355_reg_config+0xd2>
			return ret;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	e06d      	b.n	800187a <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	461a      	mov	r2, r3
 80017a8:	2104      	movs	r1, #4
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fef6 	bl	800159c <adf5355_write>
 80017b0:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <adf5355_reg_config+0xf0>
			return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	e05e      	b.n	800187a <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	461a      	mov	r2, r3
 80017c2:	2102      	movs	r1, #2
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fee9 	bl	800159c <adf5355_write>
 80017ca:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <adf5355_reg_config+0x10a>
			return ret;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	e051      	b.n	800187a <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	461a      	mov	r2, r3
 80017dc:	2101      	movs	r1, #1
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fedc 	bl	800159c <adf5355_write>
 80017e4:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <adf5355_reg_config+0x124>
			return ret;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	e044      	b.n	800187a <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 80017f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017f8:	461a      	mov	r2, r3
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fecd 	bl	800159c <adf5355_write>
 8001802:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <adf5355_reg_config+0x142>
			return ret;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	e035      	b.n	800187a <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	461a      	mov	r2, r3
 8001814:	2104      	movs	r1, #4
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fec0 	bl	800159c <adf5355_write>
 800181c:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <adf5355_reg_config+0x15c>
			return ret;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	e028      	b.n	800187a <adf5355_reg_config+0x1ae>
	}

	if (dev->delay_us > 999)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001832:	d314      	bcc.n	800185e <adf5355_reg_config+0x192>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <adf5355_reg_config+0x1b8>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe18 	bl	8000478 <__aeabi_ui2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7fe fe8c 	bl	800056c <__aeabi_d2uiz>
 8001854:	4603      	mov	r3, r0
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f84c 	bl	80008f4 <delay_ms>
 800185c:	e005      	b.n	800186a <adf5355_reg_config+0x19e>
	}
	else
	{
		delay_us(dev->delay_us);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f823 	bl	80008b0 <delay_us>
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	461a      	mov	r2, r3
 8001870:	2100      	movs	r1, #0
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe92 	bl	800159c <adf5355_write>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	10624dd3 	.word	0x10624dd3

08001888 <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b08c      	sub	sp, #48	@ 0x30
 800188e:	af06      	add	r7, sp, #24
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t cp_bleed;
	bool prescaler, cp_neg_bleed_en;

	if (chan > dev->num_channels)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800189c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d902      	bls.n	80018aa <adf5355_set_freq+0x22>
		return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	e1d6      	b.n	8001c58 <adf5355_set_freq+0x3d0>

	if (chan == 0) {
 80018aa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d13c      	bne.n	800192c <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018bc:	4290      	cmp	r0, r2
 80018be:	eb71 0303 	sbcs.w	r3, r1, r3
 80018c2:	d308      	bcc.n	80018d6 <adf5355_set_freq+0x4e>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80018ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ce:	4290      	cmp	r0, r2
 80018d0:	eb71 0303 	sbcs.w	r3, r1, r3
 80018d4:	d202      	bcs.n	80018dc <adf5355_set_freq+0x54>
			return -EINVAL;
 80018d6:	f06f 0315 	mvn.w	r3, #21
 80018da:	e1bd      	b.n	8001c58 <adf5355_set_freq+0x3d0>

		dev->rf_div_sel = 0;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80018ee:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 80018f6:	e00f      	b.n	8001918 <adf5355_set_freq+0x90>
			freq <<= 1;
 80018f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018fc:	eb12 0802 	adds.w	r8, r2, r2
 8001900:	eb43 0903 	adc.w	r9, r3, r3
 8001904:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800191e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001922:	4290      	cmp	r0, r2
 8001924:	eb71 0303 	sbcs.w	r3, r1, r3
 8001928:	d3e6      	bcc.n	80018f8 <adf5355_set_freq+0x70>
 800192a:	e074      	b.n	8001a16 <adf5355_set_freq+0x18e>
		}
	} else if (dev->dev_id == ADF4356) {
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	791b      	ldrb	r3, [r3, #4]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d14a      	bne.n	80019ca <adf5355_set_freq+0x142>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800193a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193e:	4290      	cmp	r0, r2
 8001940:	eb71 0303 	sbcs.w	r3, r1, r3
 8001944:	d310      	bcc.n	8001968 <adf5355_set_freq+0xe0>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800194c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001950:	4290      	cmp	r0, r2
 8001952:	eb71 0303 	sbcs.w	r3, r1, r3
 8001956:	d307      	bcc.n	8001968 <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800195e:	f083 0301 	eor.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <adf5355_set_freq+0xe6>
			return -EINVAL;
 8001968:	f06f 0315 	mvn.w	r3, #21
 800196c:	e174      	b.n	8001c58 <adf5355_set_freq+0x3d0>

		dev->rf_div_sel = 0;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001980:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001982:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->outb_power);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800198a:	01db      	lsls	r3, r3, #7
 800198c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8001990:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8001996:	e00e      	b.n	80019b6 <adf5355_set_freq+0x12e>
			freq <<= 1;
 8001998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800199c:	1894      	adds	r4, r2, r2
 800199e:	eb43 0503 	adc.w	r5, r3, r3
 80019a2:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80019bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019c0:	4290      	cmp	r0, r2
 80019c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80019c6:	d3e7      	bcc.n	8001998 <adf5355_set_freq+0x110>
 80019c8:	e025      	b.n	8001a16 <adf5355_set_freq+0x18e>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 80019ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ce:	49a5      	ldr	r1, [pc, #660]	@ (8001c64 <adf5355_set_freq+0x3dc>)
 80019d0:	428a      	cmp	r2, r1
 80019d2:	f173 0303 	sbcs.w	r3, r3, #3
 80019d6:	d206      	bcs.n	80019e6 <adf5355_set_freq+0x15e>
 80019d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019dc:	49a2      	ldr	r1, [pc, #648]	@ (8001c68 <adf5355_set_freq+0x3e0>)
 80019de:	428a      	cmp	r2, r1
 80019e0:	f173 0301 	sbcs.w	r3, r3, #1
 80019e4:	d202      	bcs.n	80019ec <adf5355_set_freq+0x164>
			return -EINVAL;
 80019e6:	f06f 0315 	mvn.w	r3, #21
 80019ea:	e135      	b.n	8001c58 <adf5355_set_freq+0x3d0>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80019f6:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80019f8:	431a      	orrs	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	621a      	str	r2, [r3, #32]

		freq >>= 1;
 80019fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	0842      	lsrs	r2, r0, #1
 8001a0c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001a10:	084b      	lsrs	r3, r1, #1
 8001a12:	e9c7 2300 	strd	r2, r3, [r7]
	}

	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	469a      	mov	sl, r3
 8001a1e:	4693      	mov	fp, r2
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	336c      	adds	r3, #108	@ 0x6c
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	3270      	adds	r2, #112	@ 0x70
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	3174      	adds	r1, #116	@ 0x74
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	3078      	adds	r0, #120	@ 0x78
				    &dev->fract2, &dev->mod2,
				    ((dev->dev_id == ADF4356)
 8001a30:	68fc      	ldr	r4, [r7, #12]
 8001a32:	7924      	ldrb	r4, [r4, #4]
	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8001a34:	2c04      	cmp	r4, #4
 8001a36:	d003      	beq.n	8001a40 <adf5355_set_freq+0x1b8>
				     || (dev->dev_id == ADF5356)) ? ADF5356_MAX_MODULUS2 : ADF5355_MAX_MODULUS2);
 8001a38:	68fc      	ldr	r4, [r7, #12]
 8001a3a:	7924      	ldrb	r4, [r4, #4]
 8001a3c:	2c05      	cmp	r4, #5
 8001a3e:	d102      	bne.n	8001a46 <adf5355_set_freq+0x1be>
	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8001a40:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
 8001a44:	e001      	b.n	8001a4a <adf5355_set_freq+0x1c2>
 8001a46:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 8001a4a:	9404      	str	r4, [sp, #16]
 8001a4c:	9003      	str	r0, [sp, #12]
 8001a4e:	9102      	str	r1, [sp, #8]
 8001a50:	9201      	str	r2, [sp, #4]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4652      	mov	r2, sl
 8001a56:	465b      	mov	r3, fp
 8001a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5c:	f7ff fdd6 	bl	800160c <adf5355_pll_fract_n_compute>

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a64:	2b4a      	cmp	r3, #74	@ 0x4a
 8001a66:	bf8c      	ite	hi
 8001a68:	2301      	movhi	r3, #1
 8001a6a:	2300      	movls	r3, #0
 8001a6c:	74fb      	strb	r3, [r7, #19]

	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a72:	4a7e      	ldr	r2, [pc, #504]	@ (8001c6c <adf5355_set_freq+0x3e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d807      	bhi.n	8001a88 <adf5355_set_freq+0x200>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <adf5355_set_freq+0x206>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <adf5355_set_freq+0x206>
		cp_neg_bleed_en = false;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	74bb      	strb	r3, [r7, #18]
 8001a8c:	e003      	b.n	8001a96 <adf5355_set_freq+0x20e>
	else
		cp_neg_bleed_en = dev->cp_neg_bleed_en;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a94:	74bb      	strb	r3, [r7, #18]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d003      	beq.n	8001aa6 <adf5355_set_freq+0x21e>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d113      	bne.n	8001ace <adf5355_set_freq+0x246>
		cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001aaa:	4a71      	ldr	r2, [pc, #452]	@ (8001c70 <adf5355_set_freq+0x3e8>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	099b      	lsrs	r3, r3, #6
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8001ab6:	fb03 f202 	mul.w	r2, r3, r2
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	0b9b      	lsrs	r3, r3, #14
 8001ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8001c74 <adf5355_set_freq+0x3ec>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e016      	b.n	8001afc <adf5355_set_freq+0x274>
	} else {
		cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ad2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001ad6:	fb03 f202 	mul.w	r2, r3, r2
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ade:	f240 1177 	movw	r1, #375	@ 0x177
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001aee:	f240 1177 	movw	r1, #375	@ 0x177
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
	}

	cp_bleed = no_os_clamp(cp_bleed, 1U, 255U);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d904      	bls.n	8001b0c <adf5355_set_freq+0x284>
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2bff      	cmp	r3, #255	@ 0xff
 8001b06:	bf28      	it	cs
 8001b08:	23ff      	movcs	r3, #255	@ 0xff
 8001b0a:	e000      	b.n	8001b0e <adf5355_set_freq+0x286>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b14:	011a      	lsls	r2, r3, #4
 8001b16:	4b58      	ldr	r3, [pc, #352]	@ (8001c78 <adf5355_set_freq+0x3f0>)
 8001b18:	4013      	ands	r3, r2
				    ADF5355_REG0_PRESCALER(prescaler) |
 8001b1a:	7cfa      	ldrb	r2, [r7, #19]
 8001b1c:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001b1e:	4313      	orrs	r3, r2
				    ADF5355_REG0_PRESCALER(prescaler) |
 8001b20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	609a      	str	r2, [r3, #8]
				    ADF5355_REG0_AUTOCAL(1);

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b32:	f023 030f 	bic.w	r3, r3, #15
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b3e:	011a      	lsls	r2, r3, #4
 8001b40:	4b4e      	ldr	r3, [pc, #312]	@ (8001c7c <adf5355_set_freq+0x3f4>)
 8001b42:	4013      	ands	r3, r2
				    ADF5355_REG2_FRAC2(dev->fract2);
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b48:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d003      	beq.n	8001b60 <adf5355_set_freq+0x2d8>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	791b      	ldrb	r3, [r3, #4]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <adf5355_set_freq+0x2f2>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b64:	0b9b      	lsrs	r3, r3, #14
 8001b66:	011a      	lsls	r2, r3, #4
 8001b68:	4b44      	ldr	r3, [pc, #272]	@ (8001c7c <adf5355_set_freq+0x3f4>)
 8001b6a:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b70:	0b92      	lsrs	r2, r2, #14
 8001b72:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8001b8c:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8001b8e:	431a      	orrs	r2, r3
				    (((dev->dev_id == ADF5355)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <adf5355_set_freq+0x318>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d107      	bne.n	8001bb0 <adf5355_set_freq+0x328>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	029b      	lsls	r3, r3, #10
 8001bae:	e00a      	b.n	8001bc6 <adf5355_set_freq+0x33e>
				     ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001bb6:	01db      	lsls	r3, r3, #7
 8001bb8:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001bc2:	025b      	lsls	r3, r3, #9
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8001bc4:	430b      	orrs	r3, r1
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8001bc6:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8001bce:	02db      	lsls	r3, r3, #11
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	035b      	lsls	r3, r3, #13
 8001bd8:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8001bdc:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8001be4:	055b      	lsls	r3, r3, #21
 8001be6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8001bea:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d104      	bne.n	8001bfe <adf5355_set_freq+0x376>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8001bfa:	065b      	lsls	r3, r3, #25
 8001bfc:	e000      	b.n	8001c00 <adf5355_set_freq+0x378>
 8001bfe:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 8001c00:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c08:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 8001c0a:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001c12:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8001c14:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d003      	beq.n	8001c26 <adf5355_set_freq+0x39e>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d104      	bne.n	8001c30 <adf5355_set_freq+0x3a8>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c2c:	07db      	lsls	r3, r3, #31
 8001c2e:	e000      	b.n	8001c32 <adf5355_set_freq+0x3aa>
 8001c30:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8001c32:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 8001c34:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8001c38:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	dev->freq_req = freq;
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c46:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return adf5355_reg_config(dev, dev->all_synced);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	795b      	ldrb	r3, [r3, #5]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff fd3b 	bl	80016cc <adf5355_reg_config>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c62:	bf00      	nop
 8001c64:	2a9f8801 	.word	0x2a9f8801
 8001c68:	954fc400 	.word	0x954fc400
 8001c6c:	05f5e100 	.word	0x05f5e100
 8001c70:	10624dd3 	.word	0x10624dd3
 8001c74:	00136b0b 	.word	0x00136b0b
 8001c78:	000ffff0 	.word	0x000ffff0
 8001c7c:	0003fff0 	.word	0x0003fff0

08001c80 <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	dev->ref_div_factor = 0;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <adf5355_setup+0x32>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e000      	b.n	8001cb4 <adf5355_setup+0x34>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	f8b2 2090 	ldrh.w	r2, [r2, #144]	@ 0x90
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d001      	beq.n	8001cce <adf5355_setup+0x4e>
 8001cca:	2202      	movs	r2, #2
 8001ccc:	e000      	b.n	8001cd0 <adf5355_setup+0x50>
 8001cce:	2201      	movs	r2, #1
 8001cd0:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001cd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ce0:	4a8d      	ldr	r2, [pc, #564]	@ (8001f18 <adf5355_setup+0x298>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d8d4      	bhi.n	8001c90 <adf5355_setup+0x10>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cea:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 8001cee:	4b8b      	ldr	r3, [pc, #556]	@ (8001f1c <adf5355_setup+0x29c>)
 8001cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf4:	1ad2      	subs	r2, r2, r3
 8001cf6:	0852      	lsrs	r2, r2, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <adf5355_setup+0x8e>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	bf28      	it	cs
 8001d0a:	230f      	movcs	r3, #15
 8001d0c:	e000      	b.n	8001d10 <adf5355_setup+0x90>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(0) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <adf5355_setup+0xa0>
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	e000      	b.n	8001d22 <adf5355_setup+0xa2>
 8001d20:	2200      	movs	r2, #0
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8001d28:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001d2a:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001d32:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001d34:	4313      	orrs	r3, r2
 8001d36:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001d40:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001d48:	03d9      	lsls	r1, r3, #15
 8001d4a:	4b75      	ldr	r3, [pc, #468]	@ (8001f20 <adf5355_setup+0x2a0>)
 8001d4c:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 8001d4e:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001d56:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001d58:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001d60:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001d62:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d6a:	06db      	lsls	r3, r3, #27
 8001d6c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(0) |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a69      	ldr	r2, [pc, #420]	@ (8001f24 <adf5355_setup+0x2a4>)
 8001d7e:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(0) |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <adf5355_setup+0x2a8>)
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(0) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d003      	beq.n	8001d96 <adf5355_setup+0x116>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d101      	bne.n	8001d9a <adf5355_setup+0x11a>
 8001d96:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <adf5355_setup+0x2ac>)
 8001d98:	e000      	b.n	8001d9c <adf5355_setup+0x11c>
 8001d9a:	4a65      	ldr	r2, [pc, #404]	@ (8001f30 <adf5355_setup+0x2b0>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001da4:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 8001da8:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 8001dac:	4a61      	ldr	r2, [pc, #388]	@ (8001f34 <adf5355_setup+0x2b4>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d906      	bls.n	8001dca <adf5355_setup+0x14a>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	bf28      	it	cs
 8001dc6:	4613      	movcs	r3, r2
 8001dc8:	e000      	b.n	8001dcc <adf5355_setup+0x14c>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	039a      	lsls	r2, r3, #14
 8001dd2:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <adf5355_setup+0x2b8>)
 8001dd4:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001de0:	fb00 f202 	mul.w	r2, r0, r2
 8001de4:	440a      	add	r2, r1
 8001de6:	0052      	lsls	r2, r2, #1
 8001de8:	1e51      	subs	r1, r2, #1
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4853      	ldr	r0, [pc, #332]	@ (8001f3c <adf5355_setup+0x2bc>)
 8001dee:	fb00 f202 	mul.w	r2, r0, r2
 8001df2:	fbb1 f2f2 	udiv	r2, r1, r2
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8001dfc:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	484b      	ldr	r0, [pc, #300]	@ (8001f3c <adf5355_setup+0x2bc>)
 8001e0e:	fb00 f303 	mul.w	r3, r0, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4848      	ldr	r0, [pc, #288]	@ (8001f3c <adf5355_setup+0x2bc>)
 8001e1a:	fb00 f303 	mul.w	r3, r0, r3
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 8001e28:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	7909      	ldrb	r1, [r1, #4]
 8001e34:	2904      	cmp	r1, #4
 8001e36:	d003      	beq.n	8001e40 <adf5355_setup+0x1c0>
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	7909      	ldrb	r1, [r1, #4]
 8001e3c:	2905      	cmp	r1, #5
 8001e3e:	d101      	bne.n	8001e44 <adf5355_setup+0x1c4>
 8001e40:	493f      	ldr	r1, [pc, #252]	@ (8001f40 <adf5355_setup+0x2c0>)
 8001e42:	e000      	b.n	8001e46 <adf5355_setup+0x1c6>
 8001e44:	493f      	ldr	r1, [pc, #252]	@ (8001f44 <adf5355_setup+0x2c4>)
 8001e46:	440b      	add	r3, r1
 8001e48:	1e59      	subs	r1, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	791b      	ldrb	r3, [r3, #4]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d003      	beq.n	8001e5a <adf5355_setup+0x1da>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	791b      	ldrb	r3, [r3, #4]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d101      	bne.n	8001e5e <adf5355_setup+0x1de>
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <adf5355_setup+0x2c0>)
 8001e5c:	e000      	b.n	8001e60 <adf5355_setup+0x1e0>
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <adf5355_setup+0x2c4>)
 8001e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e64:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8001e66:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	4a35      	ldr	r2, [pc, #212]	@ (8001f48 <adf5355_setup+0x2c8>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	09db      	lsrs	r3, r3, #7
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d904      	bls.n	8001e90 <adf5355_setup+0x210>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2bff      	cmp	r3, #255	@ 0xff
 8001e8a:	bf28      	it	cs
 8001e8c:	23ff      	movcs	r3, #255	@ 0xff
 8001e8e:	e000      	b.n	8001e92 <adf5355_setup+0x212>
 8001e90:	2301      	movs	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <adf5355_setup+0x2cc>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	3202      	adds	r2, #2
 8001eb0:	fbb1 f2f2 	udiv	r2, r1, r2
 8001eb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 8001ec6:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8001eca:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <adf5355_setup+0x2d0>)
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d003      	beq.n	8001ee8 <adf5355_setup+0x268>
				      || (dev->dev_id == ADF5356))?
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d102      	bne.n	8001eee <adf5355_setup+0x26e>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 8001ee8:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 8001eec:	e000      	b.n	8001ef0 <adf5355_setup+0x270>
 8001eee:	4a19      	ldr	r2, [pc, #100]	@ (8001f54 <adf5355_setup+0x2d4>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8001f06:	9100      	str	r1, [sp, #0]
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fcbd 	bl	8001888 <adf5355_set_freq>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	047868c0 	.word	0x047868c0
 8001f1c:	a01a01a1 	.word	0xa01a01a1
 8001f20:	01ff8000 	.word	0x01ff8000
 8001f24:	00800025 	.word	0x00800025
 8001f28:	04000007 	.word	0x04000007
 8001f2c:	15596568 	.word	0x15596568
 8001f30:	102d0428 	.word	0x102d0428
 8001f34:	6fd91d85 	.word	0x6fd91d85
 8001f38:	00ffc000 	.word	0x00ffc000
 8001f3c:	000186a0 	.word	0x000186a0
 8001f40:	00186a00 	.word	0x00186a00
 8001f44:	00249f00 	.word	0x00249f00
 8001f48:	0a7c5ac5 	.word	0x0a7c5ac5
 8001f4c:	00f423ff 	.word	0x00f423ff
 8001f50:	0061300b 	.word	0x0061300b
 8001f54:	0001041c 	.word	0x0001041c

08001f58 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 8001f62:	2198      	movs	r1, #152	@ 0x98
 8001f64:	2001      	movs	r0, #1
 8001f66:	f000 f928 	bl	80021ba <no_os_calloc>
 8001f6a:	60f8      	str	r0, [r7, #12]
	if (!dev)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <adf5355_init+0x20>
		return -ENOMEM;
 8001f72:	f06f 030b 	mvn.w	r3, #11
 8001f76:	e0e8      	b.n	800214a <adf5355_init+0x1f2>

	dev->spi_desc = init_param->spi_init;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	791a      	ldrb	r2, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f8e:	68f9      	ldr	r1, [r7, #12]
 8001f90:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	7c1a      	ldrb	r2, [r3, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7f1a      	ldrb	r2, [r3, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	7f5a      	ldrb	r2, [r3, #29]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7f9a      	ldrb	r2, [r3, #30]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7fda      	ldrb	r2, [r3, #31]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->outa_power = init_param->outa_power;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->outb_power = init_param->outb_power;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800200c:	461a      	mov	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->ref_diff_en = init_param->ref_diff_en;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->ref_doubler_en = init_param->ref_doubler_en;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->ref_div2_en = init_param->ref_div2_en;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	dev->mux_out_sel = init_param->mux_out_sel;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	dev->outb_sel_fund = init_param->outb_sel_fund;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->num_channels = 2;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	switch (dev->dev_id) {
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	791b      	ldrb	r3, [r3, #4]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d85b      	bhi.n	8002124 <adf5355_init+0x1cc>
 800206c:	a201      	add	r2, pc, #4	@ (adr r2, 8002074 <adf5355_init+0x11c>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	0800208d 	.word	0x0800208d
 8002078:	080020b3 	.word	0x080020b3
 800207c:	080020d9 	.word	0x080020d9
 8002080:	080020ff 	.word	0x080020ff
 8002084:	0800208d 	.word	0x0800208d
 8002088:	0800208d 	.word	0x0800208d
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	a33d      	add	r3, pc, #244	@ (adr r3, 8002184 <adf5355_init+0x22c>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002158 <adf5355_init+0x200>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	a32e      	add	r3, pc, #184	@ (adr r3, 8002160 <adf5355_init+0x208>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80020b0:	e038      	b.n	8002124 <adf5355_init+0x1cc>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	a335      	add	r3, pc, #212	@ (adr r3, 800218c <adf5355_init+0x234>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	a325      	add	r3, pc, #148	@ (adr r3, 8002158 <adf5355_init+0x200>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	a324      	add	r3, pc, #144	@ (adr r3, 8002160 <adf5355_init+0x208>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80020d6:	e025      	b.n	8002124 <adf5355_init+0x1cc>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4a29      	ldr	r2, [pc, #164]	@ (8002180 <adf5355_init+0x228>)
 80020dc:	f04f 0301 	mov.w	r3, #1
 80020e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002158 <adf5355_init+0x200>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8002160 <adf5355_init+0x208>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80020fc:	e012      	b.n	8002124 <adf5355_init+0x1cc>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	a319      	add	r3, pc, #100	@ (adr r3, 8002168 <adf5355_init+0x210>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	a318      	add	r3, pc, #96	@ (adr r3, 8002170 <adf5355_init+0x218>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	a317      	add	r3, pc, #92	@ (adr r3, 8002178 <adf5355_init+0x220>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8002122:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff fdab 	bl	8001c80 <adf5355_setup>
 800212a:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <adf5355_init+0x1e4>
		goto error_spi;

	*device = dev;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]

	return ret;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	e006      	b.n	800214a <adf5355_init+0x1f2>
		goto error_spi;
 800213c:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 f921 	bl	800438a <HAL_SPI_DeInit>

	return ret;
 8002148:	68bb      	ldr	r3, [r7, #8]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	f3af 8000 	nop.w
 8002158:	032a9f88 	.word	0x032a9f88
 800215c:	00000000 	.word	0x00000000
 8002160:	caa7e200 	.word	0xcaa7e200
 8002164:	00000000 	.word	0x00000000
 8002168:	89640200 	.word	0x89640200
 800216c:	00000001 	.word	0x00000001
 8002170:	0312c804 	.word	0x0312c804
 8002174:	00000000 	.word	0x00000000
 8002178:	c4b20100 	.word	0xc4b20100
 800217c:	00000000 	.word	0x00000000
 8002180:	0642ac00 	.word	0x0642ac00
 8002184:	954fc400 	.word	0x954fc400
 8002188:	00000001 	.word	0x00000001
 800218c:	2a9f8800 	.word	0x2a9f8800
 8002190:	00000003 	.word	0x00000003

08002194 <basic_example_main>:
 *
 * @return ret - Result of the example execution. If working correctly, will
 *               execute continuously the while(1) loop and will not return.
 */
int basic_example_main(struct adf5355_init_param *hadf5355)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	struct adf5355_dev *dev;
	int ret;

	ret = adf5355_init(&dev, hadf5355);
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fed8 	bl	8001f58 <adf5355_init>
 80021a8:	60f8      	str	r0, [r7, #12]
	if (ret)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
		goto error;

error:
 80021ae:	bf00      	nop
	return ret;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f007 f93e 	bl	8009448 <calloc>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <no_os_greatest_common_divisor+0x16>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d112      	bne.n	8002212 <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf38      	it	cc
 80021f4:	4613      	movcc	r3, r2
 80021f6:	e010      	b.n	800221a <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	fb01 f202 	mul.w	r2, r1, r2
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
		a = b;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	607b      	str	r3, [r7, #4]
		b = div;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ef      	bne.n	80021f8 <no_os_greatest_common_divisor+0x22>
	}

	return a;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002248:	f7fe f9b0 	bl	80005ac <__aeabi_uldivmod>
 800224c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800225a:	f7fe f9a7 	bl	80005ac <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 8002268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002282:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <HAL_Init+0x3c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_Init+0x3c>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228e:	2003      	movs	r0, #3
 8002290:	f000 f903 	bl	800249a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002294:	200f      	movs	r0, #15
 8002296:	f7fe ff0f 	bl	80010b8 <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	71fb      	strb	r3, [r7, #7]
 80022a4:	e001      	b.n	80022aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022a6:	f7fe fedf 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022aa:	79fb      	ldrb	r3, [r7, #7]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40022000 	.word	0x40022000

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x20>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x24>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <HAL_IncTick+0x24>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000054 	.word	0x20000054
 80022dc:	200002c0 	.word	0x200002c0

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200002c0 	.word	0x200002c0

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff ffee 	bl	80022e0 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d005      	beq.n	800231e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_Delay+0x44>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800231e:	bf00      	nop
 8002320:	f7ff ffde 	bl	80022e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d8f7      	bhi.n	8002320 <HAL_Delay+0x28>
  {
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000054 	.word	0x20000054

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	@ (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff4c 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c2:	f7ff ff61 	bl	8002388 <__NVIC_GetPriorityGrouping>
 80024c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	6978      	ldr	r0, [r7, #20]
 80024ce:	f7ff ffb1 	bl	8002434 <NVIC_EncodePriority>
 80024d2:	4602      	mov	r2, r0
 80024d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff80 	bl	80023e0 <__NVIC_SetPriority>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff54 	bl	80023a4 <__NVIC_EnableIRQ>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d008      	beq.n	800252e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2204      	movs	r2, #4
 8002520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e022      	b.n	8002574 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 020e 	bic.w	r2, r2, #14
 800253c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f003 021c 	and.w	r2, r3, #28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d005      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2204      	movs	r2, #4
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e029      	b.n	80025f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 020e 	bic.w	r2, r2, #14
 80025b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c8:	f003 021c 	and.w	r2, r3, #28
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
    }
  }
  return status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e17f      	b.n	8002914 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8171 	beq.w	800290e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <HAL_GPIO_Init+0x40>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0201 	and.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d118      	bne.n	80026e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80ac 	beq.w	800290e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002934 <HAL_GPIO_Init+0x330>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002934 <HAL_GPIO_Init+0x330>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002934 <HAL_GPIO_Init+0x330>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002938 <HAL_GPIO_Init+0x334>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027f8:	d025      	beq.n	8002846 <HAL_GPIO_Init+0x242>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4f      	ldr	r2, [pc, #316]	@ (800293c <HAL_GPIO_Init+0x338>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01f      	beq.n	8002842 <HAL_GPIO_Init+0x23e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4e      	ldr	r2, [pc, #312]	@ (8002940 <HAL_GPIO_Init+0x33c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x23a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4d      	ldr	r2, [pc, #308]	@ (8002944 <HAL_GPIO_Init+0x340>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x236>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4c      	ldr	r2, [pc, #304]	@ (8002948 <HAL_GPIO_Init+0x344>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x232>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4b      	ldr	r2, [pc, #300]	@ (800294c <HAL_GPIO_Init+0x348>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4a      	ldr	r2, [pc, #296]	@ (8002950 <HAL_GPIO_Init+0x34c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x22a>
 800282a:	2306      	movs	r3, #6
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x244>
 800282e:	2307      	movs	r3, #7
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x244>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x244>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002846:	2300      	movs	r3, #0
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002858:	4937      	ldr	r1, [pc, #220]	@ (8002938 <HAL_GPIO_Init+0x334>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_GPIO_Init+0x350>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	@ (8002954 <HAL_GPIO_Init+0x350>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002890:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <HAL_GPIO_Init+0x350>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <HAL_GPIO_Init+0x350>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_GPIO_Init+0x350>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <HAL_GPIO_Init+0x350>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_GPIO_Init+0x350>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <HAL_GPIO_Init+0x350>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f ae78 	bne.w	8002614 <HAL_GPIO_Init+0x10>
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40010000 	.word	0x40010000
 800293c:	48000400 	.word	0x48000400
 8002940:	48000800 	.word	0x48000800
 8002944:	48000c00 	.word	0x48000c00
 8002948:	48001000 	.word	0x48001000
 800294c:	48001400 	.word	0x48001400
 8002950:	48001800 	.word	0x48001800
 8002954:	40010400 	.word	0x40010400

08002958 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002966:	e0cd      	b.n	8002b04 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002968:	2201      	movs	r2, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80c0 	beq.w	8002afe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800297e:	4a68      	ldr	r2, [pc, #416]	@ (8002b20 <HAL_GPIO_DeInit+0x1c8>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029a6:	d025      	beq.n	80029f4 <HAL_GPIO_DeInit+0x9c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002b24 <HAL_GPIO_DeInit+0x1cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01f      	beq.n	80029f0 <HAL_GPIO_DeInit+0x98>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b28 <HAL_GPIO_DeInit+0x1d0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d019      	beq.n	80029ec <HAL_GPIO_DeInit+0x94>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a5c      	ldr	r2, [pc, #368]	@ (8002b2c <HAL_GPIO_DeInit+0x1d4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_GPIO_DeInit+0x90>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b30 <HAL_GPIO_DeInit+0x1d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00d      	beq.n	80029e4 <HAL_GPIO_DeInit+0x8c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002b34 <HAL_GPIO_DeInit+0x1dc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <HAL_GPIO_DeInit+0x88>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a59      	ldr	r2, [pc, #356]	@ (8002b38 <HAL_GPIO_DeInit+0x1e0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_GPIO_DeInit+0x84>
 80029d8:	2306      	movs	r3, #6
 80029da:	e00c      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029dc:	2307      	movs	r3, #7
 80029de:	e00a      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029e0:	2305      	movs	r3, #5
 80029e2:	e008      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e006      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_DeInit+0x9e>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d132      	bne.n	8002a6c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002a06:	4b4d      	ldr	r3, [pc, #308]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	494b      	ldr	r1, [pc, #300]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002a14:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	4947      	ldr	r1, [pc, #284]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002a22:	4b46      	ldr	r3, [pc, #280]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4944      	ldr	r1, [pc, #272]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002a30:	4b42      	ldr	r3, [pc, #264]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4940      	ldr	r1, [pc, #256]	@ (8002b3c <HAL_GPIO_DeInit+0x1e4>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a4e:	4a34      	ldr	r2, [pc, #208]	@ (8002b20 <HAL_GPIO_DeInit+0x1c8>)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	4830      	ldr	r0, [pc, #192]	@ (8002b20 <HAL_GPIO_DeInit+0x1c8>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	400a      	ands	r2, r1
 8002a66:	3302      	adds	r3, #2
 8002a68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2103      	movs	r1, #3
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	08d2      	lsrs	r2, r2, #3
 8002aa0:	4019      	ands	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2103      	movs	r1, #3
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aee:	2101      	movs	r1, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af2b 	bne.w	8002968 <HAL_GPIO_DeInit+0x10>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40010000 	.word	0x40010000
 8002b24:	48000400 	.word	0x48000400
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	48000c00 	.word	0x48000c00
 8002b30:	48001000 	.word	0x48001000
 8002b34:	48001400 	.word	0x48001400
 8002b38:	48001800 	.word	0x48001800
 8002b3c:	40010400 	.word	0x40010400

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b7a:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b86:	4a05      	ldr	r2, [pc, #20]	@ (8002b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fcad 	bl	80014ee <HAL_GPIO_EXTI_Callback>
  }
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40010400 	.word	0x40010400

08002ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba4:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000

08002bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bca:	d130      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bcc:	4b23      	ldr	r3, [pc, #140]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd8:	d038      	beq.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bda:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002be2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bea:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2232      	movs	r2, #50	@ 0x32
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c00:	e002      	b.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c08:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c14:	d102      	bne.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f2      	bne.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c28:	d110      	bne.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e00f      	b.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3a:	d007      	beq.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c44:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	2000004c 	.word	0x2000004c
 8002c64:	431bde83 	.word	0x431bde83

08002c68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e3ca      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	4b97      	ldr	r3, [pc, #604]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c84:	4b94      	ldr	r3, [pc, #592]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80e4 	beq.w	8002e64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x4a>
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	f040 808b 	bne.w	8002dc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 8087 	bne.w	8002dc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb2:	4b89      	ldr	r3, [pc, #548]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x62>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e3a2      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1a      	ldr	r2, [r3, #32]
 8002cce:	4b82      	ldr	r3, [pc, #520]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x7c>
 8002cda:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCC_OscConfig+0x88>
 8002ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d223      	bcs.n	8002d3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fd87 	bl	800380c <RCC_SetFlashLatencyFromMSIRange>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e383      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d08:	4b73      	ldr	r3, [pc, #460]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a72      	ldr	r2, [pc, #456]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b70      	ldr	r3, [pc, #448]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	496d      	ldr	r1, [pc, #436]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d26:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	4968      	ldr	r1, [pc, #416]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
 8002d3a:	e025      	b.n	8002d88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3c:	4b66      	ldr	r3, [pc, #408]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a65      	ldr	r2, [pc, #404]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b63      	ldr	r3, [pc, #396]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4960      	ldr	r1, [pc, #384]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	495b      	ldr	r1, [pc, #364]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fd47 	bl	800380c <RCC_SetFlashLatencyFromMSIRange>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e343      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d88:	f000 fc4a 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b52      	ldr	r3, [pc, #328]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	4950      	ldr	r1, [pc, #320]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_RCC_OscConfig+0x278>)
 8002da6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002da8:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee4 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe f983 	bl	80010b8 <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d052      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	e327      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d032      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dc8:	4b43      	ldr	r3, [pc, #268]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a42      	ldr	r2, [pc, #264]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fa84 	bl	80022e0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fa80 	bl	80022e0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e310      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dee:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfa:	4b37      	ldr	r3, [pc, #220]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e00:	f043 0308 	orr.w	r3, r3, #8
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4931      	ldr	r1, [pc, #196]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e18:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	492c      	ldr	r1, [pc, #176]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
 8002e2c:	e01a      	b.n	8002e64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a29      	ldr	r2, [pc, #164]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff fa51 	bl	80022e0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e42:	f7ff fa4d 	bl	80022e0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e2dd      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e54:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x1da>
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d074      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x21a>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d10e      	bne.n	8002e9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d10b      	bne.n	8002e9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d064      	beq.n	8002f58 <HAL_RCC_OscConfig+0x2f0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d160      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e2ba      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x24a>
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e026      	b.n	8002f00 <HAL_RCC_OscConfig+0x298>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eba:	d115      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x280>
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a02      	ldr	r2, [pc, #8]	@ (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x298>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08009768 	.word	0x08009768
 8002ee0:	2000004c 	.word	0x2000004c
 8002ee4:	20000050 	.word	0x20000050
 8002ee8:	4ba0      	ldr	r3, [pc, #640]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a9f      	ldr	r2, [pc, #636]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b9d      	ldr	r3, [pc, #628]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a9c      	ldr	r2, [pc, #624]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7ff f9ea 	bl	80022e0 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff f9e6 	bl	80022e0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e276      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f22:	4b92      	ldr	r3, [pc, #584]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x2a8>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7ff f9d6 	bl	80022e0 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7ff f9d2 	bl	80022e0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e262      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4a:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2d0>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d060      	beq.n	8003028 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_OscConfig+0x310>
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d119      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d116      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f78:	4b7c      	ldr	r3, [pc, #496]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_OscConfig+0x328>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e23f      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b76      	ldr	r3, [pc, #472]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	4973      	ldr	r1, [pc, #460]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa4:	e040      	b.n	8003028 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d023      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fae:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7ff f991 	bl	80022e0 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc2:	f7ff f98d 	bl	80022e0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e21d      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd4:	4b65      	ldr	r3, [pc, #404]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe0:	4b62      	ldr	r3, [pc, #392]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	495f      	ldr	r1, [pc, #380]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	e018      	b.n	8003028 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7ff f96d 	bl	80022e0 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300a:	f7ff f969 	bl	80022e0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1f9      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800301c:	4b53      	ldr	r3, [pc, #332]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d03c      	beq.n	80030ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303c:	4b4b      	ldr	r3, [pc, #300]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003042:	4a4a      	ldr	r2, [pc, #296]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7ff f948 	bl	80022e0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003054:	f7ff f944 	bl	80022e0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1d4      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003066:	4b41      	ldr	r3, [pc, #260]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ef      	beq.n	8003054 <HAL_RCC_OscConfig+0x3ec>
 8003074:	e01b      	b.n	80030ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003076:	4b3d      	ldr	r3, [pc, #244]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307c:	4a3b      	ldr	r2, [pc, #236]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7ff f92b 	bl	80022e0 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308e:	f7ff f927 	bl	80022e0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1b7      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a0:	4b32      	ldr	r3, [pc, #200]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ef      	bne.n	800308e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a6 	beq.w	8003208 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030c0:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b27      	ldr	r3, [pc, #156]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	4a26      	ldr	r2, [pc, #152]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d8:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <HAL_RCC_OscConfig+0x508>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d118      	bne.n	8003126 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_RCC_OscConfig+0x508>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003170 <HAL_RCC_OscConfig+0x508>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003100:	f7ff f8ee 	bl	80022e0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7ff f8ea 	bl	80022e0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e17a      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_RCC_OscConfig+0x508>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d108      	bne.n	8003140 <HAL_RCC_OscConfig+0x4d8>
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003134:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800313e:	e029      	b.n	8003194 <HAL_RCC_OscConfig+0x52c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d115      	bne.n	8003174 <HAL_RCC_OscConfig+0x50c>
 8003148:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314e:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003158:	4b04      	ldr	r3, [pc, #16]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	4a03      	ldr	r2, [pc, #12]	@ (800316c <HAL_RCC_OscConfig+0x504>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x52c>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
 8003174:	4b9c      	ldr	r3, [pc, #624]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	4a9b      	ldr	r2, [pc, #620]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003184:	4b98      	ldr	r3, [pc, #608]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	4a97      	ldr	r2, [pc, #604]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f8a0 	bl	80022e0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7ff f89c 	bl	80022e0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e12a      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ba:	4b8b      	ldr	r3, [pc, #556]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ed      	beq.n	80031a4 <HAL_RCC_OscConfig+0x53c>
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7ff f889 	bl	80022e0 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7ff f885 	bl	80022e0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e113      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e8:	4b7f      	ldr	r3, [pc, #508]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ed      	bne.n	80031d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b7a      	ldr	r3, [pc, #488]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003200:	4a79      	ldr	r2, [pc, #484]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003206:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80fe 	beq.w	800340e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	2b02      	cmp	r3, #2
 8003218:	f040 80d0 	bne.w	80033bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800321c:	4b72      	ldr	r3, [pc, #456]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	429a      	cmp	r2, r3
 800322e:	d130      	bne.n	8003292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	3b01      	subs	r3, #1
 800323c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d127      	bne.n	8003292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d11f      	bne.n	8003292 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800325c:	2a07      	cmp	r2, #7
 800325e:	bf14      	ite	ne
 8003260:	2201      	movne	r2, #1
 8003262:	2200      	moveq	r2, #0
 8003264:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003266:	4293      	cmp	r3, r2
 8003268:	d113      	bne.n	8003292 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d109      	bne.n	8003292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d06e      	beq.n	8003370 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d069      	beq.n	800336c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003298:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032a4:	4b50      	ldr	r3, [pc, #320]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0ad      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032b4:	4b4c      	ldr	r3, [pc, #304]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4b      	ldr	r2, [pc, #300]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80032ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c0:	f7ff f80e 	bl	80022e0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c8:	f7ff f80a 	bl	80022e0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e09a      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032da:	4b43      	ldr	r3, [pc, #268]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e6:	4b40      	ldr	r3, [pc, #256]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b40      	ldr	r3, [pc, #256]	@ (80033ec <HAL_RCC_OscConfig+0x784>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032f6:	3a01      	subs	r2, #1
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003300:	0212      	lsls	r2, r2, #8
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003308:	0852      	lsrs	r2, r2, #1
 800330a:	3a01      	subs	r2, #1
 800330c:	0552      	lsls	r2, r2, #21
 800330e:	4311      	orrs	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003314:	0852      	lsrs	r2, r2, #1
 8003316:	3a01      	subs	r2, #1
 8003318:	0652      	lsls	r2, r2, #25
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003320:	0912      	lsrs	r2, r2, #4
 8003322:	0452      	lsls	r2, r2, #17
 8003324:	430a      	orrs	r2, r1
 8003326:	4930      	ldr	r1, [pc, #192]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003328:	4313      	orrs	r3, r2
 800332a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800332c:	4b2e      	ldr	r3, [pc, #184]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2d      	ldr	r2, [pc, #180]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003338:	4b2b      	ldr	r3, [pc, #172]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a2a      	ldr	r2, [pc, #168]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003344:	f7fe ffcc 	bl	80022e0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe ffc8 	bl	80022e0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e058      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	4b22      	ldr	r3, [pc, #136]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336a:	e050      	b.n	800340e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04f      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003370:	4b1d      	ldr	r3, [pc, #116]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d148      	bne.n	800340e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003388:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a16      	ldr	r2, [pc, #88]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 800338e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003392:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003394:	f7fe ffa4 	bl	80022e0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe ffa0 	bl	80022e0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e030      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x734>
 80033ba:	e028      	b.n	800340e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d023      	beq.n	800340a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a08      	ldr	r2, [pc, #32]	@ (80033e8 <HAL_RCC_OscConfig+0x780>)
 80033c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe ff87 	bl	80022e0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	e00c      	b.n	80033f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe ff83 	bl	80022e0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d905      	bls.n	80033f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e013      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
 80033e8:	40021000 	.word	0x40021000
 80033ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_OscConfig+0x7b0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ec      	bne.n	80033d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_RCC_OscConfig+0x7b0>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4905      	ldr	r1, [pc, #20]	@ (8003418 <HAL_RCC_OscConfig+0x7b0>)
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_RCC_OscConfig+0x7b4>)
 8003404:	4013      	ands	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
 8003408:	e001      	b.n	800340e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	feeefffc 	.word	0xfeeefffc

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0e7      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b75      	ldr	r3, [pc, #468]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d910      	bls.n	8003464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b72      	ldr	r3, [pc, #456]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4970      	ldr	r1, [pc, #448]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b6e      	ldr	r3, [pc, #440]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0cf      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800347c:	429a      	cmp	r2, r3
 800347e:	d908      	bls.n	8003492 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b63      	ldr	r3, [pc, #396]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4960      	ldr	r1, [pc, #384]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04c      	beq.n	8003538 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d121      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0a6      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034be:	4b54      	ldr	r3, [pc, #336]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d115      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e09a      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e08e      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e086      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b46      	ldr	r3, [pc, #280]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4943      	ldr	r1, [pc, #268]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003508:	f7fe feea 	bl	80022e0 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fe fee6 	bl	80022e0 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e06e      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b31      	ldr	r3, [pc, #196]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003550:	429a      	cmp	r2, r3
 8003552:	d208      	bcs.n	8003566 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003554:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	492b      	ldr	r1, [pc, #172]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003566:	4b29      	ldr	r3, [pc, #164]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d210      	bcs.n	8003596 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003574:	4b25      	ldr	r3, [pc, #148]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 0207 	bic.w	r2, r3, #7
 800357c:	4923      	ldr	r1, [pc, #140]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003584:	4b21      	ldr	r3, [pc, #132]	@ (800360c <HAL_RCC_ClockConfig+0x1ec>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d001      	beq.n	8003596 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e036      	b.n	8003604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4918      	ldr	r1, [pc, #96]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c0:	4b13      	ldr	r3, [pc, #76]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4910      	ldr	r1, [pc, #64]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035d4:	f000 f824 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	490b      	ldr	r1, [pc, #44]	@ (8003614 <HAL_RCC_ClockConfig+0x1f4>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	4a09      	ldr	r2, [pc, #36]	@ (8003618 <HAL_RCC_ClockConfig+0x1f8>)
 80035f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035f4:	4b09      	ldr	r3, [pc, #36]	@ (800361c <HAL_RCC_ClockConfig+0x1fc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fd5d 	bl	80010b8 <HAL_InitTick>
 80035fe:	4603      	mov	r3, r0
 8003600:	72fb      	strb	r3, [r7, #11]

  return status;
 8003602:	7afb      	ldrb	r3, [r7, #11]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40022000 	.word	0x40022000
 8003610:	40021000 	.word	0x40021000
 8003614:	08009768 	.word	0x08009768
 8003618:	2000004c 	.word	0x2000004c
 800361c:	20000050 	.word	0x20000050

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800362e:	4b3e      	ldr	r3, [pc, #248]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003638:	4b3b      	ldr	r3, [pc, #236]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x34>
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d121      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d11e      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 8003662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e005      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003670:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800367c:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <HAL_RCC_GetSysClockFreq+0x10c>)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d102      	bne.n	800369e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003698:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x110>)
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e004      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036a4:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x114>)
 80036a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d134      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d003      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xac>
 80036c4:	e005      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x110>)
 80036c8:	617b      	str	r3, [r7, #20]
      break;
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ce:	617b      	str	r3, [r7, #20]
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	617b      	str	r3, [r7, #20]
      break;
 80036d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d8:	4b13      	ldr	r3, [pc, #76]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	3301      	adds	r3, #1
 80036e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036e6:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	fb03 f202 	mul.w	r2, r3, r2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x108>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	0e5b      	lsrs	r3, r3, #25
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	3301      	adds	r3, #1
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003718:	69bb      	ldr	r3, [r7, #24]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	@ 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	08009780 	.word	0x08009780
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	2000004c 	.word	0x2000004c

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4904      	ldr	r1, [pc, #16]	@ (8003778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	08009778 	.word	0x08009778

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003780:	f7ff ffda 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0adb      	lsrs	r3, r3, #11
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4904      	ldr	r1, [pc, #16]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08009778 	.word	0x08009778

080037a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	220f      	movs	r2, #15
 80037b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80037b8:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_GetClockConfig+0x5c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0203 	and.w	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003804 <HAL_RCC_GetClockConfig+0x5c>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <HAL_RCC_GetClockConfig+0x5c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_RCC_GetClockConfig+0x5c>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	08db      	lsrs	r3, r3, #3
 80037e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <HAL_RCC_GetClockConfig+0x60>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0207 	and.w	r2, r3, #7
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40022000 	.word	0x40022000

0800380c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003818:	4b2a      	ldr	r3, [pc, #168]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003824:	f7ff f9bc 	bl	8002ba0 <HAL_PWREx_GetVoltageRange>
 8003828:	6178      	str	r0, [r7, #20]
 800382a:	e014      	b.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	4a24      	ldr	r2, [pc, #144]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6593      	str	r3, [r2, #88]	@ 0x58
 8003838:	4b22      	ldr	r3, [pc, #136]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003844:	f7ff f9ac 	bl	8002ba0 <HAL_PWREx_GetVoltageRange>
 8003848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b1e      	ldr	r3, [pc, #120]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	4a1d      	ldr	r2, [pc, #116]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003854:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d10b      	bne.n	8003876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b80      	cmp	r3, #128	@ 0x80
 8003862:	d919      	bls.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2ba0      	cmp	r3, #160	@ 0xa0
 8003868:	d902      	bls.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386a:	2302      	movs	r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e013      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003870:	2301      	movs	r3, #1
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	e010      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d902      	bls.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800387c:	2303      	movs	r3, #3
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e00a      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b80      	cmp	r3, #128	@ 0x80
 8003886:	d102      	bne.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003888:	2302      	movs	r3, #2
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e004      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b70      	cmp	r3, #112	@ 0x70
 8003892:	d101      	bne.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003894:	2301      	movs	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 0207 	bic.w	r2, r3, #7
 80038a0:	4909      	ldr	r1, [pc, #36]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d001      	beq.n	80038ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40022000 	.word	0x40022000

080038cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038d4:	2300      	movs	r3, #0
 80038d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038d8:	2300      	movs	r3, #0
 80038da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d041      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038f0:	d02a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038f6:	d824      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038fc:	d008      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003902:	d81e      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390c:	d010      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800390e:	e018      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003910:	4b86      	ldr	r3, [pc, #536]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a85      	ldr	r2, [pc, #532]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800391c:	e015      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3304      	adds	r3, #4
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fabb 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800392e:	e00c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3320      	adds	r3, #32
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fba6 	bl	8004088 <RCCEx_PLLSAI2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	74fb      	strb	r3, [r7, #19]
      break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003950:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800395e:	4973      	ldr	r1, [pc, #460]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003966:	e001      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d041      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800397c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003980:	d02a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003982:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003986:	d824      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800398e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003992:	d81e      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d010      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800399e:	e018      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a0:	4b62      	ldr	r3, [pc, #392]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a61      	ldr	r2, [pc, #388]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ac:	e015      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fa73 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039be:	e00c      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3320      	adds	r3, #32
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb5e 	bl	8004088 <RCCEx_PLLSAI2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d0:	e003      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	74fb      	strb	r3, [r7, #19]
      break;
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039e0:	4b52      	ldr	r3, [pc, #328]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ee:	494f      	ldr	r1, [pc, #316]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039f6:	e001      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a0 	beq.w	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a24:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a28:	4a40      	ldr	r2, [pc, #256]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a30:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a40:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a3a      	ldr	r2, [pc, #232]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a4c:	f7fe fc48 	bl	80022e0 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a52:	e009      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fe fc44 	bl	80022e0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d902      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	74fb      	strb	r3, [r7, #19]
        break;
 8003a66:	e005      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a68:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ef      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d15c      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d019      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a98:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	4b21      	ldr	r3, [pc, #132]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a20      	ldr	r2, [pc, #128]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac4:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fc03 	bl	80022e0 <HAL_GetTick>
 8003ada:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	e00b      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe fbff 	bl	80022e0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d902      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	74fb      	strb	r3, [r7, #19]
            break;
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ec      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b1a:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b22:	e009      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b38:	7c7b      	ldrb	r3, [r7, #17]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4a9d      	ldr	r2, [pc, #628]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b56:	4b98      	ldr	r3, [pc, #608]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f023 0203 	bic.w	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	4994      	ldr	r1, [pc, #592]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b78:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 020c 	bic.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	498c      	ldr	r1, [pc, #560]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b9a:	4b87      	ldr	r3, [pc, #540]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	4983      	ldr	r1, [pc, #524]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	497b      	ldr	r1, [pc, #492]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bde:	4b76      	ldr	r3, [pc, #472]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bec:	4972      	ldr	r1, [pc, #456]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c00:	4b6d      	ldr	r3, [pc, #436]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	496a      	ldr	r1, [pc, #424]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c22:	4b65      	ldr	r3, [pc, #404]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	4961      	ldr	r1, [pc, #388]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c44:	4b5c      	ldr	r3, [pc, #368]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c52:	4959      	ldr	r1, [pc, #356]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c66:	4b54      	ldr	r3, [pc, #336]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	4950      	ldr	r1, [pc, #320]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c88:	4b4b      	ldr	r3, [pc, #300]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	4948      	ldr	r1, [pc, #288]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003caa:	4b43      	ldr	r3, [pc, #268]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	493f      	ldr	r1, [pc, #252]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d028      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cda:	4937      	ldr	r1, [pc, #220]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cea:	d106      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cec:	4b32      	ldr	r3, [pc, #200]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a31      	ldr	r2, [pc, #196]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	60d3      	str	r3, [r2, #12]
 8003cf8:	e011      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f8c8 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d028      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d2a:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	491f      	ldr	r1, [pc, #124]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d48:	d106      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d54:	60d3      	str	r3, [r2, #12]
 8003d56:	e011      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f899 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d02b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d96:	4908      	ldr	r1, [pc, #32]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da6:	d109      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a02      	ldr	r2, [pc, #8]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db2:	60d3      	str	r3, [r2, #12]
 8003db4:	e014      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f867 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dec:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfa:	4928      	ldr	r1, [pc, #160]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0a:	d10d      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f844 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	74bb      	strb	r3, [r7, #18]
 8003e26:	e011      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3320      	adds	r3, #32
 8003e36:	2102      	movs	r1, #2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f925 	bl	8004088 <RCCEx_PLLSAI2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e66:	490d      	ldr	r1, [pc, #52]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8a:	4904      	ldr	r1, [pc, #16]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eae:	4b75      	ldr	r3, [pc, #468]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eba:	4b72      	ldr	r3, [pc, #456]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10d      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d047      	beq.n	8003f76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e044      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d018      	beq.n	8003f26 <RCCEx_PLLSAI1_Config+0x86>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d825      	bhi.n	8003f44 <RCCEx_PLLSAI1_Config+0xa4>
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d002      	beq.n	8003f02 <RCCEx_PLLSAI1_Config+0x62>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d009      	beq.n	8003f14 <RCCEx_PLLSAI1_Config+0x74>
 8003f00:	e020      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f02:	4b60      	ldr	r3, [pc, #384]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11d      	bne.n	8003f4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f12:	e01a      	b.n	8003f4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f14:	4b5b      	ldr	r3, [pc, #364]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e013      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f26:	4b57      	ldr	r3, [pc, #348]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f32:	4b54      	ldr	r3, [pc, #336]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f42:	e006      	b.n	8003f52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e004      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	4944      	ldr	r1, [pc, #272]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d17d      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f7c:	4b41      	ldr	r3, [pc, #260]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a40      	ldr	r2, [pc, #256]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fe f9aa 	bl	80022e0 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f8e:	e009      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f90:	f7fe f9a6 	bl	80022e0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa2:	e005      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa4:	4b37      	ldr	r3, [pc, #220]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ef      	bne.n	8003f90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d160      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d111      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fbc:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6892      	ldr	r2, [r2, #8]
 8003fcc:	0211      	lsls	r1, r2, #8
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	0912      	lsrs	r2, r2, #4
 8003fd4:	0452      	lsls	r2, r2, #17
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	492a      	ldr	r1, [pc, #168]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	610b      	str	r3, [r1, #16]
 8003fde:	e027      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d112      	bne.n	800400c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe6:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003fee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6892      	ldr	r2, [r2, #8]
 8003ff6:	0211      	lsls	r1, r2, #8
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6912      	ldr	r2, [r2, #16]
 8003ffc:	0852      	lsrs	r2, r2, #1
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0552      	lsls	r2, r2, #21
 8004002:	430a      	orrs	r2, r1
 8004004:	491f      	ldr	r1, [pc, #124]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	610b      	str	r3, [r1, #16]
 800400a:	e011      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800400c:	4b1d      	ldr	r3, [pc, #116]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004014:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6892      	ldr	r2, [r2, #8]
 800401c:	0211      	lsls	r1, r2, #8
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6952      	ldr	r2, [r2, #20]
 8004022:	0852      	lsrs	r2, r2, #1
 8004024:	3a01      	subs	r2, #1
 8004026:	0652      	lsls	r2, r2, #25
 8004028:	430a      	orrs	r2, r1
 800402a:	4916      	ldr	r1, [pc, #88]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004030:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a13      	ldr	r2, [pc, #76]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800403a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fe f950 	bl	80022e0 <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004042:	e009      	b.n	8004058 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004044:	f7fe f94c 	bl	80022e0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d902      	bls.n	8004058 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	73fb      	strb	r3, [r7, #15]
          break;
 8004056:	e005      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ef      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4904      	ldr	r1, [pc, #16]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000

08004088 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004096:	4b6a      	ldr	r3, [pc, #424]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040a2:	4b67      	ldr	r3, [pc, #412]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0203 	and.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d10d      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
       ||
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ba:	4b61      	ldr	r3, [pc, #388]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d047      	beq.n	800415e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e044      	b.n	800415e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d018      	beq.n	800410e <RCCEx_PLLSAI2_Config+0x86>
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d825      	bhi.n	800412c <RCCEx_PLLSAI2_Config+0xa4>
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d002      	beq.n	80040ea <RCCEx_PLLSAI2_Config+0x62>
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d009      	beq.n	80040fc <RCCEx_PLLSAI2_Config+0x74>
 80040e8:	e020      	b.n	800412c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ea:	4b55      	ldr	r3, [pc, #340]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11d      	bne.n	8004132 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fa:	e01a      	b.n	8004132 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040fc:	4b50      	ldr	r3, [pc, #320]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d116      	bne.n	8004136 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410c:	e013      	b.n	8004136 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800410e:	4b4c      	ldr	r3, [pc, #304]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800411a:	4b49      	ldr	r3, [pc, #292]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800412a:	e006      	b.n	800413a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e004      	b.n	800413c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413a:	bf00      	nop
    }

    if(status == HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004142:	4b3f      	ldr	r3, [pc, #252]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	430b      	orrs	r3, r1
 8004158:	4939      	ldr	r1, [pc, #228]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d167      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004164:	4b36      	ldr	r3, [pc, #216]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a35      	ldr	r2, [pc, #212]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004170:	f7fe f8b6 	bl	80022e0 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004176:	e009      	b.n	800418c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004178:	f7fe f8b2 	bl	80022e0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d902      	bls.n	800418c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	73fb      	strb	r3, [r7, #15]
        break;
 800418a:	e005      	b.n	8004198 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418c:	4b2c      	ldr	r3, [pc, #176]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ef      	bne.n	8004178 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d14a      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d111      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041a4:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6892      	ldr	r2, [r2, #8]
 80041b4:	0211      	lsls	r1, r2, #8
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	0912      	lsrs	r2, r2, #4
 80041bc:	0452      	lsls	r2, r2, #17
 80041be:	430a      	orrs	r2, r1
 80041c0:	491f      	ldr	r1, [pc, #124]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	614b      	str	r3, [r1, #20]
 80041c6:	e011      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6892      	ldr	r2, [r2, #8]
 80041d8:	0211      	lsls	r1, r2, #8
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6912      	ldr	r2, [r2, #16]
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0652      	lsls	r2, r2, #25
 80041e4:	430a      	orrs	r2, r1
 80041e6:	4916      	ldr	r1, [pc, #88]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041ec:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a13      	ldr	r2, [pc, #76]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fe f872 	bl	80022e0 <HAL_GetTick>
 80041fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041fe:	e009      	b.n	8004214 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004200:	f7fe f86e 	bl	80022e0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d902      	bls.n	8004214 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	73fb      	strb	r3, [r7, #15]
          break;
 8004212:	e005      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004214:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0ef      	beq.n	8004200 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	4904      	ldr	r1, [pc, #16]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000

08004244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e095      	b.n	8004382 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004266:	d009      	beq.n	800427c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
 800426e:	e005      	b.n	800427c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fe84 	bl	8000fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042bc:	d902      	bls.n	80042c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e002      	b.n	80042ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80042d2:	d007      	beq.n	80042e4 <HAL_SPI_Init+0xa0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004326:	ea42 0103 	orr.w	r1, r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	f003 0204 	and.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004360:	ea42 0103 	orr.w	r1, r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e01a      	b.n	80043d2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fc fe39 	bl	800102c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b088      	sub	sp, #32
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ea:	f7fd ff79 	bl	80022e0 <HAL_GetTick>
 80043ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	e15c      	b.n	80046be <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0x36>
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e154      	b.n	80046be <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_SPI_Transmit+0x48>
 800441e:	2302      	movs	r3, #2
 8004420:	e14d      	b.n	80046be <HAL_SPI_Transmit+0x2e4>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2203      	movs	r2, #3
 800442e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004474:	d10f      	bne.n	8004496 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b40      	cmp	r3, #64	@ 0x40
 80044a2:	d007      	beq.n	80044b4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044bc:	d952      	bls.n	8004564 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Transmit+0xf2>
 80044c6:	8b7b      	ldrh	r3, [r7, #26]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d145      	bne.n	8004558 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	1c9a      	adds	r2, r3, #2
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044f0:	e032      	b.n	8004558 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d112      	bne.n	8004526 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	881a      	ldrh	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	1c9a      	adds	r2, r3, #2
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004524:	e018      	b.n	8004558 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004526:	f7fd fedb 	bl	80022e0 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d803      	bhi.n	800453e <HAL_SPI_Transmit+0x164>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d102      	bne.n	8004544 <HAL_SPI_Transmit+0x16a>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0b2      	b.n	80046be <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1c7      	bne.n	80044f2 <HAL_SPI_Transmit+0x118>
 8004562:	e083      	b.n	800466c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_SPI_Transmit+0x198>
 800456c:	8b7b      	ldrh	r3, [r7, #26]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d177      	bne.n	8004662 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d912      	bls.n	80045a2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b02      	subs	r3, #2
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045a0:	e05f      	b.n	8004662 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045c8:	e04b      	b.n	8004662 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d12b      	bne.n	8004630 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d912      	bls.n	8004608 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b02      	subs	r3, #2
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004606:	e02c      	b.n	8004662 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800462e:	e018      	b.n	8004662 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004630:	f7fd fe56 	bl	80022e0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d803      	bhi.n	8004648 <HAL_SPI_Transmit+0x26e>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d102      	bne.n	800464e <HAL_SPI_Transmit+0x274>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e02d      	b.n	80046be <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ae      	bne.n	80045ca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f947 	bl	8004904 <SPI_EndRxTxTransaction>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d8:	f7fd fe02 	bl	80022e0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e8:	f7fd fdfa 	bl	80022e0 <HAL_GetTick>
 80046ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ee:	4b39      	ldr	r3, [pc, #228]	@ (80047d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	015b      	lsls	r3, r3, #5
 80046f4:	0d1b      	lsrs	r3, r3, #20
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fe:	e054      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d050      	beq.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004708:	f7fd fdea 	bl	80022e0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	429a      	cmp	r2, r3
 8004716:	d902      	bls.n	800471e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13d      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800472c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004736:	d111      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	d004      	beq.n	800474c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474a:	d107      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004764:	d10f      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e017      	b.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d19b      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2000004c 	.word	0x2000004c

080047d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	@ 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047ea:	f7fd fd79 	bl	80022e0 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80047fa:	f7fd fd71 	bl	80022e0 <HAL_GetTick>
 80047fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004808:	4b3d      	ldr	r3, [pc, #244]	@ (8004900 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	00da      	lsls	r2, r3, #3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	0d1b      	lsrs	r3, r3, #20
 8004818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004820:	e060      	b.n	80048e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004828:	d107      	bne.n	800483a <SPI_WaitFifoStateUntilTimeout+0x62>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004838:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d050      	beq.n	80048e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004842:	f7fd fd4d 	bl	80022e0 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484e:	429a      	cmp	r2, r3
 8004850:	d902      	bls.n	8004858 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d13d      	bne.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004866:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004870:	d111      	bne.n	8004896 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487a:	d004      	beq.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004884:	d107      	bne.n	8004896 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004894:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800489e:	d10f      	bne.n	80048c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e010      	b.n	80048f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d196      	bne.n	8004822 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3728      	adds	r7, #40	@ 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	2000004c 	.word	0x2000004c

08004904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff ff5b 	bl	80047d8 <SPI_WaitFifoStateUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e027      	b.n	8004988 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2200      	movs	r2, #0
 8004940:	2180      	movs	r1, #128	@ 0x80
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fec0 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004952:	f043 0220 	orr.w	r2, r3, #32
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e014      	b.n	8004988 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ff34 	bl	80047d8 <SPI_WaitFifoStateUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e000      	b.n	8004988 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e049      	b.n	8004a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fcae 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 fa3e 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e047      	b.n	8004ae8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a23      	ldr	r2, [pc, #140]	@ (8004af4 <HAL_TIM_Base_Start+0xb4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a72:	d018      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_TIM_Base_Start+0xb8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_TIM_Base_Start+0xbc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIM_Base_Start+0xc0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_TIM_Base_Start+0xc4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIM_Base_Start+0x66>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	@ (8004b08 <HAL_TIM_Base_Start+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d115      	bne.n	8004ad2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <HAL_TIM_Base_Start+0xcc>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d015      	beq.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abe:	d011      	beq.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad0:	e008      	b.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e000      	b.n	8004ae6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e04f      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d115      	bne.n	8004bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <HAL_TIM_Base_Start_IT+0xdc>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d015      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e008      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	00010007 	.word	0x00010007

08004bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0202 	mvn.w	r2, #2
 8004c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8e9 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8db 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8ec 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0204 	mvn.w	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8c3 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8b5 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8c6 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0208 	mvn.w	r2, #8
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f89d 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f88f 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f8a0 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d020      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0210 	mvn.w	r2, #16
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f877 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f869 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f87a 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0201 	mvn.w	r2, #1
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc f81a 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00c      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f99b 	bl	80050c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f993 	bl	80050d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00c      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f834 	bl	8004e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0220 	mvn.w	r2, #32
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f95b 	bl	80050ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a46      	ldr	r2, [pc, #280]	@ (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a43      	ldr	r2, [pc, #268]	@ (8004f80 <TIM_Base_SetConfig+0x130>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a42      	ldr	r2, [pc, #264]	@ (8004f84 <TIM_Base_SetConfig+0x134>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a41      	ldr	r2, [pc, #260]	@ (8004f88 <TIM_Base_SetConfig+0x138>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	@ (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a35      	ldr	r2, [pc, #212]	@ (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb0:	d01b      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a32      	ldr	r2, [pc, #200]	@ (8004f80 <TIM_Base_SetConfig+0x130>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d017      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a31      	ldr	r2, [pc, #196]	@ (8004f84 <TIM_Base_SetConfig+0x134>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a30      	ldr	r2, [pc, #192]	@ (8004f88 <TIM_Base_SetConfig+0x138>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <TIM_Base_SetConfig+0x140>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f94 <TIM_Base_SetConfig+0x144>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f98 <TIM_Base_SetConfig+0x148>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <TIM_Base_SetConfig+0x140>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a16      	ldr	r2, [pc, #88]	@ (8004f94 <TIM_Base_SetConfig+0x144>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <TIM_Base_SetConfig+0x148>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40013400 	.word	0x40013400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40014400 	.word	0x40014400
 8004f98:	40014800 	.word	0x40014800

08004f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e068      	b.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1e      	ldr	r2, [pc, #120]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d018      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1b      	ldr	r2, [pc, #108]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1a      	ldr	r2, [pc, #104]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a13      	ldr	r2, [pc, #76]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a14      	ldr	r2, [pc, #80]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10c      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40013400 	.word	0x40013400
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e040      	b.n	800517c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc f954 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	@ 0x24
 8005114:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fedc 	bl	8005eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fc21 	bl	800597c <UART_SetConfig>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e01b      	b.n	800517c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 ff5b 	bl	8006030 <UART_CheckIdleState>
 800517a:	4603      	mov	r3, r0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	@ 0x28
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005198:	2b20      	cmp	r3, #32
 800519a:	d177      	bne.n	800528c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Transmit+0x24>
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e070      	b.n	800528e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2221      	movs	r2, #33	@ 0x21
 80051b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ba:	f7fd f891 	bl	80022e0 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d8:	d108      	bne.n	80051ec <HAL_UART_Transmit+0x68>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e003      	b.n	80051f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051f4:	e02f      	b.n	8005256 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2180      	movs	r1, #128	@ 0x80
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 ffbd 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e03b      	b.n	800528e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005228:	b292      	uxth	r2, r2
 800522a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	3302      	adds	r3, #2
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e007      	b.n	8005244 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3301      	adds	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1c9      	bne.n	80051f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	2140      	movs	r1, #64	@ 0x40
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 ff87 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e005      	b.n	800528e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d137      	bne.n	8005320 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_UART_Receive_IT+0x24>
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e030      	b.n	8005322 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <HAL_UART_Receive_IT+0x94>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d01f      	beq.n	8005310 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	613b      	str	r3, [r7, #16]
   return(result);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	69f9      	ldr	r1, [r7, #28]
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	61bb      	str	r3, [r7, #24]
   return(result);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	461a      	mov	r2, r3
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 ffa0 	bl	800625c <UART_Start_Receive_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	e000      	b.n	8005322 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3728      	adds	r7, #40	@ 0x28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40008000 	.word	0x40008000

08005330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b0ba      	sub	sp, #232	@ 0xe8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005356:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800535a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800535e:	4013      	ands	r3, r2
 8005360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00f      	beq.n	8005398 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 82ca 	beq.w	8005922 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
      }
      return;
 8005396:	e2c4      	b.n	8005922 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8117 	beq.w	80055d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053b2:	4b85      	ldr	r3, [pc, #532]	@ (80055c8 <HAL_UART_IRQHandler+0x298>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 810a 	beq.w	80055d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <HAL_UART_IRQHandler+0xbc>
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e2:	f043 0201 	orr.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <HAL_UART_IRQHandler+0xec>
 80053f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2202      	movs	r2, #2
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d011      	beq.n	800544c <HAL_UART_IRQHandler+0x11c>
 8005428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2204      	movs	r2, #4
 800543a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005442:	f043 0202 	orr.w	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d017      	beq.n	8005488 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005468:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2208      	movs	r2, #8
 8005476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547e:	f043 0208 	orr.w	r2, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <HAL_UART_IRQHandler+0x18a>
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005498:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00c      	beq.n	80054ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8230 	beq.w	8005926 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b40      	cmp	r3, #64	@ 0x40
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800550a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800550e:	2b00      	cmp	r3, #0
 8005510:	d04f      	beq.n	80055b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 ff68 	bl	80063e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005522:	2b40      	cmp	r3, #64	@ 0x40
 8005524:	d141      	bne.n	80055aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800553c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800555e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800556a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d9      	bne.n	8005526 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005576:	2b00      	cmp	r3, #0
 8005578:	d013      	beq.n	80055a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557e:	4a13      	ldr	r2, [pc, #76]	@ (80055cc <HAL_UART_IRQHandler+0x29c>)
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	4618      	mov	r0, r3
 8005588:	f7fc fffa 	bl	8002580 <HAL_DMA_Abort_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800559c:	4610      	mov	r0, r2
 800559e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	e00f      	b.n	80055c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9d4 	bl	8005950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00b      	b.n	80055c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9d0 	bl	8005950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e007      	b.n	80055c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9cc 	bl	8005950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055c0:	e1b1      	b.n	8005926 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c2:	bf00      	nop
    return;
 80055c4:	e1af      	b.n	8005926 <HAL_UART_IRQHandler+0x5f6>
 80055c6:	bf00      	nop
 80055c8:	04000120 	.word	0x04000120
 80055cc:	080064b1 	.word	0x080064b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 816a 	bne.w	80058ae <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8163 	beq.w	80058ae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 815c 	beq.w	80058ae <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2210      	movs	r2, #16
 80055fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	f040 80d4 	bne.w	80057b6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800561a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80ad 	beq.w	800577e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800562a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800562e:	429a      	cmp	r2, r3
 8005630:	f080 80a5 	bcs.w	800577e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800563a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 8086 	bne.w	800575c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800566c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800567a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800567e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1da      	bne.n	8005650 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e1      	bne.n	800569a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e3      	bne.n	80056d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800572a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800573e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005740:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800574c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e4      	bne.n	800571c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005756:	4618      	mov	r0, r3
 8005758:	f7fc fed4 	bl	8002504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800576e:	b29b      	uxth	r3, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8f4 	bl	8005964 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800577c:	e0d5      	b.n	800592a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005784:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005788:	429a      	cmp	r2, r3
 800578a:	f040 80ce 	bne.w	800592a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	f040 80c5 	bne.w	800592a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8d8 	bl	8005964 <HAL_UARTEx_RxEventCallback>
      return;
 80057b4:	e0b9      	b.n	800592a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80ab 	beq.w	800592e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80057d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80a6 	beq.w	800592e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005804:	647b      	str	r3, [r7, #68]	@ 0x44
 8005806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800580a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e4      	bne.n	80057e2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	623b      	str	r3, [r7, #32]
   return(result);
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800583c:	633a      	str	r2, [r7, #48]	@ 0x30
 800583e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e3      	bne.n	8005818 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60fb      	str	r3, [r7, #12]
   return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0310 	bic.w	r3, r3, #16
 8005878:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	617b      	str	r3, [r7, #20]
   return(result);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e4      	bne.n	8005864 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f85c 	bl	8005964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ac:	e03f      	b.n	800592e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <HAL_UART_IRQHandler+0x5a8>
 80058ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 ffe9 	bl	80068a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d6:	e02d      	b.n	8005934 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    }
    return;
 8005900:	e017      	b.n	8005932 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d012      	beq.n	8005934 <HAL_UART_IRQHandler+0x604>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fdde 	bl	80064dc <UART_EndTransmit_IT>
    return;
 8005920:	e008      	b.n	8005934 <HAL_UART_IRQHandler+0x604>
      return;
 8005922:	bf00      	nop
 8005924:	e006      	b.n	8005934 <HAL_UART_IRQHandler+0x604>
    return;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <HAL_UART_IRQHandler+0x604>
      return;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <HAL_UART_IRQHandler+0x604>
      return;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_UART_IRQHandler+0x604>
    return;
 8005932:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005934:	37e8      	adds	r7, #232	@ 0xe8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800597c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005980:	b08a      	sub	sp, #40	@ 0x28
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4ba4      	ldr	r3, [pc, #656]	@ (8005c3c <UART_SetConfig+0x2c0>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a99      	ldr	r2, [pc, #612]	@ (8005c40 <UART_SetConfig+0x2c4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e4:	4313      	orrs	r3, r2
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a90      	ldr	r2, [pc, #576]	@ (8005c44 <UART_SetConfig+0x2c8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d126      	bne.n	8005a54 <UART_SetConfig+0xd8>
 8005a06:	4b90      	ldr	r3, [pc, #576]	@ (8005c48 <UART_SetConfig+0x2cc>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d81b      	bhi.n	8005a4c <UART_SetConfig+0xd0>
 8005a14:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <UART_SetConfig+0xa0>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a2d 	.word	0x08005a2d
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a32:	e116      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005a34:	2302      	movs	r3, #2
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3a:	e112      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a42:	e10e      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005a44:	2308      	movs	r3, #8
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4a:	e10a      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a52:	e106      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a7c      	ldr	r2, [pc, #496]	@ (8005c4c <UART_SetConfig+0x2d0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d138      	bne.n	8005ad0 <UART_SetConfig+0x154>
 8005a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c48 <UART_SetConfig+0x2cc>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b0c      	cmp	r3, #12
 8005a6a:	d82d      	bhi.n	8005ac8 <UART_SetConfig+0x14c>
 8005a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a74 <UART_SetConfig+0xf8>)
 8005a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005ac9 	.word	0x08005ac9
 8005a7c:	08005ac9 	.word	0x08005ac9
 8005a80:	08005ac9 	.word	0x08005ac9
 8005a84:	08005ab9 	.word	0x08005ab9
 8005a88:	08005ac9 	.word	0x08005ac9
 8005a8c:	08005ac9 	.word	0x08005ac9
 8005a90:	08005ac9 	.word	0x08005ac9
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005ac9 	.word	0x08005ac9
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ac1 	.word	0x08005ac1
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aae:	e0d8      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab6:	e0d4      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005abe:	e0d0      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac6:	e0cc      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ace:	e0c8      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8005c50 <UART_SetConfig+0x2d4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d125      	bne.n	8005b26 <UART_SetConfig+0x1aa>
 8005ada:	4b5b      	ldr	r3, [pc, #364]	@ (8005c48 <UART_SetConfig+0x2cc>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ae4:	2b30      	cmp	r3, #48	@ 0x30
 8005ae6:	d016      	beq.n	8005b16 <UART_SetConfig+0x19a>
 8005ae8:	2b30      	cmp	r3, #48	@ 0x30
 8005aea:	d818      	bhi.n	8005b1e <UART_SetConfig+0x1a2>
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d00a      	beq.n	8005b06 <UART_SetConfig+0x18a>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d814      	bhi.n	8005b1e <UART_SetConfig+0x1a2>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <UART_SetConfig+0x182>
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d008      	beq.n	8005b0e <UART_SetConfig+0x192>
 8005afc:	e00f      	b.n	8005b1e <UART_SetConfig+0x1a2>
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b04:	e0ad      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b06:	2302      	movs	r3, #2
 8005b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0c:	e0a9      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b0e:	2304      	movs	r3, #4
 8005b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b14:	e0a5      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b16:	2308      	movs	r3, #8
 8005b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1c:	e0a1      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b1e:	2310      	movs	r3, #16
 8005b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b24:	e09d      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c54 <UART_SetConfig+0x2d8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d125      	bne.n	8005b7c <UART_SetConfig+0x200>
 8005b30:	4b45      	ldr	r3, [pc, #276]	@ (8005c48 <UART_SetConfig+0x2cc>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b3c:	d016      	beq.n	8005b6c <UART_SetConfig+0x1f0>
 8005b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b40:	d818      	bhi.n	8005b74 <UART_SetConfig+0x1f8>
 8005b42:	2b80      	cmp	r3, #128	@ 0x80
 8005b44:	d00a      	beq.n	8005b5c <UART_SetConfig+0x1e0>
 8005b46:	2b80      	cmp	r3, #128	@ 0x80
 8005b48:	d814      	bhi.n	8005b74 <UART_SetConfig+0x1f8>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <UART_SetConfig+0x1d8>
 8005b4e:	2b40      	cmp	r3, #64	@ 0x40
 8005b50:	d008      	beq.n	8005b64 <UART_SetConfig+0x1e8>
 8005b52:	e00f      	b.n	8005b74 <UART_SetConfig+0x1f8>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5a:	e082      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b62:	e07e      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b64:	2304      	movs	r3, #4
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6a:	e07a      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b72:	e076      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7a:	e072      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a35      	ldr	r2, [pc, #212]	@ (8005c58 <UART_SetConfig+0x2dc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d12a      	bne.n	8005bdc <UART_SetConfig+0x260>
 8005b86:	4b30      	ldr	r3, [pc, #192]	@ (8005c48 <UART_SetConfig+0x2cc>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b94:	d01a      	beq.n	8005bcc <UART_SetConfig+0x250>
 8005b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b9a:	d81b      	bhi.n	8005bd4 <UART_SetConfig+0x258>
 8005b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba0:	d00c      	beq.n	8005bbc <UART_SetConfig+0x240>
 8005ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba6:	d815      	bhi.n	8005bd4 <UART_SetConfig+0x258>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <UART_SetConfig+0x238>
 8005bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb0:	d008      	beq.n	8005bc4 <UART_SetConfig+0x248>
 8005bb2:	e00f      	b.n	8005bd4 <UART_SetConfig+0x258>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e052      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e04e      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e04a      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd2:	e046      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bda:	e042      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <UART_SetConfig+0x2c4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d13a      	bne.n	8005c5c <UART_SetConfig+0x2e0>
 8005be6:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <UART_SetConfig+0x2cc>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bf4:	d01a      	beq.n	8005c2c <UART_SetConfig+0x2b0>
 8005bf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bfa:	d81b      	bhi.n	8005c34 <UART_SetConfig+0x2b8>
 8005bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c00:	d00c      	beq.n	8005c1c <UART_SetConfig+0x2a0>
 8005c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c06:	d815      	bhi.n	8005c34 <UART_SetConfig+0x2b8>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <UART_SetConfig+0x298>
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c10:	d008      	beq.n	8005c24 <UART_SetConfig+0x2a8>
 8005c12:	e00f      	b.n	8005c34 <UART_SetConfig+0x2b8>
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1a:	e022      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c22:	e01e      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2a:	e01a      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c32:	e016      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3a:	e012      	b.n	8005c62 <UART_SetConfig+0x2e6>
 8005c3c:	efff69f3 	.word	0xefff69f3
 8005c40:	40008000 	.word	0x40008000
 8005c44:	40013800 	.word	0x40013800
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40004400 	.word	0x40004400
 8005c50:	40004800 	.word	0x40004800
 8005c54:	40004c00 	.word	0x40004c00
 8005c58:	40005000 	.word	0x40005000
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a9f      	ldr	r2, [pc, #636]	@ (8005ee4 <UART_SetConfig+0x568>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d17a      	bne.n	8005d62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d824      	bhi.n	8005cbe <UART_SetConfig+0x342>
 8005c74:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <UART_SetConfig+0x300>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005cbf 	.word	0x08005cbf
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005caf 	.word	0x08005caf
 8005c90:	08005cbf 	.word	0x08005cbf
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005cbf 	.word	0x08005cbf
 8005c9c:	08005cb7 	.word	0x08005cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fd fd56 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	61f8      	str	r0, [r7, #28]
        break;
 8005ca6:	e010      	b.n	8005cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee8 <UART_SetConfig+0x56c>)
 8005caa:	61fb      	str	r3, [r7, #28]
        break;
 8005cac:	e00d      	b.n	8005cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fd fcb7 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8005cb2:	61f8      	str	r0, [r7, #28]
        break;
 8005cb4:	e009      	b.n	8005cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cba:	61fb      	str	r3, [r7, #28]
        break;
 8005cbc:	e005      	b.n	8005cca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80fb 	beq.w	8005ec8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d305      	bcc.n	8005cee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d903      	bls.n	8005cf6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cf4:	e0e8      	b.n	8005ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	022b      	lsls	r3, r5, #8
 8005d08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d0c:	0222      	lsls	r2, r4, #8
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	6849      	ldr	r1, [r1, #4]
 8005d12:	0849      	lsrs	r1, r1, #1
 8005d14:	2000      	movs	r0, #0
 8005d16:	4688      	mov	r8, r1
 8005d18:	4681      	mov	r9, r0
 8005d1a:	eb12 0a08 	adds.w	sl, r2, r8
 8005d1e:	eb43 0b09 	adc.w	fp, r3, r9
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d30:	4650      	mov	r0, sl
 8005d32:	4659      	mov	r1, fp
 8005d34:	f7fa fc3a 	bl	80005ac <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d46:	d308      	bcc.n	8005d5a <UART_SetConfig+0x3de>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d4e:	d204      	bcs.n	8005d5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	60da      	str	r2, [r3, #12]
 8005d58:	e0b6      	b.n	8005ec8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d60:	e0b2      	b.n	8005ec8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d6a:	d15e      	bne.n	8005e2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d828      	bhi.n	8005dc6 <UART_SetConfig+0x44a>
 8005d74:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <UART_SetConfig+0x400>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	08005dc7 	.word	0x08005dc7
 8005d8c:	08005db7 	.word	0x08005db7
 8005d90:	08005dc7 	.word	0x08005dc7
 8005d94:	08005dc7 	.word	0x08005dc7
 8005d98:	08005dc7 	.word	0x08005dc7
 8005d9c:	08005dbf 	.word	0x08005dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da0:	f7fd fcd6 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005da4:	61f8      	str	r0, [r7, #28]
        break;
 8005da6:	e014      	b.n	8005dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da8:	f7fd fce8 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8005dac:	61f8      	str	r0, [r7, #28]
        break;
 8005dae:	e010      	b.n	8005dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ee8 <UART_SetConfig+0x56c>)
 8005db2:	61fb      	str	r3, [r7, #28]
        break;
 8005db4:	e00d      	b.n	8005dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db6:	f7fd fc33 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8005dba:	61f8      	str	r0, [r7, #28]
        break;
 8005dbc:	e009      	b.n	8005dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc2:	61fb      	str	r3, [r7, #28]
        break;
 8005dc4:	e005      	b.n	8005dd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d077      	beq.n	8005ec8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005a      	lsls	r2, r3, #1
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	441a      	add	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b0f      	cmp	r3, #15
 8005df2:	d916      	bls.n	8005e22 <UART_SetConfig+0x4a6>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfa:	d212      	bcs.n	8005e22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f023 030f 	bic.w	r3, r3, #15
 8005e04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	8afb      	ldrh	r3, [r7, #22]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	8afa      	ldrh	r2, [r7, #22]
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	e052      	b.n	8005ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e28:	e04e      	b.n	8005ec8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d827      	bhi.n	8005e82 <UART_SetConfig+0x506>
 8005e32:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <UART_SetConfig+0x4bc>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	08005e83 	.word	0x08005e83
 8005e48:	08005e73 	.word	0x08005e73
 8005e4c:	08005e83 	.word	0x08005e83
 8005e50:	08005e83 	.word	0x08005e83
 8005e54:	08005e83 	.word	0x08005e83
 8005e58:	08005e7b 	.word	0x08005e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fd fc78 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005e60:	61f8      	str	r0, [r7, #28]
        break;
 8005e62:	e014      	b.n	8005e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e64:	f7fd fc8a 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8005e68:	61f8      	str	r0, [r7, #28]
        break;
 8005e6a:	e010      	b.n	8005e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee8 <UART_SetConfig+0x56c>)
 8005e6e:	61fb      	str	r3, [r7, #28]
        break;
 8005e70:	e00d      	b.n	8005e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e72:	f7fd fbd5 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8005e76:	61f8      	str	r0, [r7, #28]
        break;
 8005e78:	e009      	b.n	8005e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e7e:	61fb      	str	r3, [r7, #28]
        break;
 8005e80:	e005      	b.n	8005e8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d019      	beq.n	8005ec8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	085a      	lsrs	r2, r3, #1
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b0f      	cmp	r3, #15
 8005eac:	d909      	bls.n	8005ec2 <UART_SetConfig+0x546>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb4:	d205      	bcs.n	8005ec2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e002      	b.n	8005ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40008000 	.word	0x40008000
 8005ee8:	00f42400 	.word	0x00f42400

08005eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01a      	beq.n	8006002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fea:	d10a      	bne.n	8006002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	605a      	str	r2, [r3, #4]
  }
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b098      	sub	sp, #96	@ 0x60
 8006034:	af02      	add	r7, sp, #8
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006040:	f7fc f94e 	bl	80022e0 <HAL_GetTick>
 8006044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d12e      	bne.n	80060b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800605c:	2200      	movs	r2, #0
 800605e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f88c 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d021      	beq.n	80060b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006082:	653b      	str	r3, [r7, #80]	@ 0x50
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800608c:	647b      	str	r3, [r7, #68]	@ 0x44
 800608e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800609a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e062      	b.n	8006178 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d149      	bne.n	8006154 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f856 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03c      	beq.n	8006154 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	623b      	str	r3, [r7, #32]
   return(result);
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60fb      	str	r3, [r7, #12]
   return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800612c:	61fa      	str	r2, [r7, #28]
 800612e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	617b      	str	r3, [r7, #20]
   return(result);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e011      	b.n	8006178 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3758      	adds	r7, #88	@ 0x58
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006190:	e04f      	b.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d04b      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fc f8a1 	bl	80022e0 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e04e      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d037      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b80      	cmp	r3, #128	@ 0x80
 80061c6:	d034      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d031      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d110      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f8ff 	bl	80063e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2208      	movs	r2, #8
 80061ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e029      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800620c:	d111      	bne.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f8e5 	bl	80063e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e00f      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	429a      	cmp	r2, r3
 8006240:	bf0c      	ite	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	2300      	movne	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	429a      	cmp	r2, r3
 800624e:	d0a0      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625c:	b480      	push	{r7}
 800625e:	b097      	sub	sp, #92	@ 0x5c
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628e:	d10e      	bne.n	80062ae <UART_Start_Receive_IT+0x52>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <UART_Start_Receive_IT+0x48>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800629e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062a2:	e02d      	b.n	8006300 <UART_Start_Receive_IT+0xa4>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	22ff      	movs	r2, #255	@ 0xff
 80062a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ac:	e028      	b.n	8006300 <UART_Start_Receive_IT+0xa4>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <UART_Start_Receive_IT+0x76>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <UART_Start_Receive_IT+0x6c>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	22ff      	movs	r2, #255	@ 0xff
 80062c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062c6:	e01b      	b.n	8006300 <UART_Start_Receive_IT+0xa4>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	227f      	movs	r2, #127	@ 0x7f
 80062cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062d0:	e016      	b.n	8006300 <UART_Start_Receive_IT+0xa4>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062da:	d10d      	bne.n	80062f8 <UART_Start_Receive_IT+0x9c>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <UART_Start_Receive_IT+0x92>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	227f      	movs	r2, #127	@ 0x7f
 80062e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ec:	e008      	b.n	8006300 <UART_Start_Receive_IT+0xa4>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	223f      	movs	r2, #63	@ 0x3f
 80062f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f6:	e003      	b.n	8006300 <UART_Start_Receive_IT+0xa4>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2222      	movs	r2, #34	@ 0x22
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	657b      	str	r3, [r7, #84]	@ 0x54
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3308      	adds	r3, #8
 800632e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006330:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006332:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800633e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e5      	bne.n	8006310 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634c:	d107      	bne.n	800635e <UART_Start_Receive_IT+0x102>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a21      	ldr	r2, [pc, #132]	@ (80063e0 <UART_Start_Receive_IT+0x184>)
 800635a:	669a      	str	r2, [r3, #104]	@ 0x68
 800635c:	e002      	b.n	8006364 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a20      	ldr	r2, [pc, #128]	@ (80063e4 <UART_Start_Receive_IT+0x188>)
 8006362:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d019      	beq.n	80063a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006380:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800638a:	637b      	str	r3, [r7, #52]	@ 0x34
 800638c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <UART_Start_Receive_IT+0x110>
 800639e:	e018      	b.n	80063d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	613b      	str	r3, [r7, #16]
   return(result);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f043 0320 	orr.w	r3, r3, #32
 80063b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063be:	623b      	str	r3, [r7, #32]
 80063c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	69f9      	ldr	r1, [r7, #28]
 80063c4:	6a3a      	ldr	r2, [r7, #32]
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e6      	bne.n	80063a0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	375c      	adds	r7, #92	@ 0x5c
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	080066ed 	.word	0x080066ed
 80063e4:	08006531 	.word	0x08006531

080063e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b095      	sub	sp, #84	@ 0x54
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800640e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006410:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006414:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e6      	bne.n	80063f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	61fb      	str	r3, [r7, #28]
   return(result);
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645a:	2b01      	cmp	r3, #1
 800645c:	d118      	bne.n	8006490 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60bb      	str	r3, [r7, #8]
   return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	647b      	str	r3, [r7, #68]	@ 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	613b      	str	r3, [r7, #16]
   return(result);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064a4:	bf00      	nop
 80064a6:	3754      	adds	r7, #84	@ 0x54
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fa3e 	bl	8005950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	613b      	str	r3, [r7, #16]
   return(result);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff fa0a 	bl	800593c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006528:	bf00      	nop
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b09c      	sub	sp, #112	@ 0x70
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800653e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006548:	2b22      	cmp	r3, #34	@ 0x22
 800654a:	f040 80be 	bne.w	80066ca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006554:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800655c:	b2d9      	uxtb	r1, r3
 800655e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006562:	b2da      	uxtb	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006568:	400a      	ands	r2, r1
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 80a3 	bne.w	80066de <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e6      	bne.n	8006598 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80065ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80065ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e5      	bne.n	80065ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a34      	ldr	r2, [pc, #208]	@ (80066e8 <UART_RxISR_8BIT+0x1b8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01f      	beq.n	800665c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d018      	beq.n	800665c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	623b      	str	r3, [r7, #32]
   return(result);
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800663e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006648:	633b      	str	r3, [r7, #48]	@ 0x30
 800664a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800664e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e6      	bne.n	800662a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006660:	2b01      	cmp	r3, #1
 8006662:	d12e      	bne.n	80066c2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	60fb      	str	r3, [r7, #12]
   return(result);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0310 	bic.w	r3, r3, #16
 800667e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	69b9      	ldr	r1, [r7, #24]
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	617b      	str	r3, [r7, #20]
   return(result);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e6      	bne.n	800666a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d103      	bne.n	80066b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2210      	movs	r2, #16
 80066b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff f952 	bl	8005964 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066c0:	e00d      	b.n	80066de <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fa f9f6 	bl	8000ab4 <HAL_UART_RxCpltCallback>
}
 80066c8:	e009      	b.n	80066de <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	8b1b      	ldrh	r3, [r3, #24]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0208 	orr.w	r2, r2, #8
 80066da:	b292      	uxth	r2, r2
 80066dc:	831a      	strh	r2, [r3, #24]
}
 80066de:	bf00      	nop
 80066e0:	3770      	adds	r7, #112	@ 0x70
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40008000 	.word	0x40008000

080066ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b09c      	sub	sp, #112	@ 0x70
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006704:	2b22      	cmp	r3, #34	@ 0x22
 8006706:	f040 80be 	bne.w	8006886 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006710:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800671a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800671e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006722:	4013      	ands	r3, r2
 8006724:	b29a      	uxth	r2, r3
 8006726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672e:	1c9a      	adds	r2, r3, #2
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 80a3 	bne.w	800689a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006768:	667b      	str	r3, [r7, #100]	@ 0x64
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006772:	657b      	str	r3, [r7, #84]	@ 0x54
 8006774:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e6      	bne.n	8006754 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	663b      	str	r3, [r7, #96]	@ 0x60
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80067a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e5      	bne.n	8006786 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a34      	ldr	r2, [pc, #208]	@ (80068a4 <UART_RxISR_16BIT+0x1b8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d01f      	beq.n	8006818 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d018      	beq.n	8006818 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006806:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800680a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e6      	bne.n	80067e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800681c:	2b01      	cmp	r3, #1
 800681e:	d12e      	bne.n	800687e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	60bb      	str	r3, [r7, #8]
   return(result);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f023 0310 	bic.w	r3, r3, #16
 800683a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	613b      	str	r3, [r7, #16]
   return(result);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e6      	bne.n	8006826 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b10      	cmp	r3, #16
 8006864:	d103      	bne.n	800686e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2210      	movs	r2, #16
 800686c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff f874 	bl	8005964 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800687c:	e00d      	b.n	800689a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fa f918 	bl	8000ab4 <HAL_UART_RxCpltCallback>
}
 8006884:	e009      	b.n	800689a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	8b1b      	ldrh	r3, [r3, #24]
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0208 	orr.w	r2, r2, #8
 8006896:	b292      	uxth	r2, r2
 8006898:	831a      	strh	r2, [r3, #24]
}
 800689a:	bf00      	nop
 800689c:	3770      	adds	r7, #112	@ 0x70
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40008000 	.word	0x40008000

080068a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <__NVIC_SetPriority>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	db0a      	blt.n	80068e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	490c      	ldr	r1, [pc, #48]	@ (8006908 <__NVIC_SetPriority+0x4c>)
 80068d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068da:	0112      	lsls	r2, r2, #4
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	440b      	add	r3, r1
 80068e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80068e4:	e00a      	b.n	80068fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	4908      	ldr	r1, [pc, #32]	@ (800690c <__NVIC_SetPriority+0x50>)
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	3b04      	subs	r3, #4
 80068f4:	0112      	lsls	r2, r2, #4
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	440b      	add	r3, r1
 80068fa:	761a      	strb	r2, [r3, #24]
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	e000e100 	.word	0xe000e100
 800690c:	e000ed00 	.word	0xe000ed00

08006910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <SysTick_Handler+0x1c>)
 8006916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006918:	f001 fd18 	bl	800834c <xTaskGetSchedulerState>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d001      	beq.n	8006926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006922:	f002 fb11 	bl	8008f48 <xPortSysTickHandler>
  }
}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	e000e010 	.word	0xe000e010

08006930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006934:	2100      	movs	r1, #0
 8006936:	f06f 0004 	mvn.w	r0, #4
 800693a:	f7ff ffbf 	bl	80068bc <__NVIC_SetPriority>
#endif
}
 800693e:	bf00      	nop
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800694a:	f3ef 8305 	mrs	r3, IPSR
 800694e:	603b      	str	r3, [r7, #0]
  return(result);
 8006950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006956:	f06f 0305 	mvn.w	r3, #5
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	e00c      	b.n	8006978 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800695e:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <osKernelInitialize+0x44>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d105      	bne.n	8006972 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006966:	4b08      	ldr	r3, [pc, #32]	@ (8006988 <osKernelInitialize+0x44>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800696c:	2300      	movs	r3, #0
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	e002      	b.n	8006978 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006978:	687b      	ldr	r3, [r7, #4]
}
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	200002c4 	.word	0x200002c4

0800698c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006992:	f3ef 8305 	mrs	r3, IPSR
 8006996:	603b      	str	r3, [r7, #0]
  return(result);
 8006998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800699e:	f06f 0305 	mvn.w	r3, #5
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	e010      	b.n	80069c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069a6:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <osKernelStart+0x48>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d109      	bne.n	80069c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069ae:	f7ff ffbf 	bl	8006930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069b2:	4b08      	ldr	r3, [pc, #32]	@ (80069d4 <osKernelStart+0x48>)
 80069b4:	2202      	movs	r2, #2
 80069b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069b8:	f001 f87a 	bl	8007ab0 <vTaskStartScheduler>
      stat = osOK;
 80069bc:	2300      	movs	r3, #0
 80069be:	607b      	str	r3, [r7, #4]
 80069c0:	e002      	b.n	80069c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069c8:	687b      	ldr	r3, [r7, #4]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200002c4 	.word	0x200002c4

080069d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08e      	sub	sp, #56	@ 0x38
 80069dc:	af04      	add	r7, sp, #16
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e8:	f3ef 8305 	mrs	r3, IPSR
 80069ec:	617b      	str	r3, [r7, #20]
  return(result);
 80069ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d17e      	bne.n	8006af2 <osThreadNew+0x11a>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d07b      	beq.n	8006af2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80069fa:	2380      	movs	r3, #128	@ 0x80
 80069fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80069fe:	2318      	movs	r3, #24
 8006a00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d045      	beq.n	8006a9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <osThreadNew+0x48>
        name = attr->name;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <osThreadNew+0x6e>
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	2b38      	cmp	r3, #56	@ 0x38
 8006a38:	d805      	bhi.n	8006a46 <osThreadNew+0x6e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <osThreadNew+0x72>
        return (NULL);
 8006a46:	2300      	movs	r3, #0
 8006a48:	e054      	b.n	8006af4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <osThreadNew+0xa8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b5b      	cmp	r3, #91	@ 0x5b
 8006a68:	d90a      	bls.n	8006a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <osThreadNew+0xa8>
        mem = 1;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e010      	b.n	8006aa2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10c      	bne.n	8006aa2 <osThreadNew+0xca>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d108      	bne.n	8006aa2 <osThreadNew+0xca>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <osThreadNew+0xca>
          mem = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	e001      	b.n	8006aa2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d110      	bne.n	8006aca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ab0:	9202      	str	r2, [sp, #8]
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6a3a      	ldr	r2, [r7, #32]
 8006abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fe1a 	bl	80076f8 <xTaskCreateStatic>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	e013      	b.n	8006af2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d110      	bne.n	8006af2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	f107 0310 	add.w	r3, r7, #16
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fe68 	bl	80077b8 <xTaskCreate>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d001      	beq.n	8006af2 <osThreadNew+0x11a>
            hTask = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006af2:	693b      	ldr	r3, [r7, #16]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	@ 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b04:	f3ef 8305 	mrs	r3, IPSR
 8006b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <osDelay+0x1c>
    stat = osErrorISR;
 8006b10:	f06f 0305 	mvn.w	r3, #5
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e007      	b.n	8006b28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 ff8e 	bl	8007a44 <vTaskDelay>
    }
  }

  return (stat);
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a07      	ldr	r2, [pc, #28]	@ (8006b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4a06      	ldr	r2, [pc, #24]	@ (8006b64 <vApplicationGetIdleTaskMemory+0x30>)
 8006b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2280      	movs	r2, #128	@ 0x80
 8006b50:	601a      	str	r2, [r3, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	200002c8 	.word	0x200002c8
 8006b64:	20000324 	.word	0x20000324

08006b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a07      	ldr	r2, [pc, #28]	@ (8006b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a06      	ldr	r2, [pc, #24]	@ (8006b98 <vApplicationGetTimerTaskMemory+0x30>)
 8006b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000524 	.word	0x20000524
 8006b98:	20000580 	.word	0x20000580

08006b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f103 0208 	add.w	r2, r3, #8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f103 0208 	add.w	r2, r3, #8
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d103      	bne.n	8006c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e00c      	b.n	8006c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3308      	adds	r3, #8
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e002      	b.n	8006c6c <vListInsert+0x2e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d2f6      	bcs.n	8006c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6892      	ldr	r2, [r2, #8]
 8006cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6852      	ldr	r2, [r2, #4]
 8006cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d103      	bne.n	8006ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	1e5a      	subs	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d30:	f002 f87a 	bl	8008e28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3c:	68f9      	ldr	r1, [r7, #12]
 8006d3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	441a      	add	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d60:	3b01      	subs	r3, #1
 8006d62:	68f9      	ldr	r1, [r7, #12]
 8006d64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	22ff      	movs	r2, #255	@ 0xff
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	22ff      	movs	r2, #255	@ 0xff
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d114      	bne.n	8006db0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01a      	beq.n	8006dc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3310      	adds	r3, #16
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 f91a 	bl	8007fcc <xTaskRemoveFromEventList>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d012      	beq.n	8006dc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <xQueueGenericReset+0xd0>)
 8006da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	e009      	b.n	8006dc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3310      	adds	r3, #16
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fef1 	bl	8006b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3324      	adds	r3, #36	@ 0x24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff feec 	bl	8006b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006dc4:	f002 f862 	bl	8008e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006dc8:	2301      	movs	r3, #1
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08e      	sub	sp, #56	@ 0x38
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <xQueueGenericCreateStatic+0x56>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <xQueueGenericCreateStatic+0x5a>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <xQueueGenericCreateStatic+0x5c>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	623b      	str	r3, [r7, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <xQueueGenericCreateStatic+0x84>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <xQueueGenericCreateStatic+0x88>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <xQueueGenericCreateStatic+0x8a>
 8006e60:	2300      	movs	r3, #0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	61fb      	str	r3, [r7, #28]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e7e:	2350      	movs	r3, #80	@ 0x50
 8006e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b50      	cmp	r3, #80	@ 0x50
 8006e86:	d00b      	beq.n	8006ea0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61bb      	str	r3, [r7, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ea0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f805 	bl	8006ed2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3730      	adds	r7, #48	@ 0x30
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e002      	b.n	8006ef4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f00:	2101      	movs	r1, #1
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f7ff fefe 	bl	8006d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	@ 0x38
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f26:	2300      	movs	r3, #0
 8006f28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <xQueueGenericSend+0x34>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	e7fd      	b.n	8006f48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <xQueueGenericSend+0x42>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <xQueueGenericSend+0x46>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <xQueueGenericSend+0x48>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10b      	bne.n	8006f7c <xQueueGenericSend+0x64>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f76:	bf00      	nop
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d103      	bne.n	8006f8a <xQueueGenericSend+0x72>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <xQueueGenericSend+0x76>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueGenericSend+0x78>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10b      	bne.n	8006fac <xQueueGenericSend+0x94>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	623b      	str	r3, [r7, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fac:	f001 f9ce 	bl	800834c <xTaskGetSchedulerState>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <xQueueGenericSend+0xa4>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <xQueueGenericSend+0xa8>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <xQueueGenericSend+0xaa>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <xQueueGenericSend+0xc6>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	61fb      	str	r3, [r7, #28]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fde:	f001 ff23 	bl	8008e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <xQueueGenericSend+0xdc>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d129      	bne.n	8007048 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ffa:	f000 fa0f 	bl	800741c <prvCopyDataToQueue>
 8006ffe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d010      	beq.n	800702a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	3324      	adds	r3, #36	@ 0x24
 800700c:	4618      	mov	r0, r3
 800700e:	f000 ffdd 	bl	8007fcc <xTaskRemoveFromEventList>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d013      	beq.n	8007040 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007018:	4b3f      	ldr	r3, [pc, #252]	@ (8007118 <xQueueGenericSend+0x200>)
 800701a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	e00a      	b.n	8007040 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007030:	4b39      	ldr	r3, [pc, #228]	@ (8007118 <xQueueGenericSend+0x200>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007040:	f001 ff24 	bl	8008e8c <vPortExitCritical>
				return pdPASS;
 8007044:	2301      	movs	r3, #1
 8007046:	e063      	b.n	8007110 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800704e:	f001 ff1d 	bl	8008e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007052:	2300      	movs	r3, #0
 8007054:	e05c      	b.n	8007110 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f817 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007066:	2301      	movs	r3, #1
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800706a:	f001 ff0f 	bl	8008e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800706e:	f000 fd87 	bl	8007b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007072:	f001 fed9 	bl	8008e28 <vPortEnterCritical>
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800707c:	b25b      	sxtb	r3, r3
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d103      	bne.n	800708c <xQueueGenericSend+0x174>
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d103      	bne.n	80070a2 <xQueueGenericSend+0x18a>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a2:	f001 fef3 	bl	8008e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070a6:	1d3a      	adds	r2, r7, #4
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	4611      	mov	r1, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 f806 	bl	80080c0 <xTaskCheckForTimeOut>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d124      	bne.n	8007104 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070bc:	f000 faa6 	bl	800760c <prvIsQueueFull>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d018      	beq.n	80070f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	3310      	adds	r3, #16
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 ff2a 	bl	8007f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070d6:	f000 fa31 	bl	800753c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070da:	f000 fd5f 	bl	8007b9c <xTaskResumeAll>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f af7c 	bne.w	8006fde <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80070e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <xQueueGenericSend+0x200>)
 80070e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	e772      	b.n	8006fde <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fa:	f000 fa1f 	bl	800753c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070fe:	f000 fd4d 	bl	8007b9c <xTaskResumeAll>
 8007102:	e76c      	b.n	8006fde <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007106:	f000 fa19 	bl	800753c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800710a:	f000 fd47 	bl	8007b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800710e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007110:	4618      	mov	r0, r3
 8007112:	3738      	adds	r7, #56	@ 0x38
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	e000ed04 	.word	0xe000ed04

0800711c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b090      	sub	sp, #64	@ 0x40
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	e7fd      	b.n	8007148 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <xQueueGenericSendFromISR+0x3e>
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <xQueueGenericSendFromISR+0x42>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueGenericSendFromISR+0x44>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d103      	bne.n	800718a <xQueueGenericSendFromISR+0x6e>
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <xQueueGenericSendFromISR+0x72>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueGenericSendFromISR+0x74>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	623b      	str	r3, [r7, #32]
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071ac:	f001 ff1c 	bl	8008fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071b0:	f3ef 8211 	mrs	r2, BASEPRI
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	61fa      	str	r2, [r7, #28]
 80071c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d302      	bcc.n	80071de <xQueueGenericSendFromISR+0xc2>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d12f      	bne.n	800723e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071f4:	f000 f912 	bl	800741c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d112      	bne.n	8007228 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007206:	2b00      	cmp	r3, #0
 8007208:	d016      	beq.n	8007238 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	3324      	adds	r3, #36	@ 0x24
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fedc 	bl	8007fcc <xTaskRemoveFromEventList>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00e      	beq.n	8007238 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	e007      	b.n	8007238 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007228:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800722c:	3301      	adds	r3, #1
 800722e:	b2db      	uxtb	r3, r3
 8007230:	b25a      	sxtb	r2, r3
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007238:	2301      	movs	r3, #1
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800723c:	e001      	b.n	8007242 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800723e:	2300      	movs	r3, #0
 8007240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007244:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800724c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800724e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007250:	4618      	mov	r0, r3
 8007252:	3740      	adds	r7, #64	@ 0x40
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08c      	sub	sp, #48	@ 0x30
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <xQueueReceive+0x32>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	623b      	str	r3, [r7, #32]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <xQueueReceive+0x40>
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <xQueueReceive+0x44>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <xQueueReceive+0x46>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <xQueueReceive+0x62>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	61fb      	str	r3, [r7, #28]
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	e7fd      	b.n	80072b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ba:	f001 f847 	bl	800834c <xTaskGetSchedulerState>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <xQueueReceive+0x72>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <xQueueReceive+0x76>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <xQueueReceive+0x78>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xQueueReceive+0x94>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	61bb      	str	r3, [r7, #24]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072ec:	f001 fd9c 	bl	8008e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01f      	beq.n	800733c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007300:	f000 f8f6 	bl	80074f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	3310      	adds	r3, #16
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fe57 	bl	8007fcc <xTaskRemoveFromEventList>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007324:	4b3c      	ldr	r3, [pc, #240]	@ (8007418 <xQueueReceive+0x1c0>)
 8007326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007334:	f001 fdaa 	bl	8008e8c <vPortExitCritical>
				return pdPASS;
 8007338:	2301      	movs	r3, #1
 800733a:	e069      	b.n	8007410 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007342:	f001 fda3 	bl	8008e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007346:	2300      	movs	r3, #0
 8007348:	e062      	b.n	8007410 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d106      	bne.n	800735e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007350:	f107 0310 	add.w	r3, r7, #16
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fe9d 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800735a:	2301      	movs	r3, #1
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800735e:	f001 fd95 	bl	8008e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007362:	f000 fc0d 	bl	8007b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007366:	f001 fd5f 	bl	8008e28 <vPortEnterCritical>
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007370:	b25b      	sxtb	r3, r3
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d103      	bne.n	8007380 <xQueueReceive+0x128>
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007386:	b25b      	sxtb	r3, r3
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d103      	bne.n	8007396 <xQueueReceive+0x13e>
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007396:	f001 fd79 	bl	8008e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800739a:	1d3a      	adds	r2, r7, #4
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	4611      	mov	r1, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fe8c 	bl	80080c0 <xTaskCheckForTimeOut>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d123      	bne.n	80073f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073b0:	f000 f916 	bl	80075e0 <prvIsQueueEmpty>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d017      	beq.n	80073ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	3324      	adds	r3, #36	@ 0x24
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fdb0 	bl	8007f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ca:	f000 f8b7 	bl	800753c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073ce:	f000 fbe5 	bl	8007b9c <xTaskResumeAll>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d189      	bne.n	80072ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80073d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007418 <xQueueReceive+0x1c0>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	e780      	b.n	80072ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ec:	f000 f8a6 	bl	800753c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073f0:	f000 fbd4 	bl	8007b9c <xTaskResumeAll>
 80073f4:	e77a      	b.n	80072ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f8:	f000 f8a0 	bl	800753c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073fc:	f000 fbce 	bl	8007b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007402:	f000 f8ed 	bl	80075e0 <prvIsQueueEmpty>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	f43f af6f 	beq.w	80072ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800740e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007410:	4618      	mov	r0, r3
 8007412:	3730      	adds	r7, #48	@ 0x30
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10d      	bne.n	8007456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d14d      	bne.n	80074de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 ff9e 	bl	8008388 <xTaskPriorityDisinherit>
 800744c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	609a      	str	r2, [r3, #8]
 8007454:	e043      	b.n	80074de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d119      	bne.n	8007490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6858      	ldr	r0, [r3, #4]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007464:	461a      	mov	r2, r3
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	f002 f8fc 	bl	8009664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007474:	441a      	add	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	429a      	cmp	r2, r3
 8007484:	d32b      	bcc.n	80074de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	e026      	b.n	80074de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68d8      	ldr	r0, [r3, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	461a      	mov	r2, r3
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	f002 f8e2 	bl	8009664 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a8:	425b      	negs	r3, r3
 80074aa:	441a      	add	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d207      	bcs.n	80074cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c4:	425b      	negs	r3, r3
 80074c6:	441a      	add	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d105      	bne.n	80074de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	3b01      	subs	r3, #1
 80074dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80074e6:	697b      	ldr	r3, [r7, #20]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d018      	beq.n	8007534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	441a      	add	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	d303      	bcc.n	8007524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68d9      	ldr	r1, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752c:	461a      	mov	r2, r3
 800752e:	6838      	ldr	r0, [r7, #0]
 8007530:	f002 f898 	bl	8009664 <memcpy>
	}
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007544:	f001 fc70 	bl	8008e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800754e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007550:	e011      	b.n	8007576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	d012      	beq.n	8007580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3324      	adds	r3, #36	@ 0x24
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fd34 	bl	8007fcc <xTaskRemoveFromEventList>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800756a:	f000 fe0d 	bl	8008188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	3b01      	subs	r3, #1
 8007572:	b2db      	uxtb	r3, r3
 8007574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800757a:	2b00      	cmp	r3, #0
 800757c:	dce9      	bgt.n	8007552 <prvUnlockQueue+0x16>
 800757e:	e000      	b.n	8007582 <prvUnlockQueue+0x46>
					break;
 8007580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	22ff      	movs	r2, #255	@ 0xff
 8007586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800758a:	f001 fc7f 	bl	8008e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800758e:	f001 fc4b 	bl	8008e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800759a:	e011      	b.n	80075c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d012      	beq.n	80075ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3310      	adds	r3, #16
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fd0f 	bl	8007fcc <xTaskRemoveFromEventList>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075b4:	f000 fde8 	bl	8008188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dce9      	bgt.n	800759c <prvUnlockQueue+0x60>
 80075c8:	e000      	b.n	80075cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	22ff      	movs	r2, #255	@ 0xff
 80075d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80075d4:	f001 fc5a 	bl	8008e8c <vPortExitCritical>
}
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075e8:	f001 fc1e 	bl	8008e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075f4:	2301      	movs	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e001      	b.n	80075fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075fe:	f001 fc45 	bl	8008e8c <vPortExitCritical>

	return xReturn;
 8007602:	68fb      	ldr	r3, [r7, #12]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007614:	f001 fc08 	bl	8008e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007620:	429a      	cmp	r2, r3
 8007622:	d102      	bne.n	800762a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007624:	2301      	movs	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	e001      	b.n	800762e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800762e:	f001 fc2d 	bl	8008e8c <vPortExitCritical>

	return xReturn;
 8007632:	68fb      	ldr	r3, [r7, #12]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e014      	b.n	8007676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800764c:	4a0f      	ldr	r2, [pc, #60]	@ (800768c <vQueueAddToRegistry+0x50>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007658:	490c      	ldr	r1, [pc, #48]	@ (800768c <vQueueAddToRegistry+0x50>)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007662:	4a0a      	ldr	r2, [pc, #40]	@ (800768c <vQueueAddToRegistry+0x50>)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	4413      	add	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800766e:	e006      	b.n	800767e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b07      	cmp	r3, #7
 800767a:	d9e7      	bls.n	800764c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20000980 	.word	0x20000980

08007690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80076a0:	f001 fbc2 	bl	8008e28 <vPortEnterCritical>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d103      	bne.n	80076ba <vQueueWaitForMessageRestricted+0x2a>
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d103      	bne.n	80076d0 <vQueueWaitForMessageRestricted+0x40>
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076d0:	f001 fbdc 	bl	8008e8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3324      	adds	r3, #36	@ 0x24
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fc45 	bl	8007f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076ea:	6978      	ldr	r0, [r7, #20]
 80076ec:	f7ff ff26 	bl	800753c <prvUnlockQueue>
	}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08e      	sub	sp, #56	@ 0x38
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10b      	bne.n	8007724 <xTaskCreateStatic+0x2c>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	623b      	str	r3, [r7, #32]
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	e7fd      	b.n	8007720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <xTaskCreateStatic+0x4a>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	61fb      	str	r3, [r7, #28]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007742:	235c      	movs	r3, #92	@ 0x5c
 8007744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b5c      	cmp	r3, #92	@ 0x5c
 800774a:	d00b      	beq.n	8007764 <xTaskCreateStatic+0x6c>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	61bb      	str	r3, [r7, #24]
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007764:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01e      	beq.n	80077aa <xTaskCreateStatic+0xb2>
 800776c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01b      	beq.n	80077aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800777a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007784:	2300      	movs	r3, #0
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	9302      	str	r3, [sp, #8]
 800778c:	f107 0314 	add.w	r3, r7, #20
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f850 	bl	8007842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077a4:	f000 f8de 	bl	8007964 <prvAddNewTaskToReadyList>
 80077a8:	e001      	b.n	80077ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077ae:	697b      	ldr	r3, [r7, #20]
	}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3728      	adds	r7, #40	@ 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08c      	sub	sp, #48	@ 0x30
 80077bc:	af04      	add	r7, sp, #16
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fc4d 	bl	800906c <pvPortMalloc>
 80077d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00e      	beq.n	80077f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077da:	205c      	movs	r0, #92	@ 0x5c
 80077dc:	f001 fc46 	bl	800906c <pvPortMalloc>
 80077e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80077ee:	e005      	b.n	80077fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077f0:	6978      	ldr	r0, [r7, #20]
 80077f2:	f001 fd09 	bl	8009208 <vPortFree>
 80077f6:	e001      	b.n	80077fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	2300      	movs	r3, #0
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	9302      	str	r3, [sp, #8]
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f80e 	bl	8007842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007826:	69f8      	ldr	r0, [r7, #28]
 8007828:	f000 f89c 	bl	8007964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800782c:	2301      	movs	r3, #1
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	e002      	b.n	8007838 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007832:	f04f 33ff 	mov.w	r3, #4294967295
 8007836:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007838:	69bb      	ldr	r3, [r7, #24]
	}
 800783a:	4618      	mov	r0, r3
 800783c:	3720      	adds	r7, #32
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b088      	sub	sp, #32
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
 800784e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	461a      	mov	r2, r3
 800785a:	21a5      	movs	r1, #165	@ 0xa5
 800785c:	f001 febe 	bl	80095dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800786a:	3b01      	subs	r3, #1
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	617b      	str	r3, [r7, #20]
}
 8007896:	bf00      	nop
 8007898:	bf00      	nop
 800789a:	e7fd      	b.n	8007898 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01f      	beq.n	80078e2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	e012      	b.n	80078ce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	7819      	ldrb	r1, [r3, #0]
 80078b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	3334      	adds	r3, #52	@ 0x34
 80078b8:	460a      	mov	r2, r1
 80078ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	2b0f      	cmp	r3, #15
 80078d2:	d9e9      	bls.n	80078a8 <prvInitialiseNewTask+0x66>
 80078d4:	e000      	b.n	80078d8 <prvInitialiseNewTask+0x96>
			{
				break;
 80078d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078e0:	e003      	b.n	80078ea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ec:	2b37      	cmp	r3, #55	@ 0x37
 80078ee:	d901      	bls.n	80078f4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078f0:	2337      	movs	r3, #55	@ 0x37
 80078f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	2200      	movs	r2, #0
 8007904:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	3304      	adds	r3, #4
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff f966 	bl	8006bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	3318      	adds	r3, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff f961 	bl	8006bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800791e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800792e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	2200      	movs	r2, #0
 8007934:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68f9      	ldr	r1, [r7, #12]
 8007942:	69b8      	ldr	r0, [r7, #24]
 8007944:	f001 f93e 	bl	8008bc4 <pxPortInitialiseStack>
 8007948:	4602      	mov	r2, r0
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800795a:	bf00      	nop
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800796c:	f001 fa5c 	bl	8008e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007970:	4b2d      	ldr	r3, [pc, #180]	@ (8007a28 <prvAddNewTaskToReadyList+0xc4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a2c      	ldr	r2, [pc, #176]	@ (8007a28 <prvAddNewTaskToReadyList+0xc4>)
 8007978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800797a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007982:	4a2a      	ldr	r2, [pc, #168]	@ (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007988:	4b27      	ldr	r3, [pc, #156]	@ (8007a28 <prvAddNewTaskToReadyList+0xc4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d110      	bne.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007990:	f000 fc1e 	bl	80081d0 <prvInitialiseTaskLists>
 8007994:	e00d      	b.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007996:	4b26      	ldr	r3, [pc, #152]	@ (8007a30 <prvAddNewTaskToReadyList+0xcc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800799e:	4b23      	ldr	r3, [pc, #140]	@ (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d802      	bhi.n	80079b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079ac:	4a1f      	ldr	r2, [pc, #124]	@ (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079b2:	4b20      	ldr	r3, [pc, #128]	@ (8007a34 <prvAddNewTaskToReadyList+0xd0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3301      	adds	r3, #1
 80079b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a34 <prvAddNewTaskToReadyList+0xd0>)
 80079ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a34 <prvAddNewTaskToReadyList+0xd0>)
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a38 <prvAddNewTaskToReadyList+0xd4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d903      	bls.n	80079d8 <prvAddNewTaskToReadyList+0x74>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	4a18      	ldr	r2, [pc, #96]	@ (8007a38 <prvAddNewTaskToReadyList+0xd4>)
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4a15      	ldr	r2, [pc, #84]	@ (8007a3c <prvAddNewTaskToReadyList+0xd8>)
 80079e6:	441a      	add	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f7ff f901 	bl	8006bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079f4:	f001 fa4a 	bl	8008e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <prvAddNewTaskToReadyList+0xcc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a00:	4b0a      	ldr	r3, [pc, #40]	@ (8007a2c <prvAddNewTaskToReadyList+0xc8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d207      	bcs.n	8007a1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <prvAddNewTaskToReadyList+0xdc>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000e94 	.word	0x20000e94
 8007a2c:	200009c0 	.word	0x200009c0
 8007a30:	20000ea0 	.word	0x20000ea0
 8007a34:	20000eb0 	.word	0x20000eb0
 8007a38:	20000e9c 	.word	0x20000e9c
 8007a3c:	200009c4 	.word	0x200009c4
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d018      	beq.n	8007a88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a56:	4b14      	ldr	r3, [pc, #80]	@ (8007aa8 <vTaskDelay+0x64>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <vTaskDelay+0x32>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60bb      	str	r3, [r7, #8]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a76:	f000 f883 	bl	8007b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fcf3 	bl	8008468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a82:	f000 f88b 	bl	8007b9c <xTaskResumeAll>
 8007a86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d107      	bne.n	8007a9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a8e:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <vTaskDelay+0x68>)
 8007a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000ebc 	.word	0x20000ebc
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	@ 0x28
 8007ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007abe:	463a      	mov	r2, r7
 8007ac0:	1d39      	adds	r1, r7, #4
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff f834 	bl	8006b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	9202      	str	r2, [sp, #8]
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	2300      	movs	r3, #0
 8007adc:	460a      	mov	r2, r1
 8007ade:	4922      	ldr	r1, [pc, #136]	@ (8007b68 <vTaskStartScheduler+0xb8>)
 8007ae0:	4822      	ldr	r0, [pc, #136]	@ (8007b6c <vTaskStartScheduler+0xbc>)
 8007ae2:	f7ff fe09 	bl	80076f8 <xTaskCreateStatic>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4a21      	ldr	r2, [pc, #132]	@ (8007b70 <vTaskStartScheduler+0xc0>)
 8007aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007aec:	4b20      	ldr	r3, [pc, #128]	@ (8007b70 <vTaskStartScheduler+0xc0>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007af4:	2301      	movs	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	e001      	b.n	8007afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d102      	bne.n	8007b0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b04:	f000 fd04 	bl	8008510 <xTimerCreateTimerTask>
 8007b08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d116      	bne.n	8007b3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613b      	str	r3, [r7, #16]
}
 8007b22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b24:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <vTaskStartScheduler+0xc4>)
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b2c:	4b12      	ldr	r3, [pc, #72]	@ (8007b78 <vTaskStartScheduler+0xc8>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b32:	4b12      	ldr	r3, [pc, #72]	@ (8007b7c <vTaskStartScheduler+0xcc>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b38:	f001 f8d2 	bl	8008ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b3c:	e00f      	b.n	8007b5e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d10b      	bne.n	8007b5e <vTaskStartScheduler+0xae>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	60fb      	str	r3, [r7, #12]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <vTaskStartScheduler+0xaa>
}
 8007b5e:	bf00      	nop
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	080096e4 	.word	0x080096e4
 8007b6c:	080081a1 	.word	0x080081a1
 8007b70:	20000eb8 	.word	0x20000eb8
 8007b74:	20000eb4 	.word	0x20000eb4
 8007b78:	20000ea0 	.word	0x20000ea0
 8007b7c:	20000e98 	.word	0x20000e98

08007b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b84:	4b04      	ldr	r3, [pc, #16]	@ (8007b98 <vTaskSuspendAll+0x18>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a03      	ldr	r2, [pc, #12]	@ (8007b98 <vTaskSuspendAll+0x18>)
 8007b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b8e:	bf00      	nop
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	20000ebc 	.word	0x20000ebc

08007b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007baa:	4b42      	ldr	r3, [pc, #264]	@ (8007cb4 <xTaskResumeAll+0x118>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <xTaskResumeAll+0x2e>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	603b      	str	r3, [r7, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bca:	f001 f92d 	bl	8008e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bce:	4b39      	ldr	r3, [pc, #228]	@ (8007cb4 <xTaskResumeAll+0x118>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	4a37      	ldr	r2, [pc, #220]	@ (8007cb4 <xTaskResumeAll+0x118>)
 8007bd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd8:	4b36      	ldr	r3, [pc, #216]	@ (8007cb4 <xTaskResumeAll+0x118>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d162      	bne.n	8007ca6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007be0:	4b35      	ldr	r3, [pc, #212]	@ (8007cb8 <xTaskResumeAll+0x11c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d05e      	beq.n	8007ca6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007be8:	e02f      	b.n	8007c4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bea:	4b34      	ldr	r3, [pc, #208]	@ (8007cbc <xTaskResumeAll+0x120>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3318      	adds	r3, #24
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff f85a 	bl	8006cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff f855 	bl	8006cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8007cc0 <xTaskResumeAll+0x124>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d903      	bls.n	8007c1a <xTaskResumeAll+0x7e>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c16:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc0 <xTaskResumeAll+0x124>)
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4a27      	ldr	r2, [pc, #156]	@ (8007cc4 <xTaskResumeAll+0x128>)
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4610      	mov	r0, r2
 8007c32:	f7fe ffe0 	bl	8006bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3a:	4b23      	ldr	r3, [pc, #140]	@ (8007cc8 <xTaskResumeAll+0x12c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d302      	bcc.n	8007c4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007c44:	4b21      	ldr	r3, [pc, #132]	@ (8007ccc <xTaskResumeAll+0x130>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007cbc <xTaskResumeAll+0x120>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1cb      	bne.n	8007bea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c58:	f000 fb58 	bl	800830c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd0 <xTaskResumeAll+0x134>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d010      	beq.n	8007c8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c68:	f000 f846 	bl	8007cf8 <xTaskIncrementTick>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c72:	4b16      	ldr	r3, [pc, #88]	@ (8007ccc <xTaskResumeAll+0x130>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1f1      	bne.n	8007c68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c84:	4b12      	ldr	r3, [pc, #72]	@ (8007cd0 <xTaskResumeAll+0x134>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c8a:	4b10      	ldr	r3, [pc, #64]	@ (8007ccc <xTaskResumeAll+0x130>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c92:	2301      	movs	r3, #1
 8007c94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c96:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <xTaskResumeAll+0x138>)
 8007c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ca6:	f001 f8f1 	bl	8008e8c <vPortExitCritical>

	return xAlreadyYielded;
 8007caa:	68bb      	ldr	r3, [r7, #8]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000ebc 	.word	0x20000ebc
 8007cb8:	20000e94 	.word	0x20000e94
 8007cbc:	20000e54 	.word	0x20000e54
 8007cc0:	20000e9c 	.word	0x20000e9c
 8007cc4:	200009c4 	.word	0x200009c4
 8007cc8:	200009c0 	.word	0x200009c0
 8007ccc:	20000ea8 	.word	0x20000ea8
 8007cd0:	20000ea4 	.word	0x20000ea4
 8007cd4:	e000ed04 	.word	0xe000ed04

08007cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cde:	4b05      	ldr	r3, [pc, #20]	@ (8007cf4 <xTaskGetTickCount+0x1c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ce4:	687b      	ldr	r3, [r7, #4]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000e98 	.word	0x20000e98

08007cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d02:	4b4f      	ldr	r3, [pc, #316]	@ (8007e40 <xTaskIncrementTick+0x148>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f040 8090 	bne.w	8007e2c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8007e44 <xTaskIncrementTick+0x14c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d14:	4a4b      	ldr	r2, [pc, #300]	@ (8007e44 <xTaskIncrementTick+0x14c>)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d121      	bne.n	8007d64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d20:	4b49      	ldr	r3, [pc, #292]	@ (8007e48 <xTaskIncrementTick+0x150>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	603b      	str	r3, [r7, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <xTaskIncrementTick+0x46>
 8007d42:	4b41      	ldr	r3, [pc, #260]	@ (8007e48 <xTaskIncrementTick+0x150>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	4b40      	ldr	r3, [pc, #256]	@ (8007e4c <xTaskIncrementTick+0x154>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e48 <xTaskIncrementTick+0x150>)
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	4a3e      	ldr	r2, [pc, #248]	@ (8007e4c <xTaskIncrementTick+0x154>)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	4b3e      	ldr	r3, [pc, #248]	@ (8007e50 <xTaskIncrementTick+0x158>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e50 <xTaskIncrementTick+0x158>)
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	f000 fad4 	bl	800830c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d64:	4b3b      	ldr	r3, [pc, #236]	@ (8007e54 <xTaskIncrementTick+0x15c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d349      	bcc.n	8007e02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d6e:	4b36      	ldr	r3, [pc, #216]	@ (8007e48 <xTaskIncrementTick+0x150>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d78:	4b36      	ldr	r3, [pc, #216]	@ (8007e54 <xTaskIncrementTick+0x15c>)
 8007d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7e:	601a      	str	r2, [r3, #0]
					break;
 8007d80:	e03f      	b.n	8007e02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d82:	4b31      	ldr	r3, [pc, #196]	@ (8007e48 <xTaskIncrementTick+0x150>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d203      	bcs.n	8007da2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8007e54 <xTaskIncrementTick+0x15c>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007da0:	e02f      	b.n	8007e02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe ff82 	bl	8006cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	3318      	adds	r3, #24
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe ff79 	bl	8006cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc2:	4b25      	ldr	r3, [pc, #148]	@ (8007e58 <xTaskIncrementTick+0x160>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d903      	bls.n	8007dd2 <xTaskIncrementTick+0xda>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dce:	4a22      	ldr	r2, [pc, #136]	@ (8007e58 <xTaskIncrementTick+0x160>)
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4a1f      	ldr	r2, [pc, #124]	@ (8007e5c <xTaskIncrementTick+0x164>)
 8007de0:	441a      	add	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	4610      	mov	r0, r2
 8007dea:	f7fe ff04 	bl	8006bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <xTaskIncrementTick+0x168>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3b8      	bcc.n	8007d6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e00:	e7b5      	b.n	8007d6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e02:	4b17      	ldr	r3, [pc, #92]	@ (8007e60 <xTaskIncrementTick+0x168>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e08:	4914      	ldr	r1, [pc, #80]	@ (8007e5c <xTaskIncrementTick+0x164>)
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d901      	bls.n	8007e1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e1e:	4b11      	ldr	r3, [pc, #68]	@ (8007e64 <xTaskIncrementTick+0x16c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	e004      	b.n	8007e36 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e68 <xTaskIncrementTick+0x170>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	4a0d      	ldr	r2, [pc, #52]	@ (8007e68 <xTaskIncrementTick+0x170>)
 8007e34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e36:	697b      	ldr	r3, [r7, #20]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000ebc 	.word	0x20000ebc
 8007e44:	20000e98 	.word	0x20000e98
 8007e48:	20000e4c 	.word	0x20000e4c
 8007e4c:	20000e50 	.word	0x20000e50
 8007e50:	20000eac 	.word	0x20000eac
 8007e54:	20000eb4 	.word	0x20000eb4
 8007e58:	20000e9c 	.word	0x20000e9c
 8007e5c:	200009c4 	.word	0x200009c4
 8007e60:	200009c0 	.word	0x200009c0
 8007e64:	20000ea8 	.word	0x20000ea8
 8007e68:	20000ea4 	.word	0x20000ea4

08007e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e72:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <vTaskSwitchContext+0xa8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e7a:	4b27      	ldr	r3, [pc, #156]	@ (8007f18 <vTaskSwitchContext+0xac>)
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e80:	e042      	b.n	8007f08 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007e82:	4b25      	ldr	r3, [pc, #148]	@ (8007f18 <vTaskSwitchContext+0xac>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e88:	4b24      	ldr	r3, [pc, #144]	@ (8007f1c <vTaskSwitchContext+0xb0>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	e011      	b.n	8007eb4 <vTaskSwitchContext+0x48>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10b      	bne.n	8007eae <vTaskSwitchContext+0x42>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	607b      	str	r3, [r7, #4]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vTaskSwitchContext+0x3e>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	491a      	ldr	r1, [pc, #104]	@ (8007f20 <vTaskSwitchContext+0xb4>)
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0e3      	beq.n	8007e90 <vTaskSwitchContext+0x24>
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4a13      	ldr	r2, [pc, #76]	@ (8007f20 <vTaskSwitchContext+0xb4>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d104      	bne.n	8007ef8 <vTaskSwitchContext+0x8c>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	605a      	str	r2, [r3, #4]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	4a09      	ldr	r2, [pc, #36]	@ (8007f24 <vTaskSwitchContext+0xb8>)
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	4a06      	ldr	r2, [pc, #24]	@ (8007f1c <vTaskSwitchContext+0xb0>)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6013      	str	r3, [r2, #0]
}
 8007f08:	bf00      	nop
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	20000ebc 	.word	0x20000ebc
 8007f18:	20000ea8 	.word	0x20000ea8
 8007f1c:	20000e9c 	.word	0x20000e9c
 8007f20:	200009c4 	.word	0x200009c4
 8007f24:	200009c0 	.word	0x200009c0

08007f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f50:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <vTaskPlaceOnEventList+0x48>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3318      	adds	r3, #24
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fe fe70 	bl	8006c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f5e:	2101      	movs	r1, #1
 8007f60:	6838      	ldr	r0, [r7, #0]
 8007f62:	f000 fa81 	bl	8008468 <prvAddCurrentTaskToDelayedList>
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200009c0 	.word	0x200009c0

08007f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	617b      	str	r3, [r7, #20]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3318      	adds	r3, #24
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7fe fe25 	bl	8006bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f000 fa54 	bl	8008468 <prvAddCurrentTaskToDelayedList>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200009c0 	.word	0x200009c0

08007fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10b      	bne.n	8007ffa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60fb      	str	r3, [r7, #12]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fe56 	bl	8006cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008004:	4b1d      	ldr	r3, [pc, #116]	@ (800807c <xTaskRemoveFromEventList+0xb0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11d      	bne.n	8008048 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	3304      	adds	r3, #4
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fe4d 	bl	8006cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4b19      	ldr	r3, [pc, #100]	@ (8008080 <xTaskRemoveFromEventList+0xb4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d903      	bls.n	800802a <xTaskRemoveFromEventList+0x5e>
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	4a16      	ldr	r2, [pc, #88]	@ (8008080 <xTaskRemoveFromEventList+0xb4>)
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4a13      	ldr	r2, [pc, #76]	@ (8008084 <xTaskRemoveFromEventList+0xb8>)
 8008038:	441a      	add	r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7fe fdd8 	bl	8006bf6 <vListInsertEnd>
 8008046:	e005      	b.n	8008054 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3318      	adds	r3, #24
 800804c:	4619      	mov	r1, r3
 800804e:	480e      	ldr	r0, [pc, #56]	@ (8008088 <xTaskRemoveFromEventList+0xbc>)
 8008050:	f7fe fdd1 	bl	8006bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008058:	4b0c      	ldr	r3, [pc, #48]	@ (800808c <xTaskRemoveFromEventList+0xc0>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	429a      	cmp	r2, r3
 8008060:	d905      	bls.n	800806e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008062:	2301      	movs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008066:	4b0a      	ldr	r3, [pc, #40]	@ (8008090 <xTaskRemoveFromEventList+0xc4>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e001      	b.n	8008072 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008072:	697b      	ldr	r3, [r7, #20]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000ebc 	.word	0x20000ebc
 8008080:	20000e9c 	.word	0x20000e9c
 8008084:	200009c4 	.word	0x200009c4
 8008088:	20000e54 	.word	0x20000e54
 800808c:	200009c0 	.word	0x200009c0
 8008090:	20000ea8 	.word	0x20000ea8

08008094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800809c:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <vTaskInternalSetTimeOutState+0x24>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080a4:	4b05      	ldr	r3, [pc, #20]	@ (80080bc <vTaskInternalSetTimeOutState+0x28>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20000eac 	.word	0x20000eac
 80080bc:	20000e98 	.word	0x20000e98

080080c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	613b      	str	r3, [r7, #16]
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	e7fd      	b.n	80080e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10b      	bne.n	8008106 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60fb      	str	r3, [r7, #12]
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	e7fd      	b.n	8008102 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008106:	f000 fe8f 	bl	8008e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800810a:	4b1d      	ldr	r3, [pc, #116]	@ (8008180 <xTaskCheckForTimeOut+0xc0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008122:	d102      	bne.n	800812a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e023      	b.n	8008172 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b15      	ldr	r3, [pc, #84]	@ (8008184 <xTaskCheckForTimeOut+0xc4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d007      	beq.n	8008146 <xTaskCheckForTimeOut+0x86>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008140:	2301      	movs	r3, #1
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e015      	b.n	8008172 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	429a      	cmp	r2, r3
 800814e:	d20b      	bcs.n	8008168 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff99 	bl	8008094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	e004      	b.n	8008172 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800816e:	2301      	movs	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f000 fe8b 	bl	8008e8c <vPortExitCritical>

	return xReturn;
 8008176:	69fb      	ldr	r3, [r7, #28]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000e98 	.word	0x20000e98
 8008184:	20000eac 	.word	0x20000eac

08008188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800818c:	4b03      	ldr	r3, [pc, #12]	@ (800819c <vTaskMissedYield+0x14>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
}
 8008192:	bf00      	nop
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20000ea8 	.word	0x20000ea8

080081a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081a8:	f000 f852 	bl	8008250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <prvIdleTask+0x28>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d9f9      	bls.n	80081a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <prvIdleTask+0x2c>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081c4:	e7f0      	b.n	80081a8 <prvIdleTask+0x8>
 80081c6:	bf00      	nop
 80081c8:	200009c4 	.word	0x200009c4
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081d6:	2300      	movs	r3, #0
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	e00c      	b.n	80081f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <prvInitialiseTaskLists+0x60>)
 80081e8:	4413      	add	r3, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fcd6 	bl	8006b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3301      	adds	r3, #1
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b37      	cmp	r3, #55	@ 0x37
 80081fa:	d9ef      	bls.n	80081dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081fc:	480d      	ldr	r0, [pc, #52]	@ (8008234 <prvInitialiseTaskLists+0x64>)
 80081fe:	f7fe fccd 	bl	8006b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008202:	480d      	ldr	r0, [pc, #52]	@ (8008238 <prvInitialiseTaskLists+0x68>)
 8008204:	f7fe fcca 	bl	8006b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008208:	480c      	ldr	r0, [pc, #48]	@ (800823c <prvInitialiseTaskLists+0x6c>)
 800820a:	f7fe fcc7 	bl	8006b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800820e:	480c      	ldr	r0, [pc, #48]	@ (8008240 <prvInitialiseTaskLists+0x70>)
 8008210:	f7fe fcc4 	bl	8006b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008214:	480b      	ldr	r0, [pc, #44]	@ (8008244 <prvInitialiseTaskLists+0x74>)
 8008216:	f7fe fcc1 	bl	8006b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800821a:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <prvInitialiseTaskLists+0x78>)
 800821c:	4a05      	ldr	r2, [pc, #20]	@ (8008234 <prvInitialiseTaskLists+0x64>)
 800821e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008220:	4b0a      	ldr	r3, [pc, #40]	@ (800824c <prvInitialiseTaskLists+0x7c>)
 8008222:	4a05      	ldr	r2, [pc, #20]	@ (8008238 <prvInitialiseTaskLists+0x68>)
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200009c4 	.word	0x200009c4
 8008234:	20000e24 	.word	0x20000e24
 8008238:	20000e38 	.word	0x20000e38
 800823c:	20000e54 	.word	0x20000e54
 8008240:	20000e68 	.word	0x20000e68
 8008244:	20000e80 	.word	0x20000e80
 8008248:	20000e4c 	.word	0x20000e4c
 800824c:	20000e50 	.word	0x20000e50

08008250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008256:	e019      	b.n	800828c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008258:	f000 fde6 	bl	8008e28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825c:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <prvCheckTasksWaitingTermination+0x50>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fd21 	bl	8006cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800826e:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	4a0b      	ldr	r2, [pc, #44]	@ (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008278:	4b0b      	ldr	r3, [pc, #44]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3b01      	subs	r3, #1
 800827e:	4a0a      	ldr	r2, [pc, #40]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 8008280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008282:	f000 fe03 	bl	8008e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f810 	bl	80082ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800828c:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e1      	bne.n	8008258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000e68 	.word	0x20000e68
 80082a4:	20000e94 	.word	0x20000e94
 80082a8:	20000e7c 	.word	0x20000e7c

080082ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d108      	bne.n	80082d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 ffa0 	bl	8009208 <vPortFree>
				vPortFree( pxTCB );
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 ff9d 	bl	8009208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ce:	e019      	b.n	8008304 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d103      	bne.n	80082e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 ff94 	bl	8009208 <vPortFree>
	}
 80082e0:	e010      	b.n	8008304 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d00b      	beq.n	8008304 <prvDeleteTCB+0x58>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60fb      	str	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <prvDeleteTCB+0x54>
	}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008312:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <prvResetNextTaskUnblockTime+0x38>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d104      	bne.n	8008326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <prvResetNextTaskUnblockTime+0x3c>)
 800831e:	f04f 32ff 	mov.w	r2, #4294967295
 8008322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008324:	e008      	b.n	8008338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008326:	4b07      	ldr	r3, [pc, #28]	@ (8008344 <prvResetNextTaskUnblockTime+0x38>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	4a04      	ldr	r2, [pc, #16]	@ (8008348 <prvResetNextTaskUnblockTime+0x3c>)
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	20000e4c 	.word	0x20000e4c
 8008348:	20000eb4 	.word	0x20000eb4

0800834c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008352:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <xTaskGetSchedulerState+0x34>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800835a:	2301      	movs	r3, #1
 800835c:	607b      	str	r3, [r7, #4]
 800835e:	e008      	b.n	8008372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008360:	4b08      	ldr	r3, [pc, #32]	@ (8008384 <xTaskGetSchedulerState+0x38>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008368:	2302      	movs	r3, #2
 800836a:	607b      	str	r3, [r7, #4]
 800836c:	e001      	b.n	8008372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008372:	687b      	ldr	r3, [r7, #4]
	}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	20000ea0 	.word	0x20000ea0
 8008384:	20000ebc 	.word	0x20000ebc

08008388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d058      	beq.n	8008450 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800839e:	4b2f      	ldr	r3, [pc, #188]	@ (800845c <xTaskPriorityDisinherit+0xd4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d00b      	beq.n	80083c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	60fb      	str	r3, [r7, #12]
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	e7fd      	b.n	80083bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10b      	bne.n	80083e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	60bb      	str	r3, [r7, #8]
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	e7fd      	b.n	80083dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e4:	1e5a      	subs	r2, r3, #1
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d02c      	beq.n	8008450 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d128      	bne.n	8008450 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3304      	adds	r3, #4
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fc54 	bl	8006cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008420:	4b0f      	ldr	r3, [pc, #60]	@ (8008460 <xTaskPriorityDisinherit+0xd8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d903      	bls.n	8008430 <xTaskPriorityDisinherit+0xa8>
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842c:	4a0c      	ldr	r2, [pc, #48]	@ (8008460 <xTaskPriorityDisinherit+0xd8>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4a09      	ldr	r2, [pc, #36]	@ (8008464 <xTaskPriorityDisinherit+0xdc>)
 800843e:	441a      	add	r2, r3
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fe fbd5 	bl	8006bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800844c:	2301      	movs	r3, #1
 800844e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008450:	697b      	ldr	r3, [r7, #20]
	}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200009c0 	.word	0x200009c0
 8008460:	20000e9c 	.word	0x20000e9c
 8008464:	200009c4 	.word	0x200009c4

08008468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008472:	4b21      	ldr	r3, [pc, #132]	@ (80084f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008478:	4b20      	ldr	r3, [pc, #128]	@ (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3304      	adds	r3, #4
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fc16 	bl	8006cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848a:	d10a      	bne.n	80084a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008492:	4b1a      	ldr	r3, [pc, #104]	@ (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4819      	ldr	r0, [pc, #100]	@ (8008500 <prvAddCurrentTaskToDelayedList+0x98>)
 800849c:	f7fe fbab 	bl	8006bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a0:	e026      	b.n	80084f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4413      	add	r3, r2
 80084a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084aa:	4b14      	ldr	r3, [pc, #80]	@ (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d209      	bcs.n	80084ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ba:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fbb9 	bl	8006c3e <vListInsert>
}
 80084cc:	e010      	b.n	80084f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008508 <prvAddCurrentTaskToDelayedList+0xa0>)
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fe fbaf 	bl	8006c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e0:	4b0a      	ldr	r3, [pc, #40]	@ (800850c <prvAddCurrentTaskToDelayedList+0xa4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d202      	bcs.n	80084f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084ea:	4a08      	ldr	r2, [pc, #32]	@ (800850c <prvAddCurrentTaskToDelayedList+0xa4>)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6013      	str	r3, [r2, #0]
}
 80084f0:	bf00      	nop
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000e98 	.word	0x20000e98
 80084fc:	200009c0 	.word	0x200009c0
 8008500:	20000e80 	.word	0x20000e80
 8008504:	20000e50 	.word	0x20000e50
 8008508:	20000e4c 	.word	0x20000e4c
 800850c:	20000eb4 	.word	0x20000eb4

08008510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	@ 0x28
 8008514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800851a:	f000 fb13 	bl	8008b44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800851e:	4b1d      	ldr	r3, [pc, #116]	@ (8008594 <xTimerCreateTimerTask+0x84>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d021      	beq.n	800856a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800852e:	1d3a      	adds	r2, r7, #4
 8008530:	f107 0108 	add.w	r1, r7, #8
 8008534:	f107 030c 	add.w	r3, r7, #12
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fb15 	bl	8006b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	9202      	str	r2, [sp, #8]
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	2302      	movs	r3, #2
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	2300      	movs	r3, #0
 800854e:	460a      	mov	r2, r1
 8008550:	4911      	ldr	r1, [pc, #68]	@ (8008598 <xTimerCreateTimerTask+0x88>)
 8008552:	4812      	ldr	r0, [pc, #72]	@ (800859c <xTimerCreateTimerTask+0x8c>)
 8008554:	f7ff f8d0 	bl	80076f8 <xTaskCreateStatic>
 8008558:	4603      	mov	r3, r0
 800855a:	4a11      	ldr	r2, [pc, #68]	@ (80085a0 <xTimerCreateTimerTask+0x90>)
 800855c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800855e:	4b10      	ldr	r3, [pc, #64]	@ (80085a0 <xTimerCreateTimerTask+0x90>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008566:	2301      	movs	r3, #1
 8008568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008588:	697b      	ldr	r3, [r7, #20]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000ef0 	.word	0x20000ef0
 8008598:	080096ec 	.word	0x080096ec
 800859c:	080086dd 	.word	0x080086dd
 80085a0:	20000ef4 	.word	0x20000ef4

080085a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08a      	sub	sp, #40	@ 0x28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	623b      	str	r3, [r7, #32]
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	e7fd      	b.n	80085d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085d4:	4b19      	ldr	r3, [pc, #100]	@ (800863c <xTimerGenericCommand+0x98>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d02a      	beq.n	8008632 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b05      	cmp	r3, #5
 80085ec:	dc18      	bgt.n	8008620 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085ee:	f7ff fead 	bl	800834c <xTaskGetSchedulerState>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d109      	bne.n	800860c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085f8:	4b10      	ldr	r3, [pc, #64]	@ (800863c <xTimerGenericCommand+0x98>)
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	f107 0110 	add.w	r1, r7, #16
 8008600:	2300      	movs	r3, #0
 8008602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008604:	f7fe fc88 	bl	8006f18 <xQueueGenericSend>
 8008608:	6278      	str	r0, [r7, #36]	@ 0x24
 800860a:	e012      	b.n	8008632 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800860c:	4b0b      	ldr	r3, [pc, #44]	@ (800863c <xTimerGenericCommand+0x98>)
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	f107 0110 	add.w	r1, r7, #16
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	f7fe fc7e 	bl	8006f18 <xQueueGenericSend>
 800861c:	6278      	str	r0, [r7, #36]	@ 0x24
 800861e:	e008      	b.n	8008632 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008620:	4b06      	ldr	r3, [pc, #24]	@ (800863c <xTimerGenericCommand+0x98>)
 8008622:	6818      	ldr	r0, [r3, #0]
 8008624:	f107 0110 	add.w	r1, r7, #16
 8008628:	2300      	movs	r3, #0
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	f7fe fd76 	bl	800711c <xQueueGenericSendFromISR>
 8008630:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008634:	4618      	mov	r0, r3
 8008636:	3728      	adds	r7, #40	@ 0x28
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20000ef0 	.word	0x20000ef0

08008640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800864a:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <prvProcessExpiredTimer+0x98>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3304      	adds	r3, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fb29 	bl	8006cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d023      	beq.n	80086b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	18d1      	adds	r1, r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	6978      	ldr	r0, [r7, #20]
 800867a:	f000 f8d5 	bl	8008828 <prvInsertTimerInActiveList>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d020      	beq.n	80086c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008684:	2300      	movs	r3, #0
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	2100      	movs	r1, #0
 800868e:	6978      	ldr	r0, [r7, #20]
 8008690:	f7ff ff88 	bl	80085a4 <xTimerGenericCommand>
 8008694:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d114      	bne.n	80086c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	60fb      	str	r3, [r7, #12]
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ba:	f023 0301 	bic.w	r3, r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	6978      	ldr	r0, [r7, #20]
 80086cc:	4798      	blx	r3
}
 80086ce:	bf00      	nop
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20000ee8 	.word	0x20000ee8

080086dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086e4:	f107 0308 	add.w	r3, r7, #8
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 f859 	bl	80087a0 <prvGetNextExpireTime>
 80086ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f805 	bl	8008704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086fa:	f000 f8d7 	bl	80088ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086fe:	bf00      	nop
 8008700:	e7f0      	b.n	80086e4 <prvTimerTask+0x8>
	...

08008704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800870e:	f7ff fa37 	bl	8007b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f866 	bl	80087e8 <prvSampleTimeNow>
 800871c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d130      	bne.n	8008786 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <prvProcessTimerOrBlockTask+0x3c>
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	429a      	cmp	r2, r3
 8008730:	d806      	bhi.n	8008740 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008732:	f7ff fa33 	bl	8007b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008736:	68f9      	ldr	r1, [r7, #12]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ff81 	bl	8008640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800873e:	e024      	b.n	800878a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008746:	4b13      	ldr	r3, [pc, #76]	@ (8008794 <prvProcessTimerOrBlockTask+0x90>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <prvProcessTimerOrBlockTask+0x50>
 8008750:	2301      	movs	r3, #1
 8008752:	e000      	b.n	8008756 <prvProcessTimerOrBlockTask+0x52>
 8008754:	2300      	movs	r3, #0
 8008756:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008758:	4b0f      	ldr	r3, [pc, #60]	@ (8008798 <prvProcessTimerOrBlockTask+0x94>)
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	4619      	mov	r1, r3
 8008766:	f7fe ff93 	bl	8007690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800876a:	f7ff fa17 	bl	8007b9c <xTaskResumeAll>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008774:	4b09      	ldr	r3, [pc, #36]	@ (800879c <prvProcessTimerOrBlockTask+0x98>)
 8008776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	f3bf 8f6f 	isb	sy
}
 8008784:	e001      	b.n	800878a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008786:	f7ff fa09 	bl	8007b9c <xTaskResumeAll>
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000eec 	.word	0x20000eec
 8008798:	20000ef0 	.word	0x20000ef0
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087a8:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <prvGetNextExpireTime+0x44>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <prvGetNextExpireTime+0x16>
 80087b2:	2201      	movs	r2, #1
 80087b4:	e000      	b.n	80087b8 <prvGetNextExpireTime+0x18>
 80087b6:	2200      	movs	r2, #0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d105      	bne.n	80087d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087c4:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <prvGetNextExpireTime+0x44>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	e001      	b.n	80087d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087d4:	68fb      	ldr	r3, [r7, #12]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20000ee8 	.word	0x20000ee8

080087e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087f0:	f7ff fa72 	bl	8007cd8 <xTaskGetTickCount>
 80087f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <prvSampleTimeNow+0x3c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d205      	bcs.n	800880c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008800:	f000 f93a 	bl	8008a78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e002      	b.n	8008812 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008812:	4a04      	ldr	r2, [pc, #16]	@ (8008824 <prvSampleTimeNow+0x3c>)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000ef8 	.word	0x20000ef8

08008828 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d812      	bhi.n	8008874 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	1ad2      	subs	r2, r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	429a      	cmp	r2, r3
 800885a:	d302      	bcc.n	8008862 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800885c:	2301      	movs	r3, #1
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	e01b      	b.n	800889a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008862:	4b10      	ldr	r3, [pc, #64]	@ (80088a4 <prvInsertTimerInActiveList+0x7c>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3304      	adds	r3, #4
 800886a:	4619      	mov	r1, r3
 800886c:	4610      	mov	r0, r2
 800886e:	f7fe f9e6 	bl	8006c3e <vListInsert>
 8008872:	e012      	b.n	800889a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d206      	bcs.n	800888a <prvInsertTimerInActiveList+0x62>
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d302      	bcc.n	800888a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e007      	b.n	800889a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800888a:	4b07      	ldr	r3, [pc, #28]	@ (80088a8 <prvInsertTimerInActiveList+0x80>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3304      	adds	r3, #4
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7fe f9d2 	bl	8006c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800889a:	697b      	ldr	r3, [r7, #20]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	20000eec 	.word	0x20000eec
 80088a8:	20000ee8 	.word	0x20000ee8

080088ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08e      	sub	sp, #56	@ 0x38
 80088b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088b2:	e0ce      	b.n	8008a52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da19      	bge.n	80088ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088ba:	1d3b      	adds	r3, r7, #4
 80088bc:	3304      	adds	r3, #4
 80088be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10b      	bne.n	80088de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	61fb      	str	r3, [r7, #28]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e4:	6850      	ldr	r0, [r2, #4]
 80088e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e8:	6892      	ldr	r2, [r2, #8]
 80088ea:	4611      	mov	r1, r2
 80088ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f2c0 80ae 	blt.w	8008a52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d004      	beq.n	800890c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	3304      	adds	r3, #4
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe f9d2 	bl	8006cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800890c:	463b      	mov	r3, r7
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff ff6a 	bl	80087e8 <prvSampleTimeNow>
 8008914:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b09      	cmp	r3, #9
 800891a:	f200 8097 	bhi.w	8008a4c <prvProcessReceivedCommands+0x1a0>
 800891e:	a201      	add	r2, pc, #4	@ (adr r2, 8008924 <prvProcessReceivedCommands+0x78>)
 8008920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008924:	0800894d 	.word	0x0800894d
 8008928:	0800894d 	.word	0x0800894d
 800892c:	0800894d 	.word	0x0800894d
 8008930:	080089c3 	.word	0x080089c3
 8008934:	080089d7 	.word	0x080089d7
 8008938:	08008a23 	.word	0x08008a23
 800893c:	0800894d 	.word	0x0800894d
 8008940:	0800894d 	.word	0x0800894d
 8008944:	080089c3 	.word	0x080089c3
 8008948:	080089d7 	.word	0x080089d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800894c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008952:	f043 0301 	orr.w	r3, r3, #1
 8008956:	b2da      	uxtb	r2, r3
 8008958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	18d1      	adds	r1, r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800896a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800896c:	f7ff ff5c 	bl	8008828 <prvInsertTimerInActiveList>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d06c      	beq.n	8008a50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800897c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d061      	beq.n	8008a50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	441a      	add	r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	2300      	movs	r3, #0
 800899a:	2100      	movs	r1, #0
 800899c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800899e:	f7ff fe01 	bl	80085a4 <xTimerGenericCommand>
 80089a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d152      	bne.n	8008a50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	61bb      	str	r3, [r7, #24]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089d4:	e03d      	b.n	8008a52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10b      	bne.n	8008a0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	617b      	str	r3, [r7, #20]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	18d1      	adds	r1, r2, r3
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a1c:	f7ff ff04 	bl	8008828 <prvInsertTimerInActiveList>
					break;
 8008a20:	e017      	b.n	8008a52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a32:	f000 fbe9 	bl	8009208 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a36:	e00c      	b.n	8008a52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a3e:	f023 0301 	bic.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a4a:	e002      	b.n	8008a52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008a4c:	bf00      	nop
 8008a4e:	e000      	b.n	8008a52 <prvProcessReceivedCommands+0x1a6>
					break;
 8008a50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a52:	4b08      	ldr	r3, [pc, #32]	@ (8008a74 <prvProcessReceivedCommands+0x1c8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	1d39      	adds	r1, r7, #4
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fbfc 	bl	8007258 <xQueueReceive>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f47f af26 	bne.w	80088b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	3730      	adds	r7, #48	@ 0x30
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000ef0 	.word	0x20000ef0

08008a78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a7e:	e049      	b.n	8008b14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a80:	4b2e      	ldr	r3, [pc, #184]	@ (8008b3c <prvSwitchTimerLists+0xc4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008b3c <prvSwitchTimerLists+0xc4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe f909 	bl	8006cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d02f      	beq.n	8008b14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4413      	add	r3, r2
 8008abc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d90e      	bls.n	8008ae4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8008b3c <prvSwitchTimerLists+0xc4>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f7fe f8ae 	bl	8006c3e <vListInsert>
 8008ae2:	e017      	b.n	8008b14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	2100      	movs	r1, #0
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fd58 	bl	80085a4 <xTimerGenericCommand>
 8008af4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10b      	bne.n	8008b14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	603b      	str	r3, [r7, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	e7fd      	b.n	8008b10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b14:	4b09      	ldr	r3, [pc, #36]	@ (8008b3c <prvSwitchTimerLists+0xc4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1b0      	bne.n	8008a80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b1e:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <prvSwitchTimerLists+0xc4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b24:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <prvSwitchTimerLists+0xc8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a04      	ldr	r2, [pc, #16]	@ (8008b3c <prvSwitchTimerLists+0xc4>)
 8008b2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b2c:	4a04      	ldr	r2, [pc, #16]	@ (8008b40 <prvSwitchTimerLists+0xc8>)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6013      	str	r3, [r2, #0]
}
 8008b32:	bf00      	nop
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000ee8 	.word	0x20000ee8
 8008b40:	20000eec 	.word	0x20000eec

08008b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b4a:	f000 f96d 	bl	8008e28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ba4 <prvCheckForValidListAndQueue+0x60>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d120      	bne.n	8008b98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b56:	4814      	ldr	r0, [pc, #80]	@ (8008ba8 <prvCheckForValidListAndQueue+0x64>)
 8008b58:	f7fe f820 	bl	8006b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b5c:	4813      	ldr	r0, [pc, #76]	@ (8008bac <prvCheckForValidListAndQueue+0x68>)
 8008b5e:	f7fe f81d 	bl	8006b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b62:	4b13      	ldr	r3, [pc, #76]	@ (8008bb0 <prvCheckForValidListAndQueue+0x6c>)
 8008b64:	4a10      	ldr	r2, [pc, #64]	@ (8008ba8 <prvCheckForValidListAndQueue+0x64>)
 8008b66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b68:	4b12      	ldr	r3, [pc, #72]	@ (8008bb4 <prvCheckForValidListAndQueue+0x70>)
 8008b6a:	4a10      	ldr	r2, [pc, #64]	@ (8008bac <prvCheckForValidListAndQueue+0x68>)
 8008b6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4b11      	ldr	r3, [pc, #68]	@ (8008bb8 <prvCheckForValidListAndQueue+0x74>)
 8008b74:	4a11      	ldr	r2, [pc, #68]	@ (8008bbc <prvCheckForValidListAndQueue+0x78>)
 8008b76:	2110      	movs	r1, #16
 8008b78:	200a      	movs	r0, #10
 8008b7a:	f7fe f92d 	bl	8006dd8 <xQueueGenericCreateStatic>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	4a08      	ldr	r2, [pc, #32]	@ (8008ba4 <prvCheckForValidListAndQueue+0x60>)
 8008b82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b84:	4b07      	ldr	r3, [pc, #28]	@ (8008ba4 <prvCheckForValidListAndQueue+0x60>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <prvCheckForValidListAndQueue+0x60>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	490b      	ldr	r1, [pc, #44]	@ (8008bc0 <prvCheckForValidListAndQueue+0x7c>)
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fd52 	bl	800763c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b98:	f000 f978 	bl	8008e8c <vPortExitCritical>
}
 8008b9c:	bf00      	nop
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000ef0 	.word	0x20000ef0
 8008ba8:	20000ec0 	.word	0x20000ec0
 8008bac:	20000ed4 	.word	0x20000ed4
 8008bb0:	20000ee8 	.word	0x20000ee8
 8008bb4:	20000eec 	.word	0x20000eec
 8008bb8:	20000f9c 	.word	0x20000f9c
 8008bbc:	20000efc 	.word	0x20000efc
 8008bc0:	080096f4 	.word	0x080096f4

08008bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f023 0201 	bic.w	r2, r3, #1
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3b04      	subs	r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8008c28 <pxPortInitialiseStack+0x64>)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3b14      	subs	r3, #20
 8008bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3b04      	subs	r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f06f 0202 	mvn.w	r2, #2
 8008c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3b20      	subs	r3, #32
 8008c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	08008c2d 	.word	0x08008c2d

08008c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c36:	4b13      	ldr	r3, [pc, #76]	@ (8008c84 <prvTaskExitError+0x58>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d00b      	beq.n	8008c58 <prvTaskExitError+0x2c>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <prvTaskExitError+0x28>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	60bb      	str	r3, [r7, #8]
}
 8008c6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c6c:	bf00      	nop
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0fc      	beq.n	8008c6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000058 	.word	0x20000058
	...

08008c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c90:	4b07      	ldr	r3, [pc, #28]	@ (8008cb0 <pxCurrentTCBConst2>)
 8008c92:	6819      	ldr	r1, [r3, #0]
 8008c94:	6808      	ldr	r0, [r1, #0]
 8008c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	f380 8809 	msr	PSP, r0
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8811 	msr	BASEPRI, r0
 8008caa:	4770      	bx	lr
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst2>:
 8008cb0:	200009c0 	.word	0x200009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cb8:	4808      	ldr	r0, [pc, #32]	@ (8008cdc <prvPortStartFirstTask+0x24>)
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	6800      	ldr	r0, [r0, #0]
 8008cbe:	f380 8808 	msr	MSP, r0
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8814 	msr	CONTROL, r0
 8008cca:	b662      	cpsie	i
 8008ccc:	b661      	cpsie	f
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	df00      	svc	0
 8008cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cda:	bf00      	nop
 8008cdc:	e000ed08 	.word	0xe000ed08

08008ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ce6:	4b47      	ldr	r3, [pc, #284]	@ (8008e04 <xPortStartScheduler+0x124>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a47      	ldr	r2, [pc, #284]	@ (8008e08 <xPortStartScheduler+0x128>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10b      	bne.n	8008d08 <xPortStartScheduler+0x28>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	e7fd      	b.n	8008d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d08:	4b3e      	ldr	r3, [pc, #248]	@ (8008e04 <xPortStartScheduler+0x124>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e0c <xPortStartScheduler+0x12c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d10b      	bne.n	8008d2a <xPortStartScheduler+0x4a>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	60fb      	str	r3, [r7, #12]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d2a:	4b39      	ldr	r3, [pc, #228]	@ (8008e10 <xPortStartScheduler+0x130>)
 8008d2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	22ff      	movs	r2, #255	@ 0xff
 8008d3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	4b31      	ldr	r3, [pc, #196]	@ (8008e14 <xPortStartScheduler+0x134>)
 8008d50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d52:	4b31      	ldr	r3, [pc, #196]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008d54:	2207      	movs	r2, #7
 8008d56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d58:	e009      	b.n	8008d6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	4a2d      	ldr	r2, [pc, #180]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d76:	2b80      	cmp	r3, #128	@ 0x80
 8008d78:	d0ef      	beq.n	8008d5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d7a:	4b27      	ldr	r3, [pc, #156]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f1c3 0307 	rsb	r3, r3, #7
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d00b      	beq.n	8008d9e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60bb      	str	r3, [r7, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	021b      	lsls	r3, r3, #8
 8008da4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008da8:	4b1b      	ldr	r3, [pc, #108]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008db0:	4a19      	ldr	r2, [pc, #100]	@ (8008e18 <xPortStartScheduler+0x138>)
 8008db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dbc:	4b17      	ldr	r3, [pc, #92]	@ (8008e1c <xPortStartScheduler+0x13c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a16      	ldr	r2, [pc, #88]	@ (8008e1c <xPortStartScheduler+0x13c>)
 8008dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008dc8:	4b14      	ldr	r3, [pc, #80]	@ (8008e1c <xPortStartScheduler+0x13c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a13      	ldr	r2, [pc, #76]	@ (8008e1c <xPortStartScheduler+0x13c>)
 8008dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dd4:	f000 f8da 	bl	8008f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dd8:	4b11      	ldr	r3, [pc, #68]	@ (8008e20 <xPortStartScheduler+0x140>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dde:	f000 f8f9 	bl	8008fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008de2:	4b10      	ldr	r3, [pc, #64]	@ (8008e24 <xPortStartScheduler+0x144>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e24 <xPortStartScheduler+0x144>)
 8008de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dee:	f7ff ff63 	bl	8008cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008df2:	f7ff f83b 	bl	8007e6c <vTaskSwitchContext>
	prvTaskExitError();
 8008df6:	f7ff ff19 	bl	8008c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	e000ed00 	.word	0xe000ed00
 8008e08:	410fc271 	.word	0x410fc271
 8008e0c:	410fc270 	.word	0x410fc270
 8008e10:	e000e400 	.word	0xe000e400
 8008e14:	20000fec 	.word	0x20000fec
 8008e18:	20000ff0 	.word	0x20000ff0
 8008e1c:	e000ed20 	.word	0xe000ed20
 8008e20:	20000058 	.word	0x20000058
 8008e24:	e000ef34 	.word	0xe000ef34

08008e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	607b      	str	r3, [r7, #4]
}
 8008e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e42:	4b10      	ldr	r3, [pc, #64]	@ (8008e84 <vPortEnterCritical+0x5c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3301      	adds	r3, #1
 8008e48:	4a0e      	ldr	r2, [pc, #56]	@ (8008e84 <vPortEnterCritical+0x5c>)
 8008e4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <vPortEnterCritical+0x5c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d110      	bne.n	8008e76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e54:	4b0c      	ldr	r3, [pc, #48]	@ (8008e88 <vPortEnterCritical+0x60>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	603b      	str	r3, [r7, #0]
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	e7fd      	b.n	8008e72 <vPortEnterCritical+0x4a>
	}
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000058 	.word	0x20000058
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e92:	4b12      	ldr	r3, [pc, #72]	@ (8008edc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <vPortExitCritical+0x26>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	607b      	str	r3, [r7, #4]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008edc <vPortExitCritical+0x50>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	4a08      	ldr	r2, [pc, #32]	@ (8008edc <vPortExitCritical+0x50>)
 8008eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ebc:	4b07      	ldr	r3, [pc, #28]	@ (8008edc <vPortExitCritical+0x50>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d105      	bne.n	8008ed0 <vPortExitCritical+0x44>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	f383 8811 	msr	BASEPRI, r3
}
 8008ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20000058 	.word	0x20000058

08008ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ee0:	f3ef 8009 	mrs	r0, PSP
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4b15      	ldr	r3, [pc, #84]	@ (8008f40 <pxCurrentTCBConst>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	f01e 0f10 	tst.w	lr, #16
 8008ef0:	bf08      	it	eq
 8008ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	6010      	str	r0, [r2, #0]
 8008efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008f04:	f380 8811 	msr	BASEPRI, r0
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f7fe ffac 	bl	8007e6c <vTaskSwitchContext>
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f380 8811 	msr	BASEPRI, r0
 8008f1c:	bc09      	pop	{r0, r3}
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	6808      	ldr	r0, [r1, #0]
 8008f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f26:	f01e 0f10 	tst.w	lr, #16
 8008f2a:	bf08      	it	eq
 8008f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f30:	f380 8809 	msr	PSP, r0
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst>:
 8008f40:	200009c0 	.word	0x200009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f62:	f7fe fec9 	bl	8007cf8 <xTaskIncrementTick>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f6c:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <xPortSysTickHandler+0x40>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	f383 8811 	msr	BASEPRI, r3
}
 8008f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f90:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc0 <vPortSetupTimerInterrupt+0x34>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f96:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc4 <vPortSetupTimerInterrupt+0x38>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <vPortSetupTimerInterrupt+0x3c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fcc <vPortSetupTimerInterrupt+0x40>)
 8008fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa6:	099b      	lsrs	r3, r3, #6
 8008fa8:	4a09      	ldr	r2, [pc, #36]	@ (8008fd0 <vPortSetupTimerInterrupt+0x44>)
 8008faa:	3b01      	subs	r3, #1
 8008fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fae:	4b04      	ldr	r3, [pc, #16]	@ (8008fc0 <vPortSetupTimerInterrupt+0x34>)
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	e000e010 	.word	0xe000e010
 8008fc4:	e000e018 	.word	0xe000e018
 8008fc8:	2000004c 	.word	0x2000004c
 8008fcc:	10624dd3 	.word	0x10624dd3
 8008fd0:	e000e014 	.word	0xe000e014

08008fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fe4 <vPortEnableVFP+0x10>
 8008fd8:	6801      	ldr	r1, [r0, #0]
 8008fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fde:	6001      	str	r1, [r0, #0]
 8008fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fe2:	bf00      	nop
 8008fe4:	e000ed88 	.word	0xe000ed88

08008fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fee:	f3ef 8305 	mrs	r3, IPSR
 8008ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b0f      	cmp	r3, #15
 8008ff8:	d915      	bls.n	8009026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ffa:	4a18      	ldr	r2, [pc, #96]	@ (800905c <vPortValidateInterruptPriority+0x74>)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009004:	4b16      	ldr	r3, [pc, #88]	@ (8009060 <vPortValidateInterruptPriority+0x78>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	7afa      	ldrb	r2, [r7, #11]
 800900a:	429a      	cmp	r2, r3
 800900c:	d20b      	bcs.n	8009026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	607b      	str	r3, [r7, #4]
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009026:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <vPortValidateInterruptPriority+0x7c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800902e:	4b0e      	ldr	r3, [pc, #56]	@ (8009068 <vPortValidateInterruptPriority+0x80>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d90b      	bls.n	800904e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	603b      	str	r3, [r7, #0]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <vPortValidateInterruptPriority+0x62>
	}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	e000e3f0 	.word	0xe000e3f0
 8009060:	20000fec 	.word	0x20000fec
 8009064:	e000ed0c 	.word	0xe000ed0c
 8009068:	20000ff0 	.word	0x20000ff0

0800906c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	@ 0x28
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009074:	2300      	movs	r3, #0
 8009076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009078:	f7fe fd82 	bl	8007b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800907c:	4b5c      	ldr	r3, [pc, #368]	@ (80091f0 <pvPortMalloc+0x184>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009084:	f000 f924 	bl	80092d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009088:	4b5a      	ldr	r3, [pc, #360]	@ (80091f4 <pvPortMalloc+0x188>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4013      	ands	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 8095 	bne.w	80091c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01e      	beq.n	80090da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800909c:	2208      	movs	r2, #8
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4413      	add	r3, r2
 80090a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d015      	beq.n	80090da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	3308      	adds	r3, #8
 80090b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <pvPortMalloc+0x6e>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	617b      	str	r3, [r7, #20]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d06f      	beq.n	80091c0 <pvPortMalloc+0x154>
 80090e0:	4b45      	ldr	r3, [pc, #276]	@ (80091f8 <pvPortMalloc+0x18c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d86a      	bhi.n	80091c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090ea:	4b44      	ldr	r3, [pc, #272]	@ (80091fc <pvPortMalloc+0x190>)
 80090ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090ee:	4b43      	ldr	r3, [pc, #268]	@ (80091fc <pvPortMalloc+0x190>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090f4:	e004      	b.n	8009100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d903      	bls.n	8009112 <pvPortMalloc+0xa6>
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f1      	bne.n	80090f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009112:	4b37      	ldr	r3, [pc, #220]	@ (80091f0 <pvPortMalloc+0x184>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009118:	429a      	cmp	r2, r3
 800911a:	d051      	beq.n	80091c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2208      	movs	r2, #8
 8009122:	4413      	add	r3, r2
 8009124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	1ad2      	subs	r2, r2, r3
 8009136:	2308      	movs	r3, #8
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	429a      	cmp	r2, r3
 800913c:	d920      	bls.n	8009180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800913e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4413      	add	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	f003 0307 	and.w	r3, r3, #7
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <pvPortMalloc+0xfc>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	613b      	str	r3, [r7, #16]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	1ad2      	subs	r2, r2, r3
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800917a:	69b8      	ldr	r0, [r7, #24]
 800917c:	f000 f90a 	bl	8009394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009180:	4b1d      	ldr	r3, [pc, #116]	@ (80091f8 <pvPortMalloc+0x18c>)
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	4a1b      	ldr	r2, [pc, #108]	@ (80091f8 <pvPortMalloc+0x18c>)
 800918c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800918e:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <pvPortMalloc+0x18c>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b1b      	ldr	r3, [pc, #108]	@ (8009200 <pvPortMalloc+0x194>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d203      	bcs.n	80091a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800919a:	4b17      	ldr	r3, [pc, #92]	@ (80091f8 <pvPortMalloc+0x18c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a18      	ldr	r2, [pc, #96]	@ (8009200 <pvPortMalloc+0x194>)
 80091a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	4b13      	ldr	r3, [pc, #76]	@ (80091f4 <pvPortMalloc+0x188>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80091b6:	4b13      	ldr	r3, [pc, #76]	@ (8009204 <pvPortMalloc+0x198>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	4a11      	ldr	r2, [pc, #68]	@ (8009204 <pvPortMalloc+0x198>)
 80091be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091c0:	f7fe fcec 	bl	8007b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <pvPortMalloc+0x17a>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <pvPortMalloc+0x176>
	return pvReturn;
 80091e6:	69fb      	ldr	r3, [r7, #28]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3728      	adds	r7, #40	@ 0x28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20001bb4 	.word	0x20001bb4
 80091f4:	20001bc8 	.word	0x20001bc8
 80091f8:	20001bb8 	.word	0x20001bb8
 80091fc:	20001bac 	.word	0x20001bac
 8009200:	20001bbc 	.word	0x20001bbc
 8009204:	20001bc0 	.word	0x20001bc0

08009208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d04f      	beq.n	80092ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800921a:	2308      	movs	r3, #8
 800921c:	425b      	negs	r3, r3
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4413      	add	r3, r2
 8009222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	4b25      	ldr	r3, [pc, #148]	@ (80092c4 <vPortFree+0xbc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4013      	ands	r3, r2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10b      	bne.n	800924e <vPortFree+0x46>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60fb      	str	r3, [r7, #12]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00b      	beq.n	800926e <vPortFree+0x66>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	60bb      	str	r3, [r7, #8]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	4b14      	ldr	r3, [pc, #80]	@ (80092c4 <vPortFree+0xbc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4013      	ands	r3, r2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01e      	beq.n	80092ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d11a      	bne.n	80092ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <vPortFree+0xbc>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	43db      	mvns	r3, r3
 800928e:	401a      	ands	r2, r3
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009294:	f7fe fc74 	bl	8007b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <vPortFree+0xc0>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4413      	add	r3, r2
 80092a2:	4a09      	ldr	r2, [pc, #36]	@ (80092c8 <vPortFree+0xc0>)
 80092a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092a6:	6938      	ldr	r0, [r7, #16]
 80092a8:	f000 f874 	bl	8009394 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80092ac:	4b07      	ldr	r3, [pc, #28]	@ (80092cc <vPortFree+0xc4>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a06      	ldr	r2, [pc, #24]	@ (80092cc <vPortFree+0xc4>)
 80092b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80092b6:	f7fe fc71 	bl	8007b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092ba:	bf00      	nop
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20001bc8 	.word	0x20001bc8
 80092c8:	20001bb8 	.word	0x20001bb8
 80092cc:	20001bc4 	.word	0x20001bc4

080092d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80092da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092dc:	4b27      	ldr	r3, [pc, #156]	@ (800937c <prvHeapInit+0xac>)
 80092de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00c      	beq.n	8009304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3307      	adds	r3, #7
 80092ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f023 0307 	bic.w	r3, r3, #7
 80092f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	4a1f      	ldr	r2, [pc, #124]	@ (800937c <prvHeapInit+0xac>)
 8009300:	4413      	add	r3, r2
 8009302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009308:	4a1d      	ldr	r2, [pc, #116]	@ (8009380 <prvHeapInit+0xb0>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800930e:	4b1c      	ldr	r3, [pc, #112]	@ (8009380 <prvHeapInit+0xb0>)
 8009310:	2200      	movs	r2, #0
 8009312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	4413      	add	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800931c:	2208      	movs	r2, #8
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	1a9b      	subs	r3, r3, r2
 8009322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a15      	ldr	r2, [pc, #84]	@ (8009384 <prvHeapInit+0xb4>)
 8009330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009332:	4b14      	ldr	r3, [pc, #80]	@ (8009384 <prvHeapInit+0xb4>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2200      	movs	r2, #0
 8009338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800933a:	4b12      	ldr	r3, [pc, #72]	@ (8009384 <prvHeapInit+0xb4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	1ad2      	subs	r2, r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009350:	4b0c      	ldr	r3, [pc, #48]	@ (8009384 <prvHeapInit+0xb4>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	4a0a      	ldr	r2, [pc, #40]	@ (8009388 <prvHeapInit+0xb8>)
 800935e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	4a09      	ldr	r2, [pc, #36]	@ (800938c <prvHeapInit+0xbc>)
 8009366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009368:	4b09      	ldr	r3, [pc, #36]	@ (8009390 <prvHeapInit+0xc0>)
 800936a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800936e:	601a      	str	r2, [r3, #0]
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	20000ff4 	.word	0x20000ff4
 8009380:	20001bac 	.word	0x20001bac
 8009384:	20001bb4 	.word	0x20001bb4
 8009388:	20001bbc 	.word	0x20001bbc
 800938c:	20001bb8 	.word	0x20001bb8
 8009390:	20001bc8 	.word	0x20001bc8

08009394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800939c:	4b28      	ldr	r3, [pc, #160]	@ (8009440 <prvInsertBlockIntoFreeList+0xac>)
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	e002      	b.n	80093a8 <prvInsertBlockIntoFreeList+0x14>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d8f7      	bhi.n	80093a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	4413      	add	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d108      	bne.n	80093d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	441a      	add	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	441a      	add	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d118      	bne.n	800941c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b15      	ldr	r3, [pc, #84]	@ (8009444 <prvInsertBlockIntoFreeList+0xb0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d00d      	beq.n	8009412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	441a      	add	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	e008      	b.n	8009424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009412:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <prvInsertBlockIntoFreeList+0xb0>)
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e003      	b.n	8009424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	429a      	cmp	r2, r3
 800942a:	d002      	beq.n	8009432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009432:	bf00      	nop
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20001bac 	.word	0x20001bac
 8009444:	20001bb4 	.word	0x20001bb4

08009448 <calloc>:
 8009448:	4b02      	ldr	r3, [pc, #8]	@ (8009454 <calloc+0xc>)
 800944a:	460a      	mov	r2, r1
 800944c:	4601      	mov	r1, r0
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	f000 b802 	b.w	8009458 <_calloc_r>
 8009454:	2000005c 	.word	0x2000005c

08009458 <_calloc_r>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	fba1 5402 	umull	r5, r4, r1, r2
 800945e:	b93c      	cbnz	r4, 8009470 <_calloc_r+0x18>
 8009460:	4629      	mov	r1, r5
 8009462:	f000 f82f 	bl	80094c4 <_malloc_r>
 8009466:	4606      	mov	r6, r0
 8009468:	b928      	cbnz	r0, 8009476 <_calloc_r+0x1e>
 800946a:	2600      	movs	r6, #0
 800946c:	4630      	mov	r0, r6
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	220c      	movs	r2, #12
 8009472:	6002      	str	r2, [r0, #0]
 8009474:	e7f9      	b.n	800946a <_calloc_r+0x12>
 8009476:	462a      	mov	r2, r5
 8009478:	4621      	mov	r1, r4
 800947a:	f000 f8af 	bl	80095dc <memset>
 800947e:	e7f5      	b.n	800946c <_calloc_r+0x14>

08009480 <sbrk_aligned>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4e0f      	ldr	r6, [pc, #60]	@ (80094c0 <sbrk_aligned+0x40>)
 8009484:	460c      	mov	r4, r1
 8009486:	6831      	ldr	r1, [r6, #0]
 8009488:	4605      	mov	r5, r0
 800948a:	b911      	cbnz	r1, 8009492 <sbrk_aligned+0x12>
 800948c:	f000 f8ae 	bl	80095ec <_sbrk_r>
 8009490:	6030      	str	r0, [r6, #0]
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f000 f8a9 	bl	80095ec <_sbrk_r>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d103      	bne.n	80094a6 <sbrk_aligned+0x26>
 800949e:	f04f 34ff 	mov.w	r4, #4294967295
 80094a2:	4620      	mov	r0, r4
 80094a4:	bd70      	pop	{r4, r5, r6, pc}
 80094a6:	1cc4      	adds	r4, r0, #3
 80094a8:	f024 0403 	bic.w	r4, r4, #3
 80094ac:	42a0      	cmp	r0, r4
 80094ae:	d0f8      	beq.n	80094a2 <sbrk_aligned+0x22>
 80094b0:	1a21      	subs	r1, r4, r0
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f89a 	bl	80095ec <_sbrk_r>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d1f2      	bne.n	80094a2 <sbrk_aligned+0x22>
 80094bc:	e7ef      	b.n	800949e <sbrk_aligned+0x1e>
 80094be:	bf00      	nop
 80094c0:	20001bcc 	.word	0x20001bcc

080094c4 <_malloc_r>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	1ccd      	adds	r5, r1, #3
 80094ca:	f025 0503 	bic.w	r5, r5, #3
 80094ce:	3508      	adds	r5, #8
 80094d0:	2d0c      	cmp	r5, #12
 80094d2:	bf38      	it	cc
 80094d4:	250c      	movcc	r5, #12
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	4606      	mov	r6, r0
 80094da:	db01      	blt.n	80094e0 <_malloc_r+0x1c>
 80094dc:	42a9      	cmp	r1, r5
 80094de:	d904      	bls.n	80094ea <_malloc_r+0x26>
 80094e0:	230c      	movs	r3, #12
 80094e2:	6033      	str	r3, [r6, #0]
 80094e4:	2000      	movs	r0, #0
 80094e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095c0 <_malloc_r+0xfc>
 80094ee:	f000 f869 	bl	80095c4 <__malloc_lock>
 80094f2:	f8d8 3000 	ldr.w	r3, [r8]
 80094f6:	461c      	mov	r4, r3
 80094f8:	bb44      	cbnz	r4, 800954c <_malloc_r+0x88>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff ffbf 	bl	8009480 <sbrk_aligned>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	4604      	mov	r4, r0
 8009506:	d158      	bne.n	80095ba <_malloc_r+0xf6>
 8009508:	f8d8 4000 	ldr.w	r4, [r8]
 800950c:	4627      	mov	r7, r4
 800950e:	2f00      	cmp	r7, #0
 8009510:	d143      	bne.n	800959a <_malloc_r+0xd6>
 8009512:	2c00      	cmp	r4, #0
 8009514:	d04b      	beq.n	80095ae <_malloc_r+0xea>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	4639      	mov	r1, r7
 800951a:	4630      	mov	r0, r6
 800951c:	eb04 0903 	add.w	r9, r4, r3
 8009520:	f000 f864 	bl	80095ec <_sbrk_r>
 8009524:	4581      	cmp	r9, r0
 8009526:	d142      	bne.n	80095ae <_malloc_r+0xea>
 8009528:	6821      	ldr	r1, [r4, #0]
 800952a:	1a6d      	subs	r5, r5, r1
 800952c:	4629      	mov	r1, r5
 800952e:	4630      	mov	r0, r6
 8009530:	f7ff ffa6 	bl	8009480 <sbrk_aligned>
 8009534:	3001      	adds	r0, #1
 8009536:	d03a      	beq.n	80095ae <_malloc_r+0xea>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	442b      	add	r3, r5
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	f8d8 3000 	ldr.w	r3, [r8]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	bb62      	cbnz	r2, 80095a0 <_malloc_r+0xdc>
 8009546:	f8c8 7000 	str.w	r7, [r8]
 800954a:	e00f      	b.n	800956c <_malloc_r+0xa8>
 800954c:	6822      	ldr	r2, [r4, #0]
 800954e:	1b52      	subs	r2, r2, r5
 8009550:	d420      	bmi.n	8009594 <_malloc_r+0xd0>
 8009552:	2a0b      	cmp	r2, #11
 8009554:	d917      	bls.n	8009586 <_malloc_r+0xc2>
 8009556:	1961      	adds	r1, r4, r5
 8009558:	42a3      	cmp	r3, r4
 800955a:	6025      	str	r5, [r4, #0]
 800955c:	bf18      	it	ne
 800955e:	6059      	strne	r1, [r3, #4]
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	bf08      	it	eq
 8009564:	f8c8 1000 	streq.w	r1, [r8]
 8009568:	5162      	str	r2, [r4, r5]
 800956a:	604b      	str	r3, [r1, #4]
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f82f 	bl	80095d0 <__malloc_unlock>
 8009572:	f104 000b 	add.w	r0, r4, #11
 8009576:	1d23      	adds	r3, r4, #4
 8009578:	f020 0007 	bic.w	r0, r0, #7
 800957c:	1ac2      	subs	r2, r0, r3
 800957e:	bf1c      	itt	ne
 8009580:	1a1b      	subne	r3, r3, r0
 8009582:	50a3      	strne	r3, [r4, r2]
 8009584:	e7af      	b.n	80094e6 <_malloc_r+0x22>
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	42a3      	cmp	r3, r4
 800958a:	bf0c      	ite	eq
 800958c:	f8c8 2000 	streq.w	r2, [r8]
 8009590:	605a      	strne	r2, [r3, #4]
 8009592:	e7eb      	b.n	800956c <_malloc_r+0xa8>
 8009594:	4623      	mov	r3, r4
 8009596:	6864      	ldr	r4, [r4, #4]
 8009598:	e7ae      	b.n	80094f8 <_malloc_r+0x34>
 800959a:	463c      	mov	r4, r7
 800959c:	687f      	ldr	r7, [r7, #4]
 800959e:	e7b6      	b.n	800950e <_malloc_r+0x4a>
 80095a0:	461a      	mov	r2, r3
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	d1fb      	bne.n	80095a0 <_malloc_r+0xdc>
 80095a8:	2300      	movs	r3, #0
 80095aa:	6053      	str	r3, [r2, #4]
 80095ac:	e7de      	b.n	800956c <_malloc_r+0xa8>
 80095ae:	230c      	movs	r3, #12
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	4630      	mov	r0, r6
 80095b4:	f000 f80c 	bl	80095d0 <__malloc_unlock>
 80095b8:	e794      	b.n	80094e4 <_malloc_r+0x20>
 80095ba:	6005      	str	r5, [r0, #0]
 80095bc:	e7d6      	b.n	800956c <_malloc_r+0xa8>
 80095be:	bf00      	nop
 80095c0:	20001bd0 	.word	0x20001bd0

080095c4 <__malloc_lock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	@ (80095cc <__malloc_lock+0x8>)
 80095c6:	f000 b84b 	b.w	8009660 <__retarget_lock_acquire_recursive>
 80095ca:	bf00      	nop
 80095cc:	20001d10 	.word	0x20001d10

080095d0 <__malloc_unlock>:
 80095d0:	4801      	ldr	r0, [pc, #4]	@ (80095d8 <__malloc_unlock+0x8>)
 80095d2:	f000 b846 	b.w	8009662 <__retarget_lock_release_recursive>
 80095d6:	bf00      	nop
 80095d8:	20001d10 	.word	0x20001d10

080095dc <memset>:
 80095dc:	4402      	add	r2, r0
 80095de:	4603      	mov	r3, r0
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d100      	bne.n	80095e6 <memset+0xa>
 80095e4:	4770      	bx	lr
 80095e6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ea:	e7f9      	b.n	80095e0 <memset+0x4>

080095ec <_sbrk_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	@ (8009608 <_sbrk_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f7 fe10 	bl	800121c <_sbrk>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_sbrk_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_sbrk_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20001d0c 	.word	0x20001d0c

0800960c <__errno>:
 800960c:	4b01      	ldr	r3, [pc, #4]	@ (8009614 <__errno+0x8>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	2000005c 	.word	0x2000005c

08009618 <__libc_init_array>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4d0d      	ldr	r5, [pc, #52]	@ (8009650 <__libc_init_array+0x38>)
 800961c:	4c0d      	ldr	r4, [pc, #52]	@ (8009654 <__libc_init_array+0x3c>)
 800961e:	1b64      	subs	r4, r4, r5
 8009620:	10a4      	asrs	r4, r4, #2
 8009622:	2600      	movs	r6, #0
 8009624:	42a6      	cmp	r6, r4
 8009626:	d109      	bne.n	800963c <__libc_init_array+0x24>
 8009628:	4d0b      	ldr	r5, [pc, #44]	@ (8009658 <__libc_init_array+0x40>)
 800962a:	4c0c      	ldr	r4, [pc, #48]	@ (800965c <__libc_init_array+0x44>)
 800962c:	f000 f828 	bl	8009680 <_init>
 8009630:	1b64      	subs	r4, r4, r5
 8009632:	10a4      	asrs	r4, r4, #2
 8009634:	2600      	movs	r6, #0
 8009636:	42a6      	cmp	r6, r4
 8009638:	d105      	bne.n	8009646 <__libc_init_array+0x2e>
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009640:	4798      	blx	r3
 8009642:	3601      	adds	r6, #1
 8009644:	e7ee      	b.n	8009624 <__libc_init_array+0xc>
 8009646:	f855 3b04 	ldr.w	r3, [r5], #4
 800964a:	4798      	blx	r3
 800964c:	3601      	adds	r6, #1
 800964e:	e7f2      	b.n	8009636 <__libc_init_array+0x1e>
 8009650:	080097b8 	.word	0x080097b8
 8009654:	080097b8 	.word	0x080097b8
 8009658:	080097b8 	.word	0x080097b8
 800965c:	080097bc 	.word	0x080097bc

08009660 <__retarget_lock_acquire_recursive>:
 8009660:	4770      	bx	lr

08009662 <__retarget_lock_release_recursive>:
 8009662:	4770      	bx	lr

08009664 <memcpy>:
 8009664:	440a      	add	r2, r1
 8009666:	4291      	cmp	r1, r2
 8009668:	f100 33ff 	add.w	r3, r0, #4294967295
 800966c:	d100      	bne.n	8009670 <memcpy+0xc>
 800966e:	4770      	bx	lr
 8009670:	b510      	push	{r4, lr}
 8009672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800967a:	4291      	cmp	r1, r2
 800967c:	d1f9      	bne.n	8009672 <memcpy+0xe>
 800967e:	bd10      	pop	{r4, pc}

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
