
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f07c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800f210  0800f210  00010210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa54  0800fa54  00011310  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa54  0800fa54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa5c  0800fa5c  00011310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa5c  0800fa5c  00010a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa60  0800fa60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  0800fa64  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003270  20000310  0800fd74  00011310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003580  0800fd74  00011580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011310  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278f7  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c37  00000000  00000000  00038c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  0003e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001827  00000000  00000000  000407f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002daba  00000000  00000000  00042017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283ac  00000000  00000000  0006fad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001058cf  00000000  00000000  00097e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019d74c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094e0  00000000  00000000  0019d790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  001a6c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1f4 	.word	0x0800f1f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	0800f1f4 	.word	0x0800f1f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

HAL_StatusTypeDef Initialize_Delay()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <Initialize_Delay+0x10>)
 8000efe:	f005 fd49 	bl	8006994 <HAL_TIM_Base_Start>
 8000f02:	4603      	mov	r3, r0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000544 	.word	0x20000544

08000f0c <delay_us>:

void delay_us(uint32_t us)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	taskENTER_CRITICAL();
 8000f14:	f00a fed8 	bl	800bcc8 <vPortEnterCritical>
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <delay_us+0x44>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000f24:	e003      	b.n	8000f2e <delay_us+0x22>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <delay_us+0x44>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2c:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bfb8      	it	lt
 8000f38:	425b      	neglt	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d8f1      	bhi.n	8000f26 <delay_us+0x1a>
	}
	taskEXIT_CRITICAL();
 8000f42:	f00a fef3 	bl	800bd2c <vPortExitCritical>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000

08000f54 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f002 feed 	bl	8003d3c <HAL_Delay>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_DMA_Init+0x38>)
 8000f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <MX_DMA_Init+0x38>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_DMA_Init+0x38>)
 8000f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	200e      	movs	r0, #14
 8000f90:	f002 ffb0 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f94:	200e      	movs	r0, #14
 8000f96:	f002 ffc9 	bl	8003f2c <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0c      	blt.n	8000fd4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <__NVIC_ClearPendingIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	3360      	adds	r3, #96	@ 0x60
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fe8:	4a10      	ldr	r2, [pc, #64]	@ (800102c <MX_FREERTOS_Init+0x48>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <MX_FREERTOS_Init+0x4c>)
 8000fee:	f008 f8ef 	bl	80091d0 <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <MX_FREERTOS_Init+0x50>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <MX_FREERTOS_Init+0x54>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480f      	ldr	r0, [pc, #60]	@ (800103c <MX_FREERTOS_Init+0x58>)
 8000ffe:	f008 f8e7 	bl	80091d0 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <MX_FREERTOS_Init+0x5c>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <MX_FREERTOS_Init+0x60>)
 800100a:	2100      	movs	r1, #0
 800100c:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_FREERTOS_Init+0x64>)
 800100e:	f008 f8df 	bl	80091d0 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <MX_FREERTOS_Init+0x68>)
 8001016:	6013      	str	r3, [r2, #0]

  /* creation of at_cmds_handler */
  at_cmds_handlerHandle = osThreadNew(StartATCmds, NULL, &at_cmds_handler_attributes);
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <MX_FREERTOS_Init+0x6c>)
 800101a:	2100      	movs	r1, #0
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_FREERTOS_Init+0x70>)
 800101e:	f008 f8d7 	bl	80091d0 <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <MX_FREERTOS_Init+0x74>)
 8001026:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	0800f5b0 	.word	0x0800f5b0
 8001030:	0800105d 	.word	0x0800105d
 8001034:	20000388 	.word	0x20000388
 8001038:	0800f5d4 	.word	0x0800f5d4
 800103c:	0800106d 	.word	0x0800106d
 8001040:	2000038c 	.word	0x2000038c
 8001044:	0800f5f8 	.word	0x0800f5f8
 8001048:	08001171 	.word	0x08001171
 800104c:	20000390 	.word	0x20000390
 8001050:	0800f61c 	.word	0x0800f61c
 8001054:	08001181 	.word	0x08001181
 8001058:	20000394 	.word	0x20000394

0800105c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	for(;;)
	{
//		len = sprintf(tmp_buf, "TestDMA\n\r");
//		HAL_UART_Transmit_DMA(&huart2, tmp_buf, len); //To prevent receiving constant interrupts after sending
														//simply i
		osDelay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f008 fa52 	bl	800950e <osDelay>
 800106a:	e7fb      	b.n	8001064 <StartDefaultTask+0x8>

0800106c <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 800106c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001070:	b092      	sub	sp, #72	@ 0x48
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
	ad7676_init(&ad7676_data);
 8001076:	4831      	ldr	r0, [pc, #196]	@ (800113c <StartADC+0xd0>)
 8001078:	f001 fa88 	bl	800258c <ad7676_init>
	HAL_TIM_Base_Start(&htim2);
 800107c:	4830      	ldr	r0, [pc, #192]	@ (8001140 <StartADC+0xd4>)
 800107e:	f005 fc89 	bl	8006994 <HAL_TIM_Base_Start>
  /* Infinite loop */
//	ad7676_read_samples(10000);
	ad7676_start_conversion();
 8001082:	f001 fcc7 	bl	8002a14 <ad7676_start_conversion>
	for(;;)
	{
	//	  UARTLog("Hello World\n\r");
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever); //TODO prepare collect_data flag
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	2101      	movs	r1, #1
 800108c:	2001      	movs	r0, #1
 800108e:	f008 f9bd 	bl	800940c <osThreadFlagsWait>
		end_time = __HAL_TIM_GET_COUNTER(&htim2);
 8001092:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <StartADC+0xd4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	4698      	mov	r8, r3
 800109c:	4691      	mov	r9, r2
 800109e:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <StartADC+0xd8>)
 80010a0:	e9c3 8900 	strd	r8, r9, [r3]
		elapsed_time = end_time - start_time;
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <StartADC+0xd8>)
 80010a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010aa:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <StartADC+0xdc>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	1a84      	subs	r4, r0, r2
 80010b2:	eb61 0503 	sbc.w	r5, r1, r3
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <StartADC+0xe0>)
 80010b8:	e9c3 4500 	strd	r4, r5, [r3]
		collect_data = false;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <StartADC+0xe4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
		received_samples = 0;
 80010c2:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <StartADC+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		uint32_t base_freq = 80000000;
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <StartADC+0xec>)
 80010ca:	647b      	str	r3, [r7, #68]	@ 0x44
//		uint32_t read_freq = base_freq/read_time;
		uint32_t collect_freq = (base_freq*awaited_samples)/elapsed_time;
 80010cc:	4b23      	ldr	r3, [pc, #140]	@ (800115c <StartADC+0xf0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	2200      	movs	r2, #0
 80010d8:	469a      	mov	sl, r3
 80010da:	4693      	mov	fp, r2
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <StartADC+0xe0>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	4650      	mov	r0, sl
 80010e4:	4659      	mov	r1, fp
 80010e6:	f7ff fd8f 	bl	8000c08 <__aeabi_uldivmod>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4613      	mov	r3, r2
 80010f0:	643b      	str	r3, [r7, #64]	@ 0x40
		char buffer[50];
		if(raw_data){
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <StartADC+0xf4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <StartADC+0xa6>
			ad7676_send_samples(awaited_samples, &received_samples, &huart2);
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <StartADC+0xf0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4a18      	ldr	r2, [pc, #96]	@ (8001164 <StartADC+0xf8>)
 8001102:	4914      	ldr	r1, [pc, #80]	@ (8001154 <StartADC+0xe8>)
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fc3b 	bl	8002980 <ad7676_send_samples>
			raw_data = false;
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <StartADC+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e7b9      	b.n	8001086 <StartADC+0x1a>
		}
		else{
			ad7676_display_samples(awaited_samples, &received_samples, UARTLog);
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <StartADC+0xf0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <StartADC+0xfc>)
 800111a:	490e      	ldr	r1, [pc, #56]	@ (8001154 <StartADC+0xe8>)
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fb21 	bl	8002764 <ad7676_display_samples>
			sprintf(buffer, "ADC Collect Freq: %d", (int)collect_freq);
 8001122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4910      	ldr	r1, [pc, #64]	@ (800116c <StartADC+0x100>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00b ff4c 	bl	800cfc8 <siprintf>
			UARTLog(buffer);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f86b 	bl	8002210 <UARTLog>
	{
 800113a:	e7a4      	b.n	8001086 <StartADC+0x1a>
 800113c:	200006b4 	.word	0x200006b4
 8001140:	200004f8 	.word	0x200004f8
 8001144:	20000378 	.word	0x20000378
 8001148:	200006a8 	.word	0x200006a8
 800114c:	20000380 	.word	0x20000380
 8001150:	200006b8 	.word	0x200006b8
 8001154:	20000374 	.word	0x20000374
 8001158:	04c4b400 	.word	0x04c4b400
 800115c:	200006bc 	.word	0x200006bc
 8001160:	200006b0 	.word	0x200006b0
 8001164:	20000590 	.word	0x20000590
 8001168:	08002211 	.word	0x08002211
 800116c:	0800f244 	.word	0x0800f244

08001170 <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
//	basic_example_main(&hadf5355);
  /* Infinite loop */
	for(;;)
	{
//		UARTLog("Hello World\n\r");
		osDelay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f008 f9c8 	bl	800950e <osDelay>
 800117e:	e7fb      	b.n	8001178 <StartPLL+0x8>

08001180 <StartATCmds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartATCmds */
void StartATCmds(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartATCmds */
	uint8_t received_data[32];
	//	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8001188:	2220      	movs	r2, #32
 800118a:	4913      	ldr	r1, [pc, #76]	@ (80011d8 <StartATCmds+0x58>)
 800118c:	4813      	ldr	r0, [pc, #76]	@ (80011dc <StartATCmds+0x5c>)
 800118e:	f007 ff3d 	bl	800900c <HAL_UARTEx_ReceiveToIdle_DMA>
	UARTLog("Send any request\n\r");
 8001192:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <StartATCmds+0x60>)
 8001194:	f001 f83c 	bl	8002210 <UARTLog>
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x01, osFlagsNoClear, osWaitForever);
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	2102      	movs	r1, #2
 800119e:	2001      	movs	r0, #1
 80011a0:	f008 f934 	bl	800940c <osThreadFlagsWait>
		if(received_lines > 0){
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <StartATCmds+0x64>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d011      	beq.n	80011d0 <StartATCmds+0x50>
		  ParserTakeLine(&buffer, received_data);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <StartATCmds+0x68>)
 80011b4:	f000 fa2c 	bl	8001610 <ParserTakeLine>
		  ParserParse((char*)received_data);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fa4d 	bl	800165c <ParserParse>
		  received_lines--;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <StartATCmds+0x64>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <StartATCmds+0x64>)
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e7e3      	b.n	8001198 <StartATCmds+0x18>
		}
		else osThreadFlagsClear(0x01);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f008 f8dd 	bl	8009390 <osThreadFlagsClear>
		osThreadFlagsWait(0x01, osFlagsNoClear, osWaitForever);
 80011d6:	e7df      	b.n	8001198 <StartATCmds+0x18>
 80011d8:	20000350 	.word	0x20000350
 80011dc:	20000590 	.word	0x20000590
 80011e0:	0800f25c 	.word	0x0800f25c
 80011e4:	20000370 	.word	0x20000370
 80011e8:	2000032c 	.word	0x2000032c

080011ec <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART2){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_UARTEx_RxEventCallback+0x68>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d124      	bne.n	800124c <HAL_UARTEx_RxEventCallback+0x60>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp, Size)){
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	4913      	ldr	r1, [pc, #76]	@ (8001258 <HAL_UARTEx_RxEventCallback+0x6c>)
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <HAL_UARTEx_RxEventCallback+0x70>)
 800120c:	f000 fac0 	bl	8001790 <WriteToBuffer>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d112      	bne.n	800123c <HAL_UARTEx_RxEventCallback+0x50>
			if(receive_tmp[Size-1] == ENDLINE){
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	3b01      	subs	r3, #1
 800121a:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <HAL_UARTEx_RxEventCallback+0x6c>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d10f      	bne.n	8001242 <HAL_UARTEx_RxEventCallback+0x56>
				received_lines++;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_UARTEx_RxEventCallback+0x74>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_UARTEx_RxEventCallback+0x74>)
 800122c:	701a      	strb	r2, [r3, #0]
				osThreadFlagsSet(at_cmds_handlerHandle, 0x01);
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <HAL_UARTEx_RxEventCallback+0x78>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	4618      	mov	r0, r3
 8001236:	f008 f85d 	bl	80092f4 <osThreadFlagsSet>
 800123a:	e002      	b.n	8001242 <HAL_UARTEx_RxEventCallback+0x56>
			}
		}
		else FlushBuffer(&buffer);
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <HAL_UARTEx_RxEventCallback+0x70>)
 800123e:	f000 fb0f 	bl	8001860 <FlushBuffer>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8001242:	2220      	movs	r2, #32
 8001244:	4904      	ldr	r1, [pc, #16]	@ (8001258 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001246:	4808      	ldr	r0, [pc, #32]	@ (8001268 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001248:	f007 fee0 	bl	800900c <HAL_UARTEx_ReceiveToIdle_DMA>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40004400 	.word	0x40004400
 8001258:	20000350 	.word	0x20000350
 800125c:	2000032c 	.word	0x2000032c
 8001260:	20000370 	.word	0x20000370
 8001264:	20000394 	.word	0x20000394
 8001268:	20000590 	.word	0x20000590

0800126c <SPI2_IRQHandler>:
//		osThreadFlagsSet(adc_handlerHandle, received_samples++);
//		ad7676_start_conversion();
	}
}

void SPI2_IRQHandler(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	SPI2->CR1 &= ~SPI_CR1_SPE;
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <SPI2_IRQHandler+0x34>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <SPI2_IRQHandler+0x34>)
 8001276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800127a:	6013      	str	r3, [r2, #0]
	while((SPI2->CR1 & SPI_CR1_SPE) != 0);
 800127c:	bf00      	nop
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <SPI2_IRQHandler+0x34>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <SPI2_IRQHandler+0x12>
//	while((SPI2->SR & SPI_SR_FRLVL) != 0);
	__NVIC_ClearPendingIRQ(SPI2_IRQn);
 800128a:	2024      	movs	r0, #36	@ 0x24
 800128c:	f7ff fe8c 	bl	8000fa8 <__NVIC_ClearPendingIRQ>
	SPI2->CR1 |= SPI_CR1_SPE;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <SPI2_IRQHandler+0x34>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a02      	ldr	r2, [pc, #8]	@ (80012a0 <SPI2_IRQHandler+0x34>)
 8001296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40003800 	.word	0x40003800

080012a4 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void) //Remember to comment out this line in stm32l4xx_it.c row 170
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF4){
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <DMA1_Channel4_IRQHandler+0x84>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d037      	beq.n	8001324 <DMA1_Channel4_IRQHandler+0x80>

		SPI2->CR2 &= ~(SPI_CR2_RXDMAEN);
 80012b4:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6053      	str	r3, [r2, #4]
		SPI2->CR1 &= ~(SPI_CR1_SPE);
 80012c0:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012ca:	6013      	str	r3, [r2, #0]
		while((SPI2->SR & SPI_SR_BSY) != 0);
 80012cc:	bf00      	nop
 80012ce:	4b17      	ldr	r3, [pc, #92]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <DMA1_Channel4_IRQHandler+0x2a>
		DMA1->IFCR |= DMA_IFCR_CTCIF4; // clear interrupt
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <DMA1_Channel4_IRQHandler+0x84>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <DMA1_Channel4_IRQHandler+0x84>)
 80012e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012e4:	6053      	str	r3, [r2, #4]
		SPI2->CR2 &= ~SPI_CR2_RXNEIE;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a10      	ldr	r2, [pc, #64]	@ (800132c <DMA1_Channel4_IRQHandler+0x88>)
 80012ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012f0:	6053      	str	r3, [r2, #4]
		AD7676_CS_ON;
 80012f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012fa:	619a      	str	r2, [r3, #24]
		received_samples++;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <DMA1_Channel4_IRQHandler+0x8c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <DMA1_Channel4_IRQHandler+0x8c>)
 8001304:	6013      	str	r3, [r2, #0]
		if (received_samples < awaited_samples){
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <DMA1_Channel4_IRQHandler+0x8c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <DMA1_Channel4_IRQHandler+0x90>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d202      	bcs.n	8001318 <DMA1_Channel4_IRQHandler+0x74>
			ad7676_start_conversion();
 8001312:	f001 fb7f 	bl	8002a14 <ad7676_start_conversion>
		}
		else {
			osThreadFlagsSet(adc_handlerHandle, 0x01);
		}
	} //do sth if DMA transfer complete is raised
}
 8001316:	e005      	b.n	8001324 <DMA1_Channel4_IRQHandler+0x80>
			osThreadFlagsSet(adc_handlerHandle, 0x01);
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <DMA1_Channel4_IRQHandler+0x94>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f007 ffe8 	bl	80092f4 <osThreadFlagsSet>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020000 	.word	0x40020000
 800132c:	40003800 	.word	0x40003800
 8001330:	20000374 	.word	0x20000374
 8001334:	200006bc 	.word	0x200006bc
 8001338:	2000038c 	.word	0x2000038c

0800133c <HAL_UART_TxCpltCallback>:
		while(1) __NOP();
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2){

  }
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_BUSY_Pin && collect_data){
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001360:	d105      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0x1e>
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_GPIO_EXTI_Callback+0x28>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_GPIO_EXTI_Callback+0x1e>
		ad7676_read_one_sample();
 800136a:	f001 f9bb 	bl	80026e4 <ad7676_read_one_sample>
//		osThreadFlagsSet(adc_handlerHandle, 0x01);
//		if(busy_dropped == false)
//		busy_dropped = true;
	}
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200006b8 	.word	0x200006b8

0800137c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <MX_GPIO_Init+0x134>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a46      	ldr	r2, [pc, #280]	@ (80014b0 <MX_GPIO_Init+0x134>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a40      	ldr	r2, [pc, #256]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a3a      	ldr	r2, [pc, #232]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a34      	ldr	r2, [pc, #208]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <MX_GPIO_Init+0x134>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fa:	f003 fb4b 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001404:	482b      	ldr	r0, [pc, #172]	@ (80014b4 <MX_GPIO_Init+0x138>)
 8001406:	f003 fb45 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADF_CS_Pin|ADC_CS_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001414:	f003 fb3e 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|ADC_BUSY_Pin;
 8001418:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800141e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4821      	ldr	r0, [pc, #132]	@ (80014b4 <MX_GPIO_Init+0x138>)
 8001430:	f003 f892 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001434:	2320      	movs	r3, #32
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144e:	f003 f883 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_DATA_Pin|ADC_FIRSTDATA_Pin;
 8001452:	23c0      	movs	r3, #192	@ 0xc0
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <MX_GPIO_Init+0x138>)
 8001466:	f003 f877 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CNVST_Pin;
 800146a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CNVST_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <MX_GPIO_Init+0x138>)
 8001484:	f003 f868 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin|ADC_CS_Pin;
 8001488:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f003 f858 	bl	8004558 <HAL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f002 fbfe 	bl	8003cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f818 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f7ff ff5a 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 80014c8:	f7ff fd50 	bl	8000f6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014cc:	f000 fdb8 	bl	8002040 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80014d0:	f000 fd4e 	bl	8001f70 <MX_TIM6_Init>
  MX_SPI3_Init();
 80014d4:	f000 f9d4 	bl	8001880 <MX_SPI3_Init>
//  MX_SPI2_Init();
  MX_TIM2_Init();
 80014d8:	f000 fcd6 	bl	8001e88 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014dc:	f000 f85b 	bl	8001596 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Initialize_Delay();
 80014e0:	f7ff fd0a 	bl	8000ef8 <Initialize_Delay>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014e4:	f007 fe2a 	bl	800913c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014e8:	f7ff fd7c 	bl	8000fe4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014ec:	f007 fe4a 	bl	8009184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <main+0x38>

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	@ 0x58
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2244      	movs	r2, #68	@ 0x44
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00b fdc3 	bl	800d08e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001516:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800151a:	f003 faf9 	bl	8004b10 <HAL_PWREx_ControlVoltageScaling>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001524:	f000 f86e 	bl	8001604 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001528:	2302      	movs	r3, #2
 800152a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001530:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001532:	2310      	movs	r3, #16
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	2302      	movs	r3, #2
 8001538:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153a:	2302      	movs	r3, #2
 800153c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001542:	230a      	movs	r3, #10
 8001544:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001546:	2307      	movs	r3, #7
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fb30 	bl	8004bbc <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001562:	f000 f84f 	bl	8001604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2303      	movs	r3, #3
 800156c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	2104      	movs	r1, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fef8 	bl	8005374 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800158a:	f000 f83b 	bl	8001604 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3758      	adds	r7, #88	@ 0x58
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	2017      	movs	r0, #23
 80015a0:	f002 fca8 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a4:	2017      	movs	r0, #23
 80015a6:	f002 fcc1 	bl	8003f2c <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2105      	movs	r1, #5
 80015ae:	2026      	movs	r0, #38	@ 0x26
 80015b0:	f002 fca0 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b4:	2026      	movs	r0, #38	@ 0x26
 80015b6:	f002 fcb9 	bl	8003f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2105      	movs	r1, #5
 80015be:	2011      	movs	r0, #17
 80015c0:	f002 fc98 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015c4:	2011      	movs	r0, #17
 80015c6:	f002 fcb1 	bl	8003f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	2010      	movs	r0, #16
 80015d0:	f002 fc90 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80015d4:	2010      	movs	r0, #16
 80015d6:	f002 fca9 	bl	8003f2c <HAL_NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015f2:	f002 fb83 	bl	8003cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40000c00 	.word	0x40000c00

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <Error_Handler+0x8>

08001610 <ParserTakeLine>:
	{"SETUP", "Configuration succeed\n\r", "Configuration failed\n\r", ADF5355_Load, 1},
	{"READ", "ADC Read success\n\r", "ADC Read failed\n\r", ReadADC, 0},
	{"READRAW", "1111111111", "0000000000", ReadRawADC, 0}
};

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 800161e:	f107 030e 	add.w	r3, r7, #14
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f8f3 	bl	8001810 <ReadFromBuffer>
		  if(tmp == ENDLINE){
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d105      	bne.n	800163c <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4413      	add	r3, r2
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e004      	b.n	8001646 <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	4413      	add	r3, r2
 8001642:	7bba      	ldrb	r2, [r7, #14]
 8001644:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3301      	adds	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 800164c:	7bbb      	ldrb	r3, [r7, #14]
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d1e5      	bne.n	800161e <ParserTakeLine+0xe>
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <ParserParse>:

void ParserParse(char* received_string){
 800165c:	b580      	push	{r7, lr}
 800165e:	b0a2      	sub	sp, #136	@ 0x88
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	char* endptr;
	char* parse_pointer = strtok(received_string, "=");
 8001664:	4946      	ldr	r1, [pc, #280]	@ (8001780 <ParserParse+0x124>)
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f00b fd1a 	bl	800d0a0 <strtok>
 800166c:	67f8      	str	r0, [r7, #124]	@ 0x7c
	int32_t value = strtol(strtok(NULL,","), &endptr, 10);
 800166e:	4945      	ldr	r1, [pc, #276]	@ (8001784 <ParserParse+0x128>)
 8001670:	2000      	movs	r0, #0
 8001672:	f00b fd15 	bl	800d0a0 <strtok>
 8001676:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800167a:	220a      	movs	r2, #10
 800167c:	4619      	mov	r1, r3
 800167e:	f00a ff7f 	bl	800c580 <strtol>
 8001682:	4603      	mov	r3, r0
 8001684:	673b      	str	r3, [r7, #112]	@ 0x70
	char buffer[100];
	bool cmd_matched = false;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001692:	e05a      	b.n	800174a <ParserParse+0xee>
		if(strcmp(at_cmds[i].command, parse_pointer) == 0){
 8001694:	493c      	ldr	r1, [pc, #240]	@ (8001788 <ParserParse+0x12c>)
 8001696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fd91 	bl	80001d0 <strcmp>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d145      	bne.n	8001740 <ParserParse+0xe4>
			bool* result = at_cmds[i].function(&value);
 80016b4:	4934      	ldr	r1, [pc, #208]	@ (8001788 <ParserParse+0x12c>)
 80016b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	330c      	adds	r3, #12
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
 80016d0:	67b8      	str	r0, [r7, #120]	@ 0x78
			if (*result == true && (endptr != 0x00 || at_cmds[i].optional_argument == 1)){
 80016d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01f      	beq.n	800171a <ParserParse+0xbe>
 80016da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10b      	bne.n	80016f8 <ParserParse+0x9c>
 80016e0:	4929      	ldr	r1, [pc, #164]	@ (8001788 <ParserParse+0x12c>)
 80016e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3310      	adds	r3, #16
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d110      	bne.n	800171a <ParserParse+0xbe>
				sprintf(buffer, at_cmds[i].responsePositive, value);
 80016f8:	4923      	ldr	r1, [pc, #140]	@ (8001788 <ParserParse+0x12c>)
 80016fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	3304      	adds	r3, #4
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4618      	mov	r0, r3
 8001714:	f00b fc58 	bl	800cfc8 <siprintf>
 8001718:	e00f      	b.n	800173a <ParserParse+0xde>
			}
			else {
				sprintf(buffer, at_cmds[i].responseNegative, value);
 800171a:	491b      	ldr	r1, [pc, #108]	@ (8001788 <ParserParse+0x12c>)
 800171c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3308      	adds	r3, #8
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4618      	mov	r0, r3
 8001736:	f00b fc47 	bl	800cfc8 <siprintf>
			}
			cmd_matched = true;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8001740:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001744:	3301      	adds	r3, #1
 8001746:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800174a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800174e:	2b0a      	cmp	r3, #10
 8001750:	d9a0      	bls.n	8001694 <ParserParse+0x38>
		}
	}
	if (!cmd_matched){
 8001752:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <ParserParse+0x110>
		sprintf(buffer, "Available commands are LED, FREQOut, FREQIn, POW, CURR, MUXOUT, EN, RUN, SETUP and READ\n\r");
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4909      	ldr	r1, [pc, #36]	@ (800178c <ParserParse+0x130>)
 8001766:	4618      	mov	r0, r3
 8001768:	f00b fc2e 	bl	800cfc8 <siprintf>
	}
	UARTLog(buffer);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fd4d 	bl	8002210 <UARTLog>
}
 8001776:	bf00      	nop
 8001778:	3788      	adds	r7, #136	@ 0x88
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800f4d8 	.word	0x0800f4d8
 8001784:	0800f4dc 	.word	0x0800f4dc
 8001788:	2000004c 	.word	0x2000004c
 800178c:	0800f4e0 	.word	0x0800f4e0

08001790 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t *Data, uint8_t Len)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	4613      	mov	r3, r2
 800179c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHead;

	for(int i=0; i<Len; i++){
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e02a      	b.n	80017fa <WriteToBuffer+0x6a>
		TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8c1b      	ldrh	r3, [r3, #32]
 80017a8:	3301      	adds	r3, #1
 80017aa:	425a      	negs	r2, r3
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	f002 021f 	and.w	r2, r2, #31
 80017b4:	bf58      	it	pl
 80017b6:	4253      	negpl	r3, r2
 80017b8:	74fb      	strb	r3, [r7, #19]

		if( TempHead == Buffer->Tail) // No room for new data
 80017ba:	7cfb      	ldrb	r3, [r7, #19]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d101      	bne.n	80017ca <WriteToBuffer+0x3a>
		{
			return RB_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e01c      	b.n	8001804 <WriteToBuffer+0x74>
		}
		else
		{
			Buffer->Buffer[Buffer->Head] = *(Data+i);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	8c12      	ldrh	r2, [r2, #32]
 80017d4:	7819      	ldrb	r1, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	5499      	strb	r1, [r3, r2]

			Buffer->Head++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8c1b      	ldrh	r3, [r3, #32]
 80017de:	3301      	adds	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	841a      	strh	r2, [r3, #32]
			Buffer->Head %= BUFFER_SIZE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8c1b      	ldrh	r3, [r3, #32]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	841a      	strh	r2, [r3, #32]
	for(int i=0; i<Len; i++){
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbd0      	blt.n	80017a4 <WriteToBuffer+0x14>
		}
	}
	return RB_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	8c1b      	ldrh	r3, [r3, #32]
 8001822:	429a      	cmp	r2, r3
 8001824:	d101      	bne.n	800182a <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e014      	b.n	8001854 <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	5c9a      	ldrb	r2, [r3, r2]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800183c:	3301      	adds	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <FlushBuffer>:

void FlushBuffer(RingBuffer *Buffer)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	Buffer->Tail = 0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	845a      	strh	r2, [r3, #34]	@ 0x22
	Buffer->Head = 0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	841a      	strh	r2, [r3, #32]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <MX_SPI3_Init>:
  /* USER CODE END SPI2_Init 2 */

}
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <MX_SPI3_Init+0x74>)
 8001886:	4a1c      	ldr	r2, [pc, #112]	@ (80018f8 <MX_SPI3_Init+0x78>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <MX_SPI3_Init+0x74>)
 800188c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <MX_SPI3_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_SPI3_Init+0x74>)
 800189a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800189e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018b6:	2220      	movs	r2, #32
 80018b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018ce:	2207      	movs	r2, #7
 80018d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018da:	2208      	movs	r2, #8
 80018dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_SPI3_Init+0x74>)
 80018e0:	f004 fc5a 	bl	8006198 <HAL_SPI_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f7ff fe8b 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200003fc 	.word	0x200003fc
 80018f8:	40003c00 	.word	0x40003c00

080018fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	@ 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a53      	ldr	r2, [pc, #332]	@ (8001a68 <HAL_SPI_MspInit+0x16c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d171      	bne.n	8001a02 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800191e:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001928:	6593      	str	r3, [r2, #88]	@ 0x58
 800192a:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	4b4d      	ldr	r3, [pc, #308]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001942:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001966:	2304      	movs	r3, #4
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001976:	2305      	movs	r3, #5
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	483b      	ldr	r0, [pc, #236]	@ (8001a70 <HAL_SPI_MspInit+0x174>)
 8001982:	f002 fde9 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001998:	2305      	movs	r3, #5
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4834      	ldr	r0, [pc, #208]	@ (8001a74 <HAL_SPI_MspInit+0x178>)
 80019a4:	f002 fdd8 	bl	8004558 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80019a8:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019aa:	4a34      	ldr	r2, [pc, #208]	@ (8001a7c <HAL_SPI_MspInit+0x180>)
 80019ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80019ae:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b4:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019dc:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80019e4:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019e6:	f002 faaf 	bl	8003f48 <HAL_DMA_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 80019f0:	f7ff fe08 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80019fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_SPI_MspInit+0x17c>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a00:	e02d      	b.n	8001a5e <HAL_SPI_MspInit+0x162>
  else if(spiHandle->Instance==SPI3)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <HAL_SPI_MspInit+0x184>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d128      	bne.n	8001a5e <HAL_SPI_MspInit+0x162>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_SPI_MspInit+0x170>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001a3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a46:	2302      	movs	r3, #2
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a4e:	2306      	movs	r3, #6
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_SPI_MspInit+0x174>)
 8001a5a:	f002 fd7d 	bl	8004558 <HAL_GPIO_Init>
}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	@ 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000400 	.word	0x48000400
 8001a78:	20000460 	.word	0x20000460
 8001a7c:	40020044 	.word	0x40020044
 8001a80:	40003c00 	.word	0x40003c00

08001a84 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_SPI_MspDeInit+0x64>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d114      	bne.n	8001ac0 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_SPI_MspDeInit+0x68>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <HAL_SPI_MspDeInit+0x68>)
 8001a9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <HAL_SPI_MspDeInit+0x6c>)
 8001aa6:	f002 ff01 	bl	80048ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001aaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aae:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <HAL_SPI_MspDeInit+0x70>)
 8001ab0:	f002 fefc 	bl	80048ac <HAL_GPIO_DeInit>

    /* SPI2 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fafd 	bl	80040b8 <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001abe:	e00f      	b.n	8001ae0 <HAL_SPI_MspDeInit+0x5c>
  else if(spiHandle->Instance==SPI3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8001af8 <HAL_SPI_MspDeInit+0x74>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_SPI_MspDeInit+0x5c>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001aca:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_SPI_MspDeInit+0x68>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_SPI_MspDeInit+0x68>)
 8001ad0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ad4:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_12);
 8001ad6:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_SPI_MspDeInit+0x6c>)
 8001adc:	f002 fee6 	bl	80048ac <HAL_GPIO_DeInit>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40003800 	.word	0x40003800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000400 	.word	0x48000400
 8001af8:	40003c00 	.word	0x40003c00

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	210f      	movs	r1, #15
 8001b36:	f06f 0001 	mvn.w	r0, #1
 8001b3a:	f002 f9db 	bl	8003ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	@ 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001b5a:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <HAL_InitTick+0xe0>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a33      	ldr	r2, [pc, #204]	@ (8001c2c <HAL_InitTick+0xe0>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_InitTick+0xe0>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b72:	f107 0210 	add.w	r2, r7, #16
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fdbd 	bl	80056fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b8c:	f003 fd8a 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8001b90:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b92:	e004      	b.n	8001b9e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b94:	f003 fd86 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba0:	4a23      	ldr	r2, [pc, #140]	@ (8001c30 <HAL_InitTick+0xe4>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0c9b      	lsrs	r3, r3, #18
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001bac:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <HAL_InitTick+0xec>)
 8001bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bb8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbe:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001bd2:	4818      	ldr	r0, [pc, #96]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001bd4:	f004 fe86 	bl	80068e4 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001bde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11b      	bne.n	8001c1e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001be6:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001be8:	f004 ff3c 	bl	8006a64 <HAL_TIM_Base_Start_IT>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d111      	bne.n	8001c1e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bfa:	2032      	movs	r0, #50	@ 0x32
 8001bfc:	f002 f996 	bl	8003f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	d808      	bhi.n	8001c18 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001c06:	2200      	movs	r2, #0
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	2032      	movs	r0, #50	@ 0x32
 8001c0c:	f002 f972 	bl	8003ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c10:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_InitTick+0xf0>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e002      	b.n	8001c1e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3738      	adds	r7, #56	@ 0x38
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	431bde83 	.word	0x431bde83
 8001c34:	200004a8 	.word	0x200004a8
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	2000013c 	.word	0x2000013c

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <NMI_Handler+0x4>

08001c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <MemManage_Handler+0x4>

08001c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <DMA1_Channel6_IRQHandler+0x10>)
 8001c7e:	f002 fb8c 	bl	800439a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000618 	.word	0x20000618

08001c8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <DMA1_Channel7_IRQHandler+0x10>)
 8001c92:	f002 fb82 	bl	800439a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000660 	.word	0x20000660

08001ca0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_BUSY_Pin);
 8001ca4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ca8:	f002 ff0c 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <USART2_IRQHandler+0x10>)
 8001cb6:	f005 ffad 	bl	8007c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000590 	.word	0x20000590

08001cc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <TIM5_IRQHandler+0x10>)
 8001cca:	f004 ff9c 	bl	8006c06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200004a8 	.word	0x200004a8

08001cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_kill>:

int _kill(int pid, int sig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf2:	f00b fae1 	bl	800d2b8 <__errno>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_exit>:

void _exit (int status)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe7 	bl	8001ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <_exit+0x12>

08001d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e00a      	b.n	8001d46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d30:	f3af 8000 	nop.w
 8001d34:	4601      	mov	r1, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbf0      	blt.n	8001d30 <_read+0x12>
  }

  return len;
 8001d4e:	687b      	ldr	r3, [r7, #4]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e009      	b.n	8001d7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	60ba      	str	r2, [r7, #8]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf1      	blt.n	8001d6a <_write+0x12>
  }
  return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_close>:

int _close(int file)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_isatty>:

int _isatty(int file)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	@ (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f00b fa46 	bl	800d2b8 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20018000 	.word	0x20018000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	200004f4 	.word	0x200004f4
 8001e60:	20003580 	.word	0x20003580

08001e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	@ 0x38
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001ebc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ece:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee2:	4822      	ldr	r0, [pc, #136]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001ee4:	f004 fcfe 	bl	80068e4 <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001eee:	f7ff fb89 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ef8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001efc:	4619      	mov	r1, r3
 8001efe:	481b      	ldr	r0, [pc, #108]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001f00:	f005 f802 	bl	8006f08 <HAL_TIM_ConfigClockSource>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001f0a:	f7ff fb7b 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001f0e:	4817      	ldr	r0, [pc, #92]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001f10:	f004 fe18 	bl	8006b44 <HAL_TIM_OC_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001f1a:	f7ff fb73 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480f      	ldr	r0, [pc, #60]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001f2e:	f005 fcf3 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f38:	f7ff fb64 	bl	8001604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_TIM2_Init+0xe4>)
 8001f54:	f004 ff5e 	bl	8006e14 <HAL_TIM_OC_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f5e:	f7ff fb51 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3738      	adds	r7, #56	@ 0x38
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200004f8 	.word	0x200004f8

08001f70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f80:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <MX_TIM6_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001f88:	224f      	movs	r2, #79	@ 0x4f
 8001f8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001f94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fa0:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001fa2:	f004 fc9f 	bl	80068e4 <HAL_TIM_Base_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fac:	f7ff fb2a 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <MX_TIM6_Init+0x64>)
 8001fbe:	f005 fcab 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fc8:	f7ff fb1c 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000544 	.word	0x20000544
 8001fd8:	40001000 	.word	0x40001000

08001fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fec:	d10c      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fee:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_TIM_Base_MspInit+0x5c>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <HAL_TIM_Base_MspInit+0x5c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_TIM_Base_MspInit+0x5c>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002006:	e010      	b.n	800202a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM6)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0b      	ldr	r2, [pc, #44]	@ (800203c <HAL_TIM_Base_MspInit+0x60>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10b      	bne.n	800202a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_TIM_Base_MspInit+0x5c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_TIM_Base_MspInit+0x5c>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6593      	str	r3, [r2, #88]	@ 0x58
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_TIM_Base_MspInit+0x5c>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	40001000 	.word	0x40001000

08002040 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002046:	4a15      	ldr	r2, [pc, #84]	@ (800209c <MX_USART2_UART_Init+0x5c>)
 8002048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800204a:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 800204c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_USART2_UART_Init+0x58>)
 8002084:	f005 fcee 	bl	8007a64 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800208e:	f7ff fab9 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000590 	.word	0x20000590
 800209c:	40004400 	.word	0x40004400

080020a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0ac      	sub	sp, #176	@ 0xb0
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2288      	movs	r2, #136	@ 0x88
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00a ffe4 	bl	800d08e <memset>
  if(uartHandle->Instance==USART2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4b      	ldr	r2, [pc, #300]	@ (80021f8 <HAL_UART_MspInit+0x158>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 808e 	bne.w	80021ee <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fb9e 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020ea:	f7ff fa8b 	bl	8001604 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_UART_MspInit+0x15c>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a42      	ldr	r2, [pc, #264]	@ (80021fc <HAL_UART_MspInit+0x15c>)
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fa:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <HAL_UART_MspInit+0x15c>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <HAL_UART_MspInit+0x15c>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4a3c      	ldr	r2, [pc, #240]	@ (80021fc <HAL_UART_MspInit+0x15c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002112:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <HAL_UART_MspInit+0x15c>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800211e:	230c      	movs	r3, #12
 8002120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002136:	2307      	movs	r3, #7
 8002138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f002 fa07 	bl	8004558 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800214a:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <HAL_UART_MspInit+0x160>)
 800214c:	4a2d      	ldr	r2, [pc, #180]	@ (8002204 <HAL_UART_MspInit+0x164>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002150:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002152:	2202      	movs	r2, #2
 8002154:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b28      	ldr	r3, [pc, #160]	@ (8002200 <HAL_UART_MspInit+0x160>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_UART_MspInit+0x160>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800217a:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <HAL_UART_MspInit+0x160>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002180:	481f      	ldr	r0, [pc, #124]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002182:	f001 fee1 	bl	8003f48 <HAL_DMA_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800218c:	f7ff fa3a 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002194:	675a      	str	r2, [r3, #116]	@ 0x74
 8002196:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_UART_MspInit+0x160>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_UART_MspInit+0x168>)
 800219e:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <HAL_UART_MspInit+0x16c>)
 80021a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80021a2:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021a4:	2202      	movs	r2, #2
 80021a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021aa:	2210      	movs	r2, #16
 80021ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ae:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021b6:	2280      	movs	r2, #128	@ 0x80
 80021b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021d2:	480d      	ldr	r0, [pc, #52]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021d4:	f001 feb8 	bl	8003f48 <HAL_DMA_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80021de:	f7ff fa11 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a08      	ldr	r2, [pc, #32]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021e6:	671a      	str	r2, [r3, #112]	@ 0x70
 80021e8:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	37b0      	adds	r7, #176	@ 0xb0
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40021000 	.word	0x40021000
 8002200:	20000618 	.word	0x20000618
 8002204:	4002006c 	.word	0x4002006c
 8002208:	20000660 	.word	0x20000660
 800220c:	40020080 	.word	0x40020080

08002210 <UARTLog>:
extern data_Collector_TypeDef* ad7676_data;
uint64_t start_time = 0;
bool raw_data = false;

void UARTLog(char* message)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe f839 	bl	8000290 <strlen>
 800221e:	4603      	mov	r3, r0
 8002220:	b29a      	uxth	r2, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4803      	ldr	r0, [pc, #12]	@ (8002238 <UARTLog+0x28>)
 800222a:	f005 fc69 	bl	8007b00 <HAL_UART_Transmit>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000590 	.word	0x20000590

0800223c <LightLED>:

//void* SetPLL_Period(void* period_ms){
//
//}

void* LightLED(void* state){
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <LightLED+0x24>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d003      	beq.n	8002260 <LightLED+0x24>
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <LightLED+0x44>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e00a      	b.n	8002276 <LightLED+0x3a>
	else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, *value);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	2120      	movs	r1, #32
 8002268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800226c:	f002 fc12 	bl	8004a94 <HAL_GPIO_WritePin>
		ret = true;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <LightLED+0x44>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002276:	4b02      	ldr	r3, [pc, #8]	@ (8002280 <LightLED+0x44>)
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200006b1 	.word	0x200006b1

08002284 <ReadADC>:

void* ReadADC(void* samples){
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint16_t*)samples;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60fb      	str	r3, [r7, #12]
	if (*value <= 0 && *value > ad7676_data->data_ptr_max) ret = false;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <ReadADC+0x2c>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <ReadADC+0x5c>)
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d903      	bls.n	80022b0 <ReadADC+0x2c>
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <ReadADC+0x60>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e012      	b.n	80022d6 <ReadADC+0x52>
	else {
		ad7676_read_samples(*value);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa41 	bl	800273c <ad7676_read_samples>
		start_time = __HAL_TIM_GET_COUNTER(&htim2);
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <ReadADC+0x64>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	2200      	movs	r2, #0
 80022c2:	461c      	mov	r4, r3
 80022c4:	4615      	mov	r5, r2
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <ReadADC+0x68>)
 80022c8:	e9c3 4500 	strd	r4, r5, [r3]
		ad7676_start_conversion();
 80022cc:	f000 fba2 	bl	8002a14 <ad7676_start_conversion>
		ret = true;
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <ReadADC+0x60>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80022d6:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <ReadADC+0x60>)
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bdb0      	pop	{r4, r5, r7, pc}
 80022e0:	200006b4 	.word	0x200006b4
 80022e4:	200006b2 	.word	0x200006b2
 80022e8:	200004f8 	.word	0x200004f8
 80022ec:	200006a8 	.word	0x200006a8

080022f0 <ReadRawADC>:

void* ReadRawADC(void* samples){
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint16_t*)samples;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	60fb      	str	r3, [r7, #12]
	if (*value <= 0 && *value > ad7676_data->data_ptr_max) ret = false;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <ReadRawADC+0x2c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <ReadRawADC+0x64>)
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 8002310:	4293      	cmp	r3, r2
 8002312:	d903      	bls.n	800231c <ReadRawADC+0x2c>
 8002314:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <ReadRawADC+0x68>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e015      	b.n	8002348 <ReadRawADC+0x58>
	else {
		ad7676_read_samples(*value);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fa0b 	bl	800273c <ad7676_read_samples>
		raw_data = true;
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <ReadRawADC+0x6c>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
		start_time = __HAL_TIM_GET_COUNTER(&htim2);
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <ReadRawADC+0x70>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	2200      	movs	r2, #0
 8002334:	461c      	mov	r4, r3
 8002336:	4615      	mov	r5, r2
 8002338:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <ReadRawADC+0x74>)
 800233a:	e9c3 4500 	strd	r4, r5, [r3]
		ad7676_start_conversion();
 800233e:	f000 fb69 	bl	8002a14 <ad7676_start_conversion>
		ret = true;
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <ReadRawADC+0x68>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <ReadRawADC+0x68>)
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	200006b4 	.word	0x200006b4
 8002358:	200006b3 	.word	0x200006b3
 800235c:	200006b0 	.word	0x200006b0
 8002360:	200004f8 	.word	0x200004f8
 8002364:	200006a8 	.word	0x200006a8

08002368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800236c:	f7ff fd7a 	bl	8001e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002372:	490d      	ldr	r1, [pc, #52]	@ (80023a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002374:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <LoopForever+0xe>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002388:	4c0a      	ldr	r4, [pc, #40]	@ (80023b4 <LoopForever+0x16>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002396:	f00a ff95 	bl	800d2c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239a:	f7ff f88d 	bl	80014b8 <main>

0800239e <LoopForever>:

LoopForever:
    b LoopForever
 800239e:	e7fe      	b.n	800239e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80023ac:	0800fa64 	.word	0x0800fa64
  ldr r2, =_sbss
 80023b0:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80023b4:	20003580 	.word	0x20003580

080023b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_2_IRQHandler>
	...

080023bc <ad7676_spi_configuration>:
bool continuous_mode = false;
uint32_t awaited_samples = 0;
static uint64_t start_time, end_time, elapsed_time = 0;


static void ad7676_spi_configuration(){
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
//	SPI_CR1_BIDIMODE 0
//	SPI_CR1_BIDIOE 0
//	SPI2->CR1 |= SPI_CR1_CRCEN;
	SPI2->CR1 |= SPI_CR1_RXONLY;
 80023c0:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ca:	6013      	str	r3, [r2, #0]
//	SPI_CR1_LSBFIRST 0
//	SPI2->CR1 |= SPI_CR1_SPE; //enable when ready
	SPI2->CR1 |= SPI_CR1_BR_0; // | SPI_CR1_BR_1); //ultimately leave 0
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_MSTR;
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a13      	ldr	r2, [pc, #76]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_CPOL; //spi configuration CPOL 1 CPHA 0
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a10      	ldr	r2, [pc, #64]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	6013      	str	r3, [r2, #0]

//	SPI2->CR1 = SPI_CR1_CRCEN | SPI_CR1_RXONLY |
//			SPI_CR1_BR_2 | SPI_CR1_MSTR | SPI_CR1_CPOL;

//	SPI2->CR2 |= SPI_CR2_FRXTH 0
	SPI2->CR2 |= SPI_CR2_DS;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023f6:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80023fa:	6053      	str	r3, [r2, #4]
//	SPI2->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2);
	SPI2->CR2 |= SPI_CR2_RXNEIE; //enable when RXNE interrupt necessary
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <ad7676_spi_configuration+0x70>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <ad7676_spi_configuration+0x70>)
 8002402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002406:	6053      	str	r3, [r2, #4]
//	SPI2->CR2 |= SPI_CR2_NSSP; //no NSS pulse between data
	SPI2->CR2 |= SPI_CR2_SSOE; //master SS enabled
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <ad7676_spi_configuration+0x70>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a07      	ldr	r2, [pc, #28]	@ (800242c <ad7676_spi_configuration+0x70>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6053      	str	r3, [r2, #4]
	SPI2->CR2 |= SPI_CR2_RXDMAEN; //DMA request is set with every RXNE flag
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <ad7676_spi_configuration+0x70>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <ad7676_spi_configuration+0x70>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6053      	str	r3, [r2, #4]

//	SPI2->CR2 = SPI_CR2_DS | SPI_CR2_SSOE |
//			SPI_CR2_RXDMAEN;
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40003800 	.word	0x40003800

08002430 <ad7676_dma_configuration>:

static void ad7676_dma_configuration(){
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
	DMA1_Channel4->CCR |= DMA_CCR_PL_1; //priority high
 8002436:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a21      	ldr	r2, [pc, #132]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 800243c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002440:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_MSIZE_0; //mem size 16-bit
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002448:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800244c:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_PSIZE_0; //periph size 16-bit
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002458:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_MINC; //mem increment
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a18      	ldr	r2, [pc, #96]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002464:	6013      	str	r3, [r2, #0]
//	DMA1_Channel4->CCR |= DMA_CCR_PINC; //periph increment - we reads spi register so its always the same
//	DMA1_Channel4->CCR |= DMA_CCR_DIR 0
	DMA1_Channel4->CCR |= DMA_CCR_TCIE; //transfer complete interrupt en
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <ad7676_dma_configuration+0x90>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6013      	str	r3, [r2, #0]
//	DMA1_Channel4->CCR |= DMA_CCR_EN; //TODO check if needed to set
	uint8_t num_channel = 4;
 8002472:	2304      	movs	r3, #4
 8002474:	71fb      	strb	r3, [r7, #7]
	uint8_t num_half_bytes = 4;
 8002476:	2304      	movs	r3, #4
 8002478:	71bb      	strb	r3, [r7, #6]
	DMA1_CSELR->CSELR &= ~(0xF << num_half_bytes*(num_channel-1));
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <ad7676_dma_configuration+0x94>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	79ba      	ldrb	r2, [r7, #6]
 8002480:	79f9      	ldrb	r1, [r7, #7]
 8002482:	3901      	subs	r1, #1
 8002484:	fb01 f202 	mul.w	r2, r1, r2
 8002488:	210f      	movs	r1, #15
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	43d2      	mvns	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <ad7676_dma_configuration+0x94>)
 8002494:	400b      	ands	r3, r1
 8002496:	6013      	str	r3, [r2, #0]
	DMA1_CSELR->CSELR |= 1 << num_half_bytes*(num_channel-1);
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <ad7676_dma_configuration+0x94>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	79ba      	ldrb	r2, [r7, #6]
 800249e:	79f9      	ldrb	r1, [r7, #7]
 80024a0:	3901      	subs	r1, #1
 80024a2:	fb01 f202 	mul.w	r2, r1, r2
 80024a6:	2101      	movs	r1, #1
 80024a8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <ad7676_dma_configuration+0x94>)
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40020044 	.word	0x40020044
 80024c4:	400200a8 	.word	0x400200a8

080024c8 <ad7676_clock_configuration>:

static void ad7676_clock_configuration(){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI2_CLK_ENABLE();
 80024ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024da:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	4a25      	ldr	r2, [pc, #148]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f2:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	4a1f      	ldr	r2, [pc, #124]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <ad7676_clock_configuration+0xb8>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002526:	2304      	movs	r3, #4
 8002528:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002536:	2305      	movs	r3, #5
 8002538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4619      	mov	r1, r3
 8002540:	4810      	ldr	r0, [pc, #64]	@ (8002584 <ad7676_clock_configuration+0xbc>)
 8002542:	f002 f809 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002546:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800254a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002558:	2305      	movs	r3, #5
 800255a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	4619      	mov	r1, r3
 8002562:	4809      	ldr	r0, [pc, #36]	@ (8002588 <ad7676_clock_configuration+0xc0>)
 8002564:	f001 fff8 	bl	8004558 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2105      	movs	r1, #5
 800256c:	2024      	movs	r0, #36	@ 0x24
 800256e:	f001 fcc1 	bl	8003ef4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002572:	2024      	movs	r0, #36	@ 0x24
 8002574:	f001 fcda 	bl	8003f2c <HAL_NVIC_EnableIRQ>
}
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	48000800 	.word	0x48000800
 8002588:	48000400 	.word	0x48000400

0800258c <ad7676_init>:


void ad7676_init(data_Collector_TypeDef** ad7676_data)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	data_Collector_TypeDef* init_data;

	init_data = (data_Collector_TypeDef*)no_os_calloc(1, sizeof(*init_data));
 8002594:	f240 614c 	movw	r1, #1612	@ 0x64c
 8002598:	2001      	movs	r0, #1
 800259a:	f001 fb31 	bl	8003c00 <no_os_calloc>
 800259e:	60f8      	str	r0, [r7, #12]

	init_data->spi_desc = &hspi2;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a10      	ldr	r2, [pc, #64]	@ (80025e4 <ad7676_init+0x58>)
 80025a4:	601a      	str	r2, [r3, #0]
	init_data->data_ptr = 0;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8a3 2644 	strh.w	r2, [r3, #1604]	@ 0x644
	init_data->data_ptr_max = 500;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025b4:	f8a3 2646 	strh.w	r2, [r3, #1606]	@ 0x646
	init_data->current_channel = 0;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2648 	strb.w	r2, [r3, #1608]	@ 0x648
	init_data->num_channels = 4;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2204      	movs	r2, #4
 80025c4:	f883 2649 	strb.w	r2, [r3, #1609]	@ 0x649

	*ad7676_data = init_data;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]

	ad7676_clock_configuration();
 80025ce:	f7ff ff7b 	bl	80024c8 <ad7676_clock_configuration>
	ad7676_spi_configuration();
 80025d2:	f7ff fef3 	bl	80023bc <ad7676_spi_configuration>
	ad7676_dma_configuration();
 80025d6:	f7ff ff2b 	bl	8002430 <ad7676_dma_configuration>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000398 	.word	0x20000398

080025e8 <ad7676_calculate_output>:
	SET_BIT(ad7676_data->spi_desc->Instance->CR2, SPI_CR2_RXDMAEN);

//	return HAL_OK;
}

int ad7676_calculate_output(int32_t sample){
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	int sample_voltage = (sample*10*1000)/32768;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da02      	bge.n	8002604 <ad7676_calculate_output+0x1c>
 80025fe:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002602:	337f      	adds	r3, #127	@ 0x7f
 8002604:	13db      	asrs	r3, r3, #15
 8002606:	60fb      	str	r3, [r7, #12]
	return sample_voltage;  //assuming range is +/-10V and REF is internal 2,5V datasheet p.23
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <ad7676_dma_enable_stream>:
	while(SPI2->SR & SPI_SR_BSY); //check if SPI is busy
//	SPI2->SR & SPI_SR_RXNE //check if RX buffer is empty
//	SPI2->DR //SPI FIFO pointer
}

static void ad7676_dma_enable_stream(uint16_t data_size, uint32_t src_addr, uint32_t dst_addr){
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	81fb      	strh	r3, [r7, #14]
	DMA1_Channel4->CNDTR = data_size;
 8002626:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <ad7676_dma_enable_stream+0x2c>)
 8002628:	89fb      	ldrh	r3, [r7, #14]
 800262a:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CPAR = src_addr;
 800262c:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <ad7676_dma_enable_stream+0x2c>)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6093      	str	r3, [r2, #8]
	DMA1_Channel4->CMAR = dst_addr;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <ad7676_dma_enable_stream+0x2c>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40020044 	.word	0x40020044

08002648 <ad7676_spi_read_raw>:
//
//		DMA1->IFCR |= DMA_IFCR_CTCIF4; // clear interrupt
//	} //do sth if DMA transfer complete is raised
//}

void ad7676_spi_read_raw(uint8_t* buf, uint16_t size){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
	SPI2->CR1 &= ~(SPI_CR1_SPE);
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 800265a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800265e:	6013      	str	r3, [r2, #0]
	SPI2->CR2 &= ~(SPI_CR2_RXDMAEN);
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6053      	str	r3, [r2, #4]
	SPI2->CR2 &= ~(SPI_CR2_FRXTH);
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 8002672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002676:	6053      	str	r3, [r2, #4]

	DMA1_Channel4->CCR &= ~(DMA_CCR_EN);
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <ad7676_spi_read_raw+0x90>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <ad7676_spi_read_raw+0x90>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6013      	str	r3, [r2, #0]
	DMA1->IFCR |= DMA_ISR_GIF4;
 8002684:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <ad7676_spi_read_raw+0x94>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <ad7676_spi_read_raw+0x94>)
 800268a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800268e:	6053      	str	r3, [r2, #4]
	ad7676_dma_enable_stream(size, (uint32_t)&(SPI2->DR), (uint32_t)buf);
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	4912      	ldr	r1, [pc, #72]	@ (80026e0 <ad7676_spi_read_raw+0x98>)
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ffbe 	bl	8002618 <ad7676_dma_enable_stream>
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <ad7676_spi_read_raw+0x90>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <ad7676_spi_read_raw+0x90>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR_EN; //DMA en
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <ad7676_spi_read_raw+0x90>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <ad7676_spi_read_raw+0x90>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6013      	str	r3, [r2, #0]

	SPI2->CR1 |= SPI_CR1_SPE;
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a06      	ldr	r2, [pc, #24]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 80026ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026be:	6013      	str	r3, [r2, #0]
	SPI2->CR2 |= SPI_CR2_RXDMAEN; //enable RX DMA interrupt
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a03      	ldr	r2, [pc, #12]	@ (80026d4 <ad7676_spi_read_raw+0x8c>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6053      	str	r3, [r2, #4]
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40003800 	.word	0x40003800
 80026d8:	40020044 	.word	0x40020044
 80026dc:	40020000 	.word	0x40020000
 80026e0:	4000380c 	.word	0x4000380c

080026e4 <ad7676_read_one_sample>:

void ad7676_read_one_sample() //when BUSY goes down
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
//	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
//	start_time = __HAL_TIM_GET_COUNTER(&htim2);
//	uint16_t buf[4];
	AD7676_CS_OFF;
 80026e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
//	ADC_CS_GPIO_Port->BRR = (uint32_t)ADC_CS_Pin;
	ad7676_spi_read_raw((uint8_t*)&ad7676_data->data_buf[ad7676_data->data_ptr], 4);
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <ad7676_read_one_sample+0x54>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <ad7676_read_one_sample+0x54>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3644 	ldrh.w	r3, [r3, #1604]	@ 0x644
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	2104      	movs	r1, #4
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff9e 	bl	8002648 <ad7676_spi_read_raw>
//	}
//	memcpy(&ad7676_data->data_buf[ad7676_data->data_ptr].data, buf, 8);
//	ad7676_data->data_buf[ad7676_data->data_ptr].data = (uint64_t)buf[0]<<48 + (uint64_t)buf[1]<<32 + (uint64_t)buf[2]<<16 + (uint64_t)buf[3];
//	AD7676_CS_ON;
//	ad7676_data->data_buf[ad7676_data->data_ptr++] = sample;
	ad7676_data->data_ptr = (ad7676_data->data_ptr+1)%ad7676_data->data_ptr_max;
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <ad7676_read_one_sample+0x54>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3644 	ldrh.w	r3, [r3, #1604]	@ 0x644
 8002714:	3301      	adds	r3, #1
 8002716:	4a08      	ldr	r2, [pc, #32]	@ (8002738 <ad7676_read_one_sample+0x54>)
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 800271e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002722:	fb01 f202 	mul.w	r2, r1, r2
 8002726:	1a9a      	subs	r2, r3, r2
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <ad7676_read_one_sample+0x54>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b292      	uxth	r2, r2
 800272e:	f8a3 2644 	strh.w	r2, [r3, #1604]	@ 0x644
//	end_time = __HAL_TIM_GET_COUNTER(&htim2);
//	elapsed_time = end_time - start_time;
//	*timer = elapsed_time;
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200006b4 	.word	0x200006b4

0800273c <ad7676_read_samples>:

void ad7676_read_samples(uint32_t samples){
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	awaited_samples = samples;
 8002744:	4a05      	ldr	r2, [pc, #20]	@ (800275c <ad7676_read_samples+0x20>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
	collect_data = true;
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <ad7676_read_samples+0x24>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	200006bc 	.word	0x200006bc
 8002760:	200006b8 	.word	0x200006b8

08002764 <ad7676_display_samples>:

void ad7676_read_continuous(bool enable){
	continuous_mode = enable;
}

void ad7676_display_samples(uint16_t awaited_samples, uint16_t* received_samples, void (*displayFunction)(char* message)){
 8002764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002768:	b0a0      	sub	sp, #128	@ 0x80
 800276a:	af06      	add	r7, sp, #24
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	81fb      	strh	r3, [r7, #14]
	char buffer[64];
	int v1, v2, v3, v4;
	uint16_t tmp_ptr = ad7676_data->data_ptr - awaited_samples;
 8002774:	4b7d      	ldr	r3, [pc, #500]	@ (800296c <ad7676_display_samples+0x208>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8b3 2644 	ldrh.w	r2, [r3, #1604]	@ 0x644
 800277c:	89fb      	ldrh	r3, [r7, #14]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	collect_data = false;
 8002784:	4b7a      	ldr	r3, [pc, #488]	@ (8002970 <ad7676_display_samples+0x20c>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
	*received_samples = 0;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	801a      	strh	r2, [r3, #0]
	sprintf(buffer, "Collected samples:%d\n\rCHANNEL1 CHANNEL2 CHANNEL3 CHANNEL4\n\r", awaited_samples);
 8002790:	89fa      	ldrh	r2, [r7, #14]
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4977      	ldr	r1, [pc, #476]	@ (8002974 <ad7676_display_samples+0x210>)
 8002798:	4618      	mov	r0, r3
 800279a:	f00a fc15 	bl	800cfc8 <siprintf>
	displayFunction(buffer);
 800279e:	f107 0214 	add.w	r2, r7, #20
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4610      	mov	r0, r2
 80027a6:	4798      	blx	r3
	for(uint16_t i=0; i<awaited_samples; i++){
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80027ae:	e0d1      	b.n	8002954 <ad7676_display_samples+0x1f0>
		v1 = ad7676_calculate_output(ad7676_data->data_buf[(tmp_ptr + i)%ad7676_data->data_ptr_max][0]);
 80027b0:	4b6e      	ldr	r3, [pc, #440]	@ (800296c <ad7676_display_samples+0x208>)
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80027b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80027bc:	4413      	add	r3, r2
 80027be:	4a6b      	ldr	r2, [pc, #428]	@ (800296c <ad7676_display_samples+0x208>)
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 80027c6:	fb93 f0f2 	sdiv	r0, r3, r2
 80027ca:	fb00 f202 	mul.w	r2, r0, r2
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	889b      	ldrh	r3, [r3, #4]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff06 	bl	80025e8 <ad7676_calculate_output>
 80027dc:	6638      	str	r0, [r7, #96]	@ 0x60
		v2 = ad7676_calculate_output(ad7676_data->data_buf[(tmp_ptr + i)%ad7676_data->data_ptr_max][1]);
 80027de:	4b63      	ldr	r3, [pc, #396]	@ (800296c <ad7676_display_samples+0x208>)
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80027e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80027ea:	4413      	add	r3, r2
 80027ec:	4a5f      	ldr	r2, [pc, #380]	@ (800296c <ad7676_display_samples+0x208>)
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 80027f4:	fb93 f0f2 	sdiv	r0, r3, r2
 80027f8:	fb00 f202 	mul.w	r2, r0, r2
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	88db      	ldrh	r3, [r3, #6]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff feef 	bl	80025e8 <ad7676_calculate_output>
 800280a:	65f8      	str	r0, [r7, #92]	@ 0x5c
		v3 = ad7676_calculate_output(ad7676_data->data_buf[(tmp_ptr + i)%ad7676_data->data_ptr_max][2]);
 800280c:	4b57      	ldr	r3, [pc, #348]	@ (800296c <ad7676_display_samples+0x208>)
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002814:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002818:	4413      	add	r3, r2
 800281a:	4a54      	ldr	r2, [pc, #336]	@ (800296c <ad7676_display_samples+0x208>)
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 8002822:	fb93 f0f2 	sdiv	r0, r3, r2
 8002826:	fb00 f202 	mul.w	r2, r0, r2
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	891b      	ldrh	r3, [r3, #8]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fed8 	bl	80025e8 <ad7676_calculate_output>
 8002838:	65b8      	str	r0, [r7, #88]	@ 0x58
		v4 = ad7676_calculate_output(ad7676_data->data_buf[(tmp_ptr + i)%ad7676_data->data_ptr_max][3]);
 800283a:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <ad7676_display_samples+0x208>)
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002842:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002846:	4413      	add	r3, r2
 8002848:	4a48      	ldr	r2, [pc, #288]	@ (800296c <ad7676_display_samples+0x208>)
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 8002850:	fb93 f0f2 	sdiv	r0, r3, r2
 8002854:	fb00 f202 	mul.w	r2, r0, r2
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	895b      	ldrh	r3, [r3, #10]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fec1 	bl	80025e8 <ad7676_calculate_output>
 8002866:	6578      	str	r0, [r7, #84]	@ 0x54
		sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 8002868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800286a:	4a43      	ldr	r2, [pc, #268]	@ (8002978 <ad7676_display_samples+0x214>)
 800286c:	fb82 1203 	smull	r1, r2, r2, r3
 8002870:	1192      	asrs	r2, r2, #6
 8002872:	17db      	asrs	r3, r3, #31
 8002874:	eba2 0e03 	sub.w	lr, r2, r3
				v1/1000,abs(v1%1000),
 8002878:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800287a:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <ad7676_display_samples+0x214>)
 800287c:	fb83 1302 	smull	r1, r3, r3, r2
 8002880:	1199      	asrs	r1, r3, #6
 8002882:	17d3      	asrs	r3, r2, #31
 8002884:	1acb      	subs	r3, r1, r3
 8002886:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	1ad3      	subs	r3, r2, r3
		sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 8002890:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
 8002894:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
 8002898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800289a:	4a37      	ldr	r2, [pc, #220]	@ (8002978 <ad7676_display_samples+0x214>)
 800289c:	fb82 1203 	smull	r1, r2, r2, r3
 80028a0:	1192      	asrs	r2, r2, #6
 80028a2:	17db      	asrs	r3, r3, #31
 80028a4:	1ad1      	subs	r1, r2, r3
				v2/1000,abs(v2%1000),
 80028a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80028a8:	4b33      	ldr	r3, [pc, #204]	@ (8002978 <ad7676_display_samples+0x214>)
 80028aa:	fb83 0302 	smull	r0, r3, r3, r2
 80028ae:	1198      	asrs	r0, r3, #6
 80028b0:	17d3      	asrs	r3, r2, #31
 80028b2:	1ac3      	subs	r3, r0, r3
 80028b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028b8:	fb00 f303 	mul.w	r3, r0, r3
 80028bc:	1ad3      	subs	r3, r2, r3
		sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 80028be:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80028c2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80028c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002978 <ad7676_display_samples+0x214>)
 80028ca:	fb82 4203 	smull	r4, r2, r2, r3
 80028ce:	1192      	asrs	r2, r2, #6
 80028d0:	17db      	asrs	r3, r3, #31
 80028d2:	1ad4      	subs	r4, r2, r3
				v3/1000,abs(v3%1000),
 80028d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028d6:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <ad7676_display_samples+0x214>)
 80028d8:	fb83 5302 	smull	r5, r3, r3, r2
 80028dc:	119d      	asrs	r5, r3, #6
 80028de:	17d3      	asrs	r3, r2, #31
 80028e0:	1aeb      	subs	r3, r5, r3
 80028e2:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 80028e6:	fb05 f303 	mul.w	r3, r5, r3
 80028ea:	1ad3      	subs	r3, r2, r3
		sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 80028ec:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 80028f0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80028f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f6:	4a20      	ldr	r2, [pc, #128]	@ (8002978 <ad7676_display_samples+0x214>)
 80028f8:	fb82 6203 	smull	r6, r2, r2, r3
 80028fc:	1192      	asrs	r2, r2, #6
 80028fe:	17db      	asrs	r3, r3, #31
 8002900:	1ad6      	subs	r6, r2, r3
				v4/1000,abs(v4%1000)
 8002902:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002904:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <ad7676_display_samples+0x214>)
 8002906:	fb83 c302 	smull	ip, r3, r3, r2
 800290a:	ea4f 1ca3 	mov.w	ip, r3, asr #6
 800290e:	17d3      	asrs	r3, r2, #31
 8002910:	ebac 0303 	sub.w	r3, ip, r3
 8002914:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 8002918:	fb0c f303 	mul.w	r3, ip, r3
 800291c:	1ad3      	subs	r3, r2, r3
		sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 800291e:	2b00      	cmp	r3, #0
 8002920:	bfb8      	it	lt
 8002922:	425b      	neglt	r3, r3
 8002924:	f107 0c14 	add.w	ip, r7, #20
 8002928:	9305      	str	r3, [sp, #20]
 800292a:	9604      	str	r6, [sp, #16]
 800292c:	9503      	str	r5, [sp, #12]
 800292e:	9402      	str	r4, [sp, #8]
 8002930:	9001      	str	r0, [sp, #4]
 8002932:	9100      	str	r1, [sp, #0]
 8002934:	4643      	mov	r3, r8
 8002936:	4672      	mov	r2, lr
 8002938:	4910      	ldr	r1, [pc, #64]	@ (800297c <ad7676_display_samples+0x218>)
 800293a:	4660      	mov	r0, ip
 800293c:	f00a fb44 	bl	800cfc8 <siprintf>
				);
		displayFunction(buffer);
 8002940:	f107 0214 	add.w	r2, r7, #20
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4610      	mov	r0, r2
 8002948:	4798      	blx	r3
	for(uint16_t i=0; i<awaited_samples; i++){
 800294a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800294e:	3301      	adds	r3, #1
 8002950:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002954:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	429a      	cmp	r2, r3
 800295c:	f4ff af28 	bcc.w	80027b0 <ad7676_display_samples+0x4c>
	}
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3768      	adds	r7, #104	@ 0x68
 8002966:	46bd      	mov	sp, r7
 8002968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800296c:	200006b4 	.word	0x200006b4
 8002970:	200006b8 	.word	0x200006b8
 8002974:	0800f53c 	.word	0x0800f53c
 8002978:	10624dd3 	.word	0x10624dd3
 800297c:	0800f578 	.word	0x0800f578

08002980 <ad7676_send_samples>:

void ad7676_send_samples(uint16_t awaited_samples, uint16_t* received_samples, UART_HandleTypeDef* huart){
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	81fb      	strh	r3, [r7, #14]
    uint16_t tmp_ptr = ad7676_data->data_ptr - awaited_samples;
 800298e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <ad7676_send_samples+0x8c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 2644 	ldrh.w	r2, [r3, #1604]	@ 0x644
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	83fb      	strh	r3, [r7, #30]
    collect_data = false;
 800299c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <ad7676_send_samples+0x90>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    *received_samples = 0;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]

    for(uint16_t i = 0; i < awaited_samples; i++){
 80029a8:	2300      	movs	r3, #0
 80029aa:	83bb      	strh	r3, [r7, #28]
 80029ac:	e025      	b.n	80029fa <ad7676_send_samples+0x7a>
        uint8_t frame[10]; // 8 bytes for data + 1 for the null terminator

        // Copy 8 bytes directly from the data buffer
        // Make sure to specify the number of bytes (4 channels x 2 bytes)
        memcpy(frame, &i, 2);
 80029ae:	8bbb      	ldrh	r3, [r7, #28]
 80029b0:	823b      	strh	r3, [r7, #16]
        memcpy(frame+2, &(ad7676_data->data_buf[(tmp_ptr + i) % ad7676_data->data_ptr_max]), 8);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	3302      	adds	r3, #2
 80029b8:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <ad7676_send_samples+0x8c>)
 80029ba:	6810      	ldr	r0, [r2, #0]
 80029bc:	8bfa      	ldrh	r2, [r7, #30]
 80029be:	8bb9      	ldrh	r1, [r7, #28]
 80029c0:	440a      	add	r2, r1
 80029c2:	4912      	ldr	r1, [pc, #72]	@ (8002a0c <ad7676_send_samples+0x8c>)
 80029c4:	6809      	ldr	r1, [r1, #0]
 80029c6:	f8b1 1646 	ldrh.w	r1, [r1, #1606]	@ 0x646
 80029ca:	fb92 f4f1 	sdiv	r4, r2, r1
 80029ce:	fb04 f101 	mul.w	r1, r4, r1
 80029d2:	1a52      	subs	r2, r2, r1
 80029d4:	00d2      	lsls	r2, r2, #3
 80029d6:	4402      	add	r2, r0
 80029d8:	1d11      	adds	r1, r2, #4
 80029da:	2208      	movs	r2, #8
 80029dc:	4618      	mov	r0, r3
 80029de:	f00a fc98 	bl	800d312 <memcpy>
//        frame[10] = '\n'; // Null-terminate the string (optional if displayFunction expects a C-string)
        HAL_UART_Transmit(huart, frame, 10, 1000);
 80029e2:	f107 0110 	add.w	r1, r7, #16
 80029e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ea:	220a      	movs	r2, #10
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f005 f887 	bl	8007b00 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < awaited_samples; i++){
 80029f2:	8bbb      	ldrh	r3, [r7, #28]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	83bb      	strh	r3, [r7, #28]
 80029fa:	8bbb      	ldrh	r3, [r7, #28]
 80029fc:	89fa      	ldrh	r2, [r7, #14]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d8d5      	bhi.n	80029ae <ad7676_send_samples+0x2e>
    }

    // Send termination frame
//    displayFunction("END\n\r");
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	3724      	adds	r7, #36	@ 0x24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	200006b4 	.word	0x200006b4
 8002a10:	200006b8 	.word	0x200006b8

08002a14 <ad7676_start_conversion>:
	}
	ad7676_data->data_ptr = 0;
}

void ad7676_start_conversion()
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
	AD7676_CNVST_OFF;
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a20:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <ad7676_start_conversion+0x3c>)
 8002a22:	f002 f837 	bl	8004a94 <HAL_GPIO_WritePin>
	AD7676_CONVST_DELAY;
 8002a26:	2300      	movs	r3, #0
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	e003      	b.n	8002a34 <ad7676_start_conversion+0x20>
 8002a2c:	bf00      	nop
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	3301      	adds	r3, #1
 8002a32:	71fb      	strb	r3, [r7, #7]
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d9f8      	bls.n	8002a2c <ad7676_start_conversion+0x18>
	AD7676_CNVST_ON;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <ad7676_start_conversion+0x3c>)
 8002a42:	f002 f827 	bl	8004a94 <HAL_GPIO_WritePin>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	48000800 	.word	0x48000800

08002a54 <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0e1b      	lsrs	r3, r3, #24
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a92:	f001 ffff 	bl	8004a94 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	f107 0110 	add.w	r1, r7, #16
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	f003 fc43 	bl	800632e <HAL_SPI_Transmit>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab6:	f001 ffed 	bl	8004a94 <HAL_GPIO_WritePin>

	return ret;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ace:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 8002ad2:	f107 0108 	add.w	r1, r7, #8
 8002ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ada:	4608      	mov	r0, r1
 8002adc:	f001 f8c6 	bl	8003c6c <no_os_do_div>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 8002ae8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	060b      	lsls	r3, r1, #24
 8002af6:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8002afa:	0602      	lsls	r2, r0, #24
 8002afc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8002b00:	f107 0110 	add.w	r1, r7, #16
 8002b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b08:	4608      	mov	r0, r1
 8002b0a:	f001 f8af 	bl	8003c6c <no_os_do_div>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	601a      	str	r2, [r3, #0]

	*integer = vco;
 8002b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8002b1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b24:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8002b2c:	e009      	b.n	8002b42 <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	085a      	lsrs	r2, r3, #1
 8002b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b36:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	085a      	lsrs	r2, r3, #1
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 8002b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3f0      	bcc.n	8002b2e <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f001 f860 	bl	8003c1c <no_os_greatest_common_divisor>
 8002b5c:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6a:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	601a      	str	r2, [r3, #0]

	if (*mod2 < 2) *mod2 = 2;
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d802      	bhi.n	8002b88 <adf5355_pll_fract_n_compute+0xc4>
 8002b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <adf5355_calc_reg0_to_2>:

/*Private static functions*/

static uint32_t adf5355_calc_reg0_to_2(struct adf5355_dev *dev, uint8_t autocalc_en){
 8002b90:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002b94:	b08a      	sub	sp, #40	@ 0x28
 8002b96:	af06      	add	r7, sp, #24
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	70f9      	strb	r1, [r7, #3]

	uint32_t tmp_cp_bleed;
	bool prescaler;
//	bool cp_neg_bleed_en; //It might be unused, need to examine it

	adf5355_pll_fract_n_compute(dev->freq_req, dev->fpfd, &dev->integer, &dev->fract1,
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	e9d1 bc10 	ldrd	fp, ip, [r1, #64]	@ 0x40
 8002ba2:	687c      	ldr	r4, [r7, #4]
 8002ba4:	6ea4      	ldr	r4, [r4, #104]	@ 0x68
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	4622      	mov	r2, r4
 8002baa:	462b      	mov	r3, r5
 8002bac:	687c      	ldr	r4, [r7, #4]
 8002bae:	346c      	adds	r4, #108	@ 0x6c
 8002bb0:	687d      	ldr	r5, [r7, #4]
 8002bb2:	3570      	adds	r5, #112	@ 0x70
 8002bb4:	687e      	ldr	r6, [r7, #4]
 8002bb6:	3674      	adds	r6, #116	@ 0x74
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	3178      	adds	r1, #120	@ 0x78
 8002bbc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bc0:	9004      	str	r0, [sp, #16]
 8002bc2:	9103      	str	r1, [sp, #12]
 8002bc4:	9602      	str	r6, [sp, #8]
 8002bc6:	9501      	str	r5, [sp, #4]
 8002bc8:	9400      	str	r4, [sp, #0]
 8002bca:	4658      	mov	r0, fp
 8002bcc:	4661      	mov	r1, ip
 8002bce:	f7ff ff79 	bl	8002ac4 <adf5355_pll_fract_n_compute>
						&dev->fract2, &dev->mod2, ADF5355_MAX_MODULUS2);

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd6:	2b4a      	cmp	r3, #74	@ 0x4a
 8002bd8:	bf8c      	ite	hi
 8002bda:	2301      	movhi	r3, #1
 8002bdc:	2300      	movls	r3, #0
 8002bde:	72fb      	strb	r3, [r7, #11]
//	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
//		cp_neg_bleed_en = false;
//	else
//		cp_neg_bleed_en = dev->cp_neg_bleed_en;

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d003      	beq.n	8002bf0 <adf5355_calc_reg0_to_2+0x60>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	791b      	ldrb	r3, [r3, #4]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d113      	bne.n	8002c18 <adf5355_calc_reg0_to_2+0x88>
		tmp_cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca8 <adf5355_calc_reg0_to_2+0x118>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8002c00:	fb03 f202 	mul.w	r2, r3, r2
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	0b9b      	lsrs	r3, r3, #14
 8002c0e:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <adf5355_calc_reg0_to_2+0x11c>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e016      	b.n	8002c46 <adf5355_calc_reg0_to_2+0xb6>
	} else {
		tmp_cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c1c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002c20:	fb03 f202 	mul.w	r2, r3, r2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c28:	f240 1177 	movw	r1, #375	@ 0x177
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c38:	f240 1177 	movw	r1, #375	@ 0x177
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	60fb      	str	r3, [r7, #12]
	}

	tmp_cp_bleed = no_os_clamp(tmp_cp_bleed, 1U, 255U);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d904      	bls.n	8002c56 <adf5355_calc_reg0_to_2+0xc6>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2bff      	cmp	r3, #255	@ 0xff
 8002c50:	bf28      	it	cs
 8002c52:	23ff      	movcs	r3, #255	@ 0xff
 8002c54:	e000      	b.n	8002c58 <adf5355_calc_reg0_to_2+0xc8>
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5e:	011a      	lsls	r2, r3, #4
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <adf5355_calc_reg0_to_2+0x120>)
 8002c62:	4013      	ands	r3, r2
					ADF5355_REG0_PRESCALER(prescaler) |
 8002c64:	7afa      	ldrb	r2, [r7, #11]
 8002c66:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8002c68:	431a      	orrs	r2, r3
					ADF5355_REG0_AUTOCAL(autocalc_en); //autocalibration needs to be disabled
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	055b      	lsls	r3, r3, #21
					ADF5355_REG0_PRESCALER(prescaler) |
 8002c6e:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c7e:	f023 030f 	bic.w	r3, r3, #15
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c8a:	011a      	lsls	r2, r3, #4
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <adf5355_calc_reg0_to_2+0x124>)
 8002c8e:	4013      	ands	r3, r2
					ADF5355_REG2_FRAC2(dev->fract2);
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c94:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]
	return tmp_cp_bleed;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002ca8:	10624dd3 	.word	0x10624dd3
 8002cac:	00136b0b 	.word	0x00136b0b
 8002cb0:	000ffff0 	.word	0x000ffff0
 8002cb4:	0003fff0 	.word	0x0003fff0

08002cb8 <adf5355_calc_pfd>:

static void adf5355_calc_pfd(struct adf5355_dev *dev, uint8_t counter_reset)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	dev->ref_div_factor = 0;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <adf5355_calc_pfd+0x36>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e000      	b.n	8002cf0 <adf5355_calc_pfd+0x38>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	f8b2 208e 	ldrh.w	r2, [r2, #142]	@ 0x8e
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	d001      	beq.n	8002d0a <adf5355_calc_pfd+0x52>
 8002d06:	2202      	movs	r2, #2
 8002d08:	e000      	b.n	8002d0c <adf5355_calc_pfd+0x54>
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8002d10:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc8 <adf5355_calc_pfd+0x110>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d8d4      	bhi.n	8002ccc <adf5355_calc_pfd+0x14>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d26:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 8002d2a:	4b28      	ldr	r3, [pc, #160]	@ (8002dcc <adf5355_calc_pfd+0x114>)
 8002d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d30:	1ad2      	subs	r2, r2, r3
 8002d32:	0852      	lsrs	r2, r2, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <adf5355_calc_pfd+0x92>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	bf28      	it	cs
 8002d46:	230f      	movcs	r3, #15
 8002d48:	e000      	b.n	8002d4c <adf5355_calc_pfd+0x94>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	011b      	lsls	r3, r3, #4
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	f892 2087 	ldrb.w	r2, [r2, #135]	@ 0x87
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	d101      	bne.n	8002d60 <adf5355_calc_pfd+0xa8>
 8002d5c:	2280      	movs	r2, #128	@ 0x80
 8002d5e:	e000      	b.n	8002d62 <adf5355_calc_pfd+0xaa>
 8002d60:	2200      	movs	r2, #0
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 8002d62:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002d6a:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8002d6c:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002d74:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8002d76:	4313      	orrs	r3, r2
 8002d78:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	029b      	lsls	r3, r3, #10
 8002d7e:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8002d82:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8002d8a:	03d9      	lsls	r1, r3, #15
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <adf5355_calc_pfd+0x118>)
 8002d8e:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 8002d90:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002d98:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8002d9a:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8002da2:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8002da4:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8002dac:	06db      	lsls	r3, r3, #27
 8002dae:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	619a      	str	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	047868c0 	.word	0x047868c0
 8002dcc:	a01a01a1 	.word	0xa01a01a1
 8002dd0:	01ff8000 	.word	0x01ff8000

08002dd4 <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d003      	beq.n	8002df0 <adf5355_reg_config+0x1c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	791b      	ldrb	r3, [r3, #4]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d101      	bne.n	8002df4 <adf5355_reg_config+0x20>
 8002df0:	230d      	movs	r3, #13
 8002df2:	e000      	b.n	8002df6 <adf5355_reg_config+0x22>
 8002df4:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 8002df6:	613b      	str	r3, [r7, #16]

	if ((sync_all || !dev->all_synced) && dev->fpfd <= 75000000) {
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <adf5355_reg_config+0x38>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	795b      	ldrb	r3, [r3, #5]
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d022      	beq.n	8002e52 <adf5355_reg_config+0x7e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e10:	4a7c      	ldr	r2, [pc, #496]	@ (8003004 <adf5355_reg_config+0x230>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d81d      	bhi.n	8002e52 <adf5355_reg_config+0x7e>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e013      	b.n	8002e44 <adf5355_reg_config+0x70>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	b2d9      	uxtb	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	3202      	adds	r2, #2
 8002e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fe11 	bl	8002a54 <adf5355_write>
 8002e32:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <adf5355_reg_config+0x6a>
				return ret;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	e0de      	b.n	8002ffc <adf5355_reg_config+0x228>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e8      	bne.n	8002e1c <adf5355_reg_config+0x48>
		}

		dev->all_synced = true;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	715a      	strb	r2, [r3, #5]
 8002e50:	e066      	b.n	8002f20 <adf5355_reg_config+0x14c>

	}
	else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	791b      	ldrb	r3, [r3, #4]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d003      	beq.n	8002e62 <adf5355_reg_config+0x8e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	791b      	ldrb	r3, [r3, #4]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d10c      	bne.n	8002e7c <adf5355_reg_config+0xa8>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e66:	461a      	mov	r2, r3
 8002e68:	210d      	movs	r1, #13
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fdf2 	bl	8002a54 <adf5355_write>
 8002e70:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <adf5355_reg_config+0xa8>
				return ret;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	e0bf      	b.n	8002ffc <adf5355_reg_config+0x228>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	461a      	mov	r2, r3
 8002e82:	210a      	movs	r1, #10
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fde5 	bl	8002a54 <adf5355_write>
 8002e8a:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <adf5355_reg_config+0xc2>
			return ret;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	e0b2      	b.n	8002ffc <adf5355_reg_config+0x228>
		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
		if (ret != 0)
			return ret;
		*/
		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fdd6 	bl	8002a54 <adf5355_write>
 8002ea8:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <adf5355_reg_config+0xe0>
			return ret;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	e0a3      	b.n	8002ffc <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2102      	movs	r1, #2
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fdc9 	bl	8002a54 <adf5355_write>
 8002ec2:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <adf5355_reg_config+0xfa>
			return ret;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	e096      	b.n	8002ffc <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fdbc 	bl	8002a54 <adf5355_write>
 8002edc:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <adf5355_reg_config+0x114>
			return ret;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	e089      	b.n	8002ffc <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 8002eec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fdad 	bl	8002a54 <adf5355_write>
 8002efa:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <adf5355_reg_config+0x132>
			return ret;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	e07a      	b.n	8002ffc <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]); //counter reset disabled by default
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2104      	movs	r1, #4
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fda0 	bl	8002a54 <adf5355_write>
 8002f14:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <adf5355_reg_config+0x14c>
			return ret;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	e06d      	b.n	8002ffc <adf5355_reg_config+0x228>
	}

	if (dev->delay_us > 999)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f2a:	d314      	bcc.n	8002f56 <adf5355_reg_config+0x182>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f32:	4a35      	ldr	r2, [pc, #212]	@ (8003008 <adf5355_reg_config+0x234>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd faf2 	bl	8000524 <__aeabi_ui2d>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7fd fe3e 	bl	8000bc8 <__aeabi_d2uiz>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe f800 	bl	8000f54 <delay_ms>
 8002f54:	e005      	b.n	8002f62 <adf5355_reg_config+0x18e>
	}
	else
	{
		delay_us(dev->delay_us);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd ffd5 	bl	8000f0c <delay_us>
	}

	if (dev->fpfd > 75000000) { //needs to be verified
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f66:	4a27      	ldr	r2, [pc, #156]	@ (8003004 <adf5355_reg_config+0x230>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d93f      	bls.n	8002fec <adf5355_reg_config+0x218>
		ret = adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	461a      	mov	r2, r3
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fd6d 	bl	8002a54 <adf5355_write>
 8002f7a:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <adf5355_reg_config+0x1b2>
			return ret;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	e03a      	b.n	8002ffc <adf5355_reg_config+0x228>

		dev->ref_div2_en = false;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

		adf5355_calc_pfd(dev, 0);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fe91 	bl	8002cb8 <adf5355_calc_pfd>

		adf5355_calc_reg0_to_2(dev, 0);
 8002f96:	2100      	movs	r1, #0
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fdf9 	bl	8002b90 <adf5355_calc_reg0_to_2>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fd54 	bl	8002a54 <adf5355_write>
 8002fac:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <adf5355_reg_config+0x1e4>
			return ret;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	e021      	b.n	8002ffc <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[2]);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fd47 	bl	8002a54 <adf5355_write>
 8002fc6:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <adf5355_reg_config+0x1fe>
			return ret;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	e014      	b.n	8002ffc <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[1]);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2101      	movs	r1, #1
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fd3a 	bl	8002a54 <adf5355_write>
 8002fe0:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <adf5355_reg_config+0x218>
			return ret;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	e007      	b.n	8002ffc <adf5355_reg_config+0x228>
		//REGs 0 for halved, 4 for desired, then 2, 1, 0
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fd2d 	bl	8002a54 <adf5355_write>
 8002ffa:	4603      	mov	r3, r0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	047868c0 	.word	0x047868c0
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <adf5355_change_freq>:

int32_t adf5355_change_freq(struct adf5355_dev *dev, uint64_t freq){
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	e9c7 2300 	strd	r2, r3, [r7]
 * Reg0 (autocal en) for halved fpfd
 * Reg4 for desired fpdf with RDIV dis
 * Reg2-0 (autocal dis)

*/
	dev->freq_req = freq;
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800301e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	4a0c      	ldr	r2, [pc, #48]	@ (8003058 <adf5355_change_freq+0x4c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d903      	bls.n	8003034 <adf5355_change_freq+0x28>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	adf5355_calc_pfd(dev, 1);
 8003034:	2101      	movs	r1, #1
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f7ff fe3e 	bl	8002cb8 <adf5355_calc_pfd>
	adf5355_calc_reg0_to_2(dev, 1); //We set autocal as default, first it is negated, then send as default and then negated again
 800303c:	2101      	movs	r1, #1
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fda6 	bl	8002b90 <adf5355_calc_reg0_to_2>

	return adf5355_reg_config(dev, false);
 8003044:	2100      	movs	r1, #0
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fec4 	bl	8002dd4 <adf5355_reg_config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	047868c0 	.word	0x047868c0

0800305c <adf5355_set_power>:

int32_t adf5355_set_power(struct adf5355_dev *dev, bool en, uint8_t power){
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
 8003068:	4613      	mov	r3, r2
 800306a:	70bb      	strb	r3, [r7, #2]

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 800306c:	78bb      	ldrb	r3, [r7, #2]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	f003 0230 	and.w	r2, r3, #48	@ 0x30
			ADF5355_REG6_RF_OUT_EN(en) |
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8003078:	431a      	orrs	r2, r3
			ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	025b      	lsls	r3, r3, #9
			ADF5355_REG6_RF_OUT_EN(en) |
 8003088:	431a      	orrs	r2, r3
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8003090:	02db      	lsls	r3, r3, #11
			ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8003092:	4313      	orrs	r3, r2
 8003094:	461a      	mov	r2, r3
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8003096:	4b21      	ldr	r3, [pc, #132]	@ (800311c <adf5355_set_power+0xc0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	035b      	lsls	r3, r3, #13
 800309c:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80030a0:	431a      	orrs	r2, r3
			ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80030a8:	055b      	lsls	r3, r3, #21
 80030aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 80030ae:	431a      	orrs	r2, r3
			ADF5355_REG6_FEEDBACK_FUND(1) |
			ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	791b      	ldrb	r3, [r3, #4]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d104      	bne.n	80030c2 <adf5355_set_power+0x66>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 80030be:	065b      	lsls	r3, r3, #25
 80030c0:	e000      	b.n	80030c4 <adf5355_set_power+0x68>
 80030c2:	2300      	movs	r3, #0
			ADF5355_REG6_FEEDBACK_FUND(1) |
 80030c4:	431a      	orrs	r2, r3
					dev->outb_sel_fund : 0) |
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80030cc:	075b      	lsls	r3, r3, #29
					dev->outb_sel_fund : 0) |
 80030ce:	431a      	orrs	r2, r3
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030d6:	079b      	lsls	r3, r3, #30
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 80030d8:	431a      	orrs	r2, r3
			ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	791b      	ldrb	r3, [r3, #4]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d003      	beq.n	80030ea <adf5355_set_power+0x8e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	791b      	ldrb	r3, [r3, #4]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d104      	bne.n	80030f4 <adf5355_set_power+0x98>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80030f0:	07db      	lsls	r3, r3, #31
 80030f2:	e000      	b.n	80030f6 <adf5355_set_power+0x9a>
 80030f4:	2300      	movs	r3, #0
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 80030f6:	4313      	orrs	r3, r2
					|| (dev->dev_id == ADF5356)) ?
					dev->cp_bleed_current_polarity_en : 0) |
 80030f8:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 80030fc:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6213      	str	r3, [r2, #32]
			ADF5355_REG6_DEFAULT;

	return adf5355_write(dev, ADF5355_REG(6), dev->regs[6]);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	461a      	mov	r2, r3
 800310a:	2106      	movs	r1, #6
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fca1 	bl	8002a54 <adf5355_write>
 8003112:	4603      	mov	r3, r0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200006c0 	.word	0x200006c0

08003120 <adf5355_set_muxout>:

int32_t adf5355_set_muxout(struct adf5355_dev *dev, enum adf5355_mux_out_sel mux_out){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]

	dev->regs[ADF5355_REG(4)] = (dev->regs[ADF5355_REG(4)] & ~ADF5355_REG4_MUXOUT(7)) | ADF5355_REG4_MUXOUT(mux_out);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f023 5260 	bic.w	r2, r3, #939524096	@ 0x38000000
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	06db      	lsls	r3, r3, #27
 8003138:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]

	return adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	461a      	mov	r2, r3
 8003148:	2104      	movs	r1, #4
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fc82 	bl	8002a54 <adf5355_write>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 800315c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	e9c7 2300 	strd	r2, r3, [r7]

	if (chan > dev->num_channels)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003170:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003174:	429a      	cmp	r2, r3
 8003176:	d902      	bls.n	800317e <adf5355_set_freq+0x22>
		return -1;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e12d      	b.n	80033da <adf5355_set_freq+0x27e>

	if (chan == 0) {
 800317e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d13c      	bne.n	8003200 <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800318c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003190:	4290      	cmp	r0, r2
 8003192:	eb71 0303 	sbcs.w	r3, r1, r3
 8003196:	d308      	bcc.n	80031aa <adf5355_set_freq+0x4e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800319e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031a2:	4290      	cmp	r0, r2
 80031a4:	eb71 0303 	sbcs.w	r3, r1, r3
 80031a8:	d202      	bcs.n	80031b0 <adf5355_set_freq+0x54>
			return -EINVAL;
 80031aa:	f06f 0315 	mvn.w	r3, #21
 80031ae:	e114      	b.n	80033da <adf5355_set_freq+0x27e>

		dev->rf_div_sel = 0;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80031c2:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 80031ca:	e00f      	b.n	80031ec <adf5355_set_freq+0x90>
			freq <<= 1;
 80031cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d0:	eb12 0802 	adds.w	r8, r2, r2
 80031d4:	eb43 0903 	adc.w	r9, r3, r3
 80031d8:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		while (freq < dev->min_vco_freq) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80031f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f6:	4290      	cmp	r0, r2
 80031f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80031fc:	d3e6      	bcc.n	80031cc <adf5355_set_freq+0x70>
 80031fe:	e079      	b.n	80032f4 <adf5355_set_freq+0x198>
		}
	} else if (dev->dev_id == ADF4356) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d14d      	bne.n	80032a4 <adf5355_set_freq+0x148>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800320e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003212:	4290      	cmp	r0, r2
 8003214:	eb71 0303 	sbcs.w	r3, r1, r3
 8003218:	d310      	bcc.n	800323c <adf5355_set_freq+0xe0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8003220:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003224:	4290      	cmp	r0, r2
 8003226:	eb71 0303 	sbcs.w	r3, r1, r3
 800322a:	d307      	bcc.n	800323c <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <adf5355_set_freq+0xe6>
			return -EINVAL;
 800323c:	f06f 0315 	mvn.w	r3, #21
 8003240:	e0cb      	b.n	80033da <adf5355_set_freq+0x27e>

		dev->rf_div_sel = 0;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8003254:	f083 0301 	eor.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800325c:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->out_power);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 800326a:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8003270:	e00e      	b.n	8003290 <adf5355_set_freq+0x134>
			freq <<= 1;
 8003272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003276:	1894      	adds	r4, r2, r2
 8003278:	eb43 0503 	adc.w	r5, r3, r3
 800327c:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003286:	3301      	adds	r3, #1
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		while (freq < dev->min_vco_freq) {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8003296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329a:	4290      	cmp	r0, r2
 800329c:	eb71 0303 	sbcs.w	r3, r1, r3
 80032a0:	d3e7      	bcc.n	8003272 <adf5355_set_freq+0x116>
 80032a2:	e027      	b.n	80032f4 <adf5355_set_freq+0x198>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 80032a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032a8:	494e      	ldr	r1, [pc, #312]	@ (80033e4 <adf5355_set_freq+0x288>)
 80032aa:	428a      	cmp	r2, r1
 80032ac:	f173 0303 	sbcs.w	r3, r3, #3
 80032b0:	d206      	bcs.n	80032c0 <adf5355_set_freq+0x164>
 80032b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b6:	494c      	ldr	r1, [pc, #304]	@ (80033e8 <adf5355_set_freq+0x28c>)
 80032b8:	428a      	cmp	r2, r1
 80032ba:	f173 0301 	sbcs.w	r3, r3, #1
 80032be:	d202      	bcs.n	80032c6 <adf5355_set_freq+0x16a>
			return -EINVAL;
 80032c0:	f06f 0315 	mvn.w	r3, #21
 80032c4:	e089      	b.n	80033da <adf5355_set_freq+0x27e>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80032d0:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	621a      	str	r2, [r3, #32]

		dev->freq_req >>= 1;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	0842      	lsrs	r2, r0, #1
 80032e8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80032ec:	084b      	lsrs	r3, r1, #1
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	}

	cp_bleed = adf5355_calc_reg0_to_2(dev, 1);
 80032f4:	2101      	movs	r1, #1
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fc4a 	bl	8002b90 <adf5355_calc_reg0_to_2>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a3b      	ldr	r2, [pc, #236]	@ (80033ec <adf5355_set_freq+0x290>)
 8003300:	6013      	str	r3, [r2, #0]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	791b      	ldrb	r3, [r3, #4]
 8003306:	2b04      	cmp	r3, #4
 8003308:	d003      	beq.n	8003312 <adf5355_set_freq+0x1b6>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d10c      	bne.n	800332c <adf5355_set_freq+0x1d0>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003316:	0b9b      	lsrs	r3, r3, #14
 8003318:	011a      	lsls	r2, r3, #4
 800331a:	4b35      	ldr	r3, [pc, #212]	@ (80033f0 <adf5355_set_freq+0x294>)
 800331c:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003322:	0b92      	lsrs	r2, r2, #14
 8003324:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8003326:	431a      	orrs	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->out_power) |
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800333e:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->out_power) |
 8003340:	431a      	orrs	r2, r3
					ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	025b      	lsls	r3, r3, #9
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8003350:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8003358:	02db      	lsls	r3, r3, #11
					ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 800335a:	4313      	orrs	r3, r2
 800335c:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 800335e:	4b23      	ldr	r3, [pc, #140]	@ (80033ec <adf5355_set_freq+0x290>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	035b      	lsls	r3, r3, #13
 8003364:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8003368:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003370:	055b      	lsls	r3, r3, #21
 8003372:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8003376:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	791b      	ldrb	r3, [r3, #4]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d104      	bne.n	800338a <adf5355_set_freq+0x22e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003386:	065b      	lsls	r3, r3, #25
 8003388:	e000      	b.n	800338c <adf5355_set_freq+0x230>
 800338a:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 800338c:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003394:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 8003396:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800339e:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 80033a0:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	791b      	ldrb	r3, [r3, #4]
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <adf5355_set_freq+0x256>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	791b      	ldrb	r3, [r3, #4]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d104      	bne.n	80033bc <adf5355_set_freq+0x260>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80033b8:	07db      	lsls	r3, r3, #31
 80033ba:	e000      	b.n	80033be <adf5355_set_freq+0x262>
 80033bc:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 80033be:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 80033c0:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 80033c4:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->out_power) |
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	return adf5355_reg_config(dev, dev->all_synced);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	795b      	ldrb	r3, [r3, #5]
 80033d0:	4619      	mov	r1, r3
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff fcfe 	bl	8002dd4 <adf5355_reg_config>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033e4:	2a9f8801 	.word	0x2a9f8801
 80033e8:	954fc400 	.word	0x954fc400
 80033ec:	200006c0 	.word	0x200006c0
 80033f0:	0003fff0 	.word	0x0003fff0

080033f4 <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
	adf5355_calc_pfd(dev, 0);
 80033fc:	2100      	movs	r1, #0
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fc5a 	bl	8002cb8 <adf5355_calc_pfd>

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a67      	ldr	r2, [pc, #412]	@ (80035a4 <adf5355_setup+0x1b0>)
 8003408:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(1) |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a66      	ldr	r2, [pc, #408]	@ (80035a8 <adf5355_setup+0x1b4>)
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(1) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 8003414:	2b04      	cmp	r3, #4
 8003416:	d003      	beq.n	8003420 <adf5355_setup+0x2c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	791b      	ldrb	r3, [r3, #4]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d101      	bne.n	8003424 <adf5355_setup+0x30>
 8003420:	4a62      	ldr	r2, [pc, #392]	@ (80035ac <adf5355_setup+0x1b8>)
 8003422:	e000      	b.n	8003426 <adf5355_setup+0x32>
 8003424:	4a62      	ldr	r2, [pc, #392]	@ (80035b0 <adf5355_setup+0x1bc>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	uint32_t tmp;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342e:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 8003432:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 8003436:	4a5f      	ldr	r2, [pc, #380]	@ (80035b4 <adf5355_setup+0x1c0>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	0c9b      	lsrs	r3, r3, #18
 800343e:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d906      	bls.n	8003454 <adf5355_setup+0x60>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800344c:	4293      	cmp	r3, r2
 800344e:	bf28      	it	cs
 8003450:	4613      	movcs	r3, r2
 8003452:	e000      	b.n	8003456 <adf5355_setup+0x62>
 8003454:	2301      	movs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	039a      	lsls	r2, r3, #14
 800345c:	4b56      	ldr	r3, [pc, #344]	@ (80035b8 <adf5355_setup+0x1c4>)
 800345e:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800346a:	fb00 f202 	mul.w	r2, r0, r2
 800346e:	440a      	add	r2, r1
 8003470:	0052      	lsls	r2, r2, #1
 8003472:	1e51      	subs	r1, r2, #1
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4851      	ldr	r0, [pc, #324]	@ (80035bc <adf5355_setup+0x1c8>)
 8003478:	fb00 f202 	mul.w	r2, r0, r2
 800347c:	fbb1 f2f2 	udiv	r2, r1, r2
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8003486:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4849      	ldr	r0, [pc, #292]	@ (80035bc <adf5355_setup+0x1c8>)
 8003498:	fb00 f303 	mul.w	r3, r0, r3
 800349c:	4413      	add	r3, r2
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4846      	ldr	r0, [pc, #280]	@ (80035bc <adf5355_setup+0x1c8>)
 80034a4:	fb00 f303 	mul.w	r3, r0, r3
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	025b      	lsls	r3, r3, #9
 80034ae:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 80034b2:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	7909      	ldrb	r1, [r1, #4]
 80034be:	2904      	cmp	r1, #4
 80034c0:	d003      	beq.n	80034ca <adf5355_setup+0xd6>
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	7909      	ldrb	r1, [r1, #4]
 80034c6:	2905      	cmp	r1, #5
 80034c8:	d101      	bne.n	80034ce <adf5355_setup+0xda>
 80034ca:	493d      	ldr	r1, [pc, #244]	@ (80035c0 <adf5355_setup+0x1cc>)
 80034cc:	e000      	b.n	80034d0 <adf5355_setup+0xdc>
 80034ce:	493d      	ldr	r1, [pc, #244]	@ (80035c4 <adf5355_setup+0x1d0>)
 80034d0:	440b      	add	r3, r1
 80034d2:	1e59      	subs	r1, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d003      	beq.n	80034e4 <adf5355_setup+0xf0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d101      	bne.n	80034e8 <adf5355_setup+0xf4>
 80034e4:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <adf5355_setup+0x1cc>)
 80034e6:	e000      	b.n	80034ea <adf5355_setup+0xf6>
 80034e8:	4b36      	ldr	r3, [pc, #216]	@ (80035c4 <adf5355_setup+0x1d0>)
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 80034f0:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	4a32      	ldr	r2, [pc, #200]	@ (80035c8 <adf5355_setup+0x1d4>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	09db      	lsrs	r3, r3, #7
 8003504:	3301      	adds	r3, #1
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d904      	bls.n	800351a <adf5355_setup+0x126>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2bff      	cmp	r3, #255	@ 0xff
 8003514:	bf28      	it	cs
 8003516:	23ff      	movcs	r3, #255	@ 0xff
 8003518:	e000      	b.n	800351c <adf5355_setup+0x128>
 800351a:	2301      	movs	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	fbb2 f2f3 	udiv	r2, r2, r3
 800352c:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <adf5355_setup+0x1d8>)
 800352e:	4413      	add	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	3202      	adds	r2, #2
 800353a:	fbb1 f2f2 	udiv	r2, r1, r2
 800353e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	019b      	lsls	r3, r3, #6
 800354c:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 8003550:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8003554:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <adf5355_setup+0x1dc>)
 8003560:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <adf5355_setup+0x17e>
				      || (dev->dev_id == ADF5356))?
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d102      	bne.n	8003578 <adf5355_setup+0x184>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 8003572:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 8003576:	e000      	b.n	800357a <adf5355_setup+0x186>
 8003578:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <adf5355_setup+0x1e0>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8003590:	9100      	str	r1, [sp, #0]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fde2 	bl	800315c <adf5355_set_freq>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	00800025 	.word	0x00800025
 80035a8:	04000007 	.word	0x04000007
 80035ac:	15596568 	.word	0x15596568
 80035b0:	102d0428 	.word	0x102d0428
 80035b4:	6fd91d85 	.word	0x6fd91d85
 80035b8:	00ffc000 	.word	0x00ffc000
 80035bc:	000186a0 	.word	0x000186a0
 80035c0:	00186a00 	.word	0x00186a00
 80035c4:	00249f00 	.word	0x00249f00
 80035c8:	0a7c5ac5 	.word	0x0a7c5ac5
 80035cc:	00f423ff 	.word	0x00f423ff
 80035d0:	0061300b 	.word	0x0061300b
 80035d4:	0001041c 	.word	0x0001041c

080035d8 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 80035e2:	2198      	movs	r1, #152	@ 0x98
 80035e4:	2001      	movs	r0, #1
 80035e6:	f000 fb0b 	bl	8003c00 <no_os_calloc>
 80035ea:	60f8      	str	r0, [r7, #12]
	if (!dev)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <adf5355_init+0x20>
		return -ENOMEM;
 80035f2:	f06f 030b 	mvn.w	r3, #11
 80035f6:	e0ea      	b.n	80037ce <adf5355_init+0x1f6>

	dev->spi_desc = init_param->spi_init;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	791a      	ldrb	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	7c1a      	ldrb	r2, [r3, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7f1a      	ldrb	r2, [r3, #28]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	7f5a      	ldrb	r2, [r3, #29]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	7f9a      	ldrb	r2, [r3, #30]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	7fda      	ldrb	r2, [r3, #31]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f893 2020 	ldrb.w	r2, [r3, #32]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->out_power = init_param->out_power;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8003680:	461a      	mov	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->ref_diff_en = init_param->ref_diff_en;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->ref_doubler_en = init_param->ref_doubler_en;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->ref_div2_en = init_param->ref_div2_en;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->mux_out_sel = init_param->mux_out_sel;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	dev->outb_sel_fund = init_param->outb_sel_fund;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->num_channels = 1;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003810 <adf5355_init+0x238>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d903      	bls.n	80036ea <adf5355_init+0x112>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	switch (dev->dev_id) {
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	791b      	ldrb	r3, [r3, #4]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d85a      	bhi.n	80037a8 <adf5355_init+0x1d0>
 80036f2:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <adf5355_init+0x120>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	08003711 	.word	0x08003711
 80036fc:	08003737 	.word	0x08003737
 8003700:	0800375d 	.word	0x0800375d
 8003704:	08003783 	.word	0x08003783
 8003708:	08003711 	.word	0x08003711
 800370c:	08003711 	.word	0x08003711
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	a331      	add	r3, pc, #196	@ (adr r3, 80037d8 <adf5355_init+0x200>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 800371c:	68f9      	ldr	r1, [r7, #12]
 800371e:	a330      	add	r3, pc, #192	@ (adr r3, 80037e0 <adf5355_init+0x208>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	a32f      	add	r3, pc, #188	@ (adr r3, 80037e8 <adf5355_init+0x210>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8003734:	e038      	b.n	80037a8 <adf5355_init+0x1d0>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	a32d      	add	r3, pc, #180	@ (adr r3, 80037f0 <adf5355_init+0x218>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	a326      	add	r3, pc, #152	@ (adr r3, 80037e0 <adf5355_init+0x208>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	a325      	add	r3, pc, #148	@ (adr r3, 80037e8 <adf5355_init+0x210>)
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 800375a:	e025      	b.n	80037a8 <adf5355_init+0x1d0>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 800375c:	68f9      	ldr	r1, [r7, #12]
 800375e:	4a2d      	ldr	r2, [pc, #180]	@ (8003814 <adf5355_init+0x23c>)
 8003760:	f04f 0301 	mov.w	r3, #1
 8003764:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	a31d      	add	r3, pc, #116	@ (adr r3, 80037e0 <adf5355_init+0x208>)
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 8003774:	68f9      	ldr	r1, [r7, #12]
 8003776:	a31c      	add	r3, pc, #112	@ (adr r3, 80037e8 <adf5355_init+0x210>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8003780:	e012      	b.n	80037a8 <adf5355_init+0x1d0>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	a31c      	add	r3, pc, #112	@ (adr r3, 80037f8 <adf5355_init+0x220>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	a31b      	add	r3, pc, #108	@ (adr r3, 8003800 <adf5355_init+0x228>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	a31a      	add	r3, pc, #104	@ (adr r3, 8003808 <adf5355_init+0x230>)
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80037a6:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff fe23 	bl	80033f4 <adf5355_setup>
 80037ae:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <adf5355_init+0x1e8>
		goto error_spi;

	*device = dev;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	601a      	str	r2, [r3, #0]

	return ret;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	e006      	b.n	80037ce <adf5355_init+0x1f6>
		goto error_spi;
 80037c0:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fd89 	bl	80062de <HAL_SPI_DeInit>

	return ret;
 80037cc:	68bb      	ldr	r3, [r7, #8]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	954fc400 	.word	0x954fc400
 80037dc:	00000001 	.word	0x00000001
 80037e0:	032a9f88 	.word	0x032a9f88
 80037e4:	00000000 	.word	0x00000000
 80037e8:	caa7e200 	.word	0xcaa7e200
 80037ec:	00000000 	.word	0x00000000
 80037f0:	2a9f8800 	.word	0x2a9f8800
 80037f4:	00000003 	.word	0x00000003
 80037f8:	89640200 	.word	0x89640200
 80037fc:	00000001 	.word	0x00000001
 8003800:	0312c804 	.word	0x0312c804
 8003804:	00000000 	.word	0x00000000
 8003808:	c4b20100 	.word	0xc4b20100
 800380c:	00000000 	.word	0x00000000
 8003810:	047868c0 	.word	0x047868c0
 8003814:	0642ac00 	.word	0x0642ac00

08003818 <ADF5355_SetFrequencyOut>:

/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void* ADF5355_SetFrequencyOut(void* new_freq){
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	60fb      	str	r3, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800382c:	4293      	cmp	r3, r2
 800382e:	d803      	bhi.n	8003838 <ADF5355_SetFrequencyOut+0x20>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b63      	cmp	r3, #99	@ 0x63
 8003836:	d803      	bhi.n	8003840 <ADF5355_SetFrequencyOut+0x28>
 8003838:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <ADF5355_SetFrequencyOut+0x48>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e007      	b.n	8003850 <ADF5355_SetFrequencyOut+0x38>
	else {
		freq_out = *value;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b29a      	uxth	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <ADF5355_SetFrequencyOut+0x4c>)
 8003848:	801a      	strh	r2, [r3, #0]
		ret = true;
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <ADF5355_SetFrequencyOut+0x48>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <ADF5355_SetFrequencyOut+0x48>)
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	200006fd 	.word	0x200006fd
 8003864:	2000012c 	.word	0x2000012c

08003868 <ADF5355_SetFrequencyIn>:

void* ADF5355_SetFrequencyIn(void* new_freq){
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60fb      	str	r3, [r7, #12]
	if (*value > 200 || *value < 5) ret = false;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2bc8      	cmp	r3, #200	@ 0xc8
 800387a:	d803      	bhi.n	8003884 <ADF5355_SetFrequencyIn+0x1c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d803      	bhi.n	800388c <ADF5355_SetFrequencyIn+0x24>
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <ADF5355_SetFrequencyIn+0x44>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e007      	b.n	800389c <ADF5355_SetFrequencyIn+0x34>
	else {
		freq_in = *value;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <ADF5355_SetFrequencyIn+0x48>)
 8003894:	701a      	strb	r2, [r3, #0]
		ret = true;
 8003896:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <ADF5355_SetFrequencyIn+0x44>)
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 800389c:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <ADF5355_SetFrequencyIn+0x44>)
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200006fe 	.word	0x200006fe
 80038b0:	2000012e 	.word	0x2000012e

080038b4 <ADF5355_SetPower>:

void* ADF5355_SetPower(void* new_pow){
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	static bool ret;
	int8_t* value = (int8_t*)new_pow;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60fb      	str	r3, [r7, #12]
	if (*value > 3 || *value < 0) ret = false;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f993 3000 	ldrsb.w	r3, [r3]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	dc04      	bgt.n	80038d4 <ADF5355_SetPower+0x20>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f993 3000 	ldrsb.w	r3, [r3]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da03      	bge.n	80038dc <ADF5355_SetPower+0x28>
 80038d4:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <ADF5355_SetPower+0x48>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e007      	b.n	80038ec <ADF5355_SetPower+0x38>
	else {
		out_power = *value;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f993 2000 	ldrsb.w	r2, [r3]
 80038e2:	4b07      	ldr	r3, [pc, #28]	@ (8003900 <ADF5355_SetPower+0x4c>)
 80038e4:	701a      	strb	r2, [r3, #0]
		ret = true;
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <ADF5355_SetPower+0x48>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <ADF5355_SetPower+0x48>)
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	200006ff 	.word	0x200006ff
 8003900:	20000130 	.word	0x20000130

08003904 <ADF5355_SetCurrent>:

void* ADF5355_SetCurrent(void* new_curr){
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_curr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	60fb      	str	r3, [r7, #12]
	if (*value > 5000 || *value < 310) ret = false;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d804      	bhi.n	8003926 <ADF5355_SetCurrent+0x22>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8003924:	d203      	bcs.n	800392e <ADF5355_SetCurrent+0x2a>
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <ADF5355_SetCurrent+0x48>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e006      	b.n	800393c <ADF5355_SetCurrent+0x38>
	else {
		cp_ua = *value;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a07      	ldr	r2, [pc, #28]	@ (8003950 <ADF5355_SetCurrent+0x4c>)
 8003934:	6013      	str	r3, [r2, #0]
		ret = true;
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <ADF5355_SetCurrent+0x48>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <ADF5355_SetCurrent+0x48>)
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000700 	.word	0x20000700
 8003950:	20000134 	.word	0x20000134

08003954 <ADF5355_SetMuxOut>:

void* ADF5355_SetMuxOut(void* new_mux_out){
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	static bool ret;
	enum adf5355_mux_out_sel* value = (enum adf5355_mux_out_sel*)new_mux_out;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60fb      	str	r3, [r7, #12]
	if (*value > ADF5355_MUXOUT_DIGITAL_LOCK_DETECT || *value < ADF5355_MUXOUT_THREESTATE) ret = false;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b06      	cmp	r3, #6
 8003966:	d903      	bls.n	8003970 <ADF5355_SetMuxOut+0x1c>
 8003968:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <ADF5355_SetMuxOut+0x4c>)
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e012      	b.n	8003996 <ADF5355_SetMuxOut+0x42>
	else {
		mux_out = *value;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <ADF5355_SetMuxOut+0x50>)
 8003976:	701a      	strb	r2, [r3, #0]
		if (synced){
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <ADF5355_SetMuxOut+0x54>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <ADF5355_SetMuxOut+0x3c>
			adf5355_set_muxout(dev, mux_out);
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <ADF5355_SetMuxOut+0x58>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a07      	ldr	r2, [pc, #28]	@ (80039a4 <ADF5355_SetMuxOut+0x50>)
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fbc8 	bl	8003120 <adf5355_set_muxout>
		}
		ret = true;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <ADF5355_SetMuxOut+0x4c>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003996:	4b02      	ldr	r3, [pc, #8]	@ (80039a0 <ADF5355_SetMuxOut+0x4c>)
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000701 	.word	0x20000701
 80039a4:	20000138 	.word	0x20000138
 80039a8:	200006fc 	.word	0x200006fc
 80039ac:	200006f8 	.word	0x200006f8

080039b0 <ADF5355_Enable>:

void* ADF5355_Enable(void* state){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <ADF5355_Enable+0x24>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d003      	beq.n	80039d4 <ADF5355_Enable+0x24>
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <ADF5355_Enable+0x64>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e01a      	b.n	8003a0a <ADF5355_Enable+0x5a>
	else {
		outb_en = *value;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a18 <ADF5355_Enable+0x68>)
 80039e4:	701a      	strb	r2, [r3, #0]
		if (synced){
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <ADF5355_Enable+0x6c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <ADF5355_Enable+0x54>
			adf5355_set_power(dev, outb_en, out_power);
 80039ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <ADF5355_Enable+0x70>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <ADF5355_Enable+0x68>)
 80039f4:	7811      	ldrb	r1, [r2, #0]
 80039f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003a24 <ADF5355_Enable+0x74>)
 80039f8:	f992 2000 	ldrsb.w	r2, [r2]
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fb2c 	bl	800305c <adf5355_set_power>
		}
		ret = true;
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <ADF5355_Enable+0x64>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003a0a:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <ADF5355_Enable+0x64>)
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000702 	.word	0x20000702
 8003a18:	2000012f 	.word	0x2000012f
 8003a1c:	200006fc 	.word	0x200006fc
 8003a20:	200006f8 	.word	0x200006f8
 8003a24:	20000130 	.word	0x20000130

08003a28 <ADF5355_Param_Init>:

void ADF5355_Param_Init(void){
 8003a28:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 8003a30:	4c4c      	ldr	r4, [pc, #304]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003a32:	4d4d      	ldr	r5, [pc, #308]	@ (8003b68 <ADF5355_Param_Init+0x140>)
 8003a34:	6025      	str	r5, [r4, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 8003a36:	4c4b      	ldr	r4, [pc, #300]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003a38:	2501      	movs	r5, #1
 8003a3a:	7125      	strb	r5, [r4, #4]
	hadf5355.freq_req = (uint64_t)freq_out*(uint64_t)1000000; // Żądana częstotliwość wyjściowa w Hz
 8003a3c:	4c4b      	ldr	r4, [pc, #300]	@ (8003b6c <ADF5355_Param_Init+0x144>)
 8003a3e:	8824      	ldrh	r4, [r4, #0]
 8003a40:	b2a4      	uxth	r4, r4
 8003a42:	2500      	movs	r5, #0
 8003a44:	46a0      	mov	r8, r4
 8003a46:	46a9      	mov	r9, r5
 8003a48:	4644      	mov	r4, r8
 8003a4a:	464d      	mov	r5, r9
 8003a4c:	f04f 0a00 	mov.w	sl, #0
 8003a50:	f04f 0b00 	mov.w	fp, #0
 8003a54:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 8003a58:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 8003a5c:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 8003a60:	4654      	mov	r4, sl
 8003a62:	465d      	mov	r5, fp
 8003a64:	ebb4 0208 	subs.w	r2, r4, r8
 8003a68:	eb65 0309 	sbc.w	r3, r5, r9
 8003a6c:	f04f 0400 	mov.w	r4, #0
 8003a70:	f04f 0500 	mov.w	r5, #0
 8003a74:	025d      	lsls	r5, r3, #9
 8003a76:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 8003a7a:	0254      	lsls	r4, r2, #9
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	462b      	mov	r3, r5
 8003a80:	eb12 0008 	adds.w	r0, r2, r8
 8003a84:	eb43 0109 	adc.w	r1, r3, r9
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	018b      	lsls	r3, r1, #6
 8003a92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a96:	0182      	lsls	r2, r0, #6
 8003a98:	1a14      	subs	r4, r2, r0
 8003a9a:	603c      	str	r4, [r7, #0]
 8003a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	eb13 0308 	adds.w	r3, r3, r8
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	eb43 0309 	adc.w	r3, r3, r9
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003ab8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003abc:	e9c3 1202 	strd	r1, r2, [r3, #8]
	hadf5355.freq_req_chan = 1; // Kanał częstotliwości
 8003ac0:	4b28      	ldr	r3, [pc, #160]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = freq_in*1000000; // Częstotliwość zegara wejściowego w Hz
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b70 <ADF5355_Param_Init+0x148>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b29      	ldr	r3, [pc, #164]	@ (8003b74 <ADF5355_Param_Init+0x14c>)
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003ad6:	615a      	str	r2, [r3, #20]
	hadf5355.cp_ua = cp_ua; // Prąd pompy ładunkowej w mikroamperach
 8003ad8:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <ADF5355_Param_Init+0x150>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a21      	ldr	r2, [pc, #132]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003ade:	6193      	str	r3, [r2, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 8003ae0:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = true;  // Flaga aktywacji bramkowania prądu wycieku
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 8003af2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = false;  // Flaga aktywacji wyjścia A
 8003af8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = outb_en;  // Flaga aktywacji wyjścia B
 8003b00:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <ADF5355_Param_Init+0x154>)
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.out_power = out_power;  // Moc wyjścia B
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <ADF5355_Param_Init+0x158>)
 8003b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b14:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.phase_detector_polarity_neg = false;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 8003b18:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 8003b20:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 8003b28:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.mux_out_sel = mux_out;  // Wybór wyjścia mux
 8003b40:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <ADF5355_Param_Init+0x15c>)
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <ADF5355_Param_Init+0x13c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	synced = true;
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <ADF5355_Param_Init+0x160>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b62:	4770      	bx	lr
 8003b64:	200006c8 	.word	0x200006c8
 8003b68:	200003fc 	.word	0x200003fc
 8003b6c:	2000012c 	.word	0x2000012c
 8003b70:	2000012e 	.word	0x2000012e
 8003b74:	000f4240 	.word	0x000f4240
 8003b78:	20000134 	.word	0x20000134
 8003b7c:	2000012f 	.word	0x2000012f
 8003b80:	20000130 	.word	0x20000130
 8003b84:	20000138 	.word	0x20000138
 8003b88:	200006fc 	.word	0x200006fc

08003b8c <ADF5355_Load>:


void* ADF5355_Load(void* arg){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	ADF5355_Param_Init();
 8003b94:	f7ff ff48 	bl	8003a28 <ADF5355_Param_Init>
	static bool ret = false;
	int32_t response = adf5355_init(&dev, &hadf5355);
 8003b98:	4907      	ldr	r1, [pc, #28]	@ (8003bb8 <ADF5355_Load+0x2c>)
 8003b9a:	4808      	ldr	r0, [pc, #32]	@ (8003bbc <ADF5355_Load+0x30>)
 8003b9c:	f7ff fd1c 	bl	80035d8 <adf5355_init>
 8003ba0:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <ADF5355_Load+0x22>
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <ADF5355_Load+0x34>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
	return &ret;
 8003bae:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <ADF5355_Load+0x34>)
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200006c8 	.word	0x200006c8
 8003bbc:	200006f8 	.word	0x200006f8
 8003bc0:	20000703 	.word	0x20000703

08003bc4 <ADF5355_Run>:

void* ADF5355_Run(void* arg){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	static bool ret = false;
	int32_t response = adf5355_change_freq(dev, hadf5355.freq_req);
 8003bcc:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <ADF5355_Run+0x30>)
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <ADF5355_Run+0x34>)
 8003bd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	f7ff fa18 	bl	800300c <adf5355_change_freq>
 8003bdc:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <ADF5355_Run+0x26>
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <ADF5355_Run+0x38>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
	return &ret;
 8003bea:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <ADF5355_Run+0x38>)
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200006f8 	.word	0x200006f8
 8003bf8:	200006c8 	.word	0x200006c8
 8003bfc:	20000704 	.word	0x20000704

08003c00 <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f008 fb6b 	bl	800c2e8 <calloc>
 8003c12:	4603      	mov	r3, r0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <no_os_greatest_common_divisor+0x16>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d112      	bne.n	8003c58 <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4293      	cmp	r3, r2
 8003c38:	bf38      	it	cc
 8003c3a:	4613      	movcc	r3, r2
 8003c3c:	e010      	b.n	8003c60 <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c46:	6839      	ldr	r1, [r7, #0]
 8003c48:	fb01 f202 	mul.w	r2, r1, r2
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
		a = b;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	607b      	str	r3, [r7, #4]
		b = div;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ef      	bne.n	8003c3e <no_os_greatest_common_divisor+0x22>
	}

	return a;
 8003c5e:	687b      	ldr	r3, [r7, #4]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c8e:	f7fc ffbb 	bl	8000c08 <__aeabi_uldivmod>
 8003c92:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ca0:	f7fc ffb2 	bl	8000c08 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 8003cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <HAL_Init+0x3c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf8 <HAL_Init+0x3c>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd2:	2003      	movs	r0, #3
 8003cd4:	f000 f903 	bl	8003ede <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cd8:	200f      	movs	r0, #15
 8003cda:	f7fd ff37 	bl	8001b4c <HAL_InitTick>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	71fb      	strb	r3, [r7, #7]
 8003ce8:	e001      	b.n	8003cee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cea:	f7fd ff07 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cee:	79fb      	ldrb	r3, [r7, #7]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40022000 	.word	0x40022000

08003cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_IncTick+0x20>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_IncTick+0x24>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a04      	ldr	r2, [pc, #16]	@ (8003d20 <HAL_IncTick+0x24>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000140 	.word	0x20000140
 8003d20:	20000708 	.word	0x20000708

08003d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return uwTick;
 8003d28:	4b03      	ldr	r3, [pc, #12]	@ (8003d38 <HAL_GetTick+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000708 	.word	0x20000708

08003d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff ffee 	bl	8003d24 <HAL_GetTick>
 8003d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d005      	beq.n	8003d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d56:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <HAL_Delay+0x44>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d62:	bf00      	nop
 8003d64:	f7ff ffde 	bl	8003d24 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d8f7      	bhi.n	8003d64 <HAL_Delay+0x28>
  {
  }
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000140 	.word	0x20000140

08003d84 <__NVIC_SetPriorityGrouping>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da0:	4013      	ands	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_GetPriorityGrouping>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0307 	and.w	r3, r3, #7
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_EnableIRQ>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db0b      	blt.n	8003e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <__NVIC_EnableIRQ+0x38>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2001      	movs	r0, #1
 8003e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	@ (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	@ (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	@ 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ff4c 	bl	8003d84 <__NVIC_SetPriorityGrouping>
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f06:	f7ff ff61 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8003f0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	f7ff ffb1 	bl	8003e78 <NVIC_EncodePriority>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff80 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f24:	bf00      	nop
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff54 	bl	8003de8 <__NVIC_EnableIRQ>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e098      	b.n	800408c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b4d      	ldr	r3, [pc, #308]	@ (8004098 <HAL_DMA_Init+0x150>)
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d80f      	bhi.n	8003f86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800409c <HAL_DMA_Init+0x154>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a4b      	ldr	r2, [pc, #300]	@ (80040a0 <HAL_DMA_Init+0x158>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	009a      	lsls	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a48      	ldr	r2, [pc, #288]	@ (80040a4 <HAL_DMA_Init+0x15c>)
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f84:	e00e      	b.n	8003fa4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b46      	ldr	r3, [pc, #280]	@ (80040a8 <HAL_DMA_Init+0x160>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a43      	ldr	r2, [pc, #268]	@ (80040a0 <HAL_DMA_Init+0x158>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	009a      	lsls	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a42      	ldr	r2, [pc, #264]	@ (80040ac <HAL_DMA_Init+0x164>)
 8003fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffe:	d039      	beq.n	8004074 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <HAL_DMA_Init+0x15c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d11a      	bne.n	8004040 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800400a:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <HAL_DMA_Init+0x168>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f003 031c 	and.w	r3, r3, #28
 8004016:	210f      	movs	r1, #15
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	4924      	ldr	r1, [pc, #144]	@ (80040b0 <HAL_DMA_Init+0x168>)
 8004020:	4013      	ands	r3, r2
 8004022:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004024:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <HAL_DMA_Init+0x168>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004030:	f003 031c 	and.w	r3, r3, #28
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	491d      	ldr	r1, [pc, #116]	@ (80040b0 <HAL_DMA_Init+0x168>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
 800403e:	e019      	b.n	8004074 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004040:	4b1c      	ldr	r3, [pc, #112]	@ (80040b4 <HAL_DMA_Init+0x16c>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004048:	f003 031c 	and.w	r3, r3, #28
 800404c:	210f      	movs	r1, #15
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	4917      	ldr	r1, [pc, #92]	@ (80040b4 <HAL_DMA_Init+0x16c>)
 8004056:	4013      	ands	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800405a:	4b16      	ldr	r3, [pc, #88]	@ (80040b4 <HAL_DMA_Init+0x16c>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	f003 031c 	and.w	r3, r3, #28
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	4911      	ldr	r1, [pc, #68]	@ (80040b4 <HAL_DMA_Init+0x16c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40020407 	.word	0x40020407
 800409c:	bffdfff8 	.word	0xbffdfff8
 80040a0:	cccccccd 	.word	0xcccccccd
 80040a4:	40020000 	.word	0x40020000
 80040a8:	bffdfbf8 	.word	0xbffdfbf8
 80040ac:	40020400 	.word	0x40020400
 80040b0:	400200a8 	.word	0x400200a8
 80040b4:	400204a8 	.word	0x400204a8

080040b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e072      	b.n	80041b0 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <HAL_DMA_DeInit+0x104>)
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d80f      	bhi.n	8004106 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b34      	ldr	r3, [pc, #208]	@ (80041c0 <HAL_DMA_DeInit+0x108>)
 80040ee:	4413      	add	r3, r2
 80040f0:	4a34      	ldr	r2, [pc, #208]	@ (80041c4 <HAL_DMA_DeInit+0x10c>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	009a      	lsls	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a31      	ldr	r2, [pc, #196]	@ (80041c8 <HAL_DMA_DeInit+0x110>)
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40
 8004104:	e00e      	b.n	8004124 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <HAL_DMA_DeInit+0x114>)
 800410e:	4413      	add	r3, r2
 8004110:	4a2c      	ldr	r2, [pc, #176]	@ (80041c4 <HAL_DMA_DeInit+0x10c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	009a      	lsls	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2b      	ldr	r2, [pc, #172]	@ (80041d0 <HAL_DMA_DeInit+0x118>)
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004130:	f003 021c 	and.w	r2, r3, #28
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	2101      	movs	r1, #1
 800413a:	fa01 f202 	lsl.w	r2, r1, r2
 800413e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	4a20      	ldr	r2, [pc, #128]	@ (80041c8 <HAL_DMA_DeInit+0x110>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10d      	bne.n	8004166 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <HAL_DMA_DeInit+0x11c>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f003 031c 	and.w	r3, r3, #28
 8004156:	210f      	movs	r1, #15
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	491d      	ldr	r1, [pc, #116]	@ (80041d4 <HAL_DMA_DeInit+0x11c>)
 8004160:	4013      	ands	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	e00c      	b.n	8004180 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004166:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <HAL_DMA_DeInit+0x120>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	f003 031c 	and.w	r3, r3, #28
 8004172:	210f      	movs	r1, #15
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	4917      	ldr	r1, [pc, #92]	@ (80041d8 <HAL_DMA_DeInit+0x120>)
 800417c:	4013      	ands	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40020407 	.word	0x40020407
 80041c0:	bffdfff8 	.word	0xbffdfff8
 80041c4:	cccccccd 	.word	0xcccccccd
 80041c8:	40020000 	.word	0x40020000
 80041cc:	bffdfbf8 	.word	0xbffdfbf8
 80041d0:	40020400 	.word	0x40020400
 80041d4:	400200a8 	.word	0x400200a8
 80041d8:	400204a8 	.word	0x400204a8

080041dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_DMA_Start_IT+0x20>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e04b      	b.n	8004294 <HAL_DMA_Start_IT+0xb8>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d13a      	bne.n	8004286 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f95f 	bl	80044f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 020e 	orr.w	r2, r2, #14
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e00f      	b.n	8004274 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 020a 	orr.w	r2, r2, #10
 8004272:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e005      	b.n	8004292 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800428e:	2302      	movs	r3, #2
 8004290:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d008      	beq.n	80042c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2204      	movs	r2, #4
 80042b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e022      	b.n	800430c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 020e 	bic.w	r2, r2, #14
 80042d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f003 021c 	and.w	r2, r3, #28
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d005      	beq.n	800433c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2204      	movs	r2, #4
 8004334:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	e029      	b.n	8004390 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020e 	bic.w	r2, r2, #14
 800434a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f003 021c 	and.w	r2, r3, #28
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
    }
  }
  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f003 031c 	and.w	r3, r3, #28
 80043ba:	2204      	movs	r2, #4
 80043bc:	409a      	lsls	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d026      	beq.n	8004414 <HAL_DMA_IRQHandler+0x7a>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d021      	beq.n	8004414 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	f003 021c 	and.w	r2, r3, #28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	2104      	movs	r1, #4
 80043fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004400:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	2b00      	cmp	r3, #0
 8004408:	d071      	beq.n	80044ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004412:	e06c      	b.n	80044ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004418:	f003 031c 	and.w	r3, r3, #28
 800441c:	2202      	movs	r2, #2
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02e      	beq.n	8004486 <HAL_DMA_IRQHandler+0xec>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d029      	beq.n	8004486 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020a 	bic.w	r2, r2, #10
 800444e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f003 021c 	and.w	r2, r3, #28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	2102      	movs	r1, #2
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d038      	beq.n	80044ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004484:	e033      	b.n	80044ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f003 031c 	and.w	r3, r3, #28
 800448e:	2208      	movs	r2, #8
 8004490:	409a      	lsls	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02a      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x156>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d025      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020e 	bic.w	r2, r2, #14
 80044b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	f003 021c 	and.w	r2, r3, #28
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f202 	lsl.w	r2, r1, r2
 80044c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
}
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	f003 021c 	and.w	r2, r3, #28
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f202 	lsl.w	r2, r1, r2
 8004518:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b10      	cmp	r3, #16
 8004528:	d108      	bne.n	800453c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800453a:	e007      	b.n	800454c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004566:	e17f      	b.n	8004868 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8171 	beq.w	8004862 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d005      	beq.n	8004598 <HAL_GPIO_Init+0x40>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d130      	bne.n	80045fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ce:	2201      	movs	r2, #1
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0201 	and.w	r2, r3, #1
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d118      	bne.n	8004638 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800460c:	2201      	movs	r2, #1
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0201 	and.w	r2, r3, #1
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b03      	cmp	r3, #3
 8004642:	d017      	beq.n	8004674 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2203      	movs	r2, #3
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d123      	bne.n	80046c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	08da      	lsrs	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3208      	adds	r2, #8
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	220f      	movs	r2, #15
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	08da      	lsrs	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3208      	adds	r2, #8
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	2203      	movs	r2, #3
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0203 	and.w	r2, r3, #3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80ac 	beq.w	8004862 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800470a:	4b5f      	ldr	r3, [pc, #380]	@ (8004888 <HAL_GPIO_Init+0x330>)
 800470c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470e:	4a5e      	ldr	r2, [pc, #376]	@ (8004888 <HAL_GPIO_Init+0x330>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6613      	str	r3, [r2, #96]	@ 0x60
 8004716:	4b5c      	ldr	r3, [pc, #368]	@ (8004888 <HAL_GPIO_Init+0x330>)
 8004718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004722:	4a5a      	ldr	r2, [pc, #360]	@ (800488c <HAL_GPIO_Init+0x334>)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	3302      	adds	r3, #2
 800472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	220f      	movs	r2, #15
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800474c:	d025      	beq.n	800479a <HAL_GPIO_Init+0x242>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4f      	ldr	r2, [pc, #316]	@ (8004890 <HAL_GPIO_Init+0x338>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <HAL_GPIO_Init+0x23e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a4e      	ldr	r2, [pc, #312]	@ (8004894 <HAL_GPIO_Init+0x33c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d019      	beq.n	8004792 <HAL_GPIO_Init+0x23a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4d      	ldr	r2, [pc, #308]	@ (8004898 <HAL_GPIO_Init+0x340>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0x236>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4c      	ldr	r2, [pc, #304]	@ (800489c <HAL_GPIO_Init+0x344>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00d      	beq.n	800478a <HAL_GPIO_Init+0x232>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a4b      	ldr	r2, [pc, #300]	@ (80048a0 <HAL_GPIO_Init+0x348>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <HAL_GPIO_Init+0x22e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a4a      	ldr	r2, [pc, #296]	@ (80048a4 <HAL_GPIO_Init+0x34c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_GPIO_Init+0x22a>
 800477e:	2306      	movs	r3, #6
 8004780:	e00c      	b.n	800479c <HAL_GPIO_Init+0x244>
 8004782:	2307      	movs	r3, #7
 8004784:	e00a      	b.n	800479c <HAL_GPIO_Init+0x244>
 8004786:	2305      	movs	r3, #5
 8004788:	e008      	b.n	800479c <HAL_GPIO_Init+0x244>
 800478a:	2304      	movs	r3, #4
 800478c:	e006      	b.n	800479c <HAL_GPIO_Init+0x244>
 800478e:	2303      	movs	r3, #3
 8004790:	e004      	b.n	800479c <HAL_GPIO_Init+0x244>
 8004792:	2302      	movs	r3, #2
 8004794:	e002      	b.n	800479c <HAL_GPIO_Init+0x244>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_GPIO_Init+0x244>
 800479a:	2300      	movs	r3, #0
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	f002 0203 	and.w	r2, r2, #3
 80047a2:	0092      	lsls	r2, r2, #2
 80047a4:	4093      	lsls	r3, r2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047ac:	4937      	ldr	r1, [pc, #220]	@ (800488c <HAL_GPIO_Init+0x334>)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	3302      	adds	r3, #2
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047ba:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047de:	4a32      	ldr	r2, [pc, #200]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047e4:	4b30      	ldr	r3, [pc, #192]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004808:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800480e:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004832:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004838:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43db      	mvns	r3, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4013      	ands	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800485c:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	3301      	adds	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	f47f ae78 	bne.w	8004568 <HAL_GPIO_Init+0x10>
  }
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	40010000 	.word	0x40010000
 8004890:	48000400 	.word	0x48000400
 8004894:	48000800 	.word	0x48000800
 8004898:	48000c00 	.word	0x48000c00
 800489c:	48001000 	.word	0x48001000
 80048a0:	48001400 	.word	0x48001400
 80048a4:	48001800 	.word	0x48001800
 80048a8:	40010400 	.word	0x40010400

080048ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80048ba:	e0cd      	b.n	8004a58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048bc:	2201      	movs	r2, #1
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80c0 	beq.w	8004a52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80048d2:	4a68      	ldr	r2, [pc, #416]	@ (8004a74 <HAL_GPIO_DeInit+0x1c8>)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4013      	ands	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048fa:	d025      	beq.n	8004948 <HAL_GPIO_DeInit+0x9c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004a78 <HAL_GPIO_DeInit+0x1cc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01f      	beq.n	8004944 <HAL_GPIO_DeInit+0x98>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a5d      	ldr	r2, [pc, #372]	@ (8004a7c <HAL_GPIO_DeInit+0x1d0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d019      	beq.n	8004940 <HAL_GPIO_DeInit+0x94>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a80 <HAL_GPIO_DeInit+0x1d4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_GPIO_DeInit+0x90>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a5b      	ldr	r2, [pc, #364]	@ (8004a84 <HAL_GPIO_DeInit+0x1d8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00d      	beq.n	8004938 <HAL_GPIO_DeInit+0x8c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a5a      	ldr	r2, [pc, #360]	@ (8004a88 <HAL_GPIO_DeInit+0x1dc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <HAL_GPIO_DeInit+0x88>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a59      	ldr	r2, [pc, #356]	@ (8004a8c <HAL_GPIO_DeInit+0x1e0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_GPIO_DeInit+0x84>
 800492c:	2306      	movs	r3, #6
 800492e:	e00c      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 8004930:	2307      	movs	r3, #7
 8004932:	e00a      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 8004934:	2305      	movs	r3, #5
 8004936:	e008      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 8004938:	2304      	movs	r3, #4
 800493a:	e006      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 800493c:	2303      	movs	r3, #3
 800493e:	e004      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 8004940:	2302      	movs	r3, #2
 8004942:	e002      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_GPIO_DeInit+0x9e>
 8004948:	2300      	movs	r3, #0
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	f002 0203 	and.w	r2, r2, #3
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	4093      	lsls	r3, r2
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	429a      	cmp	r2, r3
 8004958:	d132      	bne.n	80049c0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800495a:	4b4d      	ldr	r3, [pc, #308]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	494b      	ldr	r1, [pc, #300]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 8004964:	4013      	ands	r3, r2
 8004966:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004968:	4b49      	ldr	r3, [pc, #292]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	43db      	mvns	r3, r3
 8004970:	4947      	ldr	r1, [pc, #284]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 8004972:	4013      	ands	r3, r2
 8004974:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004976:	4b46      	ldr	r3, [pc, #280]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	43db      	mvns	r3, r3
 800497e:	4944      	ldr	r1, [pc, #272]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 8004980:	4013      	ands	r3, r2
 8004982:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004984:	4b42      	ldr	r3, [pc, #264]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	43db      	mvns	r3, r3
 800498c:	4940      	ldr	r1, [pc, #256]	@ (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 800498e:	4013      	ands	r3, r2
 8004990:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	220f      	movs	r2, #15
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80049a2:	4a34      	ldr	r2, [pc, #208]	@ (8004a74 <HAL_GPIO_DeInit+0x1c8>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	43da      	mvns	r2, r3
 80049b2:	4830      	ldr	r0, [pc, #192]	@ (8004a74 <HAL_GPIO_DeInit+0x1c8>)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	400a      	ands	r2, r1
 80049ba:	3302      	adds	r3, #2
 80049bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2103      	movs	r1, #3
 80049ca:	fa01 f303 	lsl.w	r3, r1, r3
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	08da      	lsrs	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3208      	adds	r2, #8
 80049dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	220f      	movs	r2, #15
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	08d2      	lsrs	r2, r2, #3
 80049f4:	4019      	ands	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3208      	adds	r2, #8
 80049fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2103      	movs	r1, #3
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	401a      	ands	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	2103      	movs	r1, #3
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	401a      	ands	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a42:	2101      	movs	r1, #1
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	401a      	ands	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3301      	adds	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af2b 	bne.w	80048bc <HAL_GPIO_DeInit+0x10>
  }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	40010000 	.word	0x40010000
 8004a78:	48000400 	.word	0x48000400
 8004a7c:	48000800 	.word	0x48000800
 8004a80:	48000c00 	.word	0x48000c00
 8004a84:	48001000 	.word	0x48001000
 8004a88:	48001400 	.word	0x48001400
 8004a8c:	48001800 	.word	0x48001800
 8004a90:	40010400 	.word	0x40010400

08004a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ace:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ada:	4a05      	ldr	r2, [pc, #20]	@ (8004af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc fc34 	bl	8001350 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40010400 	.word	0x40010400

08004af4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004af8:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <HAL_PWREx_GetVoltageRange+0x18>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40007000 	.word	0x40007000

08004b10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b1e:	d130      	bne.n	8004b82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b20:	4b23      	ldr	r3, [pc, #140]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b2c:	d038      	beq.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b2e:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b36:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2232      	movs	r2, #50	@ 0x32
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0c9b      	lsrs	r3, r3, #18
 8004b50:	3301      	adds	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b54:	e002      	b.n	8004b5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b5c:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b68:	d102      	bne.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f2      	bne.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b70:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d110      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e00f      	b.n	8004ba2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b82:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8e:	d007      	beq.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b90:	4b07      	ldr	r3, [pc, #28]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b98:	4a05      	ldr	r2, [pc, #20]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	20000128 	.word	0x20000128
 8004bb8:	431bde83 	.word	0x431bde83

08004bbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e3ca      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bce:	4b97      	ldr	r3, [pc, #604]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd8:	4b94      	ldr	r3, [pc, #592]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80e4 	beq.w	8004db8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_RCC_OscConfig+0x4a>
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	f040 808b 	bne.w	8004d14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 8087 	bne.w	8004d14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c06:	4b89      	ldr	r3, [pc, #548]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x62>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e3a2      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	4b82      	ldr	r3, [pc, #520]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <HAL_RCC_OscConfig+0x7c>
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c36:	e005      	b.n	8004c44 <HAL_RCC_OscConfig+0x88>
 8004c38:	4b7c      	ldr	r3, [pc, #496]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d223      	bcs.n	8004c90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fd87 	bl	8005760 <RCC_SetFlashLatencyFromMSIRange>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e383      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c5c:	4b73      	ldr	r3, [pc, #460]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a72      	ldr	r2, [pc, #456]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c62:	f043 0308 	orr.w	r3, r3, #8
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b70      	ldr	r3, [pc, #448]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	496d      	ldr	r1, [pc, #436]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	4968      	ldr	r1, [pc, #416]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	604b      	str	r3, [r1, #4]
 8004c8e:	e025      	b.n	8004cdc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c90:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a65      	ldr	r2, [pc, #404]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c96:	f043 0308 	orr.w	r3, r3, #8
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b63      	ldr	r3, [pc, #396]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4960      	ldr	r1, [pc, #384]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cae:	4b5f      	ldr	r3, [pc, #380]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	495b      	ldr	r1, [pc, #364]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fd47 	bl	8005760 <RCC_SetFlashLatencyFromMSIRange>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e343      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cdc:	f000 fc4a 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b52      	ldr	r3, [pc, #328]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	4950      	ldr	r1, [pc, #320]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8004e34 <HAL_RCC_OscConfig+0x278>)
 8004cfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8004e38 <HAL_RCC_OscConfig+0x27c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fc ff23 	bl	8001b4c <HAL_InitTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d052      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	e327      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d032      	beq.n	8004d82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d1c:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a42      	ldr	r2, [pc, #264]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d28:	f7fe fffc 	bl	8003d24 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d30:	f7fe fff8 	bl	8003d24 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e310      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d42:	4b3a      	ldr	r3, [pc, #232]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4e:	4b37      	ldr	r3, [pc, #220]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a36      	ldr	r2, [pc, #216]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b34      	ldr	r3, [pc, #208]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4931      	ldr	r1, [pc, #196]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	492c      	ldr	r1, [pc, #176]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
 8004d80:	e01a      	b.n	8004db8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d82:	4b2a      	ldr	r3, [pc, #168]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a29      	ldr	r2, [pc, #164]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d8e:	f7fe ffc9 	bl	8003d24 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d96:	f7fe ffc5 	bl	8003d24 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e2dd      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004da8:	4b20      	ldr	r3, [pc, #128]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCC_OscConfig+0x1da>
 8004db4:	e000      	b.n	8004db8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004db6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d074      	beq.n	8004eae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d005      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x21a>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d10e      	bne.n	8004dee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d10b      	bne.n	8004dee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d064      	beq.n	8004eac <HAL_RCC_OscConfig+0x2f0>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d160      	bne.n	8004eac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e2ba      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_OscConfig+0x24a>
 8004df8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e026      	b.n	8004e54 <HAL_RCC_OscConfig+0x298>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e0e:	d115      	bne.n	8004e3c <HAL_RCC_OscConfig+0x280>
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004e16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a02      	ldr	r2, [pc, #8]	@ (8004e2c <HAL_RCC_OscConfig+0x270>)
 8004e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	e014      	b.n	8004e54 <HAL_RCC_OscConfig+0x298>
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	0800f640 	.word	0x0800f640
 8004e34:	20000128 	.word	0x20000128
 8004e38:	2000013c 	.word	0x2000013c
 8004e3c:	4ba0      	ldr	r3, [pc, #640]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a9f      	ldr	r2, [pc, #636]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4b9d      	ldr	r3, [pc, #628]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a9c      	ldr	r2, [pc, #624]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d013      	beq.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe ff62 	bl	8003d24 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fe ff5e 	bl	8003d24 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e276      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e76:	4b92      	ldr	r3, [pc, #584]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x2a8>
 8004e82:	e014      	b.n	8004eae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe ff4e 	bl	8003d24 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e8c:	f7fe ff4a 	bl	8003d24 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	@ 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e262      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e9e:	4b88      	ldr	r3, [pc, #544]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x2d0>
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d060      	beq.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_OscConfig+0x310>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d119      	bne.n	8004efa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d116      	bne.n	8004efa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x328>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e23f      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee4:	4b76      	ldr	r3, [pc, #472]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	4973      	ldr	r1, [pc, #460]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef8:	e040      	b.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d023      	beq.n	8004f4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f02:	4b6f      	ldr	r3, [pc, #444]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6e      	ldr	r2, [pc, #440]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fe ff09 	bl	8003d24 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fe ff05 	bl	8003d24 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e21d      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f28:	4b65      	ldr	r3, [pc, #404]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b62      	ldr	r3, [pc, #392]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	061b      	lsls	r3, r3, #24
 8004f42:	495f      	ldr	r1, [pc, #380]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
 8004f48:	e018      	b.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fe fee5 	bl	8003d24 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fe fee1 	bl	8003d24 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1f9      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f70:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f0      	bne.n	8004f5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d03c      	beq.n	8005002 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01c      	beq.n	8004fca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f90:	4b4b      	ldr	r3, [pc, #300]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f96:	4a4a      	ldr	r2, [pc, #296]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fe fec0 	bl	8003d24 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fe febc 	bl	8003d24 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e1d4      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fba:	4b41      	ldr	r3, [pc, #260]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ef      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x3ec>
 8004fc8:	e01b      	b.n	8005002 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fca:	4b3d      	ldr	r3, [pc, #244]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fe fea3 	bl	8003d24 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fe fe9f 	bl	8003d24 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1b7      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff4:	4b32      	ldr	r3, [pc, #200]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1ef      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80a6 	beq.w	800515c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005010:	2300      	movs	r3, #0
 8005012:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005014:	4b2a      	ldr	r3, [pc, #168]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005020:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005024:	4a26      	ldr	r2, [pc, #152]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502a:	6593      	str	r3, [r2, #88]	@ 0x58
 800502c:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005038:	2301      	movs	r3, #1
 800503a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503c:	4b21      	ldr	r3, [pc, #132]	@ (80050c4 <HAL_RCC_OscConfig+0x508>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d118      	bne.n	800507a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005048:	4b1e      	ldr	r3, [pc, #120]	@ (80050c4 <HAL_RCC_OscConfig+0x508>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <HAL_RCC_OscConfig+0x508>)
 800504e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005054:	f7fe fe66 	bl	8003d24 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505c:	f7fe fe62 	bl	8003d24 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e17a      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506e:	4b15      	ldr	r3, [pc, #84]	@ (80050c4 <HAL_RCC_OscConfig+0x508>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d108      	bne.n	8005094 <HAL_RCC_OscConfig+0x4d8>
 8005082:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	4a0d      	ldr	r2, [pc, #52]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005092:	e029      	b.n	80050e8 <HAL_RCC_OscConfig+0x52c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b05      	cmp	r3, #5
 800509a:	d115      	bne.n	80050c8 <HAL_RCC_OscConfig+0x50c>
 800509c:	4b08      	ldr	r3, [pc, #32]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a2:	4a07      	ldr	r2, [pc, #28]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 80050a4:	f043 0304 	orr.w	r3, r3, #4
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050ac:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	4a03      	ldr	r2, [pc, #12]	@ (80050c0 <HAL_RCC_OscConfig+0x504>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050bc:	e014      	b.n	80050e8 <HAL_RCC_OscConfig+0x52c>
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40007000 	.word	0x40007000
 80050c8:	4b9c      	ldr	r3, [pc, #624]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	4a9b      	ldr	r2, [pc, #620]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050d8:	4b98      	ldr	r3, [pc, #608]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050de:	4a97      	ldr	r2, [pc, #604]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80050e0:	f023 0304 	bic.w	r3, r3, #4
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d016      	beq.n	800511e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fe fe18 	bl	8003d24 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fe fe14 	bl	8003d24 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e12a      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510e:	4b8b      	ldr	r3, [pc, #556]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ed      	beq.n	80050f8 <HAL_RCC_OscConfig+0x53c>
 800511c:	e015      	b.n	800514a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fe fe01 	bl	8003d24 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005124:	e00a      	b.n	800513c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005126:	f7fe fdfd 	bl	8003d24 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e113      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800513c:	4b7f      	ldr	r3, [pc, #508]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1ed      	bne.n	8005126 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514a:	7ffb      	ldrb	r3, [r7, #31]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005150:	4b7a      	ldr	r3, [pc, #488]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	4a79      	ldr	r2, [pc, #484]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800515a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80fe 	beq.w	8005362 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	2b02      	cmp	r3, #2
 800516c:	f040 80d0 	bne.w	8005310 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005170:	4b72      	ldr	r3, [pc, #456]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0203 	and.w	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d130      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	3b01      	subs	r3, #1
 8005190:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d127      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d11f      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051b0:	2a07      	cmp	r2, #7
 80051b2:	bf14      	ite	ne
 80051b4:	2201      	movne	r2, #1
 80051b6:	2200      	moveq	r2, #0
 80051b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d113      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	3b01      	subs	r3, #1
 80051cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d109      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	3b01      	subs	r3, #1
 80051e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d06e      	beq.n	80052c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d069      	beq.n	80052c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051ec:	4b53      	ldr	r3, [pc, #332]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051f8:	4b50      	ldr	r3, [pc, #320]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0ad      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005208:	4b4c      	ldr	r3, [pc, #304]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4b      	ldr	r2, [pc, #300]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800520e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005212:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005214:	f7fe fd86 	bl	8003d24 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fe fd82 	bl	8003d24 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e09a      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522e:	4b43      	ldr	r3, [pc, #268]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800523a:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	4b40      	ldr	r3, [pc, #256]	@ (8005340 <HAL_RCC_OscConfig+0x784>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800524a:	3a01      	subs	r2, #1
 800524c:	0112      	lsls	r2, r2, #4
 800524e:	4311      	orrs	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005254:	0212      	lsls	r2, r2, #8
 8005256:	4311      	orrs	r1, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800525c:	0852      	lsrs	r2, r2, #1
 800525e:	3a01      	subs	r2, #1
 8005260:	0552      	lsls	r2, r2, #21
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005268:	0852      	lsrs	r2, r2, #1
 800526a:	3a01      	subs	r2, #1
 800526c:	0652      	lsls	r2, r2, #25
 800526e:	4311      	orrs	r1, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005274:	0912      	lsrs	r2, r2, #4
 8005276:	0452      	lsls	r2, r2, #17
 8005278:	430a      	orrs	r2, r1
 800527a:	4930      	ldr	r1, [pc, #192]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800527c:	4313      	orrs	r3, r2
 800527e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005280:	4b2e      	ldr	r3, [pc, #184]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2d      	ldr	r2, [pc, #180]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800528a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800528c:	4b2b      	ldr	r3, [pc, #172]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a2a      	ldr	r2, [pc, #168]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005298:	f7fe fd44 	bl	8003d24 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fe fd40 	bl	8003d24 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e058      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b2:	4b22      	ldr	r3, [pc, #136]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052be:	e050      	b.n	8005362 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e04f      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c4:	4b1d      	ldr	r3, [pc, #116]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d148      	bne.n	8005362 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052d0:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a19      	ldr	r2, [pc, #100]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80052d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052dc:	4b17      	ldr	r3, [pc, #92]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a16      	ldr	r2, [pc, #88]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 80052e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052e8:	f7fe fd1c 	bl	8003d24 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fe fd18 	bl	8003d24 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e030      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005302:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x734>
 800530e:	e028      	b.n	8005362 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d023      	beq.n	800535e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a08      	ldr	r2, [pc, #32]	@ (800533c <HAL_RCC_OscConfig+0x780>)
 800531c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fe fcff 	bl	8003d24 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005328:	e00c      	b.n	8005344 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532a:	f7fe fcfb 	bl	8003d24 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d905      	bls.n	8005344 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e013      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
 800533c:	40021000 	.word	0x40021000
 8005340:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005344:	4b09      	ldr	r3, [pc, #36]	@ (800536c <HAL_RCC_OscConfig+0x7b0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ec      	bne.n	800532a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005350:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_OscConfig+0x7b0>)
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	4905      	ldr	r1, [pc, #20]	@ (800536c <HAL_RCC_OscConfig+0x7b0>)
 8005356:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <HAL_RCC_OscConfig+0x7b4>)
 8005358:	4013      	ands	r3, r2
 800535a:	60cb      	str	r3, [r1, #12]
 800535c:	e001      	b.n	8005362 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	feeefffc 	.word	0xfeeefffc

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0e7      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005388:	4b75      	ldr	r3, [pc, #468]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d910      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b72      	ldr	r3, [pc, #456]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 0207 	bic.w	r2, r3, #7
 800539e:	4970      	ldr	r1, [pc, #448]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0cf      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	4b66      	ldr	r3, [pc, #408]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d908      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d4:	4b63      	ldr	r3, [pc, #396]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4960      	ldr	r1, [pc, #384]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04c      	beq.n	800548c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fa:	4b5a      	ldr	r3, [pc, #360]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d121      	bne.n	800544a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e0a6      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005412:	4b54      	ldr	r3, [pc, #336]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d115      	bne.n	800544a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e09a      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800542a:	4b4e      	ldr	r3, [pc, #312]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e08e      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800543a:	4b4a      	ldr	r3, [pc, #296]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e086      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800544a:	4b46      	ldr	r3, [pc, #280]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4943      	ldr	r1, [pc, #268]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 8005458:	4313      	orrs	r3, r2
 800545a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545c:	f7fe fc62 	bl	8003d24 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	e00a      	b.n	800547a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005464:	f7fe fc5e 	bl	8003d24 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e06e      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547a:	4b3a      	ldr	r3, [pc, #232]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 020c 	and.w	r2, r3, #12
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	429a      	cmp	r2, r3
 800548a:	d1eb      	bne.n	8005464 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	4b31      	ldr	r3, [pc, #196]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d208      	bcs.n	80054ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	492b      	ldr	r1, [pc, #172]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054ba:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d210      	bcs.n	80054ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c8:	4b25      	ldr	r3, [pc, #148]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 0207 	bic.w	r2, r3, #7
 80054d0:	4923      	ldr	r1, [pc, #140]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d8:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <HAL_RCC_ClockConfig+0x1ec>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e036      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4918      	ldr	r1, [pc, #96]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005514:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4910      	ldr	r1, [pc, #64]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005528:	f000 f824 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <HAL_RCC_ClockConfig+0x1f0>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	490b      	ldr	r1, [pc, #44]	@ (8005568 <HAL_RCC_ClockConfig+0x1f4>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	4a09      	ldr	r2, [pc, #36]	@ (800556c <HAL_RCC_ClockConfig+0x1f8>)
 8005546:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005548:	4b09      	ldr	r3, [pc, #36]	@ (8005570 <HAL_RCC_ClockConfig+0x1fc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f7fc fafd 	bl	8001b4c <HAL_InitTick>
 8005552:	4603      	mov	r3, r0
 8005554:	72fb      	strb	r3, [r7, #11]

  return status;
 8005556:	7afb      	ldrb	r3, [r7, #11]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40022000 	.word	0x40022000
 8005564:	40021000 	.word	0x40021000
 8005568:	0800f640 	.word	0x0800f640
 800556c:	20000128 	.word	0x20000128
 8005570:	2000013c 	.word	0x2000013c

08005574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	@ 0x24
 8005578:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005582:	4b3e      	ldr	r3, [pc, #248]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800558c:	4b3b      	ldr	r3, [pc, #236]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x34>
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d121      	bne.n	80055e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d11e      	bne.n	80055e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055a8:	4b34      	ldr	r3, [pc, #208]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b4:	4b31      	ldr	r3, [pc, #196]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e005      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c4:	4b2d      	ldr	r3, [pc, #180]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10d      	bne.n	80055fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e4:	e00a      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d102      	bne.n	80055f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ec:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	e004      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f8:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <HAL_RCC_GetSysClockFreq+0x114>)
 80055fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b0c      	cmp	r3, #12
 8005600:	d134      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005602:	4b1e      	ldr	r3, [pc, #120]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d003      	beq.n	800561a <HAL_RCC_GetSysClockFreq+0xa6>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d003      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0xac>
 8005618:	e005      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800561a:	4b1a      	ldr	r3, [pc, #104]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x110>)
 800561c:	617b      	str	r3, [r7, #20]
      break;
 800561e:	e005      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005620:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <HAL_RCC_GetSysClockFreq+0x114>)
 8005622:	617b      	str	r3, [r7, #20]
      break;
 8005624:	e002      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	617b      	str	r3, [r7, #20]
      break;
 800562a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800562c:	4b13      	ldr	r3, [pc, #76]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	3301      	adds	r3, #1
 8005638:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	fb03 f202 	mul.w	r2, r3, r2
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005652:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <HAL_RCC_GetSysClockFreq+0x108>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	0e5b      	lsrs	r3, r3, #25
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	3301      	adds	r3, #1
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800566c:	69bb      	ldr	r3, [r7, #24]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3724      	adds	r7, #36	@ 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	0800f658 	.word	0x0800f658
 8005684:	00f42400 	.word	0x00f42400
 8005688:	007a1200 	.word	0x007a1200

0800568c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005690:	4b03      	ldr	r3, [pc, #12]	@ (80056a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005692:	681b      	ldr	r3, [r3, #0]
}
 8005694:	4618      	mov	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000128 	.word	0x20000128

080056a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056a8:	f7ff fff0 	bl	800568c <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	0800f650 	.word	0x0800f650

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056d4:	f7ff ffda 	bl	800568c <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	0adb      	lsrs	r3, r3, #11
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4904      	ldr	r1, [pc, #16]	@ (80056f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000
 80056f8:	0800f650 	.word	0x0800f650

080056fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	220f      	movs	r2, #15
 800570a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800570c:	4b12      	ldr	r3, [pc, #72]	@ (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0203 	and.w	r2, r3, #3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005718:	4b0f      	ldr	r3, [pc, #60]	@ (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005724:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005730:	4b09      	ldr	r3, [pc, #36]	@ (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800573e:	4b07      	ldr	r3, [pc, #28]	@ (800575c <HAL_RCC_GetClockConfig+0x60>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0207 	and.w	r2, r3, #7
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40021000 	.word	0x40021000
 800575c:	40022000 	.word	0x40022000

08005760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800576c:	4b2a      	ldr	r3, [pc, #168]	@ (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005778:	f7ff f9bc 	bl	8004af4 <HAL_PWREx_GetVoltageRange>
 800577c:	6178      	str	r0, [r7, #20]
 800577e:	e014      	b.n	80057aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005780:	4b25      	ldr	r3, [pc, #148]	@ (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005784:	4a24      	ldr	r2, [pc, #144]	@ (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578a:	6593      	str	r3, [r2, #88]	@ 0x58
 800578c:	4b22      	ldr	r3, [pc, #136]	@ (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005798:	f7ff f9ac 	bl	8004af4 <HAL_PWREx_GetVoltageRange>
 800579c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4b1e      	ldr	r3, [pc, #120]	@ (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b0:	d10b      	bne.n	80057ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b80      	cmp	r3, #128	@ 0x80
 80057b6:	d919      	bls.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80057bc:	d902      	bls.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057be:	2302      	movs	r3, #2
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e013      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c4:	2301      	movs	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	e010      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b80      	cmp	r3, #128	@ 0x80
 80057ce:	d902      	bls.n	80057d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057d0:	2303      	movs	r3, #3
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e00a      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b80      	cmp	r3, #128	@ 0x80
 80057da:	d102      	bne.n	80057e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057dc:	2302      	movs	r3, #2
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	e004      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b70      	cmp	r3, #112	@ 0x70
 80057e6:	d101      	bne.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057e8:	2301      	movs	r3, #1
 80057ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 0207 	bic.w	r2, r3, #7
 80057f4:	4909      	ldr	r1, [pc, #36]	@ (800581c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057fc:	4b07      	ldr	r3, [pc, #28]	@ (800581c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d001      	beq.n	800580e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	40022000 	.word	0x40022000

08005820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005828:	2300      	movs	r3, #0
 800582a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800582c:	2300      	movs	r3, #0
 800582e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005838:	2b00      	cmp	r3, #0
 800583a:	d041      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005840:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005844:	d02a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005846:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800584a:	d824      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800584c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005850:	d008      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005852:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005856:	d81e      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800585c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005860:	d010      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005862:	e018      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005864:	4b86      	ldr	r3, [pc, #536]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a85      	ldr	r2, [pc, #532]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005870:	e015      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3304      	adds	r3, #4
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fabb 	bl	8005df4 <RCCEx_PLLSAI1_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005882:	e00c      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3320      	adds	r3, #32
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fba6 	bl	8005fdc <RCCEx_PLLSAI2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	74fb      	strb	r3, [r7, #19]
      break;
 800589a:	e000      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800589c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a4:	4b76      	ldr	r3, [pc, #472]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058b2:	4973      	ldr	r1, [pc, #460]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d041      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058d4:	d02a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058da:	d824      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e0:	d008      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e6:	d81e      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f0:	d010      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058f2:	e018      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058f4:	4b62      	ldr	r3, [pc, #392]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4a61      	ldr	r2, [pc, #388]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005900:	e015      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fa73 	bl	8005df4 <RCCEx_PLLSAI1_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005912:	e00c      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3320      	adds	r3, #32
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fb5e 	bl	8005fdc <RCCEx_PLLSAI2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005924:	e003      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	74fb      	strb	r3, [r7, #19]
      break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800592c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005934:	4b52      	ldr	r3, [pc, #328]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005942:	494f      	ldr	r1, [pc, #316]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800594a:	e001      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80a0 	beq.w	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800595e:	2300      	movs	r3, #0
 8005960:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005962:	4b47      	ldr	r3, [pc, #284]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005978:	4b41      	ldr	r3, [pc, #260]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597c:	4a40      	ldr	r2, [pc, #256]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005982:	6593      	str	r3, [r2, #88]	@ 0x58
 8005984:	4b3e      	ldr	r3, [pc, #248]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005990:	2301      	movs	r3, #1
 8005992:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005994:	4b3b      	ldr	r3, [pc, #236]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3a      	ldr	r2, [pc, #232]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800599a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800599e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059a0:	f7fe f9c0 	bl	8003d24 <HAL_GetTick>
 80059a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059a6:	e009      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a8:	f7fe f9bc 	bl	8003d24 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d902      	bls.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	74fb      	strb	r3, [r7, #19]
        break;
 80059ba:	e005      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059bc:	4b31      	ldr	r3, [pc, #196]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ef      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d15c      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01f      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d019      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ec:	4b24      	ldr	r3, [pc, #144]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059f8:	4b21      	ldr	r3, [pc, #132]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fe:	4a20      	ldr	r2, [pc, #128]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a08:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a18:	4a19      	ldr	r2, [pc, #100]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fe f97b 	bl	8003d24 <HAL_GetTick>
 8005a2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a30:	e00b      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fe f977 	bl	8003d24 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d902      	bls.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	74fb      	strb	r3, [r7, #19]
            break;
 8005a48:	e006      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ec      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a58:	7cfb      	ldrb	r3, [r7, #19]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5e:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a6e:	4904      	ldr	r1, [pc, #16]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a76:	e009      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a78:	7cfb      	ldrb	r3, [r7, #19]
 8005a7a:	74bb      	strb	r3, [r7, #18]
 8005a7c:	e006      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	7cfb      	ldrb	r3, [r7, #19]
 8005a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a8c:	7c7b      	ldrb	r3, [r7, #17]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d105      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a92:	4b9e      	ldr	r3, [pc, #632]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	4a9d      	ldr	r2, [pc, #628]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aaa:	4b98      	ldr	r3, [pc, #608]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f023 0203 	bic.w	r2, r3, #3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab8:	4994      	ldr	r1, [pc, #592]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005acc:	4b8f      	ldr	r3, [pc, #572]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f023 020c 	bic.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ada:	498c      	ldr	r1, [pc, #560]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aee:	4b87      	ldr	r3, [pc, #540]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	4983      	ldr	r1, [pc, #524]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b10:	4b7e      	ldr	r3, [pc, #504]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	497b      	ldr	r1, [pc, #492]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b32:	4b76      	ldr	r3, [pc, #472]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b40:	4972      	ldr	r1, [pc, #456]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b54:	4b6d      	ldr	r3, [pc, #436]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b62:	496a      	ldr	r1, [pc, #424]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b76:	4b65      	ldr	r3, [pc, #404]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b84:	4961      	ldr	r1, [pc, #388]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b98:	4b5c      	ldr	r3, [pc, #368]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba6:	4959      	ldr	r1, [pc, #356]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bba:	4b54      	ldr	r3, [pc, #336]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc8:	4950      	ldr	r1, [pc, #320]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	4948      	ldr	r1, [pc, #288]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bfe:	4b43      	ldr	r3, [pc, #268]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0c:	493f      	ldr	r1, [pc, #252]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d028      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c20:	4b3a      	ldr	r3, [pc, #232]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c2e:	4937      	ldr	r1, [pc, #220]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c40:	4b32      	ldr	r3, [pc, #200]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a31      	ldr	r2, [pc, #196]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4a:	60d3      	str	r3, [r2, #12]
 8005c4c:	e011      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c56:	d10c      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f8c8 	bl	8005df4 <RCCEx_PLLSAI1_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d028      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c7e:	4b23      	ldr	r3, [pc, #140]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8c:	491f      	ldr	r1, [pc, #124]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c9c:	d106      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca8:	60d3      	str	r3, [r2, #12]
 8005caa:	e011      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 f899 	bl	8005df4 <RCCEx_PLLSAI1_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02b      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	4908      	ldr	r1, [pc, #32]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cfa:	d109      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cfc:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a02      	ldr	r2, [pc, #8]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d06:	60d3      	str	r3, [r2, #12]
 8005d08:	e014      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 f867 	bl	8005df4 <RCCEx_PLLSAI1_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d40:	4b2b      	ldr	r3, [pc, #172]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d4e:	4928      	ldr	r1, [pc, #160]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5e:	d10d      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	2102      	movs	r1, #2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f844 	bl	8005df4 <RCCEx_PLLSAI1_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d014      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d76:	7cfb      	ldrb	r3, [r7, #19]
 8005d78:	74bb      	strb	r3, [r7, #18]
 8005d7a:	e011      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3320      	adds	r3, #32
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f925 	bl	8005fdc <RCCEx_PLLSAI2_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dac:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dba:	490d      	ldr	r1, [pc, #52]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dde:	4904      	ldr	r1, [pc, #16]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005de6:	7cbb      	ldrb	r3, [r7, #18]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000

08005df4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e02:	4b75      	ldr	r3, [pc, #468]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e0e:	4b72      	ldr	r3, [pc, #456]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0203 	and.w	r2, r3, #3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d10d      	bne.n	8005e3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
       ||
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e26:	4b6c      	ldr	r3, [pc, #432]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
       ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d047      	beq.n	8005eca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
 8005e3e:	e044      	b.n	8005eca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d018      	beq.n	8005e7a <RCCEx_PLLSAI1_Config+0x86>
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d825      	bhi.n	8005e98 <RCCEx_PLLSAI1_Config+0xa4>
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d002      	beq.n	8005e56 <RCCEx_PLLSAI1_Config+0x62>
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d009      	beq.n	8005e68 <RCCEx_PLLSAI1_Config+0x74>
 8005e54:	e020      	b.n	8005e98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e56:	4b60      	ldr	r3, [pc, #384]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d11d      	bne.n	8005e9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e66:	e01a      	b.n	8005e9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e68:	4b5b      	ldr	r3, [pc, #364]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d116      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e78:	e013      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e7a:	4b57      	ldr	r3, [pc, #348]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10f      	bne.n	8005ea6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e86:	4b54      	ldr	r3, [pc, #336]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e96:	e006      	b.n	8005ea6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9c:	e004      	b.n	8005ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e9e:	bf00      	nop
 8005ea0:	e002      	b.n	8005ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ea2:	bf00      	nop
 8005ea4:	e000      	b.n	8005ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eae:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	4944      	ldr	r1, [pc, #272]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d17d      	bne.n	8005fcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ed0:	4b41      	ldr	r3, [pc, #260]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a40      	ldr	r2, [pc, #256]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005edc:	f7fd ff22 	bl	8003d24 <HAL_GetTick>
 8005ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ee2:	e009      	b.n	8005ef8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee4:	f7fd ff1e 	bl	8003d24 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d902      	bls.n	8005ef8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ef6:	e005      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ef8:	4b37      	ldr	r3, [pc, #220]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ef      	bne.n	8005ee4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d160      	bne.n	8005fcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d111      	bne.n	8005f34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f10:	4b31      	ldr	r3, [pc, #196]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6892      	ldr	r2, [r2, #8]
 8005f20:	0211      	lsls	r1, r2, #8
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68d2      	ldr	r2, [r2, #12]
 8005f26:	0912      	lsrs	r2, r2, #4
 8005f28:	0452      	lsls	r2, r2, #17
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	492a      	ldr	r1, [pc, #168]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	610b      	str	r3, [r1, #16]
 8005f32:	e027      	b.n	8005f84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d112      	bne.n	8005f60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f3a:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005f42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6892      	ldr	r2, [r2, #8]
 8005f4a:	0211      	lsls	r1, r2, #8
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6912      	ldr	r2, [r2, #16]
 8005f50:	0852      	lsrs	r2, r2, #1
 8005f52:	3a01      	subs	r2, #1
 8005f54:	0552      	lsls	r2, r2, #21
 8005f56:	430a      	orrs	r2, r1
 8005f58:	491f      	ldr	r1, [pc, #124]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]
 8005f5e:	e011      	b.n	8005f84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f60:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6892      	ldr	r2, [r2, #8]
 8005f70:	0211      	lsls	r1, r2, #8
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6952      	ldr	r2, [r2, #20]
 8005f76:	0852      	lsrs	r2, r2, #1
 8005f78:	3a01      	subs	r2, #1
 8005f7a:	0652      	lsls	r2, r2, #25
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	4916      	ldr	r1, [pc, #88]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f84:	4b14      	ldr	r3, [pc, #80]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a13      	ldr	r2, [pc, #76]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fd fec8 	bl	8003d24 <HAL_GetTick>
 8005f94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f96:	e009      	b.n	8005fac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f98:	f7fd fec4 	bl	8003d24 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d902      	bls.n	8005fac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	73fb      	strb	r3, [r7, #15]
          break;
 8005faa:	e005      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fac:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ef      	beq.n	8005f98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fbe:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	4904      	ldr	r1, [pc, #16]	@ (8005fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000

08005fdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fea:	4b6a      	ldr	r3, [pc, #424]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ff6:	4b67      	ldr	r3, [pc, #412]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0203 	and.w	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d10d      	bne.n	8006022 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
       ||
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800600e:	4b61      	ldr	r3, [pc, #388]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	091b      	lsrs	r3, r3, #4
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
       ||
 800601e:	429a      	cmp	r2, r3
 8006020:	d047      	beq.n	80060b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	e044      	b.n	80060b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b03      	cmp	r3, #3
 800602e:	d018      	beq.n	8006062 <RCCEx_PLLSAI2_Config+0x86>
 8006030:	2b03      	cmp	r3, #3
 8006032:	d825      	bhi.n	8006080 <RCCEx_PLLSAI2_Config+0xa4>
 8006034:	2b01      	cmp	r3, #1
 8006036:	d002      	beq.n	800603e <RCCEx_PLLSAI2_Config+0x62>
 8006038:	2b02      	cmp	r3, #2
 800603a:	d009      	beq.n	8006050 <RCCEx_PLLSAI2_Config+0x74>
 800603c:	e020      	b.n	8006080 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800603e:	4b55      	ldr	r3, [pc, #340]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d11d      	bne.n	8006086 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800604e:	e01a      	b.n	8006086 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006050:	4b50      	ldr	r3, [pc, #320]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006058:	2b00      	cmp	r3, #0
 800605a:	d116      	bne.n	800608a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006060:	e013      	b.n	800608a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006062:	4b4c      	ldr	r3, [pc, #304]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800606e:	4b49      	ldr	r3, [pc, #292]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800607e:	e006      	b.n	800608e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e004      	b.n	8006090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800608e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006096:	4b3f      	ldr	r3, [pc, #252]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	430b      	orrs	r3, r1
 80060ac:	4939      	ldr	r1, [pc, #228]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d167      	bne.n	8006188 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060b8:	4b36      	ldr	r3, [pc, #216]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a35      	ldr	r2, [pc, #212]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c4:	f7fd fe2e 	bl	8003d24 <HAL_GetTick>
 80060c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060ca:	e009      	b.n	80060e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060cc:	f7fd fe2a 	bl	8003d24 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d902      	bls.n	80060e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	73fb      	strb	r3, [r7, #15]
        break;
 80060de:	e005      	b.n	80060ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1ef      	bne.n	80060cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d14a      	bne.n	8006188 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d111      	bne.n	800611c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060f8:	4b26      	ldr	r3, [pc, #152]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6892      	ldr	r2, [r2, #8]
 8006108:	0211      	lsls	r1, r2, #8
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68d2      	ldr	r2, [r2, #12]
 800610e:	0912      	lsrs	r2, r2, #4
 8006110:	0452      	lsls	r2, r2, #17
 8006112:	430a      	orrs	r2, r1
 8006114:	491f      	ldr	r1, [pc, #124]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006116:	4313      	orrs	r3, r2
 8006118:	614b      	str	r3, [r1, #20]
 800611a:	e011      	b.n	8006140 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800611c:	4b1d      	ldr	r3, [pc, #116]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006124:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6892      	ldr	r2, [r2, #8]
 800612c:	0211      	lsls	r1, r2, #8
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6912      	ldr	r2, [r2, #16]
 8006132:	0852      	lsrs	r2, r2, #1
 8006134:	3a01      	subs	r2, #1
 8006136:	0652      	lsls	r2, r2, #25
 8006138:	430a      	orrs	r2, r1
 800613a:	4916      	ldr	r1, [pc, #88]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800613c:	4313      	orrs	r3, r2
 800613e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006140:	4b14      	ldr	r3, [pc, #80]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a13      	ldr	r2, [pc, #76]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800614a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7fd fdea 	bl	8003d24 <HAL_GetTick>
 8006150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006152:	e009      	b.n	8006168 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006154:	f7fd fde6 	bl	8003d24 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d902      	bls.n	8006168 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	73fb      	strb	r3, [r7, #15]
          break;
 8006166:	e005      	b.n	8006174 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006168:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0ef      	beq.n	8006154 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800617a:	4b06      	ldr	r3, [pc, #24]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4904      	ldr	r1, [pc, #16]	@ (8006194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40021000 	.word	0x40021000

08006198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e095      	b.n	80062d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ba:	d009      	beq.n	80061d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
 80061c2:	e005      	b.n	80061d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fb86 	bl	80018fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006210:	d902      	bls.n	8006218 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e002      	b.n	800621e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800621c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006226:	d007      	beq.n	8006238 <HAL_SPI_Init+0xa0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006230:	d002      	beq.n	8006238 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627a:	ea42 0103 	orr.w	r1, r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	f003 0204 	and.w	r2, r3, #4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062b4:	ea42 0103 	orr.w	r1, r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e01a      	b.n	8006326 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006306:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7fb fbbb 	bl	8001a84 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b088      	sub	sp, #32
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800633e:	f7fd fcf1 	bl	8003d24 <HAL_GetTick>
 8006342:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d001      	beq.n	8006358 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006354:	2302      	movs	r3, #2
 8006356:	e15c      	b.n	8006612 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_SPI_Transmit+0x36>
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e154      	b.n	8006612 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_SPI_Transmit+0x48>
 8006372:	2302      	movs	r3, #2
 8006374:	e14d      	b.n	8006612 <HAL_SPI_Transmit+0x2e4>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2203      	movs	r2, #3
 8006382:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	88fa      	ldrh	r2, [r7, #6]
 8006396:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c8:	d10f      	bne.n	80063ea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f4:	2b40      	cmp	r3, #64	@ 0x40
 80063f6:	d007      	beq.n	8006408 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006410:	d952      	bls.n	80064b8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Transmit+0xf2>
 800641a:	8b7b      	ldrh	r3, [r7, #26]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d145      	bne.n	80064ac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	881a      	ldrh	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006444:	e032      	b.n	80064ac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d112      	bne.n	800647a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	881a      	ldrh	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006464:	1c9a      	adds	r2, r3, #2
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006478:	e018      	b.n	80064ac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647a:	f7fd fc53 	bl	8003d24 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d803      	bhi.n	8006492 <HAL_SPI_Transmit+0x164>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d102      	bne.n	8006498 <HAL_SPI_Transmit+0x16a>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e0b2      	b.n	8006612 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1c7      	bne.n	8006446 <HAL_SPI_Transmit+0x118>
 80064b6:	e083      	b.n	80065c0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_Transmit+0x198>
 80064c0:	8b7b      	ldrh	r3, [r7, #26]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d177      	bne.n	80065b6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d912      	bls.n	80064f6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	1c9a      	adds	r2, r3, #2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b02      	subs	r3, #2
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064f4:	e05f      	b.n	80065b6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	7812      	ldrb	r2, [r2, #0]
 8006502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800651c:	e04b      	b.n	80065b6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d12b      	bne.n	8006584 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d912      	bls.n	800655c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	1c9a      	adds	r2, r3, #2
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b02      	subs	r3, #2
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800655a:	e02c      	b.n	80065b6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006582:	e018      	b.n	80065b6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006584:	f7fd fbce 	bl	8003d24 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d803      	bhi.n	800659c <HAL_SPI_Transmit+0x26e>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Transmit+0x274>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e02d      	b.n	8006612 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ae      	bne.n	800651e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f947 	bl	8006858 <SPI_EndRxTxTransaction>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006610:	2300      	movs	r3, #0
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	4613      	mov	r3, r2
 800662a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800662c:	f7fd fb7a 	bl	8003d24 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	4413      	add	r3, r2
 800663a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800663c:	f7fd fb72 	bl	8003d24 <HAL_GetTick>
 8006640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006642:	4b39      	ldr	r3, [pc, #228]	@ (8006728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	015b      	lsls	r3, r3, #5
 8006648:	0d1b      	lsrs	r3, r3, #20
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006652:	e054      	b.n	80066fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d050      	beq.n	80066fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800665c:	f7fd fb62 	bl	8003d24 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	429a      	cmp	r2, r3
 800666a:	d902      	bls.n	8006672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d13d      	bne.n	80066ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800668a:	d111      	bne.n	80066b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006694:	d004      	beq.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669e:	d107      	bne.n	80066b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b8:	d10f      	bne.n	80066da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e017      	b.n	800671e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4013      	ands	r3, r2
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	429a      	cmp	r2, r3
 800671a:	d19b      	bne.n	8006654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000128 	.word	0x20000128

0800672c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	@ 0x28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800673e:	f7fd faf1 	bl	8003d24 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	4413      	add	r3, r2
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800674e:	f7fd fae9 	bl	8003d24 <HAL_GetTick>
 8006752:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800675c:	4b3d      	ldr	r3, [pc, #244]	@ (8006854 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	00da      	lsls	r2, r3, #3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	0d1b      	lsrs	r3, r3, #20
 800676c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006774:	e060      	b.n	8006838 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800677c:	d107      	bne.n	800678e <SPI_WaitFifoStateUntilTimeout+0x62>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800678c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d050      	beq.n	8006838 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006796:	f7fd fac5 	bl	8003d24 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d902      	bls.n	80067ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d13d      	bne.n	8006828 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067c4:	d111      	bne.n	80067ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ce:	d004      	beq.n	80067da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d8:	d107      	bne.n	80067ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f2:	d10f      	bne.n	8006814 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006812:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e010      	b.n	800684a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	3b01      	subs	r3, #1
 8006836:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4013      	ands	r3, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d196      	bne.n	8006776 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3728      	adds	r7, #40	@ 0x28
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000128 	.word	0x20000128

08006858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af02      	add	r7, sp, #8
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff ff5b 	bl	800672c <SPI_WaitFifoStateUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006880:	f043 0220 	orr.w	r2, r3, #32
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e027      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	@ 0x80
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff fec0 	bl	800661c <SPI_WaitFlagStateUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d007      	beq.n	80068b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e014      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ff34 	bl	800672c <SPI_WaitFifoStateUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ce:	f043 0220 	orr.w	r2, r3, #32
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e000      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e049      	b.n	800698a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fb fb66 	bl	8001fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 fbe2 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d001      	beq.n	80069ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e047      	b.n	8006a3c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	@ (8006a48 <HAL_TIM_Base_Start+0xb4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c6:	d018      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <HAL_TIM_Base_Start+0xb8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a50 <HAL_TIM_Base_Start+0xbc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a54 <HAL_TIM_Base_Start+0xc0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006a58 <HAL_TIM_Base_Start+0xc4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a19      	ldr	r2, [pc, #100]	@ (8006a5c <HAL_TIM_Base_Start+0xc8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d115      	bne.n	8006a26 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	4b17      	ldr	r3, [pc, #92]	@ (8006a60 <HAL_TIM_Base_Start+0xcc>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	d015      	beq.n	8006a38 <HAL_TIM_Base_Start+0xa4>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a12:	d011      	beq.n	8006a38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a24:	e008      	b.n	8006a38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e000      	b.n	8006a3a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	00010007 	.word	0x00010007

08006a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d001      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e04f      	b.n	8006b1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a23      	ldr	r2, [pc, #140]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_TIM_Base_Start_IT+0x76>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa6:	d018      	beq.n	8006ada <HAL_TIM_Base_Start_IT+0x76>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1f      	ldr	r2, [pc, #124]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_TIM_Base_Start_IT+0x76>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_TIM_Base_Start_IT+0x76>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIM_Base_Start_IT+0x76>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1b      	ldr	r2, [pc, #108]	@ (8006b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIM_Base_Start_IT+0x76>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d115      	bne.n	8006b06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	4b17      	ldr	r3, [pc, #92]	@ (8006b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d015      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0xb4>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af2:	d011      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	e008      	b.n	8006b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e000      	b.n	8006b1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	00010007 	.word	0x00010007

08006b44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e049      	b.n	8006bea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f841 	bl	8006bf2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f000 fab2 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d020      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01b      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f06f 0202 	mvn.w	r2, #2
 8006c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fa2c 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006c56:	e005      	b.n	8006c64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa1e 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa2f 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d020      	beq.n	8006cb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01b      	beq.n	8006cb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f06f 0204 	mvn.w	r2, #4
 8006c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fa06 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006ca2:	e005      	b.n	8006cb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9f8 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa09 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d020      	beq.n	8006d02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01b      	beq.n	8006d02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f06f 0208 	mvn.w	r2, #8
 8006cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f9e0 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006cee:	e005      	b.n	8006cfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f9d2 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f9e3 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d020      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01b      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f06f 0210 	mvn.w	r2, #16
 8006d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2208      	movs	r2, #8
 8006d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f9ba 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006d3a:	e005      	b.n	8006d48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f9ac 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9bd 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f06f 0201 	mvn.w	r2, #1
 8006d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fa fc37 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fe4e 	bl	8007a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00c      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fe46 	bl	8007a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d007      	beq.n	8006de8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f977 	bl	80070d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0220 	mvn.w	r2, #32
 8006e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fe0e 	bl	8007a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e066      	b.n	8006f00 <HAL_TIM_OC_ConfigChannel+0xec>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b14      	cmp	r3, #20
 8006e3e:	d857      	bhi.n	8006ef0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006e40:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006ef1 	.word	0x08006ef1
 8006e50:	08006ef1 	.word	0x08006ef1
 8006e54:	08006ef1 	.word	0x08006ef1
 8006e58:	08006eab 	.word	0x08006eab
 8006e5c:	08006ef1 	.word	0x08006ef1
 8006e60:	08006ef1 	.word	0x08006ef1
 8006e64:	08006ef1 	.word	0x08006ef1
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006ef1 	.word	0x08006ef1
 8006e70:	08006ef1 	.word	0x08006ef1
 8006e74:	08006ef1 	.word	0x08006ef1
 8006e78:	08006ec7 	.word	0x08006ec7
 8006e7c:	08006ef1 	.word	0x08006ef1
 8006e80:	08006ef1 	.word	0x08006ef1
 8006e84:	08006ef1 	.word	0x08006ef1
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ef1 	.word	0x08006ef1
 8006e90:	08006ef1 	.word	0x08006ef1
 8006e94:	08006ef1 	.word	0x08006ef1
 8006e98:	08006ee3 	.word	0x08006ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f9c8 	bl	8007238 <TIM_OC1_SetConfig>
      break;
 8006ea8:	e025      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fa51 	bl	8007358 <TIM_OC2_SetConfig>
      break;
 8006eb6:	e01e      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fad4 	bl	800746c <TIM_OC3_SetConfig>
      break;
 8006ec4:	e017      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb55 	bl	800757c <TIM_OC4_SetConfig>
      break;
 8006ed2:	e010      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fbb8 	bl	8007650 <TIM_OC5_SetConfig>
      break;
 8006ee0:	e009      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fc15 	bl	8007718 <TIM_OC6_SetConfig>
      break;
 8006eee:	e002      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_TIM_ConfigClockSource+0x1c>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e0b6      	b.n	8007092 <HAL_TIM_ConfigClockSource+0x18a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f60:	d03e      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xd8>
 8006f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f66:	f200 8087 	bhi.w	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f6e:	f000 8086 	beq.w	800707e <HAL_TIM_ConfigClockSource+0x176>
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f76:	d87f      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006f78:	2b70      	cmp	r3, #112	@ 0x70
 8006f7a:	d01a      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0xaa>
 8006f7c:	2b70      	cmp	r3, #112	@ 0x70
 8006f7e:	d87b      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006f80:	2b60      	cmp	r3, #96	@ 0x60
 8006f82:	d050      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x11e>
 8006f84:	2b60      	cmp	r3, #96	@ 0x60
 8006f86:	d877      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006f88:	2b50      	cmp	r3, #80	@ 0x50
 8006f8a:	d03c      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0xfe>
 8006f8c:	2b50      	cmp	r3, #80	@ 0x50
 8006f8e:	d873      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006f90:	2b40      	cmp	r3, #64	@ 0x40
 8006f92:	d058      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x13e>
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d86f      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006f98:	2b30      	cmp	r3, #48	@ 0x30
 8006f9a:	d064      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15e>
 8006f9c:	2b30      	cmp	r3, #48	@ 0x30
 8006f9e:	d86b      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d060      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15e>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d867      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d05c      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15e>
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d05a      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15e>
 8006fb0:	e062      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fc2:	f000 fc89 	bl	80078d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	609a      	str	r2, [r3, #8]
      break;
 8006fde:	e04f      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ff0:	f000 fc72 	bl	80078d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007002:	609a      	str	r2, [r3, #8]
      break;
 8007004:	e03c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007012:	461a      	mov	r2, r3
 8007014:	f000 fbe6 	bl	80077e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2150      	movs	r1, #80	@ 0x50
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fc3f 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 8007024:	e02c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007032:	461a      	mov	r2, r3
 8007034:	f000 fc05 	bl	8007842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2160      	movs	r1, #96	@ 0x60
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fc2f 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 8007044:	e01c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007052:	461a      	mov	r2, r3
 8007054:	f000 fbc6 	bl	80077e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2140      	movs	r1, #64	@ 0x40
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fc1f 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 8007064:	e00c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f000 fc16 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 8007076:	e003      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	73fb      	strb	r3, [r7, #15]
      break;
 800707c:	e000      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800707e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
	...

080070ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a46      	ldr	r2, [pc, #280]	@ (8007218 <TIM_Base_SetConfig+0x12c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710a:	d00f      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a43      	ldr	r2, [pc, #268]	@ (800721c <TIM_Base_SetConfig+0x130>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a42      	ldr	r2, [pc, #264]	@ (8007220 <TIM_Base_SetConfig+0x134>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a41      	ldr	r2, [pc, #260]	@ (8007224 <TIM_Base_SetConfig+0x138>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a40      	ldr	r2, [pc, #256]	@ (8007228 <TIM_Base_SetConfig+0x13c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d108      	bne.n	800713e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a35      	ldr	r2, [pc, #212]	@ (8007218 <TIM_Base_SetConfig+0x12c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01f      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714c:	d01b      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a32      	ldr	r2, [pc, #200]	@ (800721c <TIM_Base_SetConfig+0x130>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d017      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a31      	ldr	r2, [pc, #196]	@ (8007220 <TIM_Base_SetConfig+0x134>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a30      	ldr	r2, [pc, #192]	@ (8007224 <TIM_Base_SetConfig+0x138>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2f      	ldr	r2, [pc, #188]	@ (8007228 <TIM_Base_SetConfig+0x13c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2e      	ldr	r2, [pc, #184]	@ (800722c <TIM_Base_SetConfig+0x140>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2d      	ldr	r2, [pc, #180]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <TIM_Base_SetConfig+0x148>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800718c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a16      	ldr	r2, [pc, #88]	@ (8007218 <TIM_Base_SetConfig+0x12c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <TIM_Base_SetConfig+0x13c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a17      	ldr	r2, [pc, #92]	@ (800722c <TIM_Base_SetConfig+0x140>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <TIM_Base_SetConfig+0x148>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d103      	bne.n	80071ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d105      	bne.n	800720a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	611a      	str	r2, [r3, #16]
  }
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f023 0201 	bic.w	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 0302 	bic.w	r3, r3, #2
 8007284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a2c      	ldr	r2, [pc, #176]	@ (8007344 <TIM_OC1_SetConfig+0x10c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00f      	beq.n	80072b8 <TIM_OC1_SetConfig+0x80>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a2b      	ldr	r2, [pc, #172]	@ (8007348 <TIM_OC1_SetConfig+0x110>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00b      	beq.n	80072b8 <TIM_OC1_SetConfig+0x80>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a2a      	ldr	r2, [pc, #168]	@ (800734c <TIM_OC1_SetConfig+0x114>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d007      	beq.n	80072b8 <TIM_OC1_SetConfig+0x80>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a29      	ldr	r2, [pc, #164]	@ (8007350 <TIM_OC1_SetConfig+0x118>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC1_SetConfig+0x80>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a28      	ldr	r2, [pc, #160]	@ (8007354 <TIM_OC1_SetConfig+0x11c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10c      	bne.n	80072d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0308 	bic.w	r3, r3, #8
 80072be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f023 0304 	bic.w	r3, r3, #4
 80072d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007344 <TIM_OC1_SetConfig+0x10c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00f      	beq.n	80072fa <TIM_OC1_SetConfig+0xc2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007348 <TIM_OC1_SetConfig+0x110>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00b      	beq.n	80072fa <TIM_OC1_SetConfig+0xc2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a19      	ldr	r2, [pc, #100]	@ (800734c <TIM_OC1_SetConfig+0x114>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d007      	beq.n	80072fa <TIM_OC1_SetConfig+0xc2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a18      	ldr	r2, [pc, #96]	@ (8007350 <TIM_OC1_SetConfig+0x118>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC1_SetConfig+0xc2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a17      	ldr	r2, [pc, #92]	@ (8007354 <TIM_OC1_SetConfig+0x11c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d111      	bne.n	800731e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	621a      	str	r2, [r3, #32]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40013400 	.word	0x40013400
 800734c:	40014000 	.word	0x40014000
 8007350:	40014400 	.word	0x40014400
 8007354:	40014800 	.word	0x40014800

08007358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f023 0210 	bic.w	r2, r3, #16
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0320 	bic.w	r3, r3, #32
 80073a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a28      	ldr	r2, [pc, #160]	@ (8007458 <TIM_OC2_SetConfig+0x100>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC2_SetConfig+0x6c>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a27      	ldr	r2, [pc, #156]	@ (800745c <TIM_OC2_SetConfig+0x104>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d10d      	bne.n	80073e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007458 <TIM_OC2_SetConfig+0x100>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00f      	beq.n	8007408 <TIM_OC2_SetConfig+0xb0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1c      	ldr	r2, [pc, #112]	@ (800745c <TIM_OC2_SetConfig+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_OC2_SetConfig+0xb0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a1b      	ldr	r2, [pc, #108]	@ (8007460 <TIM_OC2_SetConfig+0x108>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_OC2_SetConfig+0xb0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007464 <TIM_OC2_SetConfig+0x10c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC2_SetConfig+0xb0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a19      	ldr	r2, [pc, #100]	@ (8007468 <TIM_OC2_SetConfig+0x110>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d113      	bne.n	8007430 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800740e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40013400 	.word	0x40013400
 8007460:	40014000 	.word	0x40014000
 8007464:	40014400 	.word	0x40014400
 8007468:	40014800 	.word	0x40014800

0800746c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800749a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a27      	ldr	r2, [pc, #156]	@ (8007568 <TIM_OC3_SetConfig+0xfc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_OC3_SetConfig+0x6a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a26      	ldr	r2, [pc, #152]	@ (800756c <TIM_OC3_SetConfig+0x100>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d10d      	bne.n	80074f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007568 <TIM_OC3_SetConfig+0xfc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00f      	beq.n	800751a <TIM_OC3_SetConfig+0xae>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1b      	ldr	r2, [pc, #108]	@ (800756c <TIM_OC3_SetConfig+0x100>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00b      	beq.n	800751a <TIM_OC3_SetConfig+0xae>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1a      	ldr	r2, [pc, #104]	@ (8007570 <TIM_OC3_SetConfig+0x104>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d007      	beq.n	800751a <TIM_OC3_SetConfig+0xae>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a19      	ldr	r2, [pc, #100]	@ (8007574 <TIM_OC3_SetConfig+0x108>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d003      	beq.n	800751a <TIM_OC3_SetConfig+0xae>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a18      	ldr	r2, [pc, #96]	@ (8007578 <TIM_OC3_SetConfig+0x10c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d113      	bne.n	8007542 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	621a      	str	r2, [r3, #32]
}
 800755c:	bf00      	nop
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	40012c00 	.word	0x40012c00
 800756c:	40013400 	.word	0x40013400
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800

0800757c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	031b      	lsls	r3, r3, #12
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a18      	ldr	r2, [pc, #96]	@ (800763c <TIM_OC4_SetConfig+0xc0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00f      	beq.n	8007600 <TIM_OC4_SetConfig+0x84>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a17      	ldr	r2, [pc, #92]	@ (8007640 <TIM_OC4_SetConfig+0xc4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00b      	beq.n	8007600 <TIM_OC4_SetConfig+0x84>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a16      	ldr	r2, [pc, #88]	@ (8007644 <TIM_OC4_SetConfig+0xc8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d007      	beq.n	8007600 <TIM_OC4_SetConfig+0x84>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a15      	ldr	r2, [pc, #84]	@ (8007648 <TIM_OC4_SetConfig+0xcc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_OC4_SetConfig+0x84>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a14      	ldr	r2, [pc, #80]	@ (800764c <TIM_OC4_SetConfig+0xd0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d109      	bne.n	8007614 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	019b      	lsls	r3, r3, #6
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	621a      	str	r2, [r3, #32]
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40012c00 	.word	0x40012c00
 8007640:	40013400 	.word	0x40013400
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800

08007650 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007694:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	041b      	lsls	r3, r3, #16
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a17      	ldr	r2, [pc, #92]	@ (8007704 <TIM_OC5_SetConfig+0xb4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00f      	beq.n	80076ca <TIM_OC5_SetConfig+0x7a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a16      	ldr	r2, [pc, #88]	@ (8007708 <TIM_OC5_SetConfig+0xb8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00b      	beq.n	80076ca <TIM_OC5_SetConfig+0x7a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a15      	ldr	r2, [pc, #84]	@ (800770c <TIM_OC5_SetConfig+0xbc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d007      	beq.n	80076ca <TIM_OC5_SetConfig+0x7a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a14      	ldr	r2, [pc, #80]	@ (8007710 <TIM_OC5_SetConfig+0xc0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d003      	beq.n	80076ca <TIM_OC5_SetConfig+0x7a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a13      	ldr	r2, [pc, #76]	@ (8007714 <TIM_OC5_SetConfig+0xc4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d109      	bne.n	80076de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800

08007718 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800775e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	051b      	lsls	r3, r3, #20
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a18      	ldr	r2, [pc, #96]	@ (80077d0 <TIM_OC6_SetConfig+0xb8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00f      	beq.n	8007794 <TIM_OC6_SetConfig+0x7c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a17      	ldr	r2, [pc, #92]	@ (80077d4 <TIM_OC6_SetConfig+0xbc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00b      	beq.n	8007794 <TIM_OC6_SetConfig+0x7c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a16      	ldr	r2, [pc, #88]	@ (80077d8 <TIM_OC6_SetConfig+0xc0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <TIM_OC6_SetConfig+0x7c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a15      	ldr	r2, [pc, #84]	@ (80077dc <TIM_OC6_SetConfig+0xc4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_OC6_SetConfig+0x7c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a14      	ldr	r2, [pc, #80]	@ (80077e0 <TIM_OC6_SetConfig+0xc8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d109      	bne.n	80077a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800779a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	029b      	lsls	r3, r3, #10
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	621a      	str	r2, [r3, #32]
}
 80077c2:	bf00      	nop
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40012c00 	.word	0x40012c00
 80077d4:	40013400 	.word	0x40013400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40014400 	.word	0x40014400
 80077e0:	40014800 	.word	0x40014800

080077e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800780e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f023 030a 	bic.w	r3, r3, #10
 8007820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f023 0210 	bic.w	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800786c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	031b      	lsls	r3, r3, #12
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800787e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	621a      	str	r2, [r3, #32]
}
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	f043 0307 	orr.w	r3, r3, #7
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	021a      	lsls	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800792c:	2302      	movs	r3, #2
 800792e:	e068      	b.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a2e      	ldr	r2, [pc, #184]	@ (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a2d      	ldr	r2, [pc, #180]	@ (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d108      	bne.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800796a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1e      	ldr	r2, [pc, #120]	@ (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d018      	beq.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a18      	ldr	r2, [pc, #96]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a13      	ldr	r2, [pc, #76]	@ (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a14      	ldr	r2, [pc, #80]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d10c      	bne.n	80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40012c00 	.word	0x40012c00
 8007a14:	40013400 	.word	0x40013400
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40014000 	.word	0x40014000

08007a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e040      	b.n	8007af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fa fb0a 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2224      	movs	r2, #36	@ 0x24
 8007a90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fe8e 	bl	80087cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fbd3 	bl	800825c <UART_SetConfig>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e01b      	b.n	8007af8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 ff0d 	bl	8008910 <UART_CheckIdleState>
 8007af6:	4603      	mov	r3, r0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	@ 0x28
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d177      	bne.n	8007c08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <HAL_UART_Transmit+0x24>
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e070      	b.n	8007c0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2221      	movs	r2, #33	@ 0x21
 8007b34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b36:	f7fc f8f5 	bl	8003d24 <HAL_GetTick>
 8007b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b54:	d108      	bne.n	8007b68 <HAL_UART_Transmit+0x68>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	e003      	b.n	8007b70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b70:	e02f      	b.n	8007bd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2180      	movs	r1, #128	@ 0x80
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 ff6f 	bl	8008a60 <UART_WaitOnFlagUntilTimeout>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e03b      	b.n	8007c0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10b      	bne.n	8007bb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	3302      	adds	r3, #2
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e007      	b.n	8007bc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1c9      	bne.n	8007b72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2200      	movs	r2, #0
 8007be6:	2140      	movs	r1, #64	@ 0x40
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 ff39 	bl	8008a60 <UART_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e005      	b.n	8007c0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	e000      	b.n	8007c0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
  }
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b0ba      	sub	sp, #232	@ 0xe8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c42:	4013      	ands	r3, r2
 8007c44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d115      	bne.n	8007c7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00f      	beq.n	8007c7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 82ca 	beq.w	8008206 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      }
      return;
 8007c7a:	e2c4      	b.n	8008206 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8117 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c96:	4b85      	ldr	r3, [pc, #532]	@ (8007eac <HAL_UART_IRQHandler+0x298>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 810a 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d011      	beq.n	8007cd0 <HAL_UART_IRQHandler+0xbc>
 8007cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc6:	f043 0201 	orr.w	r2, r3, #1
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d011      	beq.n	8007d00 <HAL_UART_IRQHandler+0xec>
 8007cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2202      	movs	r2, #2
 8007cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf6:	f043 0204 	orr.w	r2, r3, #4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d011      	beq.n	8007d30 <HAL_UART_IRQHandler+0x11c>
 8007d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d26:	f043 0202 	orr.w	r2, r3, #2
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d017      	beq.n	8007d6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d105      	bne.n	8007d54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d62:	f043 0208 	orr.w	r2, r3, #8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d012      	beq.n	8007d9e <HAL_UART_IRQHandler+0x18a>
 8007d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d94:	f043 0220 	orr.w	r2, r3, #32
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8230 	beq.w	800820a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d005      	beq.n	8007df6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d04f      	beq.n	8007e96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 ff66 	bl	8008cc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b40      	cmp	r3, #64	@ 0x40
 8007e08:	d141      	bne.n	8007e8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1d9      	bne.n	8007e0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d013      	beq.n	8007e86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e62:	4a13      	ldr	r2, [pc, #76]	@ (8007eb0 <HAL_UART_IRQHandler+0x29c>)
 8007e64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc fa54 	bl	8004318 <HAL_DMA_Abort_IT>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	e00f      	b.n	8007ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9de 	bl	8008248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	e00b      	b.n	8007ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9da 	bl	8008248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e007      	b.n	8007ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9d6 	bl	8008248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007ea4:	e1b1      	b.n	800820a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea6:	bf00      	nop
    return;
 8007ea8:	e1af      	b.n	800820a <HAL_UART_IRQHandler+0x5f6>
 8007eaa:	bf00      	nop
 8007eac:	04000120 	.word	0x04000120
 8007eb0:	08008f79 	.word	0x08008f79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 816a 	bne.w	8008192 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8163 	beq.w	8008192 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 815c 	beq.w	8008192 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2210      	movs	r2, #16
 8007ee0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eec:	2b40      	cmp	r3, #64	@ 0x40
 8007eee:	f040 80d4 	bne.w	800809a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007efe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80ad 	beq.w	8008062 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f080 80a5 	bcs.w	8008062 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 8086 	bne.w	8008040 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1da      	bne.n	8007f34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3308      	adds	r3, #8
 8007f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e1      	bne.n	8007f7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e3      	bne.n	8007fba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800800e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008010:	f023 0310 	bic.w	r3, r3, #16
 8008014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008022:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008024:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008028:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e4      	bne.n	8008000 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800803a:	4618      	mov	r0, r3
 800803c:	f7fc f92e 	bl	800429c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008052:	b29b      	uxth	r3, r3
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7f9 f8c6 	bl	80011ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008060:	e0d5      	b.n	800820e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800806c:	429a      	cmp	r2, r3
 800806e:	f040 80ce 	bne.w	800820e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b20      	cmp	r3, #32
 8008080:	f040 80c5 	bne.w	800820e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7f9 f8aa 	bl	80011ec <HAL_UARTEx_RxEventCallback>
      return;
 8008098:	e0b9      	b.n	800820e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 80ab 	beq.w	8008212 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80080bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80a6 	beq.w	8008212 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	623b      	str	r3, [r7, #32]
   return(result);
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008120:	633a      	str	r2, [r7, #48]	@ 0x30
 8008122:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e3      	bne.n	80080fc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60fb      	str	r3, [r7, #12]
   return(result);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 0310 	bic.w	r3, r3, #16
 800815c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	69b9      	ldr	r1, [r7, #24]
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	617b      	str	r3, [r7, #20]
   return(result);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e4      	bne.n	8008148 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7f9 f82e 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008190:	e03f      	b.n	8008212 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00e      	beq.n	80081bc <HAL_UART_IRQHandler+0x5a8>
 800819e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80081b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 ff1f 	bl	8008ff8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081ba:	e02d      	b.n	8008218 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80081bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00e      	beq.n	80081e6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80081c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d008      	beq.n	80081e6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01c      	beq.n	8008216 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
    }
    return;
 80081e4:	e017      	b.n	8008216 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d012      	beq.n	8008218 <HAL_UART_IRQHandler+0x604>
 80081f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fed0 	bl	8008fa4 <UART_EndTransmit_IT>
    return;
 8008204:	e008      	b.n	8008218 <HAL_UART_IRQHandler+0x604>
      return;
 8008206:	bf00      	nop
 8008208:	e006      	b.n	8008218 <HAL_UART_IRQHandler+0x604>
    return;
 800820a:	bf00      	nop
 800820c:	e004      	b.n	8008218 <HAL_UART_IRQHandler+0x604>
      return;
 800820e:	bf00      	nop
 8008210:	e002      	b.n	8008218 <HAL_UART_IRQHandler+0x604>
      return;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_UART_IRQHandler+0x604>
    return;
 8008216:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008218:	37e8      	adds	r7, #232	@ 0xe8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop

08008220 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800825c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008260:	b08a      	sub	sp, #40	@ 0x28
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	431a      	orrs	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	431a      	orrs	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	4313      	orrs	r3, r2
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4ba4      	ldr	r3, [pc, #656]	@ (800851c <UART_SetConfig+0x2c0>)
 800828c:	4013      	ands	r3, r2
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008294:	430b      	orrs	r3, r1
 8008296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a99      	ldr	r2, [pc, #612]	@ (8008520 <UART_SetConfig+0x2c4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d004      	beq.n	80082c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c4:	4313      	orrs	r3, r2
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d8:	430a      	orrs	r2, r1
 80082da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a90      	ldr	r2, [pc, #576]	@ (8008524 <UART_SetConfig+0x2c8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d126      	bne.n	8008334 <UART_SetConfig+0xd8>
 80082e6:	4b90      	ldr	r3, [pc, #576]	@ (8008528 <UART_SetConfig+0x2cc>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ec:	f003 0303 	and.w	r3, r3, #3
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d81b      	bhi.n	800832c <UART_SetConfig+0xd0>
 80082f4:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0xa0>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008315 	.word	0x08008315
 8008308:	08008325 	.word	0x08008325
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008312:	e116      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008314:	2302      	movs	r3, #2
 8008316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800831a:	e112      	b.n	8008542 <UART_SetConfig+0x2e6>
 800831c:	2304      	movs	r3, #4
 800831e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008322:	e10e      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008324:	2308      	movs	r3, #8
 8008326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800832a:	e10a      	b.n	8008542 <UART_SetConfig+0x2e6>
 800832c:	2310      	movs	r3, #16
 800832e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008332:	e106      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a7c      	ldr	r2, [pc, #496]	@ (800852c <UART_SetConfig+0x2d0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d138      	bne.n	80083b0 <UART_SetConfig+0x154>
 800833e:	4b7a      	ldr	r3, [pc, #488]	@ (8008528 <UART_SetConfig+0x2cc>)
 8008340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008344:	f003 030c 	and.w	r3, r3, #12
 8008348:	2b0c      	cmp	r3, #12
 800834a:	d82d      	bhi.n	80083a8 <UART_SetConfig+0x14c>
 800834c:	a201      	add	r2, pc, #4	@ (adr r2, 8008354 <UART_SetConfig+0xf8>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008389 	.word	0x08008389
 8008358:	080083a9 	.word	0x080083a9
 800835c:	080083a9 	.word	0x080083a9
 8008360:	080083a9 	.word	0x080083a9
 8008364:	08008399 	.word	0x08008399
 8008368:	080083a9 	.word	0x080083a9
 800836c:	080083a9 	.word	0x080083a9
 8008370:	080083a9 	.word	0x080083a9
 8008374:	08008391 	.word	0x08008391
 8008378:	080083a9 	.word	0x080083a9
 800837c:	080083a9 	.word	0x080083a9
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083a1 	.word	0x080083a1
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800838e:	e0d8      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008390:	2302      	movs	r3, #2
 8008392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008396:	e0d4      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800839e:	e0d0      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083a6:	e0cc      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083ae:	e0c8      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008530 <UART_SetConfig+0x2d4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d125      	bne.n	8008406 <UART_SetConfig+0x1aa>
 80083ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008528 <UART_SetConfig+0x2cc>)
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083c4:	2b30      	cmp	r3, #48	@ 0x30
 80083c6:	d016      	beq.n	80083f6 <UART_SetConfig+0x19a>
 80083c8:	2b30      	cmp	r3, #48	@ 0x30
 80083ca:	d818      	bhi.n	80083fe <UART_SetConfig+0x1a2>
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d00a      	beq.n	80083e6 <UART_SetConfig+0x18a>
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	d814      	bhi.n	80083fe <UART_SetConfig+0x1a2>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <UART_SetConfig+0x182>
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d008      	beq.n	80083ee <UART_SetConfig+0x192>
 80083dc:	e00f      	b.n	80083fe <UART_SetConfig+0x1a2>
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083e4:	e0ad      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083e6:	2302      	movs	r3, #2
 80083e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083ec:	e0a9      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083ee:	2304      	movs	r3, #4
 80083f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083f4:	e0a5      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083f6:	2308      	movs	r3, #8
 80083f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083fc:	e0a1      	b.n	8008542 <UART_SetConfig+0x2e6>
 80083fe:	2310      	movs	r3, #16
 8008400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008404:	e09d      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a4a      	ldr	r2, [pc, #296]	@ (8008534 <UART_SetConfig+0x2d8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d125      	bne.n	800845c <UART_SetConfig+0x200>
 8008410:	4b45      	ldr	r3, [pc, #276]	@ (8008528 <UART_SetConfig+0x2cc>)
 8008412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008416:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800841a:	2bc0      	cmp	r3, #192	@ 0xc0
 800841c:	d016      	beq.n	800844c <UART_SetConfig+0x1f0>
 800841e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008420:	d818      	bhi.n	8008454 <UART_SetConfig+0x1f8>
 8008422:	2b80      	cmp	r3, #128	@ 0x80
 8008424:	d00a      	beq.n	800843c <UART_SetConfig+0x1e0>
 8008426:	2b80      	cmp	r3, #128	@ 0x80
 8008428:	d814      	bhi.n	8008454 <UART_SetConfig+0x1f8>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <UART_SetConfig+0x1d8>
 800842e:	2b40      	cmp	r3, #64	@ 0x40
 8008430:	d008      	beq.n	8008444 <UART_SetConfig+0x1e8>
 8008432:	e00f      	b.n	8008454 <UART_SetConfig+0x1f8>
 8008434:	2300      	movs	r3, #0
 8008436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800843a:	e082      	b.n	8008542 <UART_SetConfig+0x2e6>
 800843c:	2302      	movs	r3, #2
 800843e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008442:	e07e      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008444:	2304      	movs	r3, #4
 8008446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800844a:	e07a      	b.n	8008542 <UART_SetConfig+0x2e6>
 800844c:	2308      	movs	r3, #8
 800844e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008452:	e076      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008454:	2310      	movs	r3, #16
 8008456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800845a:	e072      	b.n	8008542 <UART_SetConfig+0x2e6>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a35      	ldr	r2, [pc, #212]	@ (8008538 <UART_SetConfig+0x2dc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d12a      	bne.n	80084bc <UART_SetConfig+0x260>
 8008466:	4b30      	ldr	r3, [pc, #192]	@ (8008528 <UART_SetConfig+0x2cc>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800846c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008470:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008474:	d01a      	beq.n	80084ac <UART_SetConfig+0x250>
 8008476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800847a:	d81b      	bhi.n	80084b4 <UART_SetConfig+0x258>
 800847c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008480:	d00c      	beq.n	800849c <UART_SetConfig+0x240>
 8008482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008486:	d815      	bhi.n	80084b4 <UART_SetConfig+0x258>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <UART_SetConfig+0x238>
 800848c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008490:	d008      	beq.n	80084a4 <UART_SetConfig+0x248>
 8008492:	e00f      	b.n	80084b4 <UART_SetConfig+0x258>
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800849a:	e052      	b.n	8008542 <UART_SetConfig+0x2e6>
 800849c:	2302      	movs	r3, #2
 800849e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084a2:	e04e      	b.n	8008542 <UART_SetConfig+0x2e6>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084aa:	e04a      	b.n	8008542 <UART_SetConfig+0x2e6>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084b2:	e046      	b.n	8008542 <UART_SetConfig+0x2e6>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ba:	e042      	b.n	8008542 <UART_SetConfig+0x2e6>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a17      	ldr	r2, [pc, #92]	@ (8008520 <UART_SetConfig+0x2c4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d13a      	bne.n	800853c <UART_SetConfig+0x2e0>
 80084c6:	4b18      	ldr	r3, [pc, #96]	@ (8008528 <UART_SetConfig+0x2cc>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80084d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084d4:	d01a      	beq.n	800850c <UART_SetConfig+0x2b0>
 80084d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084da:	d81b      	bhi.n	8008514 <UART_SetConfig+0x2b8>
 80084dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084e0:	d00c      	beq.n	80084fc <UART_SetConfig+0x2a0>
 80084e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084e6:	d815      	bhi.n	8008514 <UART_SetConfig+0x2b8>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <UART_SetConfig+0x298>
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f0:	d008      	beq.n	8008504 <UART_SetConfig+0x2a8>
 80084f2:	e00f      	b.n	8008514 <UART_SetConfig+0x2b8>
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084fa:	e022      	b.n	8008542 <UART_SetConfig+0x2e6>
 80084fc:	2302      	movs	r3, #2
 80084fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008502:	e01e      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008504:	2304      	movs	r3, #4
 8008506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800850a:	e01a      	b.n	8008542 <UART_SetConfig+0x2e6>
 800850c:	2308      	movs	r3, #8
 800850e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008512:	e016      	b.n	8008542 <UART_SetConfig+0x2e6>
 8008514:	2310      	movs	r3, #16
 8008516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800851a:	e012      	b.n	8008542 <UART_SetConfig+0x2e6>
 800851c:	efff69f3 	.word	0xefff69f3
 8008520:	40008000 	.word	0x40008000
 8008524:	40013800 	.word	0x40013800
 8008528:	40021000 	.word	0x40021000
 800852c:	40004400 	.word	0x40004400
 8008530:	40004800 	.word	0x40004800
 8008534:	40004c00 	.word	0x40004c00
 8008538:	40005000 	.word	0x40005000
 800853c:	2310      	movs	r3, #16
 800853e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a9f      	ldr	r2, [pc, #636]	@ (80087c4 <UART_SetConfig+0x568>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d17a      	bne.n	8008642 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800854c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008550:	2b08      	cmp	r3, #8
 8008552:	d824      	bhi.n	800859e <UART_SetConfig+0x342>
 8008554:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <UART_SetConfig+0x300>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	08008581 	.word	0x08008581
 8008560:	0800859f 	.word	0x0800859f
 8008564:	08008589 	.word	0x08008589
 8008568:	0800859f 	.word	0x0800859f
 800856c:	0800858f 	.word	0x0800858f
 8008570:	0800859f 	.word	0x0800859f
 8008574:	0800859f 	.word	0x0800859f
 8008578:	0800859f 	.word	0x0800859f
 800857c:	08008597 	.word	0x08008597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fd f890 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8008584:	61f8      	str	r0, [r7, #28]
        break;
 8008586:	e010      	b.n	80085aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008588:	4b8f      	ldr	r3, [pc, #572]	@ (80087c8 <UART_SetConfig+0x56c>)
 800858a:	61fb      	str	r3, [r7, #28]
        break;
 800858c:	e00d      	b.n	80085aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858e:	f7fc fff1 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8008592:	61f8      	str	r0, [r7, #28]
        break;
 8008594:	e009      	b.n	80085aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800859a:	61fb      	str	r3, [r7, #28]
        break;
 800859c:	e005      	b.n	80085aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80085a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 80fb 	beq.w	80087a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d305      	bcc.n	80085ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d903      	bls.n	80085d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80085d4:	e0e8      	b.n	80087a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	2200      	movs	r2, #0
 80085da:	461c      	mov	r4, r3
 80085dc:	4615      	mov	r5, r2
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	022b      	lsls	r3, r5, #8
 80085e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80085ec:	0222      	lsls	r2, r4, #8
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	6849      	ldr	r1, [r1, #4]
 80085f2:	0849      	lsrs	r1, r1, #1
 80085f4:	2000      	movs	r0, #0
 80085f6:	4688      	mov	r8, r1
 80085f8:	4681      	mov	r9, r0
 80085fa:	eb12 0a08 	adds.w	sl, r2, r8
 80085fe:	eb43 0b09 	adc.w	fp, r3, r9
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	f7f8 faf8 	bl	8000c08 <__aeabi_uldivmod>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4613      	mov	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008626:	d308      	bcc.n	800863a <UART_SetConfig+0x3de>
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800862e:	d204      	bcs.n	800863a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	60da      	str	r2, [r3, #12]
 8008638:	e0b6      	b.n	80087a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008640:	e0b2      	b.n	80087a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800864a:	d15e      	bne.n	800870a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800864c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008650:	2b08      	cmp	r3, #8
 8008652:	d828      	bhi.n	80086a6 <UART_SetConfig+0x44a>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <UART_SetConfig+0x400>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008681 	.word	0x08008681
 8008660:	08008689 	.word	0x08008689
 8008664:	08008691 	.word	0x08008691
 8008668:	080086a7 	.word	0x080086a7
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a7 	.word	0x080086a7
 8008674:	080086a7 	.word	0x080086a7
 8008678:	080086a7 	.word	0x080086a7
 800867c:	0800869f 	.word	0x0800869f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fd f810 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8008684:	61f8      	str	r0, [r7, #28]
        break;
 8008686:	e014      	b.n	80086b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008688:	f7fd f822 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 800868c:	61f8      	str	r0, [r7, #28]
        break;
 800868e:	e010      	b.n	80086b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008690:	4b4d      	ldr	r3, [pc, #308]	@ (80087c8 <UART_SetConfig+0x56c>)
 8008692:	61fb      	str	r3, [r7, #28]
        break;
 8008694:	e00d      	b.n	80086b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008696:	f7fc ff6d 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 800869a:	61f8      	str	r0, [r7, #28]
        break;
 800869c:	e009      	b.n	80086b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086a2:	61fb      	str	r3, [r7, #28]
        break;
 80086a4:	e005      	b.n	80086b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80086b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d077      	beq.n	80087a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	005a      	lsls	r2, r3, #1
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	441a      	add	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b0f      	cmp	r3, #15
 80086d2:	d916      	bls.n	8008702 <UART_SetConfig+0x4a6>
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086da:	d212      	bcs.n	8008702 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f023 030f 	bic.w	r3, r3, #15
 80086e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	8afb      	ldrh	r3, [r7, #22]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	8afa      	ldrh	r2, [r7, #22]
 80086fe:	60da      	str	r2, [r3, #12]
 8008700:	e052      	b.n	80087a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008708:	e04e      	b.n	80087a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800870a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800870e:	2b08      	cmp	r3, #8
 8008710:	d827      	bhi.n	8008762 <UART_SetConfig+0x506>
 8008712:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <UART_SetConfig+0x4bc>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	0800873d 	.word	0x0800873d
 800871c:	08008745 	.word	0x08008745
 8008720:	0800874d 	.word	0x0800874d
 8008724:	08008763 	.word	0x08008763
 8008728:	08008753 	.word	0x08008753
 800872c:	08008763 	.word	0x08008763
 8008730:	08008763 	.word	0x08008763
 8008734:	08008763 	.word	0x08008763
 8008738:	0800875b 	.word	0x0800875b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800873c:	f7fc ffb2 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8008740:	61f8      	str	r0, [r7, #28]
        break;
 8008742:	e014      	b.n	800876e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008744:	f7fc ffc4 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8008748:	61f8      	str	r0, [r7, #28]
        break;
 800874a:	e010      	b.n	800876e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800874c:	4b1e      	ldr	r3, [pc, #120]	@ (80087c8 <UART_SetConfig+0x56c>)
 800874e:	61fb      	str	r3, [r7, #28]
        break;
 8008750:	e00d      	b.n	800876e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008752:	f7fc ff0f 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8008756:	61f8      	str	r0, [r7, #28]
        break;
 8008758:	e009      	b.n	800876e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800875e:	61fb      	str	r3, [r7, #28]
        break;
 8008760:	e005      	b.n	800876e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800876c:	bf00      	nop
    }

    if (pclk != 0U)
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d019      	beq.n	80087a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	085a      	lsrs	r2, r3, #1
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	441a      	add	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	d909      	bls.n	80087a2 <UART_SetConfig+0x546>
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008794:	d205      	bcs.n	80087a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60da      	str	r2, [r3, #12]
 80087a0:	e002      	b.n	80087a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80087b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3728      	adds	r7, #40	@ 0x28
 80087bc:	46bd      	mov	sp, r7
 80087be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c2:	bf00      	nop
 80087c4:	40008000 	.word	0x40008000
 80087c8:	00f42400 	.word	0x00f42400

080087cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d01a      	beq.n	80088e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ca:	d10a      	bne.n	80088e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	605a      	str	r2, [r3, #4]
  }
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b098      	sub	sp, #96	@ 0x60
 8008914:	af02      	add	r7, sp, #8
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008920:	f7fb fa00 	bl	8003d24 <HAL_GetTick>
 8008924:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b08      	cmp	r3, #8
 8008932:	d12e      	bne.n	8008992 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008934:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800893c:	2200      	movs	r2, #0
 800893e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f88c 	bl	8008a60 <UART_WaitOnFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d021      	beq.n	8008992 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800895c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008962:	653b      	str	r3, [r7, #80]	@ 0x50
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800896c:	647b      	str	r3, [r7, #68]	@ 0x44
 800896e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800897a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e6      	bne.n	800894e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e062      	b.n	8008a58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b04      	cmp	r3, #4
 800899e:	d149      	bne.n	8008a34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089a8:	2200      	movs	r2, #0
 80089aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f856 	bl	8008a60 <UART_WaitOnFlagUntilTimeout>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d03c      	beq.n	8008a34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	623b      	str	r3, [r7, #32]
   return(result);
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80089da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3308      	adds	r3, #8
 80089f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a0c:	61fa      	str	r2, [r7, #28]
 8008a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	69b9      	ldr	r1, [r7, #24]
 8008a12:	69fa      	ldr	r2, [r7, #28]
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	617b      	str	r3, [r7, #20]
   return(result);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e5      	bne.n	80089ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2220      	movs	r2, #32
 8008a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e011      	b.n	8008a58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3758      	adds	r7, #88	@ 0x58
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a70:	e04f      	b.n	8008b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d04b      	beq.n	8008b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fb f953 	bl	8003d24 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e04e      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d037      	beq.n	8008b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b80      	cmp	r3, #128	@ 0x80
 8008aa6:	d034      	beq.n	8008b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b40      	cmp	r3, #64	@ 0x40
 8008aac:	d031      	beq.n	8008b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d110      	bne.n	8008ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f8ff 	bl	8008cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2208      	movs	r2, #8
 8008ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e029      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aec:	d111      	bne.n	8008b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f8e5 	bl	8008cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e00f      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	bf0c      	ite	eq
 8008b22:	2301      	moveq	r3, #1
 8008b24:	2300      	movne	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d0a0      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b096      	sub	sp, #88	@ 0x58
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	88fa      	ldrh	r2, [r7, #6]
 8008b54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2222      	movs	r2, #34	@ 0x22
 8008b64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d028      	beq.n	8008bc2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b74:	4a3e      	ldr	r2, [pc, #248]	@ (8008c70 <UART_Start_Receive_DMA+0x134>)
 8008b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8008c74 <UART_Start_Receive_DMA+0x138>)
 8008b7e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b84:	4a3c      	ldr	r2, [pc, #240]	@ (8008c78 <UART_Start_Receive_DMA+0x13c>)
 8008b86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3324      	adds	r3, #36	@ 0x24
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	f7fb fb1a 	bl	80041dc <HAL_DMA_Start_IT>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2210      	movs	r2, #16
 8008bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e051      	b.n	8008c66 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d018      	beq.n	8008bfc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bde:	657b      	str	r3, [r7, #84]	@ 0x54
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e6      	bne.n	8008bca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3308      	adds	r3, #8
 8008c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	f043 0301 	orr.w	r3, r3, #1
 8008c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c1c:	637a      	str	r2, [r7, #52]	@ 0x34
 8008c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e5      	bne.n	8008bfc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3308      	adds	r3, #8
 8008c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c50:	623a      	str	r2, [r7, #32]
 8008c52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	69f9      	ldr	r1, [r7, #28]
 8008c56:	6a3a      	ldr	r2, [r7, #32]
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e5      	bne.n	8008c30 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3758      	adds	r7, #88	@ 0x58
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	08008d91 	.word	0x08008d91
 8008c74:	08008ebd 	.word	0x08008ebd
 8008c78:	08008efb 	.word	0x08008efb

08008c7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b089      	sub	sp, #36	@ 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c98:	61fb      	str	r3, [r7, #28]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6979      	ldr	r1, [r7, #20]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e6      	bne.n	8008c84 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008cbc:	bf00      	nop
 8008cbe:	3724      	adds	r7, #36	@ 0x24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b095      	sub	sp, #84	@ 0x54
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e6      	bne.n	8008cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3308      	adds	r3, #8
 8008d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	f023 0301 	bic.w	r3, r3, #1
 8008d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e5      	bne.n	8008d02 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d118      	bne.n	8008d70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 0310 	bic.w	r3, r3, #16
 8008d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6979      	ldr	r1, [r7, #20]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008d84:	bf00      	nop
 8008d86:	3754      	adds	r7, #84	@ 0x54
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b09c      	sub	sp, #112	@ 0x70
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d171      	bne.n	8008e90 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e6      	bne.n	8008db4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3308      	adds	r3, #8
 8008dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df8:	f023 0301 	bic.w	r3, r3, #1
 8008dfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3308      	adds	r3, #8
 8008e04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e06:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e5      	bne.n	8008de6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	623b      	str	r3, [r7, #32]
   return(result);
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e5      	bne.n	8008e1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e50:	2220      	movs	r2, #32
 8008e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d118      	bne.n	8008e90 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0310 	bic.w	r3, r3, #16
 8008e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	69b9      	ldr	r1, [r7, #24]
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	617b      	str	r3, [r7, #20]
   return(result);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e6      	bne.n	8008e5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e92:	2200      	movs	r2, #0
 8008e94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d107      	bne.n	8008eae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ea8:	f7f8 f9a0 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eac:	e002      	b.n	8008eb4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008eae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008eb0:	f7ff f9b6 	bl	8008220 <HAL_UART_RxCpltCallback>
}
 8008eb4:	bf00      	nop
 8008eb6:	3770      	adds	r7, #112	@ 0x70
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d109      	bne.n	8008eec <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7f8 f981 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eea:	e002      	b.n	8008ef2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff f9a1 	bl	8008234 <HAL_UART_RxHalfCpltCallback>
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f20:	2b80      	cmp	r3, #128	@ 0x80
 8008f22:	d109      	bne.n	8008f38 <UART_DMAError+0x3e>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b21      	cmp	r3, #33	@ 0x21
 8008f28:	d106      	bne.n	8008f38 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008f32:	6978      	ldr	r0, [r7, #20]
 8008f34:	f7ff fea2 	bl	8008c7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f42:	2b40      	cmp	r3, #64	@ 0x40
 8008f44:	d109      	bne.n	8008f5a <UART_DMAError+0x60>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b22      	cmp	r3, #34	@ 0x22
 8008f4a:	d106      	bne.n	8008f5a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008f54:	6978      	ldr	r0, [r7, #20]
 8008f56:	f7ff feb7 	bl	8008cc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f60:	f043 0210 	orr.w	r2, r3, #16
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	f7ff f96c 	bl	8008248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f70:	bf00      	nop
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff f956 	bl	8008248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc0:	61fb      	str	r3, [r7, #28]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6979      	ldr	r1, [r7, #20]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e6      	bne.n	8008fac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7f8 f9a6 	bl	800133c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ff0:	bf00      	nop
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	@ 0x30
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4613      	mov	r3, r2
 8009018:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009020:	2b20      	cmp	r3, #32
 8009022:	d142      	bne.n	80090aa <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e03b      	b.n	80090ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	461a      	mov	r2, r3
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff fd78 	bl	8008b3c <UART_Start_Receive_DMA>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009056:	2b00      	cmp	r3, #0
 8009058:	d124      	bne.n	80090a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800905e:	2b01      	cmp	r3, #1
 8009060:	d11d      	bne.n	800909e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2210      	movs	r2, #16
 8009068:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	617b      	str	r3, [r7, #20]
   return(result);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f043 0310 	orr.w	r3, r3, #16
 800907e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
 800908a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6a39      	ldr	r1, [r7, #32]
 800908e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	61fb      	str	r3, [r7, #28]
   return(result);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800909c:	e002      	b.n	80090a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80090a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090a8:	e000      	b.n	80090ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80090aa:	2302      	movs	r3, #2
  }
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3730      	adds	r7, #48	@ 0x30
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <__NVIC_SetPriority>:
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	db0a      	blt.n	80090de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	490c      	ldr	r1, [pc, #48]	@ (8009100 <__NVIC_SetPriority+0x4c>)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	0112      	lsls	r2, r2, #4
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	440b      	add	r3, r1
 80090d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80090dc:	e00a      	b.n	80090f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4908      	ldr	r1, [pc, #32]	@ (8009104 <__NVIC_SetPriority+0x50>)
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	3b04      	subs	r3, #4
 80090ec:	0112      	lsls	r2, r2, #4
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	440b      	add	r3, r1
 80090f2:	761a      	strb	r2, [r3, #24]
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	e000e100 	.word	0xe000e100
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800910c:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <SysTick_Handler+0x1c>)
 800910e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009110:	f001 fe62 	bl	800add8 <xTaskGetSchedulerState>
 8009114:	4603      	mov	r3, r0
 8009116:	2b01      	cmp	r3, #1
 8009118:	d001      	beq.n	800911e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800911a:	f002 fe65 	bl	800bde8 <xPortSysTickHandler>
  }
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	e000e010 	.word	0xe000e010

08009128 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800912c:	2100      	movs	r1, #0
 800912e:	f06f 0004 	mvn.w	r0, #4
 8009132:	f7ff ffbf 	bl	80090b4 <__NVIC_SetPriority>
#endif
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009142:	f3ef 8305 	mrs	r3, IPSR
 8009146:	603b      	str	r3, [r7, #0]
  return(result);
 8009148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800914e:	f06f 0305 	mvn.w	r3, #5
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	e00c      	b.n	8009170 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <osKernelInitialize+0x44>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800915e:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <osKernelInitialize+0x44>)
 8009160:	2201      	movs	r2, #1
 8009162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009164:	2300      	movs	r3, #0
 8009166:	607b      	str	r3, [r7, #4]
 8009168:	e002      	b.n	8009170 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800916a:	f04f 33ff 	mov.w	r3, #4294967295
 800916e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009170:	687b      	ldr	r3, [r7, #4]
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	2000070c 	.word	0x2000070c

08009184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918a:	f3ef 8305 	mrs	r3, IPSR
 800918e:	603b      	str	r3, [r7, #0]
  return(result);
 8009190:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009196:	f06f 0305 	mvn.w	r3, #5
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	e010      	b.n	80091c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800919e:	4b0b      	ldr	r3, [pc, #44]	@ (80091cc <osKernelStart+0x48>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d109      	bne.n	80091ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80091a6:	f7ff ffbf 	bl	8009128 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091aa:	4b08      	ldr	r3, [pc, #32]	@ (80091cc <osKernelStart+0x48>)
 80091ac:	2202      	movs	r2, #2
 80091ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091b0:	f001 f99e 	bl	800a4f0 <vTaskStartScheduler>
      stat = osOK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	607b      	str	r3, [r7, #4]
 80091b8:	e002      	b.n	80091c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091ba:	f04f 33ff 	mov.w	r3, #4294967295
 80091be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091c0:	687b      	ldr	r3, [r7, #4]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	2000070c 	.word	0x2000070c

080091d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08e      	sub	sp, #56	@ 0x38
 80091d4:	af04      	add	r7, sp, #16
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e0:	f3ef 8305 	mrs	r3, IPSR
 80091e4:	617b      	str	r3, [r7, #20]
  return(result);
 80091e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d17e      	bne.n	80092ea <osThreadNew+0x11a>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d07b      	beq.n	80092ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091f2:	2380      	movs	r3, #128	@ 0x80
 80091f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091f6:	2318      	movs	r3, #24
 80091f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d045      	beq.n	8009296 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <osThreadNew+0x48>
        name = attr->name;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <osThreadNew+0x6e>
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b38      	cmp	r3, #56	@ 0x38
 8009230:	d805      	bhi.n	800923e <osThreadNew+0x6e>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <osThreadNew+0x72>
        return (NULL);
 800923e:	2300      	movs	r3, #0
 8009240:	e054      	b.n	80092ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	089b      	lsrs	r3, r3, #2
 8009250:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00e      	beq.n	8009278 <osThreadNew+0xa8>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	2ba7      	cmp	r3, #167	@ 0xa7
 8009260:	d90a      	bls.n	8009278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009266:	2b00      	cmp	r3, #0
 8009268:	d006      	beq.n	8009278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <osThreadNew+0xa8>
        mem = 1;
 8009272:	2301      	movs	r3, #1
 8009274:	61bb      	str	r3, [r7, #24]
 8009276:	e010      	b.n	800929a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10c      	bne.n	800929a <osThreadNew+0xca>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d108      	bne.n	800929a <osThreadNew+0xca>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <osThreadNew+0xca>
          mem = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	e001      	b.n	800929a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d110      	bne.n	80092c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092a8:	9202      	str	r2, [sp, #8]
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6a3a      	ldr	r2, [r7, #32]
 80092b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 ff26 	bl	800a108 <xTaskCreateStatic>
 80092bc:	4603      	mov	r3, r0
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	e013      	b.n	80092ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d110      	bne.n	80092ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 ff74 	bl	800a1c8 <xTaskCreate>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d001      	beq.n	80092ea <osThreadNew+0x11a>
            hTask = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092ea:	693b      	ldr	r3, [r7, #16]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3728      	adds	r7, #40	@ 0x28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <osThreadFlagsSet+0x1a>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	da03      	bge.n	8009316 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800930e:	f06f 0303 	mvn.w	r3, #3
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e035      	b.n	8009382 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009316:	f04f 33ff 	mov.w	r3, #4294967295
 800931a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800931c:	f3ef 8305 	mrs	r3, IPSR
 8009320:	613b      	str	r3, [r7, #16]
  return(result);
 8009322:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009324:	2b00      	cmp	r3, #0
 8009326:	d01f      	beq.n	8009368 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009328:	2300      	movs	r3, #0
 800932a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	2201      	movs	r2, #1
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6978      	ldr	r0, [r7, #20]
 800933a:	f001 fefd 	bl	800b138 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	2200      	movs	r2, #0
 8009344:	9200      	str	r2, [sp, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	2100      	movs	r1, #0
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f001 fef4 	bl	800b138 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d015      	beq.n	8009382 <osThreadFlagsSet+0x8e>
 8009356:	4b0d      	ldr	r3, [pc, #52]	@ (800938c <osThreadFlagsSet+0x98>)
 8009358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	e00c      	b.n	8009382 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009368:	2300      	movs	r3, #0
 800936a:	2201      	movs	r2, #1
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6978      	ldr	r0, [r7, #20]
 8009370:	f001 fe20 	bl	800afb4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	6978      	ldr	r0, [r7, #20]
 800937e:	f001 fe19 	bl	800afb4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009382:	68fb      	ldr	r3, [r7, #12]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009398:	f3ef 8305 	mrs	r3, IPSR
 800939c:	60fb      	str	r3, [r7, #12]
  return(result);
 800939e:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 80093a4:	f06f 0305 	mvn.w	r3, #5
 80093a8:	617b      	str	r3, [r7, #20]
 80093aa:	e02a      	b.n	8009402 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da03      	bge.n	80093ba <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80093b2:	f06f 0303 	mvn.w	r3, #3
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e023      	b.n	8009402 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80093ba:	f001 fcfd 	bl	800adb8 <xTaskGetCurrentTaskHandle>
 80093be:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	2200      	movs	r2, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	6938      	ldr	r0, [r7, #16]
 80093ca:	f001 fdf3 	bl	800afb4 <xTaskGenericNotify>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d113      	bne.n	80093fc <osThreadFlagsClear+0x6c>
      rflags = cflags;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	43da      	mvns	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4013      	ands	r3, r2
 80093e0:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	2300      	movs	r3, #0
 80093e6:	2203      	movs	r2, #3
 80093e8:	6938      	ldr	r0, [r7, #16]
 80093ea:	f001 fde3 	bl	800afb4 <xTaskGenericNotify>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d006      	beq.n	8009402 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 80093f4:	f04f 33ff 	mov.w	r3, #4294967295
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	e002      	b.n	8009402 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80093fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009400:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8009402:	697b      	ldr	r3, [r7, #20]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800940c:	b580      	push	{r7, lr}
 800940e:	b08c      	sub	sp, #48	@ 0x30
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009418:	f3ef 8305 	mrs	r3, IPSR
 800941c:	617b      	str	r3, [r7, #20]
  return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009424:	f06f 0305 	mvn.w	r3, #5
 8009428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800942a:	e06b      	b.n	8009504 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da03      	bge.n	800943a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009432:	f06f 0303 	mvn.w	r3, #3
 8009436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009438:	e064      	b.n	8009504 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009448:	e001      	b.n	800944e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8009456:	f001 f967 	bl	800a728 <xTaskGetTickCount>
 800945a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800945c:	f107 0210 	add.w	r2, r7, #16
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009464:	2000      	movs	r0, #0
 8009466:	f001 fd45 	bl	800aef4 <xTaskNotifyWait>
 800946a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d137      	bne.n	80094e2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4013      	ands	r3, r2
 8009478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800947e:	4313      	orrs	r3, r2
 8009480:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00c      	beq.n	80094a6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	4013      	ands	r3, r2
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	429a      	cmp	r2, r3
 8009496:	d032      	beq.n	80094fe <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10f      	bne.n	80094be <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800949e:	f06f 0302 	mvn.w	r3, #2
 80094a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80094a4:	e02e      	b.n	8009504 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094aa:	4013      	ands	r3, r2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d128      	bne.n	8009502 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80094b6:	f06f 0302 	mvn.w	r3, #2
 80094ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80094bc:	e022      	b.n	8009504 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80094be:	f001 f933 	bl	800a728 <xTaskGetTickCount>
 80094c2:	4602      	mov	r2, r0
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d902      	bls.n	80094d8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80094d6:	e00e      	b.n	80094f6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80094d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	627b      	str	r3, [r7, #36]	@ 0x24
 80094e0:	e009      	b.n	80094f6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d103      	bne.n	80094f0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80094e8:	f06f 0302 	mvn.w	r3, #2
 80094ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ee:	e002      	b.n	80094f6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80094f0:	f06f 0301 	mvn.w	r3, #1
 80094f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1af      	bne.n	800945c <osThreadFlagsWait+0x50>
 80094fc:	e002      	b.n	8009504 <osThreadFlagsWait+0xf8>
            break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <osThreadFlagsWait+0xf8>
            break;
 8009502:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009506:	4618      	mov	r0, r3
 8009508:	3730      	adds	r7, #48	@ 0x30
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009516:	f3ef 8305 	mrs	r3, IPSR
 800951a:	60bb      	str	r3, [r7, #8]
  return(result);
 800951c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <osDelay+0x1c>
    stat = osErrorISR;
 8009522:	f06f 0305 	mvn.w	r3, #5
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e007      	b.n	800953a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 ffa5 	bl	800a484 <vTaskDelay>
    }
  }

  return (stat);
 800953a:	68fb      	ldr	r3, [r7, #12]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4a07      	ldr	r2, [pc, #28]	@ (8009570 <vApplicationGetIdleTaskMemory+0x2c>)
 8009554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a06      	ldr	r2, [pc, #24]	@ (8009574 <vApplicationGetIdleTaskMemory+0x30>)
 800955a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2280      	movs	r2, #128	@ 0x80
 8009560:	601a      	str	r2, [r3, #0]
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000710 	.word	0x20000710
 8009574:	200007b8 	.word	0x200007b8

08009578 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4a07      	ldr	r2, [pc, #28]	@ (80095a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009588:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4a06      	ldr	r2, [pc, #24]	@ (80095a8 <vApplicationGetTimerTaskMemory+0x30>)
 800958e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009596:	601a      	str	r2, [r3, #0]
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	200009b8 	.word	0x200009b8
 80095a8:	20000a60 	.word	0x20000a60

080095ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f103 0208 	add.w	r2, r3, #8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295
 80095c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f103 0208 	add.w	r2, r3, #8
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f103 0208 	add.w	r2, r3, #8
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	601a      	str	r2, [r3, #0]
}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d103      	bne.n	800966e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	e00c      	b.n	8009688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3308      	adds	r3, #8
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	e002      	b.n	800967c <vListInsert+0x2e>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	429a      	cmp	r2, r3
 8009686:	d2f6      	bcs.n	8009676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	6892      	ldr	r2, [r2, #8]
 80096d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6852      	ldr	r2, [r2, #4]
 80096e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d103      	bne.n	80096f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689a      	ldr	r2, [r3, #8]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1e5a      	subs	r2, r3, #1
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10b      	bne.n	8009740 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800973a:	bf00      	nop
 800973c:	bf00      	nop
 800973e:	e7fd      	b.n	800973c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009740:	f002 fac2 	bl	800bcc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800974c:	68f9      	ldr	r1, [r7, #12]
 800974e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	441a      	add	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009770:	3b01      	subs	r3, #1
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009776:	fb01 f303 	mul.w	r3, r1, r3
 800977a:	441a      	add	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	22ff      	movs	r2, #255	@ 0xff
 8009784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	22ff      	movs	r2, #255	@ 0xff
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d114      	bne.n	80097c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01a      	beq.n	80097d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3310      	adds	r3, #16
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 f942 	bl	800aa2c <xTaskRemoveFromEventList>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d012      	beq.n	80097d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80097ae:	4b0d      	ldr	r3, [pc, #52]	@ (80097e4 <xQueueGenericReset+0xd0>)
 80097b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	e009      	b.n	80097d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3310      	adds	r3, #16
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fef1 	bl	80095ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3324      	adds	r3, #36	@ 0x24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff feec 	bl	80095ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80097d4:	f002 faaa 	bl	800bd2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80097d8:	2301      	movs	r3, #1
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	e000ed04 	.word	0xe000ed04

080097e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08e      	sub	sp, #56	@ 0x38
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10b      	bne.n	8009814 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800980e:	bf00      	nop
 8009810:	bf00      	nop
 8009812:	e7fd      	b.n	8009810 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	e7fd      	b.n	800982e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <xQueueGenericCreateStatic+0x56>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <xQueueGenericCreateStatic+0x5a>
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <xQueueGenericCreateStatic+0x5c>
 8009842:	2300      	movs	r3, #0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	623b      	str	r3, [r7, #32]
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	e7fd      	b.n	800985c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <xQueueGenericCreateStatic+0x84>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <xQueueGenericCreateStatic+0x88>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <xQueueGenericCreateStatic+0x8a>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	61fb      	str	r3, [r7, #28]
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800988e:	2350      	movs	r3, #80	@ 0x50
 8009890:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b50      	cmp	r3, #80	@ 0x50
 8009896:	d00b      	beq.n	80098b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	61bb      	str	r3, [r7, #24]
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	e7fd      	b.n	80098ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80098b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00d      	beq.n	80098d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80098bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	4613      	mov	r3, r2
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f805 	bl	80098e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80098d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80098da:	4618      	mov	r0, r3
 80098dc:	3730      	adds	r7, #48	@ 0x30
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	60b9      	str	r1, [r7, #8]
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e002      	b.n	8009904 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009910:	2101      	movs	r1, #1
 8009912:	69b8      	ldr	r0, [r7, #24]
 8009914:	f7ff fefe 	bl	8009714 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08e      	sub	sp, #56	@ 0x38
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10b      	bne.n	800995c <xQueueGenericSend+0x34>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009956:	bf00      	nop
 8009958:	bf00      	nop
 800995a:	e7fd      	b.n	8009958 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d103      	bne.n	800996a <xQueueGenericSend+0x42>
 8009962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <xQueueGenericSend+0x46>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <xQueueGenericSend+0x48>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10b      	bne.n	800998c <xQueueGenericSend+0x64>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d103      	bne.n	800999a <xQueueGenericSend+0x72>
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <xQueueGenericSend+0x76>
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <xQueueGenericSend+0x78>
 800999e:	2300      	movs	r3, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10b      	bne.n	80099bc <xQueueGenericSend+0x94>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	623b      	str	r3, [r7, #32]
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	e7fd      	b.n	80099b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099bc:	f001 fa0c 	bl	800add8 <xTaskGetSchedulerState>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d102      	bne.n	80099cc <xQueueGenericSend+0xa4>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <xQueueGenericSend+0xa8>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <xQueueGenericSend+0xaa>
 80099d0:	2300      	movs	r3, #0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <xQueueGenericSend+0xc6>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	61fb      	str	r3, [r7, #28]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099ee:	f002 f96b 	bl	800bcc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d302      	bcc.n	8009a04 <xQueueGenericSend+0xdc>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d129      	bne.n	8009a58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a0a:	f000 fa0f 	bl	8009e2c <prvCopyDataToQueue>
 8009a0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d010      	beq.n	8009a3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1a:	3324      	adds	r3, #36	@ 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 f805 	bl	800aa2c <xTaskRemoveFromEventList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d013      	beq.n	8009a50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a28:	4b3f      	ldr	r3, [pc, #252]	@ (8009b28 <xQueueGenericSend+0x200>)
 8009a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	e00a      	b.n	8009a50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a40:	4b39      	ldr	r3, [pc, #228]	@ (8009b28 <xQueueGenericSend+0x200>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a50:	f002 f96c 	bl	800bd2c <vPortExitCritical>
				return pdPASS;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e063      	b.n	8009b20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d103      	bne.n	8009a66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a5e:	f002 f965 	bl	800bd2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e05c      	b.n	8009b20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a6c:	f107 0314 	add.w	r3, r7, #20
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 f83f 	bl	800aaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a76:	2301      	movs	r3, #1
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a7a:	f002 f957 	bl	800bd2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a7e:	f000 fda7 	bl	800a5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a82:	f002 f921 	bl	800bcc8 <vPortEnterCritical>
 8009a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a8c:	b25b      	sxtb	r3, r3
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d103      	bne.n	8009a9c <xQueueGenericSend+0x174>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009aa2:	b25b      	sxtb	r3, r3
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d103      	bne.n	8009ab2 <xQueueGenericSend+0x18a>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ab2:	f002 f93b 	bl	800bd2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ab6:	1d3a      	adds	r2, r7, #4
 8009ab8:	f107 0314 	add.w	r3, r7, #20
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 f82e 	bl	800ab20 <xTaskCheckForTimeOut>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d124      	bne.n	8009b14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009aca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009acc:	f000 faa6 	bl	800a01c <prvIsQueueFull>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d018      	beq.n	8009b08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	3310      	adds	r3, #16
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 ff52 	bl	800a988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ae6:	f000 fa31 	bl	8009f4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009aea:	f000 fd7f 	bl	800a5ec <xTaskResumeAll>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f af7c 	bne.w	80099ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009af6:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <xQueueGenericSend+0x200>)
 8009af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	e772      	b.n	80099ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b0a:	f000 fa1f 	bl	8009f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b0e:	f000 fd6d 	bl	800a5ec <xTaskResumeAll>
 8009b12:	e76c      	b.n	80099ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b16:	f000 fa19 	bl	8009f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b1a:	f000 fd67 	bl	800a5ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3738      	adds	r7, #56	@ 0x38
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b090      	sub	sp, #64	@ 0x40
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <xQueueGenericSendFromISR+0x3e>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <xQueueGenericSendFromISR+0x42>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericSendFromISR+0x44>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d103      	bne.n	8009b9a <xQueueGenericSendFromISR+0x6e>
 8009b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <xQueueGenericSendFromISR+0x72>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <xQueueGenericSendFromISR+0x74>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10b      	bne.n	8009bbc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	623b      	str	r3, [r7, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	e7fd      	b.n	8009bb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bbc:	f002 f964 	bl	800be88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8009bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	61fa      	str	r2, [r7, #28]
 8009bd6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009bd8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d302      	bcc.n	8009bee <xQueueGenericSendFromISR+0xc2>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d12f      	bne.n	8009c4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	68b9      	ldr	r1, [r7, #8]
 8009c02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c04:	f000 f912 	bl	8009e2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d112      	bne.n	8009c38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d016      	beq.n	8009c48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1c:	3324      	adds	r3, #36	@ 0x24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ff04 	bl	800aa2c <xTaskRemoveFromEventList>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00e      	beq.n	8009c48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	e007      	b.n	8009c48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	b25a      	sxtb	r2, r3
 8009c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009c4c:	e001      	b.n	8009c52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3740      	adds	r7, #64	@ 0x40
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08c      	sub	sp, #48	@ 0x30
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10b      	bne.n	8009c9a <xQueueReceive+0x32>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	623b      	str	r3, [r7, #32]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <xQueueReceive+0x40>
 8009ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <xQueueReceive+0x44>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <xQueueReceive+0x46>
 8009cac:	2300      	movs	r3, #0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <xQueueReceive+0x62>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	61fb      	str	r3, [r7, #28]
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cca:	f001 f885 	bl	800add8 <xTaskGetSchedulerState>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <xQueueReceive+0x72>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <xQueueReceive+0x76>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <xQueueReceive+0x78>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <xQueueReceive+0x94>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	61bb      	str	r3, [r7, #24]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cfc:	f001 ffe4 	bl	800bcc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01f      	beq.n	8009d4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d10:	f000 f8f6 	bl	8009f00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d16:	1e5a      	subs	r2, r3, #1
 8009d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00f      	beq.n	8009d44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d26:	3310      	adds	r3, #16
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fe7f 	bl	800aa2c <xTaskRemoveFromEventList>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d34:	4b3c      	ldr	r3, [pc, #240]	@ (8009e28 <xQueueReceive+0x1c0>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d44:	f001 fff2 	bl	800bd2c <vPortExitCritical>
				return pdPASS;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e069      	b.n	8009e20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d103      	bne.n	8009d5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d52:	f001 ffeb 	bl	800bd2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e062      	b.n	8009e20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d60:	f107 0310 	add.w	r3, r7, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fec5 	bl	800aaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d6e:	f001 ffdd 	bl	800bd2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d72:	f000 fc2d 	bl	800a5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d76:	f001 ffa7 	bl	800bcc8 <vPortEnterCritical>
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d80:	b25b      	sxtb	r3, r3
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d103      	bne.n	8009d90 <xQueueReceive+0x128>
 8009d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d96:	b25b      	sxtb	r3, r3
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d103      	bne.n	8009da6 <xQueueReceive+0x13e>
 8009d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009da6:	f001 ffc1 	bl	800bd2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009daa:	1d3a      	adds	r2, r7, #4
 8009dac:	f107 0310 	add.w	r3, r7, #16
 8009db0:	4611      	mov	r1, r2
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 feb4 	bl	800ab20 <xTaskCheckForTimeOut>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d123      	bne.n	8009e06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dc0:	f000 f916 	bl	8009ff0 <prvIsQueueEmpty>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d017      	beq.n	8009dfa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dcc:	3324      	adds	r3, #36	@ 0x24
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fdd8 	bl	800a988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dda:	f000 f8b7 	bl	8009f4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009dde:	f000 fc05 	bl	800a5ec <xTaskResumeAll>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d189      	bne.n	8009cfc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009de8:	4b0f      	ldr	r3, [pc, #60]	@ (8009e28 <xQueueReceive+0x1c0>)
 8009dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	e780      	b.n	8009cfc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dfc:	f000 f8a6 	bl	8009f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e00:	f000 fbf4 	bl	800a5ec <xTaskResumeAll>
 8009e04:	e77a      	b.n	8009cfc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e08:	f000 f8a0 	bl	8009f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e0c:	f000 fbee 	bl	800a5ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e12:	f000 f8ed 	bl	8009ff0 <prvIsQueueEmpty>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f43f af6f 	beq.w	8009cfc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3730      	adds	r7, #48	@ 0x30
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10d      	bne.n	8009e66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d14d      	bne.n	8009eee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 ffdc 	bl	800ae14 <xTaskPriorityDisinherit>
 8009e5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	609a      	str	r2, [r3, #8]
 8009e64:	e043      	b.n	8009eee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d119      	bne.n	8009ea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6858      	ldr	r0, [r3, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e74:	461a      	mov	r2, r3
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	f003 fa4b 	bl	800d312 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e84:	441a      	add	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d32b      	bcc.n	8009eee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	605a      	str	r2, [r3, #4]
 8009e9e:	e026      	b.n	8009eee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	68d8      	ldr	r0, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	f003 fa31 	bl	800d312 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	68da      	ldr	r2, [r3, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb8:	425b      	negs	r3, r3
 8009eba:	441a      	add	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d207      	bcs.n	8009edc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed4:	425b      	negs	r3, r3
 8009ed6:	441a      	add	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d105      	bne.n	8009eee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009ef6:	697b      	ldr	r3, [r7, #20]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d018      	beq.n	8009f44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1a:	441a      	add	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68da      	ldr	r2, [r3, #12]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d303      	bcc.n	8009f34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68d9      	ldr	r1, [r3, #12]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6838      	ldr	r0, [r7, #0]
 8009f40:	f003 f9e7 	bl	800d312 <memcpy>
	}
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f54:	f001 feb8 	bl	800bcc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f60:	e011      	b.n	8009f86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d012      	beq.n	8009f90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3324      	adds	r3, #36	@ 0x24
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fd5c 	bl	800aa2c <xTaskRemoveFromEventList>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f7a:	f000 fe35 	bl	800abe8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	dce9      	bgt.n	8009f62 <prvUnlockQueue+0x16>
 8009f8e:	e000      	b.n	8009f92 <prvUnlockQueue+0x46>
					break;
 8009f90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	22ff      	movs	r2, #255	@ 0xff
 8009f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009f9a:	f001 fec7 	bl	800bd2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f9e:	f001 fe93 	bl	800bcc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009faa:	e011      	b.n	8009fd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d012      	beq.n	8009fda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3310      	adds	r3, #16
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 fd37 	bl	800aa2c <xTaskRemoveFromEventList>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009fc4:	f000 fe10 	bl	800abe8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dce9      	bgt.n	8009fac <prvUnlockQueue+0x60>
 8009fd8:	e000      	b.n	8009fdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009fda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	22ff      	movs	r2, #255	@ 0xff
 8009fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009fe4:	f001 fea2 	bl	800bd2c <vPortExitCritical>
}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ff8:	f001 fe66 	bl	800bcc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	e001      	b.n	800a00e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a00e:	f001 fe8d 	bl	800bd2c <vPortExitCritical>

	return xReturn;
 800a012:	68fb      	ldr	r3, [r7, #12]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a024:	f001 fe50 	bl	800bcc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a030:	429a      	cmp	r2, r3
 800a032:	d102      	bne.n	800a03a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a034:	2301      	movs	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	e001      	b.n	800a03e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a03e:	f001 fe75 	bl	800bd2c <vPortExitCritical>

	return xReturn;
 800a042:	68fb      	ldr	r3, [r7, #12]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	e014      	b.n	800a086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a05c:	4a0f      	ldr	r2, [pc, #60]	@ (800a09c <vQueueAddToRegistry+0x50>)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10b      	bne.n	800a080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a068:	490c      	ldr	r1, [pc, #48]	@ (800a09c <vQueueAddToRegistry+0x50>)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a072:	4a0a      	ldr	r2, [pc, #40]	@ (800a09c <vQueueAddToRegistry+0x50>)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4413      	add	r3, r2
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a07e:	e006      	b.n	800a08e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b07      	cmp	r3, #7
 800a08a:	d9e7      	bls.n	800a05c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000e60 	.word	0x20000e60

0800a0a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0b0:	f001 fe0a 	bl	800bcc8 <vPortEnterCritical>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d103      	bne.n	800a0ca <vQueueWaitForMessageRestricted+0x2a>
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d6:	d103      	bne.n	800a0e0 <vQueueWaitForMessageRestricted+0x40>
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e0:	f001 fe24 	bl	800bd2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	3324      	adds	r3, #36	@ 0x24
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fc6d 	bl	800a9d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0fa:	6978      	ldr	r0, [r7, #20]
 800a0fc:	f7ff ff26 	bl	8009f4c <prvUnlockQueue>
	}
 800a100:	bf00      	nop
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08e      	sub	sp, #56	@ 0x38
 800a10c:	af04      	add	r7, sp, #16
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10b      	bne.n	800a134 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	623b      	str	r3, [r7, #32]
}
 800a12e:	bf00      	nop
 800a130:	bf00      	nop
 800a132:	e7fd      	b.n	800a130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10b      	bne.n	800a152 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	61fb      	str	r3, [r7, #28]
}
 800a14c:	bf00      	nop
 800a14e:	bf00      	nop
 800a150:	e7fd      	b.n	800a14e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a152:	23a8      	movs	r3, #168	@ 0xa8
 800a154:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2ba8      	cmp	r3, #168	@ 0xa8
 800a15a:	d00b      	beq.n	800a174 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	61bb      	str	r3, [r7, #24]
}
 800a16e:	bf00      	nop
 800a170:	bf00      	nop
 800a172:	e7fd      	b.n	800a170 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a174:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01e      	beq.n	800a1ba <xTaskCreateStatic+0xb2>
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d01b      	beq.n	800a1ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a18a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a194:	2300      	movs	r3, #0
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	9302      	str	r3, [sp, #8]
 800a19c:	f107 0314 	add.w	r3, r7, #20
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f851 	bl	800a254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1b4:	f000 f8f6 	bl	800a3a4 <prvAddNewTaskToReadyList>
 800a1b8:	e001      	b.n	800a1be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1be:	697b      	ldr	r3, [r7, #20]
	}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3728      	adds	r7, #40	@ 0x28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08c      	sub	sp, #48	@ 0x30
 800a1cc:	af04      	add	r7, sp, #16
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 fe95 	bl	800bf0c <pvPortMalloc>
 800a1e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1ea:	20a8      	movs	r0, #168	@ 0xa8
 800a1ec:	f001 fe8e 	bl	800bf0c <pvPortMalloc>
 800a1f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d003      	beq.n	800a200 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800a1fe:	e005      	b.n	800a20c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a200:	6978      	ldr	r0, [r7, #20]
 800a202:	f001 ff51 	bl	800c0a8 <vPortFree>
 800a206:	e001      	b.n	800a20c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a208:	2300      	movs	r3, #0
 800a20a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d017      	beq.n	800a242 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a21a:	88fa      	ldrh	r2, [r7, #6]
 800a21c:	2300      	movs	r3, #0
 800a21e:	9303      	str	r3, [sp, #12]
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	9302      	str	r3, [sp, #8]
 800a224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 f80f 	bl	800a254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a236:	69f8      	ldr	r0, [r7, #28]
 800a238:	f000 f8b4 	bl	800a3a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a23c:	2301      	movs	r3, #1
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	e002      	b.n	800a248 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a248:	69bb      	ldr	r3, [r7, #24]
	}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	461a      	mov	r2, r3
 800a26c:	21a5      	movs	r1, #165	@ 0xa5
 800a26e:	f002 ff0e 	bl	800d08e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a27c:	3b01      	subs	r3, #1
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	f023 0307 	bic.w	r3, r3, #7
 800a28a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	617b      	str	r3, [r7, #20]
}
 800a2a8:	bf00      	nop
 800a2aa:	bf00      	nop
 800a2ac:	e7fd      	b.n	800a2aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01f      	beq.n	800a2f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	e012      	b.n	800a2e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	7819      	ldrb	r1, [r3, #0]
 800a2c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3334      	adds	r3, #52	@ 0x34
 800a2ca:	460a      	mov	r2, r1
 800a2cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d006      	beq.n	800a2e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	2b0f      	cmp	r3, #15
 800a2e4:	d9e9      	bls.n	800a2ba <prvInitialiseNewTask+0x66>
 800a2e6:	e000      	b.n	800a2ea <prvInitialiseNewTask+0x96>
			{
				break;
 800a2e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2f2:	e003      	b.n	800a2fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fe:	2b37      	cmp	r3, #55	@ 0x37
 800a300:	d901      	bls.n	800a306 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a302:	2337      	movs	r3, #55	@ 0x37
 800a304:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a30a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a310:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	2200      	movs	r2, #0
 800a316:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	3304      	adds	r3, #4
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff f965 	bl	80095ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	3318      	adds	r3, #24
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff f960 	bl	80095ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a330:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a340:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2200      	movs	r2, #0
 800a346:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	3354      	adds	r3, #84	@ 0x54
 800a356:	224c      	movs	r2, #76	@ 0x4c
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f002 fe97 	bl	800d08e <memset>
 800a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a362:	4a0d      	ldr	r2, [pc, #52]	@ (800a398 <prvInitialiseNewTask+0x144>)
 800a364:	659a      	str	r2, [r3, #88]	@ 0x58
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	4a0c      	ldr	r2, [pc, #48]	@ (800a39c <prvInitialiseNewTask+0x148>)
 800a36a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a0 <prvInitialiseNewTask+0x14c>)
 800a370:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	68f9      	ldr	r1, [r7, #12]
 800a376:	69b8      	ldr	r0, [r7, #24]
 800a378:	f001 fb72 	bl	800ba60 <pxPortInitialiseStack>
 800a37c:	4602      	mov	r2, r0
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a38c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a38e:	bf00      	nop
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	2000343c 	.word	0x2000343c
 800a39c:	200034a4 	.word	0x200034a4
 800a3a0:	2000350c 	.word	0x2000350c

0800a3a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3ac:	f001 fc8c 	bl	800bcc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a468 <prvAddNewTaskToReadyList+0xc4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800a468 <prvAddNewTaskToReadyList+0xc4>)
 800a3b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3ba:	4b2c      	ldr	r3, [pc, #176]	@ (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3c8:	4b27      	ldr	r3, [pc, #156]	@ (800a468 <prvAddNewTaskToReadyList+0xc4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d110      	bne.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3d0:	f000 fc2e 	bl	800ac30 <prvInitialiseTaskLists>
 800a3d4:	e00d      	b.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3d6:	4b26      	ldr	r3, [pc, #152]	@ (800a470 <prvAddNewTaskToReadyList+0xcc>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3de:	4b23      	ldr	r3, [pc, #140]	@ (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d802      	bhi.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3ec:	4a1f      	ldr	r2, [pc, #124]	@ (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3f2:	4b20      	ldr	r3, [pc, #128]	@ (800a474 <prvAddNewTaskToReadyList+0xd0>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	4a1e      	ldr	r2, [pc, #120]	@ (800a474 <prvAddNewTaskToReadyList+0xd0>)
 800a3fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a474 <prvAddNewTaskToReadyList+0xd0>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a408:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <prvAddNewTaskToReadyList+0xd4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d903      	bls.n	800a418 <prvAddNewTaskToReadyList+0x74>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	4a18      	ldr	r2, [pc, #96]	@ (800a478 <prvAddNewTaskToReadyList+0xd4>)
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a41c:	4613      	mov	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4413      	add	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4a15      	ldr	r2, [pc, #84]	@ (800a47c <prvAddNewTaskToReadyList+0xd8>)
 800a426:	441a      	add	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	f7ff f8e9 	bl	8009606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a434:	f001 fc7a 	bl	800bd2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a438:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <prvAddNewTaskToReadyList+0xcc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00e      	beq.n	800a45e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a440:	4b0a      	ldr	r3, [pc, #40]	@ (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d207      	bcs.n	800a45e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a44e:	4b0c      	ldr	r3, [pc, #48]	@ (800a480 <prvAddNewTaskToReadyList+0xdc>)
 800a450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20001374 	.word	0x20001374
 800a46c:	20000ea0 	.word	0x20000ea0
 800a470:	20001380 	.word	0x20001380
 800a474:	20001390 	.word	0x20001390
 800a478:	2000137c 	.word	0x2000137c
 800a47c:	20000ea4 	.word	0x20000ea4
 800a480:	e000ed04 	.word	0xe000ed04

0800a484 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d018      	beq.n	800a4c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a496:	4b14      	ldr	r3, [pc, #80]	@ (800a4e8 <vTaskDelay+0x64>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <vTaskDelay+0x32>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	60bb      	str	r3, [r7, #8]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4b6:	f000 f88b 	bl	800a5d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 ff21 	bl	800b304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4c2:	f000 f893 	bl	800a5ec <xTaskResumeAll>
 800a4c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d107      	bne.n	800a4de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a4ce:	4b07      	ldr	r3, [pc, #28]	@ (800a4ec <vTaskDelay+0x68>)
 800a4d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	2000139c 	.word	0x2000139c
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08a      	sub	sp, #40	@ 0x28
 800a4f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4fe:	463a      	mov	r2, r7
 800a500:	1d39      	adds	r1, r7, #4
 800a502:	f107 0308 	add.w	r3, r7, #8
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff f81c 	bl	8009544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	9202      	str	r2, [sp, #8]
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	2300      	movs	r3, #0
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	2300      	movs	r3, #0
 800a51c:	460a      	mov	r2, r1
 800a51e:	4924      	ldr	r1, [pc, #144]	@ (800a5b0 <vTaskStartScheduler+0xc0>)
 800a520:	4824      	ldr	r0, [pc, #144]	@ (800a5b4 <vTaskStartScheduler+0xc4>)
 800a522:	f7ff fdf1 	bl	800a108 <xTaskCreateStatic>
 800a526:	4603      	mov	r3, r0
 800a528:	4a23      	ldr	r2, [pc, #140]	@ (800a5b8 <vTaskStartScheduler+0xc8>)
 800a52a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a52c:	4b22      	ldr	r3, [pc, #136]	@ (800a5b8 <vTaskStartScheduler+0xc8>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a534:	2301      	movs	r3, #1
 800a536:	617b      	str	r3, [r7, #20]
 800a538:	e001      	b.n	800a53e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d102      	bne.n	800a54a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a544:	f000 ff32 	bl	800b3ac <xTimerCreateTimerTask>
 800a548:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d11b      	bne.n	800a588 <vTaskStartScheduler+0x98>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	613b      	str	r3, [r7, #16]
}
 800a562:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a564:	4b15      	ldr	r3, [pc, #84]	@ (800a5bc <vTaskStartScheduler+0xcc>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3354      	adds	r3, #84	@ 0x54
 800a56a:	4a15      	ldr	r2, [pc, #84]	@ (800a5c0 <vTaskStartScheduler+0xd0>)
 800a56c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a56e:	4b15      	ldr	r3, [pc, #84]	@ (800a5c4 <vTaskStartScheduler+0xd4>)
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a576:	4b14      	ldr	r3, [pc, #80]	@ (800a5c8 <vTaskStartScheduler+0xd8>)
 800a578:	2201      	movs	r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a57c:	4b13      	ldr	r3, [pc, #76]	@ (800a5cc <vTaskStartScheduler+0xdc>)
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a582:	f001 fafd 	bl	800bb80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a586:	e00f      	b.n	800a5a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d10b      	bne.n	800a5a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	60fb      	str	r3, [r7, #12]
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	e7fd      	b.n	800a5a4 <vTaskStartScheduler+0xb4>
}
 800a5a8:	bf00      	nop
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	0800f598 	.word	0x0800f598
 800a5b4:	0800ac01 	.word	0x0800ac01
 800a5b8:	20001398 	.word	0x20001398
 800a5bc:	20000ea0 	.word	0x20000ea0
 800a5c0:	20000154 	.word	0x20000154
 800a5c4:	20001394 	.word	0x20001394
 800a5c8:	20001380 	.word	0x20001380
 800a5cc:	20001378 	.word	0x20001378

0800a5d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5d4:	4b04      	ldr	r3, [pc, #16]	@ (800a5e8 <vTaskSuspendAll+0x18>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	4a03      	ldr	r2, [pc, #12]	@ (800a5e8 <vTaskSuspendAll+0x18>)
 800a5dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5de:	bf00      	nop
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	2000139c 	.word	0x2000139c

0800a5ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5fa:	4b42      	ldr	r3, [pc, #264]	@ (800a704 <xTaskResumeAll+0x118>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10b      	bne.n	800a61a <xTaskResumeAll+0x2e>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	603b      	str	r3, [r7, #0]
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	e7fd      	b.n	800a616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a61a:	f001 fb55 	bl	800bcc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a61e:	4b39      	ldr	r3, [pc, #228]	@ (800a704 <xTaskResumeAll+0x118>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3b01      	subs	r3, #1
 800a624:	4a37      	ldr	r2, [pc, #220]	@ (800a704 <xTaskResumeAll+0x118>)
 800a626:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a628:	4b36      	ldr	r3, [pc, #216]	@ (800a704 <xTaskResumeAll+0x118>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d162      	bne.n	800a6f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a630:	4b35      	ldr	r3, [pc, #212]	@ (800a708 <xTaskResumeAll+0x11c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d05e      	beq.n	800a6f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a638:	e02f      	b.n	800a69a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a63a:	4b34      	ldr	r3, [pc, #208]	@ (800a70c <xTaskResumeAll+0x120>)
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3318      	adds	r3, #24
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff f83a 	bl	80096c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3304      	adds	r3, #4
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff f835 	bl	80096c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65a:	4b2d      	ldr	r3, [pc, #180]	@ (800a710 <xTaskResumeAll+0x124>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d903      	bls.n	800a66a <xTaskResumeAll+0x7e>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a666:	4a2a      	ldr	r2, [pc, #168]	@ (800a710 <xTaskResumeAll+0x124>)
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4a27      	ldr	r2, [pc, #156]	@ (800a714 <xTaskResumeAll+0x128>)
 800a678:	441a      	add	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3304      	adds	r3, #4
 800a67e:	4619      	mov	r1, r3
 800a680:	4610      	mov	r0, r2
 800a682:	f7fe ffc0 	bl	8009606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68a:	4b23      	ldr	r3, [pc, #140]	@ (800a718 <xTaskResumeAll+0x12c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a690:	429a      	cmp	r2, r3
 800a692:	d302      	bcc.n	800a69a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a694:	4b21      	ldr	r3, [pc, #132]	@ (800a71c <xTaskResumeAll+0x130>)
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a69a:	4b1c      	ldr	r3, [pc, #112]	@ (800a70c <xTaskResumeAll+0x120>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1cb      	bne.n	800a63a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6a8:	f000 fb66 	bl	800ad78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a720 <xTaskResumeAll+0x134>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d010      	beq.n	800a6da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6b8:	f000 f846 	bl	800a748 <xTaskIncrementTick>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <xTaskResumeAll+0x130>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1f1      	bne.n	800a6b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a6d4:	4b12      	ldr	r3, [pc, #72]	@ (800a720 <xTaskResumeAll+0x134>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6da:	4b10      	ldr	r3, [pc, #64]	@ (800a71c <xTaskResumeAll+0x130>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a724 <xTaskResumeAll+0x138>)
 800a6e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6f6:	f001 fb19 	bl	800bd2c <vPortExitCritical>

	return xAlreadyYielded;
 800a6fa:	68bb      	ldr	r3, [r7, #8]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	2000139c 	.word	0x2000139c
 800a708:	20001374 	.word	0x20001374
 800a70c:	20001334 	.word	0x20001334
 800a710:	2000137c 	.word	0x2000137c
 800a714:	20000ea4 	.word	0x20000ea4
 800a718:	20000ea0 	.word	0x20000ea0
 800a71c:	20001388 	.word	0x20001388
 800a720:	20001384 	.word	0x20001384
 800a724:	e000ed04 	.word	0xe000ed04

0800a728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a72e:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <xTaskGetTickCount+0x1c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a734:	687b      	ldr	r3, [r7, #4]
}
 800a736:	4618      	mov	r0, r3
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	20001378 	.word	0x20001378

0800a748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a752:	4b4f      	ldr	r3, [pc, #316]	@ (800a890 <xTaskIncrementTick+0x148>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 8090 	bne.w	800a87c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a75c:	4b4d      	ldr	r3, [pc, #308]	@ (800a894 <xTaskIncrementTick+0x14c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3301      	adds	r3, #1
 800a762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a764:	4a4b      	ldr	r2, [pc, #300]	@ (800a894 <xTaskIncrementTick+0x14c>)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d121      	bne.n	800a7b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a770:	4b49      	ldr	r3, [pc, #292]	@ (800a898 <xTaskIncrementTick+0x150>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00b      	beq.n	800a792 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	603b      	str	r3, [r7, #0]
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	e7fd      	b.n	800a78e <xTaskIncrementTick+0x46>
 800a792:	4b41      	ldr	r3, [pc, #260]	@ (800a898 <xTaskIncrementTick+0x150>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	4b40      	ldr	r3, [pc, #256]	@ (800a89c <xTaskIncrementTick+0x154>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a3e      	ldr	r2, [pc, #248]	@ (800a898 <xTaskIncrementTick+0x150>)
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	4a3e      	ldr	r2, [pc, #248]	@ (800a89c <xTaskIncrementTick+0x154>)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8a0 <xTaskIncrementTick+0x158>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	4a3c      	ldr	r2, [pc, #240]	@ (800a8a0 <xTaskIncrementTick+0x158>)
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	f000 fae2 	bl	800ad78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7b4:	4b3b      	ldr	r3, [pc, #236]	@ (800a8a4 <xTaskIncrementTick+0x15c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d349      	bcc.n	800a852 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7be:	4b36      	ldr	r3, [pc, #216]	@ (800a898 <xTaskIncrementTick+0x150>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c8:	4b36      	ldr	r3, [pc, #216]	@ (800a8a4 <xTaskIncrementTick+0x15c>)
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	601a      	str	r2, [r3, #0]
					break;
 800a7d0:	e03f      	b.n	800a852 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d2:	4b31      	ldr	r3, [pc, #196]	@ (800a898 <xTaskIncrementTick+0x150>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d203      	bcs.n	800a7f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7ea:	4a2e      	ldr	r2, [pc, #184]	@ (800a8a4 <xTaskIncrementTick+0x15c>)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7f0:	e02f      	b.n	800a852 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe ff62 	bl	80096c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	3318      	adds	r3, #24
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe ff59 	bl	80096c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a812:	4b25      	ldr	r3, [pc, #148]	@ (800a8a8 <xTaskIncrementTick+0x160>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d903      	bls.n	800a822 <xTaskIncrementTick+0xda>
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81e:	4a22      	ldr	r2, [pc, #136]	@ (800a8a8 <xTaskIncrementTick+0x160>)
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8ac <xTaskIncrementTick+0x164>)
 800a830:	441a      	add	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	3304      	adds	r3, #4
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f7fe fee4 	bl	8009606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a842:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b0 <xTaskIncrementTick+0x168>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a848:	429a      	cmp	r2, r3
 800a84a:	d3b8      	bcc.n	800a7be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a84c:	2301      	movs	r3, #1
 800a84e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a850:	e7b5      	b.n	800a7be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a852:	4b17      	ldr	r3, [pc, #92]	@ (800a8b0 <xTaskIncrementTick+0x168>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a858:	4914      	ldr	r1, [pc, #80]	@ (800a8ac <xTaskIncrementTick+0x164>)
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	440b      	add	r3, r1
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d901      	bls.n	800a86e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a86a:	2301      	movs	r3, #1
 800a86c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a86e:	4b11      	ldr	r3, [pc, #68]	@ (800a8b4 <xTaskIncrementTick+0x16c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d007      	beq.n	800a886 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a876:	2301      	movs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	e004      	b.n	800a886 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a87c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b8 <xTaskIncrementTick+0x170>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3301      	adds	r3, #1
 800a882:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b8 <xTaskIncrementTick+0x170>)
 800a884:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a886:	697b      	ldr	r3, [r7, #20]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2000139c 	.word	0x2000139c
 800a894:	20001378 	.word	0x20001378
 800a898:	2000132c 	.word	0x2000132c
 800a89c:	20001330 	.word	0x20001330
 800a8a0:	2000138c 	.word	0x2000138c
 800a8a4:	20001394 	.word	0x20001394
 800a8a8:	2000137c 	.word	0x2000137c
 800a8ac:	20000ea4 	.word	0x20000ea4
 800a8b0:	20000ea0 	.word	0x20000ea0
 800a8b4:	20001388 	.word	0x20001388
 800a8b8:	20001384 	.word	0x20001384

0800a8bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a970 <vTaskSwitchContext+0xb4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8ca:	4b2a      	ldr	r3, [pc, #168]	@ (800a974 <vTaskSwitchContext+0xb8>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8d0:	e047      	b.n	800a962 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a8d2:	4b28      	ldr	r3, [pc, #160]	@ (800a974 <vTaskSwitchContext+0xb8>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d8:	4b27      	ldr	r3, [pc, #156]	@ (800a978 <vTaskSwitchContext+0xbc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e011      	b.n	800a904 <vTaskSwitchContext+0x48>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <vTaskSwitchContext+0x42>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	607b      	str	r3, [r7, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	e7fd      	b.n	800a8fa <vTaskSwitchContext+0x3e>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b01      	subs	r3, #1
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	491d      	ldr	r1, [pc, #116]	@ (800a97c <vTaskSwitchContext+0xc0>)
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	440b      	add	r3, r1
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0e3      	beq.n	800a8e0 <vTaskSwitchContext+0x24>
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4a16      	ldr	r2, [pc, #88]	@ (800a97c <vTaskSwitchContext+0xc0>)
 800a924:	4413      	add	r3, r2
 800a926:	60bb      	str	r3, [r7, #8]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	605a      	str	r2, [r3, #4]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	3308      	adds	r3, #8
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d104      	bne.n	800a948 <vTaskSwitchContext+0x8c>
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	605a      	str	r2, [r3, #4]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	4a0c      	ldr	r2, [pc, #48]	@ (800a980 <vTaskSwitchContext+0xc4>)
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	4a09      	ldr	r2, [pc, #36]	@ (800a978 <vTaskSwitchContext+0xbc>)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <vTaskSwitchContext+0xc4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3354      	adds	r3, #84	@ 0x54
 800a95e:	4a09      	ldr	r2, [pc, #36]	@ (800a984 <vTaskSwitchContext+0xc8>)
 800a960:	6013      	str	r3, [r2, #0]
}
 800a962:	bf00      	nop
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	2000139c 	.word	0x2000139c
 800a974:	20001388 	.word	0x20001388
 800a978:	2000137c 	.word	0x2000137c
 800a97c:	20000ea4 	.word	0x20000ea4
 800a980:	20000ea0 	.word	0x20000ea0
 800a984:	20000154 	.word	0x20000154

0800a988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	60fb      	str	r3, [r7, #12]
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	e7fd      	b.n	800a9ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9b0:	4b07      	ldr	r3, [pc, #28]	@ (800a9d0 <vTaskPlaceOnEventList+0x48>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3318      	adds	r3, #24
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7fe fe48 	bl	800964e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9be:	2101      	movs	r1, #1
 800a9c0:	6838      	ldr	r0, [r7, #0]
 800a9c2:	f000 fc9f 	bl	800b304 <prvAddCurrentTaskToDelayedList>
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000ea0 	.word	0x20000ea0

0800a9d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	617b      	str	r3, [r7, #20]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3318      	adds	r3, #24
 800aa04:	4619      	mov	r1, r3
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7fe fdfd 	bl	8009606 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa12:	f04f 33ff 	mov.w	r3, #4294967295
 800aa16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	68b8      	ldr	r0, [r7, #8]
 800aa1c:	f000 fc72 	bl	800b304 <prvAddCurrentTaskToDelayedList>
	}
 800aa20:	bf00      	nop
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000ea0 	.word	0x20000ea0

0800aa2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10b      	bne.n	800aa5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	60fb      	str	r3, [r7, #12]
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop
 800aa58:	e7fd      	b.n	800aa56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe fe2e 	bl	80096c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa64:	4b1d      	ldr	r3, [pc, #116]	@ (800aadc <xTaskRemoveFromEventList+0xb0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11d      	bne.n	800aaa8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fe25 	bl	80096c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa7a:	4b19      	ldr	r3, [pc, #100]	@ (800aae0 <xTaskRemoveFromEventList+0xb4>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d903      	bls.n	800aa8a <xTaskRemoveFromEventList+0x5e>
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa86:	4a16      	ldr	r2, [pc, #88]	@ (800aae0 <xTaskRemoveFromEventList+0xb4>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a13      	ldr	r2, [pc, #76]	@ (800aae4 <xTaskRemoveFromEventList+0xb8>)
 800aa98:	441a      	add	r2, r3
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7fe fdb0 	bl	8009606 <vListInsertEnd>
 800aaa6:	e005      	b.n	800aab4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	3318      	adds	r3, #24
 800aaac:	4619      	mov	r1, r3
 800aaae:	480e      	ldr	r0, [pc, #56]	@ (800aae8 <xTaskRemoveFromEventList+0xbc>)
 800aab0:	f7fe fda9 	bl	8009606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab8:	4b0c      	ldr	r3, [pc, #48]	@ (800aaec <xTaskRemoveFromEventList+0xc0>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d905      	bls.n	800aace <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aac2:	2301      	movs	r3, #1
 800aac4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aac6:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf0 <xTaskRemoveFromEventList+0xc4>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	e001      	b.n	800aad2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aad2:	697b      	ldr	r3, [r7, #20]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	2000139c 	.word	0x2000139c
 800aae0:	2000137c 	.word	0x2000137c
 800aae4:	20000ea4 	.word	0x20000ea4
 800aae8:	20001334 	.word	0x20001334
 800aaec:	20000ea0 	.word	0x20000ea0
 800aaf0:	20001388 	.word	0x20001388

0800aaf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aafc:	4b06      	ldr	r3, [pc, #24]	@ (800ab18 <vTaskInternalSetTimeOutState+0x24>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab04:	4b05      	ldr	r3, [pc, #20]	@ (800ab1c <vTaskInternalSetTimeOutState+0x28>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	605a      	str	r2, [r3, #4]
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	2000138c 	.word	0x2000138c
 800ab1c:	20001378 	.word	0x20001378

0800ab20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10b      	bne.n	800ab48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10b      	bne.n	800ab66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	60fb      	str	r3, [r7, #12]
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	e7fd      	b.n	800ab62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab66:	f001 f8af 	bl	800bcc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	@ (800abe0 <xTaskCheckForTimeOut+0xc0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d102      	bne.n	800ab8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61fb      	str	r3, [r7, #28]
 800ab88:	e023      	b.n	800abd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	4b15      	ldr	r3, [pc, #84]	@ (800abe4 <xTaskCheckForTimeOut+0xc4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d007      	beq.n	800aba6 <xTaskCheckForTimeOut+0x86>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d302      	bcc.n	800aba6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aba0:	2301      	movs	r3, #1
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e015      	b.n	800abd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	d20b      	bcs.n	800abc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	1ad2      	subs	r2, r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff ff99 	bl	800aaf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	e004      	b.n	800abd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abce:	2301      	movs	r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 f8ab 	bl	800bd2c <vPortExitCritical>

	return xReturn;
 800abd6:	69fb      	ldr	r3, [r7, #28]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3720      	adds	r7, #32
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20001378 	.word	0x20001378
 800abe4:	2000138c 	.word	0x2000138c

0800abe8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abec:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <vTaskMissedYield+0x14>)
 800abee:	2201      	movs	r2, #1
 800abf0:	601a      	str	r2, [r3, #0]
}
 800abf2:	bf00      	nop
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	20001388 	.word	0x20001388

0800ac00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac08:	f000 f852 	bl	800acb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <prvIdleTask+0x28>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d9f9      	bls.n	800ac08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac14:	4b05      	ldr	r3, [pc, #20]	@ (800ac2c <prvIdleTask+0x2c>)
 800ac16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac24:	e7f0      	b.n	800ac08 <prvIdleTask+0x8>
 800ac26:	bf00      	nop
 800ac28:	20000ea4 	.word	0x20000ea4
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac36:	2300      	movs	r3, #0
 800ac38:	607b      	str	r3, [r7, #4]
 800ac3a:	e00c      	b.n	800ac56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4a12      	ldr	r2, [pc, #72]	@ (800ac90 <prvInitialiseTaskLists+0x60>)
 800ac48:	4413      	add	r3, r2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe fcae 	bl	80095ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3301      	adds	r3, #1
 800ac54:	607b      	str	r3, [r7, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b37      	cmp	r3, #55	@ 0x37
 800ac5a:	d9ef      	bls.n	800ac3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac5c:	480d      	ldr	r0, [pc, #52]	@ (800ac94 <prvInitialiseTaskLists+0x64>)
 800ac5e:	f7fe fca5 	bl	80095ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac62:	480d      	ldr	r0, [pc, #52]	@ (800ac98 <prvInitialiseTaskLists+0x68>)
 800ac64:	f7fe fca2 	bl	80095ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac68:	480c      	ldr	r0, [pc, #48]	@ (800ac9c <prvInitialiseTaskLists+0x6c>)
 800ac6a:	f7fe fc9f 	bl	80095ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac6e:	480c      	ldr	r0, [pc, #48]	@ (800aca0 <prvInitialiseTaskLists+0x70>)
 800ac70:	f7fe fc9c 	bl	80095ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac74:	480b      	ldr	r0, [pc, #44]	@ (800aca4 <prvInitialiseTaskLists+0x74>)
 800ac76:	f7fe fc99 	bl	80095ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac7a:	4b0b      	ldr	r3, [pc, #44]	@ (800aca8 <prvInitialiseTaskLists+0x78>)
 800ac7c:	4a05      	ldr	r2, [pc, #20]	@ (800ac94 <prvInitialiseTaskLists+0x64>)
 800ac7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac80:	4b0a      	ldr	r3, [pc, #40]	@ (800acac <prvInitialiseTaskLists+0x7c>)
 800ac82:	4a05      	ldr	r2, [pc, #20]	@ (800ac98 <prvInitialiseTaskLists+0x68>)
 800ac84:	601a      	str	r2, [r3, #0]
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000ea4 	.word	0x20000ea4
 800ac94:	20001304 	.word	0x20001304
 800ac98:	20001318 	.word	0x20001318
 800ac9c:	20001334 	.word	0x20001334
 800aca0:	20001348 	.word	0x20001348
 800aca4:	20001360 	.word	0x20001360
 800aca8:	2000132c 	.word	0x2000132c
 800acac:	20001330 	.word	0x20001330

0800acb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acb6:	e019      	b.n	800acec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acb8:	f001 f806 	bl	800bcc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acbc:	4b10      	ldr	r3, [pc, #64]	@ (800ad00 <prvCheckTasksWaitingTermination+0x50>)
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3304      	adds	r3, #4
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fe fcf9 	bl	80096c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acce:	4b0d      	ldr	r3, [pc, #52]	@ (800ad04 <prvCheckTasksWaitingTermination+0x54>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	4a0b      	ldr	r2, [pc, #44]	@ (800ad04 <prvCheckTasksWaitingTermination+0x54>)
 800acd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acd8:	4b0b      	ldr	r3, [pc, #44]	@ (800ad08 <prvCheckTasksWaitingTermination+0x58>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3b01      	subs	r3, #1
 800acde:	4a0a      	ldr	r2, [pc, #40]	@ (800ad08 <prvCheckTasksWaitingTermination+0x58>)
 800ace0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ace2:	f001 f823 	bl	800bd2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f810 	bl	800ad0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acec:	4b06      	ldr	r3, [pc, #24]	@ (800ad08 <prvCheckTasksWaitingTermination+0x58>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e1      	bne.n	800acb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20001348 	.word	0x20001348
 800ad04:	20001374 	.word	0x20001374
 800ad08:	2000135c 	.word	0x2000135c

0800ad0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3354      	adds	r3, #84	@ 0x54
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f002 fa31 	bl	800d180 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d108      	bne.n	800ad3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f001 f9bb 	bl	800c0a8 <vPortFree>
				vPortFree( pxTCB );
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 f9b8 	bl	800c0a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad38:	e019      	b.n	800ad6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d103      	bne.n	800ad4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f001 f9af 	bl	800c0a8 <vPortFree>
	}
 800ad4a:	e010      	b.n	800ad6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d00b      	beq.n	800ad6e <prvDeleteTCB+0x62>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	60fb      	str	r3, [r7, #12]
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	e7fd      	b.n	800ad6a <prvDeleteTCB+0x5e>
	}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad7e:	4b0c      	ldr	r3, [pc, #48]	@ (800adb0 <prvResetNextTaskUnblockTime+0x38>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <prvResetNextTaskUnblockTime+0x3c>)
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad90:	e008      	b.n	800ada4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad92:	4b07      	ldr	r3, [pc, #28]	@ (800adb0 <prvResetNextTaskUnblockTime+0x38>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	4a04      	ldr	r2, [pc, #16]	@ (800adb4 <prvResetNextTaskUnblockTime+0x3c>)
 800ada2:	6013      	str	r3, [r2, #0]
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	2000132c 	.word	0x2000132c
 800adb4:	20001394 	.word	0x20001394

0800adb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800adbe:	4b05      	ldr	r3, [pc, #20]	@ (800add4 <xTaskGetCurrentTaskHandle+0x1c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800adc4:	687b      	ldr	r3, [r7, #4]
	}
 800adc6:	4618      	mov	r0, r3
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20000ea0 	.word	0x20000ea0

0800add8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adde:	4b0b      	ldr	r3, [pc, #44]	@ (800ae0c <xTaskGetSchedulerState+0x34>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ade6:	2301      	movs	r3, #1
 800ade8:	607b      	str	r3, [r7, #4]
 800adea:	e008      	b.n	800adfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adec:	4b08      	ldr	r3, [pc, #32]	@ (800ae10 <xTaskGetSchedulerState+0x38>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d102      	bne.n	800adfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adf4:	2302      	movs	r3, #2
 800adf6:	607b      	str	r3, [r7, #4]
 800adf8:	e001      	b.n	800adfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adfa:	2300      	movs	r3, #0
 800adfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adfe:	687b      	ldr	r3, [r7, #4]
	}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	20001380 	.word	0x20001380
 800ae10:	2000139c 	.word	0x2000139c

0800ae14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d058      	beq.n	800aedc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae2a:	4b2f      	ldr	r3, [pc, #188]	@ (800aee8 <xTaskPriorityDisinherit+0xd4>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d00b      	beq.n	800ae4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	60fb      	str	r3, [r7, #12]
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	e7fd      	b.n	800ae48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10b      	bne.n	800ae6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	60bb      	str	r3, [r7, #8]
}
 800ae66:	bf00      	nop
 800ae68:	bf00      	nop
 800ae6a:	e7fd      	b.n	800ae68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae70:	1e5a      	subs	r2, r3, #1
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d02c      	beq.n	800aedc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d128      	bne.n	800aedc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fc16 	bl	80096c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeac:	4b0f      	ldr	r3, [pc, #60]	@ (800aeec <xTaskPriorityDisinherit+0xd8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d903      	bls.n	800aebc <xTaskPriorityDisinherit+0xa8>
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb8:	4a0c      	ldr	r2, [pc, #48]	@ (800aeec <xTaskPriorityDisinherit+0xd8>)
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec0:	4613      	mov	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4a09      	ldr	r2, [pc, #36]	@ (800aef0 <xTaskPriorityDisinherit+0xdc>)
 800aeca:	441a      	add	r2, r3
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	3304      	adds	r3, #4
 800aed0:	4619      	mov	r1, r3
 800aed2:	4610      	mov	r0, r2
 800aed4:	f7fe fb97 	bl	8009606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aed8:	2301      	movs	r3, #1
 800aeda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aedc:	697b      	ldr	r3, [r7, #20]
	}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000ea0 	.word	0x20000ea0
 800aeec:	2000137c 	.word	0x2000137c
 800aef0:	20000ea4 	.word	0x20000ea4

0800aef4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800af02:	f000 fee1 	bl	800bcc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af06:	4b29      	ldr	r3, [pc, #164]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d01c      	beq.n	800af4e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800af14:	4b25      	ldr	r3, [pc, #148]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	43d2      	mvns	r2, r2
 800af20:	400a      	ands	r2, r1
 800af22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800af26:	4b21      	ldr	r3, [pc, #132]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00b      	beq.n	800af4e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af36:	2101      	movs	r1, #1
 800af38:	6838      	ldr	r0, [r7, #0]
 800af3a:	f000 f9e3 	bl	800b304 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800af3e:	4b1c      	ldr	r3, [pc, #112]	@ (800afb0 <xTaskNotifyWait+0xbc>)
 800af40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800af4e:	f000 feed 	bl	800bd2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800af52:	f000 feb9 	bl	800bcc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800af5c:	4b13      	ldr	r3, [pc, #76]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af68:	4b10      	ldr	r3, [pc, #64]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d002      	beq.n	800af7c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]
 800af7a:	e00a      	b.n	800af92 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800af7c:	4b0b      	ldr	r3, [pc, #44]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	43d2      	mvns	r2, r2
 800af88:	400a      	ands	r2, r1
 800af8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800af8e:	2301      	movs	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af92:	4b06      	ldr	r3, [pc, #24]	@ (800afac <xTaskNotifyWait+0xb8>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800af9c:	f000 fec6 	bl	800bd2c <vPortExitCritical>

		return xReturn;
 800afa0:	697b      	ldr	r3, [r7, #20]
	}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20000ea0 	.word	0x20000ea0
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	@ 0x28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800afc4:	2301      	movs	r3, #1
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10b      	bne.n	800afe6 <xTaskGenericNotify+0x32>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	61bb      	str	r3, [r7, #24]
}
 800afe0:	bf00      	nop
 800afe2:	bf00      	nop
 800afe4:	e7fd      	b.n	800afe2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800afea:	f000 fe6d 	bl	800bcc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d004      	beq.n	800affe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b004:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	2202      	movs	r2, #2
 800b00a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d82e      	bhi.n	800b072 <xTaskGenericNotify+0xbe>
 800b014:	a201      	add	r2, pc, #4	@ (adr r2, 800b01c <xTaskGenericNotify+0x68>)
 800b016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01a:	bf00      	nop
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b031 	.word	0x0800b031
 800b024:	0800b043 	.word	0x0800b043
 800b028:	0800b053 	.word	0x0800b053
 800b02c:	0800b05d 	.word	0x0800b05d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	431a      	orrs	r2, r3
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b040:	e02c      	b.n	800b09c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b050:	e024      	b.n	800b09c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b05a:	e01f      	b.n	800b09c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b05c:	7ffb      	ldrb	r3, [r7, #31]
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d004      	beq.n	800b06c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b06a:	e017      	b.n	800b09c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b06c:	2300      	movs	r3, #0
 800b06e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b070:	e014      	b.n	800b09c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07c:	d00d      	beq.n	800b09a <xTaskGenericNotify+0xe6>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	617b      	str	r3, [r7, #20]
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	e7fd      	b.n	800b092 <xTaskGenericNotify+0xde>
					break;
 800b096:	bf00      	nop
 800b098:	e000      	b.n	800b09c <xTaskGenericNotify+0xe8>

					break;
 800b09a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b09c:	7ffb      	ldrb	r3, [r7, #31]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d13b      	bne.n	800b11a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fb0a 	bl	80096c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b128 <xTaskGenericNotify+0x174>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d903      	bls.n	800b0c0 <xTaskGenericNotify+0x10c>
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b128 <xTaskGenericNotify+0x174>)
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a17      	ldr	r2, [pc, #92]	@ (800b12c <xTaskGenericNotify+0x178>)
 800b0ce:	441a      	add	r2, r3
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7fe fa95 	bl	8009606 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <xTaskGenericNotify+0x148>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	613b      	str	r3, [r7, #16]
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	e7fd      	b.n	800b0f8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b100:	4b0b      	ldr	r3, [pc, #44]	@ (800b130 <xTaskGenericNotify+0x17c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b106:	429a      	cmp	r2, r3
 800b108:	d907      	bls.n	800b11a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b10a:	4b0a      	ldr	r3, [pc, #40]	@ (800b134 <xTaskGenericNotify+0x180>)
 800b10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b11a:	f000 fe07 	bl	800bd2c <vPortExitCritical>

		return xReturn;
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b120:	4618      	mov	r0, r3
 800b122:	3728      	adds	r7, #40	@ 0x28
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	2000137c 	.word	0x2000137c
 800b12c:	20000ea4 	.word	0x20000ea4
 800b130:	20000ea0 	.word	0x20000ea0
 800b134:	e000ed04 	.word	0xe000ed04

0800b138 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08e      	sub	sp, #56	@ 0x38
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	603b      	str	r3, [r7, #0]
 800b144:	4613      	mov	r3, r2
 800b146:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b148:	2301      	movs	r3, #1
 800b14a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b16a:	f000 fe8d 	bl	800be88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800b172:	f3ef 8211 	mrs	r2, BASEPRI
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	623a      	str	r2, [r7, #32]
 800b188:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b18a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b1a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d82e      	bhi.n	800b214 <xTaskGenericNotifyFromISR+0xdc>
 800b1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1bc <xTaskGenericNotifyFromISR+0x84>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b239 	.word	0x0800b239
 800b1c0:	0800b1d1 	.word	0x0800b1d1
 800b1c4:	0800b1e3 	.word	0x0800b1e3
 800b1c8:	0800b1f3 	.word	0x0800b1f3
 800b1cc:	0800b1fd 	.word	0x0800b1fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b1e0:	e02d      	b.n	800b23e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b1f0:	e025      	b.n	800b23e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b1fa:	e020      	b.n	800b23e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b1fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b200:	2b02      	cmp	r3, #2
 800b202:	d004      	beq.n	800b20e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b20c:	e017      	b.n	800b23e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800b20e:	2300      	movs	r3, #0
 800b210:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800b212:	e014      	b.n	800b23e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21e:	d00d      	beq.n	800b23c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	61bb      	str	r3, [r7, #24]
}
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	e7fd      	b.n	800b234 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b238:	bf00      	nop
 800b23a:	e000      	b.n	800b23e <xTaskGenericNotifyFromISR+0x106>
					break;
 800b23c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b23e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b242:	2b01      	cmp	r3, #1
 800b244:	d147      	bne.n	800b2d6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00b      	beq.n	800b266 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	617b      	str	r3, [r7, #20]
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	e7fd      	b.n	800b262 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b266:	4b21      	ldr	r3, [pc, #132]	@ (800b2ec <xTaskGenericNotifyFromISR+0x1b4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d11d      	bne.n	800b2aa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	3304      	adds	r3, #4
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fa24 	bl	80096c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d903      	bls.n	800b28c <xTaskGenericNotifyFromISR+0x154>
 800b284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b288:	4a19      	ldr	r2, [pc, #100]	@ (800b2f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4a16      	ldr	r2, [pc, #88]	@ (800b2f4 <xTaskGenericNotifyFromISR+0x1bc>)
 800b29a:	441a      	add	r2, r3
 800b29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	f7fe f9af 	bl	8009606 <vListInsertEnd>
 800b2a8:	e005      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ac:	3318      	adds	r3, #24
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4811      	ldr	r0, [pc, #68]	@ (800b2f8 <xTaskGenericNotifyFromISR+0x1c0>)
 800b2b2:	f7fe f9a8 	bl	8009606 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ba:	4b10      	ldr	r3, [pc, #64]	@ (800b2fc <xTaskGenericNotifyFromISR+0x1c4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d908      	bls.n	800b2d6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b300 <xTaskGenericNotifyFromISR+0x1c8>)
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f383 8811 	msr	BASEPRI, r3
}
 800b2e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3738      	adds	r7, #56	@ 0x38
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	2000139c 	.word	0x2000139c
 800b2f0:	2000137c 	.word	0x2000137c
 800b2f4:	20000ea4 	.word	0x20000ea4
 800b2f8:	20001334 	.word	0x20001334
 800b2fc:	20000ea0 	.word	0x20000ea0
 800b300:	20001388 	.word	0x20001388

0800b304 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b30e:	4b21      	ldr	r3, [pc, #132]	@ (800b394 <prvAddCurrentTaskToDelayedList+0x90>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b314:	4b20      	ldr	r3, [pc, #128]	@ (800b398 <prvAddCurrentTaskToDelayedList+0x94>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe f9d0 	bl	80096c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b326:	d10a      	bne.n	800b33e <prvAddCurrentTaskToDelayedList+0x3a>
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d007      	beq.n	800b33e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b32e:	4b1a      	ldr	r3, [pc, #104]	@ (800b398 <prvAddCurrentTaskToDelayedList+0x94>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3304      	adds	r3, #4
 800b334:	4619      	mov	r1, r3
 800b336:	4819      	ldr	r0, [pc, #100]	@ (800b39c <prvAddCurrentTaskToDelayedList+0x98>)
 800b338:	f7fe f965 	bl	8009606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b33c:	e026      	b.n	800b38c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4413      	add	r3, r2
 800b344:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b346:	4b14      	ldr	r3, [pc, #80]	@ (800b398 <prvAddCurrentTaskToDelayedList+0x94>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	429a      	cmp	r2, r3
 800b354:	d209      	bcs.n	800b36a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b356:	4b12      	ldr	r3, [pc, #72]	@ (800b3a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	4b0f      	ldr	r3, [pc, #60]	@ (800b398 <prvAddCurrentTaskToDelayedList+0x94>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7fe f973 	bl	800964e <vListInsert>
}
 800b368:	e010      	b.n	800b38c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b36a:	4b0e      	ldr	r3, [pc, #56]	@ (800b3a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <prvAddCurrentTaskToDelayedList+0x94>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3304      	adds	r3, #4
 800b374:	4619      	mov	r1, r3
 800b376:	4610      	mov	r0, r2
 800b378:	f7fe f969 	bl	800964e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b37c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	429a      	cmp	r2, r3
 800b384:	d202      	bcs.n	800b38c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b386:	4a08      	ldr	r2, [pc, #32]	@ (800b3a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	6013      	str	r3, [r2, #0]
}
 800b38c:	bf00      	nop
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20001378 	.word	0x20001378
 800b398:	20000ea0 	.word	0x20000ea0
 800b39c:	20001360 	.word	0x20001360
 800b3a0:	20001330 	.word	0x20001330
 800b3a4:	2000132c 	.word	0x2000132c
 800b3a8:	20001394 	.word	0x20001394

0800b3ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b08a      	sub	sp, #40	@ 0x28
 800b3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3b6:	f000 fb13 	bl	800b9e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b430 <xTimerCreateTimerTask+0x84>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d021      	beq.n	800b406 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3ca:	1d3a      	adds	r2, r7, #4
 800b3cc:	f107 0108 	add.w	r1, r7, #8
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe f8cf 	bl	8009578 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	9202      	str	r2, [sp, #8]
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	460a      	mov	r2, r1
 800b3ec:	4911      	ldr	r1, [pc, #68]	@ (800b434 <xTimerCreateTimerTask+0x88>)
 800b3ee:	4812      	ldr	r0, [pc, #72]	@ (800b438 <xTimerCreateTimerTask+0x8c>)
 800b3f0:	f7fe fe8a 	bl	800a108 <xTaskCreateStatic>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	4a11      	ldr	r2, [pc, #68]	@ (800b43c <xTimerCreateTimerTask+0x90>)
 800b3f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3fa:	4b10      	ldr	r3, [pc, #64]	@ (800b43c <xTimerCreateTimerTask+0x90>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b402:	2301      	movs	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10b      	bne.n	800b424 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	613b      	str	r3, [r7, #16]
}
 800b41e:	bf00      	nop
 800b420:	bf00      	nop
 800b422:	e7fd      	b.n	800b420 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b424:	697b      	ldr	r3, [r7, #20]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	200013d0 	.word	0x200013d0
 800b434:	0800f5a0 	.word	0x0800f5a0
 800b438:	0800b579 	.word	0x0800b579
 800b43c:	200013d4 	.word	0x200013d4

0800b440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	@ 0x28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10b      	bne.n	800b470 <xTimerGenericCommand+0x30>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	623b      	str	r3, [r7, #32]
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	e7fd      	b.n	800b46c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b470:	4b19      	ldr	r3, [pc, #100]	@ (800b4d8 <xTimerGenericCommand+0x98>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d02a      	beq.n	800b4ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2b05      	cmp	r3, #5
 800b488:	dc18      	bgt.n	800b4bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b48a:	f7ff fca5 	bl	800add8 <xTaskGetSchedulerState>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b02      	cmp	r3, #2
 800b492:	d109      	bne.n	800b4a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b494:	4b10      	ldr	r3, [pc, #64]	@ (800b4d8 <xTimerGenericCommand+0x98>)
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	f107 0110 	add.w	r1, r7, #16
 800b49c:	2300      	movs	r3, #0
 800b49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a0:	f7fe fa42 	bl	8009928 <xQueueGenericSend>
 800b4a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4a6:	e012      	b.n	800b4ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d8 <xTimerGenericCommand+0x98>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	f107 0110 	add.w	r1, r7, #16
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7fe fa38 	bl	8009928 <xQueueGenericSend>
 800b4b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4ba:	e008      	b.n	800b4ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4bc:	4b06      	ldr	r3, [pc, #24]	@ (800b4d8 <xTimerGenericCommand+0x98>)
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	f107 0110 	add.w	r1, r7, #16
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	f7fe fb30 	bl	8009b2c <xQueueGenericSendFromISR>
 800b4cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3728      	adds	r7, #40	@ 0x28
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	200013d0 	.word	0x200013d0

0800b4dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b088      	sub	sp, #32
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e6:	4b23      	ldr	r3, [pc, #140]	@ (800b574 <prvProcessExpiredTimer+0x98>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fe f8e3 	bl	80096c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d023      	beq.n	800b550 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	18d1      	adds	r1, r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	6978      	ldr	r0, [r7, #20]
 800b516:	f000 f8d5 	bl	800b6c4 <prvInsertTimerInActiveList>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d020      	beq.n	800b562 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b520:	2300      	movs	r3, #0
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	2300      	movs	r3, #0
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	2100      	movs	r1, #0
 800b52a:	6978      	ldr	r0, [r7, #20]
 800b52c:	f7ff ff88 	bl	800b440 <xTimerGenericCommand>
 800b530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d114      	bne.n	800b562 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	60fb      	str	r3, [r7, #12]
}
 800b54a:	bf00      	nop
 800b54c:	bf00      	nop
 800b54e:	e7fd      	b.n	800b54c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b556:	f023 0301 	bic.w	r3, r3, #1
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	6978      	ldr	r0, [r7, #20]
 800b568:	4798      	blx	r3
}
 800b56a:	bf00      	nop
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	200013c8 	.word	0x200013c8

0800b578 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b580:	f107 0308 	add.w	r3, r7, #8
 800b584:	4618      	mov	r0, r3
 800b586:	f000 f859 	bl	800b63c <prvGetNextExpireTime>
 800b58a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	4619      	mov	r1, r3
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f805 	bl	800b5a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b596:	f000 f8d7 	bl	800b748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b59a:	bf00      	nop
 800b59c:	e7f0      	b.n	800b580 <prvTimerTask+0x8>
	...

0800b5a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5aa:	f7ff f811 	bl	800a5d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5ae:	f107 0308 	add.w	r3, r7, #8
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f866 	bl	800b684 <prvSampleTimeNow>
 800b5b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d130      	bne.n	800b622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10a      	bne.n	800b5dc <prvProcessTimerOrBlockTask+0x3c>
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d806      	bhi.n	800b5dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5ce:	f7ff f80d 	bl	800a5ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5d2:	68f9      	ldr	r1, [r7, #12]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff ff81 	bl	800b4dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5da:	e024      	b.n	800b626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d008      	beq.n	800b5f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5e2:	4b13      	ldr	r3, [pc, #76]	@ (800b630 <prvProcessTimerOrBlockTask+0x90>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <prvProcessTimerOrBlockTask+0x50>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e000      	b.n	800b5f2 <prvProcessTimerOrBlockTask+0x52>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b634 <prvProcessTimerOrBlockTask+0x94>)
 800b5f6:	6818      	ldr	r0, [r3, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	4619      	mov	r1, r3
 800b602:	f7fe fd4d 	bl	800a0a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b606:	f7fe fff1 	bl	800a5ec <xTaskResumeAll>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b610:	4b09      	ldr	r3, [pc, #36]	@ (800b638 <prvProcessTimerOrBlockTask+0x98>)
 800b612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
}
 800b620:	e001      	b.n	800b626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b622:	f7fe ffe3 	bl	800a5ec <xTaskResumeAll>
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200013cc 	.word	0x200013cc
 800b634:	200013d0 	.word	0x200013d0
 800b638:	e000ed04 	.word	0xe000ed04

0800b63c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b644:	4b0e      	ldr	r3, [pc, #56]	@ (800b680 <prvGetNextExpireTime+0x44>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <prvGetNextExpireTime+0x16>
 800b64e:	2201      	movs	r2, #1
 800b650:	e000      	b.n	800b654 <prvGetNextExpireTime+0x18>
 800b652:	2200      	movs	r2, #0
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d105      	bne.n	800b66c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b660:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <prvGetNextExpireTime+0x44>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	e001      	b.n	800b670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b670:	68fb      	ldr	r3, [r7, #12]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	200013c8 	.word	0x200013c8

0800b684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b68c:	f7ff f84c 	bl	800a728 <xTaskGetTickCount>
 800b690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b692:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c0 <prvSampleTimeNow+0x3c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d205      	bcs.n	800b6a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b69c:	f000 f93a 	bl	800b914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	e002      	b.n	800b6ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6ae:	4a04      	ldr	r2, [pc, #16]	@ (800b6c0 <prvSampleTimeNow+0x3c>)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	200013d8 	.word	0x200013d8

0800b6c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d812      	bhi.n	800b710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	1ad2      	subs	r2, r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e01b      	b.n	800b736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6fe:	4b10      	ldr	r3, [pc, #64]	@ (800b740 <prvInsertTimerInActiveList+0x7c>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f7fd ffa0 	bl	800964e <vListInsert>
 800b70e:	e012      	b.n	800b736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d206      	bcs.n	800b726 <prvInsertTimerInActiveList+0x62>
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d302      	bcc.n	800b726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b720:	2301      	movs	r3, #1
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e007      	b.n	800b736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b726:	4b07      	ldr	r3, [pc, #28]	@ (800b744 <prvInsertTimerInActiveList+0x80>)
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4619      	mov	r1, r3
 800b730:	4610      	mov	r0, r2
 800b732:	f7fd ff8c 	bl	800964e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b736:	697b      	ldr	r3, [r7, #20]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	200013cc 	.word	0x200013cc
 800b744:	200013c8 	.word	0x200013c8

0800b748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08e      	sub	sp, #56	@ 0x38
 800b74c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b74e:	e0ce      	b.n	800b8ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	da19      	bge.n	800b78a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b756:	1d3b      	adds	r3, r7, #4
 800b758:	3304      	adds	r3, #4
 800b75a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	61fb      	str	r3, [r7, #28]
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop
 800b778:	e7fd      	b.n	800b776 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b780:	6850      	ldr	r0, [r2, #4]
 800b782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b784:	6892      	ldr	r2, [r2, #8]
 800b786:	4611      	mov	r1, r2
 800b788:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f2c0 80ae 	blt.w	800b8ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d004      	beq.n	800b7a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd ff8c 	bl	80096c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff ff6a 	bl	800b684 <prvSampleTimeNow>
 800b7b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	f200 8097 	bhi.w	800b8e8 <prvProcessReceivedCommands+0x1a0>
 800b7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c0 <prvProcessReceivedCommands+0x78>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b7e9 	.word	0x0800b7e9
 800b7c4:	0800b7e9 	.word	0x0800b7e9
 800b7c8:	0800b7e9 	.word	0x0800b7e9
 800b7cc:	0800b85f 	.word	0x0800b85f
 800b7d0:	0800b873 	.word	0x0800b873
 800b7d4:	0800b8bf 	.word	0x0800b8bf
 800b7d8:	0800b7e9 	.word	0x0800b7e9
 800b7dc:	0800b7e9 	.word	0x0800b7e9
 800b7e0:	0800b85f 	.word	0x0800b85f
 800b7e4:	0800b873 	.word	0x0800b873
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7ee:	f043 0301 	orr.w	r3, r3, #1
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	18d1      	adds	r1, r2, r3
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b808:	f7ff ff5c 	bl	800b6c4 <prvInsertTimerInActiveList>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d06c      	beq.n	800b8ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	d061      	beq.n	800b8ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	441a      	add	r2, r3
 800b830:	2300      	movs	r3, #0
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	2100      	movs	r1, #0
 800b838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b83a:	f7ff fe01 	bl	800b440 <xTimerGenericCommand>
 800b83e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d152      	bne.n	800b8ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	61bb      	str	r3, [r7, #24]
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	e7fd      	b.n	800b85a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b86c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b870:	e03d      	b.n	800b8ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b878:	f043 0301 	orr.w	r3, r3, #1
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b880:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b888:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10b      	bne.n	800b8aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	617b      	str	r3, [r7, #20]
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	e7fd      	b.n	800b8a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b0:	18d1      	adds	r1, r2, r3
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8b8:	f7ff ff04 	bl	800b6c4 <prvInsertTimerInActiveList>
					break;
 800b8bc:	e017      	b.n	800b8ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d103      	bne.n	800b8d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b8cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8ce:	f000 fbeb 	bl	800c0a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8d2:	e00c      	b.n	800b8ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8da:	f023 0301 	bic.w	r3, r3, #1
 800b8de:	b2da      	uxtb	r2, r3
 800b8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b8e6:	e002      	b.n	800b8ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b8e8:	bf00      	nop
 800b8ea:	e000      	b.n	800b8ee <prvProcessReceivedCommands+0x1a6>
					break;
 800b8ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8ee:	4b08      	ldr	r3, [pc, #32]	@ (800b910 <prvProcessReceivedCommands+0x1c8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	1d39      	adds	r1, r7, #4
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe f9b6 	bl	8009c68 <xQueueReceive>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f47f af26 	bne.w	800b750 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop
 800b908:	3730      	adds	r7, #48	@ 0x30
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	200013d0 	.word	0x200013d0

0800b914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b088      	sub	sp, #32
 800b918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b91a:	e049      	b.n	800b9b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b91c:	4b2e      	ldr	r3, [pc, #184]	@ (800b9d8 <prvSwitchTimerLists+0xc4>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b926:	4b2c      	ldr	r3, [pc, #176]	@ (800b9d8 <prvSwitchTimerLists+0xc4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3304      	adds	r3, #4
 800b934:	4618      	mov	r0, r3
 800b936:	f7fd fec3 	bl	80096c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d02f      	beq.n	800b9b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	4413      	add	r3, r2
 800b958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d90e      	bls.n	800b980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b96e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d8 <prvSwitchTimerLists+0xc4>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3304      	adds	r3, #4
 800b976:	4619      	mov	r1, r3
 800b978:	4610      	mov	r0, r2
 800b97a:	f7fd fe68 	bl	800964e <vListInsert>
 800b97e:	e017      	b.n	800b9b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b980:	2300      	movs	r3, #0
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2300      	movs	r3, #0
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	2100      	movs	r1, #0
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff fd58 	bl	800b440 <xTimerGenericCommand>
 800b990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10b      	bne.n	800b9b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	603b      	str	r3, [r7, #0]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9b0:	4b09      	ldr	r3, [pc, #36]	@ (800b9d8 <prvSwitchTimerLists+0xc4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1b0      	bne.n	800b91c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9ba:	4b07      	ldr	r3, [pc, #28]	@ (800b9d8 <prvSwitchTimerLists+0xc4>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9c0:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <prvSwitchTimerLists+0xc8>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a04      	ldr	r2, [pc, #16]	@ (800b9d8 <prvSwitchTimerLists+0xc4>)
 800b9c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9c8:	4a04      	ldr	r2, [pc, #16]	@ (800b9dc <prvSwitchTimerLists+0xc8>)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	6013      	str	r3, [r2, #0]
}
 800b9ce:	bf00      	nop
 800b9d0:	3718      	adds	r7, #24
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	200013c8 	.word	0x200013c8
 800b9dc:	200013cc 	.word	0x200013cc

0800b9e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9e6:	f000 f96f 	bl	800bcc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9ea:	4b15      	ldr	r3, [pc, #84]	@ (800ba40 <prvCheckForValidListAndQueue+0x60>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d120      	bne.n	800ba34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9f2:	4814      	ldr	r0, [pc, #80]	@ (800ba44 <prvCheckForValidListAndQueue+0x64>)
 800b9f4:	f7fd fdda 	bl	80095ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9f8:	4813      	ldr	r0, [pc, #76]	@ (800ba48 <prvCheckForValidListAndQueue+0x68>)
 800b9fa:	f7fd fdd7 	bl	80095ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9fe:	4b13      	ldr	r3, [pc, #76]	@ (800ba4c <prvCheckForValidListAndQueue+0x6c>)
 800ba00:	4a10      	ldr	r2, [pc, #64]	@ (800ba44 <prvCheckForValidListAndQueue+0x64>)
 800ba02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba04:	4b12      	ldr	r3, [pc, #72]	@ (800ba50 <prvCheckForValidListAndQueue+0x70>)
 800ba06:	4a10      	ldr	r2, [pc, #64]	@ (800ba48 <prvCheckForValidListAndQueue+0x68>)
 800ba08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	4b11      	ldr	r3, [pc, #68]	@ (800ba54 <prvCheckForValidListAndQueue+0x74>)
 800ba10:	4a11      	ldr	r2, [pc, #68]	@ (800ba58 <prvCheckForValidListAndQueue+0x78>)
 800ba12:	2110      	movs	r1, #16
 800ba14:	200a      	movs	r0, #10
 800ba16:	f7fd fee7 	bl	80097e8 <xQueueGenericCreateStatic>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	4a08      	ldr	r2, [pc, #32]	@ (800ba40 <prvCheckForValidListAndQueue+0x60>)
 800ba1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba20:	4b07      	ldr	r3, [pc, #28]	@ (800ba40 <prvCheckForValidListAndQueue+0x60>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d005      	beq.n	800ba34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba28:	4b05      	ldr	r3, [pc, #20]	@ (800ba40 <prvCheckForValidListAndQueue+0x60>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	490b      	ldr	r1, [pc, #44]	@ (800ba5c <prvCheckForValidListAndQueue+0x7c>)
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fb0c 	bl	800a04c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba34:	f000 f97a 	bl	800bd2c <vPortExitCritical>
}
 800ba38:	bf00      	nop
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	200013d0 	.word	0x200013d0
 800ba44:	200013a0 	.word	0x200013a0
 800ba48:	200013b4 	.word	0x200013b4
 800ba4c:	200013c8 	.word	0x200013c8
 800ba50:	200013cc 	.word	0x200013cc
 800ba54:	2000147c 	.word	0x2000147c
 800ba58:	200013dc 	.word	0x200013dc
 800ba5c:	0800f5a8 	.word	0x0800f5a8

0800ba60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3b04      	subs	r3, #4
 800ba70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ba78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3b04      	subs	r3, #4
 800ba7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f023 0201 	bic.w	r2, r3, #1
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3b04      	subs	r3, #4
 800ba8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba90:	4a0c      	ldr	r2, [pc, #48]	@ (800bac4 <pxPortInitialiseStack+0x64>)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3b14      	subs	r3, #20
 800ba9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f06f 0202 	mvn.w	r2, #2
 800baae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3b20      	subs	r3, #32
 800bab4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bab6:	68fb      	ldr	r3, [r7, #12]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	0800bac9 	.word	0x0800bac9

0800bac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bad2:	4b13      	ldr	r3, [pc, #76]	@ (800bb20 <prvTaskExitError+0x58>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bada:	d00b      	beq.n	800baf4 <prvTaskExitError+0x2c>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60fb      	str	r3, [r7, #12]
}
 800baee:	bf00      	nop
 800baf0:	bf00      	nop
 800baf2:	e7fd      	b.n	800baf0 <prvTaskExitError+0x28>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	60bb      	str	r3, [r7, #8]
}
 800bb06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb08:	bf00      	nop
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0fc      	beq.n	800bb0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb10:	bf00      	nop
 800bb12:	bf00      	nop
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	20000144 	.word	0x20000144
	...

0800bb30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb30:	4b07      	ldr	r3, [pc, #28]	@ (800bb50 <pxCurrentTCBConst2>)
 800bb32:	6819      	ldr	r1, [r3, #0]
 800bb34:	6808      	ldr	r0, [r1, #0]
 800bb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3a:	f380 8809 	msr	PSP, r0
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f04f 0000 	mov.w	r0, #0
 800bb46:	f380 8811 	msr	BASEPRI, r0
 800bb4a:	4770      	bx	lr
 800bb4c:	f3af 8000 	nop.w

0800bb50 <pxCurrentTCBConst2>:
 800bb50:	20000ea0 	.word	0x20000ea0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop

0800bb58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb58:	4808      	ldr	r0, [pc, #32]	@ (800bb7c <prvPortStartFirstTask+0x24>)
 800bb5a:	6800      	ldr	r0, [r0, #0]
 800bb5c:	6800      	ldr	r0, [r0, #0]
 800bb5e:	f380 8808 	msr	MSP, r0
 800bb62:	f04f 0000 	mov.w	r0, #0
 800bb66:	f380 8814 	msr	CONTROL, r0
 800bb6a:	b662      	cpsie	i
 800bb6c:	b661      	cpsie	f
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	df00      	svc	0
 800bb78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb7a:	bf00      	nop
 800bb7c:	e000ed08 	.word	0xe000ed08

0800bb80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb86:	4b47      	ldr	r3, [pc, #284]	@ (800bca4 <xPortStartScheduler+0x124>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a47      	ldr	r2, [pc, #284]	@ (800bca8 <xPortStartScheduler+0x128>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d10b      	bne.n	800bba8 <xPortStartScheduler+0x28>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	613b      	str	r3, [r7, #16]
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bba8:	4b3e      	ldr	r3, [pc, #248]	@ (800bca4 <xPortStartScheduler+0x124>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a3f      	ldr	r2, [pc, #252]	@ (800bcac <xPortStartScheduler+0x12c>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d10b      	bne.n	800bbca <xPortStartScheduler+0x4a>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	60fb      	str	r3, [r7, #12]
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	e7fd      	b.n	800bbc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbca:	4b39      	ldr	r3, [pc, #228]	@ (800bcb0 <xPortStartScheduler+0x130>)
 800bbcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	22ff      	movs	r2, #255	@ 0xff
 800bbda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bbe4:	78fb      	ldrb	r3, [r7, #3]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	4b31      	ldr	r3, [pc, #196]	@ (800bcb4 <xPortStartScheduler+0x134>)
 800bbf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbf2:	4b31      	ldr	r3, [pc, #196]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bbf4:	2207      	movs	r2, #7
 800bbf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbf8:	e009      	b.n	800bc0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bbfa:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	4a2d      	ldr	r2, [pc, #180]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bc02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc0e:	78fb      	ldrb	r3, [r7, #3]
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc16:	2b80      	cmp	r3, #128	@ 0x80
 800bc18:	d0ef      	beq.n	800bbfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc1a:	4b27      	ldr	r3, [pc, #156]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f1c3 0307 	rsb	r3, r3, #7
 800bc22:	2b04      	cmp	r3, #4
 800bc24:	d00b      	beq.n	800bc3e <xPortStartScheduler+0xbe>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60bb      	str	r3, [r7, #8]
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc3e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	4a1c      	ldr	r2, [pc, #112]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bc46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc48:	4b1b      	ldr	r3, [pc, #108]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc50:	4a19      	ldr	r2, [pc, #100]	@ (800bcb8 <xPortStartScheduler+0x138>)
 800bc52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc5c:	4b17      	ldr	r3, [pc, #92]	@ (800bcbc <xPortStartScheduler+0x13c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a16      	ldr	r2, [pc, #88]	@ (800bcbc <xPortStartScheduler+0x13c>)
 800bc62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bc66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc68:	4b14      	ldr	r3, [pc, #80]	@ (800bcbc <xPortStartScheduler+0x13c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a13      	ldr	r2, [pc, #76]	@ (800bcbc <xPortStartScheduler+0x13c>)
 800bc6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bc72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc74:	f000 f8da 	bl	800be2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc78:	4b11      	ldr	r3, [pc, #68]	@ (800bcc0 <xPortStartScheduler+0x140>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc7e:	f000 f8f9 	bl	800be74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc82:	4b10      	ldr	r3, [pc, #64]	@ (800bcc4 <xPortStartScheduler+0x144>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a0f      	ldr	r2, [pc, #60]	@ (800bcc4 <xPortStartScheduler+0x144>)
 800bc88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bc8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc8e:	f7ff ff63 	bl	800bb58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc92:	f7fe fe13 	bl	800a8bc <vTaskSwitchContext>
	prvTaskExitError();
 800bc96:	f7ff ff17 	bl	800bac8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	e000ed00 	.word	0xe000ed00
 800bca8:	410fc271 	.word	0x410fc271
 800bcac:	410fc270 	.word	0x410fc270
 800bcb0:	e000e400 	.word	0xe000e400
 800bcb4:	200014cc 	.word	0x200014cc
 800bcb8:	200014d0 	.word	0x200014d0
 800bcbc:	e000ed20 	.word	0xe000ed20
 800bcc0:	20000144 	.word	0x20000144
 800bcc4:	e000ef34 	.word	0xe000ef34

0800bcc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	607b      	str	r3, [r7, #4]
}
 800bce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bce2:	4b10      	ldr	r3, [pc, #64]	@ (800bd24 <vPortEnterCritical+0x5c>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3301      	adds	r3, #1
 800bce8:	4a0e      	ldr	r2, [pc, #56]	@ (800bd24 <vPortEnterCritical+0x5c>)
 800bcea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bcec:	4b0d      	ldr	r3, [pc, #52]	@ (800bd24 <vPortEnterCritical+0x5c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d110      	bne.n	800bd16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd28 <vPortEnterCritical+0x60>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <vPortEnterCritical+0x4e>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	603b      	str	r3, [r7, #0]
}
 800bd10:	bf00      	nop
 800bd12:	bf00      	nop
 800bd14:	e7fd      	b.n	800bd12 <vPortEnterCritical+0x4a>
	}
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	20000144 	.word	0x20000144
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd32:	4b12      	ldr	r3, [pc, #72]	@ (800bd7c <vPortExitCritical+0x50>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10b      	bne.n	800bd52 <vPortExitCritical+0x26>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	607b      	str	r3, [r7, #4]
}
 800bd4c:	bf00      	nop
 800bd4e:	bf00      	nop
 800bd50:	e7fd      	b.n	800bd4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd52:	4b0a      	ldr	r3, [pc, #40]	@ (800bd7c <vPortExitCritical+0x50>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	4a08      	ldr	r2, [pc, #32]	@ (800bd7c <vPortExitCritical+0x50>)
 800bd5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd5c:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <vPortExitCritical+0x50>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d105      	bne.n	800bd70 <vPortExitCritical+0x44>
 800bd64:	2300      	movs	r3, #0
 800bd66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	f383 8811 	msr	BASEPRI, r3
}
 800bd6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	20000144 	.word	0x20000144

0800bd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd80:	f3ef 8009 	mrs	r0, PSP
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	4b15      	ldr	r3, [pc, #84]	@ (800bde0 <pxCurrentTCBConst>)
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	f01e 0f10 	tst.w	lr, #16
 800bd90:	bf08      	it	eq
 800bd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9a:	6010      	str	r0, [r2, #0]
 800bd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bda0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bda4:	f380 8811 	msr	BASEPRI, r0
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f7fe fd84 	bl	800a8bc <vTaskSwitchContext>
 800bdb4:	f04f 0000 	mov.w	r0, #0
 800bdb8:	f380 8811 	msr	BASEPRI, r0
 800bdbc:	bc09      	pop	{r0, r3}
 800bdbe:	6819      	ldr	r1, [r3, #0]
 800bdc0:	6808      	ldr	r0, [r1, #0]
 800bdc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc6:	f01e 0f10 	tst.w	lr, #16
 800bdca:	bf08      	it	eq
 800bdcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bdd0:	f380 8809 	msr	PSP, r0
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	f3af 8000 	nop.w

0800bde0 <pxCurrentTCBConst>:
 800bde0:	20000ea0 	.word	0x20000ea0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bde4:	bf00      	nop
 800bde6:	bf00      	nop

0800bde8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	607b      	str	r3, [r7, #4]
}
 800be00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be02:	f7fe fca1 	bl	800a748 <xTaskIncrementTick>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be0c:	4b06      	ldr	r3, [pc, #24]	@ (800be28 <xPortSysTickHandler+0x40>)
 800be0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	2300      	movs	r3, #0
 800be16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	f383 8811 	msr	BASEPRI, r3
}
 800be1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be20:	bf00      	nop
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be2c:	b480      	push	{r7}
 800be2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be30:	4b0b      	ldr	r3, [pc, #44]	@ (800be60 <vPortSetupTimerInterrupt+0x34>)
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be36:	4b0b      	ldr	r3, [pc, #44]	@ (800be64 <vPortSetupTimerInterrupt+0x38>)
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be3c:	4b0a      	ldr	r3, [pc, #40]	@ (800be68 <vPortSetupTimerInterrupt+0x3c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a0a      	ldr	r2, [pc, #40]	@ (800be6c <vPortSetupTimerInterrupt+0x40>)
 800be42:	fba2 2303 	umull	r2, r3, r2, r3
 800be46:	099b      	lsrs	r3, r3, #6
 800be48:	4a09      	ldr	r2, [pc, #36]	@ (800be70 <vPortSetupTimerInterrupt+0x44>)
 800be4a:	3b01      	subs	r3, #1
 800be4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be4e:	4b04      	ldr	r3, [pc, #16]	@ (800be60 <vPortSetupTimerInterrupt+0x34>)
 800be50:	2207      	movs	r2, #7
 800be52:	601a      	str	r2, [r3, #0]
}
 800be54:	bf00      	nop
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	e000e010 	.word	0xe000e010
 800be64:	e000e018 	.word	0xe000e018
 800be68:	20000128 	.word	0x20000128
 800be6c:	10624dd3 	.word	0x10624dd3
 800be70:	e000e014 	.word	0xe000e014

0800be74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800be84 <vPortEnableVFP+0x10>
 800be78:	6801      	ldr	r1, [r0, #0]
 800be7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800be7e:	6001      	str	r1, [r0, #0]
 800be80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be82:	bf00      	nop
 800be84:	e000ed88 	.word	0xe000ed88

0800be88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be8e:	f3ef 8305 	mrs	r3, IPSR
 800be92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b0f      	cmp	r3, #15
 800be98:	d915      	bls.n	800bec6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be9a:	4a18      	ldr	r2, [pc, #96]	@ (800befc <vPortValidateInterruptPriority+0x74>)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bea4:	4b16      	ldr	r3, [pc, #88]	@ (800bf00 <vPortValidateInterruptPriority+0x78>)
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	7afa      	ldrb	r2, [r7, #11]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d20b      	bcs.n	800bec6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	607b      	str	r3, [r7, #4]
}
 800bec0:	bf00      	nop
 800bec2:	bf00      	nop
 800bec4:	e7fd      	b.n	800bec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bec6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf04 <vPortValidateInterruptPriority+0x7c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bece:	4b0e      	ldr	r3, [pc, #56]	@ (800bf08 <vPortValidateInterruptPriority+0x80>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d90b      	bls.n	800beee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	603b      	str	r3, [r7, #0]
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	e7fd      	b.n	800beea <vPortValidateInterruptPriority+0x62>
	}
 800beee:	bf00      	nop
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	e000e3f0 	.word	0xe000e3f0
 800bf00:	200014cc 	.word	0x200014cc
 800bf04:	e000ed0c 	.word	0xe000ed0c
 800bf08:	200014d0 	.word	0x200014d0

0800bf0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08a      	sub	sp, #40	@ 0x28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf18:	f7fe fb5a 	bl	800a5d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf1c:	4b5c      	ldr	r3, [pc, #368]	@ (800c090 <pvPortMalloc+0x184>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf24:	f000 f924 	bl	800c170 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf28:	4b5a      	ldr	r3, [pc, #360]	@ (800c094 <pvPortMalloc+0x188>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4013      	ands	r3, r2
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f040 8095 	bne.w	800c060 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d01e      	beq.n	800bf7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bf3c:	2208      	movs	r2, #8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4413      	add	r3, r2
 800bf42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f003 0307 	and.w	r3, r3, #7
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d015      	beq.n	800bf7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f023 0307 	bic.w	r3, r3, #7
 800bf54:	3308      	adds	r3, #8
 800bf56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f003 0307 	and.w	r3, r3, #7
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00b      	beq.n	800bf7a <pvPortMalloc+0x6e>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	617b      	str	r3, [r7, #20]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d06f      	beq.n	800c060 <pvPortMalloc+0x154>
 800bf80:	4b45      	ldr	r3, [pc, #276]	@ (800c098 <pvPortMalloc+0x18c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d86a      	bhi.n	800c060 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf8a:	4b44      	ldr	r3, [pc, #272]	@ (800c09c <pvPortMalloc+0x190>)
 800bf8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf8e:	4b43      	ldr	r3, [pc, #268]	@ (800c09c <pvPortMalloc+0x190>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf94:	e004      	b.n	800bfa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d903      	bls.n	800bfb2 <pvPortMalloc+0xa6>
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1f1      	bne.n	800bf96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfb2:	4b37      	ldr	r3, [pc, #220]	@ (800c090 <pvPortMalloc+0x184>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d051      	beq.n	800c060 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	4413      	add	r3, r2
 800bfc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	6a3b      	ldr	r3, [r7, #32]
 800bfcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	1ad2      	subs	r2, r2, r3
 800bfd6:	2308      	movs	r3, #8
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d920      	bls.n	800c020 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bfde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	f003 0307 	and.w	r3, r3, #7
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <pvPortMalloc+0xfc>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	613b      	str	r3, [r7, #16]
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c01a:	69b8      	ldr	r0, [r7, #24]
 800c01c:	f000 f90a 	bl	800c234 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c020:	4b1d      	ldr	r3, [pc, #116]	@ (800c098 <pvPortMalloc+0x18c>)
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	1ad3      	subs	r3, r2, r3
 800c02a:	4a1b      	ldr	r2, [pc, #108]	@ (800c098 <pvPortMalloc+0x18c>)
 800c02c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c02e:	4b1a      	ldr	r3, [pc, #104]	@ (800c098 <pvPortMalloc+0x18c>)
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	4b1b      	ldr	r3, [pc, #108]	@ (800c0a0 <pvPortMalloc+0x194>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	d203      	bcs.n	800c042 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c03a:	4b17      	ldr	r3, [pc, #92]	@ (800c098 <pvPortMalloc+0x18c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a18      	ldr	r2, [pc, #96]	@ (800c0a0 <pvPortMalloc+0x194>)
 800c040:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	4b13      	ldr	r3, [pc, #76]	@ (800c094 <pvPortMalloc+0x188>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	431a      	orrs	r2, r3
 800c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c056:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <pvPortMalloc+0x198>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3301      	adds	r3, #1
 800c05c:	4a11      	ldr	r2, [pc, #68]	@ (800c0a4 <pvPortMalloc+0x198>)
 800c05e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c060:	f7fe fac4 	bl	800a5ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00b      	beq.n	800c086 <pvPortMalloc+0x17a>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	60fb      	str	r3, [r7, #12]
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	e7fd      	b.n	800c082 <pvPortMalloc+0x176>
	return pvReturn;
 800c086:	69fb      	ldr	r3, [r7, #28]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3728      	adds	r7, #40	@ 0x28
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	2000341c 	.word	0x2000341c
 800c094:	20003430 	.word	0x20003430
 800c098:	20003420 	.word	0x20003420
 800c09c:	20003414 	.word	0x20003414
 800c0a0:	20003424 	.word	0x20003424
 800c0a4:	20003428 	.word	0x20003428

0800c0a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d04f      	beq.n	800c15a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0ba:	2308      	movs	r3, #8
 800c0bc:	425b      	negs	r3, r3
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	4b25      	ldr	r3, [pc, #148]	@ (800c164 <vPortFree+0xbc>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10b      	bne.n	800c0ee <vPortFree+0x46>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	60fb      	str	r3, [r7, #12]
}
 800c0e8:	bf00      	nop
 800c0ea:	bf00      	nop
 800c0ec:	e7fd      	b.n	800c0ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00b      	beq.n	800c10e <vPortFree+0x66>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	60bb      	str	r3, [r7, #8]
}
 800c108:	bf00      	nop
 800c10a:	bf00      	nop
 800c10c:	e7fd      	b.n	800c10a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	4b14      	ldr	r3, [pc, #80]	@ (800c164 <vPortFree+0xbc>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4013      	ands	r3, r2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01e      	beq.n	800c15a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11a      	bne.n	800c15a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	4b0e      	ldr	r3, [pc, #56]	@ (800c164 <vPortFree+0xbc>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	43db      	mvns	r3, r3
 800c12e:	401a      	ands	r2, r3
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c134:	f7fe fa4c 	bl	800a5d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	4b0a      	ldr	r3, [pc, #40]	@ (800c168 <vPortFree+0xc0>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4413      	add	r3, r2
 800c142:	4a09      	ldr	r2, [pc, #36]	@ (800c168 <vPortFree+0xc0>)
 800c144:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c146:	6938      	ldr	r0, [r7, #16]
 800c148:	f000 f874 	bl	800c234 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c14c:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <vPortFree+0xc4>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3301      	adds	r3, #1
 800c152:	4a06      	ldr	r2, [pc, #24]	@ (800c16c <vPortFree+0xc4>)
 800c154:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c156:	f7fe fa49 	bl	800a5ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c15a:	bf00      	nop
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20003430 	.word	0x20003430
 800c168:	20003420 	.word	0x20003420
 800c16c:	2000342c 	.word	0x2000342c

0800c170 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c176:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800c17a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c17c:	4b27      	ldr	r3, [pc, #156]	@ (800c21c <prvHeapInit+0xac>)
 800c17e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00c      	beq.n	800c1a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3307      	adds	r3, #7
 800c18e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f023 0307 	bic.w	r3, r3, #7
 800c196:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	4a1f      	ldr	r2, [pc, #124]	@ (800c21c <prvHeapInit+0xac>)
 800c1a0:	4413      	add	r3, r2
 800c1a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c220 <prvHeapInit+0xb0>)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c220 <prvHeapInit+0xb0>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1bc:	2208      	movs	r2, #8
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4a15      	ldr	r2, [pc, #84]	@ (800c224 <prvHeapInit+0xb4>)
 800c1d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1d2:	4b14      	ldr	r3, [pc, #80]	@ (800c224 <prvHeapInit+0xb4>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1da:	4b12      	ldr	r3, [pc, #72]	@ (800c224 <prvHeapInit+0xb4>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	1ad2      	subs	r2, r2, r3
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c224 <prvHeapInit+0xb4>)
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c228 <prvHeapInit+0xb8>)
 800c1fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	4a09      	ldr	r2, [pc, #36]	@ (800c22c <prvHeapInit+0xbc>)
 800c206:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c208:	4b09      	ldr	r3, [pc, #36]	@ (800c230 <prvHeapInit+0xc0>)
 800c20a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c20e:	601a      	str	r2, [r3, #0]
}
 800c210:	bf00      	nop
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	200014d4 	.word	0x200014d4
 800c220:	20003414 	.word	0x20003414
 800c224:	2000341c 	.word	0x2000341c
 800c228:	20003424 	.word	0x20003424
 800c22c:	20003420 	.word	0x20003420
 800c230:	20003430 	.word	0x20003430

0800c234 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c23c:	4b28      	ldr	r3, [pc, #160]	@ (800c2e0 <prvInsertBlockIntoFreeList+0xac>)
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	e002      	b.n	800c248 <prvInsertBlockIntoFreeList+0x14>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d8f7      	bhi.n	800c242 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	4413      	add	r3, r2
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	429a      	cmp	r2, r3
 800c262:	d108      	bne.n	800c276 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	441a      	add	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	441a      	add	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	429a      	cmp	r2, r3
 800c288:	d118      	bne.n	800c2bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4b15      	ldr	r3, [pc, #84]	@ (800c2e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d00d      	beq.n	800c2b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685a      	ldr	r2, [r3, #4]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	e008      	b.n	800c2c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c2e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	e003      	b.n	800c2c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d002      	beq.n	800c2d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2d2:	bf00      	nop
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	20003414 	.word	0x20003414
 800c2e4:	2000341c 	.word	0x2000341c

0800c2e8 <calloc>:
 800c2e8:	4b02      	ldr	r3, [pc, #8]	@ (800c2f4 <calloc+0xc>)
 800c2ea:	460a      	mov	r2, r1
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	6818      	ldr	r0, [r3, #0]
 800c2f0:	f000 b802 	b.w	800c2f8 <_calloc_r>
 800c2f4:	20000154 	.word	0x20000154

0800c2f8 <_calloc_r>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	fba1 5402 	umull	r5, r4, r1, r2
 800c2fe:	b93c      	cbnz	r4, 800c310 <_calloc_r+0x18>
 800c300:	4629      	mov	r1, r5
 800c302:	f000 f837 	bl	800c374 <_malloc_r>
 800c306:	4606      	mov	r6, r0
 800c308:	b928      	cbnz	r0, 800c316 <_calloc_r+0x1e>
 800c30a:	2600      	movs	r6, #0
 800c30c:	4630      	mov	r0, r6
 800c30e:	bd70      	pop	{r4, r5, r6, pc}
 800c310:	220c      	movs	r2, #12
 800c312:	6002      	str	r2, [r0, #0]
 800c314:	e7f9      	b.n	800c30a <_calloc_r+0x12>
 800c316:	462a      	mov	r2, r5
 800c318:	4621      	mov	r1, r4
 800c31a:	f000 feb8 	bl	800d08e <memset>
 800c31e:	e7f5      	b.n	800c30c <_calloc_r+0x14>

0800c320 <malloc>:
 800c320:	4b02      	ldr	r3, [pc, #8]	@ (800c32c <malloc+0xc>)
 800c322:	4601      	mov	r1, r0
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	f000 b825 	b.w	800c374 <_malloc_r>
 800c32a:	bf00      	nop
 800c32c:	20000154 	.word	0x20000154

0800c330 <sbrk_aligned>:
 800c330:	b570      	push	{r4, r5, r6, lr}
 800c332:	4e0f      	ldr	r6, [pc, #60]	@ (800c370 <sbrk_aligned+0x40>)
 800c334:	460c      	mov	r4, r1
 800c336:	6831      	ldr	r1, [r6, #0]
 800c338:	4605      	mov	r5, r0
 800c33a:	b911      	cbnz	r1, 800c342 <sbrk_aligned+0x12>
 800c33c:	f000 ff9a 	bl	800d274 <_sbrk_r>
 800c340:	6030      	str	r0, [r6, #0]
 800c342:	4621      	mov	r1, r4
 800c344:	4628      	mov	r0, r5
 800c346:	f000 ff95 	bl	800d274 <_sbrk_r>
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	d103      	bne.n	800c356 <sbrk_aligned+0x26>
 800c34e:	f04f 34ff 	mov.w	r4, #4294967295
 800c352:	4620      	mov	r0, r4
 800c354:	bd70      	pop	{r4, r5, r6, pc}
 800c356:	1cc4      	adds	r4, r0, #3
 800c358:	f024 0403 	bic.w	r4, r4, #3
 800c35c:	42a0      	cmp	r0, r4
 800c35e:	d0f8      	beq.n	800c352 <sbrk_aligned+0x22>
 800c360:	1a21      	subs	r1, r4, r0
 800c362:	4628      	mov	r0, r5
 800c364:	f000 ff86 	bl	800d274 <_sbrk_r>
 800c368:	3001      	adds	r0, #1
 800c36a:	d1f2      	bne.n	800c352 <sbrk_aligned+0x22>
 800c36c:	e7ef      	b.n	800c34e <sbrk_aligned+0x1e>
 800c36e:	bf00      	nop
 800c370:	20003434 	.word	0x20003434

0800c374 <_malloc_r>:
 800c374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c378:	1ccd      	adds	r5, r1, #3
 800c37a:	f025 0503 	bic.w	r5, r5, #3
 800c37e:	3508      	adds	r5, #8
 800c380:	2d0c      	cmp	r5, #12
 800c382:	bf38      	it	cc
 800c384:	250c      	movcc	r5, #12
 800c386:	2d00      	cmp	r5, #0
 800c388:	4606      	mov	r6, r0
 800c38a:	db01      	blt.n	800c390 <_malloc_r+0x1c>
 800c38c:	42a9      	cmp	r1, r5
 800c38e:	d904      	bls.n	800c39a <_malloc_r+0x26>
 800c390:	230c      	movs	r3, #12
 800c392:	6033      	str	r3, [r6, #0]
 800c394:	2000      	movs	r0, #0
 800c396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c470 <_malloc_r+0xfc>
 800c39e:	f000 f869 	bl	800c474 <__malloc_lock>
 800c3a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c3a6:	461c      	mov	r4, r3
 800c3a8:	bb44      	cbnz	r4, 800c3fc <_malloc_r+0x88>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7ff ffbf 	bl	800c330 <sbrk_aligned>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	d158      	bne.n	800c46a <_malloc_r+0xf6>
 800c3b8:	f8d8 4000 	ldr.w	r4, [r8]
 800c3bc:	4627      	mov	r7, r4
 800c3be:	2f00      	cmp	r7, #0
 800c3c0:	d143      	bne.n	800c44a <_malloc_r+0xd6>
 800c3c2:	2c00      	cmp	r4, #0
 800c3c4:	d04b      	beq.n	800c45e <_malloc_r+0xea>
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	eb04 0903 	add.w	r9, r4, r3
 800c3d0:	f000 ff50 	bl	800d274 <_sbrk_r>
 800c3d4:	4581      	cmp	r9, r0
 800c3d6:	d142      	bne.n	800c45e <_malloc_r+0xea>
 800c3d8:	6821      	ldr	r1, [r4, #0]
 800c3da:	1a6d      	subs	r5, r5, r1
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7ff ffa6 	bl	800c330 <sbrk_aligned>
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d03a      	beq.n	800c45e <_malloc_r+0xea>
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	442b      	add	r3, r5
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	bb62      	cbnz	r2, 800c450 <_malloc_r+0xdc>
 800c3f6:	f8c8 7000 	str.w	r7, [r8]
 800c3fa:	e00f      	b.n	800c41c <_malloc_r+0xa8>
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	1b52      	subs	r2, r2, r5
 800c400:	d420      	bmi.n	800c444 <_malloc_r+0xd0>
 800c402:	2a0b      	cmp	r2, #11
 800c404:	d917      	bls.n	800c436 <_malloc_r+0xc2>
 800c406:	1961      	adds	r1, r4, r5
 800c408:	42a3      	cmp	r3, r4
 800c40a:	6025      	str	r5, [r4, #0]
 800c40c:	bf18      	it	ne
 800c40e:	6059      	strne	r1, [r3, #4]
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	bf08      	it	eq
 800c414:	f8c8 1000 	streq.w	r1, [r8]
 800c418:	5162      	str	r2, [r4, r5]
 800c41a:	604b      	str	r3, [r1, #4]
 800c41c:	4630      	mov	r0, r6
 800c41e:	f000 f82f 	bl	800c480 <__malloc_unlock>
 800c422:	f104 000b 	add.w	r0, r4, #11
 800c426:	1d23      	adds	r3, r4, #4
 800c428:	f020 0007 	bic.w	r0, r0, #7
 800c42c:	1ac2      	subs	r2, r0, r3
 800c42e:	bf1c      	itt	ne
 800c430:	1a1b      	subne	r3, r3, r0
 800c432:	50a3      	strne	r3, [r4, r2]
 800c434:	e7af      	b.n	800c396 <_malloc_r+0x22>
 800c436:	6862      	ldr	r2, [r4, #4]
 800c438:	42a3      	cmp	r3, r4
 800c43a:	bf0c      	ite	eq
 800c43c:	f8c8 2000 	streq.w	r2, [r8]
 800c440:	605a      	strne	r2, [r3, #4]
 800c442:	e7eb      	b.n	800c41c <_malloc_r+0xa8>
 800c444:	4623      	mov	r3, r4
 800c446:	6864      	ldr	r4, [r4, #4]
 800c448:	e7ae      	b.n	800c3a8 <_malloc_r+0x34>
 800c44a:	463c      	mov	r4, r7
 800c44c:	687f      	ldr	r7, [r7, #4]
 800c44e:	e7b6      	b.n	800c3be <_malloc_r+0x4a>
 800c450:	461a      	mov	r2, r3
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	42a3      	cmp	r3, r4
 800c456:	d1fb      	bne.n	800c450 <_malloc_r+0xdc>
 800c458:	2300      	movs	r3, #0
 800c45a:	6053      	str	r3, [r2, #4]
 800c45c:	e7de      	b.n	800c41c <_malloc_r+0xa8>
 800c45e:	230c      	movs	r3, #12
 800c460:	6033      	str	r3, [r6, #0]
 800c462:	4630      	mov	r0, r6
 800c464:	f000 f80c 	bl	800c480 <__malloc_unlock>
 800c468:	e794      	b.n	800c394 <_malloc_r+0x20>
 800c46a:	6005      	str	r5, [r0, #0]
 800c46c:	e7d6      	b.n	800c41c <_malloc_r+0xa8>
 800c46e:	bf00      	nop
 800c470:	20003438 	.word	0x20003438

0800c474 <__malloc_lock>:
 800c474:	4801      	ldr	r0, [pc, #4]	@ (800c47c <__malloc_lock+0x8>)
 800c476:	f000 bf4a 	b.w	800d30e <__retarget_lock_acquire_recursive>
 800c47a:	bf00      	nop
 800c47c:	2000357c 	.word	0x2000357c

0800c480 <__malloc_unlock>:
 800c480:	4801      	ldr	r0, [pc, #4]	@ (800c488 <__malloc_unlock+0x8>)
 800c482:	f000 bf45 	b.w	800d310 <__retarget_lock_release_recursive>
 800c486:	bf00      	nop
 800c488:	2000357c 	.word	0x2000357c

0800c48c <_strtol_l.constprop.0>:
 800c48c:	2b24      	cmp	r3, #36	@ 0x24
 800c48e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c492:	4686      	mov	lr, r0
 800c494:	4690      	mov	r8, r2
 800c496:	d801      	bhi.n	800c49c <_strtol_l.constprop.0+0x10>
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d106      	bne.n	800c4aa <_strtol_l.constprop.0+0x1e>
 800c49c:	f000 ff0c 	bl	800d2b8 <__errno>
 800c4a0:	2316      	movs	r3, #22
 800c4a2:	6003      	str	r3, [r0, #0]
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4aa:	4834      	ldr	r0, [pc, #208]	@ (800c57c <_strtol_l.constprop.0+0xf0>)
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4b4:	5d06      	ldrb	r6, [r0, r4]
 800c4b6:	f016 0608 	ands.w	r6, r6, #8
 800c4ba:	d1f8      	bne.n	800c4ae <_strtol_l.constprop.0+0x22>
 800c4bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c4be:	d12d      	bne.n	800c51c <_strtol_l.constprop.0+0x90>
 800c4c0:	782c      	ldrb	r4, [r5, #0]
 800c4c2:	2601      	movs	r6, #1
 800c4c4:	1c95      	adds	r5, r2, #2
 800c4c6:	f033 0210 	bics.w	r2, r3, #16
 800c4ca:	d109      	bne.n	800c4e0 <_strtol_l.constprop.0+0x54>
 800c4cc:	2c30      	cmp	r4, #48	@ 0x30
 800c4ce:	d12a      	bne.n	800c526 <_strtol_l.constprop.0+0x9a>
 800c4d0:	782a      	ldrb	r2, [r5, #0]
 800c4d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4d6:	2a58      	cmp	r2, #88	@ 0x58
 800c4d8:	d125      	bne.n	800c526 <_strtol_l.constprop.0+0x9a>
 800c4da:	786c      	ldrb	r4, [r5, #1]
 800c4dc:	2310      	movs	r3, #16
 800c4de:	3502      	adds	r5, #2
 800c4e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c4e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	fbbc f9f3 	udiv	r9, ip, r3
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c4f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c4f8:	2f09      	cmp	r7, #9
 800c4fa:	d81b      	bhi.n	800c534 <_strtol_l.constprop.0+0xa8>
 800c4fc:	463c      	mov	r4, r7
 800c4fe:	42a3      	cmp	r3, r4
 800c500:	dd27      	ble.n	800c552 <_strtol_l.constprop.0+0xc6>
 800c502:	1c57      	adds	r7, r2, #1
 800c504:	d007      	beq.n	800c516 <_strtol_l.constprop.0+0x8a>
 800c506:	4581      	cmp	r9, r0
 800c508:	d320      	bcc.n	800c54c <_strtol_l.constprop.0+0xc0>
 800c50a:	d101      	bne.n	800c510 <_strtol_l.constprop.0+0x84>
 800c50c:	45a2      	cmp	sl, r4
 800c50e:	db1d      	blt.n	800c54c <_strtol_l.constprop.0+0xc0>
 800c510:	fb00 4003 	mla	r0, r0, r3, r4
 800c514:	2201      	movs	r2, #1
 800c516:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c51a:	e7eb      	b.n	800c4f4 <_strtol_l.constprop.0+0x68>
 800c51c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c51e:	bf04      	itt	eq
 800c520:	782c      	ldrbeq	r4, [r5, #0]
 800c522:	1c95      	addeq	r5, r2, #2
 800c524:	e7cf      	b.n	800c4c6 <_strtol_l.constprop.0+0x3a>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1da      	bne.n	800c4e0 <_strtol_l.constprop.0+0x54>
 800c52a:	2c30      	cmp	r4, #48	@ 0x30
 800c52c:	bf0c      	ite	eq
 800c52e:	2308      	moveq	r3, #8
 800c530:	230a      	movne	r3, #10
 800c532:	e7d5      	b.n	800c4e0 <_strtol_l.constprop.0+0x54>
 800c534:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c538:	2f19      	cmp	r7, #25
 800c53a:	d801      	bhi.n	800c540 <_strtol_l.constprop.0+0xb4>
 800c53c:	3c37      	subs	r4, #55	@ 0x37
 800c53e:	e7de      	b.n	800c4fe <_strtol_l.constprop.0+0x72>
 800c540:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c544:	2f19      	cmp	r7, #25
 800c546:	d804      	bhi.n	800c552 <_strtol_l.constprop.0+0xc6>
 800c548:	3c57      	subs	r4, #87	@ 0x57
 800c54a:	e7d8      	b.n	800c4fe <_strtol_l.constprop.0+0x72>
 800c54c:	f04f 32ff 	mov.w	r2, #4294967295
 800c550:	e7e1      	b.n	800c516 <_strtol_l.constprop.0+0x8a>
 800c552:	1c53      	adds	r3, r2, #1
 800c554:	d108      	bne.n	800c568 <_strtol_l.constprop.0+0xdc>
 800c556:	2322      	movs	r3, #34	@ 0x22
 800c558:	f8ce 3000 	str.w	r3, [lr]
 800c55c:	4660      	mov	r0, ip
 800c55e:	f1b8 0f00 	cmp.w	r8, #0
 800c562:	d0a0      	beq.n	800c4a6 <_strtol_l.constprop.0+0x1a>
 800c564:	1e69      	subs	r1, r5, #1
 800c566:	e006      	b.n	800c576 <_strtol_l.constprop.0+0xea>
 800c568:	b106      	cbz	r6, 800c56c <_strtol_l.constprop.0+0xe0>
 800c56a:	4240      	negs	r0, r0
 800c56c:	f1b8 0f00 	cmp.w	r8, #0
 800c570:	d099      	beq.n	800c4a6 <_strtol_l.constprop.0+0x1a>
 800c572:	2a00      	cmp	r2, #0
 800c574:	d1f6      	bne.n	800c564 <_strtol_l.constprop.0+0xd8>
 800c576:	f8c8 1000 	str.w	r1, [r8]
 800c57a:	e794      	b.n	800c4a6 <_strtol_l.constprop.0+0x1a>
 800c57c:	0800f689 	.word	0x0800f689

0800c580 <strtol>:
 800c580:	4613      	mov	r3, r2
 800c582:	460a      	mov	r2, r1
 800c584:	4601      	mov	r1, r0
 800c586:	4802      	ldr	r0, [pc, #8]	@ (800c590 <strtol+0x10>)
 800c588:	6800      	ldr	r0, [r0, #0]
 800c58a:	f7ff bf7f 	b.w	800c48c <_strtol_l.constprop.0>
 800c58e:	bf00      	nop
 800c590:	20000154 	.word	0x20000154

0800c594 <__cvt>:
 800c594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	ec57 6b10 	vmov	r6, r7, d0
 800c59c:	2f00      	cmp	r7, #0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	bfbb      	ittet	lt
 800c5a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c5aa:	461f      	movlt	r7, r3
 800c5ac:	2300      	movge	r3, #0
 800c5ae:	232d      	movlt	r3, #45	@ 0x2d
 800c5b0:	700b      	strb	r3, [r1, #0]
 800c5b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c5b8:	4691      	mov	r9, r2
 800c5ba:	f023 0820 	bic.w	r8, r3, #32
 800c5be:	bfbc      	itt	lt
 800c5c0:	4632      	movlt	r2, r6
 800c5c2:	4616      	movlt	r6, r2
 800c5c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5c8:	d005      	beq.n	800c5d6 <__cvt+0x42>
 800c5ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c5ce:	d100      	bne.n	800c5d2 <__cvt+0x3e>
 800c5d0:	3401      	adds	r4, #1
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	e000      	b.n	800c5d8 <__cvt+0x44>
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	ab03      	add	r3, sp, #12
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	ab02      	add	r3, sp, #8
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	ec47 6b10 	vmov	d0, r6, r7
 800c5e4:	4653      	mov	r3, sl
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	f000 ff4a 	bl	800d480 <_dtoa_r>
 800c5ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	d119      	bne.n	800c628 <__cvt+0x94>
 800c5f4:	f019 0f01 	tst.w	r9, #1
 800c5f8:	d00e      	beq.n	800c618 <__cvt+0x84>
 800c5fa:	eb00 0904 	add.w	r9, r0, r4
 800c5fe:	2200      	movs	r2, #0
 800c600:	2300      	movs	r3, #0
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f4 fa6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c60a:	b108      	cbz	r0, 800c610 <__cvt+0x7c>
 800c60c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c610:	2230      	movs	r2, #48	@ 0x30
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	454b      	cmp	r3, r9
 800c616:	d31e      	bcc.n	800c656 <__cvt+0xc2>
 800c618:	9b03      	ldr	r3, [sp, #12]
 800c61a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c61c:	1b5b      	subs	r3, r3, r5
 800c61e:	4628      	mov	r0, r5
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	b004      	add	sp, #16
 800c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c62c:	eb00 0904 	add.w	r9, r0, r4
 800c630:	d1e5      	bne.n	800c5fe <__cvt+0x6a>
 800c632:	7803      	ldrb	r3, [r0, #0]
 800c634:	2b30      	cmp	r3, #48	@ 0x30
 800c636:	d10a      	bne.n	800c64e <__cvt+0xba>
 800c638:	2200      	movs	r2, #0
 800c63a:	2300      	movs	r3, #0
 800c63c:	4630      	mov	r0, r6
 800c63e:	4639      	mov	r1, r7
 800c640:	f7f4 fa52 	bl	8000ae8 <__aeabi_dcmpeq>
 800c644:	b918      	cbnz	r0, 800c64e <__cvt+0xba>
 800c646:	f1c4 0401 	rsb	r4, r4, #1
 800c64a:	f8ca 4000 	str.w	r4, [sl]
 800c64e:	f8da 3000 	ldr.w	r3, [sl]
 800c652:	4499      	add	r9, r3
 800c654:	e7d3      	b.n	800c5fe <__cvt+0x6a>
 800c656:	1c59      	adds	r1, r3, #1
 800c658:	9103      	str	r1, [sp, #12]
 800c65a:	701a      	strb	r2, [r3, #0]
 800c65c:	e7d9      	b.n	800c612 <__cvt+0x7e>

0800c65e <__exponent>:
 800c65e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c660:	2900      	cmp	r1, #0
 800c662:	bfba      	itte	lt
 800c664:	4249      	neglt	r1, r1
 800c666:	232d      	movlt	r3, #45	@ 0x2d
 800c668:	232b      	movge	r3, #43	@ 0x2b
 800c66a:	2909      	cmp	r1, #9
 800c66c:	7002      	strb	r2, [r0, #0]
 800c66e:	7043      	strb	r3, [r0, #1]
 800c670:	dd29      	ble.n	800c6c6 <__exponent+0x68>
 800c672:	f10d 0307 	add.w	r3, sp, #7
 800c676:	461d      	mov	r5, r3
 800c678:	270a      	movs	r7, #10
 800c67a:	461a      	mov	r2, r3
 800c67c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c680:	fb07 1416 	mls	r4, r7, r6, r1
 800c684:	3430      	adds	r4, #48	@ 0x30
 800c686:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c68a:	460c      	mov	r4, r1
 800c68c:	2c63      	cmp	r4, #99	@ 0x63
 800c68e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c692:	4631      	mov	r1, r6
 800c694:	dcf1      	bgt.n	800c67a <__exponent+0x1c>
 800c696:	3130      	adds	r1, #48	@ 0x30
 800c698:	1e94      	subs	r4, r2, #2
 800c69a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c69e:	1c41      	adds	r1, r0, #1
 800c6a0:	4623      	mov	r3, r4
 800c6a2:	42ab      	cmp	r3, r5
 800c6a4:	d30a      	bcc.n	800c6bc <__exponent+0x5e>
 800c6a6:	f10d 0309 	add.w	r3, sp, #9
 800c6aa:	1a9b      	subs	r3, r3, r2
 800c6ac:	42ac      	cmp	r4, r5
 800c6ae:	bf88      	it	hi
 800c6b0:	2300      	movhi	r3, #0
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	4403      	add	r3, r0
 800c6b6:	1a18      	subs	r0, r3, r0
 800c6b8:	b003      	add	sp, #12
 800c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6c4:	e7ed      	b.n	800c6a2 <__exponent+0x44>
 800c6c6:	2330      	movs	r3, #48	@ 0x30
 800c6c8:	3130      	adds	r1, #48	@ 0x30
 800c6ca:	7083      	strb	r3, [r0, #2]
 800c6cc:	70c1      	strb	r1, [r0, #3]
 800c6ce:	1d03      	adds	r3, r0, #4
 800c6d0:	e7f1      	b.n	800c6b6 <__exponent+0x58>
	...

0800c6d4 <_printf_float>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	b08d      	sub	sp, #52	@ 0x34
 800c6da:	460c      	mov	r4, r1
 800c6dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6e0:	4616      	mov	r6, r2
 800c6e2:	461f      	mov	r7, r3
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	f000 fd37 	bl	800d158 <_localeconv_r>
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f3 fdce 	bl	8000290 <strlen>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6fc:	9005      	str	r0, [sp, #20]
 800c6fe:	3307      	adds	r3, #7
 800c700:	f023 0307 	bic.w	r3, r3, #7
 800c704:	f103 0208 	add.w	r2, r3, #8
 800c708:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c70c:	f8d4 b000 	ldr.w	fp, [r4]
 800c710:	f8c8 2000 	str.w	r2, [r8]
 800c714:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c718:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c71c:	9307      	str	r3, [sp, #28]
 800c71e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c72a:	4b9c      	ldr	r3, [pc, #624]	@ (800c99c <_printf_float+0x2c8>)
 800c72c:	f04f 32ff 	mov.w	r2, #4294967295
 800c730:	f7f4 fa0c 	bl	8000b4c <__aeabi_dcmpun>
 800c734:	bb70      	cbnz	r0, 800c794 <_printf_float+0xc0>
 800c736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c73a:	4b98      	ldr	r3, [pc, #608]	@ (800c99c <_printf_float+0x2c8>)
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	f7f4 f9e6 	bl	8000b10 <__aeabi_dcmple>
 800c744:	bb30      	cbnz	r0, 800c794 <_printf_float+0xc0>
 800c746:	2200      	movs	r2, #0
 800c748:	2300      	movs	r3, #0
 800c74a:	4640      	mov	r0, r8
 800c74c:	4649      	mov	r1, r9
 800c74e:	f7f4 f9d5 	bl	8000afc <__aeabi_dcmplt>
 800c752:	b110      	cbz	r0, 800c75a <_printf_float+0x86>
 800c754:	232d      	movs	r3, #45	@ 0x2d
 800c756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75a:	4a91      	ldr	r2, [pc, #580]	@ (800c9a0 <_printf_float+0x2cc>)
 800c75c:	4b91      	ldr	r3, [pc, #580]	@ (800c9a4 <_printf_float+0x2d0>)
 800c75e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c762:	bf94      	ite	ls
 800c764:	4690      	movls	r8, r2
 800c766:	4698      	movhi	r8, r3
 800c768:	2303      	movs	r3, #3
 800c76a:	6123      	str	r3, [r4, #16]
 800c76c:	f02b 0304 	bic.w	r3, fp, #4
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	f04f 0900 	mov.w	r9, #0
 800c776:	9700      	str	r7, [sp, #0]
 800c778:	4633      	mov	r3, r6
 800c77a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c77c:	4621      	mov	r1, r4
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 f9d2 	bl	800cb28 <_printf_common>
 800c784:	3001      	adds	r0, #1
 800c786:	f040 808d 	bne.w	800c8a4 <_printf_float+0x1d0>
 800c78a:	f04f 30ff 	mov.w	r0, #4294967295
 800c78e:	b00d      	add	sp, #52	@ 0x34
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c794:	4642      	mov	r2, r8
 800c796:	464b      	mov	r3, r9
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	f7f4 f9d6 	bl	8000b4c <__aeabi_dcmpun>
 800c7a0:	b140      	cbz	r0, 800c7b4 <_printf_float+0xe0>
 800c7a2:	464b      	mov	r3, r9
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfbc      	itt	lt
 800c7a8:	232d      	movlt	r3, #45	@ 0x2d
 800c7aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7ae:	4a7e      	ldr	r2, [pc, #504]	@ (800c9a8 <_printf_float+0x2d4>)
 800c7b0:	4b7e      	ldr	r3, [pc, #504]	@ (800c9ac <_printf_float+0x2d8>)
 800c7b2:	e7d4      	b.n	800c75e <_printf_float+0x8a>
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c7ba:	9206      	str	r2, [sp, #24]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	d13b      	bne.n	800c838 <_printf_float+0x164>
 800c7c0:	2306      	movs	r3, #6
 800c7c2:	6063      	str	r3, [r4, #4]
 800c7c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	6022      	str	r2, [r4, #0]
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c7d4:	ab09      	add	r3, sp, #36	@ 0x24
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	6861      	ldr	r1, [r4, #4]
 800c7da:	ec49 8b10 	vmov	d0, r8, r9
 800c7de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f7ff fed6 	bl	800c594 <__cvt>
 800c7e8:	9b06      	ldr	r3, [sp, #24]
 800c7ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7ec:	2b47      	cmp	r3, #71	@ 0x47
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	d129      	bne.n	800c846 <_printf_float+0x172>
 800c7f2:	1cc8      	adds	r0, r1, #3
 800c7f4:	db02      	blt.n	800c7fc <_printf_float+0x128>
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	4299      	cmp	r1, r3
 800c7fa:	dd41      	ble.n	800c880 <_printf_float+0x1ac>
 800c7fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c800:	fa5f fa8a 	uxtb.w	sl, sl
 800c804:	3901      	subs	r1, #1
 800c806:	4652      	mov	r2, sl
 800c808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c80c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c80e:	f7ff ff26 	bl	800c65e <__exponent>
 800c812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c814:	1813      	adds	r3, r2, r0
 800c816:	2a01      	cmp	r2, #1
 800c818:	4681      	mov	r9, r0
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	dc02      	bgt.n	800c824 <_printf_float+0x150>
 800c81e:	6822      	ldr	r2, [r4, #0]
 800c820:	07d2      	lsls	r2, r2, #31
 800c822:	d501      	bpl.n	800c828 <_printf_float+0x154>
 800c824:	3301      	adds	r3, #1
 800c826:	6123      	str	r3, [r4, #16]
 800c828:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0a2      	beq.n	800c776 <_printf_float+0xa2>
 800c830:	232d      	movs	r3, #45	@ 0x2d
 800c832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c836:	e79e      	b.n	800c776 <_printf_float+0xa2>
 800c838:	9a06      	ldr	r2, [sp, #24]
 800c83a:	2a47      	cmp	r2, #71	@ 0x47
 800c83c:	d1c2      	bne.n	800c7c4 <_printf_float+0xf0>
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1c0      	bne.n	800c7c4 <_printf_float+0xf0>
 800c842:	2301      	movs	r3, #1
 800c844:	e7bd      	b.n	800c7c2 <_printf_float+0xee>
 800c846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c84a:	d9db      	bls.n	800c804 <_printf_float+0x130>
 800c84c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c850:	d118      	bne.n	800c884 <_printf_float+0x1b0>
 800c852:	2900      	cmp	r1, #0
 800c854:	6863      	ldr	r3, [r4, #4]
 800c856:	dd0b      	ble.n	800c870 <_printf_float+0x19c>
 800c858:	6121      	str	r1, [r4, #16]
 800c85a:	b913      	cbnz	r3, 800c862 <_printf_float+0x18e>
 800c85c:	6822      	ldr	r2, [r4, #0]
 800c85e:	07d0      	lsls	r0, r2, #31
 800c860:	d502      	bpl.n	800c868 <_printf_float+0x194>
 800c862:	3301      	adds	r3, #1
 800c864:	440b      	add	r3, r1
 800c866:	6123      	str	r3, [r4, #16]
 800c868:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c86a:	f04f 0900 	mov.w	r9, #0
 800c86e:	e7db      	b.n	800c828 <_printf_float+0x154>
 800c870:	b913      	cbnz	r3, 800c878 <_printf_float+0x1a4>
 800c872:	6822      	ldr	r2, [r4, #0]
 800c874:	07d2      	lsls	r2, r2, #31
 800c876:	d501      	bpl.n	800c87c <_printf_float+0x1a8>
 800c878:	3302      	adds	r3, #2
 800c87a:	e7f4      	b.n	800c866 <_printf_float+0x192>
 800c87c:	2301      	movs	r3, #1
 800c87e:	e7f2      	b.n	800c866 <_printf_float+0x192>
 800c880:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c886:	4299      	cmp	r1, r3
 800c888:	db05      	blt.n	800c896 <_printf_float+0x1c2>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	6121      	str	r1, [r4, #16]
 800c88e:	07d8      	lsls	r0, r3, #31
 800c890:	d5ea      	bpl.n	800c868 <_printf_float+0x194>
 800c892:	1c4b      	adds	r3, r1, #1
 800c894:	e7e7      	b.n	800c866 <_printf_float+0x192>
 800c896:	2900      	cmp	r1, #0
 800c898:	bfd4      	ite	le
 800c89a:	f1c1 0202 	rsble	r2, r1, #2
 800c89e:	2201      	movgt	r2, #1
 800c8a0:	4413      	add	r3, r2
 800c8a2:	e7e0      	b.n	800c866 <_printf_float+0x192>
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	055a      	lsls	r2, r3, #21
 800c8a8:	d407      	bmi.n	800c8ba <_printf_float+0x1e6>
 800c8aa:	6923      	ldr	r3, [r4, #16]
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d12b      	bne.n	800c910 <_printf_float+0x23c>
 800c8b8:	e767      	b.n	800c78a <_printf_float+0xb6>
 800c8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8be:	f240 80dd 	bls.w	800ca7c <_printf_float+0x3a8>
 800c8c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f7f4 f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d033      	beq.n	800c93a <_printf_float+0x266>
 800c8d2:	4a37      	ldr	r2, [pc, #220]	@ (800c9b0 <_printf_float+0x2dc>)
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b8      	blx	r7
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f43f af54 	beq.w	800c78a <_printf_float+0xb6>
 800c8e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8e6:	4543      	cmp	r3, r8
 800c8e8:	db02      	blt.n	800c8f0 <_printf_float+0x21c>
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	07d8      	lsls	r0, r3, #31
 800c8ee:	d50f      	bpl.n	800c910 <_printf_float+0x23c>
 800c8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8f4:	4631      	mov	r1, r6
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	47b8      	blx	r7
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	f43f af45 	beq.w	800c78a <_printf_float+0xb6>
 800c900:	f04f 0900 	mov.w	r9, #0
 800c904:	f108 38ff 	add.w	r8, r8, #4294967295
 800c908:	f104 0a1a 	add.w	sl, r4, #26
 800c90c:	45c8      	cmp	r8, r9
 800c90e:	dc09      	bgt.n	800c924 <_printf_float+0x250>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	079b      	lsls	r3, r3, #30
 800c914:	f100 8103 	bmi.w	800cb1e <_printf_float+0x44a>
 800c918:	68e0      	ldr	r0, [r4, #12]
 800c91a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c91c:	4298      	cmp	r0, r3
 800c91e:	bfb8      	it	lt
 800c920:	4618      	movlt	r0, r3
 800c922:	e734      	b.n	800c78e <_printf_float+0xba>
 800c924:	2301      	movs	r3, #1
 800c926:	4652      	mov	r2, sl
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	f43f af2b 	beq.w	800c78a <_printf_float+0xb6>
 800c934:	f109 0901 	add.w	r9, r9, #1
 800c938:	e7e8      	b.n	800c90c <_printf_float+0x238>
 800c93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	dc39      	bgt.n	800c9b4 <_printf_float+0x2e0>
 800c940:	4a1b      	ldr	r2, [pc, #108]	@ (800c9b0 <_printf_float+0x2dc>)
 800c942:	2301      	movs	r3, #1
 800c944:	4631      	mov	r1, r6
 800c946:	4628      	mov	r0, r5
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	f43f af1d 	beq.w	800c78a <_printf_float+0xb6>
 800c950:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c954:	ea59 0303 	orrs.w	r3, r9, r3
 800c958:	d102      	bne.n	800c960 <_printf_float+0x28c>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	07d9      	lsls	r1, r3, #31
 800c95e:	d5d7      	bpl.n	800c910 <_printf_float+0x23c>
 800c960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c964:	4631      	mov	r1, r6
 800c966:	4628      	mov	r0, r5
 800c968:	47b8      	blx	r7
 800c96a:	3001      	adds	r0, #1
 800c96c:	f43f af0d 	beq.w	800c78a <_printf_float+0xb6>
 800c970:	f04f 0a00 	mov.w	sl, #0
 800c974:	f104 0b1a 	add.w	fp, r4, #26
 800c978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97a:	425b      	negs	r3, r3
 800c97c:	4553      	cmp	r3, sl
 800c97e:	dc01      	bgt.n	800c984 <_printf_float+0x2b0>
 800c980:	464b      	mov	r3, r9
 800c982:	e793      	b.n	800c8ac <_printf_float+0x1d8>
 800c984:	2301      	movs	r3, #1
 800c986:	465a      	mov	r2, fp
 800c988:	4631      	mov	r1, r6
 800c98a:	4628      	mov	r0, r5
 800c98c:	47b8      	blx	r7
 800c98e:	3001      	adds	r0, #1
 800c990:	f43f aefb 	beq.w	800c78a <_printf_float+0xb6>
 800c994:	f10a 0a01 	add.w	sl, sl, #1
 800c998:	e7ee      	b.n	800c978 <_printf_float+0x2a4>
 800c99a:	bf00      	nop
 800c99c:	7fefffff 	.word	0x7fefffff
 800c9a0:	0800f789 	.word	0x0800f789
 800c9a4:	0800f78d 	.word	0x0800f78d
 800c9a8:	0800f791 	.word	0x0800f791
 800c9ac:	0800f795 	.word	0x0800f795
 800c9b0:	0800f799 	.word	0x0800f799
 800c9b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9ba:	4553      	cmp	r3, sl
 800c9bc:	bfa8      	it	ge
 800c9be:	4653      	movge	r3, sl
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	4699      	mov	r9, r3
 800c9c4:	dc36      	bgt.n	800ca34 <_printf_float+0x360>
 800c9c6:	f04f 0b00 	mov.w	fp, #0
 800c9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ce:	f104 021a 	add.w	r2, r4, #26
 800c9d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9d4:	9306      	str	r3, [sp, #24]
 800c9d6:	eba3 0309 	sub.w	r3, r3, r9
 800c9da:	455b      	cmp	r3, fp
 800c9dc:	dc31      	bgt.n	800ca42 <_printf_float+0x36e>
 800c9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e0:	459a      	cmp	sl, r3
 800c9e2:	dc3a      	bgt.n	800ca5a <_printf_float+0x386>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	07da      	lsls	r2, r3, #31
 800c9e8:	d437      	bmi.n	800ca5a <_printf_float+0x386>
 800c9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ec:	ebaa 0903 	sub.w	r9, sl, r3
 800c9f0:	9b06      	ldr	r3, [sp, #24]
 800c9f2:	ebaa 0303 	sub.w	r3, sl, r3
 800c9f6:	4599      	cmp	r9, r3
 800c9f8:	bfa8      	it	ge
 800c9fa:	4699      	movge	r9, r3
 800c9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ca00:	dc33      	bgt.n	800ca6a <_printf_float+0x396>
 800ca02:	f04f 0800 	mov.w	r8, #0
 800ca06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca0a:	f104 0b1a 	add.w	fp, r4, #26
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	ebaa 0303 	sub.w	r3, sl, r3
 800ca14:	eba3 0309 	sub.w	r3, r3, r9
 800ca18:	4543      	cmp	r3, r8
 800ca1a:	f77f af79 	ble.w	800c910 <_printf_float+0x23c>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	465a      	mov	r2, fp
 800ca22:	4631      	mov	r1, r6
 800ca24:	4628      	mov	r0, r5
 800ca26:	47b8      	blx	r7
 800ca28:	3001      	adds	r0, #1
 800ca2a:	f43f aeae 	beq.w	800c78a <_printf_float+0xb6>
 800ca2e:	f108 0801 	add.w	r8, r8, #1
 800ca32:	e7ec      	b.n	800ca0e <_printf_float+0x33a>
 800ca34:	4642      	mov	r2, r8
 800ca36:	4631      	mov	r1, r6
 800ca38:	4628      	mov	r0, r5
 800ca3a:	47b8      	blx	r7
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d1c2      	bne.n	800c9c6 <_printf_float+0x2f2>
 800ca40:	e6a3      	b.n	800c78a <_printf_float+0xb6>
 800ca42:	2301      	movs	r3, #1
 800ca44:	4631      	mov	r1, r6
 800ca46:	4628      	mov	r0, r5
 800ca48:	9206      	str	r2, [sp, #24]
 800ca4a:	47b8      	blx	r7
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	f43f ae9c 	beq.w	800c78a <_printf_float+0xb6>
 800ca52:	9a06      	ldr	r2, [sp, #24]
 800ca54:	f10b 0b01 	add.w	fp, fp, #1
 800ca58:	e7bb      	b.n	800c9d2 <_printf_float+0x2fe>
 800ca5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b8      	blx	r7
 800ca64:	3001      	adds	r0, #1
 800ca66:	d1c0      	bne.n	800c9ea <_printf_float+0x316>
 800ca68:	e68f      	b.n	800c78a <_printf_float+0xb6>
 800ca6a:	9a06      	ldr	r2, [sp, #24]
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	4442      	add	r2, r8
 800ca70:	4631      	mov	r1, r6
 800ca72:	4628      	mov	r0, r5
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	d1c3      	bne.n	800ca02 <_printf_float+0x32e>
 800ca7a:	e686      	b.n	800c78a <_printf_float+0xb6>
 800ca7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca80:	f1ba 0f01 	cmp.w	sl, #1
 800ca84:	dc01      	bgt.n	800ca8a <_printf_float+0x3b6>
 800ca86:	07db      	lsls	r3, r3, #31
 800ca88:	d536      	bpl.n	800caf8 <_printf_float+0x424>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	4631      	mov	r1, r6
 800ca90:	4628      	mov	r0, r5
 800ca92:	47b8      	blx	r7
 800ca94:	3001      	adds	r0, #1
 800ca96:	f43f ae78 	beq.w	800c78a <_printf_float+0xb6>
 800ca9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca9e:	4631      	mov	r1, r6
 800caa0:	4628      	mov	r0, r5
 800caa2:	47b8      	blx	r7
 800caa4:	3001      	adds	r0, #1
 800caa6:	f43f ae70 	beq.w	800c78a <_printf_float+0xb6>
 800caaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800caae:	2200      	movs	r2, #0
 800cab0:	2300      	movs	r3, #0
 800cab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cab6:	f7f4 f817 	bl	8000ae8 <__aeabi_dcmpeq>
 800caba:	b9c0      	cbnz	r0, 800caee <_printf_float+0x41a>
 800cabc:	4653      	mov	r3, sl
 800cabe:	f108 0201 	add.w	r2, r8, #1
 800cac2:	4631      	mov	r1, r6
 800cac4:	4628      	mov	r0, r5
 800cac6:	47b8      	blx	r7
 800cac8:	3001      	adds	r0, #1
 800caca:	d10c      	bne.n	800cae6 <_printf_float+0x412>
 800cacc:	e65d      	b.n	800c78a <_printf_float+0xb6>
 800cace:	2301      	movs	r3, #1
 800cad0:	465a      	mov	r2, fp
 800cad2:	4631      	mov	r1, r6
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b8      	blx	r7
 800cad8:	3001      	adds	r0, #1
 800cada:	f43f ae56 	beq.w	800c78a <_printf_float+0xb6>
 800cade:	f108 0801 	add.w	r8, r8, #1
 800cae2:	45d0      	cmp	r8, sl
 800cae4:	dbf3      	blt.n	800cace <_printf_float+0x3fa>
 800cae6:	464b      	mov	r3, r9
 800cae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800caec:	e6df      	b.n	800c8ae <_printf_float+0x1da>
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	f104 0b1a 	add.w	fp, r4, #26
 800caf6:	e7f4      	b.n	800cae2 <_printf_float+0x40e>
 800caf8:	2301      	movs	r3, #1
 800cafa:	4642      	mov	r2, r8
 800cafc:	e7e1      	b.n	800cac2 <_printf_float+0x3ee>
 800cafe:	2301      	movs	r3, #1
 800cb00:	464a      	mov	r2, r9
 800cb02:	4631      	mov	r1, r6
 800cb04:	4628      	mov	r0, r5
 800cb06:	47b8      	blx	r7
 800cb08:	3001      	adds	r0, #1
 800cb0a:	f43f ae3e 	beq.w	800c78a <_printf_float+0xb6>
 800cb0e:	f108 0801 	add.w	r8, r8, #1
 800cb12:	68e3      	ldr	r3, [r4, #12]
 800cb14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb16:	1a5b      	subs	r3, r3, r1
 800cb18:	4543      	cmp	r3, r8
 800cb1a:	dcf0      	bgt.n	800cafe <_printf_float+0x42a>
 800cb1c:	e6fc      	b.n	800c918 <_printf_float+0x244>
 800cb1e:	f04f 0800 	mov.w	r8, #0
 800cb22:	f104 0919 	add.w	r9, r4, #25
 800cb26:	e7f4      	b.n	800cb12 <_printf_float+0x43e>

0800cb28 <_printf_common>:
 800cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2c:	4616      	mov	r6, r2
 800cb2e:	4698      	mov	r8, r3
 800cb30:	688a      	ldr	r2, [r1, #8]
 800cb32:	690b      	ldr	r3, [r1, #16]
 800cb34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	bfb8      	it	lt
 800cb3c:	4613      	movlt	r3, r2
 800cb3e:	6033      	str	r3, [r6, #0]
 800cb40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb44:	4607      	mov	r7, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	b10a      	cbz	r2, 800cb4e <_printf_common+0x26>
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	6033      	str	r3, [r6, #0]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	0699      	lsls	r1, r3, #26
 800cb52:	bf42      	ittt	mi
 800cb54:	6833      	ldrmi	r3, [r6, #0]
 800cb56:	3302      	addmi	r3, #2
 800cb58:	6033      	strmi	r3, [r6, #0]
 800cb5a:	6825      	ldr	r5, [r4, #0]
 800cb5c:	f015 0506 	ands.w	r5, r5, #6
 800cb60:	d106      	bne.n	800cb70 <_printf_common+0x48>
 800cb62:	f104 0a19 	add.w	sl, r4, #25
 800cb66:	68e3      	ldr	r3, [r4, #12]
 800cb68:	6832      	ldr	r2, [r6, #0]
 800cb6a:	1a9b      	subs	r3, r3, r2
 800cb6c:	42ab      	cmp	r3, r5
 800cb6e:	dc26      	bgt.n	800cbbe <_printf_common+0x96>
 800cb70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb74:	6822      	ldr	r2, [r4, #0]
 800cb76:	3b00      	subs	r3, #0
 800cb78:	bf18      	it	ne
 800cb7a:	2301      	movne	r3, #1
 800cb7c:	0692      	lsls	r2, r2, #26
 800cb7e:	d42b      	bmi.n	800cbd8 <_printf_common+0xb0>
 800cb80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb84:	4641      	mov	r1, r8
 800cb86:	4638      	mov	r0, r7
 800cb88:	47c8      	blx	r9
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d01e      	beq.n	800cbcc <_printf_common+0xa4>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	6922      	ldr	r2, [r4, #16]
 800cb92:	f003 0306 	and.w	r3, r3, #6
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	bf02      	ittt	eq
 800cb9a:	68e5      	ldreq	r5, [r4, #12]
 800cb9c:	6833      	ldreq	r3, [r6, #0]
 800cb9e:	1aed      	subeq	r5, r5, r3
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	bf0c      	ite	eq
 800cba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cba8:	2500      	movne	r5, #0
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	bfc4      	itt	gt
 800cbae:	1a9b      	subgt	r3, r3, r2
 800cbb0:	18ed      	addgt	r5, r5, r3
 800cbb2:	2600      	movs	r6, #0
 800cbb4:	341a      	adds	r4, #26
 800cbb6:	42b5      	cmp	r5, r6
 800cbb8:	d11a      	bne.n	800cbf0 <_printf_common+0xc8>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	e008      	b.n	800cbd0 <_printf_common+0xa8>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	4641      	mov	r1, r8
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	47c8      	blx	r9
 800cbc8:	3001      	adds	r0, #1
 800cbca:	d103      	bne.n	800cbd4 <_printf_common+0xac>
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	e7c6      	b.n	800cb66 <_printf_common+0x3e>
 800cbd8:	18e1      	adds	r1, r4, r3
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	2030      	movs	r0, #48	@ 0x30
 800cbde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbe2:	4422      	add	r2, r4
 800cbe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbec:	3302      	adds	r3, #2
 800cbee:	e7c7      	b.n	800cb80 <_printf_common+0x58>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4641      	mov	r1, r8
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	47c8      	blx	r9
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d0e6      	beq.n	800cbcc <_printf_common+0xa4>
 800cbfe:	3601      	adds	r6, #1
 800cc00:	e7d9      	b.n	800cbb6 <_printf_common+0x8e>
	...

0800cc04 <_printf_i>:
 800cc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc08:	7e0f      	ldrb	r7, [r1, #24]
 800cc0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc0c:	2f78      	cmp	r7, #120	@ 0x78
 800cc0e:	4691      	mov	r9, r2
 800cc10:	4680      	mov	r8, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	469a      	mov	sl, r3
 800cc16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc1a:	d807      	bhi.n	800cc2c <_printf_i+0x28>
 800cc1c:	2f62      	cmp	r7, #98	@ 0x62
 800cc1e:	d80a      	bhi.n	800cc36 <_printf_i+0x32>
 800cc20:	2f00      	cmp	r7, #0
 800cc22:	f000 80d2 	beq.w	800cdca <_printf_i+0x1c6>
 800cc26:	2f58      	cmp	r7, #88	@ 0x58
 800cc28:	f000 80b9 	beq.w	800cd9e <_printf_i+0x19a>
 800cc2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc34:	e03a      	b.n	800ccac <_printf_i+0xa8>
 800cc36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc3a:	2b15      	cmp	r3, #21
 800cc3c:	d8f6      	bhi.n	800cc2c <_printf_i+0x28>
 800cc3e:	a101      	add	r1, pc, #4	@ (adr r1, 800cc44 <_printf_i+0x40>)
 800cc40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc44:	0800cc9d 	.word	0x0800cc9d
 800cc48:	0800ccb1 	.word	0x0800ccb1
 800cc4c:	0800cc2d 	.word	0x0800cc2d
 800cc50:	0800cc2d 	.word	0x0800cc2d
 800cc54:	0800cc2d 	.word	0x0800cc2d
 800cc58:	0800cc2d 	.word	0x0800cc2d
 800cc5c:	0800ccb1 	.word	0x0800ccb1
 800cc60:	0800cc2d 	.word	0x0800cc2d
 800cc64:	0800cc2d 	.word	0x0800cc2d
 800cc68:	0800cc2d 	.word	0x0800cc2d
 800cc6c:	0800cc2d 	.word	0x0800cc2d
 800cc70:	0800cdb1 	.word	0x0800cdb1
 800cc74:	0800ccdb 	.word	0x0800ccdb
 800cc78:	0800cd6b 	.word	0x0800cd6b
 800cc7c:	0800cc2d 	.word	0x0800cc2d
 800cc80:	0800cc2d 	.word	0x0800cc2d
 800cc84:	0800cdd3 	.word	0x0800cdd3
 800cc88:	0800cc2d 	.word	0x0800cc2d
 800cc8c:	0800ccdb 	.word	0x0800ccdb
 800cc90:	0800cc2d 	.word	0x0800cc2d
 800cc94:	0800cc2d 	.word	0x0800cc2d
 800cc98:	0800cd73 	.word	0x0800cd73
 800cc9c:	6833      	ldr	r3, [r6, #0]
 800cc9e:	1d1a      	adds	r2, r3, #4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6032      	str	r2, [r6, #0]
 800cca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccac:	2301      	movs	r3, #1
 800ccae:	e09d      	b.n	800cdec <_printf_i+0x1e8>
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	6820      	ldr	r0, [r4, #0]
 800ccb4:	1d19      	adds	r1, r3, #4
 800ccb6:	6031      	str	r1, [r6, #0]
 800ccb8:	0606      	lsls	r6, r0, #24
 800ccba:	d501      	bpl.n	800ccc0 <_printf_i+0xbc>
 800ccbc:	681d      	ldr	r5, [r3, #0]
 800ccbe:	e003      	b.n	800ccc8 <_printf_i+0xc4>
 800ccc0:	0645      	lsls	r5, r0, #25
 800ccc2:	d5fb      	bpl.n	800ccbc <_printf_i+0xb8>
 800ccc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	da03      	bge.n	800ccd4 <_printf_i+0xd0>
 800cccc:	232d      	movs	r3, #45	@ 0x2d
 800ccce:	426d      	negs	r5, r5
 800ccd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd4:	4859      	ldr	r0, [pc, #356]	@ (800ce3c <_printf_i+0x238>)
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	e011      	b.n	800ccfe <_printf_i+0xfa>
 800ccda:	6821      	ldr	r1, [r4, #0]
 800ccdc:	6833      	ldr	r3, [r6, #0]
 800ccde:	0608      	lsls	r0, r1, #24
 800cce0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cce4:	d402      	bmi.n	800ccec <_printf_i+0xe8>
 800cce6:	0649      	lsls	r1, r1, #25
 800cce8:	bf48      	it	mi
 800ccea:	b2ad      	uxthmi	r5, r5
 800ccec:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccee:	4853      	ldr	r0, [pc, #332]	@ (800ce3c <_printf_i+0x238>)
 800ccf0:	6033      	str	r3, [r6, #0]
 800ccf2:	bf14      	ite	ne
 800ccf4:	230a      	movne	r3, #10
 800ccf6:	2308      	moveq	r3, #8
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccfe:	6866      	ldr	r6, [r4, #4]
 800cd00:	60a6      	str	r6, [r4, #8]
 800cd02:	2e00      	cmp	r6, #0
 800cd04:	bfa2      	ittt	ge
 800cd06:	6821      	ldrge	r1, [r4, #0]
 800cd08:	f021 0104 	bicge.w	r1, r1, #4
 800cd0c:	6021      	strge	r1, [r4, #0]
 800cd0e:	b90d      	cbnz	r5, 800cd14 <_printf_i+0x110>
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	d04b      	beq.n	800cdac <_printf_i+0x1a8>
 800cd14:	4616      	mov	r6, r2
 800cd16:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd1a:	fb03 5711 	mls	r7, r3, r1, r5
 800cd1e:	5dc7      	ldrb	r7, [r0, r7]
 800cd20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd24:	462f      	mov	r7, r5
 800cd26:	42bb      	cmp	r3, r7
 800cd28:	460d      	mov	r5, r1
 800cd2a:	d9f4      	bls.n	800cd16 <_printf_i+0x112>
 800cd2c:	2b08      	cmp	r3, #8
 800cd2e:	d10b      	bne.n	800cd48 <_printf_i+0x144>
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	07df      	lsls	r7, r3, #31
 800cd34:	d508      	bpl.n	800cd48 <_printf_i+0x144>
 800cd36:	6923      	ldr	r3, [r4, #16]
 800cd38:	6861      	ldr	r1, [r4, #4]
 800cd3a:	4299      	cmp	r1, r3
 800cd3c:	bfde      	ittt	le
 800cd3e:	2330      	movle	r3, #48	@ 0x30
 800cd40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd48:	1b92      	subs	r2, r2, r6
 800cd4a:	6122      	str	r2, [r4, #16]
 800cd4c:	f8cd a000 	str.w	sl, [sp]
 800cd50:	464b      	mov	r3, r9
 800cd52:	aa03      	add	r2, sp, #12
 800cd54:	4621      	mov	r1, r4
 800cd56:	4640      	mov	r0, r8
 800cd58:	f7ff fee6 	bl	800cb28 <_printf_common>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d14a      	bne.n	800cdf6 <_printf_i+0x1f2>
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	b004      	add	sp, #16
 800cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	f043 0320 	orr.w	r3, r3, #32
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	4833      	ldr	r0, [pc, #204]	@ (800ce40 <_printf_i+0x23c>)
 800cd74:	2778      	movs	r7, #120	@ 0x78
 800cd76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	6831      	ldr	r1, [r6, #0]
 800cd7e:	061f      	lsls	r7, r3, #24
 800cd80:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd84:	d402      	bmi.n	800cd8c <_printf_i+0x188>
 800cd86:	065f      	lsls	r7, r3, #25
 800cd88:	bf48      	it	mi
 800cd8a:	b2ad      	uxthmi	r5, r5
 800cd8c:	6031      	str	r1, [r6, #0]
 800cd8e:	07d9      	lsls	r1, r3, #31
 800cd90:	bf44      	itt	mi
 800cd92:	f043 0320 	orrmi.w	r3, r3, #32
 800cd96:	6023      	strmi	r3, [r4, #0]
 800cd98:	b11d      	cbz	r5, 800cda2 <_printf_i+0x19e>
 800cd9a:	2310      	movs	r3, #16
 800cd9c:	e7ac      	b.n	800ccf8 <_printf_i+0xf4>
 800cd9e:	4827      	ldr	r0, [pc, #156]	@ (800ce3c <_printf_i+0x238>)
 800cda0:	e7e9      	b.n	800cd76 <_printf_i+0x172>
 800cda2:	6823      	ldr	r3, [r4, #0]
 800cda4:	f023 0320 	bic.w	r3, r3, #32
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	e7f6      	b.n	800cd9a <_printf_i+0x196>
 800cdac:	4616      	mov	r6, r2
 800cdae:	e7bd      	b.n	800cd2c <_printf_i+0x128>
 800cdb0:	6833      	ldr	r3, [r6, #0]
 800cdb2:	6825      	ldr	r5, [r4, #0]
 800cdb4:	6961      	ldr	r1, [r4, #20]
 800cdb6:	1d18      	adds	r0, r3, #4
 800cdb8:	6030      	str	r0, [r6, #0]
 800cdba:	062e      	lsls	r6, r5, #24
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	d501      	bpl.n	800cdc4 <_printf_i+0x1c0>
 800cdc0:	6019      	str	r1, [r3, #0]
 800cdc2:	e002      	b.n	800cdca <_printf_i+0x1c6>
 800cdc4:	0668      	lsls	r0, r5, #25
 800cdc6:	d5fb      	bpl.n	800cdc0 <_printf_i+0x1bc>
 800cdc8:	8019      	strh	r1, [r3, #0]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	6123      	str	r3, [r4, #16]
 800cdce:	4616      	mov	r6, r2
 800cdd0:	e7bc      	b.n	800cd4c <_printf_i+0x148>
 800cdd2:	6833      	ldr	r3, [r6, #0]
 800cdd4:	1d1a      	adds	r2, r3, #4
 800cdd6:	6032      	str	r2, [r6, #0]
 800cdd8:	681e      	ldr	r6, [r3, #0]
 800cdda:	6862      	ldr	r2, [r4, #4]
 800cddc:	2100      	movs	r1, #0
 800cdde:	4630      	mov	r0, r6
 800cde0:	f7f3 fa06 	bl	80001f0 <memchr>
 800cde4:	b108      	cbz	r0, 800cdea <_printf_i+0x1e6>
 800cde6:	1b80      	subs	r0, r0, r6
 800cde8:	6060      	str	r0, [r4, #4]
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdf4:	e7aa      	b.n	800cd4c <_printf_i+0x148>
 800cdf6:	6923      	ldr	r3, [r4, #16]
 800cdf8:	4632      	mov	r2, r6
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	4640      	mov	r0, r8
 800cdfe:	47d0      	blx	sl
 800ce00:	3001      	adds	r0, #1
 800ce02:	d0ad      	beq.n	800cd60 <_printf_i+0x15c>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	079b      	lsls	r3, r3, #30
 800ce08:	d413      	bmi.n	800ce32 <_printf_i+0x22e>
 800ce0a:	68e0      	ldr	r0, [r4, #12]
 800ce0c:	9b03      	ldr	r3, [sp, #12]
 800ce0e:	4298      	cmp	r0, r3
 800ce10:	bfb8      	it	lt
 800ce12:	4618      	movlt	r0, r3
 800ce14:	e7a6      	b.n	800cd64 <_printf_i+0x160>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4632      	mov	r2, r6
 800ce1a:	4649      	mov	r1, r9
 800ce1c:	4640      	mov	r0, r8
 800ce1e:	47d0      	blx	sl
 800ce20:	3001      	adds	r0, #1
 800ce22:	d09d      	beq.n	800cd60 <_printf_i+0x15c>
 800ce24:	3501      	adds	r5, #1
 800ce26:	68e3      	ldr	r3, [r4, #12]
 800ce28:	9903      	ldr	r1, [sp, #12]
 800ce2a:	1a5b      	subs	r3, r3, r1
 800ce2c:	42ab      	cmp	r3, r5
 800ce2e:	dcf2      	bgt.n	800ce16 <_printf_i+0x212>
 800ce30:	e7eb      	b.n	800ce0a <_printf_i+0x206>
 800ce32:	2500      	movs	r5, #0
 800ce34:	f104 0619 	add.w	r6, r4, #25
 800ce38:	e7f5      	b.n	800ce26 <_printf_i+0x222>
 800ce3a:	bf00      	nop
 800ce3c:	0800f79b 	.word	0x0800f79b
 800ce40:	0800f7ac 	.word	0x0800f7ac

0800ce44 <std>:
 800ce44:	2300      	movs	r3, #0
 800ce46:	b510      	push	{r4, lr}
 800ce48:	4604      	mov	r4, r0
 800ce4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce52:	6083      	str	r3, [r0, #8]
 800ce54:	8181      	strh	r1, [r0, #12]
 800ce56:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce58:	81c2      	strh	r2, [r0, #14]
 800ce5a:	6183      	str	r3, [r0, #24]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	2208      	movs	r2, #8
 800ce60:	305c      	adds	r0, #92	@ 0x5c
 800ce62:	f000 f914 	bl	800d08e <memset>
 800ce66:	4b0d      	ldr	r3, [pc, #52]	@ (800ce9c <std+0x58>)
 800ce68:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <std+0x5c>)
 800ce6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <std+0x60>)
 800ce70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <std+0x64>)
 800ce74:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce76:	4b0d      	ldr	r3, [pc, #52]	@ (800ceac <std+0x68>)
 800ce78:	6224      	str	r4, [r4, #32]
 800ce7a:	429c      	cmp	r4, r3
 800ce7c:	d006      	beq.n	800ce8c <std+0x48>
 800ce7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce82:	4294      	cmp	r4, r2
 800ce84:	d002      	beq.n	800ce8c <std+0x48>
 800ce86:	33d0      	adds	r3, #208	@ 0xd0
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	d105      	bne.n	800ce98 <std+0x54>
 800ce8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce94:	f000 ba3a 	b.w	800d30c <__retarget_lock_init_recursive>
 800ce98:	bd10      	pop	{r4, pc}
 800ce9a:	bf00      	nop
 800ce9c:	0800d009 	.word	0x0800d009
 800cea0:	0800d02b 	.word	0x0800d02b
 800cea4:	0800d063 	.word	0x0800d063
 800cea8:	0800d087 	.word	0x0800d087
 800ceac:	2000343c 	.word	0x2000343c

0800ceb0 <stdio_exit_handler>:
 800ceb0:	4a02      	ldr	r2, [pc, #8]	@ (800cebc <stdio_exit_handler+0xc>)
 800ceb2:	4903      	ldr	r1, [pc, #12]	@ (800cec0 <stdio_exit_handler+0x10>)
 800ceb4:	4803      	ldr	r0, [pc, #12]	@ (800cec4 <stdio_exit_handler+0x14>)
 800ceb6:	f000 b869 	b.w	800cf8c <_fwalk_sglue>
 800ceba:	bf00      	nop
 800cebc:	20000148 	.word	0x20000148
 800cec0:	0800eb59 	.word	0x0800eb59
 800cec4:	20000158 	.word	0x20000158

0800cec8 <cleanup_stdio>:
 800cec8:	6841      	ldr	r1, [r0, #4]
 800ceca:	4b0c      	ldr	r3, [pc, #48]	@ (800cefc <cleanup_stdio+0x34>)
 800cecc:	4299      	cmp	r1, r3
 800cece:	b510      	push	{r4, lr}
 800ced0:	4604      	mov	r4, r0
 800ced2:	d001      	beq.n	800ced8 <cleanup_stdio+0x10>
 800ced4:	f001 fe40 	bl	800eb58 <_fflush_r>
 800ced8:	68a1      	ldr	r1, [r4, #8]
 800ceda:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <cleanup_stdio+0x38>)
 800cedc:	4299      	cmp	r1, r3
 800cede:	d002      	beq.n	800cee6 <cleanup_stdio+0x1e>
 800cee0:	4620      	mov	r0, r4
 800cee2:	f001 fe39 	bl	800eb58 <_fflush_r>
 800cee6:	68e1      	ldr	r1, [r4, #12]
 800cee8:	4b06      	ldr	r3, [pc, #24]	@ (800cf04 <cleanup_stdio+0x3c>)
 800ceea:	4299      	cmp	r1, r3
 800ceec:	d004      	beq.n	800cef8 <cleanup_stdio+0x30>
 800ceee:	4620      	mov	r0, r4
 800cef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef4:	f001 be30 	b.w	800eb58 <_fflush_r>
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	bf00      	nop
 800cefc:	2000343c 	.word	0x2000343c
 800cf00:	200034a4 	.word	0x200034a4
 800cf04:	2000350c 	.word	0x2000350c

0800cf08 <global_stdio_init.part.0>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf38 <global_stdio_init.part.0+0x30>)
 800cf0c:	4c0b      	ldr	r4, [pc, #44]	@ (800cf3c <global_stdio_init.part.0+0x34>)
 800cf0e:	4a0c      	ldr	r2, [pc, #48]	@ (800cf40 <global_stdio_init.part.0+0x38>)
 800cf10:	601a      	str	r2, [r3, #0]
 800cf12:	4620      	mov	r0, r4
 800cf14:	2200      	movs	r2, #0
 800cf16:	2104      	movs	r1, #4
 800cf18:	f7ff ff94 	bl	800ce44 <std>
 800cf1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf20:	2201      	movs	r2, #1
 800cf22:	2109      	movs	r1, #9
 800cf24:	f7ff ff8e 	bl	800ce44 <std>
 800cf28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf32:	2112      	movs	r1, #18
 800cf34:	f7ff bf86 	b.w	800ce44 <std>
 800cf38:	20003574 	.word	0x20003574
 800cf3c:	2000343c 	.word	0x2000343c
 800cf40:	0800ceb1 	.word	0x0800ceb1

0800cf44 <__sfp_lock_acquire>:
 800cf44:	4801      	ldr	r0, [pc, #4]	@ (800cf4c <__sfp_lock_acquire+0x8>)
 800cf46:	f000 b9e2 	b.w	800d30e <__retarget_lock_acquire_recursive>
 800cf4a:	bf00      	nop
 800cf4c:	2000357d 	.word	0x2000357d

0800cf50 <__sfp_lock_release>:
 800cf50:	4801      	ldr	r0, [pc, #4]	@ (800cf58 <__sfp_lock_release+0x8>)
 800cf52:	f000 b9dd 	b.w	800d310 <__retarget_lock_release_recursive>
 800cf56:	bf00      	nop
 800cf58:	2000357d 	.word	0x2000357d

0800cf5c <__sinit>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	4604      	mov	r4, r0
 800cf60:	f7ff fff0 	bl	800cf44 <__sfp_lock_acquire>
 800cf64:	6a23      	ldr	r3, [r4, #32]
 800cf66:	b11b      	cbz	r3, 800cf70 <__sinit+0x14>
 800cf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf6c:	f7ff bff0 	b.w	800cf50 <__sfp_lock_release>
 800cf70:	4b04      	ldr	r3, [pc, #16]	@ (800cf84 <__sinit+0x28>)
 800cf72:	6223      	str	r3, [r4, #32]
 800cf74:	4b04      	ldr	r3, [pc, #16]	@ (800cf88 <__sinit+0x2c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1f5      	bne.n	800cf68 <__sinit+0xc>
 800cf7c:	f7ff ffc4 	bl	800cf08 <global_stdio_init.part.0>
 800cf80:	e7f2      	b.n	800cf68 <__sinit+0xc>
 800cf82:	bf00      	nop
 800cf84:	0800cec9 	.word	0x0800cec9
 800cf88:	20003574 	.word	0x20003574

0800cf8c <_fwalk_sglue>:
 800cf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf90:	4607      	mov	r7, r0
 800cf92:	4688      	mov	r8, r1
 800cf94:	4614      	mov	r4, r2
 800cf96:	2600      	movs	r6, #0
 800cf98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf9c:	f1b9 0901 	subs.w	r9, r9, #1
 800cfa0:	d505      	bpl.n	800cfae <_fwalk_sglue+0x22>
 800cfa2:	6824      	ldr	r4, [r4, #0]
 800cfa4:	2c00      	cmp	r4, #0
 800cfa6:	d1f7      	bne.n	800cf98 <_fwalk_sglue+0xc>
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	89ab      	ldrh	r3, [r5, #12]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d907      	bls.n	800cfc4 <_fwalk_sglue+0x38>
 800cfb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	d003      	beq.n	800cfc4 <_fwalk_sglue+0x38>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	47c0      	blx	r8
 800cfc2:	4306      	orrs	r6, r0
 800cfc4:	3568      	adds	r5, #104	@ 0x68
 800cfc6:	e7e9      	b.n	800cf9c <_fwalk_sglue+0x10>

0800cfc8 <siprintf>:
 800cfc8:	b40e      	push	{r1, r2, r3}
 800cfca:	b500      	push	{lr}
 800cfcc:	b09c      	sub	sp, #112	@ 0x70
 800cfce:	ab1d      	add	r3, sp, #116	@ 0x74
 800cfd0:	9002      	str	r0, [sp, #8]
 800cfd2:	9006      	str	r0, [sp, #24]
 800cfd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfd8:	4809      	ldr	r0, [pc, #36]	@ (800d000 <siprintf+0x38>)
 800cfda:	9107      	str	r1, [sp, #28]
 800cfdc:	9104      	str	r1, [sp, #16]
 800cfde:	4909      	ldr	r1, [pc, #36]	@ (800d004 <siprintf+0x3c>)
 800cfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfe4:	9105      	str	r1, [sp, #20]
 800cfe6:	6800      	ldr	r0, [r0, #0]
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	a902      	add	r1, sp, #8
 800cfec:	f001 fc34 	bl	800e858 <_svfiprintf_r>
 800cff0:	9b02      	ldr	r3, [sp, #8]
 800cff2:	2200      	movs	r2, #0
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	b01c      	add	sp, #112	@ 0x70
 800cff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cffc:	b003      	add	sp, #12
 800cffe:	4770      	bx	lr
 800d000:	20000154 	.word	0x20000154
 800d004:	ffff0208 	.word	0xffff0208

0800d008 <__sread>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	460c      	mov	r4, r1
 800d00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d010:	f000 f91e 	bl	800d250 <_read_r>
 800d014:	2800      	cmp	r0, #0
 800d016:	bfab      	itete	ge
 800d018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d01a:	89a3      	ldrhlt	r3, [r4, #12]
 800d01c:	181b      	addge	r3, r3, r0
 800d01e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d022:	bfac      	ite	ge
 800d024:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d026:	81a3      	strhlt	r3, [r4, #12]
 800d028:	bd10      	pop	{r4, pc}

0800d02a <__swrite>:
 800d02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02e:	461f      	mov	r7, r3
 800d030:	898b      	ldrh	r3, [r1, #12]
 800d032:	05db      	lsls	r3, r3, #23
 800d034:	4605      	mov	r5, r0
 800d036:	460c      	mov	r4, r1
 800d038:	4616      	mov	r6, r2
 800d03a:	d505      	bpl.n	800d048 <__swrite+0x1e>
 800d03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d040:	2302      	movs	r3, #2
 800d042:	2200      	movs	r2, #0
 800d044:	f000 f8f2 	bl	800d22c <_lseek_r>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d04e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	4632      	mov	r2, r6
 800d056:	463b      	mov	r3, r7
 800d058:	4628      	mov	r0, r5
 800d05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d05e:	f000 b919 	b.w	800d294 <_write_r>

0800d062 <__sseek>:
 800d062:	b510      	push	{r4, lr}
 800d064:	460c      	mov	r4, r1
 800d066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06a:	f000 f8df 	bl	800d22c <_lseek_r>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	89a3      	ldrh	r3, [r4, #12]
 800d072:	bf15      	itete	ne
 800d074:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d07a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d07e:	81a3      	strheq	r3, [r4, #12]
 800d080:	bf18      	it	ne
 800d082:	81a3      	strhne	r3, [r4, #12]
 800d084:	bd10      	pop	{r4, pc}

0800d086 <__sclose>:
 800d086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d08a:	f000 b869 	b.w	800d160 <_close_r>

0800d08e <memset>:
 800d08e:	4402      	add	r2, r0
 800d090:	4603      	mov	r3, r0
 800d092:	4293      	cmp	r3, r2
 800d094:	d100      	bne.n	800d098 <memset+0xa>
 800d096:	4770      	bx	lr
 800d098:	f803 1b01 	strb.w	r1, [r3], #1
 800d09c:	e7f9      	b.n	800d092 <memset+0x4>
	...

0800d0a0 <strtok>:
 800d0a0:	4b16      	ldr	r3, [pc, #88]	@ (800d0fc <strtok+0x5c>)
 800d0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a6:	681f      	ldr	r7, [r3, #0]
 800d0a8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	b9ec      	cbnz	r4, 800d0ec <strtok+0x4c>
 800d0b0:	2050      	movs	r0, #80	@ 0x50
 800d0b2:	f7ff f935 	bl	800c320 <malloc>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6478      	str	r0, [r7, #68]	@ 0x44
 800d0ba:	b920      	cbnz	r0, 800d0c6 <strtok+0x26>
 800d0bc:	4b10      	ldr	r3, [pc, #64]	@ (800d100 <strtok+0x60>)
 800d0be:	4811      	ldr	r0, [pc, #68]	@ (800d104 <strtok+0x64>)
 800d0c0:	215b      	movs	r1, #91	@ 0x5b
 800d0c2:	f000 f935 	bl	800d330 <__assert_func>
 800d0c6:	e9c0 4400 	strd	r4, r4, [r0]
 800d0ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d0ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d0d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d0d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d0da:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d0de:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d0e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d0e6:	6184      	str	r4, [r0, #24]
 800d0e8:	7704      	strb	r4, [r0, #28]
 800d0ea:	6244      	str	r4, [r0, #36]	@ 0x24
 800d0ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	f000 b806 	b.w	800d108 <__strtok_r>
 800d0fc:	20000154 	.word	0x20000154
 800d100:	0800f7bd 	.word	0x0800f7bd
 800d104:	0800f7d4 	.word	0x0800f7d4

0800d108 <__strtok_r>:
 800d108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d10a:	4604      	mov	r4, r0
 800d10c:	b908      	cbnz	r0, 800d112 <__strtok_r+0xa>
 800d10e:	6814      	ldr	r4, [r2, #0]
 800d110:	b144      	cbz	r4, 800d124 <__strtok_r+0x1c>
 800d112:	4620      	mov	r0, r4
 800d114:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d118:	460f      	mov	r7, r1
 800d11a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d11e:	b91e      	cbnz	r6, 800d128 <__strtok_r+0x20>
 800d120:	b965      	cbnz	r5, 800d13c <__strtok_r+0x34>
 800d122:	6015      	str	r5, [r2, #0]
 800d124:	2000      	movs	r0, #0
 800d126:	e005      	b.n	800d134 <__strtok_r+0x2c>
 800d128:	42b5      	cmp	r5, r6
 800d12a:	d1f6      	bne.n	800d11a <__strtok_r+0x12>
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1f0      	bne.n	800d112 <__strtok_r+0xa>
 800d130:	6014      	str	r4, [r2, #0]
 800d132:	7003      	strb	r3, [r0, #0]
 800d134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d136:	461c      	mov	r4, r3
 800d138:	e00c      	b.n	800d154 <__strtok_r+0x4c>
 800d13a:	b915      	cbnz	r5, 800d142 <__strtok_r+0x3a>
 800d13c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d140:	460e      	mov	r6, r1
 800d142:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d146:	42ab      	cmp	r3, r5
 800d148:	d1f7      	bne.n	800d13a <__strtok_r+0x32>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0f3      	beq.n	800d136 <__strtok_r+0x2e>
 800d14e:	2300      	movs	r3, #0
 800d150:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d154:	6014      	str	r4, [r2, #0]
 800d156:	e7ed      	b.n	800d134 <__strtok_r+0x2c>

0800d158 <_localeconv_r>:
 800d158:	4800      	ldr	r0, [pc, #0]	@ (800d15c <_localeconv_r+0x4>)
 800d15a:	4770      	bx	lr
 800d15c:	20000294 	.word	0x20000294

0800d160 <_close_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	@ (800d17c <_close_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f4 fe10 	bl	8001d90 <_close>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_close_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_close_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20003578 	.word	0x20003578

0800d180 <_reclaim_reent>:
 800d180:	4b29      	ldr	r3, [pc, #164]	@ (800d228 <_reclaim_reent+0xa8>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4283      	cmp	r3, r0
 800d186:	b570      	push	{r4, r5, r6, lr}
 800d188:	4604      	mov	r4, r0
 800d18a:	d04b      	beq.n	800d224 <_reclaim_reent+0xa4>
 800d18c:	69c3      	ldr	r3, [r0, #28]
 800d18e:	b1ab      	cbz	r3, 800d1bc <_reclaim_reent+0x3c>
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	b16b      	cbz	r3, 800d1b0 <_reclaim_reent+0x30>
 800d194:	2500      	movs	r5, #0
 800d196:	69e3      	ldr	r3, [r4, #28]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	5959      	ldr	r1, [r3, r5]
 800d19c:	2900      	cmp	r1, #0
 800d19e:	d13b      	bne.n	800d218 <_reclaim_reent+0x98>
 800d1a0:	3504      	adds	r5, #4
 800d1a2:	2d80      	cmp	r5, #128	@ 0x80
 800d1a4:	d1f7      	bne.n	800d196 <_reclaim_reent+0x16>
 800d1a6:	69e3      	ldr	r3, [r4, #28]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	68d9      	ldr	r1, [r3, #12]
 800d1ac:	f000 ff2c 	bl	800e008 <_free_r>
 800d1b0:	69e3      	ldr	r3, [r4, #28]
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	b111      	cbz	r1, 800d1bc <_reclaim_reent+0x3c>
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f000 ff26 	bl	800e008 <_free_r>
 800d1bc:	6961      	ldr	r1, [r4, #20]
 800d1be:	b111      	cbz	r1, 800d1c6 <_reclaim_reent+0x46>
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f000 ff21 	bl	800e008 <_free_r>
 800d1c6:	69e1      	ldr	r1, [r4, #28]
 800d1c8:	b111      	cbz	r1, 800d1d0 <_reclaim_reent+0x50>
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 ff1c 	bl	800e008 <_free_r>
 800d1d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d1d2:	b111      	cbz	r1, 800d1da <_reclaim_reent+0x5a>
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 ff17 	bl	800e008 <_free_r>
 800d1da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1dc:	b111      	cbz	r1, 800d1e4 <_reclaim_reent+0x64>
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 ff12 	bl	800e008 <_free_r>
 800d1e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d1e6:	b111      	cbz	r1, 800d1ee <_reclaim_reent+0x6e>
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 ff0d 	bl	800e008 <_free_r>
 800d1ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d1f0:	b111      	cbz	r1, 800d1f8 <_reclaim_reent+0x78>
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 ff08 	bl	800e008 <_free_r>
 800d1f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d1fa:	b111      	cbz	r1, 800d202 <_reclaim_reent+0x82>
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 ff03 	bl	800e008 <_free_r>
 800d202:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d204:	b111      	cbz	r1, 800d20c <_reclaim_reent+0x8c>
 800d206:	4620      	mov	r0, r4
 800d208:	f000 fefe 	bl	800e008 <_free_r>
 800d20c:	6a23      	ldr	r3, [r4, #32]
 800d20e:	b14b      	cbz	r3, 800d224 <_reclaim_reent+0xa4>
 800d210:	4620      	mov	r0, r4
 800d212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d216:	4718      	bx	r3
 800d218:	680e      	ldr	r6, [r1, #0]
 800d21a:	4620      	mov	r0, r4
 800d21c:	f000 fef4 	bl	800e008 <_free_r>
 800d220:	4631      	mov	r1, r6
 800d222:	e7bb      	b.n	800d19c <_reclaim_reent+0x1c>
 800d224:	bd70      	pop	{r4, r5, r6, pc}
 800d226:	bf00      	nop
 800d228:	20000154 	.word	0x20000154

0800d22c <_lseek_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d07      	ldr	r5, [pc, #28]	@ (800d24c <_lseek_r+0x20>)
 800d230:	4604      	mov	r4, r0
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	2200      	movs	r2, #0
 800d238:	602a      	str	r2, [r5, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f7f4 fdcf 	bl	8001dde <_lseek>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_lseek_r+0x1e>
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	b103      	cbz	r3, 800d24a <_lseek_r+0x1e>
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	20003578 	.word	0x20003578

0800d250 <_read_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	4d07      	ldr	r5, [pc, #28]	@ (800d270 <_read_r+0x20>)
 800d254:	4604      	mov	r4, r0
 800d256:	4608      	mov	r0, r1
 800d258:	4611      	mov	r1, r2
 800d25a:	2200      	movs	r2, #0
 800d25c:	602a      	str	r2, [r5, #0]
 800d25e:	461a      	mov	r2, r3
 800d260:	f7f4 fd5d 	bl	8001d1e <_read>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d102      	bne.n	800d26e <_read_r+0x1e>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	b103      	cbz	r3, 800d26e <_read_r+0x1e>
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	20003578 	.word	0x20003578

0800d274 <_sbrk_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4d06      	ldr	r5, [pc, #24]	@ (800d290 <_sbrk_r+0x1c>)
 800d278:	2300      	movs	r3, #0
 800d27a:	4604      	mov	r4, r0
 800d27c:	4608      	mov	r0, r1
 800d27e:	602b      	str	r3, [r5, #0]
 800d280:	f7f4 fdba 	bl	8001df8 <_sbrk>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_sbrk_r+0x1a>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_sbrk_r+0x1a>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	20003578 	.word	0x20003578

0800d294 <_write_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d07      	ldr	r5, [pc, #28]	@ (800d2b4 <_write_r+0x20>)
 800d298:	4604      	mov	r4, r0
 800d29a:	4608      	mov	r0, r1
 800d29c:	4611      	mov	r1, r2
 800d29e:	2200      	movs	r2, #0
 800d2a0:	602a      	str	r2, [r5, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f7f4 fd58 	bl	8001d58 <_write>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_write_r+0x1e>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_write_r+0x1e>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	20003578 	.word	0x20003578

0800d2b8 <__errno>:
 800d2b8:	4b01      	ldr	r3, [pc, #4]	@ (800d2c0 <__errno+0x8>)
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	20000154 	.word	0x20000154

0800d2c4 <__libc_init_array>:
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d2fc <__libc_init_array+0x38>)
 800d2c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d300 <__libc_init_array+0x3c>)
 800d2ca:	1b64      	subs	r4, r4, r5
 800d2cc:	10a4      	asrs	r4, r4, #2
 800d2ce:	2600      	movs	r6, #0
 800d2d0:	42a6      	cmp	r6, r4
 800d2d2:	d109      	bne.n	800d2e8 <__libc_init_array+0x24>
 800d2d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d304 <__libc_init_array+0x40>)
 800d2d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d308 <__libc_init_array+0x44>)
 800d2d8:	f001 ff8c 	bl	800f1f4 <_init>
 800d2dc:	1b64      	subs	r4, r4, r5
 800d2de:	10a4      	asrs	r4, r4, #2
 800d2e0:	2600      	movs	r6, #0
 800d2e2:	42a6      	cmp	r6, r4
 800d2e4:	d105      	bne.n	800d2f2 <__libc_init_array+0x2e>
 800d2e6:	bd70      	pop	{r4, r5, r6, pc}
 800d2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ec:	4798      	blx	r3
 800d2ee:	3601      	adds	r6, #1
 800d2f0:	e7ee      	b.n	800d2d0 <__libc_init_array+0xc>
 800d2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f6:	4798      	blx	r3
 800d2f8:	3601      	adds	r6, #1
 800d2fa:	e7f2      	b.n	800d2e2 <__libc_init_array+0x1e>
 800d2fc:	0800fa5c 	.word	0x0800fa5c
 800d300:	0800fa5c 	.word	0x0800fa5c
 800d304:	0800fa5c 	.word	0x0800fa5c
 800d308:	0800fa60 	.word	0x0800fa60

0800d30c <__retarget_lock_init_recursive>:
 800d30c:	4770      	bx	lr

0800d30e <__retarget_lock_acquire_recursive>:
 800d30e:	4770      	bx	lr

0800d310 <__retarget_lock_release_recursive>:
 800d310:	4770      	bx	lr

0800d312 <memcpy>:
 800d312:	440a      	add	r2, r1
 800d314:	4291      	cmp	r1, r2
 800d316:	f100 33ff 	add.w	r3, r0, #4294967295
 800d31a:	d100      	bne.n	800d31e <memcpy+0xc>
 800d31c:	4770      	bx	lr
 800d31e:	b510      	push	{r4, lr}
 800d320:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d324:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d328:	4291      	cmp	r1, r2
 800d32a:	d1f9      	bne.n	800d320 <memcpy+0xe>
 800d32c:	bd10      	pop	{r4, pc}
	...

0800d330 <__assert_func>:
 800d330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d332:	4614      	mov	r4, r2
 800d334:	461a      	mov	r2, r3
 800d336:	4b09      	ldr	r3, [pc, #36]	@ (800d35c <__assert_func+0x2c>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4605      	mov	r5, r0
 800d33c:	68d8      	ldr	r0, [r3, #12]
 800d33e:	b954      	cbnz	r4, 800d356 <__assert_func+0x26>
 800d340:	4b07      	ldr	r3, [pc, #28]	@ (800d360 <__assert_func+0x30>)
 800d342:	461c      	mov	r4, r3
 800d344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d348:	9100      	str	r1, [sp, #0]
 800d34a:	462b      	mov	r3, r5
 800d34c:	4905      	ldr	r1, [pc, #20]	@ (800d364 <__assert_func+0x34>)
 800d34e:	f001 fc2b 	bl	800eba8 <fiprintf>
 800d352:	f001 fc55 	bl	800ec00 <abort>
 800d356:	4b04      	ldr	r3, [pc, #16]	@ (800d368 <__assert_func+0x38>)
 800d358:	e7f4      	b.n	800d344 <__assert_func+0x14>
 800d35a:	bf00      	nop
 800d35c:	20000154 	.word	0x20000154
 800d360:	0800f869 	.word	0x0800f869
 800d364:	0800f83b 	.word	0x0800f83b
 800d368:	0800f82e 	.word	0x0800f82e

0800d36c <quorem>:
 800d36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d370:	6903      	ldr	r3, [r0, #16]
 800d372:	690c      	ldr	r4, [r1, #16]
 800d374:	42a3      	cmp	r3, r4
 800d376:	4607      	mov	r7, r0
 800d378:	db7e      	blt.n	800d478 <quorem+0x10c>
 800d37a:	3c01      	subs	r4, #1
 800d37c:	f101 0814 	add.w	r8, r1, #20
 800d380:	00a3      	lsls	r3, r4, #2
 800d382:	f100 0514 	add.w	r5, r0, #20
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d396:	3301      	adds	r3, #1
 800d398:	429a      	cmp	r2, r3
 800d39a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d39e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3a2:	d32e      	bcc.n	800d402 <quorem+0x96>
 800d3a4:	f04f 0a00 	mov.w	sl, #0
 800d3a8:	46c4      	mov	ip, r8
 800d3aa:	46ae      	mov	lr, r5
 800d3ac:	46d3      	mov	fp, sl
 800d3ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3b2:	b298      	uxth	r0, r3
 800d3b4:	fb06 a000 	mla	r0, r6, r0, sl
 800d3b8:	0c02      	lsrs	r2, r0, #16
 800d3ba:	0c1b      	lsrs	r3, r3, #16
 800d3bc:	fb06 2303 	mla	r3, r6, r3, r2
 800d3c0:	f8de 2000 	ldr.w	r2, [lr]
 800d3c4:	b280      	uxth	r0, r0
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	1a12      	subs	r2, r2, r0
 800d3ca:	445a      	add	r2, fp
 800d3cc:	f8de 0000 	ldr.w	r0, [lr]
 800d3d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3de:	b292      	uxth	r2, r2
 800d3e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3e4:	45e1      	cmp	r9, ip
 800d3e6:	f84e 2b04 	str.w	r2, [lr], #4
 800d3ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3ee:	d2de      	bcs.n	800d3ae <quorem+0x42>
 800d3f0:	9b00      	ldr	r3, [sp, #0]
 800d3f2:	58eb      	ldr	r3, [r5, r3]
 800d3f4:	b92b      	cbnz	r3, 800d402 <quorem+0x96>
 800d3f6:	9b01      	ldr	r3, [sp, #4]
 800d3f8:	3b04      	subs	r3, #4
 800d3fa:	429d      	cmp	r5, r3
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	d32f      	bcc.n	800d460 <quorem+0xf4>
 800d400:	613c      	str	r4, [r7, #16]
 800d402:	4638      	mov	r0, r7
 800d404:	f001 f8c4 	bl	800e590 <__mcmp>
 800d408:	2800      	cmp	r0, #0
 800d40a:	db25      	blt.n	800d458 <quorem+0xec>
 800d40c:	4629      	mov	r1, r5
 800d40e:	2000      	movs	r0, #0
 800d410:	f858 2b04 	ldr.w	r2, [r8], #4
 800d414:	f8d1 c000 	ldr.w	ip, [r1]
 800d418:	fa1f fe82 	uxth.w	lr, r2
 800d41c:	fa1f f38c 	uxth.w	r3, ip
 800d420:	eba3 030e 	sub.w	r3, r3, lr
 800d424:	4403      	add	r3, r0
 800d426:	0c12      	lsrs	r2, r2, #16
 800d428:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d42c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d430:	b29b      	uxth	r3, r3
 800d432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d436:	45c1      	cmp	r9, r8
 800d438:	f841 3b04 	str.w	r3, [r1], #4
 800d43c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d440:	d2e6      	bcs.n	800d410 <quorem+0xa4>
 800d442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d44a:	b922      	cbnz	r2, 800d456 <quorem+0xea>
 800d44c:	3b04      	subs	r3, #4
 800d44e:	429d      	cmp	r5, r3
 800d450:	461a      	mov	r2, r3
 800d452:	d30b      	bcc.n	800d46c <quorem+0x100>
 800d454:	613c      	str	r4, [r7, #16]
 800d456:	3601      	adds	r6, #1
 800d458:	4630      	mov	r0, r6
 800d45a:	b003      	add	sp, #12
 800d45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d460:	6812      	ldr	r2, [r2, #0]
 800d462:	3b04      	subs	r3, #4
 800d464:	2a00      	cmp	r2, #0
 800d466:	d1cb      	bne.n	800d400 <quorem+0x94>
 800d468:	3c01      	subs	r4, #1
 800d46a:	e7c6      	b.n	800d3fa <quorem+0x8e>
 800d46c:	6812      	ldr	r2, [r2, #0]
 800d46e:	3b04      	subs	r3, #4
 800d470:	2a00      	cmp	r2, #0
 800d472:	d1ef      	bne.n	800d454 <quorem+0xe8>
 800d474:	3c01      	subs	r4, #1
 800d476:	e7ea      	b.n	800d44e <quorem+0xe2>
 800d478:	2000      	movs	r0, #0
 800d47a:	e7ee      	b.n	800d45a <quorem+0xee>
 800d47c:	0000      	movs	r0, r0
	...

0800d480 <_dtoa_r>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	69c7      	ldr	r7, [r0, #28]
 800d486:	b099      	sub	sp, #100	@ 0x64
 800d488:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d48c:	ec55 4b10 	vmov	r4, r5, d0
 800d490:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d492:	9109      	str	r1, [sp, #36]	@ 0x24
 800d494:	4683      	mov	fp, r0
 800d496:	920e      	str	r2, [sp, #56]	@ 0x38
 800d498:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d49a:	b97f      	cbnz	r7, 800d4bc <_dtoa_r+0x3c>
 800d49c:	2010      	movs	r0, #16
 800d49e:	f7fe ff3f 	bl	800c320 <malloc>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4a8:	b920      	cbnz	r0, 800d4b4 <_dtoa_r+0x34>
 800d4aa:	4ba7      	ldr	r3, [pc, #668]	@ (800d748 <_dtoa_r+0x2c8>)
 800d4ac:	21ef      	movs	r1, #239	@ 0xef
 800d4ae:	48a7      	ldr	r0, [pc, #668]	@ (800d74c <_dtoa_r+0x2cc>)
 800d4b0:	f7ff ff3e 	bl	800d330 <__assert_func>
 800d4b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4b8:	6007      	str	r7, [r0, #0]
 800d4ba:	60c7      	str	r7, [r0, #12]
 800d4bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4c0:	6819      	ldr	r1, [r3, #0]
 800d4c2:	b159      	cbz	r1, 800d4dc <_dtoa_r+0x5c>
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	604a      	str	r2, [r1, #4]
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	4093      	lsls	r3, r2
 800d4cc:	608b      	str	r3, [r1, #8]
 800d4ce:	4658      	mov	r0, fp
 800d4d0:	f000 fe24 	bl	800e11c <_Bfree>
 800d4d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	1e2b      	subs	r3, r5, #0
 800d4de:	bfb9      	ittee	lt
 800d4e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4e4:	9303      	strlt	r3, [sp, #12]
 800d4e6:	2300      	movge	r3, #0
 800d4e8:	6033      	strge	r3, [r6, #0]
 800d4ea:	9f03      	ldr	r7, [sp, #12]
 800d4ec:	4b98      	ldr	r3, [pc, #608]	@ (800d750 <_dtoa_r+0x2d0>)
 800d4ee:	bfbc      	itt	lt
 800d4f0:	2201      	movlt	r2, #1
 800d4f2:	6032      	strlt	r2, [r6, #0]
 800d4f4:	43bb      	bics	r3, r7
 800d4f6:	d112      	bne.n	800d51e <_dtoa_r+0x9e>
 800d4f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d504:	4323      	orrs	r3, r4
 800d506:	f000 854d 	beq.w	800dfa4 <_dtoa_r+0xb24>
 800d50a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d50c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d764 <_dtoa_r+0x2e4>
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 854f 	beq.w	800dfb4 <_dtoa_r+0xb34>
 800d516:	f10a 0303 	add.w	r3, sl, #3
 800d51a:	f000 bd49 	b.w	800dfb0 <_dtoa_r+0xb30>
 800d51e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d522:	2200      	movs	r2, #0
 800d524:	ec51 0b17 	vmov	r0, r1, d7
 800d528:	2300      	movs	r3, #0
 800d52a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d52e:	f7f3 fadb 	bl	8000ae8 <__aeabi_dcmpeq>
 800d532:	4680      	mov	r8, r0
 800d534:	b158      	cbz	r0, 800d54e <_dtoa_r+0xce>
 800d536:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d538:	2301      	movs	r3, #1
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d53e:	b113      	cbz	r3, 800d546 <_dtoa_r+0xc6>
 800d540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d542:	4b84      	ldr	r3, [pc, #528]	@ (800d754 <_dtoa_r+0x2d4>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d768 <_dtoa_r+0x2e8>
 800d54a:	f000 bd33 	b.w	800dfb4 <_dtoa_r+0xb34>
 800d54e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d552:	aa16      	add	r2, sp, #88	@ 0x58
 800d554:	a917      	add	r1, sp, #92	@ 0x5c
 800d556:	4658      	mov	r0, fp
 800d558:	f001 f8ca 	bl	800e6f0 <__d2b>
 800d55c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d560:	4681      	mov	r9, r0
 800d562:	2e00      	cmp	r6, #0
 800d564:	d077      	beq.n	800d656 <_dtoa_r+0x1d6>
 800d566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d568:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d57c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d580:	4619      	mov	r1, r3
 800d582:	2200      	movs	r2, #0
 800d584:	4b74      	ldr	r3, [pc, #464]	@ (800d758 <_dtoa_r+0x2d8>)
 800d586:	f7f2 fe8f 	bl	80002a8 <__aeabi_dsub>
 800d58a:	a369      	add	r3, pc, #420	@ (adr r3, 800d730 <_dtoa_r+0x2b0>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	f7f3 f842 	bl	8000618 <__aeabi_dmul>
 800d594:	a368      	add	r3, pc, #416	@ (adr r3, 800d738 <_dtoa_r+0x2b8>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f2 fe87 	bl	80002ac <__adddf3>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	f7f2 ffce 	bl	8000544 <__aeabi_i2d>
 800d5a8:	a365      	add	r3, pc, #404	@ (adr r3, 800d740 <_dtoa_r+0x2c0>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f3 f833 	bl	8000618 <__aeabi_dmul>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	f7f2 fe77 	bl	80002ac <__adddf3>
 800d5be:	4604      	mov	r4, r0
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	f7f3 fad9 	bl	8000b78 <__aeabi_d2iz>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	4607      	mov	r7, r0
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f3 fa94 	bl	8000afc <__aeabi_dcmplt>
 800d5d4:	b140      	cbz	r0, 800d5e8 <_dtoa_r+0x168>
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f7f2 ffb4 	bl	8000544 <__aeabi_i2d>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	462b      	mov	r3, r5
 800d5e0:	f7f3 fa82 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5e4:	b900      	cbnz	r0, 800d5e8 <_dtoa_r+0x168>
 800d5e6:	3f01      	subs	r7, #1
 800d5e8:	2f16      	cmp	r7, #22
 800d5ea:	d851      	bhi.n	800d690 <_dtoa_r+0x210>
 800d5ec:	4b5b      	ldr	r3, [pc, #364]	@ (800d75c <_dtoa_r+0x2dc>)
 800d5ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5fa:	f7f3 fa7f 	bl	8000afc <__aeabi_dcmplt>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d048      	beq.n	800d694 <_dtoa_r+0x214>
 800d602:	3f01      	subs	r7, #1
 800d604:	2300      	movs	r3, #0
 800d606:	9312      	str	r3, [sp, #72]	@ 0x48
 800d608:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d60a:	1b9b      	subs	r3, r3, r6
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	bf44      	itt	mi
 800d610:	f1c3 0801 	rsbmi	r8, r3, #1
 800d614:	2300      	movmi	r3, #0
 800d616:	9208      	str	r2, [sp, #32]
 800d618:	bf54      	ite	pl
 800d61a:	f04f 0800 	movpl.w	r8, #0
 800d61e:	9308      	strmi	r3, [sp, #32]
 800d620:	2f00      	cmp	r7, #0
 800d622:	db39      	blt.n	800d698 <_dtoa_r+0x218>
 800d624:	9b08      	ldr	r3, [sp, #32]
 800d626:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d628:	443b      	add	r3, r7
 800d62a:	9308      	str	r3, [sp, #32]
 800d62c:	2300      	movs	r3, #0
 800d62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d632:	2b09      	cmp	r3, #9
 800d634:	d864      	bhi.n	800d700 <_dtoa_r+0x280>
 800d636:	2b05      	cmp	r3, #5
 800d638:	bfc4      	itt	gt
 800d63a:	3b04      	subgt	r3, #4
 800d63c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d640:	f1a3 0302 	sub.w	r3, r3, #2
 800d644:	bfcc      	ite	gt
 800d646:	2400      	movgt	r4, #0
 800d648:	2401      	movle	r4, #1
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d863      	bhi.n	800d716 <_dtoa_r+0x296>
 800d64e:	e8df f003 	tbb	[pc, r3]
 800d652:	372a      	.short	0x372a
 800d654:	5535      	.short	0x5535
 800d656:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d65a:	441e      	add	r6, r3
 800d65c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d660:	2b20      	cmp	r3, #32
 800d662:	bfc1      	itttt	gt
 800d664:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d668:	409f      	lslgt	r7, r3
 800d66a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d66e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d672:	bfd6      	itet	le
 800d674:	f1c3 0320 	rsble	r3, r3, #32
 800d678:	ea47 0003 	orrgt.w	r0, r7, r3
 800d67c:	fa04 f003 	lslle.w	r0, r4, r3
 800d680:	f7f2 ff50 	bl	8000524 <__aeabi_ui2d>
 800d684:	2201      	movs	r2, #1
 800d686:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d68a:	3e01      	subs	r6, #1
 800d68c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d68e:	e777      	b.n	800d580 <_dtoa_r+0x100>
 800d690:	2301      	movs	r3, #1
 800d692:	e7b8      	b.n	800d606 <_dtoa_r+0x186>
 800d694:	9012      	str	r0, [sp, #72]	@ 0x48
 800d696:	e7b7      	b.n	800d608 <_dtoa_r+0x188>
 800d698:	427b      	negs	r3, r7
 800d69a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d69c:	2300      	movs	r3, #0
 800d69e:	eba8 0807 	sub.w	r8, r8, r7
 800d6a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6a4:	e7c4      	b.n	800d630 <_dtoa_r+0x1b0>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	dc35      	bgt.n	800d71c <_dtoa_r+0x29c>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	9307      	str	r3, [sp, #28]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6ba:	e00b      	b.n	800d6d4 <_dtoa_r+0x254>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e7f3      	b.n	800d6a8 <_dtoa_r+0x228>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6c6:	18fb      	adds	r3, r7, r3
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	9307      	str	r3, [sp, #28]
 800d6d0:	bfb8      	it	lt
 800d6d2:	2301      	movlt	r3, #1
 800d6d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6d8:	2100      	movs	r1, #0
 800d6da:	2204      	movs	r2, #4
 800d6dc:	f102 0514 	add.w	r5, r2, #20
 800d6e0:	429d      	cmp	r5, r3
 800d6e2:	d91f      	bls.n	800d724 <_dtoa_r+0x2a4>
 800d6e4:	6041      	str	r1, [r0, #4]
 800d6e6:	4658      	mov	r0, fp
 800d6e8:	f000 fcd8 	bl	800e09c <_Balloc>
 800d6ec:	4682      	mov	sl, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d13c      	bne.n	800d76c <_dtoa_r+0x2ec>
 800d6f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d760 <_dtoa_r+0x2e0>)
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6fa:	e6d8      	b.n	800d4ae <_dtoa_r+0x2e>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e7e0      	b.n	800d6c2 <_dtoa_r+0x242>
 800d700:	2401      	movs	r4, #1
 800d702:	2300      	movs	r3, #0
 800d704:	9309      	str	r3, [sp, #36]	@ 0x24
 800d706:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d708:	f04f 33ff 	mov.w	r3, #4294967295
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	9307      	str	r3, [sp, #28]
 800d710:	2200      	movs	r2, #0
 800d712:	2312      	movs	r3, #18
 800d714:	e7d0      	b.n	800d6b8 <_dtoa_r+0x238>
 800d716:	2301      	movs	r3, #1
 800d718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d71a:	e7f5      	b.n	800d708 <_dtoa_r+0x288>
 800d71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	9307      	str	r3, [sp, #28]
 800d722:	e7d7      	b.n	800d6d4 <_dtoa_r+0x254>
 800d724:	3101      	adds	r1, #1
 800d726:	0052      	lsls	r2, r2, #1
 800d728:	e7d8      	b.n	800d6dc <_dtoa_r+0x25c>
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
 800d730:	636f4361 	.word	0x636f4361
 800d734:	3fd287a7 	.word	0x3fd287a7
 800d738:	8b60c8b3 	.word	0x8b60c8b3
 800d73c:	3fc68a28 	.word	0x3fc68a28
 800d740:	509f79fb 	.word	0x509f79fb
 800d744:	3fd34413 	.word	0x3fd34413
 800d748:	0800f7bd 	.word	0x0800f7bd
 800d74c:	0800f877 	.word	0x0800f877
 800d750:	7ff00000 	.word	0x7ff00000
 800d754:	0800f79a 	.word	0x0800f79a
 800d758:	3ff80000 	.word	0x3ff80000
 800d75c:	0800f970 	.word	0x0800f970
 800d760:	0800f8cf 	.word	0x0800f8cf
 800d764:	0800f873 	.word	0x0800f873
 800d768:	0800f799 	.word	0x0800f799
 800d76c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d770:	6018      	str	r0, [r3, #0]
 800d772:	9b07      	ldr	r3, [sp, #28]
 800d774:	2b0e      	cmp	r3, #14
 800d776:	f200 80a4 	bhi.w	800d8c2 <_dtoa_r+0x442>
 800d77a:	2c00      	cmp	r4, #0
 800d77c:	f000 80a1 	beq.w	800d8c2 <_dtoa_r+0x442>
 800d780:	2f00      	cmp	r7, #0
 800d782:	dd33      	ble.n	800d7ec <_dtoa_r+0x36c>
 800d784:	4bad      	ldr	r3, [pc, #692]	@ (800da3c <_dtoa_r+0x5bc>)
 800d786:	f007 020f 	and.w	r2, r7, #15
 800d78a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d78e:	ed93 7b00 	vldr	d7, [r3]
 800d792:	05f8      	lsls	r0, r7, #23
 800d794:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d798:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d79c:	d516      	bpl.n	800d7cc <_dtoa_r+0x34c>
 800d79e:	4ba8      	ldr	r3, [pc, #672]	@ (800da40 <_dtoa_r+0x5c0>)
 800d7a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7a8:	f7f3 f860 	bl	800086c <__aeabi_ddiv>
 800d7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7b0:	f004 040f 	and.w	r4, r4, #15
 800d7b4:	2603      	movs	r6, #3
 800d7b6:	4da2      	ldr	r5, [pc, #648]	@ (800da40 <_dtoa_r+0x5c0>)
 800d7b8:	b954      	cbnz	r4, 800d7d0 <_dtoa_r+0x350>
 800d7ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c2:	f7f3 f853 	bl	800086c <__aeabi_ddiv>
 800d7c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7ca:	e028      	b.n	800d81e <_dtoa_r+0x39e>
 800d7cc:	2602      	movs	r6, #2
 800d7ce:	e7f2      	b.n	800d7b6 <_dtoa_r+0x336>
 800d7d0:	07e1      	lsls	r1, r4, #31
 800d7d2:	d508      	bpl.n	800d7e6 <_dtoa_r+0x366>
 800d7d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7dc:	f7f2 ff1c 	bl	8000618 <__aeabi_dmul>
 800d7e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7e4:	3601      	adds	r6, #1
 800d7e6:	1064      	asrs	r4, r4, #1
 800d7e8:	3508      	adds	r5, #8
 800d7ea:	e7e5      	b.n	800d7b8 <_dtoa_r+0x338>
 800d7ec:	f000 80d2 	beq.w	800d994 <_dtoa_r+0x514>
 800d7f0:	427c      	negs	r4, r7
 800d7f2:	4b92      	ldr	r3, [pc, #584]	@ (800da3c <_dtoa_r+0x5bc>)
 800d7f4:	4d92      	ldr	r5, [pc, #584]	@ (800da40 <_dtoa_r+0x5c0>)
 800d7f6:	f004 020f 	and.w	r2, r4, #15
 800d7fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d806:	f7f2 ff07 	bl	8000618 <__aeabi_dmul>
 800d80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80e:	1124      	asrs	r4, r4, #4
 800d810:	2300      	movs	r3, #0
 800d812:	2602      	movs	r6, #2
 800d814:	2c00      	cmp	r4, #0
 800d816:	f040 80b2 	bne.w	800d97e <_dtoa_r+0x4fe>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1d3      	bne.n	800d7c6 <_dtoa_r+0x346>
 800d81e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d820:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80b7 	beq.w	800d998 <_dtoa_r+0x518>
 800d82a:	4b86      	ldr	r3, [pc, #536]	@ (800da44 <_dtoa_r+0x5c4>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4620      	mov	r0, r4
 800d830:	4629      	mov	r1, r5
 800d832:	f7f3 f963 	bl	8000afc <__aeabi_dcmplt>
 800d836:	2800      	cmp	r0, #0
 800d838:	f000 80ae 	beq.w	800d998 <_dtoa_r+0x518>
 800d83c:	9b07      	ldr	r3, [sp, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 80aa 	beq.w	800d998 <_dtoa_r+0x518>
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	dd37      	ble.n	800d8ba <_dtoa_r+0x43a>
 800d84a:	1e7b      	subs	r3, r7, #1
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	4620      	mov	r0, r4
 800d850:	4b7d      	ldr	r3, [pc, #500]	@ (800da48 <_dtoa_r+0x5c8>)
 800d852:	2200      	movs	r2, #0
 800d854:	4629      	mov	r1, r5
 800d856:	f7f2 fedf 	bl	8000618 <__aeabi_dmul>
 800d85a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d85e:	9c00      	ldr	r4, [sp, #0]
 800d860:	3601      	adds	r6, #1
 800d862:	4630      	mov	r0, r6
 800d864:	f7f2 fe6e 	bl	8000544 <__aeabi_i2d>
 800d868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d86c:	f7f2 fed4 	bl	8000618 <__aeabi_dmul>
 800d870:	4b76      	ldr	r3, [pc, #472]	@ (800da4c <_dtoa_r+0x5cc>)
 800d872:	2200      	movs	r2, #0
 800d874:	f7f2 fd1a 	bl	80002ac <__adddf3>
 800d878:	4605      	mov	r5, r0
 800d87a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d87e:	2c00      	cmp	r4, #0
 800d880:	f040 808d 	bne.w	800d99e <_dtoa_r+0x51e>
 800d884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d888:	4b71      	ldr	r3, [pc, #452]	@ (800da50 <_dtoa_r+0x5d0>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 fd0c 	bl	80002a8 <__aeabi_dsub>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d898:	462a      	mov	r2, r5
 800d89a:	4633      	mov	r3, r6
 800d89c:	f7f3 f94c 	bl	8000b38 <__aeabi_dcmpgt>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	f040 828b 	bne.w	800ddbc <_dtoa_r+0x93c>
 800d8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8b0:	f7f3 f924 	bl	8000afc <__aeabi_dcmplt>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	f040 8128 	bne.w	800db0a <_dtoa_r+0x68a>
 800d8ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f2c0 815a 	blt.w	800db7e <_dtoa_r+0x6fe>
 800d8ca:	2f0e      	cmp	r7, #14
 800d8cc:	f300 8157 	bgt.w	800db7e <_dtoa_r+0x6fe>
 800d8d0:	4b5a      	ldr	r3, [pc, #360]	@ (800da3c <_dtoa_r+0x5bc>)
 800d8d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8d6:	ed93 7b00 	vldr	d7, [r3]
 800d8da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	ed8d 7b00 	vstr	d7, [sp]
 800d8e2:	da03      	bge.n	800d8ec <_dtoa_r+0x46c>
 800d8e4:	9b07      	ldr	r3, [sp, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f340 8101 	ble.w	800daee <_dtoa_r+0x66e>
 800d8ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8f0:	4656      	mov	r6, sl
 800d8f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7f2 ffb7 	bl	800086c <__aeabi_ddiv>
 800d8fe:	f7f3 f93b 	bl	8000b78 <__aeabi_d2iz>
 800d902:	4680      	mov	r8, r0
 800d904:	f7f2 fe1e 	bl	8000544 <__aeabi_i2d>
 800d908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d90c:	f7f2 fe84 	bl	8000618 <__aeabi_dmul>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4620      	mov	r0, r4
 800d916:	4629      	mov	r1, r5
 800d918:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d91c:	f7f2 fcc4 	bl	80002a8 <__aeabi_dsub>
 800d920:	f806 4b01 	strb.w	r4, [r6], #1
 800d924:	9d07      	ldr	r5, [sp, #28]
 800d926:	eba6 040a 	sub.w	r4, r6, sl
 800d92a:	42a5      	cmp	r5, r4
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	f040 8117 	bne.w	800db62 <_dtoa_r+0x6e2>
 800d934:	f7f2 fcba 	bl	80002ac <__adddf3>
 800d938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d93c:	4604      	mov	r4, r0
 800d93e:	460d      	mov	r5, r1
 800d940:	f7f3 f8fa 	bl	8000b38 <__aeabi_dcmpgt>
 800d944:	2800      	cmp	r0, #0
 800d946:	f040 80f9 	bne.w	800db3c <_dtoa_r+0x6bc>
 800d94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d94e:	4620      	mov	r0, r4
 800d950:	4629      	mov	r1, r5
 800d952:	f7f3 f8c9 	bl	8000ae8 <__aeabi_dcmpeq>
 800d956:	b118      	cbz	r0, 800d960 <_dtoa_r+0x4e0>
 800d958:	f018 0f01 	tst.w	r8, #1
 800d95c:	f040 80ee 	bne.w	800db3c <_dtoa_r+0x6bc>
 800d960:	4649      	mov	r1, r9
 800d962:	4658      	mov	r0, fp
 800d964:	f000 fbda 	bl	800e11c <_Bfree>
 800d968:	2300      	movs	r3, #0
 800d96a:	7033      	strb	r3, [r6, #0]
 800d96c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d96e:	3701      	adds	r7, #1
 800d970:	601f      	str	r7, [r3, #0]
 800d972:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 831d 	beq.w	800dfb4 <_dtoa_r+0xb34>
 800d97a:	601e      	str	r6, [r3, #0]
 800d97c:	e31a      	b.n	800dfb4 <_dtoa_r+0xb34>
 800d97e:	07e2      	lsls	r2, r4, #31
 800d980:	d505      	bpl.n	800d98e <_dtoa_r+0x50e>
 800d982:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d986:	f7f2 fe47 	bl	8000618 <__aeabi_dmul>
 800d98a:	3601      	adds	r6, #1
 800d98c:	2301      	movs	r3, #1
 800d98e:	1064      	asrs	r4, r4, #1
 800d990:	3508      	adds	r5, #8
 800d992:	e73f      	b.n	800d814 <_dtoa_r+0x394>
 800d994:	2602      	movs	r6, #2
 800d996:	e742      	b.n	800d81e <_dtoa_r+0x39e>
 800d998:	9c07      	ldr	r4, [sp, #28]
 800d99a:	9704      	str	r7, [sp, #16]
 800d99c:	e761      	b.n	800d862 <_dtoa_r+0x3e2>
 800d99e:	4b27      	ldr	r3, [pc, #156]	@ (800da3c <_dtoa_r+0x5bc>)
 800d9a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9aa:	4454      	add	r4, sl
 800d9ac:	2900      	cmp	r1, #0
 800d9ae:	d053      	beq.n	800da58 <_dtoa_r+0x5d8>
 800d9b0:	4928      	ldr	r1, [pc, #160]	@ (800da54 <_dtoa_r+0x5d4>)
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	f7f2 ff5a 	bl	800086c <__aeabi_ddiv>
 800d9b8:	4633      	mov	r3, r6
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	f7f2 fc74 	bl	80002a8 <__aeabi_dsub>
 800d9c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9c4:	4656      	mov	r6, sl
 800d9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ca:	f7f3 f8d5 	bl	8000b78 <__aeabi_d2iz>
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	f7f2 fdb8 	bl	8000544 <__aeabi_i2d>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9dc:	f7f2 fc64 	bl	80002a8 <__aeabi_dsub>
 800d9e0:	3530      	adds	r5, #48	@ 0x30
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9ea:	f806 5b01 	strb.w	r5, [r6], #1
 800d9ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9f2:	f7f3 f883 	bl	8000afc <__aeabi_dcmplt>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d171      	bne.n	800dade <_dtoa_r+0x65e>
 800d9fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9fe:	4911      	ldr	r1, [pc, #68]	@ (800da44 <_dtoa_r+0x5c4>)
 800da00:	2000      	movs	r0, #0
 800da02:	f7f2 fc51 	bl	80002a8 <__aeabi_dsub>
 800da06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da0a:	f7f3 f877 	bl	8000afc <__aeabi_dcmplt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 8095 	bne.w	800db3e <_dtoa_r+0x6be>
 800da14:	42a6      	cmp	r6, r4
 800da16:	f43f af50 	beq.w	800d8ba <_dtoa_r+0x43a>
 800da1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da1e:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <_dtoa_r+0x5c8>)
 800da20:	2200      	movs	r2, #0
 800da22:	f7f2 fdf9 	bl	8000618 <__aeabi_dmul>
 800da26:	4b08      	ldr	r3, [pc, #32]	@ (800da48 <_dtoa_r+0x5c8>)
 800da28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da2c:	2200      	movs	r2, #0
 800da2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da32:	f7f2 fdf1 	bl	8000618 <__aeabi_dmul>
 800da36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da3a:	e7c4      	b.n	800d9c6 <_dtoa_r+0x546>
 800da3c:	0800f970 	.word	0x0800f970
 800da40:	0800f948 	.word	0x0800f948
 800da44:	3ff00000 	.word	0x3ff00000
 800da48:	40240000 	.word	0x40240000
 800da4c:	401c0000 	.word	0x401c0000
 800da50:	40140000 	.word	0x40140000
 800da54:	3fe00000 	.word	0x3fe00000
 800da58:	4631      	mov	r1, r6
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7f2 fddc 	bl	8000618 <__aeabi_dmul>
 800da60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da64:	9415      	str	r4, [sp, #84]	@ 0x54
 800da66:	4656      	mov	r6, sl
 800da68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da6c:	f7f3 f884 	bl	8000b78 <__aeabi_d2iz>
 800da70:	4605      	mov	r5, r0
 800da72:	f7f2 fd67 	bl	8000544 <__aeabi_i2d>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7e:	f7f2 fc13 	bl	80002a8 <__aeabi_dsub>
 800da82:	3530      	adds	r5, #48	@ 0x30
 800da84:	f806 5b01 	strb.w	r5, [r6], #1
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	42a6      	cmp	r6, r4
 800da8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da92:	f04f 0200 	mov.w	r2, #0
 800da96:	d124      	bne.n	800dae2 <_dtoa_r+0x662>
 800da98:	4bac      	ldr	r3, [pc, #688]	@ (800dd4c <_dtoa_r+0x8cc>)
 800da9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da9e:	f7f2 fc05 	bl	80002ac <__adddf3>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daaa:	f7f3 f845 	bl	8000b38 <__aeabi_dcmpgt>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d145      	bne.n	800db3e <_dtoa_r+0x6be>
 800dab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dab6:	49a5      	ldr	r1, [pc, #660]	@ (800dd4c <_dtoa_r+0x8cc>)
 800dab8:	2000      	movs	r0, #0
 800daba:	f7f2 fbf5 	bl	80002a8 <__aeabi_dsub>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac6:	f7f3 f819 	bl	8000afc <__aeabi_dcmplt>
 800daca:	2800      	cmp	r0, #0
 800dacc:	f43f aef5 	beq.w	800d8ba <_dtoa_r+0x43a>
 800dad0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dad2:	1e73      	subs	r3, r6, #1
 800dad4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dad6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dada:	2b30      	cmp	r3, #48	@ 0x30
 800dadc:	d0f8      	beq.n	800dad0 <_dtoa_r+0x650>
 800dade:	9f04      	ldr	r7, [sp, #16]
 800dae0:	e73e      	b.n	800d960 <_dtoa_r+0x4e0>
 800dae2:	4b9b      	ldr	r3, [pc, #620]	@ (800dd50 <_dtoa_r+0x8d0>)
 800dae4:	f7f2 fd98 	bl	8000618 <__aeabi_dmul>
 800dae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daec:	e7bc      	b.n	800da68 <_dtoa_r+0x5e8>
 800daee:	d10c      	bne.n	800db0a <_dtoa_r+0x68a>
 800daf0:	4b98      	ldr	r3, [pc, #608]	@ (800dd54 <_dtoa_r+0x8d4>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daf8:	f7f2 fd8e 	bl	8000618 <__aeabi_dmul>
 800dafc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db00:	f7f3 f810 	bl	8000b24 <__aeabi_dcmpge>
 800db04:	2800      	cmp	r0, #0
 800db06:	f000 8157 	beq.w	800ddb8 <_dtoa_r+0x938>
 800db0a:	2400      	movs	r4, #0
 800db0c:	4625      	mov	r5, r4
 800db0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db10:	43db      	mvns	r3, r3
 800db12:	9304      	str	r3, [sp, #16]
 800db14:	4656      	mov	r6, sl
 800db16:	2700      	movs	r7, #0
 800db18:	4621      	mov	r1, r4
 800db1a:	4658      	mov	r0, fp
 800db1c:	f000 fafe 	bl	800e11c <_Bfree>
 800db20:	2d00      	cmp	r5, #0
 800db22:	d0dc      	beq.n	800dade <_dtoa_r+0x65e>
 800db24:	b12f      	cbz	r7, 800db32 <_dtoa_r+0x6b2>
 800db26:	42af      	cmp	r7, r5
 800db28:	d003      	beq.n	800db32 <_dtoa_r+0x6b2>
 800db2a:	4639      	mov	r1, r7
 800db2c:	4658      	mov	r0, fp
 800db2e:	f000 faf5 	bl	800e11c <_Bfree>
 800db32:	4629      	mov	r1, r5
 800db34:	4658      	mov	r0, fp
 800db36:	f000 faf1 	bl	800e11c <_Bfree>
 800db3a:	e7d0      	b.n	800dade <_dtoa_r+0x65e>
 800db3c:	9704      	str	r7, [sp, #16]
 800db3e:	4633      	mov	r3, r6
 800db40:	461e      	mov	r6, r3
 800db42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db46:	2a39      	cmp	r2, #57	@ 0x39
 800db48:	d107      	bne.n	800db5a <_dtoa_r+0x6da>
 800db4a:	459a      	cmp	sl, r3
 800db4c:	d1f8      	bne.n	800db40 <_dtoa_r+0x6c0>
 800db4e:	9a04      	ldr	r2, [sp, #16]
 800db50:	3201      	adds	r2, #1
 800db52:	9204      	str	r2, [sp, #16]
 800db54:	2230      	movs	r2, #48	@ 0x30
 800db56:	f88a 2000 	strb.w	r2, [sl]
 800db5a:	781a      	ldrb	r2, [r3, #0]
 800db5c:	3201      	adds	r2, #1
 800db5e:	701a      	strb	r2, [r3, #0]
 800db60:	e7bd      	b.n	800dade <_dtoa_r+0x65e>
 800db62:	4b7b      	ldr	r3, [pc, #492]	@ (800dd50 <_dtoa_r+0x8d0>)
 800db64:	2200      	movs	r2, #0
 800db66:	f7f2 fd57 	bl	8000618 <__aeabi_dmul>
 800db6a:	2200      	movs	r2, #0
 800db6c:	2300      	movs	r3, #0
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	f7f2 ffb9 	bl	8000ae8 <__aeabi_dcmpeq>
 800db76:	2800      	cmp	r0, #0
 800db78:	f43f aebb 	beq.w	800d8f2 <_dtoa_r+0x472>
 800db7c:	e6f0      	b.n	800d960 <_dtoa_r+0x4e0>
 800db7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db80:	2a00      	cmp	r2, #0
 800db82:	f000 80db 	beq.w	800dd3c <_dtoa_r+0x8bc>
 800db86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db88:	2a01      	cmp	r2, #1
 800db8a:	f300 80bf 	bgt.w	800dd0c <_dtoa_r+0x88c>
 800db8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db90:	2a00      	cmp	r2, #0
 800db92:	f000 80b7 	beq.w	800dd04 <_dtoa_r+0x884>
 800db96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db9c:	4646      	mov	r6, r8
 800db9e:	9a08      	ldr	r2, [sp, #32]
 800dba0:	2101      	movs	r1, #1
 800dba2:	441a      	add	r2, r3
 800dba4:	4658      	mov	r0, fp
 800dba6:	4498      	add	r8, r3
 800dba8:	9208      	str	r2, [sp, #32]
 800dbaa:	f000 fb6b 	bl	800e284 <__i2b>
 800dbae:	4605      	mov	r5, r0
 800dbb0:	b15e      	cbz	r6, 800dbca <_dtoa_r+0x74a>
 800dbb2:	9b08      	ldr	r3, [sp, #32]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	dd08      	ble.n	800dbca <_dtoa_r+0x74a>
 800dbb8:	42b3      	cmp	r3, r6
 800dbba:	9a08      	ldr	r2, [sp, #32]
 800dbbc:	bfa8      	it	ge
 800dbbe:	4633      	movge	r3, r6
 800dbc0:	eba8 0803 	sub.w	r8, r8, r3
 800dbc4:	1af6      	subs	r6, r6, r3
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	9308      	str	r3, [sp, #32]
 800dbca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbcc:	b1f3      	cbz	r3, 800dc0c <_dtoa_r+0x78c>
 800dbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80b7 	beq.w	800dd44 <_dtoa_r+0x8c4>
 800dbd6:	b18c      	cbz	r4, 800dbfc <_dtoa_r+0x77c>
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4622      	mov	r2, r4
 800dbdc:	4658      	mov	r0, fp
 800dbde:	f000 fc11 	bl	800e404 <__pow5mult>
 800dbe2:	464a      	mov	r2, r9
 800dbe4:	4601      	mov	r1, r0
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	4658      	mov	r0, fp
 800dbea:	f000 fb61 	bl	800e2b0 <__multiply>
 800dbee:	4649      	mov	r1, r9
 800dbf0:	9004      	str	r0, [sp, #16]
 800dbf2:	4658      	mov	r0, fp
 800dbf4:	f000 fa92 	bl	800e11c <_Bfree>
 800dbf8:	9b04      	ldr	r3, [sp, #16]
 800dbfa:	4699      	mov	r9, r3
 800dbfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbfe:	1b1a      	subs	r2, r3, r4
 800dc00:	d004      	beq.n	800dc0c <_dtoa_r+0x78c>
 800dc02:	4649      	mov	r1, r9
 800dc04:	4658      	mov	r0, fp
 800dc06:	f000 fbfd 	bl	800e404 <__pow5mult>
 800dc0a:	4681      	mov	r9, r0
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	4658      	mov	r0, fp
 800dc10:	f000 fb38 	bl	800e284 <__i2b>
 800dc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc16:	4604      	mov	r4, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 81cf 	beq.w	800dfbc <_dtoa_r+0xb3c>
 800dc1e:	461a      	mov	r2, r3
 800dc20:	4601      	mov	r1, r0
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 fbee 	bl	800e404 <__pow5mult>
 800dc28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	f300 8095 	bgt.w	800dd5c <_dtoa_r+0x8dc>
 800dc32:	9b02      	ldr	r3, [sp, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f040 8087 	bne.w	800dd48 <_dtoa_r+0x8c8>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f040 8089 	bne.w	800dd58 <_dtoa_r+0x8d8>
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc4c:	0d1b      	lsrs	r3, r3, #20
 800dc4e:	051b      	lsls	r3, r3, #20
 800dc50:	b12b      	cbz	r3, 800dc5e <_dtoa_r+0x7de>
 800dc52:	9b08      	ldr	r3, [sp, #32]
 800dc54:	3301      	adds	r3, #1
 800dc56:	9308      	str	r3, [sp, #32]
 800dc58:	f108 0801 	add.w	r8, r8, #1
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 81b0 	beq.w	800dfc8 <_dtoa_r+0xb48>
 800dc68:	6923      	ldr	r3, [r4, #16]
 800dc6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc6e:	6918      	ldr	r0, [r3, #16]
 800dc70:	f000 fabc 	bl	800e1ec <__hi0bits>
 800dc74:	f1c0 0020 	rsb	r0, r0, #32
 800dc78:	9b08      	ldr	r3, [sp, #32]
 800dc7a:	4418      	add	r0, r3
 800dc7c:	f010 001f 	ands.w	r0, r0, #31
 800dc80:	d077      	beq.n	800dd72 <_dtoa_r+0x8f2>
 800dc82:	f1c0 0320 	rsb	r3, r0, #32
 800dc86:	2b04      	cmp	r3, #4
 800dc88:	dd6b      	ble.n	800dd62 <_dtoa_r+0x8e2>
 800dc8a:	9b08      	ldr	r3, [sp, #32]
 800dc8c:	f1c0 001c 	rsb	r0, r0, #28
 800dc90:	4403      	add	r3, r0
 800dc92:	4480      	add	r8, r0
 800dc94:	4406      	add	r6, r0
 800dc96:	9308      	str	r3, [sp, #32]
 800dc98:	f1b8 0f00 	cmp.w	r8, #0
 800dc9c:	dd05      	ble.n	800dcaa <_dtoa_r+0x82a>
 800dc9e:	4649      	mov	r1, r9
 800dca0:	4642      	mov	r2, r8
 800dca2:	4658      	mov	r0, fp
 800dca4:	f000 fc08 	bl	800e4b8 <__lshift>
 800dca8:	4681      	mov	r9, r0
 800dcaa:	9b08      	ldr	r3, [sp, #32]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dd05      	ble.n	800dcbc <_dtoa_r+0x83c>
 800dcb0:	4621      	mov	r1, r4
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	4658      	mov	r0, fp
 800dcb6:	f000 fbff 	bl	800e4b8 <__lshift>
 800dcba:	4604      	mov	r4, r0
 800dcbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d059      	beq.n	800dd76 <_dtoa_r+0x8f6>
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4648      	mov	r0, r9
 800dcc6:	f000 fc63 	bl	800e590 <__mcmp>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	da53      	bge.n	800dd76 <_dtoa_r+0x8f6>
 800dcce:	1e7b      	subs	r3, r7, #1
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	4649      	mov	r1, r9
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	220a      	movs	r2, #10
 800dcd8:	4658      	mov	r0, fp
 800dcda:	f000 fa41 	bl	800e160 <__multadd>
 800dcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dce0:	4681      	mov	r9, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f000 8172 	beq.w	800dfcc <_dtoa_r+0xb4c>
 800dce8:	2300      	movs	r3, #0
 800dcea:	4629      	mov	r1, r5
 800dcec:	220a      	movs	r2, #10
 800dcee:	4658      	mov	r0, fp
 800dcf0:	f000 fa36 	bl	800e160 <__multadd>
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	4605      	mov	r5, r0
 800dcfa:	dc67      	bgt.n	800ddcc <_dtoa_r+0x94c>
 800dcfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	dc41      	bgt.n	800dd86 <_dtoa_r+0x906>
 800dd02:	e063      	b.n	800ddcc <_dtoa_r+0x94c>
 800dd04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd0a:	e746      	b.n	800db9a <_dtoa_r+0x71a>
 800dd0c:	9b07      	ldr	r3, [sp, #28]
 800dd0e:	1e5c      	subs	r4, r3, #1
 800dd10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	bfbf      	itttt	lt
 800dd16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd1c:	1ae3      	sublt	r3, r4, r3
 800dd1e:	bfb4      	ite	lt
 800dd20:	18d2      	addlt	r2, r2, r3
 800dd22:	1b1c      	subge	r4, r3, r4
 800dd24:	9b07      	ldr	r3, [sp, #28]
 800dd26:	bfbc      	itt	lt
 800dd28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd2a:	2400      	movlt	r4, #0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	bfb5      	itete	lt
 800dd30:	eba8 0603 	sublt.w	r6, r8, r3
 800dd34:	9b07      	ldrge	r3, [sp, #28]
 800dd36:	2300      	movlt	r3, #0
 800dd38:	4646      	movge	r6, r8
 800dd3a:	e730      	b.n	800db9e <_dtoa_r+0x71e>
 800dd3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd40:	4646      	mov	r6, r8
 800dd42:	e735      	b.n	800dbb0 <_dtoa_r+0x730>
 800dd44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd46:	e75c      	b.n	800dc02 <_dtoa_r+0x782>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e788      	b.n	800dc5e <_dtoa_r+0x7de>
 800dd4c:	3fe00000 	.word	0x3fe00000
 800dd50:	40240000 	.word	0x40240000
 800dd54:	40140000 	.word	0x40140000
 800dd58:	9b02      	ldr	r3, [sp, #8]
 800dd5a:	e780      	b.n	800dc5e <_dtoa_r+0x7de>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd60:	e782      	b.n	800dc68 <_dtoa_r+0x7e8>
 800dd62:	d099      	beq.n	800dc98 <_dtoa_r+0x818>
 800dd64:	9a08      	ldr	r2, [sp, #32]
 800dd66:	331c      	adds	r3, #28
 800dd68:	441a      	add	r2, r3
 800dd6a:	4498      	add	r8, r3
 800dd6c:	441e      	add	r6, r3
 800dd6e:	9208      	str	r2, [sp, #32]
 800dd70:	e792      	b.n	800dc98 <_dtoa_r+0x818>
 800dd72:	4603      	mov	r3, r0
 800dd74:	e7f6      	b.n	800dd64 <_dtoa_r+0x8e4>
 800dd76:	9b07      	ldr	r3, [sp, #28]
 800dd78:	9704      	str	r7, [sp, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dc20      	bgt.n	800ddc0 <_dtoa_r+0x940>
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	dd1e      	ble.n	800ddc4 <_dtoa_r+0x944>
 800dd86:	9b00      	ldr	r3, [sp, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f47f aec0 	bne.w	800db0e <_dtoa_r+0x68e>
 800dd8e:	4621      	mov	r1, r4
 800dd90:	2205      	movs	r2, #5
 800dd92:	4658      	mov	r0, fp
 800dd94:	f000 f9e4 	bl	800e160 <__multadd>
 800dd98:	4601      	mov	r1, r0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4648      	mov	r0, r9
 800dd9e:	f000 fbf7 	bl	800e590 <__mcmp>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	f77f aeb3 	ble.w	800db0e <_dtoa_r+0x68e>
 800dda8:	4656      	mov	r6, sl
 800ddaa:	2331      	movs	r3, #49	@ 0x31
 800ddac:	f806 3b01 	strb.w	r3, [r6], #1
 800ddb0:	9b04      	ldr	r3, [sp, #16]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	9304      	str	r3, [sp, #16]
 800ddb6:	e6ae      	b.n	800db16 <_dtoa_r+0x696>
 800ddb8:	9c07      	ldr	r4, [sp, #28]
 800ddba:	9704      	str	r7, [sp, #16]
 800ddbc:	4625      	mov	r5, r4
 800ddbe:	e7f3      	b.n	800dda8 <_dtoa_r+0x928>
 800ddc0:	9b07      	ldr	r3, [sp, #28]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 8104 	beq.w	800dfd4 <_dtoa_r+0xb54>
 800ddcc:	2e00      	cmp	r6, #0
 800ddce:	dd05      	ble.n	800dddc <_dtoa_r+0x95c>
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	4658      	mov	r0, fp
 800ddd6:	f000 fb6f 	bl	800e4b8 <__lshift>
 800ddda:	4605      	mov	r5, r0
 800dddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d05a      	beq.n	800de98 <_dtoa_r+0xa18>
 800dde2:	6869      	ldr	r1, [r5, #4]
 800dde4:	4658      	mov	r0, fp
 800dde6:	f000 f959 	bl	800e09c <_Balloc>
 800ddea:	4606      	mov	r6, r0
 800ddec:	b928      	cbnz	r0, 800ddfa <_dtoa_r+0x97a>
 800ddee:	4b84      	ldr	r3, [pc, #528]	@ (800e000 <_dtoa_r+0xb80>)
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ddf6:	f7ff bb5a 	b.w	800d4ae <_dtoa_r+0x2e>
 800ddfa:	692a      	ldr	r2, [r5, #16]
 800ddfc:	3202      	adds	r2, #2
 800ddfe:	0092      	lsls	r2, r2, #2
 800de00:	f105 010c 	add.w	r1, r5, #12
 800de04:	300c      	adds	r0, #12
 800de06:	f7ff fa84 	bl	800d312 <memcpy>
 800de0a:	2201      	movs	r2, #1
 800de0c:	4631      	mov	r1, r6
 800de0e:	4658      	mov	r0, fp
 800de10:	f000 fb52 	bl	800e4b8 <__lshift>
 800de14:	f10a 0301 	add.w	r3, sl, #1
 800de18:	9307      	str	r3, [sp, #28]
 800de1a:	9b00      	ldr	r3, [sp, #0]
 800de1c:	4453      	add	r3, sl
 800de1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de20:	9b02      	ldr	r3, [sp, #8]
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	462f      	mov	r7, r5
 800de28:	930a      	str	r3, [sp, #40]	@ 0x28
 800de2a:	4605      	mov	r5, r0
 800de2c:	9b07      	ldr	r3, [sp, #28]
 800de2e:	4621      	mov	r1, r4
 800de30:	3b01      	subs	r3, #1
 800de32:	4648      	mov	r0, r9
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	f7ff fa99 	bl	800d36c <quorem>
 800de3a:	4639      	mov	r1, r7
 800de3c:	9002      	str	r0, [sp, #8]
 800de3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de42:	4648      	mov	r0, r9
 800de44:	f000 fba4 	bl	800e590 <__mcmp>
 800de48:	462a      	mov	r2, r5
 800de4a:	9008      	str	r0, [sp, #32]
 800de4c:	4621      	mov	r1, r4
 800de4e:	4658      	mov	r0, fp
 800de50:	f000 fbba 	bl	800e5c8 <__mdiff>
 800de54:	68c2      	ldr	r2, [r0, #12]
 800de56:	4606      	mov	r6, r0
 800de58:	bb02      	cbnz	r2, 800de9c <_dtoa_r+0xa1c>
 800de5a:	4601      	mov	r1, r0
 800de5c:	4648      	mov	r0, r9
 800de5e:	f000 fb97 	bl	800e590 <__mcmp>
 800de62:	4602      	mov	r2, r0
 800de64:	4631      	mov	r1, r6
 800de66:	4658      	mov	r0, fp
 800de68:	920e      	str	r2, [sp, #56]	@ 0x38
 800de6a:	f000 f957 	bl	800e11c <_Bfree>
 800de6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de72:	9e07      	ldr	r6, [sp, #28]
 800de74:	ea43 0102 	orr.w	r1, r3, r2
 800de78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de7a:	4319      	orrs	r1, r3
 800de7c:	d110      	bne.n	800dea0 <_dtoa_r+0xa20>
 800de7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de82:	d029      	beq.n	800ded8 <_dtoa_r+0xa58>
 800de84:	9b08      	ldr	r3, [sp, #32]
 800de86:	2b00      	cmp	r3, #0
 800de88:	dd02      	ble.n	800de90 <_dtoa_r+0xa10>
 800de8a:	9b02      	ldr	r3, [sp, #8]
 800de8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de90:	9b00      	ldr	r3, [sp, #0]
 800de92:	f883 8000 	strb.w	r8, [r3]
 800de96:	e63f      	b.n	800db18 <_dtoa_r+0x698>
 800de98:	4628      	mov	r0, r5
 800de9a:	e7bb      	b.n	800de14 <_dtoa_r+0x994>
 800de9c:	2201      	movs	r2, #1
 800de9e:	e7e1      	b.n	800de64 <_dtoa_r+0x9e4>
 800dea0:	9b08      	ldr	r3, [sp, #32]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	db04      	blt.n	800deb0 <_dtoa_r+0xa30>
 800dea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dea8:	430b      	orrs	r3, r1
 800deaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deac:	430b      	orrs	r3, r1
 800deae:	d120      	bne.n	800def2 <_dtoa_r+0xa72>
 800deb0:	2a00      	cmp	r2, #0
 800deb2:	dded      	ble.n	800de90 <_dtoa_r+0xa10>
 800deb4:	4649      	mov	r1, r9
 800deb6:	2201      	movs	r2, #1
 800deb8:	4658      	mov	r0, fp
 800deba:	f000 fafd 	bl	800e4b8 <__lshift>
 800debe:	4621      	mov	r1, r4
 800dec0:	4681      	mov	r9, r0
 800dec2:	f000 fb65 	bl	800e590 <__mcmp>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	dc03      	bgt.n	800ded2 <_dtoa_r+0xa52>
 800deca:	d1e1      	bne.n	800de90 <_dtoa_r+0xa10>
 800decc:	f018 0f01 	tst.w	r8, #1
 800ded0:	d0de      	beq.n	800de90 <_dtoa_r+0xa10>
 800ded2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ded6:	d1d8      	bne.n	800de8a <_dtoa_r+0xa0a>
 800ded8:	9a00      	ldr	r2, [sp, #0]
 800deda:	2339      	movs	r3, #57	@ 0x39
 800dedc:	7013      	strb	r3, [r2, #0]
 800dede:	4633      	mov	r3, r6
 800dee0:	461e      	mov	r6, r3
 800dee2:	3b01      	subs	r3, #1
 800dee4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dee8:	2a39      	cmp	r2, #57	@ 0x39
 800deea:	d052      	beq.n	800df92 <_dtoa_r+0xb12>
 800deec:	3201      	adds	r2, #1
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e612      	b.n	800db18 <_dtoa_r+0x698>
 800def2:	2a00      	cmp	r2, #0
 800def4:	dd07      	ble.n	800df06 <_dtoa_r+0xa86>
 800def6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800defa:	d0ed      	beq.n	800ded8 <_dtoa_r+0xa58>
 800defc:	9a00      	ldr	r2, [sp, #0]
 800defe:	f108 0301 	add.w	r3, r8, #1
 800df02:	7013      	strb	r3, [r2, #0]
 800df04:	e608      	b.n	800db18 <_dtoa_r+0x698>
 800df06:	9b07      	ldr	r3, [sp, #28]
 800df08:	9a07      	ldr	r2, [sp, #28]
 800df0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df10:	4293      	cmp	r3, r2
 800df12:	d028      	beq.n	800df66 <_dtoa_r+0xae6>
 800df14:	4649      	mov	r1, r9
 800df16:	2300      	movs	r3, #0
 800df18:	220a      	movs	r2, #10
 800df1a:	4658      	mov	r0, fp
 800df1c:	f000 f920 	bl	800e160 <__multadd>
 800df20:	42af      	cmp	r7, r5
 800df22:	4681      	mov	r9, r0
 800df24:	f04f 0300 	mov.w	r3, #0
 800df28:	f04f 020a 	mov.w	r2, #10
 800df2c:	4639      	mov	r1, r7
 800df2e:	4658      	mov	r0, fp
 800df30:	d107      	bne.n	800df42 <_dtoa_r+0xac2>
 800df32:	f000 f915 	bl	800e160 <__multadd>
 800df36:	4607      	mov	r7, r0
 800df38:	4605      	mov	r5, r0
 800df3a:	9b07      	ldr	r3, [sp, #28]
 800df3c:	3301      	adds	r3, #1
 800df3e:	9307      	str	r3, [sp, #28]
 800df40:	e774      	b.n	800de2c <_dtoa_r+0x9ac>
 800df42:	f000 f90d 	bl	800e160 <__multadd>
 800df46:	4629      	mov	r1, r5
 800df48:	4607      	mov	r7, r0
 800df4a:	2300      	movs	r3, #0
 800df4c:	220a      	movs	r2, #10
 800df4e:	4658      	mov	r0, fp
 800df50:	f000 f906 	bl	800e160 <__multadd>
 800df54:	4605      	mov	r5, r0
 800df56:	e7f0      	b.n	800df3a <_dtoa_r+0xaba>
 800df58:	9b00      	ldr	r3, [sp, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	bfcc      	ite	gt
 800df5e:	461e      	movgt	r6, r3
 800df60:	2601      	movle	r6, #1
 800df62:	4456      	add	r6, sl
 800df64:	2700      	movs	r7, #0
 800df66:	4649      	mov	r1, r9
 800df68:	2201      	movs	r2, #1
 800df6a:	4658      	mov	r0, fp
 800df6c:	f000 faa4 	bl	800e4b8 <__lshift>
 800df70:	4621      	mov	r1, r4
 800df72:	4681      	mov	r9, r0
 800df74:	f000 fb0c 	bl	800e590 <__mcmp>
 800df78:	2800      	cmp	r0, #0
 800df7a:	dcb0      	bgt.n	800dede <_dtoa_r+0xa5e>
 800df7c:	d102      	bne.n	800df84 <_dtoa_r+0xb04>
 800df7e:	f018 0f01 	tst.w	r8, #1
 800df82:	d1ac      	bne.n	800dede <_dtoa_r+0xa5e>
 800df84:	4633      	mov	r3, r6
 800df86:	461e      	mov	r6, r3
 800df88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df8c:	2a30      	cmp	r2, #48	@ 0x30
 800df8e:	d0fa      	beq.n	800df86 <_dtoa_r+0xb06>
 800df90:	e5c2      	b.n	800db18 <_dtoa_r+0x698>
 800df92:	459a      	cmp	sl, r3
 800df94:	d1a4      	bne.n	800dee0 <_dtoa_r+0xa60>
 800df96:	9b04      	ldr	r3, [sp, #16]
 800df98:	3301      	adds	r3, #1
 800df9a:	9304      	str	r3, [sp, #16]
 800df9c:	2331      	movs	r3, #49	@ 0x31
 800df9e:	f88a 3000 	strb.w	r3, [sl]
 800dfa2:	e5b9      	b.n	800db18 <_dtoa_r+0x698>
 800dfa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e004 <_dtoa_r+0xb84>
 800dfaa:	b11b      	cbz	r3, 800dfb4 <_dtoa_r+0xb34>
 800dfac:	f10a 0308 	add.w	r3, sl, #8
 800dfb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	4650      	mov	r0, sl
 800dfb6:	b019      	add	sp, #100	@ 0x64
 800dfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	f77f ae37 	ble.w	800dc32 <_dtoa_r+0x7b2>
 800dfc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfc8:	2001      	movs	r0, #1
 800dfca:	e655      	b.n	800dc78 <_dtoa_r+0x7f8>
 800dfcc:	9b00      	ldr	r3, [sp, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f77f aed6 	ble.w	800dd80 <_dtoa_r+0x900>
 800dfd4:	4656      	mov	r6, sl
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4648      	mov	r0, r9
 800dfda:	f7ff f9c7 	bl	800d36c <quorem>
 800dfde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfe2:	f806 8b01 	strb.w	r8, [r6], #1
 800dfe6:	9b00      	ldr	r3, [sp, #0]
 800dfe8:	eba6 020a 	sub.w	r2, r6, sl
 800dfec:	4293      	cmp	r3, r2
 800dfee:	ddb3      	ble.n	800df58 <_dtoa_r+0xad8>
 800dff0:	4649      	mov	r1, r9
 800dff2:	2300      	movs	r3, #0
 800dff4:	220a      	movs	r2, #10
 800dff6:	4658      	mov	r0, fp
 800dff8:	f000 f8b2 	bl	800e160 <__multadd>
 800dffc:	4681      	mov	r9, r0
 800dffe:	e7ea      	b.n	800dfd6 <_dtoa_r+0xb56>
 800e000:	0800f8cf 	.word	0x0800f8cf
 800e004:	0800f86a 	.word	0x0800f86a

0800e008 <_free_r>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	4605      	mov	r5, r0
 800e00c:	2900      	cmp	r1, #0
 800e00e:	d041      	beq.n	800e094 <_free_r+0x8c>
 800e010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e014:	1f0c      	subs	r4, r1, #4
 800e016:	2b00      	cmp	r3, #0
 800e018:	bfb8      	it	lt
 800e01a:	18e4      	addlt	r4, r4, r3
 800e01c:	f7fe fa2a 	bl	800c474 <__malloc_lock>
 800e020:	4a1d      	ldr	r2, [pc, #116]	@ (800e098 <_free_r+0x90>)
 800e022:	6813      	ldr	r3, [r2, #0]
 800e024:	b933      	cbnz	r3, 800e034 <_free_r+0x2c>
 800e026:	6063      	str	r3, [r4, #4]
 800e028:	6014      	str	r4, [r2, #0]
 800e02a:	4628      	mov	r0, r5
 800e02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e030:	f7fe ba26 	b.w	800c480 <__malloc_unlock>
 800e034:	42a3      	cmp	r3, r4
 800e036:	d908      	bls.n	800e04a <_free_r+0x42>
 800e038:	6820      	ldr	r0, [r4, #0]
 800e03a:	1821      	adds	r1, r4, r0
 800e03c:	428b      	cmp	r3, r1
 800e03e:	bf01      	itttt	eq
 800e040:	6819      	ldreq	r1, [r3, #0]
 800e042:	685b      	ldreq	r3, [r3, #4]
 800e044:	1809      	addeq	r1, r1, r0
 800e046:	6021      	streq	r1, [r4, #0]
 800e048:	e7ed      	b.n	800e026 <_free_r+0x1e>
 800e04a:	461a      	mov	r2, r3
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	b10b      	cbz	r3, 800e054 <_free_r+0x4c>
 800e050:	42a3      	cmp	r3, r4
 800e052:	d9fa      	bls.n	800e04a <_free_r+0x42>
 800e054:	6811      	ldr	r1, [r2, #0]
 800e056:	1850      	adds	r0, r2, r1
 800e058:	42a0      	cmp	r0, r4
 800e05a:	d10b      	bne.n	800e074 <_free_r+0x6c>
 800e05c:	6820      	ldr	r0, [r4, #0]
 800e05e:	4401      	add	r1, r0
 800e060:	1850      	adds	r0, r2, r1
 800e062:	4283      	cmp	r3, r0
 800e064:	6011      	str	r1, [r2, #0]
 800e066:	d1e0      	bne.n	800e02a <_free_r+0x22>
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	6053      	str	r3, [r2, #4]
 800e06e:	4408      	add	r0, r1
 800e070:	6010      	str	r0, [r2, #0]
 800e072:	e7da      	b.n	800e02a <_free_r+0x22>
 800e074:	d902      	bls.n	800e07c <_free_r+0x74>
 800e076:	230c      	movs	r3, #12
 800e078:	602b      	str	r3, [r5, #0]
 800e07a:	e7d6      	b.n	800e02a <_free_r+0x22>
 800e07c:	6820      	ldr	r0, [r4, #0]
 800e07e:	1821      	adds	r1, r4, r0
 800e080:	428b      	cmp	r3, r1
 800e082:	bf04      	itt	eq
 800e084:	6819      	ldreq	r1, [r3, #0]
 800e086:	685b      	ldreq	r3, [r3, #4]
 800e088:	6063      	str	r3, [r4, #4]
 800e08a:	bf04      	itt	eq
 800e08c:	1809      	addeq	r1, r1, r0
 800e08e:	6021      	streq	r1, [r4, #0]
 800e090:	6054      	str	r4, [r2, #4]
 800e092:	e7ca      	b.n	800e02a <_free_r+0x22>
 800e094:	bd38      	pop	{r3, r4, r5, pc}
 800e096:	bf00      	nop
 800e098:	20003438 	.word	0x20003438

0800e09c <_Balloc>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	69c6      	ldr	r6, [r0, #28]
 800e0a0:	4604      	mov	r4, r0
 800e0a2:	460d      	mov	r5, r1
 800e0a4:	b976      	cbnz	r6, 800e0c4 <_Balloc+0x28>
 800e0a6:	2010      	movs	r0, #16
 800e0a8:	f7fe f93a 	bl	800c320 <malloc>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	61e0      	str	r0, [r4, #28]
 800e0b0:	b920      	cbnz	r0, 800e0bc <_Balloc+0x20>
 800e0b2:	4b18      	ldr	r3, [pc, #96]	@ (800e114 <_Balloc+0x78>)
 800e0b4:	4818      	ldr	r0, [pc, #96]	@ (800e118 <_Balloc+0x7c>)
 800e0b6:	216b      	movs	r1, #107	@ 0x6b
 800e0b8:	f7ff f93a 	bl	800d330 <__assert_func>
 800e0bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c0:	6006      	str	r6, [r0, #0]
 800e0c2:	60c6      	str	r6, [r0, #12]
 800e0c4:	69e6      	ldr	r6, [r4, #28]
 800e0c6:	68f3      	ldr	r3, [r6, #12]
 800e0c8:	b183      	cbz	r3, 800e0ec <_Balloc+0x50>
 800e0ca:	69e3      	ldr	r3, [r4, #28]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0d2:	b9b8      	cbnz	r0, 800e104 <_Balloc+0x68>
 800e0d4:	2101      	movs	r1, #1
 800e0d6:	fa01 f605 	lsl.w	r6, r1, r5
 800e0da:	1d72      	adds	r2, r6, #5
 800e0dc:	0092      	lsls	r2, r2, #2
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f7fe f90a 	bl	800c2f8 <_calloc_r>
 800e0e4:	b160      	cbz	r0, 800e100 <_Balloc+0x64>
 800e0e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0ea:	e00e      	b.n	800e10a <_Balloc+0x6e>
 800e0ec:	2221      	movs	r2, #33	@ 0x21
 800e0ee:	2104      	movs	r1, #4
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7fe f901 	bl	800c2f8 <_calloc_r>
 800e0f6:	69e3      	ldr	r3, [r4, #28]
 800e0f8:	60f0      	str	r0, [r6, #12]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d1e4      	bne.n	800e0ca <_Balloc+0x2e>
 800e100:	2000      	movs	r0, #0
 800e102:	bd70      	pop	{r4, r5, r6, pc}
 800e104:	6802      	ldr	r2, [r0, #0]
 800e106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e10a:	2300      	movs	r3, #0
 800e10c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e110:	e7f7      	b.n	800e102 <_Balloc+0x66>
 800e112:	bf00      	nop
 800e114:	0800f7bd 	.word	0x0800f7bd
 800e118:	0800f8e0 	.word	0x0800f8e0

0800e11c <_Bfree>:
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	69c6      	ldr	r6, [r0, #28]
 800e120:	4605      	mov	r5, r0
 800e122:	460c      	mov	r4, r1
 800e124:	b976      	cbnz	r6, 800e144 <_Bfree+0x28>
 800e126:	2010      	movs	r0, #16
 800e128:	f7fe f8fa 	bl	800c320 <malloc>
 800e12c:	4602      	mov	r2, r0
 800e12e:	61e8      	str	r0, [r5, #28]
 800e130:	b920      	cbnz	r0, 800e13c <_Bfree+0x20>
 800e132:	4b09      	ldr	r3, [pc, #36]	@ (800e158 <_Bfree+0x3c>)
 800e134:	4809      	ldr	r0, [pc, #36]	@ (800e15c <_Bfree+0x40>)
 800e136:	218f      	movs	r1, #143	@ 0x8f
 800e138:	f7ff f8fa 	bl	800d330 <__assert_func>
 800e13c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e140:	6006      	str	r6, [r0, #0]
 800e142:	60c6      	str	r6, [r0, #12]
 800e144:	b13c      	cbz	r4, 800e156 <_Bfree+0x3a>
 800e146:	69eb      	ldr	r3, [r5, #28]
 800e148:	6862      	ldr	r2, [r4, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e150:	6021      	str	r1, [r4, #0]
 800e152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	0800f7bd 	.word	0x0800f7bd
 800e15c:	0800f8e0 	.word	0x0800f8e0

0800e160 <__multadd>:
 800e160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e164:	690d      	ldr	r5, [r1, #16]
 800e166:	4607      	mov	r7, r0
 800e168:	460c      	mov	r4, r1
 800e16a:	461e      	mov	r6, r3
 800e16c:	f101 0c14 	add.w	ip, r1, #20
 800e170:	2000      	movs	r0, #0
 800e172:	f8dc 3000 	ldr.w	r3, [ip]
 800e176:	b299      	uxth	r1, r3
 800e178:	fb02 6101 	mla	r1, r2, r1, r6
 800e17c:	0c1e      	lsrs	r6, r3, #16
 800e17e:	0c0b      	lsrs	r3, r1, #16
 800e180:	fb02 3306 	mla	r3, r2, r6, r3
 800e184:	b289      	uxth	r1, r1
 800e186:	3001      	adds	r0, #1
 800e188:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e18c:	4285      	cmp	r5, r0
 800e18e:	f84c 1b04 	str.w	r1, [ip], #4
 800e192:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e196:	dcec      	bgt.n	800e172 <__multadd+0x12>
 800e198:	b30e      	cbz	r6, 800e1de <__multadd+0x7e>
 800e19a:	68a3      	ldr	r3, [r4, #8]
 800e19c:	42ab      	cmp	r3, r5
 800e19e:	dc19      	bgt.n	800e1d4 <__multadd+0x74>
 800e1a0:	6861      	ldr	r1, [r4, #4]
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	3101      	adds	r1, #1
 800e1a6:	f7ff ff79 	bl	800e09c <_Balloc>
 800e1aa:	4680      	mov	r8, r0
 800e1ac:	b928      	cbnz	r0, 800e1ba <__multadd+0x5a>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e1e4 <__multadd+0x84>)
 800e1b2:	480d      	ldr	r0, [pc, #52]	@ (800e1e8 <__multadd+0x88>)
 800e1b4:	21ba      	movs	r1, #186	@ 0xba
 800e1b6:	f7ff f8bb 	bl	800d330 <__assert_func>
 800e1ba:	6922      	ldr	r2, [r4, #16]
 800e1bc:	3202      	adds	r2, #2
 800e1be:	f104 010c 	add.w	r1, r4, #12
 800e1c2:	0092      	lsls	r2, r2, #2
 800e1c4:	300c      	adds	r0, #12
 800e1c6:	f7ff f8a4 	bl	800d312 <memcpy>
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4638      	mov	r0, r7
 800e1ce:	f7ff ffa5 	bl	800e11c <_Bfree>
 800e1d2:	4644      	mov	r4, r8
 800e1d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1d8:	3501      	adds	r5, #1
 800e1da:	615e      	str	r6, [r3, #20]
 800e1dc:	6125      	str	r5, [r4, #16]
 800e1de:	4620      	mov	r0, r4
 800e1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1e4:	0800f8cf 	.word	0x0800f8cf
 800e1e8:	0800f8e0 	.word	0x0800f8e0

0800e1ec <__hi0bits>:
 800e1ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	bf36      	itet	cc
 800e1f4:	0403      	lslcc	r3, r0, #16
 800e1f6:	2000      	movcs	r0, #0
 800e1f8:	2010      	movcc	r0, #16
 800e1fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e1fe:	bf3c      	itt	cc
 800e200:	021b      	lslcc	r3, r3, #8
 800e202:	3008      	addcc	r0, #8
 800e204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e208:	bf3c      	itt	cc
 800e20a:	011b      	lslcc	r3, r3, #4
 800e20c:	3004      	addcc	r0, #4
 800e20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e212:	bf3c      	itt	cc
 800e214:	009b      	lslcc	r3, r3, #2
 800e216:	3002      	addcc	r0, #2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	db05      	blt.n	800e228 <__hi0bits+0x3c>
 800e21c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e220:	f100 0001 	add.w	r0, r0, #1
 800e224:	bf08      	it	eq
 800e226:	2020      	moveq	r0, #32
 800e228:	4770      	bx	lr

0800e22a <__lo0bits>:
 800e22a:	6803      	ldr	r3, [r0, #0]
 800e22c:	4602      	mov	r2, r0
 800e22e:	f013 0007 	ands.w	r0, r3, #7
 800e232:	d00b      	beq.n	800e24c <__lo0bits+0x22>
 800e234:	07d9      	lsls	r1, r3, #31
 800e236:	d421      	bmi.n	800e27c <__lo0bits+0x52>
 800e238:	0798      	lsls	r0, r3, #30
 800e23a:	bf49      	itett	mi
 800e23c:	085b      	lsrmi	r3, r3, #1
 800e23e:	089b      	lsrpl	r3, r3, #2
 800e240:	2001      	movmi	r0, #1
 800e242:	6013      	strmi	r3, [r2, #0]
 800e244:	bf5c      	itt	pl
 800e246:	6013      	strpl	r3, [r2, #0]
 800e248:	2002      	movpl	r0, #2
 800e24a:	4770      	bx	lr
 800e24c:	b299      	uxth	r1, r3
 800e24e:	b909      	cbnz	r1, 800e254 <__lo0bits+0x2a>
 800e250:	0c1b      	lsrs	r3, r3, #16
 800e252:	2010      	movs	r0, #16
 800e254:	b2d9      	uxtb	r1, r3
 800e256:	b909      	cbnz	r1, 800e25c <__lo0bits+0x32>
 800e258:	3008      	adds	r0, #8
 800e25a:	0a1b      	lsrs	r3, r3, #8
 800e25c:	0719      	lsls	r1, r3, #28
 800e25e:	bf04      	itt	eq
 800e260:	091b      	lsreq	r3, r3, #4
 800e262:	3004      	addeq	r0, #4
 800e264:	0799      	lsls	r1, r3, #30
 800e266:	bf04      	itt	eq
 800e268:	089b      	lsreq	r3, r3, #2
 800e26a:	3002      	addeq	r0, #2
 800e26c:	07d9      	lsls	r1, r3, #31
 800e26e:	d403      	bmi.n	800e278 <__lo0bits+0x4e>
 800e270:	085b      	lsrs	r3, r3, #1
 800e272:	f100 0001 	add.w	r0, r0, #1
 800e276:	d003      	beq.n	800e280 <__lo0bits+0x56>
 800e278:	6013      	str	r3, [r2, #0]
 800e27a:	4770      	bx	lr
 800e27c:	2000      	movs	r0, #0
 800e27e:	4770      	bx	lr
 800e280:	2020      	movs	r0, #32
 800e282:	4770      	bx	lr

0800e284 <__i2b>:
 800e284:	b510      	push	{r4, lr}
 800e286:	460c      	mov	r4, r1
 800e288:	2101      	movs	r1, #1
 800e28a:	f7ff ff07 	bl	800e09c <_Balloc>
 800e28e:	4602      	mov	r2, r0
 800e290:	b928      	cbnz	r0, 800e29e <__i2b+0x1a>
 800e292:	4b05      	ldr	r3, [pc, #20]	@ (800e2a8 <__i2b+0x24>)
 800e294:	4805      	ldr	r0, [pc, #20]	@ (800e2ac <__i2b+0x28>)
 800e296:	f240 1145 	movw	r1, #325	@ 0x145
 800e29a:	f7ff f849 	bl	800d330 <__assert_func>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	6144      	str	r4, [r0, #20]
 800e2a2:	6103      	str	r3, [r0, #16]
 800e2a4:	bd10      	pop	{r4, pc}
 800e2a6:	bf00      	nop
 800e2a8:	0800f8cf 	.word	0x0800f8cf
 800e2ac:	0800f8e0 	.word	0x0800f8e0

0800e2b0 <__multiply>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	4614      	mov	r4, r2
 800e2b6:	690a      	ldr	r2, [r1, #16]
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	bfa8      	it	ge
 800e2be:	4623      	movge	r3, r4
 800e2c0:	460f      	mov	r7, r1
 800e2c2:	bfa4      	itt	ge
 800e2c4:	460c      	movge	r4, r1
 800e2c6:	461f      	movge	r7, r3
 800e2c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e2cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e2d0:	68a3      	ldr	r3, [r4, #8]
 800e2d2:	6861      	ldr	r1, [r4, #4]
 800e2d4:	eb0a 0609 	add.w	r6, sl, r9
 800e2d8:	42b3      	cmp	r3, r6
 800e2da:	b085      	sub	sp, #20
 800e2dc:	bfb8      	it	lt
 800e2de:	3101      	addlt	r1, #1
 800e2e0:	f7ff fedc 	bl	800e09c <_Balloc>
 800e2e4:	b930      	cbnz	r0, 800e2f4 <__multiply+0x44>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	4b44      	ldr	r3, [pc, #272]	@ (800e3fc <__multiply+0x14c>)
 800e2ea:	4845      	ldr	r0, [pc, #276]	@ (800e400 <__multiply+0x150>)
 800e2ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e2f0:	f7ff f81e 	bl	800d330 <__assert_func>
 800e2f4:	f100 0514 	add.w	r5, r0, #20
 800e2f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	2200      	movs	r2, #0
 800e300:	4543      	cmp	r3, r8
 800e302:	d321      	bcc.n	800e348 <__multiply+0x98>
 800e304:	f107 0114 	add.w	r1, r7, #20
 800e308:	f104 0214 	add.w	r2, r4, #20
 800e30c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e310:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e314:	9302      	str	r3, [sp, #8]
 800e316:	1b13      	subs	r3, r2, r4
 800e318:	3b15      	subs	r3, #21
 800e31a:	f023 0303 	bic.w	r3, r3, #3
 800e31e:	3304      	adds	r3, #4
 800e320:	f104 0715 	add.w	r7, r4, #21
 800e324:	42ba      	cmp	r2, r7
 800e326:	bf38      	it	cc
 800e328:	2304      	movcc	r3, #4
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	9b02      	ldr	r3, [sp, #8]
 800e32e:	9103      	str	r1, [sp, #12]
 800e330:	428b      	cmp	r3, r1
 800e332:	d80c      	bhi.n	800e34e <__multiply+0x9e>
 800e334:	2e00      	cmp	r6, #0
 800e336:	dd03      	ble.n	800e340 <__multiply+0x90>
 800e338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d05b      	beq.n	800e3f8 <__multiply+0x148>
 800e340:	6106      	str	r6, [r0, #16]
 800e342:	b005      	add	sp, #20
 800e344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e348:	f843 2b04 	str.w	r2, [r3], #4
 800e34c:	e7d8      	b.n	800e300 <__multiply+0x50>
 800e34e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e352:	f1ba 0f00 	cmp.w	sl, #0
 800e356:	d024      	beq.n	800e3a2 <__multiply+0xf2>
 800e358:	f104 0e14 	add.w	lr, r4, #20
 800e35c:	46a9      	mov	r9, r5
 800e35e:	f04f 0c00 	mov.w	ip, #0
 800e362:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e366:	f8d9 3000 	ldr.w	r3, [r9]
 800e36a:	fa1f fb87 	uxth.w	fp, r7
 800e36e:	b29b      	uxth	r3, r3
 800e370:	fb0a 330b 	mla	r3, sl, fp, r3
 800e374:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e378:	f8d9 7000 	ldr.w	r7, [r9]
 800e37c:	4463      	add	r3, ip
 800e37e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e382:	fb0a c70b 	mla	r7, sl, fp, ip
 800e386:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e390:	4572      	cmp	r2, lr
 800e392:	f849 3b04 	str.w	r3, [r9], #4
 800e396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e39a:	d8e2      	bhi.n	800e362 <__multiply+0xb2>
 800e39c:	9b01      	ldr	r3, [sp, #4]
 800e39e:	f845 c003 	str.w	ip, [r5, r3]
 800e3a2:	9b03      	ldr	r3, [sp, #12]
 800e3a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3a8:	3104      	adds	r1, #4
 800e3aa:	f1b9 0f00 	cmp.w	r9, #0
 800e3ae:	d021      	beq.n	800e3f4 <__multiply+0x144>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	f104 0c14 	add.w	ip, r4, #20
 800e3b6:	46ae      	mov	lr, r5
 800e3b8:	f04f 0a00 	mov.w	sl, #0
 800e3bc:	f8bc b000 	ldrh.w	fp, [ip]
 800e3c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e3c4:	fb09 770b 	mla	r7, r9, fp, r7
 800e3c8:	4457      	add	r7, sl
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3d0:	f84e 3b04 	str.w	r3, [lr], #4
 800e3d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3dc:	f8be 3000 	ldrh.w	r3, [lr]
 800e3e0:	fb09 330a 	mla	r3, r9, sl, r3
 800e3e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e3e8:	4562      	cmp	r2, ip
 800e3ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3ee:	d8e5      	bhi.n	800e3bc <__multiply+0x10c>
 800e3f0:	9f01      	ldr	r7, [sp, #4]
 800e3f2:	51eb      	str	r3, [r5, r7]
 800e3f4:	3504      	adds	r5, #4
 800e3f6:	e799      	b.n	800e32c <__multiply+0x7c>
 800e3f8:	3e01      	subs	r6, #1
 800e3fa:	e79b      	b.n	800e334 <__multiply+0x84>
 800e3fc:	0800f8cf 	.word	0x0800f8cf
 800e400:	0800f8e0 	.word	0x0800f8e0

0800e404 <__pow5mult>:
 800e404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e408:	4615      	mov	r5, r2
 800e40a:	f012 0203 	ands.w	r2, r2, #3
 800e40e:	4607      	mov	r7, r0
 800e410:	460e      	mov	r6, r1
 800e412:	d007      	beq.n	800e424 <__pow5mult+0x20>
 800e414:	4c25      	ldr	r4, [pc, #148]	@ (800e4ac <__pow5mult+0xa8>)
 800e416:	3a01      	subs	r2, #1
 800e418:	2300      	movs	r3, #0
 800e41a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e41e:	f7ff fe9f 	bl	800e160 <__multadd>
 800e422:	4606      	mov	r6, r0
 800e424:	10ad      	asrs	r5, r5, #2
 800e426:	d03d      	beq.n	800e4a4 <__pow5mult+0xa0>
 800e428:	69fc      	ldr	r4, [r7, #28]
 800e42a:	b97c      	cbnz	r4, 800e44c <__pow5mult+0x48>
 800e42c:	2010      	movs	r0, #16
 800e42e:	f7fd ff77 	bl	800c320 <malloc>
 800e432:	4602      	mov	r2, r0
 800e434:	61f8      	str	r0, [r7, #28]
 800e436:	b928      	cbnz	r0, 800e444 <__pow5mult+0x40>
 800e438:	4b1d      	ldr	r3, [pc, #116]	@ (800e4b0 <__pow5mult+0xac>)
 800e43a:	481e      	ldr	r0, [pc, #120]	@ (800e4b4 <__pow5mult+0xb0>)
 800e43c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e440:	f7fe ff76 	bl	800d330 <__assert_func>
 800e444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e448:	6004      	str	r4, [r0, #0]
 800e44a:	60c4      	str	r4, [r0, #12]
 800e44c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e454:	b94c      	cbnz	r4, 800e46a <__pow5mult+0x66>
 800e456:	f240 2171 	movw	r1, #625	@ 0x271
 800e45a:	4638      	mov	r0, r7
 800e45c:	f7ff ff12 	bl	800e284 <__i2b>
 800e460:	2300      	movs	r3, #0
 800e462:	f8c8 0008 	str.w	r0, [r8, #8]
 800e466:	4604      	mov	r4, r0
 800e468:	6003      	str	r3, [r0, #0]
 800e46a:	f04f 0900 	mov.w	r9, #0
 800e46e:	07eb      	lsls	r3, r5, #31
 800e470:	d50a      	bpl.n	800e488 <__pow5mult+0x84>
 800e472:	4631      	mov	r1, r6
 800e474:	4622      	mov	r2, r4
 800e476:	4638      	mov	r0, r7
 800e478:	f7ff ff1a 	bl	800e2b0 <__multiply>
 800e47c:	4631      	mov	r1, r6
 800e47e:	4680      	mov	r8, r0
 800e480:	4638      	mov	r0, r7
 800e482:	f7ff fe4b 	bl	800e11c <_Bfree>
 800e486:	4646      	mov	r6, r8
 800e488:	106d      	asrs	r5, r5, #1
 800e48a:	d00b      	beq.n	800e4a4 <__pow5mult+0xa0>
 800e48c:	6820      	ldr	r0, [r4, #0]
 800e48e:	b938      	cbnz	r0, 800e4a0 <__pow5mult+0x9c>
 800e490:	4622      	mov	r2, r4
 800e492:	4621      	mov	r1, r4
 800e494:	4638      	mov	r0, r7
 800e496:	f7ff ff0b 	bl	800e2b0 <__multiply>
 800e49a:	6020      	str	r0, [r4, #0]
 800e49c:	f8c0 9000 	str.w	r9, [r0]
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	e7e4      	b.n	800e46e <__pow5mult+0x6a>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4aa:	bf00      	nop
 800e4ac:	0800f93c 	.word	0x0800f93c
 800e4b0:	0800f7bd 	.word	0x0800f7bd
 800e4b4:	0800f8e0 	.word	0x0800f8e0

0800e4b8 <__lshift>:
 800e4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4bc:	460c      	mov	r4, r1
 800e4be:	6849      	ldr	r1, [r1, #4]
 800e4c0:	6923      	ldr	r3, [r4, #16]
 800e4c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4c6:	68a3      	ldr	r3, [r4, #8]
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	4691      	mov	r9, r2
 800e4cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4d0:	f108 0601 	add.w	r6, r8, #1
 800e4d4:	42b3      	cmp	r3, r6
 800e4d6:	db0b      	blt.n	800e4f0 <__lshift+0x38>
 800e4d8:	4638      	mov	r0, r7
 800e4da:	f7ff fddf 	bl	800e09c <_Balloc>
 800e4de:	4605      	mov	r5, r0
 800e4e0:	b948      	cbnz	r0, 800e4f6 <__lshift+0x3e>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4b28      	ldr	r3, [pc, #160]	@ (800e588 <__lshift+0xd0>)
 800e4e6:	4829      	ldr	r0, [pc, #164]	@ (800e58c <__lshift+0xd4>)
 800e4e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e4ec:	f7fe ff20 	bl	800d330 <__assert_func>
 800e4f0:	3101      	adds	r1, #1
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	e7ee      	b.n	800e4d4 <__lshift+0x1c>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	f100 0114 	add.w	r1, r0, #20
 800e4fc:	f100 0210 	add.w	r2, r0, #16
 800e500:	4618      	mov	r0, r3
 800e502:	4553      	cmp	r3, sl
 800e504:	db33      	blt.n	800e56e <__lshift+0xb6>
 800e506:	6920      	ldr	r0, [r4, #16]
 800e508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e50c:	f104 0314 	add.w	r3, r4, #20
 800e510:	f019 091f 	ands.w	r9, r9, #31
 800e514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e51c:	d02b      	beq.n	800e576 <__lshift+0xbe>
 800e51e:	f1c9 0e20 	rsb	lr, r9, #32
 800e522:	468a      	mov	sl, r1
 800e524:	2200      	movs	r2, #0
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	fa00 f009 	lsl.w	r0, r0, r9
 800e52c:	4310      	orrs	r0, r2
 800e52e:	f84a 0b04 	str.w	r0, [sl], #4
 800e532:	f853 2b04 	ldr.w	r2, [r3], #4
 800e536:	459c      	cmp	ip, r3
 800e538:	fa22 f20e 	lsr.w	r2, r2, lr
 800e53c:	d8f3      	bhi.n	800e526 <__lshift+0x6e>
 800e53e:	ebac 0304 	sub.w	r3, ip, r4
 800e542:	3b15      	subs	r3, #21
 800e544:	f023 0303 	bic.w	r3, r3, #3
 800e548:	3304      	adds	r3, #4
 800e54a:	f104 0015 	add.w	r0, r4, #21
 800e54e:	4584      	cmp	ip, r0
 800e550:	bf38      	it	cc
 800e552:	2304      	movcc	r3, #4
 800e554:	50ca      	str	r2, [r1, r3]
 800e556:	b10a      	cbz	r2, 800e55c <__lshift+0xa4>
 800e558:	f108 0602 	add.w	r6, r8, #2
 800e55c:	3e01      	subs	r6, #1
 800e55e:	4638      	mov	r0, r7
 800e560:	612e      	str	r6, [r5, #16]
 800e562:	4621      	mov	r1, r4
 800e564:	f7ff fdda 	bl	800e11c <_Bfree>
 800e568:	4628      	mov	r0, r5
 800e56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e572:	3301      	adds	r3, #1
 800e574:	e7c5      	b.n	800e502 <__lshift+0x4a>
 800e576:	3904      	subs	r1, #4
 800e578:	f853 2b04 	ldr.w	r2, [r3], #4
 800e57c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e580:	459c      	cmp	ip, r3
 800e582:	d8f9      	bhi.n	800e578 <__lshift+0xc0>
 800e584:	e7ea      	b.n	800e55c <__lshift+0xa4>
 800e586:	bf00      	nop
 800e588:	0800f8cf 	.word	0x0800f8cf
 800e58c:	0800f8e0 	.word	0x0800f8e0

0800e590 <__mcmp>:
 800e590:	690a      	ldr	r2, [r1, #16]
 800e592:	4603      	mov	r3, r0
 800e594:	6900      	ldr	r0, [r0, #16]
 800e596:	1a80      	subs	r0, r0, r2
 800e598:	b530      	push	{r4, r5, lr}
 800e59a:	d10e      	bne.n	800e5ba <__mcmp+0x2a>
 800e59c:	3314      	adds	r3, #20
 800e59e:	3114      	adds	r1, #20
 800e5a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5b0:	4295      	cmp	r5, r2
 800e5b2:	d003      	beq.n	800e5bc <__mcmp+0x2c>
 800e5b4:	d205      	bcs.n	800e5c2 <__mcmp+0x32>
 800e5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ba:	bd30      	pop	{r4, r5, pc}
 800e5bc:	42a3      	cmp	r3, r4
 800e5be:	d3f3      	bcc.n	800e5a8 <__mcmp+0x18>
 800e5c0:	e7fb      	b.n	800e5ba <__mcmp+0x2a>
 800e5c2:	2001      	movs	r0, #1
 800e5c4:	e7f9      	b.n	800e5ba <__mcmp+0x2a>
	...

0800e5c8 <__mdiff>:
 800e5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5cc:	4689      	mov	r9, r1
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	4648      	mov	r0, r9
 800e5d4:	4614      	mov	r4, r2
 800e5d6:	f7ff ffdb 	bl	800e590 <__mcmp>
 800e5da:	1e05      	subs	r5, r0, #0
 800e5dc:	d112      	bne.n	800e604 <__mdiff+0x3c>
 800e5de:	4629      	mov	r1, r5
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7ff fd5b 	bl	800e09c <_Balloc>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	b928      	cbnz	r0, 800e5f6 <__mdiff+0x2e>
 800e5ea:	4b3f      	ldr	r3, [pc, #252]	@ (800e6e8 <__mdiff+0x120>)
 800e5ec:	f240 2137 	movw	r1, #567	@ 0x237
 800e5f0:	483e      	ldr	r0, [pc, #248]	@ (800e6ec <__mdiff+0x124>)
 800e5f2:	f7fe fe9d 	bl	800d330 <__assert_func>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	b003      	add	sp, #12
 800e600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e604:	bfbc      	itt	lt
 800e606:	464b      	movlt	r3, r9
 800e608:	46a1      	movlt	r9, r4
 800e60a:	4630      	mov	r0, r6
 800e60c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e610:	bfba      	itte	lt
 800e612:	461c      	movlt	r4, r3
 800e614:	2501      	movlt	r5, #1
 800e616:	2500      	movge	r5, #0
 800e618:	f7ff fd40 	bl	800e09c <_Balloc>
 800e61c:	4602      	mov	r2, r0
 800e61e:	b918      	cbnz	r0, 800e628 <__mdiff+0x60>
 800e620:	4b31      	ldr	r3, [pc, #196]	@ (800e6e8 <__mdiff+0x120>)
 800e622:	f240 2145 	movw	r1, #581	@ 0x245
 800e626:	e7e3      	b.n	800e5f0 <__mdiff+0x28>
 800e628:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e62c:	6926      	ldr	r6, [r4, #16]
 800e62e:	60c5      	str	r5, [r0, #12]
 800e630:	f109 0310 	add.w	r3, r9, #16
 800e634:	f109 0514 	add.w	r5, r9, #20
 800e638:	f104 0e14 	add.w	lr, r4, #20
 800e63c:	f100 0b14 	add.w	fp, r0, #20
 800e640:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e644:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e648:	9301      	str	r3, [sp, #4]
 800e64a:	46d9      	mov	r9, fp
 800e64c:	f04f 0c00 	mov.w	ip, #0
 800e650:	9b01      	ldr	r3, [sp, #4]
 800e652:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e656:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e65a:	9301      	str	r3, [sp, #4]
 800e65c:	fa1f f38a 	uxth.w	r3, sl
 800e660:	4619      	mov	r1, r3
 800e662:	b283      	uxth	r3, r0
 800e664:	1acb      	subs	r3, r1, r3
 800e666:	0c00      	lsrs	r0, r0, #16
 800e668:	4463      	add	r3, ip
 800e66a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e66e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e672:	b29b      	uxth	r3, r3
 800e674:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e678:	4576      	cmp	r6, lr
 800e67a:	f849 3b04 	str.w	r3, [r9], #4
 800e67e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e682:	d8e5      	bhi.n	800e650 <__mdiff+0x88>
 800e684:	1b33      	subs	r3, r6, r4
 800e686:	3b15      	subs	r3, #21
 800e688:	f023 0303 	bic.w	r3, r3, #3
 800e68c:	3415      	adds	r4, #21
 800e68e:	3304      	adds	r3, #4
 800e690:	42a6      	cmp	r6, r4
 800e692:	bf38      	it	cc
 800e694:	2304      	movcc	r3, #4
 800e696:	441d      	add	r5, r3
 800e698:	445b      	add	r3, fp
 800e69a:	461e      	mov	r6, r3
 800e69c:	462c      	mov	r4, r5
 800e69e:	4544      	cmp	r4, r8
 800e6a0:	d30e      	bcc.n	800e6c0 <__mdiff+0xf8>
 800e6a2:	f108 0103 	add.w	r1, r8, #3
 800e6a6:	1b49      	subs	r1, r1, r5
 800e6a8:	f021 0103 	bic.w	r1, r1, #3
 800e6ac:	3d03      	subs	r5, #3
 800e6ae:	45a8      	cmp	r8, r5
 800e6b0:	bf38      	it	cc
 800e6b2:	2100      	movcc	r1, #0
 800e6b4:	440b      	add	r3, r1
 800e6b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6ba:	b191      	cbz	r1, 800e6e2 <__mdiff+0x11a>
 800e6bc:	6117      	str	r7, [r2, #16]
 800e6be:	e79d      	b.n	800e5fc <__mdiff+0x34>
 800e6c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6c4:	46e6      	mov	lr, ip
 800e6c6:	0c08      	lsrs	r0, r1, #16
 800e6c8:	fa1c fc81 	uxtah	ip, ip, r1
 800e6cc:	4471      	add	r1, lr
 800e6ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6d2:	b289      	uxth	r1, r1
 800e6d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6d8:	f846 1b04 	str.w	r1, [r6], #4
 800e6dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6e0:	e7dd      	b.n	800e69e <__mdiff+0xd6>
 800e6e2:	3f01      	subs	r7, #1
 800e6e4:	e7e7      	b.n	800e6b6 <__mdiff+0xee>
 800e6e6:	bf00      	nop
 800e6e8:	0800f8cf 	.word	0x0800f8cf
 800e6ec:	0800f8e0 	.word	0x0800f8e0

0800e6f0 <__d2b>:
 800e6f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6f4:	460f      	mov	r7, r1
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	ec59 8b10 	vmov	r8, r9, d0
 800e6fc:	4616      	mov	r6, r2
 800e6fe:	f7ff fccd 	bl	800e09c <_Balloc>
 800e702:	4604      	mov	r4, r0
 800e704:	b930      	cbnz	r0, 800e714 <__d2b+0x24>
 800e706:	4602      	mov	r2, r0
 800e708:	4b23      	ldr	r3, [pc, #140]	@ (800e798 <__d2b+0xa8>)
 800e70a:	4824      	ldr	r0, [pc, #144]	@ (800e79c <__d2b+0xac>)
 800e70c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e710:	f7fe fe0e 	bl	800d330 <__assert_func>
 800e714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e71c:	b10d      	cbz	r5, 800e722 <__d2b+0x32>
 800e71e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e722:	9301      	str	r3, [sp, #4]
 800e724:	f1b8 0300 	subs.w	r3, r8, #0
 800e728:	d023      	beq.n	800e772 <__d2b+0x82>
 800e72a:	4668      	mov	r0, sp
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	f7ff fd7c 	bl	800e22a <__lo0bits>
 800e732:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e736:	b1d0      	cbz	r0, 800e76e <__d2b+0x7e>
 800e738:	f1c0 0320 	rsb	r3, r0, #32
 800e73c:	fa02 f303 	lsl.w	r3, r2, r3
 800e740:	430b      	orrs	r3, r1
 800e742:	40c2      	lsrs	r2, r0
 800e744:	6163      	str	r3, [r4, #20]
 800e746:	9201      	str	r2, [sp, #4]
 800e748:	9b01      	ldr	r3, [sp, #4]
 800e74a:	61a3      	str	r3, [r4, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	bf0c      	ite	eq
 800e750:	2201      	moveq	r2, #1
 800e752:	2202      	movne	r2, #2
 800e754:	6122      	str	r2, [r4, #16]
 800e756:	b1a5      	cbz	r5, 800e782 <__d2b+0x92>
 800e758:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e75c:	4405      	add	r5, r0
 800e75e:	603d      	str	r5, [r7, #0]
 800e760:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e764:	6030      	str	r0, [r6, #0]
 800e766:	4620      	mov	r0, r4
 800e768:	b003      	add	sp, #12
 800e76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e76e:	6161      	str	r1, [r4, #20]
 800e770:	e7ea      	b.n	800e748 <__d2b+0x58>
 800e772:	a801      	add	r0, sp, #4
 800e774:	f7ff fd59 	bl	800e22a <__lo0bits>
 800e778:	9b01      	ldr	r3, [sp, #4]
 800e77a:	6163      	str	r3, [r4, #20]
 800e77c:	3020      	adds	r0, #32
 800e77e:	2201      	movs	r2, #1
 800e780:	e7e8      	b.n	800e754 <__d2b+0x64>
 800e782:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e786:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e78a:	6038      	str	r0, [r7, #0]
 800e78c:	6918      	ldr	r0, [r3, #16]
 800e78e:	f7ff fd2d 	bl	800e1ec <__hi0bits>
 800e792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e796:	e7e5      	b.n	800e764 <__d2b+0x74>
 800e798:	0800f8cf 	.word	0x0800f8cf
 800e79c:	0800f8e0 	.word	0x0800f8e0

0800e7a0 <__ssputs_r>:
 800e7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a4:	688e      	ldr	r6, [r1, #8]
 800e7a6:	461f      	mov	r7, r3
 800e7a8:	42be      	cmp	r6, r7
 800e7aa:	680b      	ldr	r3, [r1, #0]
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	4690      	mov	r8, r2
 800e7b2:	d82d      	bhi.n	800e810 <__ssputs_r+0x70>
 800e7b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7bc:	d026      	beq.n	800e80c <__ssputs_r+0x6c>
 800e7be:	6965      	ldr	r5, [r4, #20]
 800e7c0:	6909      	ldr	r1, [r1, #16]
 800e7c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7c6:	eba3 0901 	sub.w	r9, r3, r1
 800e7ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7ce:	1c7b      	adds	r3, r7, #1
 800e7d0:	444b      	add	r3, r9
 800e7d2:	106d      	asrs	r5, r5, #1
 800e7d4:	429d      	cmp	r5, r3
 800e7d6:	bf38      	it	cc
 800e7d8:	461d      	movcc	r5, r3
 800e7da:	0553      	lsls	r3, r2, #21
 800e7dc:	d527      	bpl.n	800e82e <__ssputs_r+0x8e>
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7fd fdc8 	bl	800c374 <_malloc_r>
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	b360      	cbz	r0, 800e842 <__ssputs_r+0xa2>
 800e7e8:	6921      	ldr	r1, [r4, #16]
 800e7ea:	464a      	mov	r2, r9
 800e7ec:	f7fe fd91 	bl	800d312 <memcpy>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	6126      	str	r6, [r4, #16]
 800e7fe:	6165      	str	r5, [r4, #20]
 800e800:	444e      	add	r6, r9
 800e802:	eba5 0509 	sub.w	r5, r5, r9
 800e806:	6026      	str	r6, [r4, #0]
 800e808:	60a5      	str	r5, [r4, #8]
 800e80a:	463e      	mov	r6, r7
 800e80c:	42be      	cmp	r6, r7
 800e80e:	d900      	bls.n	800e812 <__ssputs_r+0x72>
 800e810:	463e      	mov	r6, r7
 800e812:	6820      	ldr	r0, [r4, #0]
 800e814:	4632      	mov	r2, r6
 800e816:	4641      	mov	r1, r8
 800e818:	f000 f9d8 	bl	800ebcc <memmove>
 800e81c:	68a3      	ldr	r3, [r4, #8]
 800e81e:	1b9b      	subs	r3, r3, r6
 800e820:	60a3      	str	r3, [r4, #8]
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	4433      	add	r3, r6
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	2000      	movs	r0, #0
 800e82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e82e:	462a      	mov	r2, r5
 800e830:	f000 f9ff 	bl	800ec32 <_realloc_r>
 800e834:	4606      	mov	r6, r0
 800e836:	2800      	cmp	r0, #0
 800e838:	d1e0      	bne.n	800e7fc <__ssputs_r+0x5c>
 800e83a:	6921      	ldr	r1, [r4, #16]
 800e83c:	4650      	mov	r0, sl
 800e83e:	f7ff fbe3 	bl	800e008 <_free_r>
 800e842:	230c      	movs	r3, #12
 800e844:	f8ca 3000 	str.w	r3, [sl]
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e84e:	81a3      	strh	r3, [r4, #12]
 800e850:	f04f 30ff 	mov.w	r0, #4294967295
 800e854:	e7e9      	b.n	800e82a <__ssputs_r+0x8a>
	...

0800e858 <_svfiprintf_r>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	4698      	mov	r8, r3
 800e85e:	898b      	ldrh	r3, [r1, #12]
 800e860:	061b      	lsls	r3, r3, #24
 800e862:	b09d      	sub	sp, #116	@ 0x74
 800e864:	4607      	mov	r7, r0
 800e866:	460d      	mov	r5, r1
 800e868:	4614      	mov	r4, r2
 800e86a:	d510      	bpl.n	800e88e <_svfiprintf_r+0x36>
 800e86c:	690b      	ldr	r3, [r1, #16]
 800e86e:	b973      	cbnz	r3, 800e88e <_svfiprintf_r+0x36>
 800e870:	2140      	movs	r1, #64	@ 0x40
 800e872:	f7fd fd7f 	bl	800c374 <_malloc_r>
 800e876:	6028      	str	r0, [r5, #0]
 800e878:	6128      	str	r0, [r5, #16]
 800e87a:	b930      	cbnz	r0, 800e88a <_svfiprintf_r+0x32>
 800e87c:	230c      	movs	r3, #12
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	f04f 30ff 	mov.w	r0, #4294967295
 800e884:	b01d      	add	sp, #116	@ 0x74
 800e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88a:	2340      	movs	r3, #64	@ 0x40
 800e88c:	616b      	str	r3, [r5, #20]
 800e88e:	2300      	movs	r3, #0
 800e890:	9309      	str	r3, [sp, #36]	@ 0x24
 800e892:	2320      	movs	r3, #32
 800e894:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e898:	f8cd 800c 	str.w	r8, [sp, #12]
 800e89c:	2330      	movs	r3, #48	@ 0x30
 800e89e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea3c <_svfiprintf_r+0x1e4>
 800e8a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8a6:	f04f 0901 	mov.w	r9, #1
 800e8aa:	4623      	mov	r3, r4
 800e8ac:	469a      	mov	sl, r3
 800e8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b2:	b10a      	cbz	r2, 800e8b8 <_svfiprintf_r+0x60>
 800e8b4:	2a25      	cmp	r2, #37	@ 0x25
 800e8b6:	d1f9      	bne.n	800e8ac <_svfiprintf_r+0x54>
 800e8b8:	ebba 0b04 	subs.w	fp, sl, r4
 800e8bc:	d00b      	beq.n	800e8d6 <_svfiprintf_r+0x7e>
 800e8be:	465b      	mov	r3, fp
 800e8c0:	4622      	mov	r2, r4
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	4638      	mov	r0, r7
 800e8c6:	f7ff ff6b 	bl	800e7a0 <__ssputs_r>
 800e8ca:	3001      	adds	r0, #1
 800e8cc:	f000 80a7 	beq.w	800ea1e <_svfiprintf_r+0x1c6>
 800e8d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d2:	445a      	add	r2, fp
 800e8d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 809f 	beq.w	800ea1e <_svfiprintf_r+0x1c6>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8ea:	f10a 0a01 	add.w	sl, sl, #1
 800e8ee:	9304      	str	r3, [sp, #16]
 800e8f0:	9307      	str	r3, [sp, #28]
 800e8f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8f8:	4654      	mov	r4, sl
 800e8fa:	2205      	movs	r2, #5
 800e8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e900:	484e      	ldr	r0, [pc, #312]	@ (800ea3c <_svfiprintf_r+0x1e4>)
 800e902:	f7f1 fc75 	bl	80001f0 <memchr>
 800e906:	9a04      	ldr	r2, [sp, #16]
 800e908:	b9d8      	cbnz	r0, 800e942 <_svfiprintf_r+0xea>
 800e90a:	06d0      	lsls	r0, r2, #27
 800e90c:	bf44      	itt	mi
 800e90e:	2320      	movmi	r3, #32
 800e910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e914:	0711      	lsls	r1, r2, #28
 800e916:	bf44      	itt	mi
 800e918:	232b      	movmi	r3, #43	@ 0x2b
 800e91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e91e:	f89a 3000 	ldrb.w	r3, [sl]
 800e922:	2b2a      	cmp	r3, #42	@ 0x2a
 800e924:	d015      	beq.n	800e952 <_svfiprintf_r+0xfa>
 800e926:	9a07      	ldr	r2, [sp, #28]
 800e928:	4654      	mov	r4, sl
 800e92a:	2000      	movs	r0, #0
 800e92c:	f04f 0c0a 	mov.w	ip, #10
 800e930:	4621      	mov	r1, r4
 800e932:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e936:	3b30      	subs	r3, #48	@ 0x30
 800e938:	2b09      	cmp	r3, #9
 800e93a:	d94b      	bls.n	800e9d4 <_svfiprintf_r+0x17c>
 800e93c:	b1b0      	cbz	r0, 800e96c <_svfiprintf_r+0x114>
 800e93e:	9207      	str	r2, [sp, #28]
 800e940:	e014      	b.n	800e96c <_svfiprintf_r+0x114>
 800e942:	eba0 0308 	sub.w	r3, r0, r8
 800e946:	fa09 f303 	lsl.w	r3, r9, r3
 800e94a:	4313      	orrs	r3, r2
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	46a2      	mov	sl, r4
 800e950:	e7d2      	b.n	800e8f8 <_svfiprintf_r+0xa0>
 800e952:	9b03      	ldr	r3, [sp, #12]
 800e954:	1d19      	adds	r1, r3, #4
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	9103      	str	r1, [sp, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	bfbb      	ittet	lt
 800e95e:	425b      	neglt	r3, r3
 800e960:	f042 0202 	orrlt.w	r2, r2, #2
 800e964:	9307      	strge	r3, [sp, #28]
 800e966:	9307      	strlt	r3, [sp, #28]
 800e968:	bfb8      	it	lt
 800e96a:	9204      	strlt	r2, [sp, #16]
 800e96c:	7823      	ldrb	r3, [r4, #0]
 800e96e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e970:	d10a      	bne.n	800e988 <_svfiprintf_r+0x130>
 800e972:	7863      	ldrb	r3, [r4, #1]
 800e974:	2b2a      	cmp	r3, #42	@ 0x2a
 800e976:	d132      	bne.n	800e9de <_svfiprintf_r+0x186>
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	1d1a      	adds	r2, r3, #4
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	9203      	str	r2, [sp, #12]
 800e980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e984:	3402      	adds	r4, #2
 800e986:	9305      	str	r3, [sp, #20]
 800e988:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea4c <_svfiprintf_r+0x1f4>
 800e98c:	7821      	ldrb	r1, [r4, #0]
 800e98e:	2203      	movs	r2, #3
 800e990:	4650      	mov	r0, sl
 800e992:	f7f1 fc2d 	bl	80001f0 <memchr>
 800e996:	b138      	cbz	r0, 800e9a8 <_svfiprintf_r+0x150>
 800e998:	9b04      	ldr	r3, [sp, #16]
 800e99a:	eba0 000a 	sub.w	r0, r0, sl
 800e99e:	2240      	movs	r2, #64	@ 0x40
 800e9a0:	4082      	lsls	r2, r0
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	3401      	adds	r4, #1
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ac:	4824      	ldr	r0, [pc, #144]	@ (800ea40 <_svfiprintf_r+0x1e8>)
 800e9ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9b2:	2206      	movs	r2, #6
 800e9b4:	f7f1 fc1c 	bl	80001f0 <memchr>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d036      	beq.n	800ea2a <_svfiprintf_r+0x1d2>
 800e9bc:	4b21      	ldr	r3, [pc, #132]	@ (800ea44 <_svfiprintf_r+0x1ec>)
 800e9be:	bb1b      	cbnz	r3, 800ea08 <_svfiprintf_r+0x1b0>
 800e9c0:	9b03      	ldr	r3, [sp, #12]
 800e9c2:	3307      	adds	r3, #7
 800e9c4:	f023 0307 	bic.w	r3, r3, #7
 800e9c8:	3308      	adds	r3, #8
 800e9ca:	9303      	str	r3, [sp, #12]
 800e9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ce:	4433      	add	r3, r6
 800e9d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d2:	e76a      	b.n	800e8aa <_svfiprintf_r+0x52>
 800e9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9d8:	460c      	mov	r4, r1
 800e9da:	2001      	movs	r0, #1
 800e9dc:	e7a8      	b.n	800e930 <_svfiprintf_r+0xd8>
 800e9de:	2300      	movs	r3, #0
 800e9e0:	3401      	adds	r4, #1
 800e9e2:	9305      	str	r3, [sp, #20]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	f04f 0c0a 	mov.w	ip, #10
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f0:	3a30      	subs	r2, #48	@ 0x30
 800e9f2:	2a09      	cmp	r2, #9
 800e9f4:	d903      	bls.n	800e9fe <_svfiprintf_r+0x1a6>
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d0c6      	beq.n	800e988 <_svfiprintf_r+0x130>
 800e9fa:	9105      	str	r1, [sp, #20]
 800e9fc:	e7c4      	b.n	800e988 <_svfiprintf_r+0x130>
 800e9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea02:	4604      	mov	r4, r0
 800ea04:	2301      	movs	r3, #1
 800ea06:	e7f0      	b.n	800e9ea <_svfiprintf_r+0x192>
 800ea08:	ab03      	add	r3, sp, #12
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	462a      	mov	r2, r5
 800ea0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea48 <_svfiprintf_r+0x1f0>)
 800ea10:	a904      	add	r1, sp, #16
 800ea12:	4638      	mov	r0, r7
 800ea14:	f7fd fe5e 	bl	800c6d4 <_printf_float>
 800ea18:	1c42      	adds	r2, r0, #1
 800ea1a:	4606      	mov	r6, r0
 800ea1c:	d1d6      	bne.n	800e9cc <_svfiprintf_r+0x174>
 800ea1e:	89ab      	ldrh	r3, [r5, #12]
 800ea20:	065b      	lsls	r3, r3, #25
 800ea22:	f53f af2d 	bmi.w	800e880 <_svfiprintf_r+0x28>
 800ea26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea28:	e72c      	b.n	800e884 <_svfiprintf_r+0x2c>
 800ea2a:	ab03      	add	r3, sp, #12
 800ea2c:	9300      	str	r3, [sp, #0]
 800ea2e:	462a      	mov	r2, r5
 800ea30:	4b05      	ldr	r3, [pc, #20]	@ (800ea48 <_svfiprintf_r+0x1f0>)
 800ea32:	a904      	add	r1, sp, #16
 800ea34:	4638      	mov	r0, r7
 800ea36:	f7fe f8e5 	bl	800cc04 <_printf_i>
 800ea3a:	e7ed      	b.n	800ea18 <_svfiprintf_r+0x1c0>
 800ea3c:	0800fa38 	.word	0x0800fa38
 800ea40:	0800fa42 	.word	0x0800fa42
 800ea44:	0800c6d5 	.word	0x0800c6d5
 800ea48:	0800e7a1 	.word	0x0800e7a1
 800ea4c:	0800fa3e 	.word	0x0800fa3e

0800ea50 <__sflush_r>:
 800ea50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea58:	0716      	lsls	r6, r2, #28
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	d454      	bmi.n	800eb0a <__sflush_r+0xba>
 800ea60:	684b      	ldr	r3, [r1, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	dc02      	bgt.n	800ea6c <__sflush_r+0x1c>
 800ea66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	dd48      	ble.n	800eafe <__sflush_r+0xae>
 800ea6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea6e:	2e00      	cmp	r6, #0
 800ea70:	d045      	beq.n	800eafe <__sflush_r+0xae>
 800ea72:	2300      	movs	r3, #0
 800ea74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea78:	682f      	ldr	r7, [r5, #0]
 800ea7a:	6a21      	ldr	r1, [r4, #32]
 800ea7c:	602b      	str	r3, [r5, #0]
 800ea7e:	d030      	beq.n	800eae2 <__sflush_r+0x92>
 800ea80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	0759      	lsls	r1, r3, #29
 800ea86:	d505      	bpl.n	800ea94 <__sflush_r+0x44>
 800ea88:	6863      	ldr	r3, [r4, #4]
 800ea8a:	1ad2      	subs	r2, r2, r3
 800ea8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea8e:	b10b      	cbz	r3, 800ea94 <__sflush_r+0x44>
 800ea90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea92:	1ad2      	subs	r2, r2, r3
 800ea94:	2300      	movs	r3, #0
 800ea96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea98:	6a21      	ldr	r1, [r4, #32]
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	47b0      	blx	r6
 800ea9e:	1c43      	adds	r3, r0, #1
 800eaa0:	89a3      	ldrh	r3, [r4, #12]
 800eaa2:	d106      	bne.n	800eab2 <__sflush_r+0x62>
 800eaa4:	6829      	ldr	r1, [r5, #0]
 800eaa6:	291d      	cmp	r1, #29
 800eaa8:	d82b      	bhi.n	800eb02 <__sflush_r+0xb2>
 800eaaa:	4a2a      	ldr	r2, [pc, #168]	@ (800eb54 <__sflush_r+0x104>)
 800eaac:	410a      	asrs	r2, r1
 800eaae:	07d6      	lsls	r6, r2, #31
 800eab0:	d427      	bmi.n	800eb02 <__sflush_r+0xb2>
 800eab2:	2200      	movs	r2, #0
 800eab4:	6062      	str	r2, [r4, #4]
 800eab6:	04d9      	lsls	r1, r3, #19
 800eab8:	6922      	ldr	r2, [r4, #16]
 800eaba:	6022      	str	r2, [r4, #0]
 800eabc:	d504      	bpl.n	800eac8 <__sflush_r+0x78>
 800eabe:	1c42      	adds	r2, r0, #1
 800eac0:	d101      	bne.n	800eac6 <__sflush_r+0x76>
 800eac2:	682b      	ldr	r3, [r5, #0]
 800eac4:	b903      	cbnz	r3, 800eac8 <__sflush_r+0x78>
 800eac6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eaca:	602f      	str	r7, [r5, #0]
 800eacc:	b1b9      	cbz	r1, 800eafe <__sflush_r+0xae>
 800eace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ead2:	4299      	cmp	r1, r3
 800ead4:	d002      	beq.n	800eadc <__sflush_r+0x8c>
 800ead6:	4628      	mov	r0, r5
 800ead8:	f7ff fa96 	bl	800e008 <_free_r>
 800eadc:	2300      	movs	r3, #0
 800eade:	6363      	str	r3, [r4, #52]	@ 0x34
 800eae0:	e00d      	b.n	800eafe <__sflush_r+0xae>
 800eae2:	2301      	movs	r3, #1
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b0      	blx	r6
 800eae8:	4602      	mov	r2, r0
 800eaea:	1c50      	adds	r0, r2, #1
 800eaec:	d1c9      	bne.n	800ea82 <__sflush_r+0x32>
 800eaee:	682b      	ldr	r3, [r5, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d0c6      	beq.n	800ea82 <__sflush_r+0x32>
 800eaf4:	2b1d      	cmp	r3, #29
 800eaf6:	d001      	beq.n	800eafc <__sflush_r+0xac>
 800eaf8:	2b16      	cmp	r3, #22
 800eafa:	d11e      	bne.n	800eb3a <__sflush_r+0xea>
 800eafc:	602f      	str	r7, [r5, #0]
 800eafe:	2000      	movs	r0, #0
 800eb00:	e022      	b.n	800eb48 <__sflush_r+0xf8>
 800eb02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb06:	b21b      	sxth	r3, r3
 800eb08:	e01b      	b.n	800eb42 <__sflush_r+0xf2>
 800eb0a:	690f      	ldr	r7, [r1, #16]
 800eb0c:	2f00      	cmp	r7, #0
 800eb0e:	d0f6      	beq.n	800eafe <__sflush_r+0xae>
 800eb10:	0793      	lsls	r3, r2, #30
 800eb12:	680e      	ldr	r6, [r1, #0]
 800eb14:	bf08      	it	eq
 800eb16:	694b      	ldreq	r3, [r1, #20]
 800eb18:	600f      	str	r7, [r1, #0]
 800eb1a:	bf18      	it	ne
 800eb1c:	2300      	movne	r3, #0
 800eb1e:	eba6 0807 	sub.w	r8, r6, r7
 800eb22:	608b      	str	r3, [r1, #8]
 800eb24:	f1b8 0f00 	cmp.w	r8, #0
 800eb28:	dde9      	ble.n	800eafe <__sflush_r+0xae>
 800eb2a:	6a21      	ldr	r1, [r4, #32]
 800eb2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb2e:	4643      	mov	r3, r8
 800eb30:	463a      	mov	r2, r7
 800eb32:	4628      	mov	r0, r5
 800eb34:	47b0      	blx	r6
 800eb36:	2800      	cmp	r0, #0
 800eb38:	dc08      	bgt.n	800eb4c <__sflush_r+0xfc>
 800eb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb42:	81a3      	strh	r3, [r4, #12]
 800eb44:	f04f 30ff 	mov.w	r0, #4294967295
 800eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4c:	4407      	add	r7, r0
 800eb4e:	eba8 0800 	sub.w	r8, r8, r0
 800eb52:	e7e7      	b.n	800eb24 <__sflush_r+0xd4>
 800eb54:	dfbffffe 	.word	0xdfbffffe

0800eb58 <_fflush_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	690b      	ldr	r3, [r1, #16]
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	460c      	mov	r4, r1
 800eb60:	b913      	cbnz	r3, 800eb68 <_fflush_r+0x10>
 800eb62:	2500      	movs	r5, #0
 800eb64:	4628      	mov	r0, r5
 800eb66:	bd38      	pop	{r3, r4, r5, pc}
 800eb68:	b118      	cbz	r0, 800eb72 <_fflush_r+0x1a>
 800eb6a:	6a03      	ldr	r3, [r0, #32]
 800eb6c:	b90b      	cbnz	r3, 800eb72 <_fflush_r+0x1a>
 800eb6e:	f7fe f9f5 	bl	800cf5c <__sinit>
 800eb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0f3      	beq.n	800eb62 <_fflush_r+0xa>
 800eb7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb7c:	07d0      	lsls	r0, r2, #31
 800eb7e:	d404      	bmi.n	800eb8a <_fflush_r+0x32>
 800eb80:	0599      	lsls	r1, r3, #22
 800eb82:	d402      	bmi.n	800eb8a <_fflush_r+0x32>
 800eb84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb86:	f7fe fbc2 	bl	800d30e <__retarget_lock_acquire_recursive>
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	4621      	mov	r1, r4
 800eb8e:	f7ff ff5f 	bl	800ea50 <__sflush_r>
 800eb92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb94:	07da      	lsls	r2, r3, #31
 800eb96:	4605      	mov	r5, r0
 800eb98:	d4e4      	bmi.n	800eb64 <_fflush_r+0xc>
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	059b      	lsls	r3, r3, #22
 800eb9e:	d4e1      	bmi.n	800eb64 <_fflush_r+0xc>
 800eba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eba2:	f7fe fbb5 	bl	800d310 <__retarget_lock_release_recursive>
 800eba6:	e7dd      	b.n	800eb64 <_fflush_r+0xc>

0800eba8 <fiprintf>:
 800eba8:	b40e      	push	{r1, r2, r3}
 800ebaa:	b503      	push	{r0, r1, lr}
 800ebac:	4601      	mov	r1, r0
 800ebae:	ab03      	add	r3, sp, #12
 800ebb0:	4805      	ldr	r0, [pc, #20]	@ (800ebc8 <fiprintf+0x20>)
 800ebb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb6:	6800      	ldr	r0, [r0, #0]
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	f000 f89f 	bl	800ecfc <_vfiprintf_r>
 800ebbe:	b002      	add	sp, #8
 800ebc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebc4:	b003      	add	sp, #12
 800ebc6:	4770      	bx	lr
 800ebc8:	20000154 	.word	0x20000154

0800ebcc <memmove>:
 800ebcc:	4288      	cmp	r0, r1
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	eb01 0402 	add.w	r4, r1, r2
 800ebd4:	d902      	bls.n	800ebdc <memmove+0x10>
 800ebd6:	4284      	cmp	r4, r0
 800ebd8:	4623      	mov	r3, r4
 800ebda:	d807      	bhi.n	800ebec <memmove+0x20>
 800ebdc:	1e43      	subs	r3, r0, #1
 800ebde:	42a1      	cmp	r1, r4
 800ebe0:	d008      	beq.n	800ebf4 <memmove+0x28>
 800ebe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebea:	e7f8      	b.n	800ebde <memmove+0x12>
 800ebec:	4402      	add	r2, r0
 800ebee:	4601      	mov	r1, r0
 800ebf0:	428a      	cmp	r2, r1
 800ebf2:	d100      	bne.n	800ebf6 <memmove+0x2a>
 800ebf4:	bd10      	pop	{r4, pc}
 800ebf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebfe:	e7f7      	b.n	800ebf0 <memmove+0x24>

0800ec00 <abort>:
 800ec00:	b508      	push	{r3, lr}
 800ec02:	2006      	movs	r0, #6
 800ec04:	f000 fa4e 	bl	800f0a4 <raise>
 800ec08:	2001      	movs	r0, #1
 800ec0a:	f7f3 f87d 	bl	8001d08 <_exit>

0800ec0e <__ascii_mbtowc>:
 800ec0e:	b082      	sub	sp, #8
 800ec10:	b901      	cbnz	r1, 800ec14 <__ascii_mbtowc+0x6>
 800ec12:	a901      	add	r1, sp, #4
 800ec14:	b142      	cbz	r2, 800ec28 <__ascii_mbtowc+0x1a>
 800ec16:	b14b      	cbz	r3, 800ec2c <__ascii_mbtowc+0x1e>
 800ec18:	7813      	ldrb	r3, [r2, #0]
 800ec1a:	600b      	str	r3, [r1, #0]
 800ec1c:	7812      	ldrb	r2, [r2, #0]
 800ec1e:	1e10      	subs	r0, r2, #0
 800ec20:	bf18      	it	ne
 800ec22:	2001      	movne	r0, #1
 800ec24:	b002      	add	sp, #8
 800ec26:	4770      	bx	lr
 800ec28:	4610      	mov	r0, r2
 800ec2a:	e7fb      	b.n	800ec24 <__ascii_mbtowc+0x16>
 800ec2c:	f06f 0001 	mvn.w	r0, #1
 800ec30:	e7f8      	b.n	800ec24 <__ascii_mbtowc+0x16>

0800ec32 <_realloc_r>:
 800ec32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec36:	4680      	mov	r8, r0
 800ec38:	4615      	mov	r5, r2
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	b921      	cbnz	r1, 800ec48 <_realloc_r+0x16>
 800ec3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec42:	4611      	mov	r1, r2
 800ec44:	f7fd bb96 	b.w	800c374 <_malloc_r>
 800ec48:	b92a      	cbnz	r2, 800ec56 <_realloc_r+0x24>
 800ec4a:	f7ff f9dd 	bl	800e008 <_free_r>
 800ec4e:	2400      	movs	r4, #0
 800ec50:	4620      	mov	r0, r4
 800ec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec56:	f000 fa41 	bl	800f0dc <_malloc_usable_size_r>
 800ec5a:	4285      	cmp	r5, r0
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	d802      	bhi.n	800ec66 <_realloc_r+0x34>
 800ec60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec64:	d8f4      	bhi.n	800ec50 <_realloc_r+0x1e>
 800ec66:	4629      	mov	r1, r5
 800ec68:	4640      	mov	r0, r8
 800ec6a:	f7fd fb83 	bl	800c374 <_malloc_r>
 800ec6e:	4607      	mov	r7, r0
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d0ec      	beq.n	800ec4e <_realloc_r+0x1c>
 800ec74:	42b5      	cmp	r5, r6
 800ec76:	462a      	mov	r2, r5
 800ec78:	4621      	mov	r1, r4
 800ec7a:	bf28      	it	cs
 800ec7c:	4632      	movcs	r2, r6
 800ec7e:	f7fe fb48 	bl	800d312 <memcpy>
 800ec82:	4621      	mov	r1, r4
 800ec84:	4640      	mov	r0, r8
 800ec86:	f7ff f9bf 	bl	800e008 <_free_r>
 800ec8a:	463c      	mov	r4, r7
 800ec8c:	e7e0      	b.n	800ec50 <_realloc_r+0x1e>

0800ec8e <__ascii_wctomb>:
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4608      	mov	r0, r1
 800ec92:	b141      	cbz	r1, 800eca6 <__ascii_wctomb+0x18>
 800ec94:	2aff      	cmp	r2, #255	@ 0xff
 800ec96:	d904      	bls.n	800eca2 <__ascii_wctomb+0x14>
 800ec98:	228a      	movs	r2, #138	@ 0x8a
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	4770      	bx	lr
 800eca2:	700a      	strb	r2, [r1, #0]
 800eca4:	2001      	movs	r0, #1
 800eca6:	4770      	bx	lr

0800eca8 <__sfputc_r>:
 800eca8:	6893      	ldr	r3, [r2, #8]
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	b410      	push	{r4}
 800ecb0:	6093      	str	r3, [r2, #8]
 800ecb2:	da08      	bge.n	800ecc6 <__sfputc_r+0x1e>
 800ecb4:	6994      	ldr	r4, [r2, #24]
 800ecb6:	42a3      	cmp	r3, r4
 800ecb8:	db01      	blt.n	800ecbe <__sfputc_r+0x16>
 800ecba:	290a      	cmp	r1, #10
 800ecbc:	d103      	bne.n	800ecc6 <__sfputc_r+0x1e>
 800ecbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecc2:	f000 b933 	b.w	800ef2c <__swbuf_r>
 800ecc6:	6813      	ldr	r3, [r2, #0]
 800ecc8:	1c58      	adds	r0, r3, #1
 800ecca:	6010      	str	r0, [r2, #0]
 800eccc:	7019      	strb	r1, [r3, #0]
 800ecce:	4608      	mov	r0, r1
 800ecd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <__sfputs_r>:
 800ecd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd8:	4606      	mov	r6, r0
 800ecda:	460f      	mov	r7, r1
 800ecdc:	4614      	mov	r4, r2
 800ecde:	18d5      	adds	r5, r2, r3
 800ece0:	42ac      	cmp	r4, r5
 800ece2:	d101      	bne.n	800ece8 <__sfputs_r+0x12>
 800ece4:	2000      	movs	r0, #0
 800ece6:	e007      	b.n	800ecf8 <__sfputs_r+0x22>
 800ece8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecec:	463a      	mov	r2, r7
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f7ff ffda 	bl	800eca8 <__sfputc_r>
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d1f3      	bne.n	800ece0 <__sfputs_r+0xa>
 800ecf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ecfc <_vfiprintf_r>:
 800ecfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	460d      	mov	r5, r1
 800ed02:	b09d      	sub	sp, #116	@ 0x74
 800ed04:	4614      	mov	r4, r2
 800ed06:	4698      	mov	r8, r3
 800ed08:	4606      	mov	r6, r0
 800ed0a:	b118      	cbz	r0, 800ed14 <_vfiprintf_r+0x18>
 800ed0c:	6a03      	ldr	r3, [r0, #32]
 800ed0e:	b90b      	cbnz	r3, 800ed14 <_vfiprintf_r+0x18>
 800ed10:	f7fe f924 	bl	800cf5c <__sinit>
 800ed14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed16:	07d9      	lsls	r1, r3, #31
 800ed18:	d405      	bmi.n	800ed26 <_vfiprintf_r+0x2a>
 800ed1a:	89ab      	ldrh	r3, [r5, #12]
 800ed1c:	059a      	lsls	r2, r3, #22
 800ed1e:	d402      	bmi.n	800ed26 <_vfiprintf_r+0x2a>
 800ed20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed22:	f7fe faf4 	bl	800d30e <__retarget_lock_acquire_recursive>
 800ed26:	89ab      	ldrh	r3, [r5, #12]
 800ed28:	071b      	lsls	r3, r3, #28
 800ed2a:	d501      	bpl.n	800ed30 <_vfiprintf_r+0x34>
 800ed2c:	692b      	ldr	r3, [r5, #16]
 800ed2e:	b99b      	cbnz	r3, 800ed58 <_vfiprintf_r+0x5c>
 800ed30:	4629      	mov	r1, r5
 800ed32:	4630      	mov	r0, r6
 800ed34:	f000 f938 	bl	800efa8 <__swsetup_r>
 800ed38:	b170      	cbz	r0, 800ed58 <_vfiprintf_r+0x5c>
 800ed3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed3c:	07dc      	lsls	r4, r3, #31
 800ed3e:	d504      	bpl.n	800ed4a <_vfiprintf_r+0x4e>
 800ed40:	f04f 30ff 	mov.w	r0, #4294967295
 800ed44:	b01d      	add	sp, #116	@ 0x74
 800ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4a:	89ab      	ldrh	r3, [r5, #12]
 800ed4c:	0598      	lsls	r0, r3, #22
 800ed4e:	d4f7      	bmi.n	800ed40 <_vfiprintf_r+0x44>
 800ed50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed52:	f7fe fadd 	bl	800d310 <__retarget_lock_release_recursive>
 800ed56:	e7f3      	b.n	800ed40 <_vfiprintf_r+0x44>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed5c:	2320      	movs	r3, #32
 800ed5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed66:	2330      	movs	r3, #48	@ 0x30
 800ed68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef18 <_vfiprintf_r+0x21c>
 800ed6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed70:	f04f 0901 	mov.w	r9, #1
 800ed74:	4623      	mov	r3, r4
 800ed76:	469a      	mov	sl, r3
 800ed78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed7c:	b10a      	cbz	r2, 800ed82 <_vfiprintf_r+0x86>
 800ed7e:	2a25      	cmp	r2, #37	@ 0x25
 800ed80:	d1f9      	bne.n	800ed76 <_vfiprintf_r+0x7a>
 800ed82:	ebba 0b04 	subs.w	fp, sl, r4
 800ed86:	d00b      	beq.n	800eda0 <_vfiprintf_r+0xa4>
 800ed88:	465b      	mov	r3, fp
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7ff ffa1 	bl	800ecd6 <__sfputs_r>
 800ed94:	3001      	adds	r0, #1
 800ed96:	f000 80a7 	beq.w	800eee8 <_vfiprintf_r+0x1ec>
 800ed9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed9c:	445a      	add	r2, fp
 800ed9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800eda0:	f89a 3000 	ldrb.w	r3, [sl]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f000 809f 	beq.w	800eee8 <_vfiprintf_r+0x1ec>
 800edaa:	2300      	movs	r3, #0
 800edac:	f04f 32ff 	mov.w	r2, #4294967295
 800edb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edb4:	f10a 0a01 	add.w	sl, sl, #1
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	9307      	str	r3, [sp, #28]
 800edbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800edc2:	4654      	mov	r4, sl
 800edc4:	2205      	movs	r2, #5
 800edc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edca:	4853      	ldr	r0, [pc, #332]	@ (800ef18 <_vfiprintf_r+0x21c>)
 800edcc:	f7f1 fa10 	bl	80001f0 <memchr>
 800edd0:	9a04      	ldr	r2, [sp, #16]
 800edd2:	b9d8      	cbnz	r0, 800ee0c <_vfiprintf_r+0x110>
 800edd4:	06d1      	lsls	r1, r2, #27
 800edd6:	bf44      	itt	mi
 800edd8:	2320      	movmi	r3, #32
 800edda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edde:	0713      	lsls	r3, r2, #28
 800ede0:	bf44      	itt	mi
 800ede2:	232b      	movmi	r3, #43	@ 0x2b
 800ede4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ede8:	f89a 3000 	ldrb.w	r3, [sl]
 800edec:	2b2a      	cmp	r3, #42	@ 0x2a
 800edee:	d015      	beq.n	800ee1c <_vfiprintf_r+0x120>
 800edf0:	9a07      	ldr	r2, [sp, #28]
 800edf2:	4654      	mov	r4, sl
 800edf4:	2000      	movs	r0, #0
 800edf6:	f04f 0c0a 	mov.w	ip, #10
 800edfa:	4621      	mov	r1, r4
 800edfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee00:	3b30      	subs	r3, #48	@ 0x30
 800ee02:	2b09      	cmp	r3, #9
 800ee04:	d94b      	bls.n	800ee9e <_vfiprintf_r+0x1a2>
 800ee06:	b1b0      	cbz	r0, 800ee36 <_vfiprintf_r+0x13a>
 800ee08:	9207      	str	r2, [sp, #28]
 800ee0a:	e014      	b.n	800ee36 <_vfiprintf_r+0x13a>
 800ee0c:	eba0 0308 	sub.w	r3, r0, r8
 800ee10:	fa09 f303 	lsl.w	r3, r9, r3
 800ee14:	4313      	orrs	r3, r2
 800ee16:	9304      	str	r3, [sp, #16]
 800ee18:	46a2      	mov	sl, r4
 800ee1a:	e7d2      	b.n	800edc2 <_vfiprintf_r+0xc6>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	1d19      	adds	r1, r3, #4
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	9103      	str	r1, [sp, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfbb      	ittet	lt
 800ee28:	425b      	neglt	r3, r3
 800ee2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee2e:	9307      	strge	r3, [sp, #28]
 800ee30:	9307      	strlt	r3, [sp, #28]
 800ee32:	bfb8      	it	lt
 800ee34:	9204      	strlt	r2, [sp, #16]
 800ee36:	7823      	ldrb	r3, [r4, #0]
 800ee38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee3a:	d10a      	bne.n	800ee52 <_vfiprintf_r+0x156>
 800ee3c:	7863      	ldrb	r3, [r4, #1]
 800ee3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee40:	d132      	bne.n	800eea8 <_vfiprintf_r+0x1ac>
 800ee42:	9b03      	ldr	r3, [sp, #12]
 800ee44:	1d1a      	adds	r2, r3, #4
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	9203      	str	r2, [sp, #12]
 800ee4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee4e:	3402      	adds	r4, #2
 800ee50:	9305      	str	r3, [sp, #20]
 800ee52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef28 <_vfiprintf_r+0x22c>
 800ee56:	7821      	ldrb	r1, [r4, #0]
 800ee58:	2203      	movs	r2, #3
 800ee5a:	4650      	mov	r0, sl
 800ee5c:	f7f1 f9c8 	bl	80001f0 <memchr>
 800ee60:	b138      	cbz	r0, 800ee72 <_vfiprintf_r+0x176>
 800ee62:	9b04      	ldr	r3, [sp, #16]
 800ee64:	eba0 000a 	sub.w	r0, r0, sl
 800ee68:	2240      	movs	r2, #64	@ 0x40
 800ee6a:	4082      	lsls	r2, r0
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	3401      	adds	r4, #1
 800ee70:	9304      	str	r3, [sp, #16]
 800ee72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee76:	4829      	ldr	r0, [pc, #164]	@ (800ef1c <_vfiprintf_r+0x220>)
 800ee78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee7c:	2206      	movs	r2, #6
 800ee7e:	f7f1 f9b7 	bl	80001f0 <memchr>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d03f      	beq.n	800ef06 <_vfiprintf_r+0x20a>
 800ee86:	4b26      	ldr	r3, [pc, #152]	@ (800ef20 <_vfiprintf_r+0x224>)
 800ee88:	bb1b      	cbnz	r3, 800eed2 <_vfiprintf_r+0x1d6>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	3307      	adds	r3, #7
 800ee8e:	f023 0307 	bic.w	r3, r3, #7
 800ee92:	3308      	adds	r3, #8
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee98:	443b      	add	r3, r7
 800ee9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee9c:	e76a      	b.n	800ed74 <_vfiprintf_r+0x78>
 800ee9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eea2:	460c      	mov	r4, r1
 800eea4:	2001      	movs	r0, #1
 800eea6:	e7a8      	b.n	800edfa <_vfiprintf_r+0xfe>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	3401      	adds	r4, #1
 800eeac:	9305      	str	r3, [sp, #20]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	f04f 0c0a 	mov.w	ip, #10
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeba:	3a30      	subs	r2, #48	@ 0x30
 800eebc:	2a09      	cmp	r2, #9
 800eebe:	d903      	bls.n	800eec8 <_vfiprintf_r+0x1cc>
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d0c6      	beq.n	800ee52 <_vfiprintf_r+0x156>
 800eec4:	9105      	str	r1, [sp, #20]
 800eec6:	e7c4      	b.n	800ee52 <_vfiprintf_r+0x156>
 800eec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eecc:	4604      	mov	r4, r0
 800eece:	2301      	movs	r3, #1
 800eed0:	e7f0      	b.n	800eeb4 <_vfiprintf_r+0x1b8>
 800eed2:	ab03      	add	r3, sp, #12
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	462a      	mov	r2, r5
 800eed8:	4b12      	ldr	r3, [pc, #72]	@ (800ef24 <_vfiprintf_r+0x228>)
 800eeda:	a904      	add	r1, sp, #16
 800eedc:	4630      	mov	r0, r6
 800eede:	f7fd fbf9 	bl	800c6d4 <_printf_float>
 800eee2:	4607      	mov	r7, r0
 800eee4:	1c78      	adds	r0, r7, #1
 800eee6:	d1d6      	bne.n	800ee96 <_vfiprintf_r+0x19a>
 800eee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eeea:	07d9      	lsls	r1, r3, #31
 800eeec:	d405      	bmi.n	800eefa <_vfiprintf_r+0x1fe>
 800eeee:	89ab      	ldrh	r3, [r5, #12]
 800eef0:	059a      	lsls	r2, r3, #22
 800eef2:	d402      	bmi.n	800eefa <_vfiprintf_r+0x1fe>
 800eef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eef6:	f7fe fa0b 	bl	800d310 <__retarget_lock_release_recursive>
 800eefa:	89ab      	ldrh	r3, [r5, #12]
 800eefc:	065b      	lsls	r3, r3, #25
 800eefe:	f53f af1f 	bmi.w	800ed40 <_vfiprintf_r+0x44>
 800ef02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef04:	e71e      	b.n	800ed44 <_vfiprintf_r+0x48>
 800ef06:	ab03      	add	r3, sp, #12
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	462a      	mov	r2, r5
 800ef0c:	4b05      	ldr	r3, [pc, #20]	@ (800ef24 <_vfiprintf_r+0x228>)
 800ef0e:	a904      	add	r1, sp, #16
 800ef10:	4630      	mov	r0, r6
 800ef12:	f7fd fe77 	bl	800cc04 <_printf_i>
 800ef16:	e7e4      	b.n	800eee2 <_vfiprintf_r+0x1e6>
 800ef18:	0800fa38 	.word	0x0800fa38
 800ef1c:	0800fa42 	.word	0x0800fa42
 800ef20:	0800c6d5 	.word	0x0800c6d5
 800ef24:	0800ecd7 	.word	0x0800ecd7
 800ef28:	0800fa3e 	.word	0x0800fa3e

0800ef2c <__swbuf_r>:
 800ef2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2e:	460e      	mov	r6, r1
 800ef30:	4614      	mov	r4, r2
 800ef32:	4605      	mov	r5, r0
 800ef34:	b118      	cbz	r0, 800ef3e <__swbuf_r+0x12>
 800ef36:	6a03      	ldr	r3, [r0, #32]
 800ef38:	b90b      	cbnz	r3, 800ef3e <__swbuf_r+0x12>
 800ef3a:	f7fe f80f 	bl	800cf5c <__sinit>
 800ef3e:	69a3      	ldr	r3, [r4, #24]
 800ef40:	60a3      	str	r3, [r4, #8]
 800ef42:	89a3      	ldrh	r3, [r4, #12]
 800ef44:	071a      	lsls	r2, r3, #28
 800ef46:	d501      	bpl.n	800ef4c <__swbuf_r+0x20>
 800ef48:	6923      	ldr	r3, [r4, #16]
 800ef4a:	b943      	cbnz	r3, 800ef5e <__swbuf_r+0x32>
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f000 f82a 	bl	800efa8 <__swsetup_r>
 800ef54:	b118      	cbz	r0, 800ef5e <__swbuf_r+0x32>
 800ef56:	f04f 37ff 	mov.w	r7, #4294967295
 800ef5a:	4638      	mov	r0, r7
 800ef5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef5e:	6823      	ldr	r3, [r4, #0]
 800ef60:	6922      	ldr	r2, [r4, #16]
 800ef62:	1a98      	subs	r0, r3, r2
 800ef64:	6963      	ldr	r3, [r4, #20]
 800ef66:	b2f6      	uxtb	r6, r6
 800ef68:	4283      	cmp	r3, r0
 800ef6a:	4637      	mov	r7, r6
 800ef6c:	dc05      	bgt.n	800ef7a <__swbuf_r+0x4e>
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4628      	mov	r0, r5
 800ef72:	f7ff fdf1 	bl	800eb58 <_fflush_r>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d1ed      	bne.n	800ef56 <__swbuf_r+0x2a>
 800ef7a:	68a3      	ldr	r3, [r4, #8]
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	60a3      	str	r3, [r4, #8]
 800ef80:	6823      	ldr	r3, [r4, #0]
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	6022      	str	r2, [r4, #0]
 800ef86:	701e      	strb	r6, [r3, #0]
 800ef88:	6962      	ldr	r2, [r4, #20]
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d004      	beq.n	800ef9a <__swbuf_r+0x6e>
 800ef90:	89a3      	ldrh	r3, [r4, #12]
 800ef92:	07db      	lsls	r3, r3, #31
 800ef94:	d5e1      	bpl.n	800ef5a <__swbuf_r+0x2e>
 800ef96:	2e0a      	cmp	r6, #10
 800ef98:	d1df      	bne.n	800ef5a <__swbuf_r+0x2e>
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f7ff fddb 	bl	800eb58 <_fflush_r>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d0d9      	beq.n	800ef5a <__swbuf_r+0x2e>
 800efa6:	e7d6      	b.n	800ef56 <__swbuf_r+0x2a>

0800efa8 <__swsetup_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4b29      	ldr	r3, [pc, #164]	@ (800f050 <__swsetup_r+0xa8>)
 800efac:	4605      	mov	r5, r0
 800efae:	6818      	ldr	r0, [r3, #0]
 800efb0:	460c      	mov	r4, r1
 800efb2:	b118      	cbz	r0, 800efbc <__swsetup_r+0x14>
 800efb4:	6a03      	ldr	r3, [r0, #32]
 800efb6:	b90b      	cbnz	r3, 800efbc <__swsetup_r+0x14>
 800efb8:	f7fd ffd0 	bl	800cf5c <__sinit>
 800efbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc0:	0719      	lsls	r1, r3, #28
 800efc2:	d422      	bmi.n	800f00a <__swsetup_r+0x62>
 800efc4:	06da      	lsls	r2, r3, #27
 800efc6:	d407      	bmi.n	800efd8 <__swsetup_r+0x30>
 800efc8:	2209      	movs	r2, #9
 800efca:	602a      	str	r2, [r5, #0]
 800efcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efd0:	81a3      	strh	r3, [r4, #12]
 800efd2:	f04f 30ff 	mov.w	r0, #4294967295
 800efd6:	e033      	b.n	800f040 <__swsetup_r+0x98>
 800efd8:	0758      	lsls	r0, r3, #29
 800efda:	d512      	bpl.n	800f002 <__swsetup_r+0x5a>
 800efdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efde:	b141      	cbz	r1, 800eff2 <__swsetup_r+0x4a>
 800efe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efe4:	4299      	cmp	r1, r3
 800efe6:	d002      	beq.n	800efee <__swsetup_r+0x46>
 800efe8:	4628      	mov	r0, r5
 800efea:	f7ff f80d 	bl	800e008 <_free_r>
 800efee:	2300      	movs	r3, #0
 800eff0:	6363      	str	r3, [r4, #52]	@ 0x34
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eff8:	81a3      	strh	r3, [r4, #12]
 800effa:	2300      	movs	r3, #0
 800effc:	6063      	str	r3, [r4, #4]
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	f043 0308 	orr.w	r3, r3, #8
 800f008:	81a3      	strh	r3, [r4, #12]
 800f00a:	6923      	ldr	r3, [r4, #16]
 800f00c:	b94b      	cbnz	r3, 800f022 <__swsetup_r+0x7a>
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f018:	d003      	beq.n	800f022 <__swsetup_r+0x7a>
 800f01a:	4621      	mov	r1, r4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f000 f88b 	bl	800f138 <__smakebuf_r>
 800f022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f026:	f013 0201 	ands.w	r2, r3, #1
 800f02a:	d00a      	beq.n	800f042 <__swsetup_r+0x9a>
 800f02c:	2200      	movs	r2, #0
 800f02e:	60a2      	str	r2, [r4, #8]
 800f030:	6962      	ldr	r2, [r4, #20]
 800f032:	4252      	negs	r2, r2
 800f034:	61a2      	str	r2, [r4, #24]
 800f036:	6922      	ldr	r2, [r4, #16]
 800f038:	b942      	cbnz	r2, 800f04c <__swsetup_r+0xa4>
 800f03a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f03e:	d1c5      	bne.n	800efcc <__swsetup_r+0x24>
 800f040:	bd38      	pop	{r3, r4, r5, pc}
 800f042:	0799      	lsls	r1, r3, #30
 800f044:	bf58      	it	pl
 800f046:	6962      	ldrpl	r2, [r4, #20]
 800f048:	60a2      	str	r2, [r4, #8]
 800f04a:	e7f4      	b.n	800f036 <__swsetup_r+0x8e>
 800f04c:	2000      	movs	r0, #0
 800f04e:	e7f7      	b.n	800f040 <__swsetup_r+0x98>
 800f050:	20000154 	.word	0x20000154

0800f054 <_raise_r>:
 800f054:	291f      	cmp	r1, #31
 800f056:	b538      	push	{r3, r4, r5, lr}
 800f058:	4605      	mov	r5, r0
 800f05a:	460c      	mov	r4, r1
 800f05c:	d904      	bls.n	800f068 <_raise_r+0x14>
 800f05e:	2316      	movs	r3, #22
 800f060:	6003      	str	r3, [r0, #0]
 800f062:	f04f 30ff 	mov.w	r0, #4294967295
 800f066:	bd38      	pop	{r3, r4, r5, pc}
 800f068:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f06a:	b112      	cbz	r2, 800f072 <_raise_r+0x1e>
 800f06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f070:	b94b      	cbnz	r3, 800f086 <_raise_r+0x32>
 800f072:	4628      	mov	r0, r5
 800f074:	f000 f830 	bl	800f0d8 <_getpid_r>
 800f078:	4622      	mov	r2, r4
 800f07a:	4601      	mov	r1, r0
 800f07c:	4628      	mov	r0, r5
 800f07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f082:	f000 b817 	b.w	800f0b4 <_kill_r>
 800f086:	2b01      	cmp	r3, #1
 800f088:	d00a      	beq.n	800f0a0 <_raise_r+0x4c>
 800f08a:	1c59      	adds	r1, r3, #1
 800f08c:	d103      	bne.n	800f096 <_raise_r+0x42>
 800f08e:	2316      	movs	r3, #22
 800f090:	6003      	str	r3, [r0, #0]
 800f092:	2001      	movs	r0, #1
 800f094:	e7e7      	b.n	800f066 <_raise_r+0x12>
 800f096:	2100      	movs	r1, #0
 800f098:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f09c:	4620      	mov	r0, r4
 800f09e:	4798      	blx	r3
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	e7e0      	b.n	800f066 <_raise_r+0x12>

0800f0a4 <raise>:
 800f0a4:	4b02      	ldr	r3, [pc, #8]	@ (800f0b0 <raise+0xc>)
 800f0a6:	4601      	mov	r1, r0
 800f0a8:	6818      	ldr	r0, [r3, #0]
 800f0aa:	f7ff bfd3 	b.w	800f054 <_raise_r>
 800f0ae:	bf00      	nop
 800f0b0:	20000154 	.word	0x20000154

0800f0b4 <_kill_r>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4d07      	ldr	r5, [pc, #28]	@ (800f0d4 <_kill_r+0x20>)
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	4608      	mov	r0, r1
 800f0be:	4611      	mov	r1, r2
 800f0c0:	602b      	str	r3, [r5, #0]
 800f0c2:	f7f2 fe11 	bl	8001ce8 <_kill>
 800f0c6:	1c43      	adds	r3, r0, #1
 800f0c8:	d102      	bne.n	800f0d0 <_kill_r+0x1c>
 800f0ca:	682b      	ldr	r3, [r5, #0]
 800f0cc:	b103      	cbz	r3, 800f0d0 <_kill_r+0x1c>
 800f0ce:	6023      	str	r3, [r4, #0]
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20003578 	.word	0x20003578

0800f0d8 <_getpid_r>:
 800f0d8:	f7f2 bdfe 	b.w	8001cd8 <_getpid>

0800f0dc <_malloc_usable_size_r>:
 800f0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0e0:	1f18      	subs	r0, r3, #4
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	bfbc      	itt	lt
 800f0e6:	580b      	ldrlt	r3, [r1, r0]
 800f0e8:	18c0      	addlt	r0, r0, r3
 800f0ea:	4770      	bx	lr

0800f0ec <__swhatbuf_r>:
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	b096      	sub	sp, #88	@ 0x58
 800f0f8:	4615      	mov	r5, r2
 800f0fa:	461e      	mov	r6, r3
 800f0fc:	da0d      	bge.n	800f11a <__swhatbuf_r+0x2e>
 800f0fe:	89a3      	ldrh	r3, [r4, #12]
 800f100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f104:	f04f 0100 	mov.w	r1, #0
 800f108:	bf14      	ite	ne
 800f10a:	2340      	movne	r3, #64	@ 0x40
 800f10c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f110:	2000      	movs	r0, #0
 800f112:	6031      	str	r1, [r6, #0]
 800f114:	602b      	str	r3, [r5, #0]
 800f116:	b016      	add	sp, #88	@ 0x58
 800f118:	bd70      	pop	{r4, r5, r6, pc}
 800f11a:	466a      	mov	r2, sp
 800f11c:	f000 f848 	bl	800f1b0 <_fstat_r>
 800f120:	2800      	cmp	r0, #0
 800f122:	dbec      	blt.n	800f0fe <__swhatbuf_r+0x12>
 800f124:	9901      	ldr	r1, [sp, #4]
 800f126:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f12a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f12e:	4259      	negs	r1, r3
 800f130:	4159      	adcs	r1, r3
 800f132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f136:	e7eb      	b.n	800f110 <__swhatbuf_r+0x24>

0800f138 <__smakebuf_r>:
 800f138:	898b      	ldrh	r3, [r1, #12]
 800f13a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f13c:	079d      	lsls	r5, r3, #30
 800f13e:	4606      	mov	r6, r0
 800f140:	460c      	mov	r4, r1
 800f142:	d507      	bpl.n	800f154 <__smakebuf_r+0x1c>
 800f144:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f148:	6023      	str	r3, [r4, #0]
 800f14a:	6123      	str	r3, [r4, #16]
 800f14c:	2301      	movs	r3, #1
 800f14e:	6163      	str	r3, [r4, #20]
 800f150:	b003      	add	sp, #12
 800f152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f154:	ab01      	add	r3, sp, #4
 800f156:	466a      	mov	r2, sp
 800f158:	f7ff ffc8 	bl	800f0ec <__swhatbuf_r>
 800f15c:	9f00      	ldr	r7, [sp, #0]
 800f15e:	4605      	mov	r5, r0
 800f160:	4639      	mov	r1, r7
 800f162:	4630      	mov	r0, r6
 800f164:	f7fd f906 	bl	800c374 <_malloc_r>
 800f168:	b948      	cbnz	r0, 800f17e <__smakebuf_r+0x46>
 800f16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f16e:	059a      	lsls	r2, r3, #22
 800f170:	d4ee      	bmi.n	800f150 <__smakebuf_r+0x18>
 800f172:	f023 0303 	bic.w	r3, r3, #3
 800f176:	f043 0302 	orr.w	r3, r3, #2
 800f17a:	81a3      	strh	r3, [r4, #12]
 800f17c:	e7e2      	b.n	800f144 <__smakebuf_r+0xc>
 800f17e:	89a3      	ldrh	r3, [r4, #12]
 800f180:	6020      	str	r0, [r4, #0]
 800f182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f186:	81a3      	strh	r3, [r4, #12]
 800f188:	9b01      	ldr	r3, [sp, #4]
 800f18a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f18e:	b15b      	cbz	r3, 800f1a8 <__smakebuf_r+0x70>
 800f190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f194:	4630      	mov	r0, r6
 800f196:	f000 f81d 	bl	800f1d4 <_isatty_r>
 800f19a:	b128      	cbz	r0, 800f1a8 <__smakebuf_r+0x70>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	f023 0303 	bic.w	r3, r3, #3
 800f1a2:	f043 0301 	orr.w	r3, r3, #1
 800f1a6:	81a3      	strh	r3, [r4, #12]
 800f1a8:	89a3      	ldrh	r3, [r4, #12]
 800f1aa:	431d      	orrs	r5, r3
 800f1ac:	81a5      	strh	r5, [r4, #12]
 800f1ae:	e7cf      	b.n	800f150 <__smakebuf_r+0x18>

0800f1b0 <_fstat_r>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4d07      	ldr	r5, [pc, #28]	@ (800f1d0 <_fstat_r+0x20>)
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	4608      	mov	r0, r1
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	602b      	str	r3, [r5, #0]
 800f1be:	f7f2 fdf3 	bl	8001da8 <_fstat>
 800f1c2:	1c43      	adds	r3, r0, #1
 800f1c4:	d102      	bne.n	800f1cc <_fstat_r+0x1c>
 800f1c6:	682b      	ldr	r3, [r5, #0]
 800f1c8:	b103      	cbz	r3, 800f1cc <_fstat_r+0x1c>
 800f1ca:	6023      	str	r3, [r4, #0]
 800f1cc:	bd38      	pop	{r3, r4, r5, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20003578 	.word	0x20003578

0800f1d4 <_isatty_r>:
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	4d06      	ldr	r5, [pc, #24]	@ (800f1f0 <_isatty_r+0x1c>)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4608      	mov	r0, r1
 800f1de:	602b      	str	r3, [r5, #0]
 800f1e0:	f7f2 fdf2 	bl	8001dc8 <_isatty>
 800f1e4:	1c43      	adds	r3, r0, #1
 800f1e6:	d102      	bne.n	800f1ee <_isatty_r+0x1a>
 800f1e8:	682b      	ldr	r3, [r5, #0]
 800f1ea:	b103      	cbz	r3, 800f1ee <_isatty_r+0x1a>
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	bd38      	pop	{r3, r4, r5, pc}
 800f1f0:	20003578 	.word	0x20003578

0800f1f4 <_init>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	bf00      	nop
 800f1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fa:	bc08      	pop	{r3}
 800f1fc:	469e      	mov	lr, r3
 800f1fe:	4770      	bx	lr

0800f200 <_fini>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	bf00      	nop
 800f204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f206:	bc08      	pop	{r3}
 800f208:	469e      	mov	lr, r3
 800f20a:	4770      	bx	lr
