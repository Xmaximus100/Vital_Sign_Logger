
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800ad14  0800ad14  0000bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b11c  0800b11c  0000d124  2**0
                  CONTENTS
  4 .ARM          00000008  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b124  0800b124  0000d124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b124  0800b124  0000c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b128  0800b128  0000c128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  0800b12c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000128  0800b250  0000d128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d98  0800b250  0000dd98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d05  00000000  00000000  0000d154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005532  00000000  00000000  0002fe59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  00035390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001711  00000000  00000000  000371a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5a8  00000000  00000000  000388b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000263a7  00000000  00000000  00065e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052a5  00000000  00000000  0008c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001914ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000893c  00000000  00000000  001914f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  00199e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acfc 	.word	0x0800acfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0800acfc 	.word	0x0800acfc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b96a 	b.w	8000944 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	460c      	mov	r4, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14e      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000694:	4694      	mov	ip, r2
 8000696:	458c      	cmp	ip, r1
 8000698:	4686      	mov	lr, r0
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	d962      	bls.n	8000766 <__udivmoddi4+0xde>
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0320 	rsb	r3, r2, #32
 80006a6:	4091      	lsls	r1, r2
 80006a8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b0:	4319      	orrs	r1, r3
 80006b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ba:	fa1f f68c 	uxth.w	r6, ip
 80006be:	fbb1 f4f7 	udiv	r4, r1, r7
 80006c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006c6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ce:	fb04 f106 	mul.w	r1, r4, r6
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f104 30ff 	add.w	r0, r4, #4294967295
 80006de:	f080 8112 	bcs.w	8000906 <__udivmoddi4+0x27e>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 810f 	bls.w	8000906 <__udivmoddi4+0x27e>
 80006e8:	3c02      	subs	r4, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a59      	subs	r1, r3, r1
 80006ee:	fa1f f38e 	uxth.w	r3, lr
 80006f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f6:	fb07 1110 	mls	r1, r7, r0, r1
 80006fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006fe:	fb00 f606 	mul.w	r6, r0, r6
 8000702:	429e      	cmp	r6, r3
 8000704:	d90a      	bls.n	800071c <__udivmoddi4+0x94>
 8000706:	eb1c 0303 	adds.w	r3, ip, r3
 800070a:	f100 31ff 	add.w	r1, r0, #4294967295
 800070e:	f080 80fc 	bcs.w	800090a <__udivmoddi4+0x282>
 8000712:	429e      	cmp	r6, r3
 8000714:	f240 80f9 	bls.w	800090a <__udivmoddi4+0x282>
 8000718:	4463      	add	r3, ip
 800071a:	3802      	subs	r0, #2
 800071c:	1b9b      	subs	r3, r3, r6
 800071e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000722:	2100      	movs	r1, #0
 8000724:	b11d      	cbz	r5, 800072e <__udivmoddi4+0xa6>
 8000726:	40d3      	lsrs	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	e9c5 3200 	strd	r3, r2, [r5]
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d905      	bls.n	8000742 <__udivmoddi4+0xba>
 8000736:	b10d      	cbz	r5, 800073c <__udivmoddi4+0xb4>
 8000738:	e9c5 0100 	strd	r0, r1, [r5]
 800073c:	2100      	movs	r1, #0
 800073e:	4608      	mov	r0, r1
 8000740:	e7f5      	b.n	800072e <__udivmoddi4+0xa6>
 8000742:	fab3 f183 	clz	r1, r3
 8000746:	2900      	cmp	r1, #0
 8000748:	d146      	bne.n	80007d8 <__udivmoddi4+0x150>
 800074a:	42a3      	cmp	r3, r4
 800074c:	d302      	bcc.n	8000754 <__udivmoddi4+0xcc>
 800074e:	4290      	cmp	r0, r2
 8000750:	f0c0 80f0 	bcc.w	8000934 <__udivmoddi4+0x2ac>
 8000754:	1a86      	subs	r6, r0, r2
 8000756:	eb64 0303 	sbc.w	r3, r4, r3
 800075a:	2001      	movs	r0, #1
 800075c:	2d00      	cmp	r5, #0
 800075e:	d0e6      	beq.n	800072e <__udivmoddi4+0xa6>
 8000760:	e9c5 6300 	strd	r6, r3, [r5]
 8000764:	e7e3      	b.n	800072e <__udivmoddi4+0xa6>
 8000766:	2a00      	cmp	r2, #0
 8000768:	f040 8090 	bne.w	800088c <__udivmoddi4+0x204>
 800076c:	eba1 040c 	sub.w	r4, r1, ip
 8000770:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000774:	fa1f f78c 	uxth.w	r7, ip
 8000778:	2101      	movs	r1, #1
 800077a:	fbb4 f6f8 	udiv	r6, r4, r8
 800077e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000782:	fb08 4416 	mls	r4, r8, r6, r4
 8000786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078a:	fb07 f006 	mul.w	r0, r7, r6
 800078e:	4298      	cmp	r0, r3
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x11c>
 8000792:	eb1c 0303 	adds.w	r3, ip, r3
 8000796:	f106 34ff 	add.w	r4, r6, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x11a>
 800079c:	4298      	cmp	r0, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2b4>
 80007a2:	4626      	mov	r6, r4
 80007a4:	1a1c      	subs	r4, r3, r0
 80007a6:	fa1f f38e 	uxth.w	r3, lr
 80007aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ae:	fb08 4410 	mls	r4, r8, r0, r4
 80007b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007b6:	fb00 f707 	mul.w	r7, r0, r7
 80007ba:	429f      	cmp	r7, r3
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x148>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c6:	d202      	bcs.n	80007ce <__udivmoddi4+0x146>
 80007c8:	429f      	cmp	r7, r3
 80007ca:	f200 80b0 	bhi.w	800092e <__udivmoddi4+0x2a6>
 80007ce:	4620      	mov	r0, r4
 80007d0:	1bdb      	subs	r3, r3, r7
 80007d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d6:	e7a5      	b.n	8000724 <__udivmoddi4+0x9c>
 80007d8:	f1c1 0620 	rsb	r6, r1, #32
 80007dc:	408b      	lsls	r3, r1
 80007de:	fa22 f706 	lsr.w	r7, r2, r6
 80007e2:	431f      	orrs	r7, r3
 80007e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007e8:	fa04 f301 	lsl.w	r3, r4, r1
 80007ec:	ea43 030c 	orr.w	r3, r3, ip
 80007f0:	40f4      	lsrs	r4, r6
 80007f2:	fa00 f801 	lsl.w	r8, r0, r1
 80007f6:	0c38      	lsrs	r0, r7, #16
 80007f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000800:	fa1f fc87 	uxth.w	ip, r7
 8000804:	fb00 441e 	mls	r4, r0, lr, r4
 8000808:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080c:	fb0e f90c 	mul.w	r9, lr, ip
 8000810:	45a1      	cmp	r9, r4
 8000812:	fa02 f201 	lsl.w	r2, r2, r1
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x1a6>
 8000818:	193c      	adds	r4, r7, r4
 800081a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800081e:	f080 8084 	bcs.w	800092a <__udivmoddi4+0x2a2>
 8000822:	45a1      	cmp	r9, r4
 8000824:	f240 8081 	bls.w	800092a <__udivmoddi4+0x2a2>
 8000828:	f1ae 0e02 	sub.w	lr, lr, #2
 800082c:	443c      	add	r4, r7
 800082e:	eba4 0409 	sub.w	r4, r4, r9
 8000832:	fa1f f983 	uxth.w	r9, r3
 8000836:	fbb4 f3f0 	udiv	r3, r4, r0
 800083a:	fb00 4413 	mls	r4, r0, r3, r4
 800083e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000842:	fb03 fc0c 	mul.w	ip, r3, ip
 8000846:	45a4      	cmp	ip, r4
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x1d2>
 800084a:	193c      	adds	r4, r7, r4
 800084c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000850:	d267      	bcs.n	8000922 <__udivmoddi4+0x29a>
 8000852:	45a4      	cmp	ip, r4
 8000854:	d965      	bls.n	8000922 <__udivmoddi4+0x29a>
 8000856:	3b02      	subs	r3, #2
 8000858:	443c      	add	r4, r7
 800085a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800085e:	fba0 9302 	umull	r9, r3, r0, r2
 8000862:	eba4 040c 	sub.w	r4, r4, ip
 8000866:	429c      	cmp	r4, r3
 8000868:	46ce      	mov	lr, r9
 800086a:	469c      	mov	ip, r3
 800086c:	d351      	bcc.n	8000912 <__udivmoddi4+0x28a>
 800086e:	d04e      	beq.n	800090e <__udivmoddi4+0x286>
 8000870:	b155      	cbz	r5, 8000888 <__udivmoddi4+0x200>
 8000872:	ebb8 030e 	subs.w	r3, r8, lr
 8000876:	eb64 040c 	sbc.w	r4, r4, ip
 800087a:	fa04 f606 	lsl.w	r6, r4, r6
 800087e:	40cb      	lsrs	r3, r1
 8000880:	431e      	orrs	r6, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c5 6400 	strd	r6, r4, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	e750      	b.n	800072e <__udivmoddi4+0xa6>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f103 	lsr.w	r1, r0, r3
 8000894:	fa0c fc02 	lsl.w	ip, ip, r2
 8000898:	fa24 f303 	lsr.w	r3, r4, r3
 800089c:	4094      	lsls	r4, r2
 800089e:	430c      	orrs	r4, r1
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a8:	fa1f f78c 	uxth.w	r7, ip
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3110 	mls	r1, r8, r0, r3
 80008b4:	0c23      	lsrs	r3, r4, #16
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f107 	mul.w	r1, r0, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x24c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ca:	d22c      	bcs.n	8000926 <__udivmoddi4+0x29e>
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d92a      	bls.n	8000926 <__udivmoddi4+0x29e>
 80008d0:	3802      	subs	r0, #2
 80008d2:	4463      	add	r3, ip
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008dc:	fb08 3311 	mls	r3, r8, r1, r3
 80008e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e4:	fb01 f307 	mul.w	r3, r1, r7
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x276>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008f4:	d213      	bcs.n	800091e <__udivmoddi4+0x296>
 80008f6:	42a3      	cmp	r3, r4
 80008f8:	d911      	bls.n	800091e <__udivmoddi4+0x296>
 80008fa:	3902      	subs	r1, #2
 80008fc:	4464      	add	r4, ip
 80008fe:	1ae4      	subs	r4, r4, r3
 8000900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000904:	e739      	b.n	800077a <__udivmoddi4+0xf2>
 8000906:	4604      	mov	r4, r0
 8000908:	e6f0      	b.n	80006ec <__udivmoddi4+0x64>
 800090a:	4608      	mov	r0, r1
 800090c:	e706      	b.n	800071c <__udivmoddi4+0x94>
 800090e:	45c8      	cmp	r8, r9
 8000910:	d2ae      	bcs.n	8000870 <__udivmoddi4+0x1e8>
 8000912:	ebb9 0e02 	subs.w	lr, r9, r2
 8000916:	eb63 0c07 	sbc.w	ip, r3, r7
 800091a:	3801      	subs	r0, #1
 800091c:	e7a8      	b.n	8000870 <__udivmoddi4+0x1e8>
 800091e:	4631      	mov	r1, r6
 8000920:	e7ed      	b.n	80008fe <__udivmoddi4+0x276>
 8000922:	4603      	mov	r3, r0
 8000924:	e799      	b.n	800085a <__udivmoddi4+0x1d2>
 8000926:	4630      	mov	r0, r6
 8000928:	e7d4      	b.n	80008d4 <__udivmoddi4+0x24c>
 800092a:	46d6      	mov	lr, sl
 800092c:	e77f      	b.n	800082e <__udivmoddi4+0x1a6>
 800092e:	4463      	add	r3, ip
 8000930:	3802      	subs	r0, #2
 8000932:	e74d      	b.n	80007d0 <__udivmoddi4+0x148>
 8000934:	4606      	mov	r6, r0
 8000936:	4623      	mov	r3, r4
 8000938:	4608      	mov	r0, r1
 800093a:	e70f      	b.n	800075c <__udivmoddi4+0xd4>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	e730      	b.n	80007a4 <__udivmoddi4+0x11c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

HAL_StatusTypeDef Initialize_Delay()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <Initialize_Delay+0x10>)
 800094e:	f004 fa63 	bl	8004e18 <HAL_TIM_Base_Start>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000230 	.word	0x20000230

0800095c <delay_us>:

void delay_us(uint32_t us)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	taskENTER_CRITICAL();
 8000964:	f008 fc48 	bl	80091f8 <vPortEnterCritical>
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000968:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <delay_us+0x44>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096e:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000974:	e003      	b.n	800097e <delay_us+0x22>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <delay_us+0x44>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097c:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	bfb8      	it	lt
 8000988:	425b      	neglt	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4293      	cmp	r3, r2
 8000990:	d8f1      	bhi.n	8000976 <delay_us+0x1a>
	}
	taskEXIT_CRITICAL();
 8000992:	f008 fc63 	bl	800925c <vPortExitCritical>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000

080009a4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f001 fe8f 	bl	80026d0 <HAL_Delay>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009c0:	4a0c      	ldr	r2, [pc, #48]	@ (80009f4 <MX_FREERTOS_Init+0x38>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <MX_FREERTOS_Init+0x3c>)
 80009c6:	f006 f9f3 	bl	8006db0 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <MX_FREERTOS_Init+0x40>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 80009d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <MX_FREERTOS_Init+0x44>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <MX_FREERTOS_Init+0x48>)
 80009d6:	f006 f9eb 	bl	8006db0 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <MX_FREERTOS_Init+0x4c>)
 80009de:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <MX_FREERTOS_Init+0x50>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	480a      	ldr	r0, [pc, #40]	@ (8000a10 <MX_FREERTOS_Init+0x54>)
 80009e6:	f006 f9e3 	bl	8006db0 <osThreadNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <MX_FREERTOS_Init+0x58>)
 80009ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800ae84 	.word	0x0800ae84
 80009f8:	08000a19 	.word	0x08000a19
 80009fc:	20000170 	.word	0x20000170
 8000a00:	0800aea8 	.word	0x0800aea8
 8000a04:	08000a29 	.word	0x08000a29
 8000a08:	20000174 	.word	0x20000174
 8000a0c:	0800aecc 	.word	0x0800aecc
 8000a10:	08000a79 	.word	0x08000a79
 8000a14:	20000178 	.word	0x20000178

08000a18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f006 fa57 	bl	8006ed4 <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <StartDefaultTask+0x8>

08000a28 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
	uint8_t received_data[32];
	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <StartADC+0x40>)
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <StartADC+0x44>)
 8000a36:	f004 fe1b 	bl	8005670 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
//	  UARTLog("Hello World\n\r");
//	  osDelay(1);
	  if(received_lines > 0){
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <StartADC+0x48>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0fb      	beq.n	8000a3a <StartADC+0x12>
		  ParserTakeLine(&buffer, received_data);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4619      	mov	r1, r3
 8000a48:	480a      	ldr	r0, [pc, #40]	@ (8000a74 <StartADC+0x4c>)
 8000a4a:	f000 f9a5 	bl	8000d98 <ParserTakeLine>
		  ParserParse((char*)received_data);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f9c6 	bl	8000de4 <ParserParse>
		  received_lines--;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <StartADC+0x48>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <StartADC+0x48>)
 8000a62:	701a      	strb	r2, [r3, #0]
	  if(received_lines > 0){
 8000a64:	e7e9      	b.n	8000a3a <StartADC+0x12>
 8000a66:	bf00      	nop
 8000a68:	2000016c 	.word	0x2000016c
 8000a6c:	2000027c 	.word	0x2000027c
 8000a70:	2000016d 	.word	0x2000016d
 8000a74:	20000148 	.word	0x20000148

08000a78 <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
//	ADF5355_Param_Init();
//	basic_example_main(&hadf5355);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f006 fa27 	bl	8006ed4 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <StartPLL+0x8>

08000a88 <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x4c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d117      	bne.n	8000aca <HAL_UART_RxCpltCallback+0x42>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp)){
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x50>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480e      	ldr	r0, [pc, #56]	@ (8000adc <HAL_UART_RxCpltCallback+0x54>)
 8000aa2:	f000 fa2f 	bl	8000f04 <WriteToBuffer>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d109      	bne.n	8000ac0 <HAL_UART_RxCpltCallback+0x38>
			if(receive_tmp == ENDLINE){
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x50>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b0a      	cmp	r3, #10
 8000ab2:	d105      	bne.n	8000ac0 <HAL_UART_RxCpltCallback+0x38>
				received_lines++;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x58>)
 8000abe:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4905      	ldr	r1, [pc, #20]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x50>)
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x5c>)
 8000ac6:	f004 fdd3 	bl	8005670 <HAL_UART_Receive_IT>
	}
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	2000016c 	.word	0x2000016c
 8000adc:	20000148 	.word	0x20000148
 8000ae0:	2000016d 	.word	0x2000016d
 8000ae4:	2000027c 	.word	0x2000027c

08000ae8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b57      	ldr	r3, [pc, #348]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a56      	ldr	r2, [pc, #344]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b54      	ldr	r3, [pc, #336]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	4b51      	ldr	r3, [pc, #324]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a50      	ldr	r2, [pc, #320]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b4e      	ldr	r3, [pc, #312]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a4a      	ldr	r2, [pc, #296]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b48      	ldr	r3, [pc, #288]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b45      	ldr	r3, [pc, #276]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a44      	ldr	r2, [pc, #272]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b42      	ldr	r3, [pc, #264]	@ (8000c5c <MX_GPIO_Init+0x174>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2120      	movs	r1, #32
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f002 f9d7 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <MX_GPIO_Init+0x178>)
 8000b70:	f002 f9d2 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CNVST_GPIO_Port, AD_CNVST_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7a:	483a      	ldr	r0, [pc, #232]	@ (8000c64 <MX_GPIO_Init+0x17c>)
 8000b7c:	f002 f9cc 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADF_CS_GPIO_Port, ADF_CS_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f002 f9c5 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|AD_BUSY_Pin;
 8000b8e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482f      	ldr	r0, [pc, #188]	@ (8000c64 <MX_GPIO_Init+0x17c>)
 8000ba6:	f001 ff19 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D15_Pin;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D15_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4829      	ldr	r0, [pc, #164]	@ (8000c64 <MX_GPIO_Init+0x17c>)
 8000bbe:	f001 ff0d 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bdc:	f001 fefe 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481a      	ldr	r0, [pc, #104]	@ (8000c60 <MX_GPIO_Init+0x178>)
 8000bf8:	f001 fef0 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D9_Pin|D10_Pin
 8000bfc:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8000c00:	617b      	str	r3, [r7, #20]
                          |D11_Pin|D12_Pin|D13_Pin|D14_Pin
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <MX_GPIO_Init+0x178>)
 8000c12:	f001 fee3 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_CNVST_Pin;
 8000c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <MX_GPIO_Init+0x17c>)
 8000c30:	f001 fed4 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin;
 8000c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADF_CS_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 fec4 	bl	80029dc <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400
 8000c64:	48000800 	.word	0x48000800

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f001 fcf0 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f814 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f7ff ff38 	bl	8000ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c78:	f000 fc48 	bl	800150c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000c7c:	f000 fbf0 	bl	8001460 <MX_TIM6_Init>
  MX_SPI3_Init();
 8000c80:	f000 f99c 	bl	8000fbc <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c84:	f000 f85b 	bl	8000d3e <MX_NVIC_Init>
  Initialize_Delay();
 8000c88:	f7ff fe5e 	bl	8000948 <Initialize_Delay>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c8c:	f006 f846 	bl	8006d1c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c90:	f7ff fe94 	bl	80009bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c94:	f006 f866 	bl	8006d64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <main+0x30>

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b096      	sub	sp, #88	@ 0x58
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2244      	movs	r2, #68	@ 0x44
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f009 f82f 	bl	8009d0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cc2:	f002 f967 	bl	8002f94 <HAL_PWREx_ControlVoltageScaling>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ccc:	f000 f85e 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cea:	230a      	movs	r3, #10
 8000cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 f99e 	bl	8003040 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d0a:	f000 f83f 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2303      	movs	r3, #3
 8000d14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	2104      	movs	r1, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fd66 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d32:	f000 f82b 	bl	8000d8c <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3758      	adds	r7, #88	@ 0x58
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	2017      	movs	r0, #23
 8000d48:	f001 fd9e 	bl	8002888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d4c:	2017      	movs	r0, #23
 8000d4e:	f001 fdb7 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	2026      	movs	r0, #38	@ 0x26
 8000d58:	f001 fd96 	bl	8002888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d5c:	2026      	movs	r0, #38	@ 0x26
 8000d5e:	f001 fdaf 	bl	80028c0 <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7a:	f001 fc89 	bl	8002690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40000c00 	.word	0x40000c00

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <Error_Handler+0x8>

08000d98 <ParserTakeLine>:
	{"POW", "POW set to %ld\n\r", "Type POW between -10 and 10 in dBm\n\r", ADF5355_SetPower, 0},
	{"EN", "EN set to %ld\n\r", "Type EN 0 or 1\n\r", ADF5355_Enable, 0},
	{"RUN", "Configuration succeed\n\r", "Configuration failed\n\r", LoadADF5355, 1},
};

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 8000da6:	f107 030e 	add.w	r3, r7, #14
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8dc 	bl	8000f6a <ReadFromBuffer>
		  if(tmp == ENDLINE){
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	2b0a      	cmp	r3, #10
 8000db6:	d105      	bne.n	8000dc4 <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e004      	b.n	8000dce <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	4413      	add	r3, r2
 8000dca:	7bba      	ldrb	r2, [r7, #14]
 8000dcc:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 8000dd4:	7bbb      	ldrb	r3, [r7, #14]
 8000dd6:	2b0a      	cmp	r3, #10
 8000dd8:	d1e5      	bne.n	8000da6 <ParserTakeLine+0xe>
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <ParserParse>:

void ParserParse(char* received_string){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b096      	sub	sp, #88	@ 0x58
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	char* endptr;
	char* parse_pointer = strtok(received_string, "=");
 8000dec:	4941      	ldr	r1, [pc, #260]	@ (8000ef4 <ParserParse+0x110>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f008 ff96 	bl	8009d20 <strtok>
 8000df4:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int32_t value = strtol(strtok(NULL,","), &endptr, 10);
 8000df6:	4940      	ldr	r1, [pc, #256]	@ (8000ef8 <ParserParse+0x114>)
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f008 ff91 	bl	8009d20 <strtok>
 8000dfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e02:	220a      	movs	r2, #10
 8000e04:	4619      	mov	r1, r3
 8000e06:	f008 fe53 	bl	8009ab0 <strtol>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	643b      	str	r3, [r7, #64]	@ 0x40
	char buffer[54];
	bool cmd_matched = false;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000e14:	2300      	movs	r3, #0
 8000e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8000e18:	e053      	b.n	8000ec2 <ParserParse+0xde>
		if(strcmp(at_cmds[i].command, parse_pointer) == 0){
 8000e1a:	4938      	ldr	r1, [pc, #224]	@ (8000efc <ParserParse+0x118>)
 8000e1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9cf 	bl	80001d0 <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d141      	bne.n	8000ebc <ParserParse+0xd8>
			bool* result = at_cmds[i].function(&value);
 8000e38:	4930      	ldr	r1, [pc, #192]	@ (8000efc <ParserParse+0x118>)
 8000e3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	330c      	adds	r3, #12
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4798      	blx	r3
 8000e52:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (*result == true && (endptr != 0x00 || at_cmds[i].optional_argument == 1)){
 8000e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d01d      	beq.n	8000e98 <ParserParse+0xb4>
 8000e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10a      	bne.n	8000e78 <ParserParse+0x94>
 8000e62:	4926      	ldr	r1, [pc, #152]	@ (8000efc <ParserParse+0x118>)
 8000e64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3310      	adds	r3, #16
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10f      	bne.n	8000e98 <ParserParse+0xb4>
				sprintf(buffer, at_cmds[i].responsePositive, value);
 8000e78:	4920      	ldr	r1, [pc, #128]	@ (8000efc <ParserParse+0x118>)
 8000e7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	3304      	adds	r3, #4
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4618      	mov	r0, r3
 8000e92:	f008 fed9 	bl	8009c48 <siprintf>
 8000e96:	e00e      	b.n	8000eb6 <ParserParse+0xd2>
			}
			else {
				sprintf(buffer, at_cmds[i].responseNegative, value);
 8000e98:	4918      	ldr	r1, [pc, #96]	@ (8000efc <ParserParse+0x118>)
 8000e9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f008 fec9 	bl	8009c48 <siprintf>
			}
			cmd_matched = true;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d9a8      	bls.n	8000e1a <ParserParse+0x36>
		}
	}
	if (!cmd_matched){
 8000ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ecc:	f083 0301 	eor.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <ParserParse+0xfe>
		sprintf(buffer, "Available commands are LED, FREQ, POW, EN and RUN\n\r");
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4909      	ldr	r1, [pc, #36]	@ (8000f00 <ParserParse+0x11c>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 feb3 	bl	8009c48 <siprintf>
	}
	UARTLog(buffer);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fb9c 	bl	8001624 <UARTLog>
}
 8000eec:	bf00      	nop
 8000eee:	3758      	adds	r7, #88	@ 0x58
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	0800ae30 	.word	0x0800ae30
 8000ef8:	0800ae34 	.word	0x0800ae34
 8000efc:	2000004c 	.word	0x2000004c
 8000f00:	0800ae38 	.word	0x0800ae38

08000f04 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	8c1b      	ldrh	r3, [r3, #32]
 8000f14:	3301      	adds	r3, #1
 8000f16:	425a      	negs	r2, r3
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	f002 021f 	and.w	r2, r2, #31
 8000f20:	bf58      	it	pl
 8000f22:	4253      	negpl	r3, r2
 8000f24:	73fb      	strb	r3, [r7, #15]

	if( TempHead == Buffer->Tail) // No room for new data
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d101      	bne.n	8000f36 <WriteToBuffer+0x32>
	{
		return RB_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e013      	b.n	8000f5e <WriteToBuffer+0x5a>
	}
	else
	{
            Buffer->Buffer[Buffer->Head] = Data;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8c1b      	ldrh	r3, [r3, #32]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	78fa      	ldrb	r2, [r7, #3]
 8000f40:	545a      	strb	r2, [r3, r1]

            Buffer->Head++;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	8c1b      	ldrh	r3, [r3, #32]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	841a      	strh	r2, [r3, #32]
            Buffer->Head %= BUFFER_SIZE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	8c1b      	ldrh	r3, [r3, #32]
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	841a      	strh	r2, [r3, #32]
	}

	return RB_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	8c1b      	ldrh	r3, [r3, #32]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d101      	bne.n	8000f84 <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e014      	b.n	8000fae <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	5c9a      	ldrb	r2, [r3, r2]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f96:	3301      	adds	r3, #1
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <MX_SPI3_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fcc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fd6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_SPI3_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_SPI3_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_SPI3_Init+0x74>)
 800100a:	2207      	movs	r2, #7
 800100c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_SPI3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_SPI3_Init+0x74>)
 8001016:	2208      	movs	r2, #8
 8001018:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_SPI3_Init+0x74>)
 800101c:	f003 fafe 	bl	800461c <HAL_SPI_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001026:	f7ff feb1 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000017c 	.word	0x2000017c
 8001034:	40003c00 	.word	0x40003c00

08001038 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_SPI_MspInit+0x7c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d128      	bne.n	80010ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_SPI_MspInit+0x80>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a16      	ldr	r2, [pc, #88]	@ (80010b8 <HAL_SPI_MspInit+0x80>)
 8001060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_SPI_MspInit+0x80>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_SPI_MspInit+0x80>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_SPI_MspInit+0x80>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_SPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800108a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800109c:	2306      	movs	r3, #6
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_SPI_MspInit+0x84>)
 80010a8:	f001 fc98 	bl	80029dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40003c00 	.word	0x40003c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000800 	.word	0x48000800

080010c0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_SPI_MspDeInit+0x30>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10a      	bne.n	80010e8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_SPI_MspDeInit+0x34>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <HAL_SPI_MspDeInit+0x34>)
 80010d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010dc:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80010de:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <HAL_SPI_MspDeInit+0x38>)
 80010e4:	f001 fe24 	bl	8002d30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40003c00 	.word	0x40003c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000800 	.word	0x48000800

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_MspInit+0x4c>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001106:	4a10      	ldr	r2, [pc, #64]	@ (8001148 <HAL_MspInit+0x4c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6613      	str	r3, [r2, #96]	@ 0x60
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_MspInit+0x4c>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_MspInit+0x4c>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001124:	6593      	str	r3, [r2, #88]	@ 0x58
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_MspInit+0x4c>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	f06f 0001 	mvn.w	r0, #1
 800113a:	f001 fba5 	bl	8002888 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	@ 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800115a:	4b34      	ldr	r3, [pc, #208]	@ (800122c <HAL_InitTick+0xe0>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	4a33      	ldr	r2, [pc, #204]	@ (800122c <HAL_InitTick+0xe0>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6593      	str	r3, [r2, #88]	@ 0x58
 8001166:	4b31      	ldr	r3, [pc, #196]	@ (800122c <HAL_InitTick+0xe0>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001172:	f107 0210 	add.w	r2, r7, #16
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fcff 	bl	8003b80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800118c:	f002 fccc 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8001190:	6378      	str	r0, [r7, #52]	@ 0x34
 8001192:	e004      	b.n	800119e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001194:	f002 fcc8 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8001198:	4603      	mov	r3, r0
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800119e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a0:	4a23      	ldr	r2, [pc, #140]	@ (8001230 <HAL_InitTick+0xe4>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	3b01      	subs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011ac:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_InitTick+0xe8>)
 80011ae:	4a22      	ldr	r2, [pc, #136]	@ (8001238 <HAL_InitTick+0xec>)
 80011b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_InitTick+0xe8>)
 80011b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <HAL_InitTick+0xe8>)
 80011bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011be:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_InitTick+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_InitTick+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_InitTick+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80011d2:	4818      	ldr	r0, [pc, #96]	@ (8001234 <HAL_InitTick+0xe8>)
 80011d4:	f003 fdc8 	bl	8004d68 <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d11b      	bne.n	800121e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80011e6:	4813      	ldr	r0, [pc, #76]	@ (8001234 <HAL_InitTick+0xe8>)
 80011e8:	f003 fe7e 	bl	8004ee8 <HAL_TIM_Base_Start_IT>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d111      	bne.n	800121e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011fa:	2032      	movs	r0, #50	@ 0x32
 80011fc:	f001 fb60 	bl	80028c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d808      	bhi.n	8001218 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001206:	2200      	movs	r2, #0
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	2032      	movs	r0, #50	@ 0x32
 800120c:	f001 fb3c 	bl	8002888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001210:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_InitTick+0xf0>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e002      	b.n	800121e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800121e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001222:	4618      	mov	r0, r3
 8001224:	3738      	adds	r7, #56	@ 0x38
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	431bde83 	.word	0x431bde83
 8001234:	200001e0 	.word	0x200001e0
 8001238:	40000c00 	.word	0x40000c00
 800123c:	200000bc 	.word	0x200000bc

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <NMI_Handler+0x4>

08001248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <MemManage_Handler+0x4>

08001258 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <UsageFault_Handler+0x4>

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_BUSY_Pin);
 800127a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800127e:	f001 fe63 	bl	8002f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <USART2_IRQHandler+0x10>)
 800128e:	f004 fa3b 	bl	8005708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000027c 	.word	0x2000027c

0800129c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <TIM5_IRQHandler+0x10>)
 80012a2:	f003 fe91 	bl	8004fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001e0 	.word	0x200001e0

080012b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ca:	f008 fddb 	bl	8009e84 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2216      	movs	r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_exit>:

void _exit (int status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffe7 	bl	80012c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <_exit+0x12>

080012f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00a      	b.n	800131e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001308:	f3af 8000 	nop.w
 800130c:	4601      	mov	r1, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbf0      	blt.n	8001308 <_read+0x12>
  }

  return len;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e009      	b.n	8001356 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf1      	blt.n	8001342 <_write+0x12>
  }
  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_close>:

int _close(int file)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001390:	605a      	str	r2, [r3, #4]
  return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_isatty>:

int _isatty(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f008 fd40 	bl	8009e84 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20018000 	.word	0x20018000
 8001430:	00000400 	.word	0x00000400
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20001d98 	.word	0x20001d98

0800143c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_TIM6_Init+0x64>)
 8001472:	4a15      	ldr	r2, [pc, #84]	@ (80014c8 <MX_TIM6_Init+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MX_TIM6_Init+0x64>)
 8001478:	224f      	movs	r2, #79	@ 0x4f
 800147a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_TIM6_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_TIM6_Init+0x64>)
 8001484:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001488:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_TIM6_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_TIM6_Init+0x64>)
 8001492:	f003 fc69 	bl	8004d68 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800149c:	f7ff fc76 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_TIM6_Init+0x64>)
 80014ae:	f003 ff61 	bl	8005374 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014b8:	f7ff fc68 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000230 	.word	0x20000230
 80014c8:	40001000 	.word	0x40001000

080014cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <HAL_TIM_Base_MspInit+0x38>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40001000 	.word	0x40001000
 8001508:	40021000 	.word	0x40021000

0800150c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_USART2_UART_Init+0x5c>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001550:	f003 ffb6 	bl	80054c0 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800155a:	f7ff fc17 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000027c 	.word	0x2000027c
 8001568:	40004400 	.word	0x40004400

0800156c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	@ 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2288      	movs	r2, #136	@ 0x88
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 fbbe 	bl	8009d0e <memset>
  if(uartHandle->Instance==USART2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	@ (800161c <HAL_UART_MspInit+0xb0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d13b      	bne.n	8001614 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fb7b 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015b4:	f7ff fbea 	bl	8000d8c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_UART_MspInit+0xb4>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <HAL_UART_MspInit+0xb4>)
 80015be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c4:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <HAL_UART_MspInit+0xb4>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <HAL_UART_MspInit+0xb4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <HAL_UART_MspInit+0xb4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015dc:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_UART_MspInit+0xb4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e8:	230c      	movs	r3, #12
 80015ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001600:	2307      	movs	r3, #7
 8001602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f001 f9e4 	bl	80029dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001614:	bf00      	nop
 8001616:	37b0      	adds	r7, #176	@ 0xb0
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40004400 	.word	0x40004400
 8001620:	40021000 	.word	0x40021000

08001624 <UARTLog>:

extern struct adf5355_init_param hadf5355;
extern struct adf5355_dev* dev;

void UARTLog(char* message)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7fe fdd9 	bl	80001e4 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <UARTLog+0x28>)
 800163e:	f003 ff8d 	bl	800555c <HAL_UART_Transmit>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000027c 	.word	0x2000027c

08001650 <LightLED>:

void* LightLED(void* state){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <LightLED+0x24>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d003      	beq.n	8001674 <LightLED+0x24>
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <LightLED+0x44>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e00a      	b.n	800168a <LightLED+0x3a>
	else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, *value);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	2120      	movs	r1, #32
 800167c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001680:	f001 fc4a 	bl	8002f18 <HAL_GPIO_WritePin>
		ret = true;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <LightLED+0x44>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 800168a:	4b02      	ldr	r3, [pc, #8]	@ (8001694 <LightLED+0x44>)
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000304 	.word	0x20000304

08001698 <LoadADF5355>:

void* LoadADF5355(void* arg){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	ADF5355_Param_Init();
 80016a0:	f000 f90e 	bl	80018c0 <ADF5355_Param_Init>
	static bool ret = false;
	int32_t response = adf5355_init(&dev, &hadf5355);
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <LoadADF5355+0x2c>)
 80016a6:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <LoadADF5355+0x30>)
 80016a8:	f000 fe56 	bl	8002358 <adf5355_init>
 80016ac:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <LoadADF5355+0x22>
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <LoadADF5355+0x34>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
	return &ret;
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <LoadADF5355+0x34>)

}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000308 	.word	0x20000308
 80016c8:	20000338 	.word	0x20000338
 80016cc:	20000305 	.word	0x20000305

080016d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d4:	f7ff feb2 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <LoopForever+0x6>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <LoopForever+0xe>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <LoopForever+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f008 fbc7 	bl	8009e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001702:	f7ff fab1 	bl	8000c68 <main>

08001706 <LoopForever>:

LoopForever:
    b LoopForever
 8001706:	e7fe      	b.n	8001706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001708:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001714:	0800b12c 	.word	0x0800b12c
  ldr r2, =_sbss
 8001718:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 800171c:	20001d98 	.word	0x20001d98

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>

08001722 <HAL_GPIO_EXTI_Callback>:


extern data_Collector_TypeDef* ad7676_data;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == AD_BUSY_Pin){
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001732:	d101      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0x16>
		ad7676_read_one_sample();
 8001734:	f000 f822 	bl	800177c <ad7676_read_one_sample>
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <ad7676_acquire_data>:

	*ad7676_data = init_data;
}

void ad7676_acquire_data(data_Collector_TypeDef* ad7676_data, int16_t sample)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
	ad7676_data->data_buf[ad7676_data->data_ptr++] = sample;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8001752:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	b291      	uxth	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 8001760:	f8a2 1ffe 	strh.w	r1, [r2, #4094]	@ 0xffe
 8001764:	461a      	mov	r2, r3
 8001766:	8879      	ldrh	r1, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <ad7676_read_one_sample>:

void ad7676_read_one_sample()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

//	(GPIOx->IDR & GPIO_Pin);
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <ad7676_read_one_sample+0x48>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	b29b      	uxth	r3, r3
 8001788:	f023 030c 	bic.w	r3, r3, #12
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <ad7676_read_one_sample+0x4c>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	b29b      	uxth	r3, r3
 8001794:	03db      	lsls	r3, r3, #15
 8001796:	b29b      	uxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	80fb      	strh	r3, [r7, #6]
	ad7676_acquire_data(ad7676_data, sample);
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <ad7676_read_one_sample+0x50>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ffc9 	bl	8001740 <ad7676_acquire_data>
	AD7676_CNVST_OFF;
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <ad7676_read_one_sample+0x4c>)
 80017b6:	f001 fbaf 	bl	8002f18 <HAL_GPIO_WritePin>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800
 80017cc:	20000144 	.word	0x20000144

080017d0 <ADF5355_SetFrequency>:

/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void* ADF5355_SetFrequency(void* new_freq){
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	60fb      	str	r3, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d803      	bhi.n	80017f0 <ADF5355_SetFrequency+0x20>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b63      	cmp	r3, #99	@ 0x63
 80017ee:	d803      	bhi.n	80017f8 <ADF5355_SetFrequency+0x28>
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <ADF5355_SetFrequency+0x44>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e006      	b.n	8001806 <ADF5355_SetFrequency+0x36>
	else {
		freq = *value;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <ADF5355_SetFrequency+0x48>)
 80017fe:	6013      	str	r3, [r2, #0]
		ret = true;
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <ADF5355_SetFrequency+0x44>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8001806:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <ADF5355_SetFrequency+0x44>)
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	2000033c 	.word	0x2000033c
 8001818:	200000b4 	.word	0x200000b4

0800181c <ADF5355_SetPower>:

void* ADF5355_SetPower(void* new_pow){
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	static bool ret;
	int8_t* value = (int8_t*)new_pow;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	60fb      	str	r3, [r7, #12]
	if (*value > 10 || *value < -10) ret = false;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f993 3000 	ldrsb.w	r3, [r3]
 800182e:	2b0a      	cmp	r3, #10
 8001830:	dc05      	bgt.n	800183e <ADF5355_SetPower+0x22>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f993 3000 	ldrsb.w	r3, [r3]
 8001838:	f113 0f0a 	cmn.w	r3, #10
 800183c:	da03      	bge.n	8001846 <ADF5355_SetPower+0x2a>
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <ADF5355_SetPower+0x48>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e007      	b.n	8001856 <ADF5355_SetPower+0x3a>
	else {
		outa_power = *value;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f993 2000 	ldrsb.w	r2, [r3]
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <ADF5355_SetPower+0x4c>)
 800184e:	701a      	strb	r2, [r3, #0]
		ret = true;
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <ADF5355_SetPower+0x48>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8001856:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <ADF5355_SetPower+0x48>)
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2000033d 	.word	0x2000033d
 8001868:	200000b9 	.word	0x200000b9

0800186c <ADF5355_Enable>:

void* ADF5355_Enable(void* state){
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <ADF5355_Enable+0x24>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d003      	beq.n	8001890 <ADF5355_Enable+0x24>
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <ADF5355_Enable+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e00b      	b.n	80018a8 <ADF5355_Enable+0x3c>
	else {
		outa_en = *value;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <ADF5355_Enable+0x50>)
 80018a0:	701a      	strb	r2, [r3, #0]
		ret = true;
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <ADF5355_Enable+0x4c>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <ADF5355_Enable+0x4c>)
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000033e 	.word	0x2000033e
 80018bc:	200000b8 	.word	0x200000b8

080018c0 <ADF5355_Param_Init>:

void ADF5355_Param_Init(void){
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 80018c4:	492d      	ldr	r1, [pc, #180]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018c6:	482e      	ldr	r0, [pc, #184]	@ (8001980 <ADF5355_Param_Init+0xc0>)
 80018c8:	6008      	str	r0, [r1, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 80018ca:	492c      	ldr	r1, [pc, #176]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018cc:	2001      	movs	r0, #1
 80018ce:	7108      	strb	r0, [r1, #4]
	hadf5355.freq_req = freq*1000000; // Żądana częstotliwość wyjściowa w Hz
 80018d0:	492c      	ldr	r1, [pc, #176]	@ (8001984 <ADF5355_Param_Init+0xc4>)
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	482c      	ldr	r0, [pc, #176]	@ (8001988 <ADF5355_Param_Init+0xc8>)
 80018d6:	fb00 f101 	mul.w	r1, r0, r1
 80018da:	2000      	movs	r0, #0
 80018dc:	460a      	mov	r2, r1
 80018de:	4603      	mov	r3, r0
 80018e0:	4926      	ldr	r1, [pc, #152]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hadf5355.freq_req_chan = 0; // Kanał częstotliwości
 80018e6:	4b25      	ldr	r3, [pc, #148]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = 120000000; // Częstotliwość zegara wejściowego w Hz
 80018ec:	4b23      	ldr	r3, [pc, #140]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018ee:	4a27      	ldr	r2, [pc, #156]	@ (800198c <ADF5355_Param_Init+0xcc>)
 80018f0:	615a      	str	r2, [r3, #20]
	hadf5355.cp_ua = 1000; // Prąd pompy ładunkowej w mikroamperach
 80018f2:	4b22      	ldr	r3, [pc, #136]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018f8:	619a      	str	r2, [r3, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <ADF5355_Param_Init+0xbc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = false;  // Flaga aktywacji bramkowania prądu wycieku
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001902:	2200      	movs	r2, #0
 8001904:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001908:	2200      	movs	r2, #0
 800190a:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800190e:	2200      	movs	r2, #0
 8001910:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = outa_en;  // Flaga aktywacji wyjścia A
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <ADF5355_Param_Init+0xd0>)
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	4b19      	ldr	r3, [pc, #100]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001918:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = false;  // Flaga aktywacji wyjścia B
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.outa_power = outa_power;  // Moc wyjścia A
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <ADF5355_Param_Init+0xd4>)
 8001926:	f993 3000 	ldrsb.w	r3, [r3]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800192e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.outb_power = 0;  // Moc wyjścia B
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.phase_detector_polarity_neg = true;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.mux_out_sel = 0;  // Wybór wyjścia mux
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <ADF5355_Param_Init+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <ADF5355_Param_Init+0xbc>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20000308 	.word	0x20000308
 8001980:	2000017c 	.word	0x2000017c
 8001984:	200000b4 	.word	0x200000b4
 8001988:	000f4240 	.word	0x000f4240
 800198c:	07270e00 	.word	0x07270e00
 8001990:	200000b8 	.word	0x200000b8
 8001994:	200000b9 	.word	0x200000b9

08001998 <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	460b      	mov	r3, r1
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0e1b      	lsrs	r3, r3, #24
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d6:	f001 fa9f 	bl	8002f18 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f107 0110 	add.w	r1, r7, #16
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	2204      	movs	r2, #4
 80019e8:	f002 fee3 	bl	80047b2 <HAL_SPI_Transmit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fa:	f001 fa8d 	bl	8002f18 <HAL_GPIO_WritePin>

	return ret;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a12:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 8001a16:	f107 0108 	add.w	r1, r7, #8
 8001a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1e:	4608      	mov	r0, r1
 8001a20:	f000 fdee 	bl	8002600 <no_os_do_div>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 8001a2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	060b      	lsls	r3, r1, #24
 8001a3a:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001a3e:	0602      	lsls	r2, r0, #24
 8001a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8001a44:	f107 0110 	add.w	r1, r7, #16
 8001a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	f000 fdd7 	bl	8002600 <no_os_do_div>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	601a      	str	r2, [r3, #0]

	*integer = vco;
 8001a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a60:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8001a62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a68:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a6e:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8001a70:	e009      	b.n	8001a86 <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8001a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	085a      	lsrs	r2, r3, #1
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	085a      	lsrs	r2, r3, #1
 8001a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a84:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3f0      	bcc.n	8001a72 <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8001a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 fd88 	bl	80025b0 <no_os_greatest_common_divisor>
 8001aa0:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aae:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d003      	beq.n	8001ae4 <adf5355_reg_config+0x1c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d101      	bne.n	8001ae8 <adf5355_reg_config+0x20>
 8001ae4:	230d      	movs	r3, #13
 8001ae6:	e000      	b.n	8001aea <adf5355_reg_config+0x22>
 8001ae8:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 8001aea:	613b      	str	r3, [r7, #16]

	if (sync_all || !dev->all_synced) {
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <adf5355_reg_config+0x38>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	795b      	ldrb	r3, [r3, #5]
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01d      	beq.n	8001b3c <adf5355_reg_config+0x74>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e013      	b.n	8001b2e <adf5355_reg_config+0x66>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	b2d9      	uxtb	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	3202      	adds	r2, #2
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff3e 	bl	8001998 <adf5355_write>
 8001b1c:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <adf5355_reg_config+0x60>
				return ret;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	e0a6      	b.n	8001c76 <adf5355_reg_config+0x1ae>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e8      	bne.n	8001b06 <adf5355_reg_config+0x3e>
		}

		dev->all_synced = true;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	715a      	strb	r2, [r3, #5]
 8001b3a:	e073      	b.n	8001c24 <adf5355_reg_config+0x15c>

	} else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d003      	beq.n	8001b4c <adf5355_reg_config+0x84>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <adf5355_reg_config+0x9e>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b50:	461a      	mov	r2, r3
 8001b52:	210d      	movs	r1, #13
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff1f 	bl	8001998 <adf5355_write>
 8001b5a:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <adf5355_reg_config+0x9e>
				return ret;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	e087      	b.n	8001c76 <adf5355_reg_config+0x1ae>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	210a      	movs	r1, #10
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff12 	bl	8001998 <adf5355_write>
 8001b74:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <adf5355_reg_config+0xb8>
			return ret;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	e07a      	b.n	8001c76 <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	461a      	mov	r2, r3
 8001b86:	2106      	movs	r1, #6
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff05 	bl	8001998 <adf5355_write>
 8001b8e:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <adf5355_reg_config+0xd2>
			return ret;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	e06d      	b.n	8001c76 <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fef6 	bl	8001998 <adf5355_write>
 8001bac:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <adf5355_reg_config+0xf0>
			return ret;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	e05e      	b.n	8001c76 <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fee9 	bl	8001998 <adf5355_write>
 8001bc6:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <adf5355_reg_config+0x10a>
			return ret;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	e051      	b.n	8001c76 <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2101      	movs	r1, #1
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fedc 	bl	8001998 <adf5355_write>
 8001be0:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <adf5355_reg_config+0x124>
			return ret;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	e044      	b.n	8001c76 <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 8001bf0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fecd 	bl	8001998 <adf5355_write>
 8001bfe:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <adf5355_reg_config+0x142>
			return ret;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	e035      	b.n	8001c76 <adf5355_reg_config+0x1ae>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2104      	movs	r1, #4
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fec0 	bl	8001998 <adf5355_write>
 8001c18:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <adf5355_reg_config+0x15c>
			return ret;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	e028      	b.n	8001c76 <adf5355_reg_config+0x1ae>
	}

	if (dev->delay_us > 999)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c2e:	d314      	bcc.n	8001c5a <adf5355_reg_config+0x192>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <adf5355_reg_config+0x1b8>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc70 	bl	8000524 <__aeabi_ui2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe fce4 	bl	8000618 <__aeabi_d2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fea6 	bl	80009a4 <delay_ms>
 8001c58:	e005      	b.n	8001c66 <adf5355_reg_config+0x19e>
	}
	else
	{
		delay_us(dev->delay_us);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fe7b 	bl	800095c <delay_us>
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe92 	bl	8001998 <adf5355_write>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	10624dd3 	.word	0x10624dd3

08001c84 <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 8001c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c88:	b08c      	sub	sp, #48	@ 0x30
 8001c8a:	af06      	add	r7, sp, #24
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t cp_bleed;
	bool prescaler, cp_neg_bleed_en;

	if (chan > dev->num_channels)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001c98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d902      	bls.n	8001ca6 <adf5355_set_freq+0x22>
		return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	e1d6      	b.n	8002054 <adf5355_set_freq+0x3d0>

	if (chan == 0) {
 8001ca6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d13c      	bne.n	8001d28 <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb8:	4290      	cmp	r0, r2
 8001cba:	eb71 0303 	sbcs.w	r3, r1, r3
 8001cbe:	d308      	bcc.n	8001cd2 <adf5355_set_freq+0x4e>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cca:	4290      	cmp	r0, r2
 8001ccc:	eb71 0303 	sbcs.w	r3, r1, r3
 8001cd0:	d202      	bcs.n	8001cd8 <adf5355_set_freq+0x54>
			return -EINVAL;
 8001cd2:	f06f 0315 	mvn.w	r3, #21
 8001cd6:	e1bd      	b.n	8002054 <adf5355_set_freq+0x3d0>

		dev->rf_div_sel = 0;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8001cea:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8001cf2:	e00f      	b.n	8001d14 <adf5355_set_freq+0x90>
			freq <<= 1;
 8001cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cf8:	eb12 0802 	adds.w	r8, r2, r2
 8001cfc:	eb43 0903 	adc.w	r9, r3, r3
 8001d00:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d24:	d3e6      	bcc.n	8001cf4 <adf5355_set_freq+0x70>
 8001d26:	e074      	b.n	8001e12 <adf5355_set_freq+0x18e>
		}
	} else if (dev->dev_id == ADF4356) {
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d14a      	bne.n	8001dc6 <adf5355_set_freq+0x142>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d3a:	4290      	cmp	r0, r2
 8001d3c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d40:	d310      	bcc.n	8001d64 <adf5355_set_freq+0xe0>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d4c:	4290      	cmp	r0, r2
 8001d4e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d52:	d307      	bcc.n	8001d64 <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8001d5a:	f083 0301 	eor.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <adf5355_set_freq+0xe6>
			return -EINVAL;
 8001d64:	f06f 0315 	mvn.w	r3, #21
 8001d68:	e174      	b.n	8002054 <adf5355_set_freq+0x3d0>

		dev->rf_div_sel = 0;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001d7c:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001d7e:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->outb_power);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8001d8c:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8001d92:	e00e      	b.n	8001db2 <adf5355_set_freq+0x12e>
			freq <<= 1;
 8001d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d98:	1894      	adds	r4, r2, r2
 8001d9a:	eb43 0503 	adc.w	r5, r3, r3
 8001d9e:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dbc:	4290      	cmp	r0, r2
 8001dbe:	eb71 0303 	sbcs.w	r3, r1, r3
 8001dc2:	d3e7      	bcc.n	8001d94 <adf5355_set_freq+0x110>
 8001dc4:	e025      	b.n	8001e12 <adf5355_set_freq+0x18e>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 8001dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dca:	49a5      	ldr	r1, [pc, #660]	@ (8002060 <adf5355_set_freq+0x3dc>)
 8001dcc:	428a      	cmp	r2, r1
 8001dce:	f173 0303 	sbcs.w	r3, r3, #3
 8001dd2:	d206      	bcs.n	8001de2 <adf5355_set_freq+0x15e>
 8001dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd8:	49a2      	ldr	r1, [pc, #648]	@ (8002064 <adf5355_set_freq+0x3e0>)
 8001dda:	428a      	cmp	r2, r1
 8001ddc:	f173 0301 	sbcs.w	r3, r3, #1
 8001de0:	d202      	bcs.n	8001de8 <adf5355_set_freq+0x164>
			return -EINVAL;
 8001de2:	f06f 0315 	mvn.w	r3, #21
 8001de6:	e135      	b.n	8002054 <adf5355_set_freq+0x3d0>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001df2:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	621a      	str	r2, [r3, #32]

		freq >>= 1;
 8001dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	0842      	lsrs	r2, r0, #1
 8001e08:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001e0c:	084b      	lsrs	r3, r1, #1
 8001e0e:	e9c7 2300 	strd	r2, r3, [r7]
	}

	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e16:	2200      	movs	r2, #0
 8001e18:	469a      	mov	sl, r3
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	336c      	adds	r3, #108	@ 0x6c
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	3270      	adds	r2, #112	@ 0x70
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	3174      	adds	r1, #116	@ 0x74
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	3078      	adds	r0, #120	@ 0x78
				    &dev->fract2, &dev->mod2,
				    ((dev->dev_id == ADF4356)
 8001e2c:	68fc      	ldr	r4, [r7, #12]
 8001e2e:	7924      	ldrb	r4, [r4, #4]
	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8001e30:	2c04      	cmp	r4, #4
 8001e32:	d003      	beq.n	8001e3c <adf5355_set_freq+0x1b8>
				     || (dev->dev_id == ADF5356)) ? ADF5356_MAX_MODULUS2 : ADF5355_MAX_MODULUS2);
 8001e34:	68fc      	ldr	r4, [r7, #12]
 8001e36:	7924      	ldrb	r4, [r4, #4]
 8001e38:	2c05      	cmp	r4, #5
 8001e3a:	d102      	bne.n	8001e42 <adf5355_set_freq+0x1be>
	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8001e3c:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
 8001e40:	e001      	b.n	8001e46 <adf5355_set_freq+0x1c2>
 8001e42:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 8001e46:	9404      	str	r4, [sp, #16]
 8001e48:	9003      	str	r0, [sp, #12]
 8001e4a:	9102      	str	r1, [sp, #8]
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4652      	mov	r2, sl
 8001e52:	465b      	mov	r3, fp
 8001e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e58:	f7ff fdd6 	bl	8001a08 <adf5355_pll_fract_n_compute>

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e60:	2b4a      	cmp	r3, #74	@ 0x4a
 8001e62:	bf8c      	ite	hi
 8001e64:	2301      	movhi	r3, #1
 8001e66:	2300      	movls	r3, #0
 8001e68:	74fb      	strb	r3, [r7, #19]

	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002068 <adf5355_set_freq+0x3e4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d807      	bhi.n	8001e84 <adf5355_set_freq+0x200>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <adf5355_set_freq+0x206>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <adf5355_set_freq+0x206>
		cp_neg_bleed_en = false;
 8001e84:	2300      	movs	r3, #0
 8001e86:	74bb      	strb	r3, [r7, #18]
 8001e88:	e003      	b.n	8001e92 <adf5355_set_freq+0x20e>
	else
		cp_neg_bleed_en = dev->cp_neg_bleed_en;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001e90:	74bb      	strb	r3, [r7, #18]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	791b      	ldrb	r3, [r3, #4]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d003      	beq.n	8001ea2 <adf5355_set_freq+0x21e>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d113      	bne.n	8001eca <adf5355_set_freq+0x246>
		cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ea6:	4a71      	ldr	r2, [pc, #452]	@ (800206c <adf5355_set_freq+0x3e8>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	0b9b      	lsrs	r3, r3, #14
 8001ec0:	4a6b      	ldr	r2, [pc, #428]	@ (8002070 <adf5355_set_freq+0x3ec>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e016      	b.n	8001ef8 <adf5355_set_freq+0x274>
	} else {
		cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ece:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001ed2:	fb03 f202 	mul.w	r2, r3, r2
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eda:	f240 1177 	movw	r1, #375	@ 0x177
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eea:	f240 1177 	movw	r1, #375	@ 0x177
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
	}

	cp_bleed = no_os_clamp(cp_bleed, 1U, 255U);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d904      	bls.n	8001f08 <adf5355_set_freq+0x284>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2bff      	cmp	r3, #255	@ 0xff
 8001f02:	bf28      	it	cs
 8001f04:	23ff      	movcs	r3, #255	@ 0xff
 8001f06:	e000      	b.n	8001f0a <adf5355_set_freq+0x286>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f10:	011a      	lsls	r2, r3, #4
 8001f12:	4b58      	ldr	r3, [pc, #352]	@ (8002074 <adf5355_set_freq+0x3f0>)
 8001f14:	4013      	ands	r3, r2
				    ADF5355_REG0_PRESCALER(prescaler) |
 8001f16:	7cfa      	ldrb	r2, [r7, #19]
 8001f18:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001f1a:	4313      	orrs	r3, r2
				    ADF5355_REG0_PRESCALER(prescaler) |
 8001f1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	609a      	str	r2, [r3, #8]
				    ADF5355_REG0_AUTOCAL(1);

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001f2e:	f023 030f 	bic.w	r3, r3, #15
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f3a:	011a      	lsls	r2, r3, #4
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002078 <adf5355_set_freq+0x3f4>)
 8001f3e:	4013      	ands	r3, r2
				    ADF5355_REG2_FRAC2(dev->fract2);
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f44:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	611a      	str	r2, [r3, #16]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	791b      	ldrb	r3, [r3, #4]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d003      	beq.n	8001f5c <adf5355_set_freq+0x2d8>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	791b      	ldrb	r3, [r3, #4]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <adf5355_set_freq+0x2f2>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f60:	0b9b      	lsrs	r3, r3, #14
 8001f62:	011a      	lsls	r2, r3, #4
 8001f64:	4b44      	ldr	r3, [pc, #272]	@ (8002078 <adf5355_set_freq+0x3f4>)
 8001f66:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f6c:	0b92      	lsrs	r2, r2, #14
 8001f6e:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8001f88:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8001f8a:	431a      	orrs	r2, r3
				    (((dev->dev_id == ADF5355)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <adf5355_set_freq+0x318>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	791b      	ldrb	r3, [r3, #4]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d107      	bne.n	8001fac <adf5355_set_freq+0x328>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	e00a      	b.n	8001fc2 <adf5355_set_freq+0x33e>
				     ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001fbe:	025b      	lsls	r3, r3, #9
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8001fc0:	430b      	orrs	r3, r1
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8001fc2:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8001fca:	02db      	lsls	r3, r3, #11
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	035b      	lsls	r3, r3, #13
 8001fd4:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8001fd8:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8001fe0:	055b      	lsls	r3, r3, #21
 8001fe2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8001fe6:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	791b      	ldrb	r3, [r3, #4]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d104      	bne.n	8001ffa <adf5355_set_freq+0x376>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8001ff6:	065b      	lsls	r3, r3, #25
 8001ff8:	e000      	b.n	8001ffc <adf5355_set_freq+0x378>
 8001ffa:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 8001ffc:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002004:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 8002006:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800200e:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002010:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	791b      	ldrb	r3, [r3, #4]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d003      	beq.n	8002022 <adf5355_set_freq+0x39e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d104      	bne.n	800202c <adf5355_set_freq+0x3a8>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002028:	07db      	lsls	r3, r3, #31
 800202a:	e000      	b.n	800202e <adf5355_set_freq+0x3aa>
 800202c:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 800202e:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 8002030:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8002034:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	dev->freq_req = freq;
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002042:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return adf5355_reg_config(dev, dev->all_synced);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	795b      	ldrb	r3, [r3, #5]
 800204a:	4619      	mov	r1, r3
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff fd3b 	bl	8001ac8 <adf5355_reg_config>
 8002052:	4603      	mov	r3, r0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800205e:	bf00      	nop
 8002060:	2a9f8801 	.word	0x2a9f8801
 8002064:	954fc400 	.word	0x954fc400
 8002068:	05f5e100 	.word	0x05f5e100
 800206c:	10624dd3 	.word	0x10624dd3
 8002070:	00136b0b 	.word	0x00136b0b
 8002074:	000ffff0 	.word	0x000ffff0
 8002078:	0003fff0 	.word	0x0003fff0

0800207c <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	dev->ref_div_factor = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8002092:	3301      	adds	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <adf5355_setup+0x32>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e000      	b.n	80020b0 <adf5355_setup+0x34>
 80020ae:	2301      	movs	r3, #1
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	f8b2 2090 	ldrh.w	r2, [r2, #144]	@ 0x90
 80020ba:	4611      	mov	r1, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d001      	beq.n	80020ca <adf5355_setup+0x4e>
 80020c6:	2202      	movs	r2, #2
 80020c8:	e000      	b.n	80020cc <adf5355_setup+0x50>
 80020ca:	2201      	movs	r2, #1
 80020cc:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 80020d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020dc:	4a8d      	ldr	r2, [pc, #564]	@ (8002314 <adf5355_setup+0x298>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d8d4      	bhi.n	800208c <adf5355_setup+0x10>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020e6:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 80020ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002318 <adf5355_setup+0x29c>)
 80020ec:	fba3 1302 	umull	r1, r3, r3, r2
 80020f0:	1ad2      	subs	r2, r2, r3
 80020f2:	0852      	lsrs	r2, r2, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <adf5355_setup+0x8e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	bf28      	it	cs
 8002106:	230f      	movcs	r3, #15
 8002108:	e000      	b.n	800210c <adf5355_setup+0x90>
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(0) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <adf5355_setup+0xa0>
 8002118:	2280      	movs	r2, #128	@ 0x80
 800211a:	e000      	b.n	800211e <adf5355_setup+0xa2>
 800211c:	2200      	movs	r2, #0
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002124:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8002126:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800212e:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8002130:	4313      	orrs	r3, r2
 8002132:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 800213c:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8002144:	03d9      	lsls	r1, r3, #15
 8002146:	4b75      	ldr	r3, [pc, #468]	@ (800231c <adf5355_setup+0x2a0>)
 8002148:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 800214a:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002152:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8002154:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800215c:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 800215e:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002166:	06db      	lsls	r3, r3, #27
 8002168:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 800216c:	4313      	orrs	r3, r2
 800216e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(0) |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a69      	ldr	r2, [pc, #420]	@ (8002320 <adf5355_setup+0x2a4>)
 800217a:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(0) |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a69      	ldr	r2, [pc, #420]	@ (8002324 <adf5355_setup+0x2a8>)
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(0) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 8002186:	2b04      	cmp	r3, #4
 8002188:	d003      	beq.n	8002192 <adf5355_setup+0x116>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d101      	bne.n	8002196 <adf5355_setup+0x11a>
 8002192:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <adf5355_setup+0x2ac>)
 8002194:	e000      	b.n	8002198 <adf5355_setup+0x11c>
 8002196:	4a65      	ldr	r2, [pc, #404]	@ (800232c <adf5355_setup+0x2b0>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021a0:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 80021a4:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 80021a8:	4a61      	ldr	r2, [pc, #388]	@ (8002330 <adf5355_setup+0x2b4>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d906      	bls.n	80021c6 <adf5355_setup+0x14a>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80021be:	4293      	cmp	r3, r2
 80021c0:	bf28      	it	cs
 80021c2:	4613      	movcs	r3, r2
 80021c4:	e000      	b.n	80021c8 <adf5355_setup+0x14c>
 80021c6:	2301      	movs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	039a      	lsls	r2, r3, #14
 80021ce:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <adf5355_setup+0x2b8>)
 80021d0:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021dc:	fb00 f202 	mul.w	r2, r0, r2
 80021e0:	440a      	add	r2, r1
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	1e51      	subs	r1, r2, #1
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4853      	ldr	r0, [pc, #332]	@ (8002338 <adf5355_setup+0x2bc>)
 80021ea:	fb00 f202 	mul.w	r2, r0, r2
 80021ee:	fbb1 f2f2 	udiv	r2, r1, r2
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80021f8:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	484b      	ldr	r0, [pc, #300]	@ (8002338 <adf5355_setup+0x2bc>)
 800220a:	fb00 f303 	mul.w	r3, r0, r3
 800220e:	4413      	add	r3, r2
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4848      	ldr	r0, [pc, #288]	@ (8002338 <adf5355_setup+0x2bc>)
 8002216:	fb00 f303 	mul.w	r3, r0, r3
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	025b      	lsls	r3, r3, #9
 8002220:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 8002224:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	7909      	ldrb	r1, [r1, #4]
 8002230:	2904      	cmp	r1, #4
 8002232:	d003      	beq.n	800223c <adf5355_setup+0x1c0>
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	7909      	ldrb	r1, [r1, #4]
 8002238:	2905      	cmp	r1, #5
 800223a:	d101      	bne.n	8002240 <adf5355_setup+0x1c4>
 800223c:	493f      	ldr	r1, [pc, #252]	@ (800233c <adf5355_setup+0x2c0>)
 800223e:	e000      	b.n	8002242 <adf5355_setup+0x1c6>
 8002240:	493f      	ldr	r1, [pc, #252]	@ (8002340 <adf5355_setup+0x2c4>)
 8002242:	440b      	add	r3, r1
 8002244:	1e59      	subs	r1, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	791b      	ldrb	r3, [r3, #4]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d003      	beq.n	8002256 <adf5355_setup+0x1da>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	791b      	ldrb	r3, [r3, #4]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d101      	bne.n	800225a <adf5355_setup+0x1de>
 8002256:	4b39      	ldr	r3, [pc, #228]	@ (800233c <adf5355_setup+0x2c0>)
 8002258:	e000      	b.n	800225c <adf5355_setup+0x1e0>
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <adf5355_setup+0x2c4>)
 800225c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002260:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8002262:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	4a35      	ldr	r2, [pc, #212]	@ (8002344 <adf5355_setup+0x2c8>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	09db      	lsrs	r3, r3, #7
 8002276:	3301      	adds	r3, #1
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d904      	bls.n	800228c <adf5355_setup+0x210>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2bff      	cmp	r3, #255	@ 0xff
 8002286:	bf28      	it	cs
 8002288:	23ff      	movcs	r3, #255	@ 0xff
 800228a:	e000      	b.n	800228e <adf5355_setup+0x212>
 800228c:	2301      	movs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	fbb2 f2f3 	udiv	r2, r2, r3
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <adf5355_setup+0x2cc>)
 80022a0:	4413      	add	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	3202      	adds	r2, #2
 80022ac:	fbb1 f2f2 	udiv	r2, r1, r2
 80022b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 80022c2:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80022c6:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1e      	ldr	r2, [pc, #120]	@ (800234c <adf5355_setup+0x2d0>)
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d003      	beq.n	80022e4 <adf5355_setup+0x268>
				      || (dev->dev_id == ADF5356))?
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d102      	bne.n	80022ea <adf5355_setup+0x26e>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80022e4:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 80022e8:	e000      	b.n	80022ec <adf5355_setup+0x270>
 80022ea:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <adf5355_setup+0x2d4>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8002302:	9100      	str	r1, [sp, #0]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fcbd 	bl	8001c84 <adf5355_set_freq>
 800230a:	4603      	mov	r3, r0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	047868c0 	.word	0x047868c0
 8002318:	a01a01a1 	.word	0xa01a01a1
 800231c:	01ff8000 	.word	0x01ff8000
 8002320:	00800025 	.word	0x00800025
 8002324:	04000007 	.word	0x04000007
 8002328:	15596568 	.word	0x15596568
 800232c:	102d0428 	.word	0x102d0428
 8002330:	6fd91d85 	.word	0x6fd91d85
 8002334:	00ffc000 	.word	0x00ffc000
 8002338:	000186a0 	.word	0x000186a0
 800233c:	00186a00 	.word	0x00186a00
 8002340:	00249f00 	.word	0x00249f00
 8002344:	0a7c5ac5 	.word	0x0a7c5ac5
 8002348:	00f423ff 	.word	0x00f423ff
 800234c:	0061300b 	.word	0x0061300b
 8002350:	0001041c 	.word	0x0001041c
 8002354:	00000000 	.word	0x00000000

08002358 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 8002362:	2198      	movs	r1, #152	@ 0x98
 8002364:	2001      	movs	r0, #1
 8002366:	f000 f915 	bl	8002594 <no_os_calloc>
 800236a:	60f8      	str	r0, [r7, #12]
	if (!dev)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <adf5355_init+0x20>
		return -ENOMEM;
 8002372:	f06f 030b 	mvn.w	r3, #11
 8002376:	e0e8      	b.n	800254a <adf5355_init+0x1f2>

	dev->spi_desc = init_param->spi_init;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	791a      	ldrb	r2, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7c1a      	ldrb	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	7f1a      	ldrb	r2, [r3, #28]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	7f5a      	ldrb	r2, [r3, #29]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	7f9a      	ldrb	r2, [r3, #30]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7fda      	ldrb	r2, [r3, #31]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->outa_power = init_param->outa_power;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->outb_power = init_param->outb_power;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->ref_diff_en = init_param->ref_diff_en;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->ref_doubler_en = init_param->ref_doubler_en;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->ref_div2_en = init_param->ref_div2_en;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	dev->mux_out_sel = init_param->mux_out_sel;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	dev->outb_sel_fund = init_param->outb_sel_fund;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->num_channels = 2;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	switch (dev->dev_id) {
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d85b      	bhi.n	8002524 <adf5355_init+0x1cc>
 800246c:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <adf5355_init+0x11c>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	0800248d 	.word	0x0800248d
 8002478:	080024b3 	.word	0x080024b3
 800247c:	080024d9 	.word	0x080024d9
 8002480:	080024ff 	.word	0x080024ff
 8002484:	0800248d 	.word	0x0800248d
 8002488:	0800248d 	.word	0x0800248d
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	a33d      	add	r3, pc, #244	@ (adr r3, 8002584 <adf5355_init+0x22c>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002558 <adf5355_init+0x200>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	a32e      	add	r3, pc, #184	@ (adr r3, 8002560 <adf5355_init+0x208>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80024b0:	e038      	b.n	8002524 <adf5355_init+0x1cc>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	a335      	add	r3, pc, #212	@ (adr r3, 800258c <adf5355_init+0x234>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	a325      	add	r3, pc, #148	@ (adr r3, 8002558 <adf5355_init+0x200>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	a324      	add	r3, pc, #144	@ (adr r3, 8002560 <adf5355_init+0x208>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80024d6:	e025      	b.n	8002524 <adf5355_init+0x1cc>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	4a29      	ldr	r2, [pc, #164]	@ (8002580 <adf5355_init+0x228>)
 80024dc:	f04f 0301 	mov.w	r3, #1
 80024e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002558 <adf5355_init+0x200>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8002560 <adf5355_init+0x208>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80024fc:	e012      	b.n	8002524 <adf5355_init+0x1cc>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	a319      	add	r3, pc, #100	@ (adr r3, 8002568 <adf5355_init+0x210>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	a318      	add	r3, pc, #96	@ (adr r3, 8002570 <adf5355_init+0x218>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	a317      	add	r3, pc, #92	@ (adr r3, 8002578 <adf5355_init+0x220>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8002522:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f7ff fda9 	bl	800207c <adf5355_setup>
 800252a:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <adf5355_init+0x1e4>
		goto error_spi;

	*device = dev;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

	return ret;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	e006      	b.n	800254a <adf5355_init+0x1f2>
		goto error_spi;
 800253c:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f002 f90d 	bl	8004762 <HAL_SPI_DeInit>

	return ret;
 8002548:	68bb      	ldr	r3, [r7, #8]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	f3af 8000 	nop.w
 8002558:	032a9f88 	.word	0x032a9f88
 800255c:	00000000 	.word	0x00000000
 8002560:	caa7e200 	.word	0xcaa7e200
 8002564:	00000000 	.word	0x00000000
 8002568:	89640200 	.word	0x89640200
 800256c:	00000001 	.word	0x00000001
 8002570:	0312c804 	.word	0x0312c804
 8002574:	00000000 	.word	0x00000000
 8002578:	c4b20100 	.word	0xc4b20100
 800257c:	00000000 	.word	0x00000000
 8002580:	0642ac00 	.word	0x0642ac00
 8002584:	954fc400 	.word	0x954fc400
 8002588:	00000001 	.word	0x00000001
 800258c:	2a9f8800 	.word	0x2a9f8800
 8002590:	00000003 	.word	0x00000003

08002594 <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f007 f939 	bl	8009818 <calloc>
 80025a6:	4603      	mov	r3, r0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <no_os_greatest_common_divisor+0x16>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d112      	bne.n	80025ec <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	bf38      	it	cc
 80025ce:	4613      	movcc	r3, r2
 80025d0:	e010      	b.n	80025f4 <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	fb01 f202 	mul.w	r2, r1, r2
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
		a = b;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	607b      	str	r3, [r7, #4]
		b = div;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ef      	bne.n	80025d2 <no_os_greatest_common_divisor+0x22>
	}

	return a;
 80025f2:	687b      	ldr	r3, [r7, #4]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002622:	f7fe f819 	bl	8000658 <__aeabi_uldivmod>
 8002626:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002634:	f7fe f810 	bl	8000658 <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 8002642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265a:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <HAL_Init+0x3c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a0b      	ldr	r2, [pc, #44]	@ (800268c <HAL_Init+0x3c>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002666:	2003      	movs	r0, #3
 8002668:	f000 f903 	bl	8002872 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266c:	200f      	movs	r0, #15
 800266e:	f7fe fd6d 	bl	800114c <HAL_InitTick>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	e001      	b.n	8002682 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267e:	f7fe fd3d 	bl	80010fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002682:	79fb      	ldrb	r3, [r7, #7]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_IncTick+0x20>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_IncTick+0x24>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <HAL_IncTick+0x24>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200000c0 	.word	0x200000c0
 80026b4:	20000340 	.word	0x20000340

080026b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return uwTick;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <HAL_GetTick+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000340 	.word	0x20000340

080026d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff ffee 	bl	80026b8 <HAL_GetTick>
 80026dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d005      	beq.n	80026f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_Delay+0x44>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f6:	bf00      	nop
 80026f8:	f7ff ffde 	bl	80026b8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	d8f7      	bhi.n	80026f8 <HAL_Delay+0x28>
  {
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000c0 	.word	0x200000c0

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	@ (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	@ (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	@ (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ff4c 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800289a:	f7ff ff61 	bl	8002760 <__NVIC_GetPriorityGrouping>
 800289e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6978      	ldr	r0, [r7, #20]
 80028a6:	f7ff ffb1 	bl	800280c <NVIC_EncodePriority>
 80028aa:	4602      	mov	r2, r0
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff80 	bl	80027b8 <__NVIC_SetPriority>
}
 80028b8:	bf00      	nop
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff54 	bl	800277c <__NVIC_EnableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d008      	beq.n	8002906 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2204      	movs	r2, #4
 80028f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 020e 	bic.w	r2, r2, #14
 8002914:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 021c 	and.w	r2, r3, #28
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d005      	beq.n	800297c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2204      	movs	r2, #4
 8002974:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	e029      	b.n	80029d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 020e 	bic.w	r2, r2, #14
 800298a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f003 021c 	and.w	r2, r3, #28
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
    }
  }
  return status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	e17f      	b.n	8002cec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8171 	beq.w	8002ce6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d005      	beq.n	8002a1c <HAL_GPIO_Init+0x40>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d130      	bne.n	8002a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a52:	2201      	movs	r2, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0201 	and.w	r2, r3, #1
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d118      	bne.n	8002abc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80ac 	beq.w	8002ce6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d0c <HAL_GPIO_Init+0x330>)
 8002b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b92:	4a5e      	ldr	r2, [pc, #376]	@ (8002d0c <HAL_GPIO_Init+0x330>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d0c <HAL_GPIO_Init+0x330>)
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d10 <HAL_GPIO_Init+0x334>)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x242>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d14 <HAL_GPIO_Init+0x338>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x23e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d18 <HAL_GPIO_Init+0x33c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x23a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d1c <HAL_GPIO_Init+0x340>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x236>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4c      	ldr	r2, [pc, #304]	@ (8002d20 <HAL_GPIO_Init+0x344>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x232>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <HAL_GPIO_Init+0x348>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x22e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d28 <HAL_GPIO_Init+0x34c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x22a>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c30:	4937      	ldr	r1, [pc, #220]	@ (8002d10 <HAL_GPIO_Init+0x334>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c62:	4a32      	ldr	r2, [pc, #200]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c68:	4b30      	ldr	r3, [pc, #192]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_GPIO_Init+0x350>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f ae78 	bne.w	80029ec <HAL_GPIO_Init+0x10>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000
 8002d14:	48000400 	.word	0x48000400
 8002d18:	48000800 	.word	0x48000800
 8002d1c:	48000c00 	.word	0x48000c00
 8002d20:	48001000 	.word	0x48001000
 8002d24:	48001400 	.word	0x48001400
 8002d28:	48001800 	.word	0x48001800
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d3e:	e0cd      	b.n	8002edc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d40:	2201      	movs	r2, #1
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80c0 	beq.w	8002ed6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d56:	4a68      	ldr	r2, [pc, #416]	@ (8002ef8 <HAL_GPIO_DeInit+0x1c8>)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d7e:	d025      	beq.n	8002dcc <HAL_GPIO_DeInit+0x9c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a5e      	ldr	r2, [pc, #376]	@ (8002efc <HAL_GPIO_DeInit+0x1cc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01f      	beq.n	8002dc8 <HAL_GPIO_DeInit+0x98>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f00 <HAL_GPIO_DeInit+0x1d0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d019      	beq.n	8002dc4 <HAL_GPIO_DeInit+0x94>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	@ (8002f04 <HAL_GPIO_DeInit+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_GPIO_DeInit+0x90>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f08 <HAL_GPIO_DeInit+0x1d8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00d      	beq.n	8002dbc <HAL_GPIO_DeInit+0x8c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f0c <HAL_GPIO_DeInit+0x1dc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <HAL_GPIO_DeInit+0x88>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a59      	ldr	r2, [pc, #356]	@ (8002f10 <HAL_GPIO_DeInit+0x1e0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_GPIO_DeInit+0x84>
 8002db0:	2306      	movs	r3, #6
 8002db2:	e00c      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002db4:	2307      	movs	r3, #7
 8002db6:	e00a      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002db8:	2305      	movs	r3, #5
 8002dba:	e008      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e006      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e004      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e002      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	f002 0203 	and.w	r2, r2, #3
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4093      	lsls	r3, r2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d132      	bne.n	8002e44 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002dde:	4b4d      	ldr	r3, [pc, #308]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	494b      	ldr	r1, [pc, #300]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002dec:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	4947      	ldr	r1, [pc, #284]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002dfa:	4b46      	ldr	r3, [pc, #280]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4944      	ldr	r1, [pc, #272]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e08:	4b42      	ldr	r3, [pc, #264]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	4940      	ldr	r1, [pc, #256]	@ (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e26:	4a34      	ldr	r2, [pc, #208]	@ (8002ef8 <HAL_GPIO_DeInit+0x1c8>)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	4830      	ldr	r0, [pc, #192]	@ (8002ef8 <HAL_GPIO_DeInit+0x1c8>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	3302      	adds	r3, #2
 8002e40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	08d2      	lsrs	r2, r2, #3
 8002e78:	4019      	ands	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af2b 	bne.w	8002d40 <HAL_GPIO_DeInit+0x10>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	48000400 	.word	0x48000400
 8002f00:	48000800 	.word	0x48000800
 8002f04:	48000c00 	.word	0x48000c00
 8002f08:	48001000 	.word	0x48001000
 8002f0c:	48001400 	.word	0x48001400
 8002f10:	48001800 	.word	0x48001800
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f52:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f5e:	4a05      	ldr	r2, [pc, #20]	@ (8002f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fbdb 	bl	8001722 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40010400 	.word	0x40010400

08002f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f7c:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000

08002f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa2:	d130      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d038      	beq.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb2:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fba:	4a1e      	ldr	r2, [pc, #120]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2232      	movs	r2, #50	@ 0x32
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9b      	lsrs	r3, r3, #18
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd8:	e002      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe0:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fec:	d102      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f2      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003000:	d110      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e00f      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003012:	d007      	beq.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003014:	4b07      	ldr	r3, [pc, #28]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800301c:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000
 8003038:	200000b0 	.word	0x200000b0
 800303c:	431bde83 	.word	0x431bde83

08003040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e3ca      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b97      	ldr	r3, [pc, #604]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	4b94      	ldr	r3, [pc, #592]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80e4 	beq.w	800323c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_RCC_OscConfig+0x4a>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	f040 808b 	bne.w	8003198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b01      	cmp	r3, #1
 8003086:	f040 8087 	bne.w	8003198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800308a:	4b89      	ldr	r3, [pc, #548]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e3a2      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	4b82      	ldr	r3, [pc, #520]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_RCC_OscConfig+0x7c>
 80030b2:	4b7f      	ldr	r3, [pc, #508]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_OscConfig+0x88>
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d223      	bcs.n	8003114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fd87 	bl	8003be4 <RCC_SetFlashLatencyFromMSIRange>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e383      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e0:	4b73      	ldr	r3, [pc, #460]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a72      	ldr	r2, [pc, #456]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b70      	ldr	r3, [pc, #448]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	496d      	ldr	r1, [pc, #436]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fe:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	4968      	ldr	r1, [pc, #416]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
 8003112:	e025      	b.n	8003160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003114:	4b66      	ldr	r3, [pc, #408]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a65      	ldr	r2, [pc, #404]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800311a:	f043 0308 	orr.w	r3, r3, #8
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b63      	ldr	r3, [pc, #396]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4960      	ldr	r1, [pc, #384]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003132:	4b5f      	ldr	r3, [pc, #380]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	495b      	ldr	r1, [pc, #364]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fd47 	bl	8003be4 <RCC_SetFlashLatencyFromMSIRange>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e343      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003160:	f000 fc4a 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	4950      	ldr	r1, [pc, #320]	@ (80032b4 <HAL_RCC_OscConfig+0x274>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	4a4e      	ldr	r2, [pc, #312]	@ (80032b8 <HAL_RCC_OscConfig+0x278>)
 800317e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003180:	4b4e      	ldr	r3, [pc, #312]	@ (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd ffe1 	bl	800114c <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d052      	beq.n	800323a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	e327      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d032      	beq.n	8003206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a0:	4b43      	ldr	r3, [pc, #268]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a42      	ldr	r2, [pc, #264]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fa84 	bl	80026b8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b4:	f7ff fa80 	bl	80026b8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e310      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c6:	4b3a      	ldr	r3, [pc, #232]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d2:	4b37      	ldr	r3, [pc, #220]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a36      	ldr	r2, [pc, #216]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b34      	ldr	r3, [pc, #208]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4931      	ldr	r1, [pc, #196]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f0:	4b2f      	ldr	r3, [pc, #188]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	492c      	ldr	r1, [pc, #176]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	e01a      	b.n	800323c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003206:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003212:	f7ff fa51 	bl	80026b8 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321a:	f7ff fa4d 	bl	80026b8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e2dd      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800322c:	4b20      	ldr	r3, [pc, #128]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x1da>
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800323a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d074      	beq.n	8003332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x21a>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d10e      	bne.n	8003272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d10b      	bne.n	8003272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d064      	beq.n	8003330 <HAL_RCC_OscConfig+0x2f0>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d160      	bne.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e2ba      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x24a>
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0b      	ldr	r2, [pc, #44]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e026      	b.n	80032d8 <HAL_RCC_OscConfig+0x298>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003292:	d115      	bne.n	80032c0 <HAL_RCC_OscConfig+0x280>
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a05      	ldr	r2, [pc, #20]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 800329a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b03      	ldr	r3, [pc, #12]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a02      	ldr	r2, [pc, #8]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e014      	b.n	80032d8 <HAL_RCC_OscConfig+0x298>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	0800aef0 	.word	0x0800aef0
 80032b8:	200000b0 	.word	0x200000b0
 80032bc:	200000bc 	.word	0x200000bc
 80032c0:	4ba0      	ldr	r3, [pc, #640]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a9f      	ldr	r2, [pc, #636]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b9d      	ldr	r3, [pc, #628]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a9c      	ldr	r2, [pc, #624]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff f9ea 	bl	80026b8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7ff f9e6 	bl	80026b8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e276      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fa:	4b92      	ldr	r3, [pc, #584]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2a8>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7ff f9d6 	bl	80026b8 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7ff f9d2 	bl	80026b8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e262      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003322:	4b88      	ldr	r3, [pc, #544]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x2d0>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d060      	beq.n	8003400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x310>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d119      	bne.n	800337e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d116      	bne.n	800337e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	4b7c      	ldr	r3, [pc, #496]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x328>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e23f      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b76      	ldr	r3, [pc, #472]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	4973      	ldr	r1, [pc, #460]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	e040      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d023      	beq.n	80033ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003386:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6e      	ldr	r2, [pc, #440]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7ff f991 	bl	80026b8 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7ff f98d 	bl	80026b8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e21d      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ac:	4b65      	ldr	r3, [pc, #404]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b62      	ldr	r3, [pc, #392]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	495f      	ldr	r1, [pc, #380]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
 80033cc:	e018      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7ff f96d 	bl	80026b8 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7ff f969 	bl	80026b8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e1f9      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f4:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d03c      	beq.n	8003486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01c      	beq.n	800344e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	4b4b      	ldr	r3, [pc, #300]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800341a:	4a4a      	ldr	r2, [pc, #296]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7ff f948 	bl	80026b8 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7ff f944 	bl	80026b8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1d4      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343e:	4b41      	ldr	r3, [pc, #260]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCC_OscConfig+0x3ec>
 800344c:	e01b      	b.n	8003486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344e:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003454:	4a3b      	ldr	r2, [pc, #236]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7ff f92b 	bl	80026b8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003466:	f7ff f927 	bl	80026b8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1b7      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003478:	4b32      	ldr	r3, [pc, #200]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ef      	bne.n	8003466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80a6 	beq.w	80035e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003498:	4b2a      	ldr	r3, [pc, #168]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b27      	ldr	r3, [pc, #156]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	4a26      	ldr	r2, [pc, #152]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b0:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_RCC_OscConfig+0x508>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d118      	bne.n	80034fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <HAL_RCC_OscConfig+0x508>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003548 <HAL_RCC_OscConfig+0x508>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d8:	f7ff f8ee 	bl	80026b8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7ff f8ea 	bl	80026b8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e17a      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_RCC_OscConfig+0x508>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d108      	bne.n	8003518 <HAL_RCC_OscConfig+0x4d8>
 8003506:	4b0f      	ldr	r3, [pc, #60]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350c:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003516:	e029      	b.n	800356c <HAL_RCC_OscConfig+0x52c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d115      	bne.n	800354c <HAL_RCC_OscConfig+0x50c>
 8003520:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a03      	ldr	r2, [pc, #12]	@ (8003544 <HAL_RCC_OscConfig+0x504>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x52c>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	4b9c      	ldr	r3, [pc, #624]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	4a9b      	ldr	r2, [pc, #620]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800355c:	4b98      	ldr	r3, [pc, #608]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	4a97      	ldr	r2, [pc, #604]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d016      	beq.n	80035a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7ff f8a0 	bl	80026b8 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7ff f89c 	bl	80026b8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e12a      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003592:	4b8b      	ldr	r3, [pc, #556]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ed      	beq.n	800357c <HAL_RCC_OscConfig+0x53c>
 80035a0:	e015      	b.n	80035ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7ff f889 	bl	80026b8 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7ff f885 	bl	80026b8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e113      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c0:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ed      	bne.n	80035aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b7a      	ldr	r3, [pc, #488]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	4a79      	ldr	r2, [pc, #484]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80fe 	beq.w	80037e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	f040 80d0 	bne.w	8003794 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035f4:	4b72      	ldr	r3, [pc, #456]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	429a      	cmp	r2, r3
 8003606:	d130      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	3b01      	subs	r3, #1
 8003614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d127      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d11f      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003634:	2a07      	cmp	r2, #7
 8003636:	bf14      	ite	ne
 8003638:	2201      	movne	r2, #1
 800363a:	2200      	moveq	r2, #0
 800363c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363e:	4293      	cmp	r3, r2
 8003640:	d113      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d109      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d06e      	beq.n	8003748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d069      	beq.n	8003744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003670:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800367c:	4b50      	ldr	r3, [pc, #320]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0ad      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800368c:	4b4c      	ldr	r3, [pc, #304]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a4b      	ldr	r2, [pc, #300]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003698:	f7ff f80e 	bl	80026b8 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7ff f80a 	bl	80026b8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e09a      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b2:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036be:	4b40      	ldr	r3, [pc, #256]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	4b40      	ldr	r3, [pc, #256]	@ (80037c4 <HAL_RCC_OscConfig+0x784>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036ce:	3a01      	subs	r2, #1
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036d8:	0212      	lsls	r2, r2, #8
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036e0:	0852      	lsrs	r2, r2, #1
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0552      	lsls	r2, r2, #21
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036ec:	0852      	lsrs	r2, r2, #1
 80036ee:	3a01      	subs	r2, #1
 80036f0:	0652      	lsls	r2, r2, #25
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036f8:	0912      	lsrs	r2, r2, #4
 80036fa:	0452      	lsls	r2, r2, #17
 80036fc:	430a      	orrs	r2, r1
 80036fe:	4930      	ldr	r1, [pc, #192]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003700:	4313      	orrs	r3, r2
 8003702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003704:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2d      	ldr	r2, [pc, #180]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800371c:	f7fe ffcc 	bl	80026b8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe ffc8 	bl	80026b8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e058      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003742:	e050      	b.n	80037e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e04f      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d148      	bne.n	80037e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a16      	ldr	r2, [pc, #88]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800376c:	f7fe ffa4 	bl	80026b8 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe ffa0 	bl	80026b8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e030      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x734>
 8003792:	e028      	b.n	80037e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d023      	beq.n	80037e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a08      	ldr	r2, [pc, #32]	@ (80037c0 <HAL_RCC_OscConfig+0x780>)
 80037a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe ff87 	bl	80026b8 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	e00c      	b.n	80037c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe ff83 	bl	80026b8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d905      	bls.n	80037c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e013      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_RCC_OscConfig+0x7b0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ec      	bne.n	80037ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_RCC_OscConfig+0x7b0>)
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4905      	ldr	r1, [pc, #20]	@ (80037f0 <HAL_RCC_OscConfig+0x7b0>)
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCC_OscConfig+0x7b4>)
 80037dc:	4013      	ands	r3, r2
 80037de:	60cb      	str	r3, [r1, #12]
 80037e0:	e001      	b.n	80037e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	feeefffc 	.word	0xfeeefffc

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0e7      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b75      	ldr	r3, [pc, #468]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d910      	bls.n	800383c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b72      	ldr	r3, [pc, #456]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4970      	ldr	r1, [pc, #448]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b6e      	ldr	r3, [pc, #440]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0cf      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	4b66      	ldr	r3, [pc, #408]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003854:	429a      	cmp	r2, r3
 8003856:	d908      	bls.n	800386a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b63      	ldr	r3, [pc, #396]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4960      	ldr	r1, [pc, #384]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04c      	beq.n	8003910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387e:	4b5a      	ldr	r3, [pc, #360]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d121      	bne.n	80038ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0a6      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003896:	4b54      	ldr	r3, [pc, #336]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d115      	bne.n	80038ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e09a      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ae:	4b4e      	ldr	r3, [pc, #312]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08e      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038be:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e086      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b46      	ldr	r3, [pc, #280]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4943      	ldr	r1, [pc, #268]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e0:	f7fe feea 	bl	80026b8 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fe fee6 	bl	80026b8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e06e      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003928:	429a      	cmp	r2, r3
 800392a:	d208      	bcs.n	800393e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b2e      	ldr	r3, [pc, #184]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	492b      	ldr	r1, [pc, #172]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d210      	bcs.n	800396e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394c:	4b25      	ldr	r3, [pc, #148]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 0207 	bic.w	r2, r3, #7
 8003954:	4923      	ldr	r1, [pc, #140]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395c:	4b21      	ldr	r3, [pc, #132]	@ (80039e4 <HAL_RCC_ClockConfig+0x1ec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e036      	b.n	80039dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397a:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4918      	ldr	r1, [pc, #96]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4910      	ldr	r1, [pc, #64]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ac:	f000 f824 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f0>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	490b      	ldr	r1, [pc, #44]	@ (80039ec <HAL_RCC_ClockConfig+0x1f4>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
 80039c8:	4a09      	ldr	r2, [pc, #36]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f8>)
 80039ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039cc:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <HAL_RCC_ClockConfig+0x1fc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd fbbb 	bl	800114c <HAL_InitTick>
 80039d6:	4603      	mov	r3, r0
 80039d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80039da:	7afb      	ldrb	r3, [r7, #11]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40022000 	.word	0x40022000
 80039e8:	40021000 	.word	0x40021000
 80039ec:	0800aef0 	.word	0x0800aef0
 80039f0:	200000b0 	.word	0x200000b0
 80039f4:	200000bc 	.word	0x200000bc

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a06:	4b3e      	ldr	r3, [pc, #248]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a10:	4b3b      	ldr	r3, [pc, #236]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x34>
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d121      	bne.n	8003a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d11e      	bne.n	8003a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a2c:	4b34      	ldr	r3, [pc, #208]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a38:	4b31      	ldr	r3, [pc, #196]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a48:	4b2d      	ldr	r3, [pc, #180]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a54:	4a2b      	ldr	r2, [pc, #172]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10d      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d102      	bne.n	8003a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a70:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e004      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a7c:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d134      	bne.n	8003af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a86:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8003a9c:	e005      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aa0:	617b      	str	r3, [r7, #20]
      break;
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003aa6:	617b      	str	r3, [r7, #20]
      break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	617b      	str	r3, [r7, #20]
      break;
 8003aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab0:	4b13      	ldr	r3, [pc, #76]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	3301      	adds	r3, #1
 8003abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	fb03 f202 	mul.w	r2, r3, r2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	0e5b      	lsrs	r3, r3, #25
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003af0:	69bb      	ldr	r3, [r7, #24]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	@ 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	0800af08 	.word	0x0800af08
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	007a1200 	.word	0x007a1200

08003b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	200000b0 	.word	0x200000b0

08003b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b2c:	f7ff fff0 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4904      	ldr	r1, [pc, #16]	@ (8003b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	0800af00 	.word	0x0800af00

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b58:	f7ff ffda 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0adb      	lsrs	r3, r3, #11
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4904      	ldr	r1, [pc, #16]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	0800af00 	.word	0x0800af00

08003b80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b90:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <HAL_RCC_GetClockConfig+0x60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0207 	and.w	r2, r3, #7
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40022000 	.word	0x40022000

08003be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bfc:	f7ff f9bc 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003c00:	6178      	str	r0, [r7, #20]
 8003c02:	e014      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	4b25      	ldr	r3, [pc, #148]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c08:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c10:	4b22      	ldr	r3, [pc, #136]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c1c:	f7ff f9ac 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c34:	d10b      	bne.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b80      	cmp	r3, #128	@ 0x80
 8003c3a:	d919      	bls.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c40:	d902      	bls.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c42:	2302      	movs	r3, #2
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e013      	b.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c48:	2301      	movs	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e010      	b.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b80      	cmp	r3, #128	@ 0x80
 8003c52:	d902      	bls.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c54:	2303      	movs	r3, #3
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e00a      	b.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b80      	cmp	r3, #128	@ 0x80
 8003c5e:	d102      	bne.n	8003c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c60:	2302      	movs	r3, #2
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	e004      	b.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b70      	cmp	r3, #112	@ 0x70
 8003c6a:	d101      	bne.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 0207 	bic.w	r2, r3, #7
 8003c78:	4909      	ldr	r1, [pc, #36]	@ (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cac:	2300      	movs	r3, #0
 8003cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d041      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cc8:	d02a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cce:	d824      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cda:	d81e      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ce6:	e018      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ce8:	4b86      	ldr	r3, [pc, #536]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a85      	ldr	r2, [pc, #532]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cf4:	e015      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fabb 	bl	8004278 <RCCEx_PLLSAI1_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d06:	e00c      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3320      	adds	r3, #32
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fba6 	bl	8004460 <RCCEx_PLLSAI2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d18:	e003      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d28:	4b76      	ldr	r3, [pc, #472]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d36:	4973      	ldr	r1, [pc, #460]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d3e:	e001      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d041      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d58:	d02a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d5e:	d824      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d6a:	d81e      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d74:	d010      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d76:	e018      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d78:	4b62      	ldr	r3, [pc, #392]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a61      	ldr	r2, [pc, #388]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d84:	e015      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fa73 	bl	8004278 <RCCEx_PLLSAI1_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d96:	e00c      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fb5e 	bl	8004460 <RCCEx_PLLSAI2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	74fb      	strb	r3, [r7, #19]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003db8:	4b52      	ldr	r3, [pc, #328]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dc6:	494f      	ldr	r1, [pc, #316]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dce:	e001      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a0 	beq.w	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003de6:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	4a40      	ldr	r2, [pc, #256]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e08:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e14:	2301      	movs	r3, #1
 8003e16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e18:	4b3b      	ldr	r3, [pc, #236]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e24:	f7fe fc48 	bl	80026b8 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e2a:	e009      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fe fc44 	bl	80026b8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d902      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e3e:	e005      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e40:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ef      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d15c      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e52:	4b2c      	ldr	r3, [pc, #176]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01f      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d019      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e70:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e7c:	4b21      	ldr	r3, [pc, #132]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	4a1c      	ldr	r2, [pc, #112]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e9c:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe fc03 	bl	80026b8 <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb4:	e00b      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fe fbff 	bl	80026b8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d902      	bls.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	74fb      	strb	r3, [r7, #19]
            break;
 8003ecc:	e006      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0ec      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee2:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef2:	4904      	ldr	r1, [pc, #16]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003efa:	e009      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f10:	7c7b      	ldrb	r3, [r7, #17]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4b9e      	ldr	r3, [pc, #632]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	4a9d      	ldr	r2, [pc, #628]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2e:	4b98      	ldr	r3, [pc, #608]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f023 0203 	bic.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	4994      	ldr	r1, [pc, #592]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f50:	4b8f      	ldr	r3, [pc, #572]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 020c 	bic.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5e:	498c      	ldr	r1, [pc, #560]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f72:	4b87      	ldr	r3, [pc, #540]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	4983      	ldr	r1, [pc, #524]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f94:	4b7e      	ldr	r3, [pc, #504]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	497b      	ldr	r1, [pc, #492]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fb6:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc4:	4972      	ldr	r1, [pc, #456]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	496a      	ldr	r1, [pc, #424]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffa:	4b65      	ldr	r3, [pc, #404]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004008:	4961      	ldr	r1, [pc, #388]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800401c:	4b5c      	ldr	r3, [pc, #368]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	4959      	ldr	r1, [pc, #356]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403e:	4b54      	ldr	r3, [pc, #336]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404c:	4950      	ldr	r1, [pc, #320]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	4948      	ldr	r1, [pc, #288]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004082:	4b43      	ldr	r3, [pc, #268]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004090:	493f      	ldr	r1, [pc, #252]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d028      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b2:	4937      	ldr	r1, [pc, #220]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c2:	d106      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b32      	ldr	r3, [pc, #200]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a31      	ldr	r2, [pc, #196]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]
 80040d0:	e011      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040da:	d10c      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2101      	movs	r1, #1
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8c8 	bl	8004278 <RCCEx_PLLSAI1_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d028      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004102:	4b23      	ldr	r3, [pc, #140]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	491f      	ldr	r1, [pc, #124]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004120:	d106      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004122:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	4a1a      	ldr	r2, [pc, #104]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412c:	60d3      	str	r3, [r2, #12]
 800412e:	e011      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004138:	d10c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f899 	bl	8004278 <RCCEx_PLLSAI1_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414a:	7cfb      	ldrb	r3, [r7, #19]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416e:	4908      	ldr	r1, [pc, #32]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800417e:	d109      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a02      	ldr	r2, [pc, #8]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418a:	60d3      	str	r3, [r2, #12]
 800418c:	e014      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f867 	bl	8004278 <RCCEx_PLLSAI1_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d02f      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d2:	4928      	ldr	r1, [pc, #160]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e2:	d10d      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f844 	bl	8004278 <RCCEx_PLLSAI1_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d014      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	74bb      	strb	r3, [r7, #18]
 80041fe:	e011      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004208:	d10c      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3320      	adds	r3, #32
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f925 	bl	8004460 <RCCEx_PLLSAI2_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800423e:	490d      	ldr	r1, [pc, #52]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004252:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004262:	4904      	ldr	r1, [pc, #16]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800426a:	7cbb      	ldrb	r3, [r7, #18]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000

08004278 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004286:	4b75      	ldr	r3, [pc, #468]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004292:	4b72      	ldr	r3, [pc, #456]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0203 	and.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d10d      	bne.n	80042be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
       ||
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042aa:	4b6c      	ldr	r3, [pc, #432]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
       ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d047      	beq.n	800434e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	e044      	b.n	800434e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d018      	beq.n	80042fe <RCCEx_PLLSAI1_Config+0x86>
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d825      	bhi.n	800431c <RCCEx_PLLSAI1_Config+0xa4>
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d002      	beq.n	80042da <RCCEx_PLLSAI1_Config+0x62>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d009      	beq.n	80042ec <RCCEx_PLLSAI1_Config+0x74>
 80042d8:	e020      	b.n	800431c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042da:	4b60      	ldr	r3, [pc, #384]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11d      	bne.n	8004322 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ea:	e01a      	b.n	8004322 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042ec:	4b5b      	ldr	r3, [pc, #364]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d116      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fc:	e013      	b.n	8004326 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042fe:	4b57      	ldr	r3, [pc, #348]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800430a:	4b54      	ldr	r3, [pc, #336]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800431a:	e006      	b.n	800432a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e004      	b.n	800432c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800432a:	bf00      	nop
    }

    if(status == HAL_OK)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10d      	bne.n	800434e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004332:	4b4a      	ldr	r3, [pc, #296]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	430b      	orrs	r3, r1
 8004348:	4944      	ldr	r1, [pc, #272]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d17d      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004354:	4b41      	ldr	r3, [pc, #260]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a40      	ldr	r2, [pc, #256]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800435e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fe f9aa 	bl	80026b8 <HAL_GetTick>
 8004364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004366:	e009      	b.n	800437c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004368:	f7fe f9a6 	bl	80026b8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d902      	bls.n	800437c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	73fb      	strb	r3, [r7, #15]
        break;
 800437a:	e005      	b.n	8004388 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800437c:	4b37      	ldr	r3, [pc, #220]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1ef      	bne.n	8004368 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d160      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004394:	4b31      	ldr	r3, [pc, #196]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800439c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6892      	ldr	r2, [r2, #8]
 80043a4:	0211      	lsls	r1, r2, #8
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	0912      	lsrs	r2, r2, #4
 80043ac:	0452      	lsls	r2, r2, #17
 80043ae:	430a      	orrs	r2, r1
 80043b0:	492a      	ldr	r1, [pc, #168]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	610b      	str	r3, [r1, #16]
 80043b6:	e027      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d112      	bne.n	80043e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043be:	4b27      	ldr	r3, [pc, #156]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80043c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6892      	ldr	r2, [r2, #8]
 80043ce:	0211      	lsls	r1, r2, #8
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6912      	ldr	r2, [r2, #16]
 80043d4:	0852      	lsrs	r2, r2, #1
 80043d6:	3a01      	subs	r2, #1
 80043d8:	0552      	lsls	r2, r2, #21
 80043da:	430a      	orrs	r2, r1
 80043dc:	491f      	ldr	r1, [pc, #124]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]
 80043e2:	e011      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043e4:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6892      	ldr	r2, [r2, #8]
 80043f4:	0211      	lsls	r1, r2, #8
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6952      	ldr	r2, [r2, #20]
 80043fa:	0852      	lsrs	r2, r2, #1
 80043fc:	3a01      	subs	r2, #1
 80043fe:	0652      	lsls	r2, r2, #25
 8004400:	430a      	orrs	r2, r1
 8004402:	4916      	ldr	r1, [pc, #88]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004404:	4313      	orrs	r3, r2
 8004406:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004408:	4b14      	ldr	r3, [pc, #80]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a13      	ldr	r2, [pc, #76]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800440e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004412:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fe f950 	bl	80026b8 <HAL_GetTick>
 8004418:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800441a:	e009      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800441c:	f7fe f94c 	bl	80026b8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	73fb      	strb	r3, [r7, #15]
          break;
 800442e:	e005      	b.n	800443c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	4904      	ldr	r1, [pc, #16]	@ (800445c <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004450:	7bfb      	ldrb	r3, [r7, #15]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000

08004460 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800446e:	4b6a      	ldr	r3, [pc, #424]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800447a:	4b67      	ldr	r3, [pc, #412]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0203 	and.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d10d      	bne.n	80044a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
       ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004492:	4b61      	ldr	r3, [pc, #388]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
       ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d047      	beq.n	8004536 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e044      	b.n	8004536 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d018      	beq.n	80044e6 <RCCEx_PLLSAI2_Config+0x86>
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d825      	bhi.n	8004504 <RCCEx_PLLSAI2_Config+0xa4>
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d002      	beq.n	80044c2 <RCCEx_PLLSAI2_Config+0x62>
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d009      	beq.n	80044d4 <RCCEx_PLLSAI2_Config+0x74>
 80044c0:	e020      	b.n	8004504 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044c2:	4b55      	ldr	r3, [pc, #340]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11d      	bne.n	800450a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d2:	e01a      	b.n	800450a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044d4:	4b50      	ldr	r3, [pc, #320]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d116      	bne.n	800450e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e4:	e013      	b.n	800450e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044f2:	4b49      	ldr	r3, [pc, #292]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004502:	e006      	b.n	8004512 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e004      	b.n	8004514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800450a:	bf00      	nop
 800450c:	e002      	b.n	8004514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004512:	bf00      	nop
    }

    if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800451a:	4b3f      	ldr	r3, [pc, #252]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	430b      	orrs	r3, r1
 8004530:	4939      	ldr	r1, [pc, #228]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d167      	bne.n	800460c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800453c:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a35      	ldr	r2, [pc, #212]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fe f8b6 	bl	80026b8 <HAL_GetTick>
 800454c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800454e:	e009      	b.n	8004564 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004550:	f7fe f8b2 	bl	80026b8 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d902      	bls.n	8004564 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	73fb      	strb	r3, [r7, #15]
        break;
 8004562:	e005      	b.n	8004570 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004564:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ef      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d14a      	bne.n	800460c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d111      	bne.n	80045a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800457c:	4b26      	ldr	r3, [pc, #152]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6892      	ldr	r2, [r2, #8]
 800458c:	0211      	lsls	r1, r2, #8
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	0912      	lsrs	r2, r2, #4
 8004594:	0452      	lsls	r2, r2, #17
 8004596:	430a      	orrs	r2, r1
 8004598:	491f      	ldr	r1, [pc, #124]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459a:	4313      	orrs	r3, r2
 800459c:	614b      	str	r3, [r1, #20]
 800459e:	e011      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6892      	ldr	r2, [r2, #8]
 80045b0:	0211      	lsls	r1, r2, #8
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6912      	ldr	r2, [r2, #16]
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	430a      	orrs	r2, r1
 80045be:	4916      	ldr	r1, [pc, #88]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045c4:	4b14      	ldr	r3, [pc, #80]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a13      	ldr	r2, [pc, #76]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fe f872 	bl	80026b8 <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045d6:	e009      	b.n	80045ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045d8:	f7fe f86e 	bl	80026b8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
          break;
 80045ea:	e005      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4904      	ldr	r1, [pc, #16]	@ (8004618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e095      	b.n	800475a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800463e:	d009      	beq.n	8004654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
 8004646:	e005      	b.n	8004654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc fce2 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800468a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004694:	d902      	bls.n	800469c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e002      	b.n	80046a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800469c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046aa:	d007      	beq.n	80046bc <HAL_SPI_Init+0xa0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	ea42 0103 	orr.w	r1, r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 0204 	and.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e01a      	b.n	80047aa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fc fc97 	bl	80010c0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b088      	sub	sp, #32
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c2:	f7fd ff79 	bl	80026b8 <HAL_GetTick>
 80047c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d001      	beq.n	80047dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
 80047da:	e15c      	b.n	8004a96 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_Transmit+0x36>
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e154      	b.n	8004a96 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_SPI_Transmit+0x48>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e14d      	b.n	8004a96 <HAL_SPI_Transmit+0x2e4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484c:	d10f      	bne.n	800486e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800485c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800486c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	d007      	beq.n	800488c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004894:	d952      	bls.n	800493c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Transmit+0xf2>
 800489e:	8b7b      	ldrh	r3, [r7, #26]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d145      	bne.n	8004930 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048c8:	e032      	b.n	8004930 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d112      	bne.n	80048fe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048fc:	e018      	b.n	8004930 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048fe:	f7fd fedb 	bl	80026b8 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d803      	bhi.n	8004916 <HAL_SPI_Transmit+0x164>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d102      	bne.n	800491c <HAL_SPI_Transmit+0x16a>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e0b2      	b.n	8004a96 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1c7      	bne.n	80048ca <HAL_SPI_Transmit+0x118>
 800493a:	e083      	b.n	8004a44 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SPI_Transmit+0x198>
 8004944:	8b7b      	ldrh	r3, [r7, #26]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d177      	bne.n	8004a3a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d912      	bls.n	800497a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b02      	subs	r3, #2
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004978:	e05f      	b.n	8004a3a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049a0:	e04b      	b.n	8004a3a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d12b      	bne.n	8004a08 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d912      	bls.n	80049e0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b02      	subs	r3, #2
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049de:	e02c      	b.n	8004a3a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a06:	e018      	b.n	8004a3a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a08:	f7fd fe56 	bl	80026b8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d803      	bhi.n	8004a20 <HAL_SPI_Transmit+0x26e>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x274>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e02d      	b.n	8004a96 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1ae      	bne.n	80049a2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f947 	bl	8004cdc <SPI_EndRxTxTransaction>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ab0:	f7fd fe02 	bl	80026b8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac0:	f7fd fdfa 	bl	80026b8 <HAL_GetTick>
 8004ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	015b      	lsls	r3, r3, #5
 8004acc:	0d1b      	lsrs	r3, r3, #20
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ad6:	e054      	b.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d050      	beq.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae0:	f7fd fdea 	bl	80026b8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d902      	bls.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d13d      	bne.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b0e:	d111      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b18:	d004      	beq.n	8004b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b22:	d107      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3c:	d10f      	bne.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e017      	b.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d19b      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200000b0 	.word	0x200000b0

08004bb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004bc2:	f7fd fd79 	bl	80026b8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004bd2:	f7fd fd71 	bl	80026b8 <HAL_GetTick>
 8004bd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004be0:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	00da      	lsls	r2, r3, #3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	0d1b      	lsrs	r3, r3, #20
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bf8:	e060      	b.n	8004cbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c00:	d107      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d050      	beq.n	8004cbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c1a:	f7fd fd4d 	bl	80026b8 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d902      	bls.n	8004c30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d13d      	bne.n	8004cac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c48:	d111      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c52:	d004      	beq.n	8004c5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5c:	d107      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c76:	d10f      	bne.n	8004c98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e010      	b.n	8004cce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d196      	bne.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3728      	adds	r7, #40	@ 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200000b0 	.word	0x200000b0

08004cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff ff5b 	bl	8004bb0 <SPI_WaitFifoStateUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e027      	b.n	8004d60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff fec0 	bl	8004aa0 <SPI_WaitFlagStateUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e014      	b.n	8004d60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ff34 	bl	8004bb0 <SPI_WaitFifoStateUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e000      	b.n	8004d60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e049      	b.n	8004e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fc fb9c 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 fa3e 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e047      	b.n	8004ec0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a23      	ldr	r2, [pc, #140]	@ (8004ecc <HAL_TIM_Base_Start+0xb4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01d      	beq.n	8004e7e <HAL_TIM_Base_Start+0x66>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d018      	beq.n	8004e7e <HAL_TIM_Base_Start+0x66>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed0 <HAL_TIM_Base_Start+0xb8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_TIM_Base_Start+0x66>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed4 <HAL_TIM_Base_Start+0xbc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_TIM_Base_Start+0x66>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed8 <HAL_TIM_Base_Start+0xc0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_TIM_Base_Start+0x66>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <HAL_TIM_Base_Start+0xc4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_Base_Start+0x66>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <HAL_TIM_Base_Start+0xc8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d115      	bne.n	8004eaa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <HAL_TIM_Base_Start+0xcc>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d015      	beq.n	8004ebc <HAL_TIM_Base_Start+0xa4>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e96:	d011      	beq.n	8004ebc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	e008      	b.n	8004ebc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e000      	b.n	8004ebe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	00010007 	.word	0x00010007

08004ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e04f      	b.n	8004fa0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a23      	ldr	r2, [pc, #140]	@ (8004fac <HAL_TIM_Base_Start_IT+0xc4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x76>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x76>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x76>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x76>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x76>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fbc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x76>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a19      	ldr	r2, [pc, #100]	@ (8004fc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d115      	bne.n	8004f8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d015      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0xb4>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f76:	d011      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	e008      	b.n	8004f9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e000      	b.n	8004f9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40013400 	.word	0x40013400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	00010007 	.word	0x00010007

08004fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d020      	beq.n	800502c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0202 	mvn.w	r2, #2
 8004ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8e9 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f8db 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f8ec 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d020      	beq.n	8005078 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0204 	mvn.w	r2, #4
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8c3 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8b5 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8c6 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d020      	beq.n	80050c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0208 	mvn.w	r2, #8
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2204      	movs	r2, #4
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f89d 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f88f 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f8a0 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d020      	beq.n	8005110 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01b      	beq.n	8005110 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0210 	mvn.w	r2, #16
 80050e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2208      	movs	r2, #8
 80050e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f877 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f869 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f87a 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0201 	mvn.w	r2, #1
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fb fe1a 	bl	8000d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00c      	beq.n	8005162 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800515a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f99b 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00c      	beq.n	8005186 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f993 	bl	80054ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00c      	beq.n	80051aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f834 	bl	8005212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0220 	mvn.w	r2, #32
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f95b 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a46      	ldr	r2, [pc, #280]	@ (8005354 <TIM_Base_SetConfig+0x12c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005246:	d00f      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a43      	ldr	r2, [pc, #268]	@ (8005358 <TIM_Base_SetConfig+0x130>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a42      	ldr	r2, [pc, #264]	@ (800535c <TIM_Base_SetConfig+0x134>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a41      	ldr	r2, [pc, #260]	@ (8005360 <TIM_Base_SetConfig+0x138>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a40      	ldr	r2, [pc, #256]	@ (8005364 <TIM_Base_SetConfig+0x13c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a35      	ldr	r2, [pc, #212]	@ (8005354 <TIM_Base_SetConfig+0x12c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01f      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005288:	d01b      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a32      	ldr	r2, [pc, #200]	@ (8005358 <TIM_Base_SetConfig+0x130>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d017      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a31      	ldr	r2, [pc, #196]	@ (800535c <TIM_Base_SetConfig+0x134>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a30      	ldr	r2, [pc, #192]	@ (8005360 <TIM_Base_SetConfig+0x138>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005364 <TIM_Base_SetConfig+0x13c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005368 <TIM_Base_SetConfig+0x140>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2d      	ldr	r2, [pc, #180]	@ (800536c <TIM_Base_SetConfig+0x144>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005370 <TIM_Base_SetConfig+0x148>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <TIM_Base_SetConfig+0x12c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <TIM_Base_SetConfig+0x13c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <TIM_Base_SetConfig+0x140>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a16      	ldr	r2, [pc, #88]	@ (800536c <TIM_Base_SetConfig+0x144>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <TIM_Base_SetConfig+0x148>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f023 0201 	bic.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]
  }
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40013400 	.word	0x40013400
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800

08005374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e068      	b.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2e      	ldr	r2, [pc, #184]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d108      	bne.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1e      	ldr	r2, [pc, #120]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01d      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d018      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1b      	ldr	r2, [pc, #108]	@ (8005474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1a      	ldr	r2, [pc, #104]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a18      	ldr	r2, [pc, #96]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d009      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a13      	ldr	r2, [pc, #76]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a14      	ldr	r2, [pc, #80]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10c      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4313      	orrs	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40013400 	.word	0x40013400
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40014000 	.word	0x40014000

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e040      	b.n	8005554 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc f842 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	@ 0x24
 80054ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fedc 	bl	80062c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fc21 	bl	8005d54 <UART_SetConfig>
 8005512:	4603      	mov	r3, r0
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e01b      	b.n	8005554 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800552a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800553a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 ff5b 	bl	8006408 <UART_CheckIdleState>
 8005552:	4603      	mov	r3, r0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005570:	2b20      	cmp	r3, #32
 8005572:	d177      	bne.n	8005664 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_UART_Transmit+0x24>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e070      	b.n	8005666 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2221      	movs	r2, #33	@ 0x21
 8005590:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005592:	f7fd f891 	bl	80026b8 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x68>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055cc:	e02f      	b.n	800562e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 ffbd 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e03b      	b.n	8005666 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	881a      	ldrh	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005600:	b292      	uxth	r2, r2
 8005602:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	3302      	adds	r3, #2
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e007      	b.n	800561c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1c9      	bne.n	80055ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	@ 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 ff87 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e005      	b.n	8005666 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	@ 0x28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005684:	2b20      	cmp	r3, #32
 8005686:	d137      	bne.n	80056f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Receive_IT+0x24>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e030      	b.n	80056fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <HAL_UART_Receive_IT+0x94>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01f      	beq.n	80056e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d018      	beq.n	80056e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	613b      	str	r3, [r7, #16]
   return(result);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69f9      	ldr	r1, [r7, #28]
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e6      	bne.n	80056b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 ffa0 	bl	8006634 <UART_Start_Receive_IT>
 80056f4:	4603      	mov	r3, r0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3728      	adds	r7, #40	@ 0x28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40008000 	.word	0x40008000

08005708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0ba      	sub	sp, #232	@ 0xe8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800572e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005732:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005736:	4013      	ands	r3, r2
 8005738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800573c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d115      	bne.n	8005770 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00f      	beq.n	8005770 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 82ca 	beq.w	8005cfa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
      }
      return;
 800576e:	e2c4      	b.n	8005cfa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8117 	beq.w	80059a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800578a:	4b85      	ldr	r3, [pc, #532]	@ (80059a0 <HAL_UART_IRQHandler+0x298>)
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 810a 	beq.w	80059a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d011      	beq.n	80057c4 <HAL_UART_IRQHandler+0xbc>
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ba:	f043 0201 	orr.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_UART_IRQHandler+0xec>
 80057d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00b      	beq.n	80057f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2202      	movs	r2, #2
 80057e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <HAL_UART_IRQHandler+0x11c>
 8005800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2204      	movs	r2, #4
 8005812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800581a:	f043 0202 	orr.w	r2, r3, #2
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d017      	beq.n	8005860 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800583c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005840:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2208      	movs	r2, #8
 800584e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005856:	f043 0208 	orr.w	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <HAL_UART_IRQHandler+0x18a>
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005870:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00c      	beq.n	8005892 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8230 	beq.w	8005cfe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	d005      	beq.n	80058ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d04f      	beq.n	800598a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 ff68 	bl	80067c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d141      	bne.n	8005982 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800591c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800592a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800592e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d9      	bne.n	80058fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800594e:	2b00      	cmp	r3, #0
 8005950:	d013      	beq.n	800597a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005956:	4a13      	ldr	r2, [pc, #76]	@ (80059a4 <HAL_UART_IRQHandler+0x29c>)
 8005958:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	4618      	mov	r0, r3
 8005960:	f7fc fffa 	bl	8002958 <HAL_DMA_Abort_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	e00f      	b.n	800599a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f9d4 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e00b      	b.n	800599a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9d0 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e007      	b.n	800599a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9cc 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005998:	e1b1      	b.n	8005cfe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599a:	bf00      	nop
    return;
 800599c:	e1af      	b.n	8005cfe <HAL_UART_IRQHandler+0x5f6>
 800599e:	bf00      	nop
 80059a0:	04000120 	.word	0x04000120
 80059a4:	08006889 	.word	0x08006889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 816a 	bne.w	8005c86 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8163 	beq.w	8005c86 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 815c 	beq.w	8005c86 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2210      	movs	r2, #16
 80059d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	f040 80d4 	bne.w	8005b8e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80ad 	beq.w	8005b56 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f080 80a5 	bcs.w	8005b56 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 8086 	bne.w	8005b34 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1da      	bne.n	8005a28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e1      	bne.n	8005a72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ad2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ad8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e3      	bne.n	8005aae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b04:	f023 0310 	bic.w	r3, r3, #16
 8005b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e4      	bne.n	8005af4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fc fed4 	bl	80028dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8f4 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b54:	e0d5      	b.n	8005d02 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b60:	429a      	cmp	r2, r3
 8005b62:	f040 80ce 	bne.w	8005d02 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	f040 80c5 	bne.w	8005d02 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8d8 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
      return;
 8005b8c:	e0b9      	b.n	8005d02 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80ab 	beq.w	8005d06 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80a6 	beq.w	8005d06 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e4      	bne.n	8005bba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c14:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e3      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0310 	bic.w	r3, r3, #16
 8005c50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	69b9      	ldr	r1, [r7, #24]
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e4      	bne.n	8005c3c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f85c 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c84:	e03f      	b.n	8005d06 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x5a8>
 8005c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 ffe9 	bl	8006c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cae:	e02d      	b.n	8005d0c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00e      	beq.n	8005cda <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01c      	beq.n	8005d0a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
    }
    return;
 8005cd8:	e017      	b.n	8005d0a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d012      	beq.n	8005d0c <HAL_UART_IRQHandler+0x604>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fdde 	bl	80068b4 <UART_EndTransmit_IT>
    return;
 8005cf8:	e008      	b.n	8005d0c <HAL_UART_IRQHandler+0x604>
      return;
 8005cfa:	bf00      	nop
 8005cfc:	e006      	b.n	8005d0c <HAL_UART_IRQHandler+0x604>
    return;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <HAL_UART_IRQHandler+0x604>
      return;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <HAL_UART_IRQHandler+0x604>
      return;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <HAL_UART_IRQHandler+0x604>
    return;
 8005d0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d0c:	37e8      	adds	r7, #232	@ 0xe8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop

08005d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d58:	b08a      	sub	sp, #40	@ 0x28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4ba4      	ldr	r3, [pc, #656]	@ (8006014 <UART_SetConfig+0x2c0>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a99      	ldr	r2, [pc, #612]	@ (8006018 <UART_SetConfig+0x2c4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a90      	ldr	r2, [pc, #576]	@ (800601c <UART_SetConfig+0x2c8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d126      	bne.n	8005e2c <UART_SetConfig+0xd8>
 8005dde:	4b90      	ldr	r3, [pc, #576]	@ (8006020 <UART_SetConfig+0x2cc>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d81b      	bhi.n	8005e24 <UART_SetConfig+0xd0>
 8005dec:	a201      	add	r2, pc, #4	@ (adr r2, 8005df4 <UART_SetConfig+0xa0>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0a:	e116      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e12:	e112      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e10e      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e10a      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2a:	e106      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a7c      	ldr	r2, [pc, #496]	@ (8006024 <UART_SetConfig+0x2d0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d138      	bne.n	8005ea8 <UART_SetConfig+0x154>
 8005e36:	4b7a      	ldr	r3, [pc, #488]	@ (8006020 <UART_SetConfig+0x2cc>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d82d      	bhi.n	8005ea0 <UART_SetConfig+0x14c>
 8005e44:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <UART_SetConfig+0xf8>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	08005ea1 	.word	0x08005ea1
 8005e58:	08005ea1 	.word	0x08005ea1
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005ea1 	.word	0x08005ea1
 8005e68:	08005ea1 	.word	0x08005ea1
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005e99 	.word	0x08005e99
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e0d8      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e0d4      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e0d0      	b.n	800603a <UART_SetConfig+0x2e6>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e0cc      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e0c8      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a5e      	ldr	r2, [pc, #376]	@ (8006028 <UART_SetConfig+0x2d4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d125      	bne.n	8005efe <UART_SetConfig+0x1aa>
 8005eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8006020 <UART_SetConfig+0x2cc>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ebc:	2b30      	cmp	r3, #48	@ 0x30
 8005ebe:	d016      	beq.n	8005eee <UART_SetConfig+0x19a>
 8005ec0:	2b30      	cmp	r3, #48	@ 0x30
 8005ec2:	d818      	bhi.n	8005ef6 <UART_SetConfig+0x1a2>
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d00a      	beq.n	8005ede <UART_SetConfig+0x18a>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d814      	bhi.n	8005ef6 <UART_SetConfig+0x1a2>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <UART_SetConfig+0x182>
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d008      	beq.n	8005ee6 <UART_SetConfig+0x192>
 8005ed4:	e00f      	b.n	8005ef6 <UART_SetConfig+0x1a2>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005edc:	e0ad      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee4:	e0a9      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eec:	e0a5      	b.n	800603a <UART_SetConfig+0x2e6>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef4:	e0a1      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efc:	e09d      	b.n	800603a <UART_SetConfig+0x2e6>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a4a      	ldr	r2, [pc, #296]	@ (800602c <UART_SetConfig+0x2d8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d125      	bne.n	8005f54 <UART_SetConfig+0x200>
 8005f08:	4b45      	ldr	r3, [pc, #276]	@ (8006020 <UART_SetConfig+0x2cc>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f14:	d016      	beq.n	8005f44 <UART_SetConfig+0x1f0>
 8005f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f18:	d818      	bhi.n	8005f4c <UART_SetConfig+0x1f8>
 8005f1a:	2b80      	cmp	r3, #128	@ 0x80
 8005f1c:	d00a      	beq.n	8005f34 <UART_SetConfig+0x1e0>
 8005f1e:	2b80      	cmp	r3, #128	@ 0x80
 8005f20:	d814      	bhi.n	8005f4c <UART_SetConfig+0x1f8>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <UART_SetConfig+0x1d8>
 8005f26:	2b40      	cmp	r3, #64	@ 0x40
 8005f28:	d008      	beq.n	8005f3c <UART_SetConfig+0x1e8>
 8005f2a:	e00f      	b.n	8005f4c <UART_SetConfig+0x1f8>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f32:	e082      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f34:	2302      	movs	r3, #2
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3a:	e07e      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f42:	e07a      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4a:	e076      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f52:	e072      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a35      	ldr	r2, [pc, #212]	@ (8006030 <UART_SetConfig+0x2dc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d12a      	bne.n	8005fb4 <UART_SetConfig+0x260>
 8005f5e:	4b30      	ldr	r3, [pc, #192]	@ (8006020 <UART_SetConfig+0x2cc>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f6c:	d01a      	beq.n	8005fa4 <UART_SetConfig+0x250>
 8005f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f72:	d81b      	bhi.n	8005fac <UART_SetConfig+0x258>
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f78:	d00c      	beq.n	8005f94 <UART_SetConfig+0x240>
 8005f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f7e:	d815      	bhi.n	8005fac <UART_SetConfig+0x258>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <UART_SetConfig+0x238>
 8005f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f88:	d008      	beq.n	8005f9c <UART_SetConfig+0x248>
 8005f8a:	e00f      	b.n	8005fac <UART_SetConfig+0x258>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f92:	e052      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f94:	2302      	movs	r3, #2
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9a:	e04e      	b.n	800603a <UART_SetConfig+0x2e6>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa2:	e04a      	b.n	800603a <UART_SetConfig+0x2e6>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005faa:	e046      	b.n	800603a <UART_SetConfig+0x2e6>
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb2:	e042      	b.n	800603a <UART_SetConfig+0x2e6>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	@ (8006018 <UART_SetConfig+0x2c4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d13a      	bne.n	8006034 <UART_SetConfig+0x2e0>
 8005fbe:	4b18      	ldr	r3, [pc, #96]	@ (8006020 <UART_SetConfig+0x2cc>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fcc:	d01a      	beq.n	8006004 <UART_SetConfig+0x2b0>
 8005fce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fd2:	d81b      	bhi.n	800600c <UART_SetConfig+0x2b8>
 8005fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd8:	d00c      	beq.n	8005ff4 <UART_SetConfig+0x2a0>
 8005fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fde:	d815      	bhi.n	800600c <UART_SetConfig+0x2b8>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <UART_SetConfig+0x298>
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe8:	d008      	beq.n	8005ffc <UART_SetConfig+0x2a8>
 8005fea:	e00f      	b.n	800600c <UART_SetConfig+0x2b8>
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff2:	e022      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffa:	e01e      	b.n	800603a <UART_SetConfig+0x2e6>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006002:	e01a      	b.n	800603a <UART_SetConfig+0x2e6>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600a:	e016      	b.n	800603a <UART_SetConfig+0x2e6>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006012:	e012      	b.n	800603a <UART_SetConfig+0x2e6>
 8006014:	efff69f3 	.word	0xefff69f3
 8006018:	40008000 	.word	0x40008000
 800601c:	40013800 	.word	0x40013800
 8006020:	40021000 	.word	0x40021000
 8006024:	40004400 	.word	0x40004400
 8006028:	40004800 	.word	0x40004800
 800602c:	40004c00 	.word	0x40004c00
 8006030:	40005000 	.word	0x40005000
 8006034:	2310      	movs	r3, #16
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a9f      	ldr	r2, [pc, #636]	@ (80062bc <UART_SetConfig+0x568>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d17a      	bne.n	800613a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006044:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006048:	2b08      	cmp	r3, #8
 800604a:	d824      	bhi.n	8006096 <UART_SetConfig+0x342>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x300>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006079 	.word	0x08006079
 8006058:	08006097 	.word	0x08006097
 800605c:	08006081 	.word	0x08006081
 8006060:	08006097 	.word	0x08006097
 8006064:	08006087 	.word	0x08006087
 8006068:	08006097 	.word	0x08006097
 800606c:	08006097 	.word	0x08006097
 8006070:	08006097 	.word	0x08006097
 8006074:	0800608f 	.word	0x0800608f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fd fd56 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 800607c:	61f8      	str	r0, [r7, #28]
        break;
 800607e:	e010      	b.n	80060a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006080:	4b8f      	ldr	r3, [pc, #572]	@ (80062c0 <UART_SetConfig+0x56c>)
 8006082:	61fb      	str	r3, [r7, #28]
        break;
 8006084:	e00d      	b.n	80060a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006086:	f7fd fcb7 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800608a:	61f8      	str	r0, [r7, #28]
        break;
 800608c:	e009      	b.n	80060a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006092:	61fb      	str	r3, [r7, #28]
        break;
 8006094:	e005      	b.n	80060a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80fb 	beq.w	80062a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d305      	bcc.n	80060c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d903      	bls.n	80060ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060cc:	e0e8      	b.n	80062a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2200      	movs	r2, #0
 80060d2:	461c      	mov	r4, r3
 80060d4:	4615      	mov	r5, r2
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	022b      	lsls	r3, r5, #8
 80060e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060e4:	0222      	lsls	r2, r4, #8
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	6849      	ldr	r1, [r1, #4]
 80060ea:	0849      	lsrs	r1, r1, #1
 80060ec:	2000      	movs	r0, #0
 80060ee:	4688      	mov	r8, r1
 80060f0:	4681      	mov	r9, r0
 80060f2:	eb12 0a08 	adds.w	sl, r2, r8
 80060f6:	eb43 0b09 	adc.w	fp, r3, r9
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006108:	4650      	mov	r0, sl
 800610a:	4659      	mov	r1, fp
 800610c:	f7fa faa4 	bl	8000658 <__aeabi_uldivmod>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4613      	mov	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800611e:	d308      	bcc.n	8006132 <UART_SetConfig+0x3de>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006126:	d204      	bcs.n	8006132 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	60da      	str	r2, [r3, #12]
 8006130:	e0b6      	b.n	80062a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006138:	e0b2      	b.n	80062a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006142:	d15e      	bne.n	8006202 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006144:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006148:	2b08      	cmp	r3, #8
 800614a:	d828      	bhi.n	800619e <UART_SetConfig+0x44a>
 800614c:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <UART_SetConfig+0x400>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	08006179 	.word	0x08006179
 8006158:	08006181 	.word	0x08006181
 800615c:	08006189 	.word	0x08006189
 8006160:	0800619f 	.word	0x0800619f
 8006164:	0800618f 	.word	0x0800618f
 8006168:	0800619f 	.word	0x0800619f
 800616c:	0800619f 	.word	0x0800619f
 8006170:	0800619f 	.word	0x0800619f
 8006174:	08006197 	.word	0x08006197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006178:	f7fd fcd6 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 800617c:	61f8      	str	r0, [r7, #28]
        break;
 800617e:	e014      	b.n	80061aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006180:	f7fd fce8 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8006184:	61f8      	str	r0, [r7, #28]
        break;
 8006186:	e010      	b.n	80061aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006188:	4b4d      	ldr	r3, [pc, #308]	@ (80062c0 <UART_SetConfig+0x56c>)
 800618a:	61fb      	str	r3, [r7, #28]
        break;
 800618c:	e00d      	b.n	80061aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618e:	f7fd fc33 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8006192:	61f8      	str	r0, [r7, #28]
        break;
 8006194:	e009      	b.n	80061aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619a:	61fb      	str	r3, [r7, #28]
        break;
 800619c:	e005      	b.n	80061aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d077      	beq.n	80062a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	005a      	lsls	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	441a      	add	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d916      	bls.n	80061fa <UART_SetConfig+0x4a6>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d2:	d212      	bcs.n	80061fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f023 030f 	bic.w	r3, r3, #15
 80061dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	8afb      	ldrh	r3, [r7, #22]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	8afa      	ldrh	r2, [r7, #22]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e052      	b.n	80062a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006200:	e04e      	b.n	80062a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006202:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006206:	2b08      	cmp	r3, #8
 8006208:	d827      	bhi.n	800625a <UART_SetConfig+0x506>
 800620a:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <UART_SetConfig+0x4bc>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006235 	.word	0x08006235
 8006214:	0800623d 	.word	0x0800623d
 8006218:	08006245 	.word	0x08006245
 800621c:	0800625b 	.word	0x0800625b
 8006220:	0800624b 	.word	0x0800624b
 8006224:	0800625b 	.word	0x0800625b
 8006228:	0800625b 	.word	0x0800625b
 800622c:	0800625b 	.word	0x0800625b
 8006230:	08006253 	.word	0x08006253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fd fc78 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8006238:	61f8      	str	r0, [r7, #28]
        break;
 800623a:	e014      	b.n	8006266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800623c:	f7fd fc8a 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8006240:	61f8      	str	r0, [r7, #28]
        break;
 8006242:	e010      	b.n	8006266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006244:	4b1e      	ldr	r3, [pc, #120]	@ (80062c0 <UART_SetConfig+0x56c>)
 8006246:	61fb      	str	r3, [r7, #28]
        break;
 8006248:	e00d      	b.n	8006266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624a:	f7fd fbd5 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800624e:	61f8      	str	r0, [r7, #28]
        break;
 8006250:	e009      	b.n	8006266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006256:	61fb      	str	r3, [r7, #28]
        break;
 8006258:	e005      	b.n	8006266 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006264:	bf00      	nop
    }

    if (pclk != 0U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	085a      	lsrs	r2, r3, #1
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	441a      	add	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b0f      	cmp	r3, #15
 8006284:	d909      	bls.n	800629a <UART_SetConfig+0x546>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628c:	d205      	bcs.n	800629a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60da      	str	r2, [r3, #12]
 8006298:	e002      	b.n	80062a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80062ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3728      	adds	r7, #40	@ 0x28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ba:	bf00      	nop
 80062bc:	40008000 	.word	0x40008000
 80062c0:	00f42400 	.word	0x00f42400

080062c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01a      	beq.n	80063da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063c2:	d10a      	bne.n	80063da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b098      	sub	sp, #96	@ 0x60
 800640c:	af02      	add	r7, sp, #8
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006418:	f7fc f94e 	bl	80026b8 <HAL_GetTick>
 800641c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b08      	cmp	r3, #8
 800642a:	d12e      	bne.n	800648a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800642c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f88c 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d021      	beq.n	800648a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800645a:	653b      	str	r3, [r7, #80]	@ 0x50
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006464:	647b      	str	r3, [r7, #68]	@ 0x44
 8006466:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800646a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e6      	bne.n	8006446 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e062      	b.n	8006550 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d149      	bne.n	800652c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a0:	2200      	movs	r2, #0
 80064a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f856 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d03c      	beq.n	800652c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	623b      	str	r3, [r7, #32]
   return(result);
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e6      	bne.n	80064b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006504:	61fa      	str	r2, [r7, #28]
 8006506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	69b9      	ldr	r1, [r7, #24]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	617b      	str	r3, [r7, #20]
   return(result);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e011      	b.n	8006550 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3758      	adds	r7, #88	@ 0x58
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006568:	e04f      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d04b      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fc f8a1 	bl	80026b8 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <UART_WaitOnFlagUntilTimeout+0x30>
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e04e      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	d037      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0xb2>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b80      	cmp	r3, #128	@ 0x80
 800659e:	d034      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0xb2>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b40      	cmp	r3, #64	@ 0x40
 80065a4:	d031      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d110      	bne.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2208      	movs	r2, #8
 80065ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f8ff 	bl	80067c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2208      	movs	r2, #8
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e029      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e4:	d111      	bne.n	800660a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f8e5 	bl	80067c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e00f      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4013      	ands	r3, r2
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	429a      	cmp	r2, r3
 8006626:	d0a0      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006634:	b480      	push	{r7}
 8006636:	b097      	sub	sp, #92	@ 0x5c
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006666:	d10e      	bne.n	8006686 <UART_Start_Receive_IT+0x52>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <UART_Start_Receive_IT+0x48>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006676:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800667a:	e02d      	b.n	80066d8 <UART_Start_Receive_IT+0xa4>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	22ff      	movs	r2, #255	@ 0xff
 8006680:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006684:	e028      	b.n	80066d8 <UART_Start_Receive_IT+0xa4>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <UART_Start_Receive_IT+0x76>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <UART_Start_Receive_IT+0x6c>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800669e:	e01b      	b.n	80066d8 <UART_Start_Receive_IT+0xa4>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	227f      	movs	r2, #127	@ 0x7f
 80066a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066a8:	e016      	b.n	80066d8 <UART_Start_Receive_IT+0xa4>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b2:	d10d      	bne.n	80066d0 <UART_Start_Receive_IT+0x9c>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <UART_Start_Receive_IT+0x92>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	227f      	movs	r2, #127	@ 0x7f
 80066c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066c4:	e008      	b.n	80066d8 <UART_Start_Receive_IT+0xa4>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	223f      	movs	r2, #63	@ 0x3f
 80066ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066ce:	e003      	b.n	80066d8 <UART_Start_Receive_IT+0xa4>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2222      	movs	r2, #34	@ 0x22
 80066e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3308      	adds	r3, #8
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3308      	adds	r3, #8
 8006706:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006708:	64ba      	str	r2, [r7, #72]	@ 0x48
 800670a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800670e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e5      	bne.n	80066e8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006724:	d107      	bne.n	8006736 <UART_Start_Receive_IT+0x102>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a21      	ldr	r2, [pc, #132]	@ (80067b8 <UART_Start_Receive_IT+0x184>)
 8006732:	669a      	str	r2, [r3, #104]	@ 0x68
 8006734:	e002      	b.n	800673c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a20      	ldr	r2, [pc, #128]	@ (80067bc <UART_Start_Receive_IT+0x188>)
 800673a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d019      	beq.n	8006778 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006762:	637b      	str	r3, [r7, #52]	@ 0x34
 8006764:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e6      	bne.n	8006744 <UART_Start_Receive_IT+0x110>
 8006776:	e018      	b.n	80067aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	613b      	str	r3, [r7, #16]
   return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	653b      	str	r3, [r7, #80]	@ 0x50
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006796:	623b      	str	r3, [r7, #32]
 8006798:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e6      	bne.n	8006778 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	375c      	adds	r7, #92	@ 0x5c
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	08006ac5 	.word	0x08006ac5
 80067bc:	08006909 	.word	0x08006909

080067c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b095      	sub	sp, #84	@ 0x54
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e6      	bne.n	80067c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	61fb      	str	r3, [r7, #28]
   return(result);
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800681a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800681c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006832:	2b01      	cmp	r3, #1
 8006834:	d118      	bne.n	8006868 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	60bb      	str	r3, [r7, #8]
   return(result);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	647b      	str	r3, [r7, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	613b      	str	r3, [r7, #16]
   return(result);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e6      	bne.n	8006836 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800687c:	bf00      	nop
 800687e:	3754      	adds	r7, #84	@ 0x54
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff fa3e 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6979      	ldr	r1, [r7, #20]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	613b      	str	r3, [r7, #16]
   return(result);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e6      	bne.n	80068bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fa0a 	bl	8005d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006900:	bf00      	nop
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b09c      	sub	sp, #112	@ 0x70
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006916:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006920:	2b22      	cmp	r3, #34	@ 0x22
 8006922:	f040 80be 	bne.w	8006aa2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800692c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006930:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006934:	b2d9      	uxtb	r1, r3
 8006936:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800693a:	b2da      	uxtb	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006940:	400a      	ands	r2, r1
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 80a3 	bne.w	8006ab6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800697e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800698e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006990:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006994:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800699c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e6      	bne.n	8006970 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3308      	adds	r3, #8
 80069a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80069c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80069c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e5      	bne.n	80069a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a34      	ldr	r2, [pc, #208]	@ (8006ac0 <UART_RxISR_8BIT+0x1b8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d01f      	beq.n	8006a34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e6      	bne.n	8006a02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d12e      	bne.n	8006a9a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0310 	bic.w	r3, r3, #16
 8006a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	69b9      	ldr	r1, [r7, #24]
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d103      	bne.n	8006a8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2210      	movs	r2, #16
 8006a88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff f952 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a98:	e00d      	b.n	8006ab6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7f9 fff4 	bl	8000a88 <HAL_UART_RxCpltCallback>
}
 8006aa0:	e009      	b.n	8006ab6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	8b1b      	ldrh	r3, [r3, #24]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0208 	orr.w	r2, r2, #8
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	831a      	strh	r2, [r3, #24]
}
 8006ab6:	bf00      	nop
 8006ab8:	3770      	adds	r7, #112	@ 0x70
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40008000 	.word	0x40008000

08006ac4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b09c      	sub	sp, #112	@ 0x70
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ad2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006adc:	2b22      	cmp	r3, #34	@ 0x22
 8006ade:	f040 80be 	bne.w	8006c5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ae8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006af2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006af6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006afa:	4013      	ands	r3, r2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 80a3 	bne.w	8006c72 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b40:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e6      	bne.n	8006b2c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a34      	ldr	r2, [pc, #208]	@ (8006c7c <UART_RxISR_16BIT+0x1b8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d01f      	beq.n	8006bf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d018      	beq.n	8006bf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e6      	bne.n	8006bbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d12e      	bne.n	8006c56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b10      	cmp	r3, #16
 8006c3c:	d103      	bne.n	8006c46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2210      	movs	r2, #16
 8006c44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff f874 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c54:	e00d      	b.n	8006c72 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7f9 ff16 	bl	8000a88 <HAL_UART_RxCpltCallback>
}
 8006c5c:	e009      	b.n	8006c72 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	8b1b      	ldrh	r3, [r3, #24]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0208 	orr.w	r2, r2, #8
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	831a      	strh	r2, [r3, #24]
}
 8006c72:	bf00      	nop
 8006c74:	3770      	adds	r7, #112	@ 0x70
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40008000 	.word	0x40008000

08006c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <__NVIC_SetPriority>:
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6039      	str	r1, [r7, #0]
 8006c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db0a      	blt.n	8006cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	490c      	ldr	r1, [pc, #48]	@ (8006ce0 <__NVIC_SetPriority+0x4c>)
 8006cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb2:	0112      	lsls	r2, r2, #4
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006cbc:	e00a      	b.n	8006cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	4908      	ldr	r1, [pc, #32]	@ (8006ce4 <__NVIC_SetPriority+0x50>)
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	3b04      	subs	r3, #4
 8006ccc:	0112      	lsls	r2, r2, #4
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	761a      	strb	r2, [r3, #24]
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	e000e100 	.word	0xe000e100
 8006ce4:	e000ed00 	.word	0xe000ed00

08006ce8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <SysTick_Handler+0x1c>)
 8006cee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cf0:	f001 fd18 	bl	8008724 <xTaskGetSchedulerState>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d001      	beq.n	8006cfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cfa:	f002 fb0d 	bl	8009318 <xPortSysTickHandler>
  }
}
 8006cfe:	bf00      	nop
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	e000e010 	.word	0xe000e010

08006d08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	f06f 0004 	mvn.w	r0, #4
 8006d12:	f7ff ffbf 	bl	8006c94 <__NVIC_SetPriority>
#endif
}
 8006d16:	bf00      	nop
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d22:	f3ef 8305 	mrs	r3, IPSR
 8006d26:	603b      	str	r3, [r7, #0]
  return(result);
 8006d28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d2e:	f06f 0305 	mvn.w	r3, #5
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	e00c      	b.n	8006d50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d36:	4b0a      	ldr	r3, [pc, #40]	@ (8006d60 <osKernelInitialize+0x44>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d3e:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <osKernelInitialize+0x44>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	e002      	b.n	8006d50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d50:	687b      	ldr	r3, [r7, #4]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	20000344 	.word	0x20000344

08006d64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6a:	f3ef 8305 	mrs	r3, IPSR
 8006d6e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d76:	f06f 0305 	mvn.w	r3, #5
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	e010      	b.n	8006da0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <osKernelStart+0x48>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d109      	bne.n	8006d9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d86:	f7ff ffbf 	bl	8006d08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d8a:	4b08      	ldr	r3, [pc, #32]	@ (8006dac <osKernelStart+0x48>)
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d90:	f001 f87a 	bl	8007e88 <vTaskStartScheduler>
      stat = osOK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	e002      	b.n	8006da0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006da0:	687b      	ldr	r3, [r7, #4]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000344 	.word	0x20000344

08006db0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08e      	sub	sp, #56	@ 0x38
 8006db4:	af04      	add	r7, sp, #16
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc0:	f3ef 8305 	mrs	r3, IPSR
 8006dc4:	617b      	str	r3, [r7, #20]
  return(result);
 8006dc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d17e      	bne.n	8006eca <osThreadNew+0x11a>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d07b      	beq.n	8006eca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006dd2:	2380      	movs	r3, #128	@ 0x80
 8006dd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dd6:	2318      	movs	r3, #24
 8006dd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006dde:	f04f 33ff 	mov.w	r3, #4294967295
 8006de2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d045      	beq.n	8006e76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <osThreadNew+0x48>
        name = attr->name;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <osThreadNew+0x6e>
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	2b38      	cmp	r3, #56	@ 0x38
 8006e10:	d805      	bhi.n	8006e1e <osThreadNew+0x6e>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <osThreadNew+0x72>
        return (NULL);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e054      	b.n	8006ecc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	089b      	lsrs	r3, r3, #2
 8006e30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00e      	beq.n	8006e58 <osThreadNew+0xa8>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006e40:	d90a      	bls.n	8006e58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <osThreadNew+0xa8>
        mem = 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e010      	b.n	8006e7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <osThreadNew+0xca>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <osThreadNew+0xca>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <osThreadNew+0xca>
          mem = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e001      	b.n	8006e7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d110      	bne.n	8006ea2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e88:	9202      	str	r2, [sp, #8]
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fe1a 	bl	8007ad0 <xTaskCreateStatic>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	e013      	b.n	8006eca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d110      	bne.n	8006eca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f107 0310 	add.w	r3, r7, #16
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fe68 	bl	8007b90 <xTaskCreate>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d001      	beq.n	8006eca <osThreadNew+0x11a>
            hTask = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006eca:	693b      	ldr	r3, [r7, #16]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3728      	adds	r7, #40	@ 0x28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006edc:	f3ef 8305 	mrs	r3, IPSR
 8006ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <osDelay+0x1c>
    stat = osErrorISR;
 8006ee8:	f06f 0305 	mvn.w	r3, #5
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e007      	b.n	8006f00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 ff8e 	bl	8007e1c <vTaskDelay>
    }
  }

  return (stat);
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a07      	ldr	r2, [pc, #28]	@ (8006f38 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4a06      	ldr	r2, [pc, #24]	@ (8006f3c <vApplicationGetIdleTaskMemory+0x30>)
 8006f22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2280      	movs	r2, #128	@ 0x80
 8006f28:	601a      	str	r2, [r3, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000348 	.word	0x20000348
 8006f3c:	200003a4 	.word	0x200003a4

08006f40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a07      	ldr	r2, [pc, #28]	@ (8006f6c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a06      	ldr	r2, [pc, #24]	@ (8006f70 <vApplicationGetTimerTaskMemory+0x30>)
 8006f56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f5e:	601a      	str	r2, [r3, #0]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	200005a4 	.word	0x200005a4
 8006f70:	20000600 	.word	0x20000600

08006f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f103 0208 	add.w	r2, r3, #8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f103 0208 	add.w	r2, r3, #8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f103 0208 	add.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d103      	bne.n	8007036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e00c      	b.n	8007050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3308      	adds	r3, #8
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e002      	b.n	8007044 <vListInsert+0x2e>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	d2f6      	bcs.n	800703e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
}
 800707c:	bf00      	nop
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6892      	ldr	r2, [r2, #8]
 800709e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6852      	ldr	r2, [r2, #4]
 80070a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d103      	bne.n	80070bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	1e5a      	subs	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007108:	f002 f876 	bl	80091f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007114:	68f9      	ldr	r1, [r7, #12]
 8007116:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	441a      	add	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007138:	3b01      	subs	r3, #1
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	22ff      	movs	r2, #255	@ 0xff
 800714c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	22ff      	movs	r2, #255	@ 0xff
 8007154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d114      	bne.n	8007188 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01a      	beq.n	800719c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3310      	adds	r3, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f91a 	bl	80083a4 <xTaskRemoveFromEventList>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d012      	beq.n	800719c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007176:	4b0d      	ldr	r3, [pc, #52]	@ (80071ac <xQueueGenericReset+0xd0>)
 8007178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	e009      	b.n	800719c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3310      	adds	r3, #16
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fef1 	bl	8006f74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3324      	adds	r3, #36	@ 0x24
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff feec 	bl	8006f74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800719c:	f002 f85e 	bl	800925c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071a0:	2301      	movs	r3, #1
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	@ 0x38
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <xQueueGenericCreateStatic+0x56>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <xQueueGenericCreateStatic+0x5a>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <xQueueGenericCreateStatic+0x5c>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10b      	bne.n	8007228 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	623b      	str	r3, [r7, #32]
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <xQueueGenericCreateStatic+0x84>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <xQueueGenericCreateStatic+0x88>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <xQueueGenericCreateStatic+0x8a>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	61fb      	str	r3, [r7, #28]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007256:	2350      	movs	r3, #80	@ 0x50
 8007258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b50      	cmp	r3, #80	@ 0x50
 800725e:	d00b      	beq.n	8007278 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61bb      	str	r3, [r7, #24]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007278:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800728c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f805 	bl	80072aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3730      	adds	r7, #48	@ 0x30
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e002      	b.n	80072cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072d8:	2101      	movs	r1, #1
 80072da:	69b8      	ldr	r0, [r7, #24]
 80072dc:	f7ff fefe 	bl	80070dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08e      	sub	sp, #56	@ 0x38
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072fe:	2300      	movs	r3, #0
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10b      	bne.n	8007324 <xQueueGenericSend+0x34>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <xQueueGenericSend+0x42>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <xQueueGenericSend+0x46>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueGenericSend+0x48>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <xQueueGenericSend+0x64>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d103      	bne.n	8007362 <xQueueGenericSend+0x72>
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <xQueueGenericSend+0x76>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <xQueueGenericSend+0x78>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xQueueGenericSend+0x94>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007384:	f001 f9ce 	bl	8008724 <xTaskGetSchedulerState>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d102      	bne.n	8007394 <xQueueGenericSend+0xa4>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <xQueueGenericSend+0xa8>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <xQueueGenericSend+0xaa>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	61fb      	str	r3, [r7, #28]
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	e7fd      	b.n	80073b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073b6:	f001 ff1f 	bl	80091f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <xQueueGenericSend+0xdc>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d129      	bne.n	8007420 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073d2:	f000 fa0f 	bl	80077f4 <prvCopyDataToQueue>
 80073d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	3324      	adds	r3, #36	@ 0x24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 ffdd 	bl	80083a4 <xTaskRemoveFromEventList>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d013      	beq.n	8007418 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b3f      	ldr	r3, [pc, #252]	@ (80074f0 <xQueueGenericSend+0x200>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	e00a      	b.n	8007418 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007408:	4b39      	ldr	r3, [pc, #228]	@ (80074f0 <xQueueGenericSend+0x200>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007418:	f001 ff20 	bl	800925c <vPortExitCritical>
				return pdPASS;
 800741c:	2301      	movs	r3, #1
 800741e:	e063      	b.n	80074e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007426:	f001 ff19 	bl	800925c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800742a:	2300      	movs	r3, #0
 800742c:	e05c      	b.n	80074e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007434:	f107 0314 	add.w	r3, r7, #20
 8007438:	4618      	mov	r0, r3
 800743a:	f001 f817 	bl	800846c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007442:	f001 ff0b 	bl	800925c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007446:	f000 fd87 	bl	8007f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800744a:	f001 fed5 	bl	80091f8 <vPortEnterCritical>
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007454:	b25b      	sxtb	r3, r3
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d103      	bne.n	8007464 <xQueueGenericSend+0x174>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800746a:	b25b      	sxtb	r3, r3
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d103      	bne.n	800747a <xQueueGenericSend+0x18a>
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800747a:	f001 feef 	bl	800925c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800747e:	1d3a      	adds	r2, r7, #4
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	4611      	mov	r1, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f001 f806 	bl	8008498 <xTaskCheckForTimeOut>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d124      	bne.n	80074dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007494:	f000 faa6 	bl	80079e4 <prvIsQueueFull>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d018      	beq.n	80074d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	3310      	adds	r3, #16
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 ff2a 	bl	8008300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ae:	f000 fa31 	bl	8007914 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074b2:	f000 fd5f 	bl	8007f74 <xTaskResumeAll>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f47f af7c 	bne.w	80073b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80074be:	4b0c      	ldr	r3, [pc, #48]	@ (80074f0 <xQueueGenericSend+0x200>)
 80074c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	e772      	b.n	80073b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074d2:	f000 fa1f 	bl	8007914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074d6:	f000 fd4d 	bl	8007f74 <xTaskResumeAll>
 80074da:	e76c      	b.n	80073b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074de:	f000 fa19 	bl	8007914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e2:	f000 fd47 	bl	8007f74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3738      	adds	r7, #56	@ 0x38
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b090      	sub	sp, #64	@ 0x40
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10b      	bne.n	8007524 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <xQueueGenericSendFromISR+0x3e>
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <xQueueGenericSendFromISR+0x42>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <xQueueGenericSendFromISR+0x44>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d103      	bne.n	8007562 <xQueueGenericSendFromISR+0x6e>
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <xQueueGenericSendFromISR+0x72>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericSendFromISR+0x74>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10b      	bne.n	8007584 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	623b      	str	r3, [r7, #32]
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	e7fd      	b.n	8007580 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007584:	f001 ff18 	bl	80093b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007588:	f3ef 8211 	mrs	r2, BASEPRI
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61fa      	str	r2, [r7, #28]
 800759e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d302      	bcc.n	80075b6 <xQueueGenericSendFromISR+0xc2>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d12f      	bne.n	8007616 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075cc:	f000 f912 	bl	80077f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d112      	bne.n	8007600 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d016      	beq.n	8007610 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	3324      	adds	r3, #36	@ 0x24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fedc 	bl	80083a4 <xTaskRemoveFromEventList>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00e      	beq.n	8007610 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e007      	b.n	8007610 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007600:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007604:	3301      	adds	r3, #1
 8007606:	b2db      	uxtb	r3, r3
 8007608:	b25a      	sxtb	r2, r3
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007610:	2301      	movs	r3, #1
 8007612:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007614:	e001      	b.n	800761a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007616:	2300      	movs	r3, #0
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800761a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007628:	4618      	mov	r0, r3
 800762a:	3740      	adds	r7, #64	@ 0x40
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	@ 0x30
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <xQueueReceive+0x32>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	623b      	str	r3, [r7, #32]
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	e7fd      	b.n	800765e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d103      	bne.n	8007670 <xQueueReceive+0x40>
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <xQueueReceive+0x44>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <xQueueReceive+0x46>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <xQueueReceive+0x62>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61fb      	str	r3, [r7, #28]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007692:	f001 f847 	bl	8008724 <xTaskGetSchedulerState>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <xQueueReceive+0x72>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <xQueueReceive+0x76>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <xQueueReceive+0x78>
 80076a6:	2300      	movs	r3, #0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <xQueueReceive+0x94>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	61bb      	str	r3, [r7, #24]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076c4:	f001 fd98 	bl	80091f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01f      	beq.n	8007714 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d8:	f000 f8f6 	bl	80078c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	1e5a      	subs	r2, r3, #1
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00f      	beq.n	800770c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	3310      	adds	r3, #16
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fe57 	bl	80083a4 <xTaskRemoveFromEventList>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076fc:	4b3c      	ldr	r3, [pc, #240]	@ (80077f0 <xQueueReceive+0x1c0>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800770c:	f001 fda6 	bl	800925c <vPortExitCritical>
				return pdPASS;
 8007710:	2301      	movs	r3, #1
 8007712:	e069      	b.n	80077e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800771a:	f001 fd9f 	bl	800925c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800771e:	2300      	movs	r3, #0
 8007720:	e062      	b.n	80077e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007728:	f107 0310 	add.w	r3, r7, #16
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fe9d 	bl	800846c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007736:	f001 fd91 	bl	800925c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800773a:	f000 fc0d 	bl	8007f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800773e:	f001 fd5b 	bl	80091f8 <vPortEnterCritical>
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007748:	b25b      	sxtb	r3, r3
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d103      	bne.n	8007758 <xQueueReceive+0x128>
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800775e:	b25b      	sxtb	r3, r3
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d103      	bne.n	800776e <xQueueReceive+0x13e>
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800776e:	f001 fd75 	bl	800925c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007772:	1d3a      	adds	r2, r7, #4
 8007774:	f107 0310 	add.w	r3, r7, #16
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fe8c 	bl	8008498 <xTaskCheckForTimeOut>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d123      	bne.n	80077ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007788:	f000 f916 	bl	80079b8 <prvIsQueueEmpty>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	3324      	adds	r3, #36	@ 0x24
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4611      	mov	r1, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fdb0 	bl	8008300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a2:	f000 f8b7 	bl	8007914 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077a6:	f000 fbe5 	bl	8007f74 <xTaskResumeAll>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d189      	bne.n	80076c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80077b0:	4b0f      	ldr	r3, [pc, #60]	@ (80077f0 <xQueueReceive+0x1c0>)
 80077b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	e780      	b.n	80076c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c4:	f000 f8a6 	bl	8007914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077c8:	f000 fbd4 	bl	8007f74 <xTaskResumeAll>
 80077cc:	e77a      	b.n	80076c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077d0:	f000 f8a0 	bl	8007914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077d4:	f000 fbce 	bl	8007f74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077da:	f000 f8ed 	bl	80079b8 <prvIsQueueEmpty>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f43f af6f 	beq.w	80076c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3730      	adds	r7, #48	@ 0x30
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007808:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d14d      	bne.n	80078b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 ff9e 	bl	8008760 <xTaskPriorityDisinherit>
 8007824:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	609a      	str	r2, [r3, #8]
 800782c:	e043      	b.n	80078b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d119      	bne.n	8007868 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6858      	ldr	r0, [r3, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783c:	461a      	mov	r2, r3
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	f002 fb4d 	bl	8009ede <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	429a      	cmp	r2, r3
 800785c:	d32b      	bcc.n	80078b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
 8007866:	e026      	b.n	80078b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68d8      	ldr	r0, [r3, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007870:	461a      	mov	r2, r3
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	f002 fb33 	bl	8009ede <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007880:	425b      	negs	r3, r3
 8007882:	441a      	add	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d207      	bcs.n	80078a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	425b      	negs	r3, r3
 800789e:	441a      	add	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d105      	bne.n	80078b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078be:	697b      	ldr	r3, [r7, #20]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	441a      	add	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d303      	bcc.n	80078fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68d9      	ldr	r1, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007904:	461a      	mov	r2, r3
 8007906:	6838      	ldr	r0, [r7, #0]
 8007908:	f002 fae9 	bl	8009ede <memcpy>
	}
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800791c:	f001 fc6c 	bl	80091f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007926:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007928:	e011      	b.n	800794e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d012      	beq.n	8007958 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3324      	adds	r3, #36	@ 0x24
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fd34 	bl	80083a4 <xTaskRemoveFromEventList>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007942:	f000 fe0d 	bl	8008560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	3b01      	subs	r3, #1
 800794a:	b2db      	uxtb	r3, r3
 800794c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800794e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dce9      	bgt.n	800792a <prvUnlockQueue+0x16>
 8007956:	e000      	b.n	800795a <prvUnlockQueue+0x46>
					break;
 8007958:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	22ff      	movs	r2, #255	@ 0xff
 800795e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007962:	f001 fc7b 	bl	800925c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007966:	f001 fc47 	bl	80091f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007970:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007972:	e011      	b.n	8007998 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d012      	beq.n	80079a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3310      	adds	r3, #16
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fd0f 	bl	80083a4 <xTaskRemoveFromEventList>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800798c:	f000 fde8 	bl	8008560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	3b01      	subs	r3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dce9      	bgt.n	8007974 <prvUnlockQueue+0x60>
 80079a0:	e000      	b.n	80079a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	22ff      	movs	r2, #255	@ 0xff
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079ac:	f001 fc56 	bl	800925c <vPortExitCritical>
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079c0:	f001 fc1a 	bl	80091f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e001      	b.n	80079d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f001 fc41 	bl	800925c <vPortExitCritical>

	return xReturn;
 80079da:	68fb      	ldr	r3, [r7, #12]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ec:	f001 fc04 	bl	80091f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d102      	bne.n	8007a02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e001      	b.n	8007a06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a06:	f001 fc29 	bl	800925c <vPortExitCritical>

	return xReturn;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e014      	b.n	8007a4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a24:	4a0f      	ldr	r2, [pc, #60]	@ (8007a64 <vQueueAddToRegistry+0x50>)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a30:	490c      	ldr	r1, [pc, #48]	@ (8007a64 <vQueueAddToRegistry+0x50>)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a64 <vQueueAddToRegistry+0x50>)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	4413      	add	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a46:	e006      	b.n	8007a56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b07      	cmp	r3, #7
 8007a52:	d9e7      	bls.n	8007a24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000a00 	.word	0x20000a00

08007a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a78:	f001 fbbe 	bl	80091f8 <vPortEnterCritical>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a82:	b25b      	sxtb	r3, r3
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d103      	bne.n	8007a92 <vQueueWaitForMessageRestricted+0x2a>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d103      	bne.n	8007aa8 <vQueueWaitForMessageRestricted+0x40>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aa8:	f001 fbd8 	bl	800925c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3324      	adds	r3, #36	@ 0x24
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fc45 	bl	800834c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ac2:	6978      	ldr	r0, [r7, #20]
 8007ac4:	f7ff ff26 	bl	8007914 <prvUnlockQueue>
	}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	@ 0x38
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	623b      	str	r3, [r7, #32]
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	61fb      	str	r3, [r7, #28]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b1a:	235c      	movs	r3, #92	@ 0x5c
 8007b1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b22:	d00b      	beq.n	8007b3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	61bb      	str	r3, [r7, #24]
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01e      	beq.n	8007b82 <xTaskCreateStatic+0xb2>
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01b      	beq.n	8007b82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	9302      	str	r3, [sp, #8]
 8007b64:	f107 0314 	add.w	r3, r7, #20
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f850 	bl	8007c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b7c:	f000 f8de 	bl	8007d3c <prvAddNewTaskToReadyList>
 8007b80:	e001      	b.n	8007b86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b86:	697b      	ldr	r3, [r7, #20]
	}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3728      	adds	r7, #40	@ 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	@ 0x30
 8007b94:	af04      	add	r7, sp, #16
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fc49 	bl	800943c <pvPortMalloc>
 8007baa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bb2:	205c      	movs	r0, #92	@ 0x5c
 8007bb4:	f001 fc42 	bl	800943c <pvPortMalloc>
 8007bb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bc6:	e005      	b.n	8007bd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bc8:	6978      	ldr	r0, [r7, #20]
 8007bca:	f001 fd05 	bl	80095d8 <vPortFree>
 8007bce:	e001      	b.n	8007bd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	2300      	movs	r3, #0
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	9302      	str	r3, [sp, #8]
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f80e 	bl	8007c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bfe:	69f8      	ldr	r0, [r7, #28]
 8007c00:	f000 f89c 	bl	8007d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c04:	2301      	movs	r3, #1
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e002      	b.n	8007c10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c10:	69bb      	ldr	r3, [r7, #24]
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3720      	adds	r7, #32
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b088      	sub	sp, #32
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	461a      	mov	r2, r3
 8007c32:	21a5      	movs	r1, #165	@ 0xa5
 8007c34:	f002 f86b 	bl	8009d0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c42:	3b01      	subs	r3, #1
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	f023 0307 	bic.w	r3, r3, #7
 8007c50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	617b      	str	r3, [r7, #20]
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	e7fd      	b.n	8007c70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d01f      	beq.n	8007cba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	e012      	b.n	8007ca6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	7819      	ldrb	r1, [r3, #0]
 8007c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3334      	adds	r3, #52	@ 0x34
 8007c90:	460a      	mov	r2, r1
 8007c92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2b0f      	cmp	r3, #15
 8007caa:	d9e9      	bls.n	8007c80 <prvInitialiseNewTask+0x66>
 8007cac:	e000      	b.n	8007cb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8007cae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cb8:	e003      	b.n	8007cc2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	2b37      	cmp	r3, #55	@ 0x37
 8007cc6:	d901      	bls.n	8007ccc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cc8:	2337      	movs	r3, #55	@ 0x37
 8007cca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	2200      	movs	r2, #0
 8007cdc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff f966 	bl	8006fb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	3318      	adds	r3, #24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff f961 	bl	8006fb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	68f9      	ldr	r1, [r7, #12]
 8007d1a:	69b8      	ldr	r0, [r7, #24]
 8007d1c:	f001 f93e 	bl	8008f9c <pxPortInitialiseStack>
 8007d20:	4602      	mov	r2, r0
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d32:	bf00      	nop
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d44:	f001 fa58 	bl	80091f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d48:	4b2d      	ldr	r3, [pc, #180]	@ (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d52:	4b2c      	ldr	r3, [pc, #176]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d60:	4b27      	ldr	r3, [pc, #156]	@ (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d110      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d68:	f000 fc1e 	bl	80085a8 <prvInitialiseTaskLists>
 8007d6c:	e00d      	b.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d6e:	4b26      	ldr	r3, [pc, #152]	@ (8007e08 <prvAddNewTaskToReadyList+0xcc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d76:	4b23      	ldr	r3, [pc, #140]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d802      	bhi.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d84:	4a1f      	ldr	r2, [pc, #124]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d8a:	4b20      	ldr	r3, [pc, #128]	@ (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	4a1e      	ldr	r2, [pc, #120]	@ (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d94:	4b1d      	ldr	r3, [pc, #116]	@ (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <prvAddNewTaskToReadyList+0xd4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d903      	bls.n	8007db0 <prvAddNewTaskToReadyList+0x74>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	4a18      	ldr	r2, [pc, #96]	@ (8007e10 <prvAddNewTaskToReadyList+0xd4>)
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4a15      	ldr	r2, [pc, #84]	@ (8007e14 <prvAddNewTaskToReadyList+0xd8>)
 8007dbe:	441a      	add	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7ff f901 	bl	8006fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dcc:	f001 fa46 	bl	800925c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <prvAddNewTaskToReadyList+0xcc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d207      	bcs.n	8007df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007de6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <prvAddNewTaskToReadyList+0xdc>)
 8007de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000f14 	.word	0x20000f14
 8007e04:	20000a40 	.word	0x20000a40
 8007e08:	20000f20 	.word	0x20000f20
 8007e0c:	20000f30 	.word	0x20000f30
 8007e10:	20000f1c 	.word	0x20000f1c
 8007e14:	20000a44 	.word	0x20000a44
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e2e:	4b14      	ldr	r3, [pc, #80]	@ (8007e80 <vTaskDelay+0x64>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <vTaskDelay+0x32>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60bb      	str	r3, [r7, #8]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e4e:	f000 f883 	bl	8007f58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e52:	2100      	movs	r1, #0
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fcf3 	bl	8008840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e5a:	f000 f88b 	bl	8007f74 <xTaskResumeAll>
 8007e5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d107      	bne.n	8007e76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e66:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <vTaskDelay+0x68>)
 8007e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000f3c 	.word	0x20000f3c
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	@ 0x28
 8007e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e96:	463a      	mov	r2, r7
 8007e98:	1d39      	adds	r1, r7, #4
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f834 	bl	8006f0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	9202      	str	r2, [sp, #8]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	4922      	ldr	r1, [pc, #136]	@ (8007f40 <vTaskStartScheduler+0xb8>)
 8007eb8:	4822      	ldr	r0, [pc, #136]	@ (8007f44 <vTaskStartScheduler+0xbc>)
 8007eba:	f7ff fe09 	bl	8007ad0 <xTaskCreateStatic>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4a21      	ldr	r2, [pc, #132]	@ (8007f48 <vTaskStartScheduler+0xc0>)
 8007ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ec4:	4b20      	ldr	r3, [pc, #128]	@ (8007f48 <vTaskStartScheduler+0xc0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e001      	b.n	8007ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d102      	bne.n	8007ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007edc:	f000 fd04 	bl	80088e8 <xTimerCreateTimerTask>
 8007ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d116      	bne.n	8007f16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007efc:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <vTaskStartScheduler+0xc4>)
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f04:	4b12      	ldr	r3, [pc, #72]	@ (8007f50 <vTaskStartScheduler+0xc8>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f0a:	4b12      	ldr	r3, [pc, #72]	@ (8007f54 <vTaskStartScheduler+0xcc>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f10:	f001 f8ce 	bl	80090b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f14:	e00f      	b.n	8007f36 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d10b      	bne.n	8007f36 <vTaskStartScheduler+0xae>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60fb      	str	r3, [r7, #12]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <vTaskStartScheduler+0xaa>
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	0800ae6c 	.word	0x0800ae6c
 8007f44:	08008579 	.word	0x08008579
 8007f48:	20000f38 	.word	0x20000f38
 8007f4c:	20000f34 	.word	0x20000f34
 8007f50:	20000f20 	.word	0x20000f20
 8007f54:	20000f18 	.word	0x20000f18

08007f58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f5c:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <vTaskSuspendAll+0x18>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	4a03      	ldr	r2, [pc, #12]	@ (8007f70 <vTaskSuspendAll+0x18>)
 8007f64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f66:	bf00      	nop
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	20000f3c 	.word	0x20000f3c

08007f74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f82:	4b42      	ldr	r3, [pc, #264]	@ (800808c <xTaskResumeAll+0x118>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	603b      	str	r3, [r7, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	e7fd      	b.n	8007f9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fa2:	f001 f929 	bl	80091f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fa6:	4b39      	ldr	r3, [pc, #228]	@ (800808c <xTaskResumeAll+0x118>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	4a37      	ldr	r2, [pc, #220]	@ (800808c <xTaskResumeAll+0x118>)
 8007fae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb0:	4b36      	ldr	r3, [pc, #216]	@ (800808c <xTaskResumeAll+0x118>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d162      	bne.n	800807e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fb8:	4b35      	ldr	r3, [pc, #212]	@ (8008090 <xTaskResumeAll+0x11c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d05e      	beq.n	800807e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fc0:	e02f      	b.n	8008022 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc2:	4b34      	ldr	r3, [pc, #208]	@ (8008094 <xTaskResumeAll+0x120>)
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3318      	adds	r3, #24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff f85a 	bl	8007088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff f855 	bl	8007088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8008098 <xTaskResumeAll+0x124>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d903      	bls.n	8007ff2 <xTaskResumeAll+0x7e>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	4a2a      	ldr	r2, [pc, #168]	@ (8008098 <xTaskResumeAll+0x124>)
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4a27      	ldr	r2, [pc, #156]	@ (800809c <xTaskResumeAll+0x128>)
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7fe ffe0 	bl	8006fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008012:	4b23      	ldr	r3, [pc, #140]	@ (80080a0 <xTaskResumeAll+0x12c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	429a      	cmp	r2, r3
 800801a:	d302      	bcc.n	8008022 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800801c:	4b21      	ldr	r3, [pc, #132]	@ (80080a4 <xTaskResumeAll+0x130>)
 800801e:	2201      	movs	r2, #1
 8008020:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008022:	4b1c      	ldr	r3, [pc, #112]	@ (8008094 <xTaskResumeAll+0x120>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1cb      	bne.n	8007fc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008030:	f000 fb58 	bl	80086e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008034:	4b1c      	ldr	r3, [pc, #112]	@ (80080a8 <xTaskResumeAll+0x134>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d010      	beq.n	8008062 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008040:	f000 f846 	bl	80080d0 <xTaskIncrementTick>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800804a:	4b16      	ldr	r3, [pc, #88]	@ (80080a4 <xTaskResumeAll+0x130>)
 800804c:	2201      	movs	r2, #1
 800804e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3b01      	subs	r3, #1
 8008054:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f1      	bne.n	8008040 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800805c:	4b12      	ldr	r3, [pc, #72]	@ (80080a8 <xTaskResumeAll+0x134>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <xTaskResumeAll+0x130>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d009      	beq.n	800807e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800806a:	2301      	movs	r3, #1
 800806c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800806e:	4b0f      	ldr	r3, [pc, #60]	@ (80080ac <xTaskResumeAll+0x138>)
 8008070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800807e:	f001 f8ed 	bl	800925c <vPortExitCritical>

	return xAlreadyYielded;
 8008082:	68bb      	ldr	r3, [r7, #8]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000f3c 	.word	0x20000f3c
 8008090:	20000f14 	.word	0x20000f14
 8008094:	20000ed4 	.word	0x20000ed4
 8008098:	20000f1c 	.word	0x20000f1c
 800809c:	20000a44 	.word	0x20000a44
 80080a0:	20000a40 	.word	0x20000a40
 80080a4:	20000f28 	.word	0x20000f28
 80080a8:	20000f24 	.word	0x20000f24
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080b6:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <xTaskGetTickCount+0x1c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080bc:	687b      	ldr	r3, [r7, #4]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000f18 	.word	0x20000f18

080080d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080da:	4b4f      	ldr	r3, [pc, #316]	@ (8008218 <xTaskIncrementTick+0x148>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f040 8090 	bne.w	8008204 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080e4:	4b4d      	ldr	r3, [pc, #308]	@ (800821c <xTaskIncrementTick+0x14c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080ec:	4a4b      	ldr	r2, [pc, #300]	@ (800821c <xTaskIncrementTick+0x14c>)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d121      	bne.n	800813c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80080f8:	4b49      	ldr	r3, [pc, #292]	@ (8008220 <xTaskIncrementTick+0x150>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	603b      	str	r3, [r7, #0]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <xTaskIncrementTick+0x46>
 800811a:	4b41      	ldr	r3, [pc, #260]	@ (8008220 <xTaskIncrementTick+0x150>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	4b40      	ldr	r3, [pc, #256]	@ (8008224 <xTaskIncrementTick+0x154>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a3e      	ldr	r2, [pc, #248]	@ (8008220 <xTaskIncrementTick+0x150>)
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	4a3e      	ldr	r2, [pc, #248]	@ (8008224 <xTaskIncrementTick+0x154>)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b3e      	ldr	r3, [pc, #248]	@ (8008228 <xTaskIncrementTick+0x158>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a3c      	ldr	r2, [pc, #240]	@ (8008228 <xTaskIncrementTick+0x158>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	f000 fad4 	bl	80086e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800813c:	4b3b      	ldr	r3, [pc, #236]	@ (800822c <xTaskIncrementTick+0x15c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	429a      	cmp	r2, r3
 8008144:	d349      	bcc.n	80081da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008146:	4b36      	ldr	r3, [pc, #216]	@ (8008220 <xTaskIncrementTick+0x150>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008150:	4b36      	ldr	r3, [pc, #216]	@ (800822c <xTaskIncrementTick+0x15c>)
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	601a      	str	r2, [r3, #0]
					break;
 8008158:	e03f      	b.n	80081da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815a:	4b31      	ldr	r3, [pc, #196]	@ (8008220 <xTaskIncrementTick+0x150>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	429a      	cmp	r2, r3
 8008170:	d203      	bcs.n	800817a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008172:	4a2e      	ldr	r2, [pc, #184]	@ (800822c <xTaskIncrementTick+0x15c>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008178:	e02f      	b.n	80081da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3304      	adds	r3, #4
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe ff82 	bl	8007088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	3318      	adds	r3, #24
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe ff79 	bl	8007088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4b25      	ldr	r3, [pc, #148]	@ (8008230 <xTaskIncrementTick+0x160>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d903      	bls.n	80081aa <xTaskIncrementTick+0xda>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	4a22      	ldr	r2, [pc, #136]	@ (8008230 <xTaskIncrementTick+0x160>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008234 <xTaskIncrementTick+0x164>)
 80081b8:	441a      	add	r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	4610      	mov	r0, r2
 80081c2:	f7fe ff04 	bl	8006fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008238 <xTaskIncrementTick+0x168>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d3b8      	bcc.n	8008146 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80081d4:	2301      	movs	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081d8:	e7b5      	b.n	8008146 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081da:	4b17      	ldr	r3, [pc, #92]	@ (8008238 <xTaskIncrementTick+0x168>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e0:	4914      	ldr	r1, [pc, #80]	@ (8008234 <xTaskIncrementTick+0x164>)
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d901      	bls.n	80081f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80081f2:	2301      	movs	r3, #1
 80081f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081f6:	4b11      	ldr	r3, [pc, #68]	@ (800823c <xTaskIncrementTick+0x16c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80081fe:	2301      	movs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e004      	b.n	800820e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008204:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <xTaskIncrementTick+0x170>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	4a0d      	ldr	r2, [pc, #52]	@ (8008240 <xTaskIncrementTick+0x170>)
 800820c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000f3c 	.word	0x20000f3c
 800821c:	20000f18 	.word	0x20000f18
 8008220:	20000ecc 	.word	0x20000ecc
 8008224:	20000ed0 	.word	0x20000ed0
 8008228:	20000f2c 	.word	0x20000f2c
 800822c:	20000f34 	.word	0x20000f34
 8008230:	20000f1c 	.word	0x20000f1c
 8008234:	20000a44 	.word	0x20000a44
 8008238:	20000a40 	.word	0x20000a40
 800823c:	20000f28 	.word	0x20000f28
 8008240:	20000f24 	.word	0x20000f24

08008244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800824a:	4b28      	ldr	r3, [pc, #160]	@ (80082ec <vTaskSwitchContext+0xa8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008252:	4b27      	ldr	r3, [pc, #156]	@ (80082f0 <vTaskSwitchContext+0xac>)
 8008254:	2201      	movs	r2, #1
 8008256:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008258:	e042      	b.n	80082e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800825a:	4b25      	ldr	r3, [pc, #148]	@ (80082f0 <vTaskSwitchContext+0xac>)
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008260:	4b24      	ldr	r3, [pc, #144]	@ (80082f4 <vTaskSwitchContext+0xb0>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e011      	b.n	800828c <vTaskSwitchContext+0x48>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <vTaskSwitchContext+0x42>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	e7fd      	b.n	8008282 <vTaskSwitchContext+0x3e>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3b01      	subs	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	491a      	ldr	r1, [pc, #104]	@ (80082f8 <vTaskSwitchContext+0xb4>)
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0e3      	beq.n	8008268 <vTaskSwitchContext+0x24>
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4a13      	ldr	r2, [pc, #76]	@ (80082f8 <vTaskSwitchContext+0xb4>)
 80082ac:	4413      	add	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3308      	adds	r3, #8
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d104      	bne.n	80082d0 <vTaskSwitchContext+0x8c>
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	605a      	str	r2, [r3, #4]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	4a09      	ldr	r2, [pc, #36]	@ (80082fc <vTaskSwitchContext+0xb8>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	4a06      	ldr	r2, [pc, #24]	@ (80082f4 <vTaskSwitchContext+0xb0>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6013      	str	r3, [r2, #0]
}
 80082e0:	bf00      	nop
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	20000f3c 	.word	0x20000f3c
 80082f0:	20000f28 	.word	0x20000f28
 80082f4:	20000f1c 	.word	0x20000f1c
 80082f8:	20000a44 	.word	0x20000a44
 80082fc:	20000a40 	.word	0x20000a40

08008300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	60fb      	str	r3, [r7, #12]
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008328:	4b07      	ldr	r3, [pc, #28]	@ (8008348 <vTaskPlaceOnEventList+0x48>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3318      	adds	r3, #24
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7fe fe70 	bl	8007016 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008336:	2101      	movs	r1, #1
 8008338:	6838      	ldr	r0, [r7, #0]
 800833a:	f000 fa81 	bl	8008840 <prvAddCurrentTaskToDelayedList>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000a40 	.word	0x20000a40

0800834c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	617b      	str	r3, [r7, #20]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008376:	4b0a      	ldr	r3, [pc, #40]	@ (80083a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3318      	adds	r3, #24
 800837c:	4619      	mov	r1, r3
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7fe fe25 	bl	8006fce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	68b8      	ldr	r0, [r7, #8]
 8008394:	f000 fa54 	bl	8008840 <prvAddCurrentTaskToDelayedList>
	}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000a40 	.word	0x20000a40

080083a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	60fb      	str	r3, [r7, #12]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	3318      	adds	r3, #24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fe56 	bl	8007088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008454 <xTaskRemoveFromEventList+0xb0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11d      	bne.n	8008420 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fe4d 	bl	8007088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f2:	4b19      	ldr	r3, [pc, #100]	@ (8008458 <xTaskRemoveFromEventList+0xb4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d903      	bls.n	8008402 <xTaskRemoveFromEventList+0x5e>
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fe:	4a16      	ldr	r2, [pc, #88]	@ (8008458 <xTaskRemoveFromEventList+0xb4>)
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4a13      	ldr	r2, [pc, #76]	@ (800845c <xTaskRemoveFromEventList+0xb8>)
 8008410:	441a      	add	r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	3304      	adds	r3, #4
 8008416:	4619      	mov	r1, r3
 8008418:	4610      	mov	r0, r2
 800841a:	f7fe fdd8 	bl	8006fce <vListInsertEnd>
 800841e:	e005      	b.n	800842c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	3318      	adds	r3, #24
 8008424:	4619      	mov	r1, r3
 8008426:	480e      	ldr	r0, [pc, #56]	@ (8008460 <xTaskRemoveFromEventList+0xbc>)
 8008428:	f7fe fdd1 	bl	8006fce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008430:	4b0c      	ldr	r3, [pc, #48]	@ (8008464 <xTaskRemoveFromEventList+0xc0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008436:	429a      	cmp	r2, r3
 8008438:	d905      	bls.n	8008446 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800843a:	2301      	movs	r3, #1
 800843c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800843e:	4b0a      	ldr	r3, [pc, #40]	@ (8008468 <xTaskRemoveFromEventList+0xc4>)
 8008440:	2201      	movs	r2, #1
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e001      	b.n	800844a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800844a:	697b      	ldr	r3, [r7, #20]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000f3c 	.word	0x20000f3c
 8008458:	20000f1c 	.word	0x20000f1c
 800845c:	20000a44 	.word	0x20000a44
 8008460:	20000ed4 	.word	0x20000ed4
 8008464:	20000a40 	.word	0x20000a40
 8008468:	20000f28 	.word	0x20000f28

0800846c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008474:	4b06      	ldr	r3, [pc, #24]	@ (8008490 <vTaskInternalSetTimeOutState+0x24>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800847c:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <vTaskInternalSetTimeOutState+0x28>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000f2c 	.word	0x20000f2c
 8008494:	20000f18 	.word	0x20000f18

08008498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10b      	bne.n	80084c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	613b      	str	r3, [r7, #16]
}
 80084ba:	bf00      	nop
 80084bc:	bf00      	nop
 80084be:	e7fd      	b.n	80084bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10b      	bne.n	80084de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	e7fd      	b.n	80084da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80084de:	f000 fe8b 	bl	80091f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008558 <xTaskCheckForTimeOut+0xc0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d102      	bne.n	8008502 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]
 8008500:	e023      	b.n	800854a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b15      	ldr	r3, [pc, #84]	@ (800855c <xTaskCheckForTimeOut+0xc4>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d007      	beq.n	800851e <xTaskCheckForTimeOut+0x86>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	429a      	cmp	r2, r3
 8008516:	d302      	bcc.n	800851e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e015      	b.n	800854a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	429a      	cmp	r2, r3
 8008526:	d20b      	bcs.n	8008540 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff ff99 	bl	800846c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
 800853e:	e004      	b.n	800854a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008546:	2301      	movs	r3, #1
 8008548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800854a:	f000 fe87 	bl	800925c <vPortExitCritical>

	return xReturn;
 800854e:	69fb      	ldr	r3, [r7, #28]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20000f18 	.word	0x20000f18
 800855c:	20000f2c 	.word	0x20000f2c

08008560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008564:	4b03      	ldr	r3, [pc, #12]	@ (8008574 <vTaskMissedYield+0x14>)
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]
}
 800856a:	bf00      	nop
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	20000f28 	.word	0x20000f28

08008578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008580:	f000 f852 	bl	8008628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008584:	4b06      	ldr	r3, [pc, #24]	@ (80085a0 <prvIdleTask+0x28>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d9f9      	bls.n	8008580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800858c:	4b05      	ldr	r3, [pc, #20]	@ (80085a4 <prvIdleTask+0x2c>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800859c:	e7f0      	b.n	8008580 <prvIdleTask+0x8>
 800859e:	bf00      	nop
 80085a0:	20000a44 	.word	0x20000a44
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	e00c      	b.n	80085ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4a12      	ldr	r2, [pc, #72]	@ (8008608 <prvInitialiseTaskLists+0x60>)
 80085c0:	4413      	add	r3, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fcd6 	bl	8006f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3301      	adds	r3, #1
 80085cc:	607b      	str	r3, [r7, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b37      	cmp	r3, #55	@ 0x37
 80085d2:	d9ef      	bls.n	80085b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085d4:	480d      	ldr	r0, [pc, #52]	@ (800860c <prvInitialiseTaskLists+0x64>)
 80085d6:	f7fe fccd 	bl	8006f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085da:	480d      	ldr	r0, [pc, #52]	@ (8008610 <prvInitialiseTaskLists+0x68>)
 80085dc:	f7fe fcca 	bl	8006f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085e0:	480c      	ldr	r0, [pc, #48]	@ (8008614 <prvInitialiseTaskLists+0x6c>)
 80085e2:	f7fe fcc7 	bl	8006f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085e6:	480c      	ldr	r0, [pc, #48]	@ (8008618 <prvInitialiseTaskLists+0x70>)
 80085e8:	f7fe fcc4 	bl	8006f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085ec:	480b      	ldr	r0, [pc, #44]	@ (800861c <prvInitialiseTaskLists+0x74>)
 80085ee:	f7fe fcc1 	bl	8006f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <prvInitialiseTaskLists+0x78>)
 80085f4:	4a05      	ldr	r2, [pc, #20]	@ (800860c <prvInitialiseTaskLists+0x64>)
 80085f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008624 <prvInitialiseTaskLists+0x7c>)
 80085fa:	4a05      	ldr	r2, [pc, #20]	@ (8008610 <prvInitialiseTaskLists+0x68>)
 80085fc:	601a      	str	r2, [r3, #0]
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000a44 	.word	0x20000a44
 800860c:	20000ea4 	.word	0x20000ea4
 8008610:	20000eb8 	.word	0x20000eb8
 8008614:	20000ed4 	.word	0x20000ed4
 8008618:	20000ee8 	.word	0x20000ee8
 800861c:	20000f00 	.word	0x20000f00
 8008620:	20000ecc 	.word	0x20000ecc
 8008624:	20000ed0 	.word	0x20000ed0

08008628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800862e:	e019      	b.n	8008664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008630:	f000 fde2 	bl	80091f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008634:	4b10      	ldr	r3, [pc, #64]	@ (8008678 <prvCheckTasksWaitingTermination+0x50>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe fd21 	bl	8007088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008646:	4b0d      	ldr	r3, [pc, #52]	@ (800867c <prvCheckTasksWaitingTermination+0x54>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3b01      	subs	r3, #1
 800864c:	4a0b      	ldr	r2, [pc, #44]	@ (800867c <prvCheckTasksWaitingTermination+0x54>)
 800864e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008650:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <prvCheckTasksWaitingTermination+0x58>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3b01      	subs	r3, #1
 8008656:	4a0a      	ldr	r2, [pc, #40]	@ (8008680 <prvCheckTasksWaitingTermination+0x58>)
 8008658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800865a:	f000 fdff 	bl	800925c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f810 	bl	8008684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008664:	4b06      	ldr	r3, [pc, #24]	@ (8008680 <prvCheckTasksWaitingTermination+0x58>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e1      	bne.n	8008630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000ee8 	.word	0x20000ee8
 800867c:	20000f14 	.word	0x20000f14
 8008680:	20000efc 	.word	0x20000efc

08008684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008692:	2b00      	cmp	r3, #0
 8008694:	d108      	bne.n	80086a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869a:	4618      	mov	r0, r3
 800869c:	f000 ff9c 	bl	80095d8 <vPortFree>
				vPortFree( pxTCB );
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 ff99 	bl	80095d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086a6:	e019      	b.n	80086dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d103      	bne.n	80086ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 ff90 	bl	80095d8 <vPortFree>
	}
 80086b8:	e010      	b.n	80086dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d00b      	beq.n	80086dc <prvDeleteTCB+0x58>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	60fb      	str	r3, [r7, #12]
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <prvDeleteTCB+0x54>
	}
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ea:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <prvResetNextTaskUnblockTime+0x38>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008720 <prvResetNextTaskUnblockTime+0x3c>)
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086fc:	e008      	b.n	8008710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fe:	4b07      	ldr	r3, [pc, #28]	@ (800871c <prvResetNextTaskUnblockTime+0x38>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	4a04      	ldr	r2, [pc, #16]	@ (8008720 <prvResetNextTaskUnblockTime+0x3c>)
 800870e:	6013      	str	r3, [r2, #0]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20000ecc 	.word	0x20000ecc
 8008720:	20000f34 	.word	0x20000f34

08008724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800872a:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <xTaskGetSchedulerState+0x34>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008732:	2301      	movs	r3, #1
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	e008      	b.n	800874a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008738:	4b08      	ldr	r3, [pc, #32]	@ (800875c <xTaskGetSchedulerState+0x38>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008740:	2302      	movs	r3, #2
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	e001      	b.n	800874a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008746:	2300      	movs	r3, #0
 8008748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800874a:	687b      	ldr	r3, [r7, #4]
	}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	20000f20 	.word	0x20000f20
 800875c:	20000f3c 	.word	0x20000f3c

08008760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d058      	beq.n	8008828 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008776:	4b2f      	ldr	r3, [pc, #188]	@ (8008834 <xTaskPriorityDisinherit+0xd4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	429a      	cmp	r2, r3
 800877e:	d00b      	beq.n	8008798 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	60fb      	str	r3, [r7, #12]
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	e7fd      	b.n	8008794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10b      	bne.n	80087b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60bb      	str	r3, [r7, #8]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d02c      	beq.n	8008828 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d128      	bne.n	8008828 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3304      	adds	r3, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fc54 	bl	8007088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008838 <xTaskPriorityDisinherit+0xd8>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d903      	bls.n	8008808 <xTaskPriorityDisinherit+0xa8>
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	4a0c      	ldr	r2, [pc, #48]	@ (8008838 <xTaskPriorityDisinherit+0xd8>)
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4a09      	ldr	r2, [pc, #36]	@ (800883c <xTaskPriorityDisinherit+0xdc>)
 8008816:	441a      	add	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	3304      	adds	r3, #4
 800881c:	4619      	mov	r1, r3
 800881e:	4610      	mov	r0, r2
 8008820:	f7fe fbd5 	bl	8006fce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008828:	697b      	ldr	r3, [r7, #20]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20000a40 	.word	0x20000a40
 8008838:	20000f1c 	.word	0x20000f1c
 800883c:	20000a44 	.word	0x20000a44

08008840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800884a:	4b21      	ldr	r3, [pc, #132]	@ (80088d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008850:	4b20      	ldr	r3, [pc, #128]	@ (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3304      	adds	r3, #4
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fc16 	bl	8007088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d10a      	bne.n	800887a <prvAddCurrentTaskToDelayedList+0x3a>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886a:	4b1a      	ldr	r3, [pc, #104]	@ (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3304      	adds	r3, #4
 8008870:	4619      	mov	r1, r3
 8008872:	4819      	ldr	r0, [pc, #100]	@ (80088d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008874:	f7fe fbab 	bl	8006fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008878:	e026      	b.n	80088c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008882:	4b14      	ldr	r3, [pc, #80]	@ (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	429a      	cmp	r2, r3
 8008890:	d209      	bcs.n	80088a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008892:	4b12      	ldr	r3, [pc, #72]	@ (80088dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7fe fbb9 	bl	8007016 <vListInsert>
}
 80088a4:	e010      	b.n	80088c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a6:	4b0e      	ldr	r3, [pc, #56]	@ (80088e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fe fbaf 	bl	8007016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088b8:	4b0a      	ldr	r3, [pc, #40]	@ (80088e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d202      	bcs.n	80088c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088c2:	4a08      	ldr	r2, [pc, #32]	@ (80088e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6013      	str	r3, [r2, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000f18 	.word	0x20000f18
 80088d4:	20000a40 	.word	0x20000a40
 80088d8:	20000f00 	.word	0x20000f00
 80088dc:	20000ed0 	.word	0x20000ed0
 80088e0:	20000ecc 	.word	0x20000ecc
 80088e4:	20000f34 	.word	0x20000f34

080088e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	@ 0x28
 80088ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088f2:	f000 fb13 	bl	8008f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088f6:	4b1d      	ldr	r3, [pc, #116]	@ (800896c <xTimerCreateTimerTask+0x84>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d021      	beq.n	8008942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008906:	1d3a      	adds	r2, r7, #4
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	f107 030c 	add.w	r3, r7, #12
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fb15 	bl	8006f40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	9202      	str	r2, [sp, #8]
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	2302      	movs	r3, #2
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	460a      	mov	r2, r1
 8008928:	4911      	ldr	r1, [pc, #68]	@ (8008970 <xTimerCreateTimerTask+0x88>)
 800892a:	4812      	ldr	r0, [pc, #72]	@ (8008974 <xTimerCreateTimerTask+0x8c>)
 800892c:	f7ff f8d0 	bl	8007ad0 <xTaskCreateStatic>
 8008930:	4603      	mov	r3, r0
 8008932:	4a11      	ldr	r2, [pc, #68]	@ (8008978 <xTimerCreateTimerTask+0x90>)
 8008934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008936:	4b10      	ldr	r3, [pc, #64]	@ (8008978 <xTimerCreateTimerTask+0x90>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800893e:	2301      	movs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10b      	bne.n	8008960 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	613b      	str	r3, [r7, #16]
}
 800895a:	bf00      	nop
 800895c:	bf00      	nop
 800895e:	e7fd      	b.n	800895c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008960:	697b      	ldr	r3, [r7, #20]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000f70 	.word	0x20000f70
 8008970:	0800ae74 	.word	0x0800ae74
 8008974:	08008ab5 	.word	0x08008ab5
 8008978:	20000f74 	.word	0x20000f74

0800897c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	@ 0x28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800898a:	2300      	movs	r3, #0
 800898c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <xTimerGenericCommand+0x30>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	623b      	str	r3, [r7, #32]
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089ac:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <xTimerGenericCommand+0x98>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02a      	beq.n	8008a0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	dc18      	bgt.n	80089f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089c6:	f7ff fead 	bl	8008724 <xTaskGetSchedulerState>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d109      	bne.n	80089e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089d0:	4b10      	ldr	r3, [pc, #64]	@ (8008a14 <xTimerGenericCommand+0x98>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	f107 0110 	add.w	r1, r7, #16
 80089d8:	2300      	movs	r3, #0
 80089da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089dc:	f7fe fc88 	bl	80072f0 <xQueueGenericSend>
 80089e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80089e2:	e012      	b.n	8008a0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a14 <xTimerGenericCommand+0x98>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	f107 0110 	add.w	r1, r7, #16
 80089ec:	2300      	movs	r3, #0
 80089ee:	2200      	movs	r2, #0
 80089f0:	f7fe fc7e 	bl	80072f0 <xQueueGenericSend>
 80089f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80089f6:	e008      	b.n	8008a0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089f8:	4b06      	ldr	r3, [pc, #24]	@ (8008a14 <xTimerGenericCommand+0x98>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	f107 0110 	add.w	r1, r7, #16
 8008a00:	2300      	movs	r3, #0
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	f7fe fd76 	bl	80074f4 <xQueueGenericSendFromISR>
 8008a08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3728      	adds	r7, #40	@ 0x28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000f70 	.word	0x20000f70

08008a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b088      	sub	sp, #32
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a22:	4b23      	ldr	r3, [pc, #140]	@ (8008ab0 <prvProcessExpiredTimer+0x98>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fb29 	bl	8007088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d023      	beq.n	8008a8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	699a      	ldr	r2, [r3, #24]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	18d1      	adds	r1, r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	6978      	ldr	r0, [r7, #20]
 8008a52:	f000 f8d5 	bl	8008c00 <prvInsertTimerInActiveList>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d020      	beq.n	8008a9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	2300      	movs	r3, #0
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	2100      	movs	r1, #0
 8008a66:	6978      	ldr	r0, [r7, #20]
 8008a68:	f7ff ff88 	bl	800897c <xTimerGenericCommand>
 8008a6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d114      	bne.n	8008a9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	e7fd      	b.n	8008a88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	6978      	ldr	r0, [r7, #20]
 8008aa4:	4798      	blx	r3
}
 8008aa6:	bf00      	nop
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000f68 	.word	0x20000f68

08008ab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008abc:	f107 0308 	add.w	r3, r7, #8
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 f859 	bl	8008b78 <prvGetNextExpireTime>
 8008ac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4619      	mov	r1, r3
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f805 	bl	8008adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ad2:	f000 f8d7 	bl	8008c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ad6:	bf00      	nop
 8008ad8:	e7f0      	b.n	8008abc <prvTimerTask+0x8>
	...

08008adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ae6:	f7ff fa37 	bl	8007f58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aea:	f107 0308 	add.w	r3, r7, #8
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f866 	bl	8008bc0 <prvSampleTimeNow>
 8008af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d130      	bne.n	8008b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <prvProcessTimerOrBlockTask+0x3c>
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d806      	bhi.n	8008b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b0a:	f7ff fa33 	bl	8007f74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff ff81 	bl	8008a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b16:	e024      	b.n	8008b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b1e:	4b13      	ldr	r3, [pc, #76]	@ (8008b6c <prvProcessTimerOrBlockTask+0x90>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <prvProcessTimerOrBlockTask+0x50>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <prvProcessTimerOrBlockTask+0x52>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b30:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <prvProcessTimerOrBlockTask+0x94>)
 8008b32:	6818      	ldr	r0, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f7fe ff93 	bl	8007a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b42:	f7ff fa17 	bl	8007f74 <xTaskResumeAll>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b4c:	4b09      	ldr	r3, [pc, #36]	@ (8008b74 <prvProcessTimerOrBlockTask+0x98>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
}
 8008b5c:	e001      	b.n	8008b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b5e:	f7ff fa09 	bl	8007f74 <xTaskResumeAll>
}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000f6c 	.word	0x20000f6c
 8008b70:	20000f70 	.word	0x20000f70
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b80:	4b0e      	ldr	r3, [pc, #56]	@ (8008bbc <prvGetNextExpireTime+0x44>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <prvGetNextExpireTime+0x16>
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	e000      	b.n	8008b90 <prvGetNextExpireTime+0x18>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b9c:	4b07      	ldr	r3, [pc, #28]	@ (8008bbc <prvGetNextExpireTime+0x44>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e001      	b.n	8008bac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bac:	68fb      	ldr	r3, [r7, #12]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000f68 	.word	0x20000f68

08008bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bc8:	f7ff fa72 	bl	80080b0 <xTaskGetTickCount>
 8008bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bce:	4b0b      	ldr	r3, [pc, #44]	@ (8008bfc <prvSampleTimeNow+0x3c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d205      	bcs.n	8008be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bd8:	f000 f93a 	bl	8008e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	e002      	b.n	8008bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bea:	4a04      	ldr	r2, [pc, #16]	@ (8008bfc <prvSampleTimeNow+0x3c>)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000f78 	.word	0x20000f78

08008c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d812      	bhi.n	8008c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	e01b      	b.n	8008c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c3a:	4b10      	ldr	r3, [pc, #64]	@ (8008c7c <prvInsertTimerInActiveList+0x7c>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fe f9e6 	bl	8007016 <vListInsert>
 8008c4a:	e012      	b.n	8008c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d206      	bcs.n	8008c62 <prvInsertTimerInActiveList+0x62>
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e007      	b.n	8008c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c62:	4b07      	ldr	r3, [pc, #28]	@ (8008c80 <prvInsertTimerInActiveList+0x80>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f7fe f9d2 	bl	8007016 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c72:	697b      	ldr	r3, [r7, #20]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20000f6c 	.word	0x20000f6c
 8008c80:	20000f68 	.word	0x20000f68

08008c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08e      	sub	sp, #56	@ 0x38
 8008c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c8a:	e0ce      	b.n	8008e2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da19      	bge.n	8008cc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c92:	1d3b      	adds	r3, r7, #4
 8008c94:	3304      	adds	r3, #4
 8008c96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	61fb      	str	r3, [r7, #28]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cbc:	6850      	ldr	r0, [r2, #4]
 8008cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cc0:	6892      	ldr	r2, [r2, #8]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f2c0 80ae 	blt.w	8008e2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d004      	beq.n	8008ce4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe f9d2 	bl	8007088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff ff6a 	bl	8008bc0 <prvSampleTimeNow>
 8008cec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b09      	cmp	r3, #9
 8008cf2:	f200 8097 	bhi.w	8008e24 <prvProcessReceivedCommands+0x1a0>
 8008cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cfc <prvProcessReceivedCommands+0x78>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d25 	.word	0x08008d25
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d9b 	.word	0x08008d9b
 8008d0c:	08008daf 	.word	0x08008daf
 8008d10:	08008dfb 	.word	0x08008dfb
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d25 	.word	0x08008d25
 8008d1c:	08008d9b 	.word	0x08008d9b
 8008d20:	08008daf 	.word	0x08008daf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	18d1      	adds	r1, r2, r3
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d44:	f7ff ff5c 	bl	8008c00 <prvInsertTimerInActiveList>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d06c      	beq.n	8008e28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d061      	beq.n	8008e28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	441a      	add	r2, r3
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	2300      	movs	r3, #0
 8008d72:	2100      	movs	r1, #0
 8008d74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d76:	f7ff fe01 	bl	800897c <xTimerGenericCommand>
 8008d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d152      	bne.n	8008e28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	61bb      	str	r3, [r7, #24]
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008da0:	f023 0301 	bic.w	r3, r3, #1
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008dac:	e03d      	b.n	8008e2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008db4:	f043 0301 	orr.w	r3, r3, #1
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10b      	bne.n	8008de6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	617b      	str	r3, [r7, #20]
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	e7fd      	b.n	8008de2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	699a      	ldr	r2, [r3, #24]
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	18d1      	adds	r1, r2, r3
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008df4:	f7ff ff04 	bl	8008c00 <prvInsertTimerInActiveList>
					break;
 8008df8:	e017      	b.n	8008e2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d103      	bne.n	8008e10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008e08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0a:	f000 fbe5 	bl	80095d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e0e:	e00c      	b.n	8008e2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e16:	f023 0301 	bic.w	r3, r3, #1
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e22:	e002      	b.n	8008e2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008e24:	bf00      	nop
 8008e26:	e000      	b.n	8008e2a <prvProcessReceivedCommands+0x1a6>
					break;
 8008e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e2a:	4b08      	ldr	r3, [pc, #32]	@ (8008e4c <prvProcessReceivedCommands+0x1c8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	1d39      	adds	r1, r7, #4
 8008e30:	2200      	movs	r2, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fbfc 	bl	8007630 <xQueueReceive>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f47f af26 	bne.w	8008c8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	3730      	adds	r7, #48	@ 0x30
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000f70 	.word	0x20000f70

08008e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e56:	e049      	b.n	8008eec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e58:	4b2e      	ldr	r3, [pc, #184]	@ (8008f14 <prvSwitchTimerLists+0xc4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e62:	4b2c      	ldr	r3, [pc, #176]	@ (8008f14 <prvSwitchTimerLists+0xc4>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe f909 	bl	8007088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d02f      	beq.n	8008eec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4413      	add	r3, r2
 8008e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d90e      	bls.n	8008ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8008f14 <prvSwitchTimerLists+0xc4>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	f7fe f8ae 	bl	8007016 <vListInsert>
 8008eba:	e017      	b.n	8008eec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff fd58 	bl	800897c <xTimerGenericCommand>
 8008ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	603b      	str	r3, [r7, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eec:	4b09      	ldr	r3, [pc, #36]	@ (8008f14 <prvSwitchTimerLists+0xc4>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1b0      	bne.n	8008e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ef6:	4b07      	ldr	r3, [pc, #28]	@ (8008f14 <prvSwitchTimerLists+0xc4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <prvSwitchTimerLists+0xc8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a04      	ldr	r2, [pc, #16]	@ (8008f14 <prvSwitchTimerLists+0xc4>)
 8008f02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f04:	4a04      	ldr	r2, [pc, #16]	@ (8008f18 <prvSwitchTimerLists+0xc8>)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6013      	str	r3, [r2, #0]
}
 8008f0a:	bf00      	nop
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000f68 	.word	0x20000f68
 8008f18:	20000f6c 	.word	0x20000f6c

08008f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f22:	f000 f969 	bl	80091f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f26:	4b15      	ldr	r3, [pc, #84]	@ (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d120      	bne.n	8008f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f2e:	4814      	ldr	r0, [pc, #80]	@ (8008f80 <prvCheckForValidListAndQueue+0x64>)
 8008f30:	f7fe f820 	bl	8006f74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f34:	4813      	ldr	r0, [pc, #76]	@ (8008f84 <prvCheckForValidListAndQueue+0x68>)
 8008f36:	f7fe f81d 	bl	8006f74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <prvCheckForValidListAndQueue+0x6c>)
 8008f3c:	4a10      	ldr	r2, [pc, #64]	@ (8008f80 <prvCheckForValidListAndQueue+0x64>)
 8008f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f40:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <prvCheckForValidListAndQueue+0x70>)
 8008f42:	4a10      	ldr	r2, [pc, #64]	@ (8008f84 <prvCheckForValidListAndQueue+0x68>)
 8008f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f46:	2300      	movs	r3, #0
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4b11      	ldr	r3, [pc, #68]	@ (8008f90 <prvCheckForValidListAndQueue+0x74>)
 8008f4c:	4a11      	ldr	r2, [pc, #68]	@ (8008f94 <prvCheckForValidListAndQueue+0x78>)
 8008f4e:	2110      	movs	r1, #16
 8008f50:	200a      	movs	r0, #10
 8008f52:	f7fe f92d 	bl	80071b0 <xQueueGenericCreateStatic>
 8008f56:	4603      	mov	r3, r0
 8008f58:	4a08      	ldr	r2, [pc, #32]	@ (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f64:	4b05      	ldr	r3, [pc, #20]	@ (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	490b      	ldr	r1, [pc, #44]	@ (8008f98 <prvCheckForValidListAndQueue+0x7c>)
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fd52 	bl	8007a14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f70:	f000 f974 	bl	800925c <vPortExitCritical>
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000f70 	.word	0x20000f70
 8008f80:	20000f40 	.word	0x20000f40
 8008f84:	20000f54 	.word	0x20000f54
 8008f88:	20000f68 	.word	0x20000f68
 8008f8c:	20000f6c 	.word	0x20000f6c
 8008f90:	2000101c 	.word	0x2000101c
 8008f94:	20000f7c 	.word	0x20000f7c
 8008f98:	0800ae7c 	.word	0x0800ae7c

08008f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3b04      	subs	r3, #4
 8008fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f023 0201 	bic.w	r2, r3, #1
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8009000 <pxPortInitialiseStack+0x64>)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3b14      	subs	r3, #20
 8008fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3b04      	subs	r3, #4
 8008fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f06f 0202 	mvn.w	r2, #2
 8008fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3b20      	subs	r3, #32
 8008ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	08009005 	.word	0x08009005

08009004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800900e:	4b13      	ldr	r3, [pc, #76]	@ (800905c <prvTaskExitError+0x58>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d00b      	beq.n	8009030 <prvTaskExitError+0x2c>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	60fb      	str	r3, [r7, #12]
}
 800902a:	bf00      	nop
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <prvTaskExitError+0x28>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60bb      	str	r3, [r7, #8]
}
 8009042:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009044:	bf00      	nop
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0fc      	beq.n	8009046 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	200000c4 	.word	0x200000c4

08009060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009060:	4b07      	ldr	r3, [pc, #28]	@ (8009080 <pxCurrentTCBConst2>)
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	6808      	ldr	r0, [r1, #0]
 8009066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	f380 8809 	msr	PSP, r0
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8811 	msr	BASEPRI, r0
 800907a:	4770      	bx	lr
 800907c:	f3af 8000 	nop.w

08009080 <pxCurrentTCBConst2>:
 8009080:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009088:	4808      	ldr	r0, [pc, #32]	@ (80090ac <prvPortStartFirstTask+0x24>)
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	6800      	ldr	r0, [r0, #0]
 800908e:	f380 8808 	msr	MSP, r0
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8814 	msr	CONTROL, r0
 800909a:	b662      	cpsie	i
 800909c:	b661      	cpsie	f
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	df00      	svc	0
 80090a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090aa:	bf00      	nop
 80090ac:	e000ed08 	.word	0xe000ed08

080090b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80090b6:	4b47      	ldr	r3, [pc, #284]	@ (80091d4 <xPortStartScheduler+0x124>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a47      	ldr	r2, [pc, #284]	@ (80091d8 <xPortStartScheduler+0x128>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10b      	bne.n	80090d8 <xPortStartScheduler+0x28>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	613b      	str	r3, [r7, #16]
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090d8:	4b3e      	ldr	r3, [pc, #248]	@ (80091d4 <xPortStartScheduler+0x124>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a3f      	ldr	r2, [pc, #252]	@ (80091dc <xPortStartScheduler+0x12c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d10b      	bne.n	80090fa <xPortStartScheduler+0x4a>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	60fb      	str	r3, [r7, #12]
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop
 80090f8:	e7fd      	b.n	80090f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090fa:	4b39      	ldr	r3, [pc, #228]	@ (80091e0 <xPortStartScheduler+0x130>)
 80090fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	22ff      	movs	r2, #255	@ 0xff
 800910a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800911c:	b2da      	uxtb	r2, r3
 800911e:	4b31      	ldr	r3, [pc, #196]	@ (80091e4 <xPortStartScheduler+0x134>)
 8009120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009122:	4b31      	ldr	r3, [pc, #196]	@ (80091e8 <xPortStartScheduler+0x138>)
 8009124:	2207      	movs	r2, #7
 8009126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009128:	e009      	b.n	800913e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800912a:	4b2f      	ldr	r3, [pc, #188]	@ (80091e8 <xPortStartScheduler+0x138>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3b01      	subs	r3, #1
 8009130:	4a2d      	ldr	r2, [pc, #180]	@ (80091e8 <xPortStartScheduler+0x138>)
 8009132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	b2db      	uxtb	r3, r3
 800913c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009146:	2b80      	cmp	r3, #128	@ 0x80
 8009148:	d0ef      	beq.n	800912a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800914a:	4b27      	ldr	r3, [pc, #156]	@ (80091e8 <xPortStartScheduler+0x138>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f1c3 0307 	rsb	r3, r3, #7
 8009152:	2b04      	cmp	r3, #4
 8009154:	d00b      	beq.n	800916e <xPortStartScheduler+0xbe>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	60bb      	str	r3, [r7, #8]
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	e7fd      	b.n	800916a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800916e:	4b1e      	ldr	r3, [pc, #120]	@ (80091e8 <xPortStartScheduler+0x138>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	4a1c      	ldr	r2, [pc, #112]	@ (80091e8 <xPortStartScheduler+0x138>)
 8009176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009178:	4b1b      	ldr	r3, [pc, #108]	@ (80091e8 <xPortStartScheduler+0x138>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009180:	4a19      	ldr	r2, [pc, #100]	@ (80091e8 <xPortStartScheduler+0x138>)
 8009182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800918c:	4b17      	ldr	r3, [pc, #92]	@ (80091ec <xPortStartScheduler+0x13c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a16      	ldr	r2, [pc, #88]	@ (80091ec <xPortStartScheduler+0x13c>)
 8009192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009198:	4b14      	ldr	r3, [pc, #80]	@ (80091ec <xPortStartScheduler+0x13c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a13      	ldr	r2, [pc, #76]	@ (80091ec <xPortStartScheduler+0x13c>)
 800919e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80091a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091a4:	f000 f8da 	bl	800935c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091a8:	4b11      	ldr	r3, [pc, #68]	@ (80091f0 <xPortStartScheduler+0x140>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091ae:	f000 f8f9 	bl	80093a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091b2:	4b10      	ldr	r3, [pc, #64]	@ (80091f4 <xPortStartScheduler+0x144>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a0f      	ldr	r2, [pc, #60]	@ (80091f4 <xPortStartScheduler+0x144>)
 80091b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80091bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091be:	f7ff ff63 	bl	8009088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091c2:	f7ff f83f 	bl	8008244 <vTaskSwitchContext>
	prvTaskExitError();
 80091c6:	f7ff ff1d 	bl	8009004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	e000ed00 	.word	0xe000ed00
 80091d8:	410fc271 	.word	0x410fc271
 80091dc:	410fc270 	.word	0x410fc270
 80091e0:	e000e400 	.word	0xe000e400
 80091e4:	2000106c 	.word	0x2000106c
 80091e8:	20001070 	.word	0x20001070
 80091ec:	e000ed20 	.word	0xe000ed20
 80091f0:	200000c4 	.word	0x200000c4
 80091f4:	e000ef34 	.word	0xe000ef34

080091f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	607b      	str	r3, [r7, #4]
}
 8009210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009212:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <vPortEnterCritical+0x5c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3301      	adds	r3, #1
 8009218:	4a0e      	ldr	r2, [pc, #56]	@ (8009254 <vPortEnterCritical+0x5c>)
 800921a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800921c:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <vPortEnterCritical+0x5c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d110      	bne.n	8009246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009224:	4b0c      	ldr	r3, [pc, #48]	@ (8009258 <vPortEnterCritical+0x60>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <vPortEnterCritical+0x4e>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	603b      	str	r3, [r7, #0]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <vPortEnterCritical+0x4a>
	}
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	200000c4 	.word	0x200000c4
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009262:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <vPortExitCritical+0x50>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10b      	bne.n	8009282 <vPortExitCritical+0x26>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	607b      	str	r3, [r7, #4]
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	e7fd      	b.n	800927e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009282:	4b0a      	ldr	r3, [pc, #40]	@ (80092ac <vPortExitCritical+0x50>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3b01      	subs	r3, #1
 8009288:	4a08      	ldr	r2, [pc, #32]	@ (80092ac <vPortExitCritical+0x50>)
 800928a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800928c:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <vPortExitCritical+0x50>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d105      	bne.n	80092a0 <vPortExitCritical+0x44>
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	200000c4 	.word	0x200000c4

080092b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092b0:	f3ef 8009 	mrs	r0, PSP
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	4b15      	ldr	r3, [pc, #84]	@ (8009310 <pxCurrentTCBConst>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	f01e 0f10 	tst.w	lr, #16
 80092c0:	bf08      	it	eq
 80092c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ca:	6010      	str	r0, [r2, #0]
 80092cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80092d4:	f380 8811 	msr	BASEPRI, r0
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f7fe ffb0 	bl	8008244 <vTaskSwitchContext>
 80092e4:	f04f 0000 	mov.w	r0, #0
 80092e8:	f380 8811 	msr	BASEPRI, r0
 80092ec:	bc09      	pop	{r0, r3}
 80092ee:	6819      	ldr	r1, [r3, #0]
 80092f0:	6808      	ldr	r0, [r1, #0]
 80092f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f6:	f01e 0f10 	tst.w	lr, #16
 80092fa:	bf08      	it	eq
 80092fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009300:	f380 8809 	msr	PSP, r0
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w

08009310 <pxCurrentTCBConst>:
 8009310:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop

08009318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	607b      	str	r3, [r7, #4]
}
 8009330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009332:	f7fe fecd 	bl	80080d0 <xTaskIncrementTick>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800933c:	4b06      	ldr	r3, [pc, #24]	@ (8009358 <xPortSysTickHandler+0x40>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f383 8811 	msr	BASEPRI, r3
}
 800934e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009360:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <vPortSetupTimerInterrupt+0x34>)
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009366:	4b0b      	ldr	r3, [pc, #44]	@ (8009394 <vPortSetupTimerInterrupt+0x38>)
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800936c:	4b0a      	ldr	r3, [pc, #40]	@ (8009398 <vPortSetupTimerInterrupt+0x3c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a0a      	ldr	r2, [pc, #40]	@ (800939c <vPortSetupTimerInterrupt+0x40>)
 8009372:	fba2 2303 	umull	r2, r3, r2, r3
 8009376:	099b      	lsrs	r3, r3, #6
 8009378:	4a09      	ldr	r2, [pc, #36]	@ (80093a0 <vPortSetupTimerInterrupt+0x44>)
 800937a:	3b01      	subs	r3, #1
 800937c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800937e:	4b04      	ldr	r3, [pc, #16]	@ (8009390 <vPortSetupTimerInterrupt+0x34>)
 8009380:	2207      	movs	r2, #7
 8009382:	601a      	str	r2, [r3, #0]
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	e000e010 	.word	0xe000e010
 8009394:	e000e018 	.word	0xe000e018
 8009398:	200000b0 	.word	0x200000b0
 800939c:	10624dd3 	.word	0x10624dd3
 80093a0:	e000e014 	.word	0xe000e014

080093a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80093b4 <vPortEnableVFP+0x10>
 80093a8:	6801      	ldr	r1, [r0, #0]
 80093aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80093ae:	6001      	str	r1, [r0, #0]
 80093b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093b2:	bf00      	nop
 80093b4:	e000ed88 	.word	0xe000ed88

080093b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093be:	f3ef 8305 	mrs	r3, IPSR
 80093c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d915      	bls.n	80093f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ca:	4a18      	ldr	r2, [pc, #96]	@ (800942c <vPortValidateInterruptPriority+0x74>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093d4:	4b16      	ldr	r3, [pc, #88]	@ (8009430 <vPortValidateInterruptPriority+0x78>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	7afa      	ldrb	r2, [r7, #11]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d20b      	bcs.n	80093f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	607b      	str	r3, [r7, #4]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009434 <vPortValidateInterruptPriority+0x7c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80093fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009438 <vPortValidateInterruptPriority+0x80>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	429a      	cmp	r2, r3
 8009404:	d90b      	bls.n	800941e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	603b      	str	r3, [r7, #0]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <vPortValidateInterruptPriority+0x62>
	}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	e000e3f0 	.word	0xe000e3f0
 8009430:	2000106c 	.word	0x2000106c
 8009434:	e000ed0c 	.word	0xe000ed0c
 8009438:	20001070 	.word	0x20001070

0800943c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08a      	sub	sp, #40	@ 0x28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009448:	f7fe fd86 	bl	8007f58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800944c:	4b5c      	ldr	r3, [pc, #368]	@ (80095c0 <pvPortMalloc+0x184>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009454:	f000 f924 	bl	80096a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009458:	4b5a      	ldr	r3, [pc, #360]	@ (80095c4 <pvPortMalloc+0x188>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4013      	ands	r3, r2
 8009460:	2b00      	cmp	r3, #0
 8009462:	f040 8095 	bne.w	8009590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d01e      	beq.n	80094aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800946c:	2208      	movs	r2, #8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4413      	add	r3, r2
 8009472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	2b00      	cmp	r3, #0
 800947c:	d015      	beq.n	80094aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f023 0307 	bic.w	r3, r3, #7
 8009484:	3308      	adds	r3, #8
 8009486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00b      	beq.n	80094aa <pvPortMalloc+0x6e>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	617b      	str	r3, [r7, #20]
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	e7fd      	b.n	80094a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d06f      	beq.n	8009590 <pvPortMalloc+0x154>
 80094b0:	4b45      	ldr	r3, [pc, #276]	@ (80095c8 <pvPortMalloc+0x18c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d86a      	bhi.n	8009590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094ba:	4b44      	ldr	r3, [pc, #272]	@ (80095cc <pvPortMalloc+0x190>)
 80094bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094be:	4b43      	ldr	r3, [pc, #268]	@ (80095cc <pvPortMalloc+0x190>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094c4:	e004      	b.n	80094d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80094c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d903      	bls.n	80094e2 <pvPortMalloc+0xa6>
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1f1      	bne.n	80094c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094e2:	4b37      	ldr	r3, [pc, #220]	@ (80095c0 <pvPortMalloc+0x184>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d051      	beq.n	8009590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2208      	movs	r2, #8
 80094f2:	4413      	add	r3, r2
 80094f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	1ad2      	subs	r2, r2, r3
 8009506:	2308      	movs	r3, #8
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	429a      	cmp	r2, r3
 800950c:	d920      	bls.n	8009550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800950e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4413      	add	r3, r2
 8009514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <pvPortMalloc+0xfc>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	613b      	str	r3, [r7, #16]
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800954a:	69b8      	ldr	r0, [r7, #24]
 800954c:	f000 f90a 	bl	8009764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009550:	4b1d      	ldr	r3, [pc, #116]	@ (80095c8 <pvPortMalloc+0x18c>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	4a1b      	ldr	r2, [pc, #108]	@ (80095c8 <pvPortMalloc+0x18c>)
 800955c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800955e:	4b1a      	ldr	r3, [pc, #104]	@ (80095c8 <pvPortMalloc+0x18c>)
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <pvPortMalloc+0x194>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d203      	bcs.n	8009572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800956a:	4b17      	ldr	r3, [pc, #92]	@ (80095c8 <pvPortMalloc+0x18c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a18      	ldr	r2, [pc, #96]	@ (80095d0 <pvPortMalloc+0x194>)
 8009570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	4b13      	ldr	r3, [pc, #76]	@ (80095c4 <pvPortMalloc+0x188>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	431a      	orrs	r2, r3
 800957c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009586:	4b13      	ldr	r3, [pc, #76]	@ (80095d4 <pvPortMalloc+0x198>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3301      	adds	r3, #1
 800958c:	4a11      	ldr	r2, [pc, #68]	@ (80095d4 <pvPortMalloc+0x198>)
 800958e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009590:	f7fe fcf0 	bl	8007f74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <pvPortMalloc+0x17a>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	60fb      	str	r3, [r7, #12]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <pvPortMalloc+0x176>
	return pvReturn;
 80095b6:	69fb      	ldr	r3, [r7, #28]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3728      	adds	r7, #40	@ 0x28
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20001c34 	.word	0x20001c34
 80095c4:	20001c48 	.word	0x20001c48
 80095c8:	20001c38 	.word	0x20001c38
 80095cc:	20001c2c 	.word	0x20001c2c
 80095d0:	20001c3c 	.word	0x20001c3c
 80095d4:	20001c40 	.word	0x20001c40

080095d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d04f      	beq.n	800968a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095ea:	2308      	movs	r3, #8
 80095ec:	425b      	negs	r3, r3
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4413      	add	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	4b25      	ldr	r3, [pc, #148]	@ (8009694 <vPortFree+0xbc>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4013      	ands	r3, r2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10b      	bne.n	800961e <vPortFree+0x46>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60fb      	str	r3, [r7, #12]
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	e7fd      	b.n	800961a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00b      	beq.n	800963e <vPortFree+0x66>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60bb      	str	r3, [r7, #8]
}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	e7fd      	b.n	800963a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	4b14      	ldr	r3, [pc, #80]	@ (8009694 <vPortFree+0xbc>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4013      	ands	r3, r2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01e      	beq.n	800968a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d11a      	bne.n	800968a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	4b0e      	ldr	r3, [pc, #56]	@ (8009694 <vPortFree+0xbc>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	43db      	mvns	r3, r3
 800965e:	401a      	ands	r2, r3
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009664:	f7fe fc78 	bl	8007f58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	4b0a      	ldr	r3, [pc, #40]	@ (8009698 <vPortFree+0xc0>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4413      	add	r3, r2
 8009672:	4a09      	ldr	r2, [pc, #36]	@ (8009698 <vPortFree+0xc0>)
 8009674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f000 f874 	bl	8009764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800967c:	4b07      	ldr	r3, [pc, #28]	@ (800969c <vPortFree+0xc4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3301      	adds	r3, #1
 8009682:	4a06      	ldr	r2, [pc, #24]	@ (800969c <vPortFree+0xc4>)
 8009684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009686:	f7fe fc75 	bl	8007f74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800968a:	bf00      	nop
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20001c48 	.word	0x20001c48
 8009698:	20001c38 	.word	0x20001c38
 800969c:	20001c44 	.word	0x20001c44

080096a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80096aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096ac:	4b27      	ldr	r3, [pc, #156]	@ (800974c <prvHeapInit+0xac>)
 80096ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00c      	beq.n	80096d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3307      	adds	r3, #7
 80096be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0307 	bic.w	r3, r3, #7
 80096c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	4a1f      	ldr	r2, [pc, #124]	@ (800974c <prvHeapInit+0xac>)
 80096d0:	4413      	add	r3, r2
 80096d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009750 <prvHeapInit+0xb0>)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096de:	4b1c      	ldr	r3, [pc, #112]	@ (8009750 <prvHeapInit+0xb0>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096ec:	2208      	movs	r2, #8
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0307 	bic.w	r3, r3, #7
 80096fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4a15      	ldr	r2, [pc, #84]	@ (8009754 <prvHeapInit+0xb4>)
 8009700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009702:	4b14      	ldr	r3, [pc, #80]	@ (8009754 <prvHeapInit+0xb4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2200      	movs	r2, #0
 8009708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800970a:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <prvHeapInit+0xb4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009720:	4b0c      	ldr	r3, [pc, #48]	@ (8009754 <prvHeapInit+0xb4>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4a0a      	ldr	r2, [pc, #40]	@ (8009758 <prvHeapInit+0xb8>)
 800972e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4a09      	ldr	r2, [pc, #36]	@ (800975c <prvHeapInit+0xbc>)
 8009736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009738:	4b09      	ldr	r3, [pc, #36]	@ (8009760 <prvHeapInit+0xc0>)
 800973a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800973e:	601a      	str	r2, [r3, #0]
}
 8009740:	bf00      	nop
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20001074 	.word	0x20001074
 8009750:	20001c2c 	.word	0x20001c2c
 8009754:	20001c34 	.word	0x20001c34
 8009758:	20001c3c 	.word	0x20001c3c
 800975c:	20001c38 	.word	0x20001c38
 8009760:	20001c48 	.word	0x20001c48

08009764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800976c:	4b28      	ldr	r3, [pc, #160]	@ (8009810 <prvInsertBlockIntoFreeList+0xac>)
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e002      	b.n	8009778 <prvInsertBlockIntoFreeList+0x14>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	429a      	cmp	r2, r3
 8009780:	d8f7      	bhi.n	8009772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d108      	bne.n	80097a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	441a      	add	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d118      	bne.n	80097ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4b15      	ldr	r3, [pc, #84]	@ (8009814 <prvInsertBlockIntoFreeList+0xb0>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d00d      	beq.n	80097e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	441a      	add	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	e008      	b.n	80097f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009814 <prvInsertBlockIntoFreeList+0xb0>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	e003      	b.n	80097f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d002      	beq.n	8009802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20001c2c 	.word	0x20001c2c
 8009814:	20001c34 	.word	0x20001c34

08009818 <calloc>:
 8009818:	4b02      	ldr	r3, [pc, #8]	@ (8009824 <calloc+0xc>)
 800981a:	460a      	mov	r2, r1
 800981c:	4601      	mov	r1, r0
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	f000 b802 	b.w	8009828 <_calloc_r>
 8009824:	200000d4 	.word	0x200000d4

08009828 <_calloc_r>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	fba1 5402 	umull	r5, r4, r1, r2
 800982e:	b93c      	cbnz	r4, 8009840 <_calloc_r+0x18>
 8009830:	4629      	mov	r1, r5
 8009832:	f000 f837 	bl	80098a4 <_malloc_r>
 8009836:	4606      	mov	r6, r0
 8009838:	b928      	cbnz	r0, 8009846 <_calloc_r+0x1e>
 800983a:	2600      	movs	r6, #0
 800983c:	4630      	mov	r0, r6
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	220c      	movs	r2, #12
 8009842:	6002      	str	r2, [r0, #0]
 8009844:	e7f9      	b.n	800983a <_calloc_r+0x12>
 8009846:	462a      	mov	r2, r5
 8009848:	4621      	mov	r1, r4
 800984a:	f000 fa60 	bl	8009d0e <memset>
 800984e:	e7f5      	b.n	800983c <_calloc_r+0x14>

08009850 <malloc>:
 8009850:	4b02      	ldr	r3, [pc, #8]	@ (800985c <malloc+0xc>)
 8009852:	4601      	mov	r1, r0
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f000 b825 	b.w	80098a4 <_malloc_r>
 800985a:	bf00      	nop
 800985c:	200000d4 	.word	0x200000d4

08009860 <sbrk_aligned>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	4e0f      	ldr	r6, [pc, #60]	@ (80098a0 <sbrk_aligned+0x40>)
 8009864:	460c      	mov	r4, r1
 8009866:	6831      	ldr	r1, [r6, #0]
 8009868:	4605      	mov	r5, r0
 800986a:	b911      	cbnz	r1, 8009872 <sbrk_aligned+0x12>
 800986c:	f000 fae8 	bl	8009e40 <_sbrk_r>
 8009870:	6030      	str	r0, [r6, #0]
 8009872:	4621      	mov	r1, r4
 8009874:	4628      	mov	r0, r5
 8009876:	f000 fae3 	bl	8009e40 <_sbrk_r>
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d103      	bne.n	8009886 <sbrk_aligned+0x26>
 800987e:	f04f 34ff 	mov.w	r4, #4294967295
 8009882:	4620      	mov	r0, r4
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	1cc4      	adds	r4, r0, #3
 8009888:	f024 0403 	bic.w	r4, r4, #3
 800988c:	42a0      	cmp	r0, r4
 800988e:	d0f8      	beq.n	8009882 <sbrk_aligned+0x22>
 8009890:	1a21      	subs	r1, r4, r0
 8009892:	4628      	mov	r0, r5
 8009894:	f000 fad4 	bl	8009e40 <_sbrk_r>
 8009898:	3001      	adds	r0, #1
 800989a:	d1f2      	bne.n	8009882 <sbrk_aligned+0x22>
 800989c:	e7ef      	b.n	800987e <sbrk_aligned+0x1e>
 800989e:	bf00      	nop
 80098a0:	20001c4c 	.word	0x20001c4c

080098a4 <_malloc_r>:
 80098a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	1ccd      	adds	r5, r1, #3
 80098aa:	f025 0503 	bic.w	r5, r5, #3
 80098ae:	3508      	adds	r5, #8
 80098b0:	2d0c      	cmp	r5, #12
 80098b2:	bf38      	it	cc
 80098b4:	250c      	movcc	r5, #12
 80098b6:	2d00      	cmp	r5, #0
 80098b8:	4606      	mov	r6, r0
 80098ba:	db01      	blt.n	80098c0 <_malloc_r+0x1c>
 80098bc:	42a9      	cmp	r1, r5
 80098be:	d904      	bls.n	80098ca <_malloc_r+0x26>
 80098c0:	230c      	movs	r3, #12
 80098c2:	6033      	str	r3, [r6, #0]
 80098c4:	2000      	movs	r0, #0
 80098c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099a0 <_malloc_r+0xfc>
 80098ce:	f000 f869 	bl	80099a4 <__malloc_lock>
 80098d2:	f8d8 3000 	ldr.w	r3, [r8]
 80098d6:	461c      	mov	r4, r3
 80098d8:	bb44      	cbnz	r4, 800992c <_malloc_r+0x88>
 80098da:	4629      	mov	r1, r5
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff ffbf 	bl	8009860 <sbrk_aligned>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	4604      	mov	r4, r0
 80098e6:	d158      	bne.n	800999a <_malloc_r+0xf6>
 80098e8:	f8d8 4000 	ldr.w	r4, [r8]
 80098ec:	4627      	mov	r7, r4
 80098ee:	2f00      	cmp	r7, #0
 80098f0:	d143      	bne.n	800997a <_malloc_r+0xd6>
 80098f2:	2c00      	cmp	r4, #0
 80098f4:	d04b      	beq.n	800998e <_malloc_r+0xea>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	4639      	mov	r1, r7
 80098fa:	4630      	mov	r0, r6
 80098fc:	eb04 0903 	add.w	r9, r4, r3
 8009900:	f000 fa9e 	bl	8009e40 <_sbrk_r>
 8009904:	4581      	cmp	r9, r0
 8009906:	d142      	bne.n	800998e <_malloc_r+0xea>
 8009908:	6821      	ldr	r1, [r4, #0]
 800990a:	1a6d      	subs	r5, r5, r1
 800990c:	4629      	mov	r1, r5
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff ffa6 	bl	8009860 <sbrk_aligned>
 8009914:	3001      	adds	r0, #1
 8009916:	d03a      	beq.n	800998e <_malloc_r+0xea>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	442b      	add	r3, r5
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	f8d8 3000 	ldr.w	r3, [r8]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	bb62      	cbnz	r2, 8009980 <_malloc_r+0xdc>
 8009926:	f8c8 7000 	str.w	r7, [r8]
 800992a:	e00f      	b.n	800994c <_malloc_r+0xa8>
 800992c:	6822      	ldr	r2, [r4, #0]
 800992e:	1b52      	subs	r2, r2, r5
 8009930:	d420      	bmi.n	8009974 <_malloc_r+0xd0>
 8009932:	2a0b      	cmp	r2, #11
 8009934:	d917      	bls.n	8009966 <_malloc_r+0xc2>
 8009936:	1961      	adds	r1, r4, r5
 8009938:	42a3      	cmp	r3, r4
 800993a:	6025      	str	r5, [r4, #0]
 800993c:	bf18      	it	ne
 800993e:	6059      	strne	r1, [r3, #4]
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	bf08      	it	eq
 8009944:	f8c8 1000 	streq.w	r1, [r8]
 8009948:	5162      	str	r2, [r4, r5]
 800994a:	604b      	str	r3, [r1, #4]
 800994c:	4630      	mov	r0, r6
 800994e:	f000 f82f 	bl	80099b0 <__malloc_unlock>
 8009952:	f104 000b 	add.w	r0, r4, #11
 8009956:	1d23      	adds	r3, r4, #4
 8009958:	f020 0007 	bic.w	r0, r0, #7
 800995c:	1ac2      	subs	r2, r0, r3
 800995e:	bf1c      	itt	ne
 8009960:	1a1b      	subne	r3, r3, r0
 8009962:	50a3      	strne	r3, [r4, r2]
 8009964:	e7af      	b.n	80098c6 <_malloc_r+0x22>
 8009966:	6862      	ldr	r2, [r4, #4]
 8009968:	42a3      	cmp	r3, r4
 800996a:	bf0c      	ite	eq
 800996c:	f8c8 2000 	streq.w	r2, [r8]
 8009970:	605a      	strne	r2, [r3, #4]
 8009972:	e7eb      	b.n	800994c <_malloc_r+0xa8>
 8009974:	4623      	mov	r3, r4
 8009976:	6864      	ldr	r4, [r4, #4]
 8009978:	e7ae      	b.n	80098d8 <_malloc_r+0x34>
 800997a:	463c      	mov	r4, r7
 800997c:	687f      	ldr	r7, [r7, #4]
 800997e:	e7b6      	b.n	80098ee <_malloc_r+0x4a>
 8009980:	461a      	mov	r2, r3
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	42a3      	cmp	r3, r4
 8009986:	d1fb      	bne.n	8009980 <_malloc_r+0xdc>
 8009988:	2300      	movs	r3, #0
 800998a:	6053      	str	r3, [r2, #4]
 800998c:	e7de      	b.n	800994c <_malloc_r+0xa8>
 800998e:	230c      	movs	r3, #12
 8009990:	6033      	str	r3, [r6, #0]
 8009992:	4630      	mov	r0, r6
 8009994:	f000 f80c 	bl	80099b0 <__malloc_unlock>
 8009998:	e794      	b.n	80098c4 <_malloc_r+0x20>
 800999a:	6005      	str	r5, [r0, #0]
 800999c:	e7d6      	b.n	800994c <_malloc_r+0xa8>
 800999e:	bf00      	nop
 80099a0:	20001c50 	.word	0x20001c50

080099a4 <__malloc_lock>:
 80099a4:	4801      	ldr	r0, [pc, #4]	@ (80099ac <__malloc_lock+0x8>)
 80099a6:	f000 ba98 	b.w	8009eda <__retarget_lock_acquire_recursive>
 80099aa:	bf00      	nop
 80099ac:	20001d94 	.word	0x20001d94

080099b0 <__malloc_unlock>:
 80099b0:	4801      	ldr	r0, [pc, #4]	@ (80099b8 <__malloc_unlock+0x8>)
 80099b2:	f000 ba93 	b.w	8009edc <__retarget_lock_release_recursive>
 80099b6:	bf00      	nop
 80099b8:	20001d94 	.word	0x20001d94

080099bc <_strtol_l.constprop.0>:
 80099bc:	2b24      	cmp	r3, #36	@ 0x24
 80099be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c2:	4686      	mov	lr, r0
 80099c4:	4690      	mov	r8, r2
 80099c6:	d801      	bhi.n	80099cc <_strtol_l.constprop.0+0x10>
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d106      	bne.n	80099da <_strtol_l.constprop.0+0x1e>
 80099cc:	f000 fa5a 	bl	8009e84 <__errno>
 80099d0:	2316      	movs	r3, #22
 80099d2:	6003      	str	r3, [r0, #0]
 80099d4:	2000      	movs	r0, #0
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	4834      	ldr	r0, [pc, #208]	@ (8009aac <_strtol_l.constprop.0+0xf0>)
 80099dc:	460d      	mov	r5, r1
 80099de:	462a      	mov	r2, r5
 80099e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099e4:	5d06      	ldrb	r6, [r0, r4]
 80099e6:	f016 0608 	ands.w	r6, r6, #8
 80099ea:	d1f8      	bne.n	80099de <_strtol_l.constprop.0+0x22>
 80099ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80099ee:	d12d      	bne.n	8009a4c <_strtol_l.constprop.0+0x90>
 80099f0:	782c      	ldrb	r4, [r5, #0]
 80099f2:	2601      	movs	r6, #1
 80099f4:	1c95      	adds	r5, r2, #2
 80099f6:	f033 0210 	bics.w	r2, r3, #16
 80099fa:	d109      	bne.n	8009a10 <_strtol_l.constprop.0+0x54>
 80099fc:	2c30      	cmp	r4, #48	@ 0x30
 80099fe:	d12a      	bne.n	8009a56 <_strtol_l.constprop.0+0x9a>
 8009a00:	782a      	ldrb	r2, [r5, #0]
 8009a02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a06:	2a58      	cmp	r2, #88	@ 0x58
 8009a08:	d125      	bne.n	8009a56 <_strtol_l.constprop.0+0x9a>
 8009a0a:	786c      	ldrb	r4, [r5, #1]
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	3502      	adds	r5, #2
 8009a10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a18:	2200      	movs	r2, #0
 8009a1a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a28:	2f09      	cmp	r7, #9
 8009a2a:	d81b      	bhi.n	8009a64 <_strtol_l.constprop.0+0xa8>
 8009a2c:	463c      	mov	r4, r7
 8009a2e:	42a3      	cmp	r3, r4
 8009a30:	dd27      	ble.n	8009a82 <_strtol_l.constprop.0+0xc6>
 8009a32:	1c57      	adds	r7, r2, #1
 8009a34:	d007      	beq.n	8009a46 <_strtol_l.constprop.0+0x8a>
 8009a36:	4581      	cmp	r9, r0
 8009a38:	d320      	bcc.n	8009a7c <_strtol_l.constprop.0+0xc0>
 8009a3a:	d101      	bne.n	8009a40 <_strtol_l.constprop.0+0x84>
 8009a3c:	45a2      	cmp	sl, r4
 8009a3e:	db1d      	blt.n	8009a7c <_strtol_l.constprop.0+0xc0>
 8009a40:	fb00 4003 	mla	r0, r0, r3, r4
 8009a44:	2201      	movs	r2, #1
 8009a46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a4a:	e7eb      	b.n	8009a24 <_strtol_l.constprop.0+0x68>
 8009a4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a4e:	bf04      	itt	eq
 8009a50:	782c      	ldrbeq	r4, [r5, #0]
 8009a52:	1c95      	addeq	r5, r2, #2
 8009a54:	e7cf      	b.n	80099f6 <_strtol_l.constprop.0+0x3a>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1da      	bne.n	8009a10 <_strtol_l.constprop.0+0x54>
 8009a5a:	2c30      	cmp	r4, #48	@ 0x30
 8009a5c:	bf0c      	ite	eq
 8009a5e:	2308      	moveq	r3, #8
 8009a60:	230a      	movne	r3, #10
 8009a62:	e7d5      	b.n	8009a10 <_strtol_l.constprop.0+0x54>
 8009a64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009a68:	2f19      	cmp	r7, #25
 8009a6a:	d801      	bhi.n	8009a70 <_strtol_l.constprop.0+0xb4>
 8009a6c:	3c37      	subs	r4, #55	@ 0x37
 8009a6e:	e7de      	b.n	8009a2e <_strtol_l.constprop.0+0x72>
 8009a70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009a74:	2f19      	cmp	r7, #25
 8009a76:	d804      	bhi.n	8009a82 <_strtol_l.constprop.0+0xc6>
 8009a78:	3c57      	subs	r4, #87	@ 0x57
 8009a7a:	e7d8      	b.n	8009a2e <_strtol_l.constprop.0+0x72>
 8009a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a80:	e7e1      	b.n	8009a46 <_strtol_l.constprop.0+0x8a>
 8009a82:	1c53      	adds	r3, r2, #1
 8009a84:	d108      	bne.n	8009a98 <_strtol_l.constprop.0+0xdc>
 8009a86:	2322      	movs	r3, #34	@ 0x22
 8009a88:	f8ce 3000 	str.w	r3, [lr]
 8009a8c:	4660      	mov	r0, ip
 8009a8e:	f1b8 0f00 	cmp.w	r8, #0
 8009a92:	d0a0      	beq.n	80099d6 <_strtol_l.constprop.0+0x1a>
 8009a94:	1e69      	subs	r1, r5, #1
 8009a96:	e006      	b.n	8009aa6 <_strtol_l.constprop.0+0xea>
 8009a98:	b106      	cbz	r6, 8009a9c <_strtol_l.constprop.0+0xe0>
 8009a9a:	4240      	negs	r0, r0
 8009a9c:	f1b8 0f00 	cmp.w	r8, #0
 8009aa0:	d099      	beq.n	80099d6 <_strtol_l.constprop.0+0x1a>
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	d1f6      	bne.n	8009a94 <_strtol_l.constprop.0+0xd8>
 8009aa6:	f8c8 1000 	str.w	r1, [r8]
 8009aaa:	e794      	b.n	80099d6 <_strtol_l.constprop.0+0x1a>
 8009aac:	0800af39 	.word	0x0800af39

08009ab0 <strtol>:
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4802      	ldr	r0, [pc, #8]	@ (8009ac0 <strtol+0x10>)
 8009ab8:	6800      	ldr	r0, [r0, #0]
 8009aba:	f7ff bf7f 	b.w	80099bc <_strtol_l.constprop.0>
 8009abe:	bf00      	nop
 8009ac0:	200000d4 	.word	0x200000d4

08009ac4 <std>:
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	4604      	mov	r4, r0
 8009aca:	e9c0 3300 	strd	r3, r3, [r0]
 8009ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ad2:	6083      	str	r3, [r0, #8]
 8009ad4:	8181      	strh	r1, [r0, #12]
 8009ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ad8:	81c2      	strh	r2, [r0, #14]
 8009ada:	6183      	str	r3, [r0, #24]
 8009adc:	4619      	mov	r1, r3
 8009ade:	2208      	movs	r2, #8
 8009ae0:	305c      	adds	r0, #92	@ 0x5c
 8009ae2:	f000 f914 	bl	8009d0e <memset>
 8009ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b1c <std+0x58>)
 8009ae8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009aea:	4b0d      	ldr	r3, [pc, #52]	@ (8009b20 <std+0x5c>)
 8009aec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009aee:	4b0d      	ldr	r3, [pc, #52]	@ (8009b24 <std+0x60>)
 8009af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009af2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b28 <std+0x64>)
 8009af4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009af6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b2c <std+0x68>)
 8009af8:	6224      	str	r4, [r4, #32]
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d006      	beq.n	8009b0c <std+0x48>
 8009afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b02:	4294      	cmp	r4, r2
 8009b04:	d002      	beq.n	8009b0c <std+0x48>
 8009b06:	33d0      	adds	r3, #208	@ 0xd0
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	d105      	bne.n	8009b18 <std+0x54>
 8009b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b14:	f000 b9e0 	b.w	8009ed8 <__retarget_lock_init_recursive>
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	bf00      	nop
 8009b1c:	08009c89 	.word	0x08009c89
 8009b20:	08009cab 	.word	0x08009cab
 8009b24:	08009ce3 	.word	0x08009ce3
 8009b28:	08009d07 	.word	0x08009d07
 8009b2c:	20001c54 	.word	0x20001c54

08009b30 <stdio_exit_handler>:
 8009b30:	4a02      	ldr	r2, [pc, #8]	@ (8009b3c <stdio_exit_handler+0xc>)
 8009b32:	4903      	ldr	r1, [pc, #12]	@ (8009b40 <stdio_exit_handler+0x10>)
 8009b34:	4803      	ldr	r0, [pc, #12]	@ (8009b44 <stdio_exit_handler+0x14>)
 8009b36:	f000 b869 	b.w	8009c0c <_fwalk_sglue>
 8009b3a:	bf00      	nop
 8009b3c:	200000c8 	.word	0x200000c8
 8009b40:	0800a6a1 	.word	0x0800a6a1
 8009b44:	200000d8 	.word	0x200000d8

08009b48 <cleanup_stdio>:
 8009b48:	6841      	ldr	r1, [r0, #4]
 8009b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b7c <cleanup_stdio+0x34>)
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	b510      	push	{r4, lr}
 8009b50:	4604      	mov	r4, r0
 8009b52:	d001      	beq.n	8009b58 <cleanup_stdio+0x10>
 8009b54:	f000 fda4 	bl	800a6a0 <_fflush_r>
 8009b58:	68a1      	ldr	r1, [r4, #8]
 8009b5a:	4b09      	ldr	r3, [pc, #36]	@ (8009b80 <cleanup_stdio+0x38>)
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	d002      	beq.n	8009b66 <cleanup_stdio+0x1e>
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fd9d 	bl	800a6a0 <_fflush_r>
 8009b66:	68e1      	ldr	r1, [r4, #12]
 8009b68:	4b06      	ldr	r3, [pc, #24]	@ (8009b84 <cleanup_stdio+0x3c>)
 8009b6a:	4299      	cmp	r1, r3
 8009b6c:	d004      	beq.n	8009b78 <cleanup_stdio+0x30>
 8009b6e:	4620      	mov	r0, r4
 8009b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b74:	f000 bd94 	b.w	800a6a0 <_fflush_r>
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001c54 	.word	0x20001c54
 8009b80:	20001cbc 	.word	0x20001cbc
 8009b84:	20001d24 	.word	0x20001d24

08009b88 <global_stdio_init.part.0>:
 8009b88:	b510      	push	{r4, lr}
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb8 <global_stdio_init.part.0+0x30>)
 8009b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8009bbc <global_stdio_init.part.0+0x34>)
 8009b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009bc0 <global_stdio_init.part.0+0x38>)
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	4620      	mov	r0, r4
 8009b94:	2200      	movs	r2, #0
 8009b96:	2104      	movs	r1, #4
 8009b98:	f7ff ff94 	bl	8009ac4 <std>
 8009b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	2109      	movs	r1, #9
 8009ba4:	f7ff ff8e 	bl	8009ac4 <std>
 8009ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bac:	2202      	movs	r2, #2
 8009bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb2:	2112      	movs	r1, #18
 8009bb4:	f7ff bf86 	b.w	8009ac4 <std>
 8009bb8:	20001d8c 	.word	0x20001d8c
 8009bbc:	20001c54 	.word	0x20001c54
 8009bc0:	08009b31 	.word	0x08009b31

08009bc4 <__sfp_lock_acquire>:
 8009bc4:	4801      	ldr	r0, [pc, #4]	@ (8009bcc <__sfp_lock_acquire+0x8>)
 8009bc6:	f000 b988 	b.w	8009eda <__retarget_lock_acquire_recursive>
 8009bca:	bf00      	nop
 8009bcc:	20001d95 	.word	0x20001d95

08009bd0 <__sfp_lock_release>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	@ (8009bd8 <__sfp_lock_release+0x8>)
 8009bd2:	f000 b983 	b.w	8009edc <__retarget_lock_release_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20001d95 	.word	0x20001d95

08009bdc <__sinit>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	4604      	mov	r4, r0
 8009be0:	f7ff fff0 	bl	8009bc4 <__sfp_lock_acquire>
 8009be4:	6a23      	ldr	r3, [r4, #32]
 8009be6:	b11b      	cbz	r3, 8009bf0 <__sinit+0x14>
 8009be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bec:	f7ff bff0 	b.w	8009bd0 <__sfp_lock_release>
 8009bf0:	4b04      	ldr	r3, [pc, #16]	@ (8009c04 <__sinit+0x28>)
 8009bf2:	6223      	str	r3, [r4, #32]
 8009bf4:	4b04      	ldr	r3, [pc, #16]	@ (8009c08 <__sinit+0x2c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1f5      	bne.n	8009be8 <__sinit+0xc>
 8009bfc:	f7ff ffc4 	bl	8009b88 <global_stdio_init.part.0>
 8009c00:	e7f2      	b.n	8009be8 <__sinit+0xc>
 8009c02:	bf00      	nop
 8009c04:	08009b49 	.word	0x08009b49
 8009c08:	20001d8c 	.word	0x20001d8c

08009c0c <_fwalk_sglue>:
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	4607      	mov	r7, r0
 8009c12:	4688      	mov	r8, r1
 8009c14:	4614      	mov	r4, r2
 8009c16:	2600      	movs	r6, #0
 8009c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c20:	d505      	bpl.n	8009c2e <_fwalk_sglue+0x22>
 8009c22:	6824      	ldr	r4, [r4, #0]
 8009c24:	2c00      	cmp	r4, #0
 8009c26:	d1f7      	bne.n	8009c18 <_fwalk_sglue+0xc>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	89ab      	ldrh	r3, [r5, #12]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d907      	bls.n	8009c44 <_fwalk_sglue+0x38>
 8009c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	d003      	beq.n	8009c44 <_fwalk_sglue+0x38>
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	4638      	mov	r0, r7
 8009c40:	47c0      	blx	r8
 8009c42:	4306      	orrs	r6, r0
 8009c44:	3568      	adds	r5, #104	@ 0x68
 8009c46:	e7e9      	b.n	8009c1c <_fwalk_sglue+0x10>

08009c48 <siprintf>:
 8009c48:	b40e      	push	{r1, r2, r3}
 8009c4a:	b500      	push	{lr}
 8009c4c:	b09c      	sub	sp, #112	@ 0x70
 8009c4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c50:	9002      	str	r0, [sp, #8]
 8009c52:	9006      	str	r0, [sp, #24]
 8009c54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c58:	4809      	ldr	r0, [pc, #36]	@ (8009c80 <siprintf+0x38>)
 8009c5a:	9107      	str	r1, [sp, #28]
 8009c5c:	9104      	str	r1, [sp, #16]
 8009c5e:	4909      	ldr	r1, [pc, #36]	@ (8009c84 <siprintf+0x3c>)
 8009c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c64:	9105      	str	r1, [sp, #20]
 8009c66:	6800      	ldr	r0, [r0, #0]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	a902      	add	r1, sp, #8
 8009c6c:	f000 fa0a 	bl	800a084 <_svfiprintf_r>
 8009c70:	9b02      	ldr	r3, [sp, #8]
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
 8009c76:	b01c      	add	sp, #112	@ 0x70
 8009c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c7c:	b003      	add	sp, #12
 8009c7e:	4770      	bx	lr
 8009c80:	200000d4 	.word	0x200000d4
 8009c84:	ffff0208 	.word	0xffff0208

08009c88 <__sread>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c90:	f000 f8c4 	bl	8009e1c <_read_r>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	bfab      	itete	ge
 8009c98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c9c:	181b      	addge	r3, r3, r0
 8009c9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ca2:	bfac      	ite	ge
 8009ca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ca6:	81a3      	strhlt	r3, [r4, #12]
 8009ca8:	bd10      	pop	{r4, pc}

08009caa <__swrite>:
 8009caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cae:	461f      	mov	r7, r3
 8009cb0:	898b      	ldrh	r3, [r1, #12]
 8009cb2:	05db      	lsls	r3, r3, #23
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	4616      	mov	r6, r2
 8009cba:	d505      	bpl.n	8009cc8 <__swrite+0x1e>
 8009cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f000 f898 	bl	8009df8 <_lseek_r>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	4628      	mov	r0, r5
 8009cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cde:	f000 b8bf 	b.w	8009e60 <_write_r>

08009ce2 <__sseek>:
 8009ce2:	b510      	push	{r4, lr}
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cea:	f000 f885 	bl	8009df8 <_lseek_r>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	bf15      	itete	ne
 8009cf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009cfe:	81a3      	strheq	r3, [r4, #12]
 8009d00:	bf18      	it	ne
 8009d02:	81a3      	strhne	r3, [r4, #12]
 8009d04:	bd10      	pop	{r4, pc}

08009d06 <__sclose>:
 8009d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0a:	f000 b865 	b.w	8009dd8 <_close_r>

08009d0e <memset>:
 8009d0e:	4402      	add	r2, r0
 8009d10:	4603      	mov	r3, r0
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d100      	bne.n	8009d18 <memset+0xa>
 8009d16:	4770      	bx	lr
 8009d18:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1c:	e7f9      	b.n	8009d12 <memset+0x4>
	...

08009d20 <strtok>:
 8009d20:	4b16      	ldr	r3, [pc, #88]	@ (8009d7c <strtok+0x5c>)
 8009d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d26:	681f      	ldr	r7, [r3, #0]
 8009d28:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	460e      	mov	r6, r1
 8009d2e:	b9ec      	cbnz	r4, 8009d6c <strtok+0x4c>
 8009d30:	2050      	movs	r0, #80	@ 0x50
 8009d32:	f7ff fd8d 	bl	8009850 <malloc>
 8009d36:	4602      	mov	r2, r0
 8009d38:	6478      	str	r0, [r7, #68]	@ 0x44
 8009d3a:	b920      	cbnz	r0, 8009d46 <strtok+0x26>
 8009d3c:	4b10      	ldr	r3, [pc, #64]	@ (8009d80 <strtok+0x60>)
 8009d3e:	4811      	ldr	r0, [pc, #68]	@ (8009d84 <strtok+0x64>)
 8009d40:	215b      	movs	r1, #91	@ 0x5b
 8009d42:	f000 f8db 	bl	8009efc <__assert_func>
 8009d46:	e9c0 4400 	strd	r4, r4, [r0]
 8009d4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009d4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009d52:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009d56:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009d5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009d5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009d62:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009d66:	6184      	str	r4, [r0, #24]
 8009d68:	7704      	strb	r4, [r0, #28]
 8009d6a:	6244      	str	r4, [r0, #36]	@ 0x24
 8009d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	2301      	movs	r3, #1
 8009d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d78:	f000 b806 	b.w	8009d88 <__strtok_r>
 8009d7c:	200000d4 	.word	0x200000d4
 8009d80:	0800b039 	.word	0x0800b039
 8009d84:	0800b050 	.word	0x0800b050

08009d88 <__strtok_r>:
 8009d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	b908      	cbnz	r0, 8009d92 <__strtok_r+0xa>
 8009d8e:	6814      	ldr	r4, [r2, #0]
 8009d90:	b144      	cbz	r4, 8009da4 <__strtok_r+0x1c>
 8009d92:	4620      	mov	r0, r4
 8009d94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009d98:	460f      	mov	r7, r1
 8009d9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009d9e:	b91e      	cbnz	r6, 8009da8 <__strtok_r+0x20>
 8009da0:	b965      	cbnz	r5, 8009dbc <__strtok_r+0x34>
 8009da2:	6015      	str	r5, [r2, #0]
 8009da4:	2000      	movs	r0, #0
 8009da6:	e005      	b.n	8009db4 <__strtok_r+0x2c>
 8009da8:	42b5      	cmp	r5, r6
 8009daa:	d1f6      	bne.n	8009d9a <__strtok_r+0x12>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1f0      	bne.n	8009d92 <__strtok_r+0xa>
 8009db0:	6014      	str	r4, [r2, #0]
 8009db2:	7003      	strb	r3, [r0, #0]
 8009db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db6:	461c      	mov	r4, r3
 8009db8:	e00c      	b.n	8009dd4 <__strtok_r+0x4c>
 8009dba:	b915      	cbnz	r5, 8009dc2 <__strtok_r+0x3a>
 8009dbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009dc0:	460e      	mov	r6, r1
 8009dc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009dc6:	42ab      	cmp	r3, r5
 8009dc8:	d1f7      	bne.n	8009dba <__strtok_r+0x32>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f3      	beq.n	8009db6 <__strtok_r+0x2e>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009dd4:	6014      	str	r4, [r2, #0]
 8009dd6:	e7ed      	b.n	8009db4 <__strtok_r+0x2c>

08009dd8 <_close_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d06      	ldr	r5, [pc, #24]	@ (8009df4 <_close_r+0x1c>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	f7f7 fac0 	bl	8001368 <_close>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_close_r+0x1a>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_close_r+0x1a>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	20001d90 	.word	0x20001d90

08009df8 <_lseek_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d07      	ldr	r5, [pc, #28]	@ (8009e18 <_lseek_r+0x20>)
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	4608      	mov	r0, r1
 8009e00:	4611      	mov	r1, r2
 8009e02:	2200      	movs	r2, #0
 8009e04:	602a      	str	r2, [r5, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f7f7 fad5 	bl	80013b6 <_lseek>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_lseek_r+0x1e>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_lseek_r+0x1e>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20001d90 	.word	0x20001d90

08009e1c <_read_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	@ (8009e3c <_read_r+0x20>)
 8009e20:	4604      	mov	r4, r0
 8009e22:	4608      	mov	r0, r1
 8009e24:	4611      	mov	r1, r2
 8009e26:	2200      	movs	r2, #0
 8009e28:	602a      	str	r2, [r5, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f7f7 fa63 	bl	80012f6 <_read>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_read_r+0x1e>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_read_r+0x1e>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20001d90 	.word	0x20001d90

08009e40 <_sbrk_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	@ (8009e5c <_sbrk_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f7 fac0 	bl	80013d0 <_sbrk>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_sbrk_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_sbrk_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20001d90 	.word	0x20001d90

08009e60 <_write_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	@ (8009e80 <_write_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f7 fa5e 	bl	8001330 <_write>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_write_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_write_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20001d90 	.word	0x20001d90

08009e84 <__errno>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	@ (8009e8c <__errno+0x8>)
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	200000d4 	.word	0x200000d4

08009e90 <__libc_init_array>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	4d0d      	ldr	r5, [pc, #52]	@ (8009ec8 <__libc_init_array+0x38>)
 8009e94:	4c0d      	ldr	r4, [pc, #52]	@ (8009ecc <__libc_init_array+0x3c>)
 8009e96:	1b64      	subs	r4, r4, r5
 8009e98:	10a4      	asrs	r4, r4, #2
 8009e9a:	2600      	movs	r6, #0
 8009e9c:	42a6      	cmp	r6, r4
 8009e9e:	d109      	bne.n	8009eb4 <__libc_init_array+0x24>
 8009ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8009ed0 <__libc_init_array+0x40>)
 8009ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8009ed4 <__libc_init_array+0x44>)
 8009ea4:	f000 ff2a 	bl	800acfc <_init>
 8009ea8:	1b64      	subs	r4, r4, r5
 8009eaa:	10a4      	asrs	r4, r4, #2
 8009eac:	2600      	movs	r6, #0
 8009eae:	42a6      	cmp	r6, r4
 8009eb0:	d105      	bne.n	8009ebe <__libc_init_array+0x2e>
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb8:	4798      	blx	r3
 8009eba:	3601      	adds	r6, #1
 8009ebc:	e7ee      	b.n	8009e9c <__libc_init_array+0xc>
 8009ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec2:	4798      	blx	r3
 8009ec4:	3601      	adds	r6, #1
 8009ec6:	e7f2      	b.n	8009eae <__libc_init_array+0x1e>
 8009ec8:	0800b124 	.word	0x0800b124
 8009ecc:	0800b124 	.word	0x0800b124
 8009ed0:	0800b124 	.word	0x0800b124
 8009ed4:	0800b128 	.word	0x0800b128

08009ed8 <__retarget_lock_init_recursive>:
 8009ed8:	4770      	bx	lr

08009eda <__retarget_lock_acquire_recursive>:
 8009eda:	4770      	bx	lr

08009edc <__retarget_lock_release_recursive>:
 8009edc:	4770      	bx	lr

08009ede <memcpy>:
 8009ede:	440a      	add	r2, r1
 8009ee0:	4291      	cmp	r1, r2
 8009ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ee6:	d100      	bne.n	8009eea <memcpy+0xc>
 8009ee8:	4770      	bx	lr
 8009eea:	b510      	push	{r4, lr}
 8009eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ef4:	4291      	cmp	r1, r2
 8009ef6:	d1f9      	bne.n	8009eec <memcpy+0xe>
 8009ef8:	bd10      	pop	{r4, pc}
	...

08009efc <__assert_func>:
 8009efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009efe:	4614      	mov	r4, r2
 8009f00:	461a      	mov	r2, r3
 8009f02:	4b09      	ldr	r3, [pc, #36]	@ (8009f28 <__assert_func+0x2c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4605      	mov	r5, r0
 8009f08:	68d8      	ldr	r0, [r3, #12]
 8009f0a:	b954      	cbnz	r4, 8009f22 <__assert_func+0x26>
 8009f0c:	4b07      	ldr	r3, [pc, #28]	@ (8009f2c <__assert_func+0x30>)
 8009f0e:	461c      	mov	r4, r3
 8009f10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f14:	9100      	str	r1, [sp, #0]
 8009f16:	462b      	mov	r3, r5
 8009f18:	4905      	ldr	r1, [pc, #20]	@ (8009f30 <__assert_func+0x34>)
 8009f1a:	f000 fbe9 	bl	800a6f0 <fiprintf>
 8009f1e:	f000 fc13 	bl	800a748 <abort>
 8009f22:	4b04      	ldr	r3, [pc, #16]	@ (8009f34 <__assert_func+0x38>)
 8009f24:	e7f4      	b.n	8009f10 <__assert_func+0x14>
 8009f26:	bf00      	nop
 8009f28:	200000d4 	.word	0x200000d4
 8009f2c:	0800b0e5 	.word	0x0800b0e5
 8009f30:	0800b0b7 	.word	0x0800b0b7
 8009f34:	0800b0aa 	.word	0x0800b0aa

08009f38 <_free_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d041      	beq.n	8009fc4 <_free_r+0x8c>
 8009f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f44:	1f0c      	subs	r4, r1, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfb8      	it	lt
 8009f4a:	18e4      	addlt	r4, r4, r3
 8009f4c:	f7ff fd2a 	bl	80099a4 <__malloc_lock>
 8009f50:	4a1d      	ldr	r2, [pc, #116]	@ (8009fc8 <_free_r+0x90>)
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	b933      	cbnz	r3, 8009f64 <_free_r+0x2c>
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	6014      	str	r4, [r2, #0]
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f60:	f7ff bd26 	b.w	80099b0 <__malloc_unlock>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d908      	bls.n	8009f7a <_free_r+0x42>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	1821      	adds	r1, r4, r0
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	bf01      	itttt	eq
 8009f70:	6819      	ldreq	r1, [r3, #0]
 8009f72:	685b      	ldreq	r3, [r3, #4]
 8009f74:	1809      	addeq	r1, r1, r0
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	e7ed      	b.n	8009f56 <_free_r+0x1e>
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b10b      	cbz	r3, 8009f84 <_free_r+0x4c>
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d9fa      	bls.n	8009f7a <_free_r+0x42>
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	1850      	adds	r0, r2, r1
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d10b      	bne.n	8009fa4 <_free_r+0x6c>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	4401      	add	r1, r0
 8009f90:	1850      	adds	r0, r2, r1
 8009f92:	4283      	cmp	r3, r0
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	d1e0      	bne.n	8009f5a <_free_r+0x22>
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	6053      	str	r3, [r2, #4]
 8009f9e:	4408      	add	r0, r1
 8009fa0:	6010      	str	r0, [r2, #0]
 8009fa2:	e7da      	b.n	8009f5a <_free_r+0x22>
 8009fa4:	d902      	bls.n	8009fac <_free_r+0x74>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	e7d6      	b.n	8009f5a <_free_r+0x22>
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	1821      	adds	r1, r4, r0
 8009fb0:	428b      	cmp	r3, r1
 8009fb2:	bf04      	itt	eq
 8009fb4:	6819      	ldreq	r1, [r3, #0]
 8009fb6:	685b      	ldreq	r3, [r3, #4]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	bf04      	itt	eq
 8009fbc:	1809      	addeq	r1, r1, r0
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	6054      	str	r4, [r2, #4]
 8009fc2:	e7ca      	b.n	8009f5a <_free_r+0x22>
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20001c50 	.word	0x20001c50

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	42be      	cmp	r6, r7
 8009fd6:	680b      	ldr	r3, [r1, #0]
 8009fd8:	4682      	mov	sl, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	4690      	mov	r8, r2
 8009fde:	d82d      	bhi.n	800a03c <__ssputs_r+0x70>
 8009fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009fe8:	d026      	beq.n	800a038 <__ssputs_r+0x6c>
 8009fea:	6965      	ldr	r5, [r4, #20]
 8009fec:	6909      	ldr	r1, [r1, #16]
 8009fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff2:	eba3 0901 	sub.w	r9, r3, r1
 8009ff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ffa:	1c7b      	adds	r3, r7, #1
 8009ffc:	444b      	add	r3, r9
 8009ffe:	106d      	asrs	r5, r5, #1
 800a000:	429d      	cmp	r5, r3
 800a002:	bf38      	it	cc
 800a004:	461d      	movcc	r5, r3
 800a006:	0553      	lsls	r3, r2, #21
 800a008:	d527      	bpl.n	800a05a <__ssputs_r+0x8e>
 800a00a:	4629      	mov	r1, r5
 800a00c:	f7ff fc4a 	bl	80098a4 <_malloc_r>
 800a010:	4606      	mov	r6, r0
 800a012:	b360      	cbz	r0, 800a06e <__ssputs_r+0xa2>
 800a014:	6921      	ldr	r1, [r4, #16]
 800a016:	464a      	mov	r2, r9
 800a018:	f7ff ff61 	bl	8009ede <memcpy>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	6126      	str	r6, [r4, #16]
 800a02a:	6165      	str	r5, [r4, #20]
 800a02c:	444e      	add	r6, r9
 800a02e:	eba5 0509 	sub.w	r5, r5, r9
 800a032:	6026      	str	r6, [r4, #0]
 800a034:	60a5      	str	r5, [r4, #8]
 800a036:	463e      	mov	r6, r7
 800a038:	42be      	cmp	r6, r7
 800a03a:	d900      	bls.n	800a03e <__ssputs_r+0x72>
 800a03c:	463e      	mov	r6, r7
 800a03e:	6820      	ldr	r0, [r4, #0]
 800a040:	4632      	mov	r2, r6
 800a042:	4641      	mov	r1, r8
 800a044:	f000 fb66 	bl	800a714 <memmove>
 800a048:	68a3      	ldr	r3, [r4, #8]
 800a04a:	1b9b      	subs	r3, r3, r6
 800a04c:	60a3      	str	r3, [r4, #8]
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	4433      	add	r3, r6
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	2000      	movs	r0, #0
 800a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05a:	462a      	mov	r2, r5
 800a05c:	f000 fb7b 	bl	800a756 <_realloc_r>
 800a060:	4606      	mov	r6, r0
 800a062:	2800      	cmp	r0, #0
 800a064:	d1e0      	bne.n	800a028 <__ssputs_r+0x5c>
 800a066:	6921      	ldr	r1, [r4, #16]
 800a068:	4650      	mov	r0, sl
 800a06a:	f7ff ff65 	bl	8009f38 <_free_r>
 800a06e:	230c      	movs	r3, #12
 800a070:	f8ca 3000 	str.w	r3, [sl]
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	e7e9      	b.n	800a056 <__ssputs_r+0x8a>
	...

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4698      	mov	r8, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	b09d      	sub	sp, #116	@ 0x74
 800a090:	4607      	mov	r7, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4614      	mov	r4, r2
 800a096:	d510      	bpl.n	800a0ba <_svfiprintf_r+0x36>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b973      	cbnz	r3, 800a0ba <_svfiprintf_r+0x36>
 800a09c:	2140      	movs	r1, #64	@ 0x40
 800a09e:	f7ff fc01 	bl	80098a4 <_malloc_r>
 800a0a2:	6028      	str	r0, [r5, #0]
 800a0a4:	6128      	str	r0, [r5, #16]
 800a0a6:	b930      	cbnz	r0, 800a0b6 <_svfiprintf_r+0x32>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	b01d      	add	sp, #116	@ 0x74
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	2340      	movs	r3, #64	@ 0x40
 800a0b8:	616b      	str	r3, [r5, #20]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0be:	2320      	movs	r3, #32
 800a0c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c8:	2330      	movs	r3, #48	@ 0x30
 800a0ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a268 <_svfiprintf_r+0x1e4>
 800a0ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0d2:	f04f 0901 	mov.w	r9, #1
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	469a      	mov	sl, r3
 800a0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0de:	b10a      	cbz	r2, 800a0e4 <_svfiprintf_r+0x60>
 800a0e0:	2a25      	cmp	r2, #37	@ 0x25
 800a0e2:	d1f9      	bne.n	800a0d8 <_svfiprintf_r+0x54>
 800a0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e8:	d00b      	beq.n	800a102 <_svfiprintf_r+0x7e>
 800a0ea:	465b      	mov	r3, fp
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff ff6b 	bl	8009fcc <__ssputs_r>
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	f000 80a7 	beq.w	800a24a <_svfiprintf_r+0x1c6>
 800a0fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0fe:	445a      	add	r2, fp
 800a100:	9209      	str	r2, [sp, #36]	@ 0x24
 800a102:	f89a 3000 	ldrb.w	r3, [sl]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 809f 	beq.w	800a24a <_svfiprintf_r+0x1c6>
 800a10c:	2300      	movs	r3, #0
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a116:	f10a 0a01 	add.w	sl, sl, #1
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	9307      	str	r3, [sp, #28]
 800a11e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a122:	931a      	str	r3, [sp, #104]	@ 0x68
 800a124:	4654      	mov	r4, sl
 800a126:	2205      	movs	r2, #5
 800a128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12c:	484e      	ldr	r0, [pc, #312]	@ (800a268 <_svfiprintf_r+0x1e4>)
 800a12e:	f7f6 f867 	bl	8000200 <memchr>
 800a132:	9a04      	ldr	r2, [sp, #16]
 800a134:	b9d8      	cbnz	r0, 800a16e <_svfiprintf_r+0xea>
 800a136:	06d0      	lsls	r0, r2, #27
 800a138:	bf44      	itt	mi
 800a13a:	2320      	movmi	r3, #32
 800a13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a140:	0711      	lsls	r1, r2, #28
 800a142:	bf44      	itt	mi
 800a144:	232b      	movmi	r3, #43	@ 0x2b
 800a146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a14a:	f89a 3000 	ldrb.w	r3, [sl]
 800a14e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a150:	d015      	beq.n	800a17e <_svfiprintf_r+0xfa>
 800a152:	9a07      	ldr	r2, [sp, #28]
 800a154:	4654      	mov	r4, sl
 800a156:	2000      	movs	r0, #0
 800a158:	f04f 0c0a 	mov.w	ip, #10
 800a15c:	4621      	mov	r1, r4
 800a15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a162:	3b30      	subs	r3, #48	@ 0x30
 800a164:	2b09      	cmp	r3, #9
 800a166:	d94b      	bls.n	800a200 <_svfiprintf_r+0x17c>
 800a168:	b1b0      	cbz	r0, 800a198 <_svfiprintf_r+0x114>
 800a16a:	9207      	str	r2, [sp, #28]
 800a16c:	e014      	b.n	800a198 <_svfiprintf_r+0x114>
 800a16e:	eba0 0308 	sub.w	r3, r0, r8
 800a172:	fa09 f303 	lsl.w	r3, r9, r3
 800a176:	4313      	orrs	r3, r2
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	46a2      	mov	sl, r4
 800a17c:	e7d2      	b.n	800a124 <_svfiprintf_r+0xa0>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	1d19      	adds	r1, r3, #4
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	9103      	str	r1, [sp, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	bfbb      	ittet	lt
 800a18a:	425b      	neglt	r3, r3
 800a18c:	f042 0202 	orrlt.w	r2, r2, #2
 800a190:	9307      	strge	r3, [sp, #28]
 800a192:	9307      	strlt	r3, [sp, #28]
 800a194:	bfb8      	it	lt
 800a196:	9204      	strlt	r2, [sp, #16]
 800a198:	7823      	ldrb	r3, [r4, #0]
 800a19a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a19c:	d10a      	bne.n	800a1b4 <_svfiprintf_r+0x130>
 800a19e:	7863      	ldrb	r3, [r4, #1]
 800a1a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1a2:	d132      	bne.n	800a20a <_svfiprintf_r+0x186>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	1d1a      	adds	r2, r3, #4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	9203      	str	r2, [sp, #12]
 800a1ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1b0:	3402      	adds	r4, #2
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a278 <_svfiprintf_r+0x1f4>
 800a1b8:	7821      	ldrb	r1, [r4, #0]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	4650      	mov	r0, sl
 800a1be:	f7f6 f81f 	bl	8000200 <memchr>
 800a1c2:	b138      	cbz	r0, 800a1d4 <_svfiprintf_r+0x150>
 800a1c4:	9b04      	ldr	r3, [sp, #16]
 800a1c6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ca:	2240      	movs	r2, #64	@ 0x40
 800a1cc:	4082      	lsls	r2, r0
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	3401      	adds	r4, #1
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d8:	4824      	ldr	r0, [pc, #144]	@ (800a26c <_svfiprintf_r+0x1e8>)
 800a1da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1de:	2206      	movs	r2, #6
 800a1e0:	f7f6 f80e 	bl	8000200 <memchr>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d036      	beq.n	800a256 <_svfiprintf_r+0x1d2>
 800a1e8:	4b21      	ldr	r3, [pc, #132]	@ (800a270 <_svfiprintf_r+0x1ec>)
 800a1ea:	bb1b      	cbnz	r3, 800a234 <_svfiprintf_r+0x1b0>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	3307      	adds	r3, #7
 800a1f0:	f023 0307 	bic.w	r3, r3, #7
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1fa:	4433      	add	r3, r6
 800a1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1fe:	e76a      	b.n	800a0d6 <_svfiprintf_r+0x52>
 800a200:	fb0c 3202 	mla	r2, ip, r2, r3
 800a204:	460c      	mov	r4, r1
 800a206:	2001      	movs	r0, #1
 800a208:	e7a8      	b.n	800a15c <_svfiprintf_r+0xd8>
 800a20a:	2300      	movs	r3, #0
 800a20c:	3401      	adds	r4, #1
 800a20e:	9305      	str	r3, [sp, #20]
 800a210:	4619      	mov	r1, r3
 800a212:	f04f 0c0a 	mov.w	ip, #10
 800a216:	4620      	mov	r0, r4
 800a218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21c:	3a30      	subs	r2, #48	@ 0x30
 800a21e:	2a09      	cmp	r2, #9
 800a220:	d903      	bls.n	800a22a <_svfiprintf_r+0x1a6>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c6      	beq.n	800a1b4 <_svfiprintf_r+0x130>
 800a226:	9105      	str	r1, [sp, #20]
 800a228:	e7c4      	b.n	800a1b4 <_svfiprintf_r+0x130>
 800a22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a22e:	4604      	mov	r4, r0
 800a230:	2301      	movs	r3, #1
 800a232:	e7f0      	b.n	800a216 <_svfiprintf_r+0x192>
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	462a      	mov	r2, r5
 800a23a:	4b0e      	ldr	r3, [pc, #56]	@ (800a274 <_svfiprintf_r+0x1f0>)
 800a23c:	a904      	add	r1, sp, #16
 800a23e:	4638      	mov	r0, r7
 800a240:	f3af 8000 	nop.w
 800a244:	1c42      	adds	r2, r0, #1
 800a246:	4606      	mov	r6, r0
 800a248:	d1d6      	bne.n	800a1f8 <_svfiprintf_r+0x174>
 800a24a:	89ab      	ldrh	r3, [r5, #12]
 800a24c:	065b      	lsls	r3, r3, #25
 800a24e:	f53f af2d 	bmi.w	800a0ac <_svfiprintf_r+0x28>
 800a252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a254:	e72c      	b.n	800a0b0 <_svfiprintf_r+0x2c>
 800a256:	ab03      	add	r3, sp, #12
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	462a      	mov	r2, r5
 800a25c:	4b05      	ldr	r3, [pc, #20]	@ (800a274 <_svfiprintf_r+0x1f0>)
 800a25e:	a904      	add	r1, sp, #16
 800a260:	4638      	mov	r0, r7
 800a262:	f000 f879 	bl	800a358 <_printf_i>
 800a266:	e7ed      	b.n	800a244 <_svfiprintf_r+0x1c0>
 800a268:	0800b0e6 	.word	0x0800b0e6
 800a26c:	0800b0f0 	.word	0x0800b0f0
 800a270:	00000000 	.word	0x00000000
 800a274:	08009fcd 	.word	0x08009fcd
 800a278:	0800b0ec 	.word	0x0800b0ec

0800a27c <_printf_common>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	4616      	mov	r6, r2
 800a282:	4698      	mov	r8, r3
 800a284:	688a      	ldr	r2, [r1, #8]
 800a286:	690b      	ldr	r3, [r1, #16]
 800a288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a28c:	4293      	cmp	r3, r2
 800a28e:	bfb8      	it	lt
 800a290:	4613      	movlt	r3, r2
 800a292:	6033      	str	r3, [r6, #0]
 800a294:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a298:	4607      	mov	r7, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_printf_common+0x26>
 800a29e:	3301      	adds	r3, #1
 800a2a0:	6033      	str	r3, [r6, #0]
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	0699      	lsls	r1, r3, #26
 800a2a6:	bf42      	ittt	mi
 800a2a8:	6833      	ldrmi	r3, [r6, #0]
 800a2aa:	3302      	addmi	r3, #2
 800a2ac:	6033      	strmi	r3, [r6, #0]
 800a2ae:	6825      	ldr	r5, [r4, #0]
 800a2b0:	f015 0506 	ands.w	r5, r5, #6
 800a2b4:	d106      	bne.n	800a2c4 <_printf_common+0x48>
 800a2b6:	f104 0a19 	add.w	sl, r4, #25
 800a2ba:	68e3      	ldr	r3, [r4, #12]
 800a2bc:	6832      	ldr	r2, [r6, #0]
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dc26      	bgt.n	800a312 <_printf_common+0x96>
 800a2c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2c8:	6822      	ldr	r2, [r4, #0]
 800a2ca:	3b00      	subs	r3, #0
 800a2cc:	bf18      	it	ne
 800a2ce:	2301      	movne	r3, #1
 800a2d0:	0692      	lsls	r2, r2, #26
 800a2d2:	d42b      	bmi.n	800a32c <_printf_common+0xb0>
 800a2d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2d8:	4641      	mov	r1, r8
 800a2da:	4638      	mov	r0, r7
 800a2dc:	47c8      	blx	r9
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d01e      	beq.n	800a320 <_printf_common+0xa4>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	6922      	ldr	r2, [r4, #16]
 800a2e6:	f003 0306 	and.w	r3, r3, #6
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	bf02      	ittt	eq
 800a2ee:	68e5      	ldreq	r5, [r4, #12]
 800a2f0:	6833      	ldreq	r3, [r6, #0]
 800a2f2:	1aed      	subeq	r5, r5, r3
 800a2f4:	68a3      	ldr	r3, [r4, #8]
 800a2f6:	bf0c      	ite	eq
 800a2f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2fc:	2500      	movne	r5, #0
 800a2fe:	4293      	cmp	r3, r2
 800a300:	bfc4      	itt	gt
 800a302:	1a9b      	subgt	r3, r3, r2
 800a304:	18ed      	addgt	r5, r5, r3
 800a306:	2600      	movs	r6, #0
 800a308:	341a      	adds	r4, #26
 800a30a:	42b5      	cmp	r5, r6
 800a30c:	d11a      	bne.n	800a344 <_printf_common+0xc8>
 800a30e:	2000      	movs	r0, #0
 800a310:	e008      	b.n	800a324 <_printf_common+0xa8>
 800a312:	2301      	movs	r3, #1
 800a314:	4652      	mov	r2, sl
 800a316:	4641      	mov	r1, r8
 800a318:	4638      	mov	r0, r7
 800a31a:	47c8      	blx	r9
 800a31c:	3001      	adds	r0, #1
 800a31e:	d103      	bne.n	800a328 <_printf_common+0xac>
 800a320:	f04f 30ff 	mov.w	r0, #4294967295
 800a324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a328:	3501      	adds	r5, #1
 800a32a:	e7c6      	b.n	800a2ba <_printf_common+0x3e>
 800a32c:	18e1      	adds	r1, r4, r3
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	2030      	movs	r0, #48	@ 0x30
 800a332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a336:	4422      	add	r2, r4
 800a338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a33c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a340:	3302      	adds	r3, #2
 800a342:	e7c7      	b.n	800a2d4 <_printf_common+0x58>
 800a344:	2301      	movs	r3, #1
 800a346:	4622      	mov	r2, r4
 800a348:	4641      	mov	r1, r8
 800a34a:	4638      	mov	r0, r7
 800a34c:	47c8      	blx	r9
 800a34e:	3001      	adds	r0, #1
 800a350:	d0e6      	beq.n	800a320 <_printf_common+0xa4>
 800a352:	3601      	adds	r6, #1
 800a354:	e7d9      	b.n	800a30a <_printf_common+0x8e>
	...

0800a358 <_printf_i>:
 800a358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	7e0f      	ldrb	r7, [r1, #24]
 800a35e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a360:	2f78      	cmp	r7, #120	@ 0x78
 800a362:	4691      	mov	r9, r2
 800a364:	4680      	mov	r8, r0
 800a366:	460c      	mov	r4, r1
 800a368:	469a      	mov	sl, r3
 800a36a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a36e:	d807      	bhi.n	800a380 <_printf_i+0x28>
 800a370:	2f62      	cmp	r7, #98	@ 0x62
 800a372:	d80a      	bhi.n	800a38a <_printf_i+0x32>
 800a374:	2f00      	cmp	r7, #0
 800a376:	f000 80d2 	beq.w	800a51e <_printf_i+0x1c6>
 800a37a:	2f58      	cmp	r7, #88	@ 0x58
 800a37c:	f000 80b9 	beq.w	800a4f2 <_printf_i+0x19a>
 800a380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a388:	e03a      	b.n	800a400 <_printf_i+0xa8>
 800a38a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a38e:	2b15      	cmp	r3, #21
 800a390:	d8f6      	bhi.n	800a380 <_printf_i+0x28>
 800a392:	a101      	add	r1, pc, #4	@ (adr r1, 800a398 <_printf_i+0x40>)
 800a394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a398:	0800a3f1 	.word	0x0800a3f1
 800a39c:	0800a405 	.word	0x0800a405
 800a3a0:	0800a381 	.word	0x0800a381
 800a3a4:	0800a381 	.word	0x0800a381
 800a3a8:	0800a381 	.word	0x0800a381
 800a3ac:	0800a381 	.word	0x0800a381
 800a3b0:	0800a405 	.word	0x0800a405
 800a3b4:	0800a381 	.word	0x0800a381
 800a3b8:	0800a381 	.word	0x0800a381
 800a3bc:	0800a381 	.word	0x0800a381
 800a3c0:	0800a381 	.word	0x0800a381
 800a3c4:	0800a505 	.word	0x0800a505
 800a3c8:	0800a42f 	.word	0x0800a42f
 800a3cc:	0800a4bf 	.word	0x0800a4bf
 800a3d0:	0800a381 	.word	0x0800a381
 800a3d4:	0800a381 	.word	0x0800a381
 800a3d8:	0800a527 	.word	0x0800a527
 800a3dc:	0800a381 	.word	0x0800a381
 800a3e0:	0800a42f 	.word	0x0800a42f
 800a3e4:	0800a381 	.word	0x0800a381
 800a3e8:	0800a381 	.word	0x0800a381
 800a3ec:	0800a4c7 	.word	0x0800a4c7
 800a3f0:	6833      	ldr	r3, [r6, #0]
 800a3f2:	1d1a      	adds	r2, r3, #4
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6032      	str	r2, [r6, #0]
 800a3f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a400:	2301      	movs	r3, #1
 800a402:	e09d      	b.n	800a540 <_printf_i+0x1e8>
 800a404:	6833      	ldr	r3, [r6, #0]
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	1d19      	adds	r1, r3, #4
 800a40a:	6031      	str	r1, [r6, #0]
 800a40c:	0606      	lsls	r6, r0, #24
 800a40e:	d501      	bpl.n	800a414 <_printf_i+0xbc>
 800a410:	681d      	ldr	r5, [r3, #0]
 800a412:	e003      	b.n	800a41c <_printf_i+0xc4>
 800a414:	0645      	lsls	r5, r0, #25
 800a416:	d5fb      	bpl.n	800a410 <_printf_i+0xb8>
 800a418:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	da03      	bge.n	800a428 <_printf_i+0xd0>
 800a420:	232d      	movs	r3, #45	@ 0x2d
 800a422:	426d      	negs	r5, r5
 800a424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a428:	4859      	ldr	r0, [pc, #356]	@ (800a590 <_printf_i+0x238>)
 800a42a:	230a      	movs	r3, #10
 800a42c:	e011      	b.n	800a452 <_printf_i+0xfa>
 800a42e:	6821      	ldr	r1, [r4, #0]
 800a430:	6833      	ldr	r3, [r6, #0]
 800a432:	0608      	lsls	r0, r1, #24
 800a434:	f853 5b04 	ldr.w	r5, [r3], #4
 800a438:	d402      	bmi.n	800a440 <_printf_i+0xe8>
 800a43a:	0649      	lsls	r1, r1, #25
 800a43c:	bf48      	it	mi
 800a43e:	b2ad      	uxthmi	r5, r5
 800a440:	2f6f      	cmp	r7, #111	@ 0x6f
 800a442:	4853      	ldr	r0, [pc, #332]	@ (800a590 <_printf_i+0x238>)
 800a444:	6033      	str	r3, [r6, #0]
 800a446:	bf14      	ite	ne
 800a448:	230a      	movne	r3, #10
 800a44a:	2308      	moveq	r3, #8
 800a44c:	2100      	movs	r1, #0
 800a44e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a452:	6866      	ldr	r6, [r4, #4]
 800a454:	60a6      	str	r6, [r4, #8]
 800a456:	2e00      	cmp	r6, #0
 800a458:	bfa2      	ittt	ge
 800a45a:	6821      	ldrge	r1, [r4, #0]
 800a45c:	f021 0104 	bicge.w	r1, r1, #4
 800a460:	6021      	strge	r1, [r4, #0]
 800a462:	b90d      	cbnz	r5, 800a468 <_printf_i+0x110>
 800a464:	2e00      	cmp	r6, #0
 800a466:	d04b      	beq.n	800a500 <_printf_i+0x1a8>
 800a468:	4616      	mov	r6, r2
 800a46a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a46e:	fb03 5711 	mls	r7, r3, r1, r5
 800a472:	5dc7      	ldrb	r7, [r0, r7]
 800a474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a478:	462f      	mov	r7, r5
 800a47a:	42bb      	cmp	r3, r7
 800a47c:	460d      	mov	r5, r1
 800a47e:	d9f4      	bls.n	800a46a <_printf_i+0x112>
 800a480:	2b08      	cmp	r3, #8
 800a482:	d10b      	bne.n	800a49c <_printf_i+0x144>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	07df      	lsls	r7, r3, #31
 800a488:	d508      	bpl.n	800a49c <_printf_i+0x144>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	6861      	ldr	r1, [r4, #4]
 800a48e:	4299      	cmp	r1, r3
 800a490:	bfde      	ittt	le
 800a492:	2330      	movle	r3, #48	@ 0x30
 800a494:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a498:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a49c:	1b92      	subs	r2, r2, r6
 800a49e:	6122      	str	r2, [r4, #16]
 800a4a0:	f8cd a000 	str.w	sl, [sp]
 800a4a4:	464b      	mov	r3, r9
 800a4a6:	aa03      	add	r2, sp, #12
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f7ff fee6 	bl	800a27c <_printf_common>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d14a      	bne.n	800a54a <_printf_i+0x1f2>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	b004      	add	sp, #16
 800a4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	f043 0320 	orr.w	r3, r3, #32
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	4833      	ldr	r0, [pc, #204]	@ (800a594 <_printf_i+0x23c>)
 800a4c8:	2778      	movs	r7, #120	@ 0x78
 800a4ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	6831      	ldr	r1, [r6, #0]
 800a4d2:	061f      	lsls	r7, r3, #24
 800a4d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4d8:	d402      	bmi.n	800a4e0 <_printf_i+0x188>
 800a4da:	065f      	lsls	r7, r3, #25
 800a4dc:	bf48      	it	mi
 800a4de:	b2ad      	uxthmi	r5, r5
 800a4e0:	6031      	str	r1, [r6, #0]
 800a4e2:	07d9      	lsls	r1, r3, #31
 800a4e4:	bf44      	itt	mi
 800a4e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ea:	6023      	strmi	r3, [r4, #0]
 800a4ec:	b11d      	cbz	r5, 800a4f6 <_printf_i+0x19e>
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	e7ac      	b.n	800a44c <_printf_i+0xf4>
 800a4f2:	4827      	ldr	r0, [pc, #156]	@ (800a590 <_printf_i+0x238>)
 800a4f4:	e7e9      	b.n	800a4ca <_printf_i+0x172>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	f023 0320 	bic.w	r3, r3, #32
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	e7f6      	b.n	800a4ee <_printf_i+0x196>
 800a500:	4616      	mov	r6, r2
 800a502:	e7bd      	b.n	800a480 <_printf_i+0x128>
 800a504:	6833      	ldr	r3, [r6, #0]
 800a506:	6825      	ldr	r5, [r4, #0]
 800a508:	6961      	ldr	r1, [r4, #20]
 800a50a:	1d18      	adds	r0, r3, #4
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	062e      	lsls	r6, r5, #24
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	d501      	bpl.n	800a518 <_printf_i+0x1c0>
 800a514:	6019      	str	r1, [r3, #0]
 800a516:	e002      	b.n	800a51e <_printf_i+0x1c6>
 800a518:	0668      	lsls	r0, r5, #25
 800a51a:	d5fb      	bpl.n	800a514 <_printf_i+0x1bc>
 800a51c:	8019      	strh	r1, [r3, #0]
 800a51e:	2300      	movs	r3, #0
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	4616      	mov	r6, r2
 800a524:	e7bc      	b.n	800a4a0 <_printf_i+0x148>
 800a526:	6833      	ldr	r3, [r6, #0]
 800a528:	1d1a      	adds	r2, r3, #4
 800a52a:	6032      	str	r2, [r6, #0]
 800a52c:	681e      	ldr	r6, [r3, #0]
 800a52e:	6862      	ldr	r2, [r4, #4]
 800a530:	2100      	movs	r1, #0
 800a532:	4630      	mov	r0, r6
 800a534:	f7f5 fe64 	bl	8000200 <memchr>
 800a538:	b108      	cbz	r0, 800a53e <_printf_i+0x1e6>
 800a53a:	1b80      	subs	r0, r0, r6
 800a53c:	6060      	str	r0, [r4, #4]
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	2300      	movs	r3, #0
 800a544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a548:	e7aa      	b.n	800a4a0 <_printf_i+0x148>
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	4632      	mov	r2, r6
 800a54e:	4649      	mov	r1, r9
 800a550:	4640      	mov	r0, r8
 800a552:	47d0      	blx	sl
 800a554:	3001      	adds	r0, #1
 800a556:	d0ad      	beq.n	800a4b4 <_printf_i+0x15c>
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	079b      	lsls	r3, r3, #30
 800a55c:	d413      	bmi.n	800a586 <_printf_i+0x22e>
 800a55e:	68e0      	ldr	r0, [r4, #12]
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	4298      	cmp	r0, r3
 800a564:	bfb8      	it	lt
 800a566:	4618      	movlt	r0, r3
 800a568:	e7a6      	b.n	800a4b8 <_printf_i+0x160>
 800a56a:	2301      	movs	r3, #1
 800a56c:	4632      	mov	r2, r6
 800a56e:	4649      	mov	r1, r9
 800a570:	4640      	mov	r0, r8
 800a572:	47d0      	blx	sl
 800a574:	3001      	adds	r0, #1
 800a576:	d09d      	beq.n	800a4b4 <_printf_i+0x15c>
 800a578:	3501      	adds	r5, #1
 800a57a:	68e3      	ldr	r3, [r4, #12]
 800a57c:	9903      	ldr	r1, [sp, #12]
 800a57e:	1a5b      	subs	r3, r3, r1
 800a580:	42ab      	cmp	r3, r5
 800a582:	dcf2      	bgt.n	800a56a <_printf_i+0x212>
 800a584:	e7eb      	b.n	800a55e <_printf_i+0x206>
 800a586:	2500      	movs	r5, #0
 800a588:	f104 0619 	add.w	r6, r4, #25
 800a58c:	e7f5      	b.n	800a57a <_printf_i+0x222>
 800a58e:	bf00      	nop
 800a590:	0800b0f7 	.word	0x0800b0f7
 800a594:	0800b108 	.word	0x0800b108

0800a598 <__sflush_r>:
 800a598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a0:	0716      	lsls	r6, r2, #28
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	d454      	bmi.n	800a652 <__sflush_r+0xba>
 800a5a8:	684b      	ldr	r3, [r1, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dc02      	bgt.n	800a5b4 <__sflush_r+0x1c>
 800a5ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dd48      	ble.n	800a646 <__sflush_r+0xae>
 800a5b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	d045      	beq.n	800a646 <__sflush_r+0xae>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5c0:	682f      	ldr	r7, [r5, #0]
 800a5c2:	6a21      	ldr	r1, [r4, #32]
 800a5c4:	602b      	str	r3, [r5, #0]
 800a5c6:	d030      	beq.n	800a62a <__sflush_r+0x92>
 800a5c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	0759      	lsls	r1, r3, #29
 800a5ce:	d505      	bpl.n	800a5dc <__sflush_r+0x44>
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	1ad2      	subs	r2, r2, r3
 800a5d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5d6:	b10b      	cbz	r3, 800a5dc <__sflush_r+0x44>
 800a5d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5da:	1ad2      	subs	r2, r2, r3
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5e0:	6a21      	ldr	r1, [r4, #32]
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b0      	blx	r6
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	d106      	bne.n	800a5fa <__sflush_r+0x62>
 800a5ec:	6829      	ldr	r1, [r5, #0]
 800a5ee:	291d      	cmp	r1, #29
 800a5f0:	d82b      	bhi.n	800a64a <__sflush_r+0xb2>
 800a5f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a69c <__sflush_r+0x104>)
 800a5f4:	410a      	asrs	r2, r1
 800a5f6:	07d6      	lsls	r6, r2, #31
 800a5f8:	d427      	bmi.n	800a64a <__sflush_r+0xb2>
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	6062      	str	r2, [r4, #4]
 800a5fe:	04d9      	lsls	r1, r3, #19
 800a600:	6922      	ldr	r2, [r4, #16]
 800a602:	6022      	str	r2, [r4, #0]
 800a604:	d504      	bpl.n	800a610 <__sflush_r+0x78>
 800a606:	1c42      	adds	r2, r0, #1
 800a608:	d101      	bne.n	800a60e <__sflush_r+0x76>
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	b903      	cbnz	r3, 800a610 <__sflush_r+0x78>
 800a60e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a612:	602f      	str	r7, [r5, #0]
 800a614:	b1b9      	cbz	r1, 800a646 <__sflush_r+0xae>
 800a616:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a61a:	4299      	cmp	r1, r3
 800a61c:	d002      	beq.n	800a624 <__sflush_r+0x8c>
 800a61e:	4628      	mov	r0, r5
 800a620:	f7ff fc8a 	bl	8009f38 <_free_r>
 800a624:	2300      	movs	r3, #0
 800a626:	6363      	str	r3, [r4, #52]	@ 0x34
 800a628:	e00d      	b.n	800a646 <__sflush_r+0xae>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b0      	blx	r6
 800a630:	4602      	mov	r2, r0
 800a632:	1c50      	adds	r0, r2, #1
 800a634:	d1c9      	bne.n	800a5ca <__sflush_r+0x32>
 800a636:	682b      	ldr	r3, [r5, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0c6      	beq.n	800a5ca <__sflush_r+0x32>
 800a63c:	2b1d      	cmp	r3, #29
 800a63e:	d001      	beq.n	800a644 <__sflush_r+0xac>
 800a640:	2b16      	cmp	r3, #22
 800a642:	d11e      	bne.n	800a682 <__sflush_r+0xea>
 800a644:	602f      	str	r7, [r5, #0]
 800a646:	2000      	movs	r0, #0
 800a648:	e022      	b.n	800a690 <__sflush_r+0xf8>
 800a64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64e:	b21b      	sxth	r3, r3
 800a650:	e01b      	b.n	800a68a <__sflush_r+0xf2>
 800a652:	690f      	ldr	r7, [r1, #16]
 800a654:	2f00      	cmp	r7, #0
 800a656:	d0f6      	beq.n	800a646 <__sflush_r+0xae>
 800a658:	0793      	lsls	r3, r2, #30
 800a65a:	680e      	ldr	r6, [r1, #0]
 800a65c:	bf08      	it	eq
 800a65e:	694b      	ldreq	r3, [r1, #20]
 800a660:	600f      	str	r7, [r1, #0]
 800a662:	bf18      	it	ne
 800a664:	2300      	movne	r3, #0
 800a666:	eba6 0807 	sub.w	r8, r6, r7
 800a66a:	608b      	str	r3, [r1, #8]
 800a66c:	f1b8 0f00 	cmp.w	r8, #0
 800a670:	dde9      	ble.n	800a646 <__sflush_r+0xae>
 800a672:	6a21      	ldr	r1, [r4, #32]
 800a674:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a676:	4643      	mov	r3, r8
 800a678:	463a      	mov	r2, r7
 800a67a:	4628      	mov	r0, r5
 800a67c:	47b0      	blx	r6
 800a67e:	2800      	cmp	r0, #0
 800a680:	dc08      	bgt.n	800a694 <__sflush_r+0xfc>
 800a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	f04f 30ff 	mov.w	r0, #4294967295
 800a690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a694:	4407      	add	r7, r0
 800a696:	eba8 0800 	sub.w	r8, r8, r0
 800a69a:	e7e7      	b.n	800a66c <__sflush_r+0xd4>
 800a69c:	dfbffffe 	.word	0xdfbffffe

0800a6a0 <_fflush_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	690b      	ldr	r3, [r1, #16]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b913      	cbnz	r3, 800a6b0 <_fflush_r+0x10>
 800a6aa:	2500      	movs	r5, #0
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	b118      	cbz	r0, 800a6ba <_fflush_r+0x1a>
 800a6b2:	6a03      	ldr	r3, [r0, #32]
 800a6b4:	b90b      	cbnz	r3, 800a6ba <_fflush_r+0x1a>
 800a6b6:	f7ff fa91 	bl	8009bdc <__sinit>
 800a6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f3      	beq.n	800a6aa <_fflush_r+0xa>
 800a6c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6c4:	07d0      	lsls	r0, r2, #31
 800a6c6:	d404      	bmi.n	800a6d2 <_fflush_r+0x32>
 800a6c8:	0599      	lsls	r1, r3, #22
 800a6ca:	d402      	bmi.n	800a6d2 <_fflush_r+0x32>
 800a6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ce:	f7ff fc04 	bl	8009eda <__retarget_lock_acquire_recursive>
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	f7ff ff5f 	bl	800a598 <__sflush_r>
 800a6da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6dc:	07da      	lsls	r2, r3, #31
 800a6de:	4605      	mov	r5, r0
 800a6e0:	d4e4      	bmi.n	800a6ac <_fflush_r+0xc>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	059b      	lsls	r3, r3, #22
 800a6e6:	d4e1      	bmi.n	800a6ac <_fflush_r+0xc>
 800a6e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ea:	f7ff fbf7 	bl	8009edc <__retarget_lock_release_recursive>
 800a6ee:	e7dd      	b.n	800a6ac <_fflush_r+0xc>

0800a6f0 <fiprintf>:
 800a6f0:	b40e      	push	{r1, r2, r3}
 800a6f2:	b503      	push	{r0, r1, lr}
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	ab03      	add	r3, sp, #12
 800a6f8:	4805      	ldr	r0, [pc, #20]	@ (800a710 <fiprintf+0x20>)
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	6800      	ldr	r0, [r0, #0]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	f000 f87f 	bl	800a804 <_vfiprintf_r>
 800a706:	b002      	add	sp, #8
 800a708:	f85d eb04 	ldr.w	lr, [sp], #4
 800a70c:	b003      	add	sp, #12
 800a70e:	4770      	bx	lr
 800a710:	200000d4 	.word	0x200000d4

0800a714 <memmove>:
 800a714:	4288      	cmp	r0, r1
 800a716:	b510      	push	{r4, lr}
 800a718:	eb01 0402 	add.w	r4, r1, r2
 800a71c:	d902      	bls.n	800a724 <memmove+0x10>
 800a71e:	4284      	cmp	r4, r0
 800a720:	4623      	mov	r3, r4
 800a722:	d807      	bhi.n	800a734 <memmove+0x20>
 800a724:	1e43      	subs	r3, r0, #1
 800a726:	42a1      	cmp	r1, r4
 800a728:	d008      	beq.n	800a73c <memmove+0x28>
 800a72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a732:	e7f8      	b.n	800a726 <memmove+0x12>
 800a734:	4402      	add	r2, r0
 800a736:	4601      	mov	r1, r0
 800a738:	428a      	cmp	r2, r1
 800a73a:	d100      	bne.n	800a73e <memmove+0x2a>
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a746:	e7f7      	b.n	800a738 <memmove+0x24>

0800a748 <abort>:
 800a748:	b508      	push	{r3, lr}
 800a74a:	2006      	movs	r0, #6
 800a74c:	f000 fa2e 	bl	800abac <raise>
 800a750:	2001      	movs	r0, #1
 800a752:	f7f6 fdc5 	bl	80012e0 <_exit>

0800a756 <_realloc_r>:
 800a756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75a:	4680      	mov	r8, r0
 800a75c:	4615      	mov	r5, r2
 800a75e:	460c      	mov	r4, r1
 800a760:	b921      	cbnz	r1, 800a76c <_realloc_r+0x16>
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	4611      	mov	r1, r2
 800a768:	f7ff b89c 	b.w	80098a4 <_malloc_r>
 800a76c:	b92a      	cbnz	r2, 800a77a <_realloc_r+0x24>
 800a76e:	f7ff fbe3 	bl	8009f38 <_free_r>
 800a772:	2400      	movs	r4, #0
 800a774:	4620      	mov	r0, r4
 800a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77a:	f000 fa33 	bl	800abe4 <_malloc_usable_size_r>
 800a77e:	4285      	cmp	r5, r0
 800a780:	4606      	mov	r6, r0
 800a782:	d802      	bhi.n	800a78a <_realloc_r+0x34>
 800a784:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a788:	d8f4      	bhi.n	800a774 <_realloc_r+0x1e>
 800a78a:	4629      	mov	r1, r5
 800a78c:	4640      	mov	r0, r8
 800a78e:	f7ff f889 	bl	80098a4 <_malloc_r>
 800a792:	4607      	mov	r7, r0
 800a794:	2800      	cmp	r0, #0
 800a796:	d0ec      	beq.n	800a772 <_realloc_r+0x1c>
 800a798:	42b5      	cmp	r5, r6
 800a79a:	462a      	mov	r2, r5
 800a79c:	4621      	mov	r1, r4
 800a79e:	bf28      	it	cs
 800a7a0:	4632      	movcs	r2, r6
 800a7a2:	f7ff fb9c 	bl	8009ede <memcpy>
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	f7ff fbc5 	bl	8009f38 <_free_r>
 800a7ae:	463c      	mov	r4, r7
 800a7b0:	e7e0      	b.n	800a774 <_realloc_r+0x1e>

0800a7b2 <__sfputc_r>:
 800a7b2:	6893      	ldr	r3, [r2, #8]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	b410      	push	{r4}
 800a7ba:	6093      	str	r3, [r2, #8]
 800a7bc:	da08      	bge.n	800a7d0 <__sfputc_r+0x1e>
 800a7be:	6994      	ldr	r4, [r2, #24]
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	db01      	blt.n	800a7c8 <__sfputc_r+0x16>
 800a7c4:	290a      	cmp	r1, #10
 800a7c6:	d103      	bne.n	800a7d0 <__sfputc_r+0x1e>
 800a7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7cc:	f000 b932 	b.w	800aa34 <__swbuf_r>
 800a7d0:	6813      	ldr	r3, [r2, #0]
 800a7d2:	1c58      	adds	r0, r3, #1
 800a7d4:	6010      	str	r0, [r2, #0]
 800a7d6:	7019      	strb	r1, [r3, #0]
 800a7d8:	4608      	mov	r0, r1
 800a7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <__sfputs_r>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	4614      	mov	r4, r2
 800a7e8:	18d5      	adds	r5, r2, r3
 800a7ea:	42ac      	cmp	r4, r5
 800a7ec:	d101      	bne.n	800a7f2 <__sfputs_r+0x12>
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	e007      	b.n	800a802 <__sfputs_r+0x22>
 800a7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f6:	463a      	mov	r2, r7
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff ffda 	bl	800a7b2 <__sfputc_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d1f3      	bne.n	800a7ea <__sfputs_r+0xa>
 800a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a804 <_vfiprintf_r>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	460d      	mov	r5, r1
 800a80a:	b09d      	sub	sp, #116	@ 0x74
 800a80c:	4614      	mov	r4, r2
 800a80e:	4698      	mov	r8, r3
 800a810:	4606      	mov	r6, r0
 800a812:	b118      	cbz	r0, 800a81c <_vfiprintf_r+0x18>
 800a814:	6a03      	ldr	r3, [r0, #32]
 800a816:	b90b      	cbnz	r3, 800a81c <_vfiprintf_r+0x18>
 800a818:	f7ff f9e0 	bl	8009bdc <__sinit>
 800a81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a81e:	07d9      	lsls	r1, r3, #31
 800a820:	d405      	bmi.n	800a82e <_vfiprintf_r+0x2a>
 800a822:	89ab      	ldrh	r3, [r5, #12]
 800a824:	059a      	lsls	r2, r3, #22
 800a826:	d402      	bmi.n	800a82e <_vfiprintf_r+0x2a>
 800a828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a82a:	f7ff fb56 	bl	8009eda <__retarget_lock_acquire_recursive>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	071b      	lsls	r3, r3, #28
 800a832:	d501      	bpl.n	800a838 <_vfiprintf_r+0x34>
 800a834:	692b      	ldr	r3, [r5, #16]
 800a836:	b99b      	cbnz	r3, 800a860 <_vfiprintf_r+0x5c>
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 f938 	bl	800aab0 <__swsetup_r>
 800a840:	b170      	cbz	r0, 800a860 <_vfiprintf_r+0x5c>
 800a842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a844:	07dc      	lsls	r4, r3, #31
 800a846:	d504      	bpl.n	800a852 <_vfiprintf_r+0x4e>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	b01d      	add	sp, #116	@ 0x74
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a852:	89ab      	ldrh	r3, [r5, #12]
 800a854:	0598      	lsls	r0, r3, #22
 800a856:	d4f7      	bmi.n	800a848 <_vfiprintf_r+0x44>
 800a858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a85a:	f7ff fb3f 	bl	8009edc <__retarget_lock_release_recursive>
 800a85e:	e7f3      	b.n	800a848 <_vfiprintf_r+0x44>
 800a860:	2300      	movs	r3, #0
 800a862:	9309      	str	r3, [sp, #36]	@ 0x24
 800a864:	2320      	movs	r3, #32
 800a866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a86e:	2330      	movs	r3, #48	@ 0x30
 800a870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa20 <_vfiprintf_r+0x21c>
 800a874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a878:	f04f 0901 	mov.w	r9, #1
 800a87c:	4623      	mov	r3, r4
 800a87e:	469a      	mov	sl, r3
 800a880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a884:	b10a      	cbz	r2, 800a88a <_vfiprintf_r+0x86>
 800a886:	2a25      	cmp	r2, #37	@ 0x25
 800a888:	d1f9      	bne.n	800a87e <_vfiprintf_r+0x7a>
 800a88a:	ebba 0b04 	subs.w	fp, sl, r4
 800a88e:	d00b      	beq.n	800a8a8 <_vfiprintf_r+0xa4>
 800a890:	465b      	mov	r3, fp
 800a892:	4622      	mov	r2, r4
 800a894:	4629      	mov	r1, r5
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ffa2 	bl	800a7e0 <__sfputs_r>
 800a89c:	3001      	adds	r0, #1
 800a89e:	f000 80a7 	beq.w	800a9f0 <_vfiprintf_r+0x1ec>
 800a8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8a4:	445a      	add	r2, fp
 800a8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 809f 	beq.w	800a9f0 <_vfiprintf_r+0x1ec>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8bc:	f10a 0a01 	add.w	sl, sl, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8ca:	4654      	mov	r4, sl
 800a8cc:	2205      	movs	r2, #5
 800a8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d2:	4853      	ldr	r0, [pc, #332]	@ (800aa20 <_vfiprintf_r+0x21c>)
 800a8d4:	f7f5 fc94 	bl	8000200 <memchr>
 800a8d8:	9a04      	ldr	r2, [sp, #16]
 800a8da:	b9d8      	cbnz	r0, 800a914 <_vfiprintf_r+0x110>
 800a8dc:	06d1      	lsls	r1, r2, #27
 800a8de:	bf44      	itt	mi
 800a8e0:	2320      	movmi	r3, #32
 800a8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8e6:	0713      	lsls	r3, r2, #28
 800a8e8:	bf44      	itt	mi
 800a8ea:	232b      	movmi	r3, #43	@ 0x2b
 800a8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8f6:	d015      	beq.n	800a924 <_vfiprintf_r+0x120>
 800a8f8:	9a07      	ldr	r2, [sp, #28]
 800a8fa:	4654      	mov	r4, sl
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4621      	mov	r1, r4
 800a904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a908:	3b30      	subs	r3, #48	@ 0x30
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d94b      	bls.n	800a9a6 <_vfiprintf_r+0x1a2>
 800a90e:	b1b0      	cbz	r0, 800a93e <_vfiprintf_r+0x13a>
 800a910:	9207      	str	r2, [sp, #28]
 800a912:	e014      	b.n	800a93e <_vfiprintf_r+0x13a>
 800a914:	eba0 0308 	sub.w	r3, r0, r8
 800a918:	fa09 f303 	lsl.w	r3, r9, r3
 800a91c:	4313      	orrs	r3, r2
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	46a2      	mov	sl, r4
 800a922:	e7d2      	b.n	800a8ca <_vfiprintf_r+0xc6>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	1d19      	adds	r1, r3, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfbb      	ittet	lt
 800a930:	425b      	neglt	r3, r3
 800a932:	f042 0202 	orrlt.w	r2, r2, #2
 800a936:	9307      	strge	r3, [sp, #28]
 800a938:	9307      	strlt	r3, [sp, #28]
 800a93a:	bfb8      	it	lt
 800a93c:	9204      	strlt	r2, [sp, #16]
 800a93e:	7823      	ldrb	r3, [r4, #0]
 800a940:	2b2e      	cmp	r3, #46	@ 0x2e
 800a942:	d10a      	bne.n	800a95a <_vfiprintf_r+0x156>
 800a944:	7863      	ldrb	r3, [r4, #1]
 800a946:	2b2a      	cmp	r3, #42	@ 0x2a
 800a948:	d132      	bne.n	800a9b0 <_vfiprintf_r+0x1ac>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	1d1a      	adds	r2, r3, #4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	9203      	str	r2, [sp, #12]
 800a952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a956:	3402      	adds	r4, #2
 800a958:	9305      	str	r3, [sp, #20]
 800a95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa30 <_vfiprintf_r+0x22c>
 800a95e:	7821      	ldrb	r1, [r4, #0]
 800a960:	2203      	movs	r2, #3
 800a962:	4650      	mov	r0, sl
 800a964:	f7f5 fc4c 	bl	8000200 <memchr>
 800a968:	b138      	cbz	r0, 800a97a <_vfiprintf_r+0x176>
 800a96a:	9b04      	ldr	r3, [sp, #16]
 800a96c:	eba0 000a 	sub.w	r0, r0, sl
 800a970:	2240      	movs	r2, #64	@ 0x40
 800a972:	4082      	lsls	r2, r0
 800a974:	4313      	orrs	r3, r2
 800a976:	3401      	adds	r4, #1
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97e:	4829      	ldr	r0, [pc, #164]	@ (800aa24 <_vfiprintf_r+0x220>)
 800a980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a984:	2206      	movs	r2, #6
 800a986:	f7f5 fc3b 	bl	8000200 <memchr>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d03f      	beq.n	800aa0e <_vfiprintf_r+0x20a>
 800a98e:	4b26      	ldr	r3, [pc, #152]	@ (800aa28 <_vfiprintf_r+0x224>)
 800a990:	bb1b      	cbnz	r3, 800a9da <_vfiprintf_r+0x1d6>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	3307      	adds	r3, #7
 800a996:	f023 0307 	bic.w	r3, r3, #7
 800a99a:	3308      	adds	r3, #8
 800a99c:	9303      	str	r3, [sp, #12]
 800a99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a0:	443b      	add	r3, r7
 800a9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a4:	e76a      	b.n	800a87c <_vfiprintf_r+0x78>
 800a9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	e7a8      	b.n	800a902 <_vfiprintf_r+0xfe>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	3401      	adds	r4, #1
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	f04f 0c0a 	mov.w	ip, #10
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c2:	3a30      	subs	r2, #48	@ 0x30
 800a9c4:	2a09      	cmp	r2, #9
 800a9c6:	d903      	bls.n	800a9d0 <_vfiprintf_r+0x1cc>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0c6      	beq.n	800a95a <_vfiprintf_r+0x156>
 800a9cc:	9105      	str	r1, [sp, #20]
 800a9ce:	e7c4      	b.n	800a95a <_vfiprintf_r+0x156>
 800a9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e7f0      	b.n	800a9bc <_vfiprintf_r+0x1b8>
 800a9da:	ab03      	add	r3, sp, #12
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	462a      	mov	r2, r5
 800a9e0:	4b12      	ldr	r3, [pc, #72]	@ (800aa2c <_vfiprintf_r+0x228>)
 800a9e2:	a904      	add	r1, sp, #16
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f3af 8000 	nop.w
 800a9ea:	4607      	mov	r7, r0
 800a9ec:	1c78      	adds	r0, r7, #1
 800a9ee:	d1d6      	bne.n	800a99e <_vfiprintf_r+0x19a>
 800a9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_vfiprintf_r+0x1fe>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_vfiprintf_r+0x1fe>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fe:	f7ff fa6d 	bl	8009edc <__retarget_lock_release_recursive>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	065b      	lsls	r3, r3, #25
 800aa06:	f53f af1f 	bmi.w	800a848 <_vfiprintf_r+0x44>
 800aa0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa0c:	e71e      	b.n	800a84c <_vfiprintf_r+0x48>
 800aa0e:	ab03      	add	r3, sp, #12
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	462a      	mov	r2, r5
 800aa14:	4b05      	ldr	r3, [pc, #20]	@ (800aa2c <_vfiprintf_r+0x228>)
 800aa16:	a904      	add	r1, sp, #16
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff fc9d 	bl	800a358 <_printf_i>
 800aa1e:	e7e4      	b.n	800a9ea <_vfiprintf_r+0x1e6>
 800aa20:	0800b0e6 	.word	0x0800b0e6
 800aa24:	0800b0f0 	.word	0x0800b0f0
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	0800a7e1 	.word	0x0800a7e1
 800aa30:	0800b0ec 	.word	0x0800b0ec

0800aa34 <__swbuf_r>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	460e      	mov	r6, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	b118      	cbz	r0, 800aa46 <__swbuf_r+0x12>
 800aa3e:	6a03      	ldr	r3, [r0, #32]
 800aa40:	b90b      	cbnz	r3, 800aa46 <__swbuf_r+0x12>
 800aa42:	f7ff f8cb 	bl	8009bdc <__sinit>
 800aa46:	69a3      	ldr	r3, [r4, #24]
 800aa48:	60a3      	str	r3, [r4, #8]
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	071a      	lsls	r2, r3, #28
 800aa4e:	d501      	bpl.n	800aa54 <__swbuf_r+0x20>
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	b943      	cbnz	r3, 800aa66 <__swbuf_r+0x32>
 800aa54:	4621      	mov	r1, r4
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 f82a 	bl	800aab0 <__swsetup_r>
 800aa5c:	b118      	cbz	r0, 800aa66 <__swbuf_r+0x32>
 800aa5e:	f04f 37ff 	mov.w	r7, #4294967295
 800aa62:	4638      	mov	r0, r7
 800aa64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	6922      	ldr	r2, [r4, #16]
 800aa6a:	1a98      	subs	r0, r3, r2
 800aa6c:	6963      	ldr	r3, [r4, #20]
 800aa6e:	b2f6      	uxtb	r6, r6
 800aa70:	4283      	cmp	r3, r0
 800aa72:	4637      	mov	r7, r6
 800aa74:	dc05      	bgt.n	800aa82 <__swbuf_r+0x4e>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7ff fe11 	bl	800a6a0 <_fflush_r>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d1ed      	bne.n	800aa5e <__swbuf_r+0x2a>
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	60a3      	str	r3, [r4, #8]
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	6022      	str	r2, [r4, #0]
 800aa8e:	701e      	strb	r6, [r3, #0]
 800aa90:	6962      	ldr	r2, [r4, #20]
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d004      	beq.n	800aaa2 <__swbuf_r+0x6e>
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	07db      	lsls	r3, r3, #31
 800aa9c:	d5e1      	bpl.n	800aa62 <__swbuf_r+0x2e>
 800aa9e:	2e0a      	cmp	r6, #10
 800aaa0:	d1df      	bne.n	800aa62 <__swbuf_r+0x2e>
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f7ff fdfb 	bl	800a6a0 <_fflush_r>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d0d9      	beq.n	800aa62 <__swbuf_r+0x2e>
 800aaae:	e7d6      	b.n	800aa5e <__swbuf_r+0x2a>

0800aab0 <__swsetup_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4b29      	ldr	r3, [pc, #164]	@ (800ab58 <__swsetup_r+0xa8>)
 800aab4:	4605      	mov	r5, r0
 800aab6:	6818      	ldr	r0, [r3, #0]
 800aab8:	460c      	mov	r4, r1
 800aaba:	b118      	cbz	r0, 800aac4 <__swsetup_r+0x14>
 800aabc:	6a03      	ldr	r3, [r0, #32]
 800aabe:	b90b      	cbnz	r3, 800aac4 <__swsetup_r+0x14>
 800aac0:	f7ff f88c 	bl	8009bdc <__sinit>
 800aac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac8:	0719      	lsls	r1, r3, #28
 800aaca:	d422      	bmi.n	800ab12 <__swsetup_r+0x62>
 800aacc:	06da      	lsls	r2, r3, #27
 800aace:	d407      	bmi.n	800aae0 <__swsetup_r+0x30>
 800aad0:	2209      	movs	r2, #9
 800aad2:	602a      	str	r2, [r5, #0]
 800aad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	f04f 30ff 	mov.w	r0, #4294967295
 800aade:	e033      	b.n	800ab48 <__swsetup_r+0x98>
 800aae0:	0758      	lsls	r0, r3, #29
 800aae2:	d512      	bpl.n	800ab0a <__swsetup_r+0x5a>
 800aae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aae6:	b141      	cbz	r1, 800aafa <__swsetup_r+0x4a>
 800aae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaec:	4299      	cmp	r1, r3
 800aaee:	d002      	beq.n	800aaf6 <__swsetup_r+0x46>
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f7ff fa21 	bl	8009f38 <_free_r>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	2300      	movs	r3, #0
 800ab04:	6063      	str	r3, [r4, #4]
 800ab06:	6923      	ldr	r3, [r4, #16]
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f043 0308 	orr.w	r3, r3, #8
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	b94b      	cbnz	r3, 800ab2a <__swsetup_r+0x7a>
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab20:	d003      	beq.n	800ab2a <__swsetup_r+0x7a>
 800ab22:	4621      	mov	r1, r4
 800ab24:	4628      	mov	r0, r5
 800ab26:	f000 f88b 	bl	800ac40 <__smakebuf_r>
 800ab2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2e:	f013 0201 	ands.w	r2, r3, #1
 800ab32:	d00a      	beq.n	800ab4a <__swsetup_r+0x9a>
 800ab34:	2200      	movs	r2, #0
 800ab36:	60a2      	str	r2, [r4, #8]
 800ab38:	6962      	ldr	r2, [r4, #20]
 800ab3a:	4252      	negs	r2, r2
 800ab3c:	61a2      	str	r2, [r4, #24]
 800ab3e:	6922      	ldr	r2, [r4, #16]
 800ab40:	b942      	cbnz	r2, 800ab54 <__swsetup_r+0xa4>
 800ab42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab46:	d1c5      	bne.n	800aad4 <__swsetup_r+0x24>
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	0799      	lsls	r1, r3, #30
 800ab4c:	bf58      	it	pl
 800ab4e:	6962      	ldrpl	r2, [r4, #20]
 800ab50:	60a2      	str	r2, [r4, #8]
 800ab52:	e7f4      	b.n	800ab3e <__swsetup_r+0x8e>
 800ab54:	2000      	movs	r0, #0
 800ab56:	e7f7      	b.n	800ab48 <__swsetup_r+0x98>
 800ab58:	200000d4 	.word	0x200000d4

0800ab5c <_raise_r>:
 800ab5c:	291f      	cmp	r1, #31
 800ab5e:	b538      	push	{r3, r4, r5, lr}
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	d904      	bls.n	800ab70 <_raise_r+0x14>
 800ab66:	2316      	movs	r3, #22
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab72:	b112      	cbz	r2, 800ab7a <_raise_r+0x1e>
 800ab74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab78:	b94b      	cbnz	r3, 800ab8e <_raise_r+0x32>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f000 f830 	bl	800abe0 <_getpid_r>
 800ab80:	4622      	mov	r2, r4
 800ab82:	4601      	mov	r1, r0
 800ab84:	4628      	mov	r0, r5
 800ab86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab8a:	f000 b817 	b.w	800abbc <_kill_r>
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d00a      	beq.n	800aba8 <_raise_r+0x4c>
 800ab92:	1c59      	adds	r1, r3, #1
 800ab94:	d103      	bne.n	800ab9e <_raise_r+0x42>
 800ab96:	2316      	movs	r3, #22
 800ab98:	6003      	str	r3, [r0, #0]
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	e7e7      	b.n	800ab6e <_raise_r+0x12>
 800ab9e:	2100      	movs	r1, #0
 800aba0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aba4:	4620      	mov	r0, r4
 800aba6:	4798      	blx	r3
 800aba8:	2000      	movs	r0, #0
 800abaa:	e7e0      	b.n	800ab6e <_raise_r+0x12>

0800abac <raise>:
 800abac:	4b02      	ldr	r3, [pc, #8]	@ (800abb8 <raise+0xc>)
 800abae:	4601      	mov	r1, r0
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	f7ff bfd3 	b.w	800ab5c <_raise_r>
 800abb6:	bf00      	nop
 800abb8:	200000d4 	.word	0x200000d4

0800abbc <_kill_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	@ (800abdc <_kill_r+0x20>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	4611      	mov	r1, r2
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	f7f6 fb79 	bl	80012c0 <_kill>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d102      	bne.n	800abd8 <_kill_r+0x1c>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b103      	cbz	r3, 800abd8 <_kill_r+0x1c>
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	bf00      	nop
 800abdc:	20001d90 	.word	0x20001d90

0800abe0 <_getpid_r>:
 800abe0:	f7f6 bb66 	b.w	80012b0 <_getpid>

0800abe4 <_malloc_usable_size_r>:
 800abe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe8:	1f18      	subs	r0, r3, #4
 800abea:	2b00      	cmp	r3, #0
 800abec:	bfbc      	itt	lt
 800abee:	580b      	ldrlt	r3, [r1, r0]
 800abf0:	18c0      	addlt	r0, r0, r3
 800abf2:	4770      	bx	lr

0800abf4 <__swhatbuf_r>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	460c      	mov	r4, r1
 800abf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abfc:	2900      	cmp	r1, #0
 800abfe:	b096      	sub	sp, #88	@ 0x58
 800ac00:	4615      	mov	r5, r2
 800ac02:	461e      	mov	r6, r3
 800ac04:	da0d      	bge.n	800ac22 <__swhatbuf_r+0x2e>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac0c:	f04f 0100 	mov.w	r1, #0
 800ac10:	bf14      	ite	ne
 800ac12:	2340      	movne	r3, #64	@ 0x40
 800ac14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac18:	2000      	movs	r0, #0
 800ac1a:	6031      	str	r1, [r6, #0]
 800ac1c:	602b      	str	r3, [r5, #0]
 800ac1e:	b016      	add	sp, #88	@ 0x58
 800ac20:	bd70      	pop	{r4, r5, r6, pc}
 800ac22:	466a      	mov	r2, sp
 800ac24:	f000 f848 	bl	800acb8 <_fstat_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	dbec      	blt.n	800ac06 <__swhatbuf_r+0x12>
 800ac2c:	9901      	ldr	r1, [sp, #4]
 800ac2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac36:	4259      	negs	r1, r3
 800ac38:	4159      	adcs	r1, r3
 800ac3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac3e:	e7eb      	b.n	800ac18 <__swhatbuf_r+0x24>

0800ac40 <__smakebuf_r>:
 800ac40:	898b      	ldrh	r3, [r1, #12]
 800ac42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac44:	079d      	lsls	r5, r3, #30
 800ac46:	4606      	mov	r6, r0
 800ac48:	460c      	mov	r4, r1
 800ac4a:	d507      	bpl.n	800ac5c <__smakebuf_r+0x1c>
 800ac4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	6123      	str	r3, [r4, #16]
 800ac54:	2301      	movs	r3, #1
 800ac56:	6163      	str	r3, [r4, #20]
 800ac58:	b003      	add	sp, #12
 800ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5c:	ab01      	add	r3, sp, #4
 800ac5e:	466a      	mov	r2, sp
 800ac60:	f7ff ffc8 	bl	800abf4 <__swhatbuf_r>
 800ac64:	9f00      	ldr	r7, [sp, #0]
 800ac66:	4605      	mov	r5, r0
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7fe fe1a 	bl	80098a4 <_malloc_r>
 800ac70:	b948      	cbnz	r0, 800ac86 <__smakebuf_r+0x46>
 800ac72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac76:	059a      	lsls	r2, r3, #22
 800ac78:	d4ee      	bmi.n	800ac58 <__smakebuf_r+0x18>
 800ac7a:	f023 0303 	bic.w	r3, r3, #3
 800ac7e:	f043 0302 	orr.w	r3, r3, #2
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	e7e2      	b.n	800ac4c <__smakebuf_r+0xc>
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	6020      	str	r0, [r4, #0]
 800ac8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac96:	b15b      	cbz	r3, 800acb0 <__smakebuf_r+0x70>
 800ac98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f000 f81d 	bl	800acdc <_isatty_r>
 800aca2:	b128      	cbz	r0, 800acb0 <__smakebuf_r+0x70>
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	431d      	orrs	r5, r3
 800acb4:	81a5      	strh	r5, [r4, #12]
 800acb6:	e7cf      	b.n	800ac58 <__smakebuf_r+0x18>

0800acb8 <_fstat_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4d07      	ldr	r5, [pc, #28]	@ (800acd8 <_fstat_r+0x20>)
 800acbc:	2300      	movs	r3, #0
 800acbe:	4604      	mov	r4, r0
 800acc0:	4608      	mov	r0, r1
 800acc2:	4611      	mov	r1, r2
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	f7f6 fb5b 	bl	8001380 <_fstat>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	d102      	bne.n	800acd4 <_fstat_r+0x1c>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	b103      	cbz	r3, 800acd4 <_fstat_r+0x1c>
 800acd2:	6023      	str	r3, [r4, #0]
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	bf00      	nop
 800acd8:	20001d90 	.word	0x20001d90

0800acdc <_isatty_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4d06      	ldr	r5, [pc, #24]	@ (800acf8 <_isatty_r+0x1c>)
 800ace0:	2300      	movs	r3, #0
 800ace2:	4604      	mov	r4, r0
 800ace4:	4608      	mov	r0, r1
 800ace6:	602b      	str	r3, [r5, #0]
 800ace8:	f7f6 fb5a 	bl	80013a0 <_isatty>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_isatty_r+0x1a>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_isatty_r+0x1a>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20001d90 	.word	0x20001d90

0800acfc <_init>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr

0800ad08 <_fini>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr
