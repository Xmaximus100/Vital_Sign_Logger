
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800e860  0800e860  0000f860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f06c  0800f06c  000112fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f06c  0800f06c  0001006c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f074  0800f074  000112fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f074  0800f074  00010074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f078  0800f078  00010078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  0800f07c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031c0  20000300  0800f378  00011300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200034c0  0800f378  000114c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002596e  00000000  00000000  0001132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059bb  00000000  00000000  00036c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed8  00000000  00000000  0003c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000179e  00000000  00000000  0003e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002da6c  00000000  00000000  0003fcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c0c  00000000  00000000  0006d73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105715  00000000  00000000  00095346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019aa5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091e0  00000000  00000000  0019aaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  001a3c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e844 	.word	0x0800e844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	0800e844 	.word	0x0800e844

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

HAL_StatusTypeDef Initialize_Delay()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <Initialize_Delay+0x10>)
 8000efe:	f005 fd89 	bl	8006a14 <HAL_TIM_Base_Start>
 8000f02:	4603      	mov	r3, r0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000490 	.word	0x20000490

08000f0c <delay_us>:

void delay_us(uint32_t us)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	taskENTER_CRITICAL();
 8000f14:	f00a fa00 	bl	800b318 <vPortEnterCritical>
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <delay_us+0x44>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000f24:	e003      	b.n	8000f2e <delay_us+0x22>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <delay_us+0x44>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2c:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bfb8      	it	lt
 8000f38:	425b      	neglt	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d8f1      	bhi.n	8000f26 <delay_us+0x1a>
	}
	taskEXIT_CRITICAL();
 8000f42:	f00a fa1b 	bl	800b37c <vPortExitCritical>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000

08000f54 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f002 fc11 	bl	8003784 <HAL_Delay>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_DMA_Init+0x2c>)
 8000f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <MX_DMA_Init+0x2c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_DMA_Init+0x2c>)
 8000f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fa0:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <MX_FREERTOS_Init+0x48>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <MX_FREERTOS_Init+0x4c>)
 8000fa6:	f007 fc3f 	bl	8008828 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <MX_FREERTOS_Init+0x50>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_FREERTOS_Init+0x54>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <MX_FREERTOS_Init+0x58>)
 8000fb6:	f007 fc37 	bl	8008828 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <MX_FREERTOS_Init+0x5c>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <MX_FREERTOS_Init+0x60>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	480e      	ldr	r0, [pc, #56]	@ (8001000 <MX_FREERTOS_Init+0x64>)
 8000fc6:	f007 fc2f 	bl	8008828 <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <MX_FREERTOS_Init+0x68>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of at_cmds_handler */
  at_cmds_handlerHandle = osThreadNew(StartATCmds, NULL, &at_cmds_handler_attributes);
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <MX_FREERTOS_Init+0x6c>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480d      	ldr	r0, [pc, #52]	@ (800100c <MX_FREERTOS_Init+0x70>)
 8000fd6:	f007 fc27 	bl	8008828 <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <MX_FREERTOS_Init+0x74>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	0800ebc8 	.word	0x0800ebc8
 8000fe8:	08001015 	.word	0x08001015
 8000fec:	20000368 	.word	0x20000368
 8000ff0:	0800ebec 	.word	0x0800ebec
 8000ff4:	08001025 	.word	0x08001025
 8000ff8:	2000036c 	.word	0x2000036c
 8000ffc:	0800ec10 	.word	0x0800ec10
 8001000:	0800129d 	.word	0x0800129d
 8001004:	20000370 	.word	0x20000370
 8001008:	0800ec34 	.word	0x0800ec34
 800100c:	080012ad 	.word	0x080012ad
 8001010:	20000374 	.word	0x20000374

08001014 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
//		len = sprintf(tmp_buf, "TestDMA\n\r");
//		HAL_UART_Transmit_DMA(&huart2, tmp_buf, len); //To prevent receiving constant interrupts after sending
														//simply i
		osDelay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f007 fda2 	bl	8008b66 <osDelay>
 8001022:	e7fb      	b.n	800101c <StartDefaultTask+0x8>

08001024 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8001024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001028:	b09e      	sub	sp, #120	@ 0x78
 800102a:	af06      	add	r7, sp, #24
 800102c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
	ad7676_init(&ad7676_data);
 800102e:	4893      	ldr	r0, [pc, #588]	@ (800127c <StartADC+0x258>)
 8001030:	f001 f934 	bl	800229c <ad7676_init>
  /* Infinite loop */
	for(;;)
	{
	//	  UARTLog("Hello World\n\r");
//		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever); //TODO prepare collect_data flag
		if(collect_data){
 8001034:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <StartADC+0x25c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0fb      	beq.n	8001034 <StartADC+0x10>
			if(busy_dropped){
 800103c:	4b91      	ldr	r3, [pc, #580]	@ (8001284 <StartADC+0x260>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f7      	beq.n	8001034 <StartADC+0x10>
				ad7676_read_one_sample();
 8001044:	f001 f97e 	bl	8002344 <ad7676_read_one_sample>
				received_samples++;
 8001048:	4b8f      	ldr	r3, [pc, #572]	@ (8001288 <StartADC+0x264>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b8d      	ldr	r3, [pc, #564]	@ (8001288 <StartADC+0x264>)
 8001052:	801a      	strh	r2, [r3, #0]
				if(received_samples<awaited_samples){
 8001054:	4b8c      	ldr	r3, [pc, #560]	@ (8001288 <StartADC+0x264>)
 8001056:	881a      	ldrh	r2, [r3, #0]
 8001058:	4b8c      	ldr	r3, [pc, #560]	@ (800128c <StartADC+0x268>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d202      	bcs.n	8001066 <StartADC+0x42>
					ad7676_start_conversion();
 8001060:	f001 f9fa 	bl	8002458 <ad7676_start_conversion>
 8001064:	e105      	b.n	8001272 <StartADC+0x24e>
				}
				else if(received_samples == awaited_samples){
 8001066:	4b88      	ldr	r3, [pc, #544]	@ (8001288 <StartADC+0x264>)
 8001068:	881a      	ldrh	r2, [r3, #0]
 800106a:	4b88      	ldr	r3, [pc, #544]	@ (800128c <StartADC+0x268>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	f040 80ff 	bne.w	8001272 <StartADC+0x24e>
					char buffer[64];
					int v1, v2, v3, v4;
					uint16_t tmp_ptr = ad7676_data->data_ptr - awaited_samples;
 8001074:	4b81      	ldr	r3, [pc, #516]	@ (800127c <StartADC+0x258>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f8b3 2644 	ldrh.w	r2, [r3, #1604]	@ 0x644
 800107c:	4b83      	ldr	r3, [pc, #524]	@ (800128c <StartADC+0x268>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
					collect_data = false;
 8001086:	4b7e      	ldr	r3, [pc, #504]	@ (8001280 <StartADC+0x25c>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
					received_samples = 0;
 800108c:	4b7e      	ldr	r3, [pc, #504]	@ (8001288 <StartADC+0x264>)
 800108e:	2200      	movs	r2, #0
 8001090:	801a      	strh	r2, [r3, #0]
					sprintf(buffer, "Collected samples:%d\n\rCHANNEL1 CHANNEL2 CHANNEL3 CHANNEL4\n\r", awaited_samples);
 8001092:	4b7e      	ldr	r3, [pc, #504]	@ (800128c <StartADC+0x268>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	497c      	ldr	r1, [pc, #496]	@ (8001290 <StartADC+0x26c>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f00b faba 	bl	800c618 <siprintf>
					UARTLog(buffer);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 f869 	bl	8002180 <UARTLog>
					for(uint16_t i=0; i<awaited_samples; i++){
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80010b4:	e0d6      	b.n	8001264 <StartADC+0x240>
						v1 = ad7676_calculate_output(ad7676_data->data_buf[0][(tmp_ptr + i)%ad7676_data->data_ptr_max]);
 80010b6:	4b71      	ldr	r3, [pc, #452]	@ (800127c <StartADC+0x258>)
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80010be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80010c2:	4413      	add	r3, r2
 80010c4:	4a6d      	ldr	r2, [pc, #436]	@ (800127c <StartADC+0x258>)
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 80010cc:	fb93 f0f2 	sdiv	r0, r3, r2
 80010d0:	fb00 f202 	mul.w	r2, r0, r2
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	440b      	add	r3, r1
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 f919 	bl	8002314 <ad7676_calculate_output>
 80010e2:	65b8      	str	r0, [r7, #88]	@ 0x58
						v2 = ad7676_calculate_output(ad7676_data->data_buf[1][(tmp_ptr + i)%ad7676_data->data_ptr_max]);
 80010e4:	4b65      	ldr	r3, [pc, #404]	@ (800127c <StartADC+0x258>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80010ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80010f0:	4413      	add	r3, r2
 80010f2:	4a62      	ldr	r2, [pc, #392]	@ (800127c <StartADC+0x258>)
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 80010fa:	fb93 f0f2 	sdiv	r0, r3, r2
 80010fe:	fb00 f202 	mul.w	r2, r0, r2
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	33c8      	adds	r3, #200	@ 0xc8
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	440b      	add	r3, r1
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	f001 f901 	bl	8002314 <ad7676_calculate_output>
 8001112:	6578      	str	r0, [r7, #84]	@ 0x54
						v3 = ad7676_calculate_output(ad7676_data->data_buf[2][(tmp_ptr + i)%ad7676_data->data_ptr_max]);
 8001114:	4b59      	ldr	r3, [pc, #356]	@ (800127c <StartADC+0x258>)
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800111c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001120:	4413      	add	r3, r2
 8001122:	4a56      	ldr	r2, [pc, #344]	@ (800127c <StartADC+0x258>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 800112a:	fb93 f0f2 	sdiv	r0, r3, r2
 800112e:	fb00 f202 	mul.w	r2, r0, r2
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	440b      	add	r3, r1
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f8e8 	bl	8002314 <ad7676_calculate_output>
 8001144:	6538      	str	r0, [r7, #80]	@ 0x50
						v4 = ad7676_calculate_output(ad7676_data->data_buf[3][(tmp_ptr + i)%ad7676_data->data_ptr_max]);
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <StartADC+0x258>)
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800114e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001152:	4413      	add	r3, r2
 8001154:	4a49      	ldr	r2, [pc, #292]	@ (800127c <StartADC+0x258>)
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 800115c:	fb93 f0f2 	sdiv	r0, r3, r2
 8001160:	fb00 f202 	mul.w	r2, r0, r2
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	440b      	add	r3, r1
 800116e:	889b      	ldrh	r3, [r3, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f8cf 	bl	8002314 <ad7676_calculate_output>
 8001176:	64f8      	str	r0, [r7, #76]	@ 0x4c
						sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 8001178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800117a:	4a46      	ldr	r2, [pc, #280]	@ (8001294 <StartADC+0x270>)
 800117c:	fb82 1203 	smull	r1, r2, r2, r3
 8001180:	1192      	asrs	r2, r2, #6
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	eba2 0e03 	sub.w	lr, r2, r3
								v1/1000,abs(v1%1000),
 8001188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800118a:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <StartADC+0x270>)
 800118c:	fb83 1302 	smull	r1, r3, r3, r2
 8001190:	1199      	asrs	r1, r3, #6
 8001192:	17d3      	asrs	r3, r2, #31
 8001194:	1acb      	subs	r3, r1, r3
 8001196:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	1ad3      	subs	r3, r2, r3
						sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 80011a0:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
 80011a4:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
 80011a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001294 <StartADC+0x270>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	1192      	asrs	r2, r2, #6
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad1      	subs	r1, r2, r3
								v2/1000,abs(v2%1000),
 80011b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011b8:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <StartADC+0x270>)
 80011ba:	fb83 0302 	smull	r0, r3, r3, r2
 80011be:	1198      	asrs	r0, r3, #6
 80011c0:	17d3      	asrs	r3, r2, #31
 80011c2:	1ac3      	subs	r3, r0, r3
 80011c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c8:	fb00 f303 	mul.w	r3, r0, r3
 80011cc:	1ad3      	subs	r3, r2, r3
						sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 80011ce:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80011d2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80011d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001294 <StartADC+0x270>)
 80011da:	fb82 4203 	smull	r4, r2, r2, r3
 80011de:	1192      	asrs	r2, r2, #6
 80011e0:	17db      	asrs	r3, r3, #31
 80011e2:	1ad4      	subs	r4, r2, r3
								v3/1000,abs(v3%1000),
 80011e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <StartADC+0x270>)
 80011e8:	fb83 5302 	smull	r5, r3, r3, r2
 80011ec:	119d      	asrs	r5, r3, #6
 80011ee:	17d3      	asrs	r3, r2, #31
 80011f0:	1aeb      	subs	r3, r5, r3
 80011f2:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 80011f6:	fb05 f303 	mul.w	r3, r5, r3
 80011fa:	1ad3      	subs	r3, r2, r3
						sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 80011fc:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8001200:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 8001204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <StartADC+0x270>)
 8001208:	fb82 6203 	smull	r6, r2, r2, r3
 800120c:	1192      	asrs	r2, r2, #6
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad6      	subs	r6, r2, r3
								v4/1000,abs(v4%1000)
 8001212:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <StartADC+0x270>)
 8001216:	fb83 c302 	smull	ip, r3, r3, r2
 800121a:	ea4f 1ca3 	mov.w	ip, r3, asr #6
 800121e:	17d3      	asrs	r3, r2, #31
 8001220:	ebac 0303 	sub.w	r3, ip, r3
 8001224:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 8001228:	fb0c f303 	mul.w	r3, ip, r3
 800122c:	1ad3      	subs	r3, r2, r3
						sprintf(buffer, "%d.%dV %d.%dV %d.%dV %d.%dV\n\r",
 800122e:	2b00      	cmp	r3, #0
 8001230:	bfb8      	it	lt
 8001232:	425b      	neglt	r3, r3
 8001234:	f107 0c0c 	add.w	ip, r7, #12
 8001238:	9305      	str	r3, [sp, #20]
 800123a:	9604      	str	r6, [sp, #16]
 800123c:	9503      	str	r5, [sp, #12]
 800123e:	9402      	str	r4, [sp, #8]
 8001240:	9001      	str	r0, [sp, #4]
 8001242:	9100      	str	r1, [sp, #0]
 8001244:	4643      	mov	r3, r8
 8001246:	4672      	mov	r2, lr
 8001248:	4913      	ldr	r1, [pc, #76]	@ (8001298 <StartADC+0x274>)
 800124a:	4660      	mov	r0, ip
 800124c:	f00b f9e4 	bl	800c618 <siprintf>
								);
						UARTLog(buffer);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4618      	mov	r0, r3
 8001256:	f000 ff93 	bl	8002180 <UARTLog>
					for(uint16_t i=0; i<awaited_samples; i++){
 800125a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800125e:	3301      	adds	r3, #1
 8001260:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <StartADC+0x268>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800126c:	429a      	cmp	r2, r3
 800126e:	f4ff af22 	bcc.w	80010b6 <StartADC+0x92>
					}
				}
				busy_dropped = false;
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <StartADC+0x260>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
		if(collect_data){
 8001278:	e6dc      	b.n	8001034 <StartADC+0x10>
 800127a:	bf00      	nop
 800127c:	200005f8 	.word	0x200005f8
 8001280:	200005fc 	.word	0x200005fc
 8001284:	20000364 	.word	0x20000364
 8001288:	20000362 	.word	0x20000362
 800128c:	200005fe 	.word	0x200005fe
 8001290:	0800e894 	.word	0x0800e894
 8001294:	10624dd3 	.word	0x10624dd3
 8001298:	0800e8d0 	.word	0x0800e8d0

0800129c <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
//	basic_example_main(&hadf5355);
  /* Infinite loop */
	for(;;)
	{
//		UARTLog("Hello World\n\r");
		osDelay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f007 fc5e 	bl	8008b66 <osDelay>
 80012aa:	e7fb      	b.n	80012a4 <StartPLL+0x8>

080012ac <StartATCmds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartATCmds */
void StartATCmds(void *argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartATCmds */
	uint8_t received_data[32];
	//	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 80012b4:	2220      	movs	r2, #32
 80012b6:	4913      	ldr	r1, [pc, #76]	@ (8001304 <StartATCmds+0x58>)
 80012b8:	4813      	ldr	r0, [pc, #76]	@ (8001308 <StartATCmds+0x5c>)
 80012ba:	f007 f9d3 	bl	8008664 <HAL_UARTEx_ReceiveToIdle_DMA>
	UARTLog("Send any request\n\r");
 80012be:	4813      	ldr	r0, [pc, #76]	@ (800130c <StartATCmds+0x60>)
 80012c0:	f000 ff5e 	bl	8002180 <UARTLog>
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x01, osFlagsNoClear, osWaitForever);
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	2102      	movs	r1, #2
 80012ca:	2001      	movs	r0, #1
 80012cc:	f007 fbca 	bl	8008a64 <osThreadFlagsWait>
		if(received_lines > 0){
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <StartATCmds+0x64>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d011      	beq.n	80012fc <StartATCmds+0x50>
		  ParserTakeLine(&buffer, received_data);
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	@ (8001314 <StartATCmds+0x68>)
 80012e0:	f000 f9ca 	bl	8001678 <ParserTakeLine>
		  ParserParse((char*)received_data);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f9eb 	bl	80016c4 <ParserParse>
		  received_lines--;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <StartATCmds+0x64>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <StartATCmds+0x64>)
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e7e3      	b.n	80012c4 <StartATCmds+0x18>
		}
		else osThreadFlagsClear(0x01);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f007 fb73 	bl	80089e8 <osThreadFlagsClear>
		osThreadFlagsWait(0x01, osFlagsNoClear, osWaitForever);
 8001302:	e7df      	b.n	80012c4 <StartATCmds+0x18>
 8001304:	20000340 	.word	0x20000340
 8001308:	200004dc 	.word	0x200004dc
 800130c:	0800e8f0 	.word	0x0800e8f0
 8001310:	20000360 	.word	0x20000360
 8001314:	2000031c 	.word	0x2000031c

08001318 <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART2){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <HAL_UARTEx_RxEventCallback+0x68>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d124      	bne.n	8001378 <HAL_UARTEx_RxEventCallback+0x60>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp, Size)){
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	4913      	ldr	r1, [pc, #76]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001336:	4814      	ldr	r0, [pc, #80]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x70>)
 8001338:	f000 fa5e 	bl	80017f8 <WriteToBuffer>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d112      	bne.n	8001368 <HAL_UARTEx_RxEventCallback+0x50>
			if(receive_tmp[Size-1] == ENDLINE){
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	3b01      	subs	r3, #1
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d10f      	bne.n	800136e <HAL_UARTEx_RxEventCallback+0x56>
				received_lines++;
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_UARTEx_RxEventCallback+0x74>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_UARTEx_RxEventCallback+0x74>)
 8001358:	701a      	strb	r2, [r3, #0]
				osThreadFlagsSet(at_cmds_handlerHandle, 0x01);
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_UARTEx_RxEventCallback+0x78>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f007 faf3 	bl	800894c <osThreadFlagsSet>
 8001366:	e002      	b.n	800136e <HAL_UARTEx_RxEventCallback+0x56>
			}
		}
		else FlushBuffer(&buffer);
 8001368:	4807      	ldr	r0, [pc, #28]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x70>)
 800136a:	f000 faad 	bl	80018c8 <FlushBuffer>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 800136e:	2220      	movs	r2, #32
 8001370:	4904      	ldr	r1, [pc, #16]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001374:	f007 f976 	bl	8008664 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40004400 	.word	0x40004400
 8001384:	20000340 	.word	0x20000340
 8001388:	2000031c 	.word	0x2000031c
 800138c:	20000360 	.word	0x20000360
 8001390:	20000374 	.word	0x20000374
 8001394:	200004dc 	.word	0x200004dc

08001398 <HAL_UART_TxCpltCallback>:
//		HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2){

  }
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_BUSY_Pin){
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013bc:	d109      	bne.n	80013d2 <HAL_GPIO_EXTI_Callback+0x26>
//		osThreadFlagsSet(adc_handlerHandle, 0x01);
		if(busy_dropped == false)
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_GPIO_EXTI_Callback+0x26>
		busy_dropped = true;
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
	}
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000364 	.word	0x20000364

080013e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <MX_GPIO_Init+0x134>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	4a46      	ldr	r2, [pc, #280]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001406:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	4a40      	ldr	r2, [pc, #256]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800141c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <MX_GPIO_Init+0x134>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a3a      	ldr	r2, [pc, #232]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a34      	ldr	r2, [pc, #208]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b32      	ldr	r3, [pc, #200]	@ (8001518 <MX_GPIO_Init+0x134>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2120      	movs	r1, #32
 800145e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001462:	f002 ffa9 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CNVST_GPIO_Port, ADC_CNVST_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800146c:	482b      	ldr	r0, [pc, #172]	@ (800151c <MX_GPIO_Init+0x138>)
 800146e:	f002 ffa3 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADF_CS_Pin|ADC_CS_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147c:	f002 ff9c 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|ADC_BUSY_Pin;
 8001480:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4821      	ldr	r0, [pc, #132]	@ (800151c <MX_GPIO_Init+0x138>)
 8001498:	f002 fcf0 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149c:	2320      	movs	r3, #32
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b6:	f002 fce1 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_DATA_Pin|ADC_FIRSTDATA_Pin;
 80014ba:	23c0      	movs	r3, #192	@ 0xc0
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4813      	ldr	r0, [pc, #76]	@ (800151c <MX_GPIO_Init+0x138>)
 80014ce:	f002 fcd5 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CNVST_Pin;
 80014d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CNVST_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_GPIO_Init+0x138>)
 80014ec:	f002 fcc6 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin|ADC_CS_Pin;
 80014f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f002 fcb6 	bl	8003e7c <HAL_GPIO_Init>

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	@ 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	48000800 	.word	0x48000800

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f002 f8ee 	bl	8003704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 f818 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f7ff ff5a 	bl	80013e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001530:	f7ff fd1c 	bl	8000f6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001534:	f000 fd3c 	bl	8001fb0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001538:	f000 fce4 	bl	8001f04 <MX_TIM6_Init>
  MX_SPI3_Init();
 800153c:	f000 fa12 	bl	8001964 <MX_SPI3_Init>
  MX_SPI2_Init();
 8001540:	f000 f9d2 	bl	80018e8 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001544:	f000 f85b 	bl	80015fe <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Initialize_Delay();
 8001548:	f7ff fcd6 	bl	8000ef8 <Initialize_Delay>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800154c:	f007 f922 	bl	8008794 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001550:	f7ff fd24 	bl	8000f9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001554:	f007 f942 	bl	80087dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <main+0x38>

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	@ 0x58
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2244      	movs	r2, #68	@ 0x44
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f00b f8b7 	bl	800c6de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001582:	f002 ff57 	bl	8004434 <HAL_PWREx_ControlVoltageScaling>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800158c:	f000 f86e 	bl	800166c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159a:	2310      	movs	r3, #16
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a2:	2302      	movs	r3, #2
 80015a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015aa:	230a      	movs	r3, #10
 80015ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ae:	2307      	movs	r3, #7
 80015b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 ff8e 	bl	80044e0 <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015ca:	f000 f84f 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2303      	movs	r3, #3
 80015d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2104      	movs	r1, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fb56 	bl	8004c98 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f2:	f000 f83b 	bl	800166c <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3758      	adds	r7, #88	@ 0x58
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	2017      	movs	r0, #23
 8001608:	f002 f998 	bl	800393c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800160c:	2017      	movs	r0, #23
 800160e:	f002 f9b1 	bl	8003974 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2105      	movs	r1, #5
 8001616:	2026      	movs	r0, #38	@ 0x26
 8001618:	f002 f990 	bl	800393c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800161c:	2026      	movs	r0, #38	@ 0x26
 800161e:	f002 f9a9 	bl	8003974 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2105      	movs	r1, #5
 8001626:	2011      	movs	r0, #17
 8001628:	f002 f988 	bl	800393c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800162c:	2011      	movs	r0, #17
 800162e:	f002 f9a1 	bl	8003974 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2105      	movs	r1, #5
 8001636:	2010      	movs	r0, #16
 8001638:	f002 f980 	bl	800393c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800163c:	2010      	movs	r0, #16
 800163e:	f002 f999 	bl	8003974 <HAL_NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f002 f873 	bl	8003744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40000c00 	.word	0x40000c00

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <ParserTakeLine>:
	{"RUN", "New configuration applied\n\r", "New configuration failed to apply\n\r", ADF5355_Run, 1},
	{"SETUP", "Configuration succeed\n\r", "Configuration failed\n\r", ADF5355_Load, 1},
	{"READ", "ADC Read success\n\r", "ADC Read failed\n\r", ReadADC, 0},
};

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 8001686:	f107 030e 	add.w	r3, r7, #14
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8f3 	bl	8001878 <ReadFromBuffer>
		  if(tmp == ENDLINE){
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	2b0a      	cmp	r3, #10
 8001696:	d105      	bne.n	80016a4 <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	4413      	add	r3, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e004      	b.n	80016ae <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	7bba      	ldrb	r2, [r7, #14]
 80016ac:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3301      	adds	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	2b0a      	cmp	r3, #10
 80016b8:	d1e5      	bne.n	8001686 <ParserTakeLine+0xe>
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <ParserParse>:

void ParserParse(char* received_string){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0a2      	sub	sp, #136	@ 0x88
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	char* endptr;
	char* parse_pointer = strtok(received_string, "=");
 80016cc:	4946      	ldr	r1, [pc, #280]	@ (80017e8 <ParserParse+0x124>)
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f00b f80e 	bl	800c6f0 <strtok>
 80016d4:	67f8      	str	r0, [r7, #124]	@ 0x7c
	int32_t value = strtol(strtok(NULL,","), &endptr, 10);
 80016d6:	4945      	ldr	r1, [pc, #276]	@ (80017ec <ParserParse+0x128>)
 80016d8:	2000      	movs	r0, #0
 80016da:	f00b f809 	bl	800c6f0 <strtok>
 80016de:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016e2:	220a      	movs	r2, #10
 80016e4:	4619      	mov	r1, r3
 80016e6:	f00a fa73 	bl	800bbd0 <strtol>
 80016ea:	4603      	mov	r3, r0
 80016ec:	673b      	str	r3, [r7, #112]	@ 0x70
	char buffer[100];
	bool cmd_matched = false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016fa:	e05a      	b.n	80017b2 <ParserParse+0xee>
		if(strcmp(at_cmds[i].command, parse_pointer) == 0){
 80016fc:	493c      	ldr	r1, [pc, #240]	@ (80017f0 <ParserParse+0x12c>)
 80016fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fd5d 	bl	80001d0 <strcmp>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d145      	bne.n	80017a8 <ParserParse+0xe4>
			bool* result = at_cmds[i].function(&value);
 800171c:	4934      	ldr	r1, [pc, #208]	@ (80017f0 <ParserParse+0x12c>)
 800171e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	330c      	adds	r3, #12
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001734:	4610      	mov	r0, r2
 8001736:	4798      	blx	r3
 8001738:	67b8      	str	r0, [r7, #120]	@ 0x78
			if (*result == true && (endptr != 0x00 || at_cmds[i].optional_argument == 1)){
 800173a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01f      	beq.n	8001782 <ParserParse+0xbe>
 8001742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <ParserParse+0x9c>
 8001748:	4929      	ldr	r1, [pc, #164]	@ (80017f0 <ParserParse+0x12c>)
 800174a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3310      	adds	r3, #16
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d110      	bne.n	8001782 <ParserParse+0xbe>
				sprintf(buffer, at_cmds[i].responsePositive, value);
 8001760:	4923      	ldr	r1, [pc, #140]	@ (80017f0 <ParserParse+0x12c>)
 8001762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	3304      	adds	r3, #4
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4618      	mov	r0, r3
 800177c:	f00a ff4c 	bl	800c618 <siprintf>
 8001780:	e00f      	b.n	80017a2 <ParserParse+0xde>
			}
			else {
				sprintf(buffer, at_cmds[i].responseNegative, value);
 8001782:	491b      	ldr	r1, [pc, #108]	@ (80017f0 <ParserParse+0x12c>)
 8001784:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3308      	adds	r3, #8
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4618      	mov	r0, r3
 800179e:	f00a ff3b 	bl	800c618 <siprintf>
			}
			cmd_matched = true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 80017a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017ac:	3301      	adds	r3, #1
 80017ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80017b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017b6:	2b09      	cmp	r3, #9
 80017b8:	d9a0      	bls.n	80016fc <ParserParse+0x38>
		}
	}
	if (!cmd_matched){
 80017ba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80017be:	f083 0301 	eor.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <ParserParse+0x110>
		sprintf(buffer, "Available commands are LED, FREQOut, FREQIn, POW, CURR, MUXOUT, EN, RUN, SETUP and READ\n\r");
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4909      	ldr	r1, [pc, #36]	@ (80017f4 <ParserParse+0x130>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00a ff22 	bl	800c618 <siprintf>
	}
	UARTLog(buffer);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fcd1 	bl	8002180 <UARTLog>
}
 80017de:	bf00      	nop
 80017e0:	3788      	adds	r7, #136	@ 0x88
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0800eb4c 	.word	0x0800eb4c
 80017ec:	0800eb50 	.word	0x0800eb50
 80017f0:	2000004c 	.word	0x2000004c
 80017f4:	0800eb54 	.word	0x0800eb54

080017f8 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t *Data, uint8_t Len)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	4613      	mov	r3, r2
 8001804:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHead;

	for(int i=0; i<Len; i++){
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e02a      	b.n	8001862 <WriteToBuffer+0x6a>
		TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8c1b      	ldrh	r3, [r3, #32]
 8001810:	3301      	adds	r3, #1
 8001812:	425a      	negs	r2, r3
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	bf58      	it	pl
 800181e:	4253      	negpl	r3, r2
 8001820:	74fb      	strb	r3, [r7, #19]

		if( TempHead == Buffer->Tail) // No room for new data
 8001822:	7cfb      	ldrb	r3, [r7, #19]
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800182a:	429a      	cmp	r2, r3
 800182c:	d101      	bne.n	8001832 <WriteToBuffer+0x3a>
		{
			return RB_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e01c      	b.n	800186c <WriteToBuffer+0x74>
		}
		else
		{
			Buffer->Buffer[Buffer->Head] = *(Data+i);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	8c12      	ldrh	r2, [r2, #32]
 800183c:	7819      	ldrb	r1, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	5499      	strb	r1, [r3, r2]

			Buffer->Head++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8c1b      	ldrh	r3, [r3, #32]
 8001846:	3301      	adds	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	841a      	strh	r2, [r3, #32]
			Buffer->Head %= BUFFER_SIZE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8c1b      	ldrh	r3, [r3, #32]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	841a      	strh	r2, [r3, #32]
	for(int i=0; i<Len; i++){
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbd0      	blt.n	800180c <WriteToBuffer+0x14>
		}
	}
	return RB_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	8c1b      	ldrh	r3, [r3, #32]
 800188a:	429a      	cmp	r2, r3
 800188c:	d101      	bne.n	8001892 <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e014      	b.n	80018bc <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	5c9a      	ldrb	r2, [r3, r2]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80018a4:	3301      	adds	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <FlushBuffer>:

void FlushBuffer(RingBuffer *Buffer)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	Buffer->Tail = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	845a      	strh	r2, [r3, #34]	@ 0x22
	Buffer->Head = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	841a      	strh	r2, [r3, #32]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_SPI2_Init+0x74>)
 80018ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <MX_SPI2_Init+0x78>)
 80018f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_SPI2_Init+0x74>)
 80018f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_SPI2_Init+0x74>)
 80018fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001900:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_SPI2_Init+0x74>)
 8001904:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_SPI2_Init+0x74>)
 800190c:	2202      	movs	r2, #2
 800190e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <MX_SPI2_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <MX_SPI2_Init+0x74>)
 8001918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800191c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_SPI2_Init+0x74>)
 8001920:	2228      	movs	r2, #40	@ 0x28
 8001922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <MX_SPI2_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_SPI2_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_SPI2_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_SPI2_Init+0x74>)
 8001938:	2207      	movs	r2, #7
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <MX_SPI2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_SPI2_Init+0x74>)
 8001944:	2208      	movs	r2, #8
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_SPI2_Init+0x74>)
 800194a:	f004 f8b7 	bl	8005abc <HAL_SPI_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001954:	f7ff fe8a 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000378 	.word	0x20000378
 8001960:	40003800 	.word	0x40003800

08001964 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <MX_SPI3_Init+0x74>)
 800196a:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <MX_SPI3_Init+0x78>)
 800196c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <MX_SPI3_Init+0x74>)
 8001970:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001974:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <MX_SPI3_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800197c:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_SPI3_Init+0x74>)
 800197e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001982:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_SPI3_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <MX_SPI3_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_SPI3_Init+0x74>)
 8001992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001996:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_SPI3_Init+0x74>)
 800199a:	2220      	movs	r2, #32
 800199c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019b2:	2207      	movs	r2, #7
 80019b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019be:	2208      	movs	r2, #8
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_SPI3_Init+0x74>)
 80019c4:	f004 f87a 	bl	8005abc <HAL_SPI_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019ce:	f7ff fe4d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200003dc 	.word	0x200003dc
 80019dc:	40003c00 	.word	0x40003c00

080019e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	@ 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3d      	ldr	r2, [pc, #244]	@ (8001af4 <HAL_SPI_MspInit+0x114>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d145      	bne.n	8001a8e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a02:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a06:	4a3c      	ldr	r2, [pc, #240]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	4a36      	ldr	r2, [pc, #216]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a26:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4825      	ldr	r0, [pc, #148]	@ (8001afc <HAL_SPI_MspInit+0x11c>)
 8001a66:	f002 fa09 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	481e      	ldr	r0, [pc, #120]	@ (8001b00 <HAL_SPI_MspInit+0x120>)
 8001a88:	f002 f9f8 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a8c:	e02d      	b.n	8001aea <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <HAL_SPI_MspInit+0x124>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d128      	bne.n	8001aea <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	4a16      	ldr	r2, [pc, #88]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab4:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_SPI_MspInit+0x118>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001ac8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ada:	2306      	movs	r3, #6
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <HAL_SPI_MspInit+0x11c>)
 8001ae6:	f002 f9c9 	bl	8003e7c <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	@ 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40003800 	.word	0x40003800
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000800 	.word	0x48000800
 8001b00:	48000400 	.word	0x48000400
 8001b04:	40003c00 	.word	0x40003c00

08001b08 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <HAL_SPI_MspDeInit+0x5c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10f      	bne.n	8001b3a <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <HAL_SPI_MspDeInit+0x60>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <HAL_SPI_MspDeInit+0x60>)
 8001b20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b24:	6593      	str	r3, [r2, #88]	@ 0x58

    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8001b26:	2104      	movs	r1, #4
 8001b28:	4810      	ldr	r0, [pc, #64]	@ (8001b6c <HAL_SPI_MspDeInit+0x64>)
 8001b2a:	f002 fb51 	bl	80041d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b32:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <HAL_SPI_MspDeInit+0x68>)
 8001b34:	f002 fb4c 	bl	80041d0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001b38:	e00f      	b.n	8001b5a <HAL_SPI_MspDeInit+0x52>
  else if(spiHandle->Instance==SPI3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_SPI_MspDeInit+0x6c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d10a      	bne.n	8001b5a <HAL_SPI_MspDeInit+0x52>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <HAL_SPI_MspDeInit+0x60>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b48:	4a07      	ldr	r2, [pc, #28]	@ (8001b68 <HAL_SPI_MspDeInit+0x60>)
 8001b4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001b4e:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_12);
 8001b50:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <HAL_SPI_MspDeInit+0x64>)
 8001b56:	f002 fb3b 	bl	80041d0 <HAL_GPIO_DeInit>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40003800 	.word	0x40003800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	48000400 	.word	0x48000400
 8001b74:	40003c00 	.word	0x40003c00

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	4a10      	ldr	r2, [pc, #64]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	f06f 0001 	mvn.w	r0, #1
 8001bb6:	f001 fec1 	bl	800393c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	@ 0x38
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001bd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_InitTick+0xe0>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <HAL_InitTick+0xe0>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be2:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_InitTick+0xe0>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bee:	f107 0210 	add.w	r2, r7, #16
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fa11 	bl	8005020 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c08:	f003 f9de 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8001c0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c0e:	e004      	b.n	8001c1a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c10:	f003 f9da 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8001c14:	4603      	mov	r3, r0
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1c:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_InitTick+0xe4>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0c9b      	lsrs	r3, r3, #18
 8001c24:	3b01      	subs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c2a:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <HAL_InitTick+0xec>)
 8001c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c34:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001c36:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001c4e:	4818      	ldr	r0, [pc, #96]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c50:	f004 fe88 	bl	8006964 <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11b      	bne.n	8001c9a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001c62:	4813      	ldr	r0, [pc, #76]	@ (8001cb0 <HAL_InitTick+0xe8>)
 8001c64:	f004 ff3e 	bl	8006ae4 <HAL_TIM_Base_Start_IT>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d111      	bne.n	8001c9a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c76:	2032      	movs	r0, #50	@ 0x32
 8001c78:	f001 fe7c 	bl	8003974 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	d808      	bhi.n	8001c94 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001c82:	2200      	movs	r2, #0
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	2032      	movs	r0, #50	@ 0x32
 8001c88:	f001 fe58 	bl	800393c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <HAL_InitTick+0xf0>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e002      	b.n	8001c9a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3738      	adds	r7, #56	@ 0x38
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	20000440 	.word	0x20000440
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	20000128 	.word	0x20000128

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA1_Channel6_IRQHandler+0x10>)
 8001cfa:	f001 ffe0 	bl	8003cbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000564 	.word	0x20000564

08001d08 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <DMA1_Channel7_IRQHandler+0x10>)
 8001d0e:	f001 ffd6 	bl	8003cbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200005ac 	.word	0x200005ac

08001d1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_BUSY_Pin);
 8001d20:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d24:	f002 fb60 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <USART2_IRQHandler+0x10>)
 8001d32:	f005 fa9b 	bl	800726c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004dc 	.word	0x200004dc

08001d40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <TIM5_IRQHandler+0x10>)
 8001d46:	f004 ff3d 	bl	8006bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000440 	.word	0x20000440

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_kill>:

int _kill(int pid, int sig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6e:	f00a fdcb 	bl	800c908 <__errno>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2216      	movs	r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
  return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_exit>:

void _exit (int status)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ffe7 	bl	8001d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d96:	bf00      	nop
 8001d98:	e7fd      	b.n	8001d96 <_exit+0x12>

08001d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dac:	f3af 8000 	nop.w
 8001db0:	4601      	mov	r1, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf0      	blt.n	8001dac <_read+0x12>
  }

  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e009      	b.n	8001dfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf1      	blt.n	8001de6 <_write+0x12>
  }
  return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_close>:

int _close(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e34:	605a      	str	r2, [r3, #4]
  return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_isatty>:

int _isatty(int file)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f00a fd30 	bl	800c908 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20018000 	.word	0x20018000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	2000048c 	.word	0x2000048c
 8001edc:	200034c0 	.word	0x200034c0

08001ee0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <SystemInit+0x20>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <SystemInit+0x20>)
 8001eec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <MX_TIM6_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f1c:	224f      	movs	r2, #79	@ 0x4f
 8001f1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f36:	f004 fd15 	bl	8006964 <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f40:	f7ff fb94 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_TIM6_Init+0x64>)
 8001f52:	f005 f80d 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f5c:	f7ff fb86 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000490 	.word	0x20000490
 8001f6c:	40001000 	.word	0x40001000

08001f70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x38>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10b      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40001000 	.word	0x40001000
 8001fac:	40021000 	.word	0x40021000

08001fb0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fb6:	4a15      	ldr	r2, [pc, #84]	@ (800200c <MX_USART2_UART_Init+0x5c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_USART2_UART_Init+0x58>)
 8001ff4:	f005 f862 	bl	80070bc <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ffe:	f7ff fb35 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200004dc 	.word	0x200004dc
 800200c:	40004400 	.word	0x40004400

08002010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0ac      	sub	sp, #176	@ 0xb0
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2288      	movs	r2, #136	@ 0x88
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f00a fb54 	bl	800c6de <memset>
  if(uartHandle->Instance==USART2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a4b      	ldr	r2, [pc, #300]	@ (8002168 <HAL_UART_MspInit+0x158>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f040 808e 	bne.w	800215e <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002042:	2302      	movs	r3, #2
 8002044:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002046:	2300      	movs	r3, #0
 8002048:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f878 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800205a:	f7ff fb07 	bl	800166c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800205e:	4b43      	ldr	r3, [pc, #268]	@ (800216c <HAL_UART_MspInit+0x15c>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	4a42      	ldr	r2, [pc, #264]	@ (800216c <HAL_UART_MspInit+0x15c>)
 8002064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002068:	6593      	str	r3, [r2, #88]	@ 0x58
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_UART_MspInit+0x15c>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <HAL_UART_MspInit+0x15c>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	4a3c      	ldr	r2, [pc, #240]	@ (800216c <HAL_UART_MspInit+0x15c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_UART_MspInit+0x15c>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800208e:	230c      	movs	r3, #12
 8002090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a6:	2307      	movs	r3, #7
 80020a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b6:	f001 fee1 	bl	8003e7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_UART_MspInit+0x164>)
 80020be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020c2:	2202      	movs	r2, #2
 80020c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020e4:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020f0:	481f      	ldr	r0, [pc, #124]	@ (8002170 <HAL_UART_MspInit+0x160>)
 80020f2:	f001 fc4d 	bl	8003990 <HAL_DMA_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80020fc:	f7ff fab6 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a1b      	ldr	r2, [pc, #108]	@ (8002170 <HAL_UART_MspInit+0x160>)
 8002104:	675a      	str	r2, [r3, #116]	@ 0x74
 8002106:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <HAL_UART_MspInit+0x160>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <HAL_UART_MspInit+0x168>)
 800210e:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <HAL_UART_MspInit+0x16c>)
 8002110:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002114:	2202      	movs	r2, #2
 8002116:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HAL_UART_MspInit+0x168>)
 800211a:	2210      	movs	r2, #16
 800211c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002126:	2280      	movs	r2, #128	@ 0x80
 8002128:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212a:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_UART_MspInit+0x168>)
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002138:	2200      	movs	r2, #0
 800213a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_UART_MspInit+0x168>)
 800213e:	2200      	movs	r2, #0
 8002140:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002142:	480d      	ldr	r0, [pc, #52]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002144:	f001 fc24 	bl	8003990 <HAL_DMA_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800214e:	f7ff fa8d 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <HAL_UART_MspInit+0x168>)
 8002156:	671a      	str	r2, [r3, #112]	@ 0x70
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_UART_MspInit+0x168>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800215e:	bf00      	nop
 8002160:	37b0      	adds	r7, #176	@ 0xb0
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000
 8002170:	20000564 	.word	0x20000564
 8002174:	4002006c 	.word	0x4002006c
 8002178:	200005ac 	.word	0x200005ac
 800217c:	40020080 	.word	0x40020080

08002180 <UARTLog>:

extern struct adf5355_init_param hadf5355;
extern data_Collector_TypeDef* ad7676_data;

void UARTLog(char* message)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7fe f881 	bl	8000290 <strlen>
 800218e:	4603      	mov	r3, r0
 8002190:	b29a      	uxth	r2, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4803      	ldr	r0, [pc, #12]	@ (80021a8 <UARTLog+0x28>)
 800219a:	f004 ffdd 	bl	8007158 <HAL_UART_Transmit>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200004dc 	.word	0x200004dc

080021ac <LightLED>:

//void* SetPLL_Period(void* period_ms){
//
//}

void* LightLED(void* state){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <LightLED+0x24>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d003      	beq.n	80021d0 <LightLED+0x24>
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <LightLED+0x44>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e00a      	b.n	80021e6 <LightLED+0x3a>
	else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, *value);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	2120      	movs	r1, #32
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f002 f8ec 	bl	80043b8 <HAL_GPIO_WritePin>
		ret = true;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <LightLED+0x44>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80021e6:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <LightLED+0x44>)
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200005f4 	.word	0x200005f4

080021f4 <ReadADC>:

void* ReadADC(void* samples){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint16_t* value = (uint16_t*)samples;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
	if (*value <= 0 && *value > ad7676_data->data_ptr_max) ret = false;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10b      	bne.n	8002220 <ReadADC+0x2c>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <ReadADC+0x4c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	@ 0x646
 8002214:	429a      	cmp	r2, r3
 8002216:	d903      	bls.n	8002220 <ReadADC+0x2c>
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <ReadADC+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e009      	b.n	8002234 <ReadADC+0x40>
	else {
		ad7676_read_samples(*value);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f901 	bl	800242c <ad7676_read_samples>
		ad7676_start_conversion();
 800222a:	f000 f915 	bl	8002458 <ad7676_start_conversion>
		ret = true;
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <ReadADC+0x50>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <ReadADC+0x50>)
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200005f8 	.word	0x200005f8
 8002244:	200005f5 	.word	0x200005f5

08002248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800224c:	f7ff fe48 	bl	8001ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <LoopForever+0x6>)
  ldr r1, =_edata
 8002252:	490d      	ldr	r1, [pc, #52]	@ (8002288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <LoopForever+0xe>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002268:	4c0a      	ldr	r4, [pc, #40]	@ (8002294 <LoopForever+0x16>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002276:	f00a fb4d 	bl	800c914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800227a:	f7ff f951 	bl	8001520 <main>

0800227e <LoopForever>:

LoopForever:
    b LoopForever
 800227e:	e7fe      	b.n	800227e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 800228c:	0800f07c 	.word	0x0800f07c
  ldr r2, =_sbss
 8002290:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002294:	200034c0 	.word	0x200034c0

08002298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_2_IRQHandler>
	...

0800229c <ad7676_init>:
bool collect_data = false;
uint16_t awaited_samples = 0;


void ad7676_init(data_Collector_TypeDef** ad7676_data)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	data_Collector_TypeDef* init_data;

	init_data = (data_Collector_TypeDef*)no_os_calloc(1, sizeof(*init_data));
 80022a4:	f240 614c 	movw	r1, #1612	@ 0x64c
 80022a8:	2001      	movs	r0, #1
 80022aa:	f001 f9cd 	bl	8003648 <no_os_calloc>
 80022ae:	60f8      	str	r0, [r7, #12]

	init_data->spi_desc = &hspi2;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <ad7676_init+0x48>)
 80022b4:	601a      	str	r2, [r3, #0]
	init_data->data_ptr = 0;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8a3 2644 	strh.w	r2, [r3, #1604]	@ 0x644
	init_data->data_ptr_max = 200;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22c8      	movs	r2, #200	@ 0xc8
 80022c2:	f8a3 2646 	strh.w	r2, [r3, #1606]	@ 0x646
	init_data->current_channel = 0;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2648 	strb.w	r2, [r3, #1608]	@ 0x648
	init_data->num_channels = 4;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2204      	movs	r2, #4
 80022d2:	f883 2649 	strb.w	r2, [r3, #1609]	@ 0x649

	*ad7676_data = init_data;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000378 	.word	0x20000378

080022e8 <ad7676_spi_read>:

void ad7676_spi_read(uint8_t* buf, uint8_t size){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(ad7676_data->spi_desc, buf, size, 0xFF);
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <ad7676_spi_read+0x28>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	23ff      	movs	r3, #255	@ 0xff
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	f003 fe1c 	bl	8005f3e <HAL_SPI_Receive>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200005f8 	.word	0x200005f8

08002314 <ad7676_calculate_output>:

int ad7676_calculate_output(int32_t sample){
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	int sample_voltage = (sample*10*1000)/32768;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	da02      	bge.n	8002330 <ad7676_calculate_output+0x1c>
 800232a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800232e:	337f      	adds	r3, #127	@ 0x7f
 8002330:	13db      	asrs	r3, r3, #15
 8002332:	60fb      	str	r3, [r7, #12]
	return sample_voltage;  //assuming range is +/-10V and REF is internal 2,5V datasheet p.23
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <ad7676_read_one_sample>:

void ad7676_read_one_sample() //when BUSY goes down
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
//	(GPIOx->IDR & GPIO_Pin);
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
//	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
	uint8_t buf[8];
	AD7676_CS_OFF;
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002354:	f002 f830 	bl	80043b8 <HAL_GPIO_WritePin>
	ad7676_spi_read(buf, 8);
 8002358:	463b      	mov	r3, r7
 800235a:	2108      	movs	r1, #8
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ffc3 	bl	80022e8 <ad7676_spi_read>
	for(ad7676_data->current_channel=0; ad7676_data->current_channel<ad7676_data->num_channels; ad7676_data->current_channel++){
 8002362:	4b31      	ldr	r3, [pc, #196]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2648 	strb.w	r2, [r3, #1608]	@ 0x648
 800236c:	e033      	b.n	80023d6 <ad7676_read_one_sample+0x92>
		ad7676_data->data_buf[ad7676_data->current_channel][ad7676_data->data_ptr] = buf[2*ad7676_data->current_channel+1]+(buf[2*ad7676_data->current_channel]<<8); //LSB first
 800236e:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f893 3648 	ldrb.w	r3, [r3, #1608]	@ 0x648
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3301      	adds	r3, #1
 800237a:	3308      	adds	r3, #8
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002382:	461d      	mov	r5, r3
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f893 3648 	ldrb.w	r3, [r3, #1608]	@ 0x648
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	3308      	adds	r3, #8
 8002390:	443b      	add	r3, r7
 8002392:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	4a23      	ldr	r2, [pc, #140]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	4922      	ldr	r1, [pc, #136]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 80023a0:	6809      	ldr	r1, [r1, #0]
 80023a2:	f891 1648 	ldrb.w	r1, [r1, #1608]	@ 0x648
 80023a6:	460c      	mov	r4, r1
 80023a8:	491f      	ldr	r1, [pc, #124]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 80023aa:	6809      	ldr	r1, [r1, #0]
 80023ac:	f8b1 1644 	ldrh.w	r1, [r1, #1604]	@ 0x644
 80023b0:	4608      	mov	r0, r1
 80023b2:	442b      	add	r3, r5
 80023b4:	b299      	uxth	r1, r3
 80023b6:	23c8      	movs	r3, #200	@ 0xc8
 80023b8:	fb04 f303 	mul.w	r3, r4, r3
 80023bc:	4403      	add	r3, r0
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	460a      	mov	r2, r1
 80023c4:	809a      	strh	r2, [r3, #4]
	for(ad7676_data->current_channel=0; ad7676_data->current_channel<ad7676_data->num_channels; ad7676_data->current_channel++){
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f893 2648 	ldrb.w	r2, [r3, #1608]	@ 0x648
 80023ce:	3201      	adds	r2, #1
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f883 2648 	strb.w	r2, [r3, #1608]	@ 0x648
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f893 2648 	ldrb.w	r2, [r3, #1608]	@ 0x648
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f893 3649 	ldrb.w	r3, [r3, #1609]	@ 0x649
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3c1      	bcc.n	800236e <ad7676_read_one_sample+0x2a>
	}
	AD7676_CS_ON;
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f4:	f001 ffe0 	bl	80043b8 <HAL_GPIO_WritePin>
//	ad7676_data->data_buf[ad7676_data->data_ptr++] = sample;
	ad7676_data->data_ptr = (ad7676_data->data_ptr+1)%ad7676_data->data_ptr_max;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3644 	ldrh.w	r3, [r3, #1604]	@ 0x644
 8002400:	3301      	adds	r3, #1
 8002402:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f8b2 2646 	ldrh.w	r2, [r2, #1606]	@ 0x646
 800240a:	fb93 f1f2 	sdiv	r1, r3, r2
 800240e:	fb01 f202 	mul.w	r2, r1, r2
 8002412:	1a9a      	subs	r2, r3, r2
 8002414:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <ad7676_read_one_sample+0xe4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b292      	uxth	r2, r2
 800241a:	f8a3 2644 	strh.w	r2, [r3, #1604]	@ 0x644
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bdb0      	pop	{r4, r5, r7, pc}
 8002426:	bf00      	nop
 8002428:	200005f8 	.word	0x200005f8

0800242c <ad7676_read_samples>:

void ad7676_read_samples(uint16_t samples){
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
	awaited_samples = samples;
 8002436:	4a06      	ldr	r2, [pc, #24]	@ (8002450 <ad7676_read_samples+0x24>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	8013      	strh	r3, [r2, #0]
	collect_data = true;
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <ad7676_read_samples+0x28>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200005fe 	.word	0x200005fe
 8002454:	200005fc 	.word	0x200005fc

08002458 <ad7676_start_conversion>:
	}
	ad7676_data->data_ptr = 0;
}

void ad7676_start_conversion()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
	AD7676_CNVST_OFF;
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002464:	480b      	ldr	r0, [pc, #44]	@ (8002494 <ad7676_start_conversion+0x3c>)
 8002466:	f001 ffa7 	bl	80043b8 <HAL_GPIO_WritePin>
	AD7676_CONVST_DELAY;
 800246a:	2300      	movs	r3, #0
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	e003      	b.n	8002478 <ad7676_start_conversion+0x20>
 8002470:	bf00      	nop
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	3301      	adds	r3, #1
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d9f8      	bls.n	8002470 <ad7676_start_conversion+0x18>
	AD7676_CNVST_ON;
 800247e:	2201      	movs	r2, #1
 8002480:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <ad7676_start_conversion+0x3c>)
 8002486:	f001 ff97 	bl	80043b8 <HAL_GPIO_WritePin>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	48000800 	.word	0x48000800

08002498 <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	460b      	mov	r3, r1
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0e1b      	lsrs	r3, r3, #24
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d6:	f001 ff6f 	bl	80043b8 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f107 0110 	add.w	r1, r7, #16
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	2204      	movs	r2, #4
 80024e8:	f003 fbb3 	bl	8005c52 <HAL_SPI_Transmit>
 80024ec:	4603      	mov	r3, r0
 80024ee:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 80024f0:	2201      	movs	r2, #1
 80024f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fa:	f001 ff5d 	bl	80043b8 <HAL_GPIO_WritePin>

	return ret;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002512:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 8002516:	f107 0108 	add.w	r1, r7, #8
 800251a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251e:	4608      	mov	r0, r1
 8002520:	f001 f8c8 	bl	80036b4 <no_os_do_div>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 800252c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	060b      	lsls	r3, r1, #24
 800253a:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 800253e:	0602      	lsls	r2, r0, #24
 8002540:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8002544:	f107 0110 	add.w	r1, r7, #16
 8002548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800254c:	4608      	mov	r0, r1
 800254e:	f001 f8b1 	bl	80036b4 <no_os_do_div>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	601a      	str	r2, [r3, #0]

	*integer = vco;
 800255a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8002562:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256e:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8002570:	e009      	b.n	8002586 <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8002572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	085a      	lsrs	r2, r3, #1
 8002578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257a:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 800257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	085a      	lsrs	r2, r3, #1
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 8002586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800258c:	429a      	cmp	r2, r3
 800258e:	d3f0      	bcc.n	8002572 <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f001 f862 	bl	8003664 <no_os_greatest_common_divisor>
 80025a0:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ae:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	601a      	str	r2, [r3, #0]

	if (*mod2 < 2) *mod2 = 2;
 80025be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d802      	bhi.n	80025cc <adf5355_pll_fract_n_compute+0xc4>
 80025c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <adf5355_calc_reg0_to_2>:

/*Private static functions*/

static uint32_t adf5355_calc_reg0_to_2(struct adf5355_dev *dev, uint8_t autocalc_en){
 80025d4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80025d8:	b08a      	sub	sp, #40	@ 0x28
 80025da:	af06      	add	r7, sp, #24
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	70f9      	strb	r1, [r7, #3]

	uint32_t tmp_cp_bleed;
	bool prescaler;
//	bool cp_neg_bleed_en; //It might be unused, need to examine it

	adf5355_pll_fract_n_compute(dev->freq_req, dev->fpfd, &dev->integer, &dev->fract1,
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	e9d1 bc10 	ldrd	fp, ip, [r1, #64]	@ 0x40
 80025e6:	687c      	ldr	r4, [r7, #4]
 80025e8:	6ea4      	ldr	r4, [r4, #104]	@ 0x68
 80025ea:	2500      	movs	r5, #0
 80025ec:	4622      	mov	r2, r4
 80025ee:	462b      	mov	r3, r5
 80025f0:	687c      	ldr	r4, [r7, #4]
 80025f2:	346c      	adds	r4, #108	@ 0x6c
 80025f4:	687d      	ldr	r5, [r7, #4]
 80025f6:	3570      	adds	r5, #112	@ 0x70
 80025f8:	687e      	ldr	r6, [r7, #4]
 80025fa:	3674      	adds	r6, #116	@ 0x74
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	3178      	adds	r1, #120	@ 0x78
 8002600:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002604:	9004      	str	r0, [sp, #16]
 8002606:	9103      	str	r1, [sp, #12]
 8002608:	9602      	str	r6, [sp, #8]
 800260a:	9501      	str	r5, [sp, #4]
 800260c:	9400      	str	r4, [sp, #0]
 800260e:	4658      	mov	r0, fp
 8002610:	4661      	mov	r1, ip
 8002612:	f7ff ff79 	bl	8002508 <adf5355_pll_fract_n_compute>
						&dev->fract2, &dev->mod2, ADF5355_MAX_MODULUS2);

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261a:	2b4a      	cmp	r3, #74	@ 0x4a
 800261c:	bf8c      	ite	hi
 800261e:	2301      	movhi	r3, #1
 8002620:	2300      	movls	r3, #0
 8002622:	72fb      	strb	r3, [r7, #11]
//	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
//		cp_neg_bleed_en = false;
//	else
//		cp_neg_bleed_en = dev->cp_neg_bleed_en;

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d003      	beq.n	8002634 <adf5355_calc_reg0_to_2+0x60>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	791b      	ldrb	r3, [r3, #4]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d113      	bne.n	800265c <adf5355_calc_reg0_to_2+0x88>
		tmp_cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <adf5355_calc_reg0_to_2+0x118>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8002644:	fb03 f202 	mul.w	r2, r3, r2
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	0b9b      	lsrs	r3, r3, #14
 8002652:	4a27      	ldr	r2, [pc, #156]	@ (80026f0 <adf5355_calc_reg0_to_2+0x11c>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e016      	b.n	800268a <adf5355_calc_reg0_to_2+0xb6>
	} else {
		tmp_cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002660:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002664:	fb03 f202 	mul.w	r2, r3, r2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266c:	f240 1177 	movw	r1, #375	@ 0x177
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	1e5a      	subs	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800267c:	f240 1177 	movw	r1, #375	@ 0x177
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60fb      	str	r3, [r7, #12]
	}

	tmp_cp_bleed = no_os_clamp(tmp_cp_bleed, 1U, 255U);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d904      	bls.n	800269a <adf5355_calc_reg0_to_2+0xc6>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2bff      	cmp	r3, #255	@ 0xff
 8002694:	bf28      	it	cs
 8002696:	23ff      	movcs	r3, #255	@ 0xff
 8002698:	e000      	b.n	800269c <adf5355_calc_reg0_to_2+0xc8>
 800269a:	2301      	movs	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a2:	011a      	lsls	r2, r3, #4
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <adf5355_calc_reg0_to_2+0x120>)
 80026a6:	4013      	ands	r3, r2
					ADF5355_REG0_PRESCALER(prescaler) |
 80026a8:	7afa      	ldrb	r2, [r7, #11]
 80026aa:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 80026ac:	431a      	orrs	r2, r3
					ADF5355_REG0_AUTOCAL(autocalc_en); //autocalibration needs to be disabled
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	055b      	lsls	r3, r3, #21
					ADF5355_REG0_PRESCALER(prescaler) |
 80026b2:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80026c2:	f023 030f 	bic.w	r3, r3, #15
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ce:	011a      	lsls	r2, r3, #4
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <adf5355_calc_reg0_to_2+0x124>)
 80026d2:	4013      	ands	r3, r2
					ADF5355_REG2_FRAC2(dev->fract2);
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026d8:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
	return tmp_cp_bleed;
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80026ec:	10624dd3 	.word	0x10624dd3
 80026f0:	00136b0b 	.word	0x00136b0b
 80026f4:	000ffff0 	.word	0x000ffff0
 80026f8:	0003fff0 	.word	0x0003fff0

080026fc <adf5355_calc_pfd>:

static void adf5355_calc_pfd(struct adf5355_dev *dev, uint8_t counter_reset)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	dev->ref_div_factor = 0;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8002716:	3301      	adds	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <adf5355_calc_pfd+0x36>
 800272e:	2302      	movs	r3, #2
 8002730:	e000      	b.n	8002734 <adf5355_calc_pfd+0x38>
 8002732:	2301      	movs	r3, #1
 8002734:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	f8b2 208e 	ldrh.w	r2, [r2, #142]	@ 0x8e
 800273e:	4611      	mov	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 8002746:	2a00      	cmp	r2, #0
 8002748:	d001      	beq.n	800274e <adf5355_calc_pfd+0x52>
 800274a:	2202      	movs	r2, #2
 800274c:	e000      	b.n	8002750 <adf5355_calc_pfd+0x54>
 800274e:	2201      	movs	r2, #1
 8002750:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8002754:	fbb3 f2f2 	udiv	r2, r3, r2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <adf5355_calc_pfd+0x110>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d8d4      	bhi.n	8002710 <adf5355_calc_pfd+0x14>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800276a:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 800276e:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <adf5355_calc_pfd+0x114>)
 8002770:	fba3 1302 	umull	r1, r3, r3, r2
 8002774:	1ad2      	subs	r2, r2, r3
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	4413      	add	r3, r2
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <adf5355_calc_pfd+0x92>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	bf28      	it	cs
 800278a:	230f      	movcs	r3, #15
 800278c:	e000      	b.n	8002790 <adf5355_calc_pfd+0x94>
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	011b      	lsls	r3, r3, #4
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	f892 2087 	ldrb.w	r2, [r2, #135]	@ 0x87
 800279c:	2a00      	cmp	r2, #0
 800279e:	d101      	bne.n	80027a4 <adf5355_calc_pfd+0xa8>
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	e000      	b.n	80027a6 <adf5355_calc_pfd+0xaa>
 80027a4:	2200      	movs	r2, #0
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 80027a6:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80027ae:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 80027b0:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80027b8:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 80027ba:	4313      	orrs	r3, r2
 80027bc:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 80027c6:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80027ce:	03d9      	lsls	r1, r3, #15
 80027d0:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <adf5355_calc_pfd+0x118>)
 80027d2:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 80027d4:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80027dc:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 80027de:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80027e6:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 80027e8:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80027f0:	06db      	lsls	r3, r3, #27
 80027f2:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	047868c0 	.word	0x047868c0
 8002810:	a01a01a1 	.word	0xa01a01a1
 8002814:	01ff8000 	.word	0x01ff8000

08002818 <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 8002828:	2b04      	cmp	r3, #4
 800282a:	d003      	beq.n	8002834 <adf5355_reg_config+0x1c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d101      	bne.n	8002838 <adf5355_reg_config+0x20>
 8002834:	230d      	movs	r3, #13
 8002836:	e000      	b.n	800283a <adf5355_reg_config+0x22>
 8002838:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 800283a:	613b      	str	r3, [r7, #16]

	if ((sync_all || !dev->all_synced) && dev->fpfd <= 75000000) {
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <adf5355_reg_config+0x38>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	795b      	ldrb	r3, [r3, #5]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <adf5355_reg_config+0x7e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002854:	4a7c      	ldr	r2, [pc, #496]	@ (8002a48 <adf5355_reg_config+0x230>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d81d      	bhi.n	8002896 <adf5355_reg_config+0x7e>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e013      	b.n	8002888 <adf5355_reg_config+0x70>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	b2d9      	uxtb	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	3202      	adds	r2, #2
 800286a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286e:	461a      	mov	r2, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fe11 	bl	8002498 <adf5355_write>
 8002876:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <adf5355_reg_config+0x6a>
				return ret;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	e0de      	b.n	8002a40 <adf5355_reg_config+0x228>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3b01      	subs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e8      	bne.n	8002860 <adf5355_reg_config+0x48>
		}

		dev->all_synced = true;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	715a      	strb	r2, [r3, #5]
 8002894:	e066      	b.n	8002964 <adf5355_reg_config+0x14c>

	}
	else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	791b      	ldrb	r3, [r3, #4]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <adf5355_reg_config+0x8e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	791b      	ldrb	r3, [r3, #4]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d10c      	bne.n	80028c0 <adf5355_reg_config+0xa8>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028aa:	461a      	mov	r2, r3
 80028ac:	210d      	movs	r1, #13
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fdf2 	bl	8002498 <adf5355_write>
 80028b4:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <adf5355_reg_config+0xa8>
				return ret;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	e0bf      	b.n	8002a40 <adf5355_reg_config+0x228>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	461a      	mov	r2, r3
 80028c6:	210a      	movs	r1, #10
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fde5 	bl	8002498 <adf5355_write>
 80028ce:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <adf5355_reg_config+0xc2>
			return ret;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	e0b2      	b.n	8002a40 <adf5355_reg_config+0x228>
		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
		if (ret != 0)
			return ret;
		*/
		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	461a      	mov	r2, r3
 80028e4:	2104      	movs	r1, #4
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fdd6 	bl	8002498 <adf5355_write>
 80028ec:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <adf5355_reg_config+0xe0>
			return ret;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	e0a3      	b.n	8002a40 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	461a      	mov	r2, r3
 80028fe:	2102      	movs	r1, #2
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fdc9 	bl	8002498 <adf5355_write>
 8002906:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <adf5355_reg_config+0xfa>
			return ret;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	e096      	b.n	8002a40 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	461a      	mov	r2, r3
 8002918:	2101      	movs	r1, #1
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fdbc 	bl	8002498 <adf5355_write>
 8002920:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <adf5355_reg_config+0x114>
			return ret;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	e089      	b.n	8002a40 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 8002930:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002934:	461a      	mov	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fdad 	bl	8002498 <adf5355_write>
 800293e:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <adf5355_reg_config+0x132>
			return ret;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	e07a      	b.n	8002a40 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]); //counter reset disabled by default
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	461a      	mov	r2, r3
 8002950:	2104      	movs	r1, #4
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fda0 	bl	8002498 <adf5355_write>
 8002958:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <adf5355_reg_config+0x14c>
			return ret;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	e06d      	b.n	8002a40 <adf5355_reg_config+0x228>
	}

	if (dev->delay_us > 999)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800296a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800296e:	d314      	bcc.n	800299a <adf5355_reg_config+0x182>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002976:	4a35      	ldr	r2, [pc, #212]	@ (8002a4c <adf5355_reg_config+0x234>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fdd0 	bl	8000524 <__aeabi_ui2d>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f91c 	bl	8000bc8 <__aeabi_d2uiz>
 8002990:	4603      	mov	r3, r0
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fade 	bl	8000f54 <delay_ms>
 8002998:	e005      	b.n	80029a6 <adf5355_reg_config+0x18e>
	}
	else
	{
		delay_us(dev->delay_us);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fab3 	bl	8000f0c <delay_us>
	}

	if (dev->fpfd > 75000000) { //needs to be verified
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029aa:	4a27      	ldr	r2, [pc, #156]	@ (8002a48 <adf5355_reg_config+0x230>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d93f      	bls.n	8002a30 <adf5355_reg_config+0x218>
		ret = adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	461a      	mov	r2, r3
 80029b6:	2100      	movs	r1, #0
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fd6d 	bl	8002498 <adf5355_write>
 80029be:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <adf5355_reg_config+0x1b2>
			return ret;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	e03a      	b.n	8002a40 <adf5355_reg_config+0x228>

		dev->ref_div2_en = false;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

		adf5355_calc_pfd(dev, 0);
 80029d2:	2100      	movs	r1, #0
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fe91 	bl	80026fc <adf5355_calc_pfd>

		adf5355_calc_reg0_to_2(dev, 0);
 80029da:	2100      	movs	r1, #0
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fdf9 	bl	80025d4 <adf5355_calc_reg0_to_2>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	461a      	mov	r2, r3
 80029e8:	2104      	movs	r1, #4
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fd54 	bl	8002498 <adf5355_write>
 80029f0:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <adf5355_reg_config+0x1e4>
			return ret;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	e021      	b.n	8002a40 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[2]);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	461a      	mov	r2, r3
 8002a02:	2102      	movs	r1, #2
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fd47 	bl	8002498 <adf5355_write>
 8002a0a:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <adf5355_reg_config+0x1fe>
			return ret;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	e014      	b.n	8002a40 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[1]);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fd3a 	bl	8002498 <adf5355_write>
 8002a24:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <adf5355_reg_config+0x218>
			return ret;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	e007      	b.n	8002a40 <adf5355_reg_config+0x228>
		//REGs 0 for halved, 4 for desired, then 2, 1, 0
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	461a      	mov	r2, r3
 8002a36:	2100      	movs	r1, #0
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fd2d 	bl	8002498 <adf5355_write>
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	047868c0 	.word	0x047868c0
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <adf5355_change_freq>:

int32_t adf5355_change_freq(struct adf5355_dev *dev, uint64_t freq){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	e9c7 2300 	strd	r2, r3, [r7]
 * Reg0 (autocal en) for halved fpfd
 * Reg4 for desired fpdf with RDIV dis
 * Reg2-0 (autocal dis)

*/
	dev->freq_req = freq;
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a62:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a9c <adf5355_change_freq+0x4c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d903      	bls.n	8002a78 <adf5355_change_freq+0x28>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	adf5355_calc_pfd(dev, 1);
 8002a78:	2101      	movs	r1, #1
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff fe3e 	bl	80026fc <adf5355_calc_pfd>
	adf5355_calc_reg0_to_2(dev, 1); //We set autocal as default, first it is negated, then send as default and then negated again
 8002a80:	2101      	movs	r1, #1
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f7ff fda6 	bl	80025d4 <adf5355_calc_reg0_to_2>

	return adf5355_reg_config(dev, false);
 8002a88:	2100      	movs	r1, #0
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff fec4 	bl	8002818 <adf5355_reg_config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	047868c0 	.word	0x047868c0

08002aa0 <adf5355_set_power>:

int32_t adf5355_set_power(struct adf5355_dev *dev, bool en, uint8_t power){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
 8002aac:	4613      	mov	r3, r2
 8002aae:	70bb      	strb	r3, [r7, #2]

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8002ab0:	78bb      	ldrb	r3, [r7, #2]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
			ADF5355_REG6_RF_OUT_EN(en) |
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8002abc:	431a      	orrs	r2, r3
			ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002ac4:	f083 0301 	eor.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	025b      	lsls	r3, r3, #9
			ADF5355_REG6_RF_OUT_EN(en) |
 8002acc:	431a      	orrs	r2, r3
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002ad4:	02db      	lsls	r3, r3, #11
			ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	461a      	mov	r2, r3
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002ada:	4b21      	ldr	r3, [pc, #132]	@ (8002b60 <adf5355_set_power+0xc0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	035b      	lsls	r3, r3, #13
 8002ae0:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8002ae4:	431a      	orrs	r2, r3
			ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002aec:	055b      	lsls	r3, r3, #21
 8002aee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002af2:	431a      	orrs	r2, r3
			ADF5355_REG6_FEEDBACK_FUND(1) |
			ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	791b      	ldrb	r3, [r3, #4]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d104      	bne.n	8002b06 <adf5355_set_power+0x66>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002b02:	065b      	lsls	r3, r3, #25
 8002b04:	e000      	b.n	8002b08 <adf5355_set_power+0x68>
 8002b06:	2300      	movs	r3, #0
			ADF5355_REG6_FEEDBACK_FUND(1) |
 8002b08:	431a      	orrs	r2, r3
					dev->outb_sel_fund : 0) |
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002b10:	075b      	lsls	r3, r3, #29
					dev->outb_sel_fund : 0) |
 8002b12:	431a      	orrs	r2, r3
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002b1a:	079b      	lsls	r3, r3, #30
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002b1c:	431a      	orrs	r2, r3
			ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	791b      	ldrb	r3, [r3, #4]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d003      	beq.n	8002b2e <adf5355_set_power+0x8e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d104      	bne.n	8002b38 <adf5355_set_power+0x98>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002b34:	07db      	lsls	r3, r3, #31
 8002b36:	e000      	b.n	8002b3a <adf5355_set_power+0x9a>
 8002b38:	2300      	movs	r3, #0
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002b3a:	4313      	orrs	r3, r2
					|| (dev->dev_id == ADF5356)) ?
					dev->cp_bleed_current_polarity_en : 0) |
 8002b3c:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8002b40:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6213      	str	r3, [r2, #32]
			ADF5355_REG6_DEFAULT;

	return adf5355_write(dev, ADF5355_REG(6), dev->regs[6]);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2106      	movs	r1, #6
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fca1 	bl	8002498 <adf5355_write>
 8002b56:	4603      	mov	r3, r0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000600 	.word	0x20000600

08002b64 <adf5355_set_muxout>:

int32_t adf5355_set_muxout(struct adf5355_dev *dev, enum adf5355_mux_out_sel mux_out){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]

	dev->regs[ADF5355_REG(4)] = (dev->regs[ADF5355_REG(4)] & ~ADF5355_REG4_MUXOUT(7)) | ADF5355_REG4_MUXOUT(mux_out);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f023 5260 	bic.w	r2, r3, #939524096	@ 0x38000000
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	06db      	lsls	r3, r3, #27
 8002b7c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]

	return adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fc82 	bl	8002498 <adf5355_write>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 8002ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	e9c7 2300 	strd	r2, r3, [r7]

	if (chan > dev->num_channels)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002bb4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d902      	bls.n	8002bc2 <adf5355_set_freq+0x22>
		return -1;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e12d      	b.n	8002e1e <adf5355_set_freq+0x27e>

	if (chan == 0) {
 8002bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d13c      	bne.n	8002c44 <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd4:	4290      	cmp	r0, r2
 8002bd6:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bda:	d308      	bcc.n	8002bee <adf5355_set_freq+0x4e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be6:	4290      	cmp	r0, r2
 8002be8:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bec:	d202      	bcs.n	8002bf4 <adf5355_set_freq+0x54>
			return -EINVAL;
 8002bee:	f06f 0315 	mvn.w	r3, #21
 8002bf2:	e114      	b.n	8002e1e <adf5355_set_freq+0x27e>

		dev->rf_div_sel = 0;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002c06:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8002c0e:	e00f      	b.n	8002c30 <adf5355_set_freq+0x90>
			freq <<= 1;
 8002c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c14:	eb12 0802 	adds.w	r8, r2, r2
 8002c18:	eb43 0903 	adc.w	r9, r3, r3
 8002c1c:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		while (freq < dev->min_vco_freq) {
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002c36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c3a:	4290      	cmp	r0, r2
 8002c3c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c40:	d3e6      	bcc.n	8002c10 <adf5355_set_freq+0x70>
 8002c42:	e079      	b.n	8002d38 <adf5355_set_freq+0x198>
		}
	} else if (dev->dev_id == ADF4356) {
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d14d      	bne.n	8002ce8 <adf5355_set_freq+0x148>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c56:	4290      	cmp	r0, r2
 8002c58:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c5c:	d310      	bcc.n	8002c80 <adf5355_set_freq+0xe0>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c68:	4290      	cmp	r0, r2
 8002c6a:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c6e:	d307      	bcc.n	8002c80 <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <adf5355_set_freq+0xe6>
			return -EINVAL;
 8002c80:	f06f 0315 	mvn.w	r3, #21
 8002c84:	e0cb      	b.n	8002e1e <adf5355_set_freq+0x27e>

		dev->rf_div_sel = 0;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002c98:	f083 0301 	eor.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002ca0:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->out_power);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002ca8:	01db      	lsls	r3, r3, #7
 8002caa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002cae:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8002cb4:	e00e      	b.n	8002cd4 <adf5355_set_freq+0x134>
			freq <<= 1;
 8002cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cba:	1894      	adds	r4, r2, r2
 8002cbc:	eb43 0503 	adc.w	r5, r3, r3
 8002cc0:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		while (freq < dev->min_vco_freq) {
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ce4:	d3e7      	bcc.n	8002cb6 <adf5355_set_freq+0x116>
 8002ce6:	e027      	b.n	8002d38 <adf5355_set_freq+0x198>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 8002ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cec:	494e      	ldr	r1, [pc, #312]	@ (8002e28 <adf5355_set_freq+0x288>)
 8002cee:	428a      	cmp	r2, r1
 8002cf0:	f173 0303 	sbcs.w	r3, r3, #3
 8002cf4:	d206      	bcs.n	8002d04 <adf5355_set_freq+0x164>
 8002cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfa:	494c      	ldr	r1, [pc, #304]	@ (8002e2c <adf5355_set_freq+0x28c>)
 8002cfc:	428a      	cmp	r2, r1
 8002cfe:	f173 0301 	sbcs.w	r3, r3, #1
 8002d02:	d202      	bcs.n	8002d0a <adf5355_set_freq+0x16a>
			return -EINVAL;
 8002d04:	f06f 0315 	mvn.w	r3, #21
 8002d08:	e089      	b.n	8002e1e <adf5355_set_freq+0x27e>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002d14:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]

		dev->freq_req >>= 1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	0842      	lsrs	r2, r0, #1
 8002d2c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002d30:	084b      	lsrs	r3, r1, #1
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	}

	cp_bleed = adf5355_calc_reg0_to_2(dev, 1);
 8002d38:	2101      	movs	r1, #1
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff fc4a 	bl	80025d4 <adf5355_calc_reg0_to_2>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4a3b      	ldr	r2, [pc, #236]	@ (8002e30 <adf5355_set_freq+0x290>)
 8002d44:	6013      	str	r3, [r2, #0]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	791b      	ldrb	r3, [r3, #4]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <adf5355_set_freq+0x1b6>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	791b      	ldrb	r3, [r3, #4]
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d10c      	bne.n	8002d70 <adf5355_set_freq+0x1d0>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d5a:	0b9b      	lsrs	r3, r3, #14
 8002d5c:	011a      	lsls	r2, r3, #4
 8002d5e:	4b35      	ldr	r3, [pc, #212]	@ (8002e34 <adf5355_set_freq+0x294>)
 8002d60:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d66:	0b92      	lsrs	r2, r2, #14
 8002d68:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->out_power) |
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d82:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->out_power) |
 8002d84:	431a      	orrs	r2, r3
					ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	025b      	lsls	r3, r3, #9
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8002d94:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002d9c:	02db      	lsls	r3, r3, #11
					ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002da2:	4b23      	ldr	r3, [pc, #140]	@ (8002e30 <adf5355_set_freq+0x290>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	035b      	lsls	r3, r3, #13
 8002da8:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8002dac:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002db4:	055b      	lsls	r3, r3, #21
 8002db6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002dba:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d104      	bne.n	8002dce <adf5355_set_freq+0x22e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002dca:	065b      	lsls	r3, r3, #25
 8002dcc:	e000      	b.n	8002dd0 <adf5355_set_freq+0x230>
 8002dce:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 8002dd0:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002dd8:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 8002dda:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002de2:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002de4:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <adf5355_set_freq+0x256>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d104      	bne.n	8002e00 <adf5355_set_freq+0x260>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002dfc:	07db      	lsls	r3, r3, #31
 8002dfe:	e000      	b.n	8002e02 <adf5355_set_freq+0x262>
 8002e00:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002e02:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 8002e04:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8002e08:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->out_power) |
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	return adf5355_reg_config(dev, dev->all_synced);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	795b      	ldrb	r3, [r3, #5]
 8002e14:	4619      	mov	r1, r3
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff fcfe 	bl	8002818 <adf5355_reg_config>
 8002e1c:	4603      	mov	r3, r0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e28:	2a9f8801 	.word	0x2a9f8801
 8002e2c:	954fc400 	.word	0x954fc400
 8002e30:	20000600 	.word	0x20000600
 8002e34:	0003fff0 	.word	0x0003fff0

08002e38 <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	6078      	str	r0, [r7, #4]
	adf5355_calc_pfd(dev, 0);
 8002e40:	2100      	movs	r1, #0
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fc5a 	bl	80026fc <adf5355_calc_pfd>

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a67      	ldr	r2, [pc, #412]	@ (8002fe8 <adf5355_setup+0x1b0>)
 8002e4c:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(1) |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a66      	ldr	r2, [pc, #408]	@ (8002fec <adf5355_setup+0x1b4>)
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(1) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d003      	beq.n	8002e64 <adf5355_setup+0x2c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	791b      	ldrb	r3, [r3, #4]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d101      	bne.n	8002e68 <adf5355_setup+0x30>
 8002e64:	4a62      	ldr	r2, [pc, #392]	@ (8002ff0 <adf5355_setup+0x1b8>)
 8002e66:	e000      	b.n	8002e6a <adf5355_setup+0x32>
 8002e68:	4a62      	ldr	r2, [pc, #392]	@ (8002ff4 <adf5355_setup+0x1bc>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	uint32_t tmp;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e72:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 8002e76:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 8002e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff8 <adf5355_setup+0x1c0>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	0c9b      	lsrs	r3, r3, #18
 8002e82:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d906      	bls.n	8002e98 <adf5355_setup+0x60>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf28      	it	cs
 8002e94:	4613      	movcs	r3, r2
 8002e96:	e000      	b.n	8002e9a <adf5355_setup+0x62>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	039a      	lsls	r2, r3, #14
 8002ea0:	4b56      	ldr	r3, [pc, #344]	@ (8002ffc <adf5355_setup+0x1c4>)
 8002ea2:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002eae:	fb00 f202 	mul.w	r2, r0, r2
 8002eb2:	440a      	add	r2, r1
 8002eb4:	0052      	lsls	r2, r2, #1
 8002eb6:	1e51      	subs	r1, r2, #1
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4851      	ldr	r0, [pc, #324]	@ (8003000 <adf5355_setup+0x1c8>)
 8002ebc:	fb00 f202 	mul.w	r2, r0, r2
 8002ec0:	fbb1 f2f2 	udiv	r2, r1, r2
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8002eca:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4849      	ldr	r0, [pc, #292]	@ (8003000 <adf5355_setup+0x1c8>)
 8002edc:	fb00 f303 	mul.w	r3, r0, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	1e5a      	subs	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4846      	ldr	r0, [pc, #280]	@ (8003000 <adf5355_setup+0x1c8>)
 8002ee8:	fb00 f303 	mul.w	r3, r0, r3
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	025b      	lsls	r3, r3, #9
 8002ef2:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 8002ef6:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	7909      	ldrb	r1, [r1, #4]
 8002f02:	2904      	cmp	r1, #4
 8002f04:	d003      	beq.n	8002f0e <adf5355_setup+0xd6>
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	7909      	ldrb	r1, [r1, #4]
 8002f0a:	2905      	cmp	r1, #5
 8002f0c:	d101      	bne.n	8002f12 <adf5355_setup+0xda>
 8002f0e:	493d      	ldr	r1, [pc, #244]	@ (8003004 <adf5355_setup+0x1cc>)
 8002f10:	e000      	b.n	8002f14 <adf5355_setup+0xdc>
 8002f12:	493d      	ldr	r1, [pc, #244]	@ (8003008 <adf5355_setup+0x1d0>)
 8002f14:	440b      	add	r3, r1
 8002f16:	1e59      	subs	r1, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	791b      	ldrb	r3, [r3, #4]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d003      	beq.n	8002f28 <adf5355_setup+0xf0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d101      	bne.n	8002f2c <adf5355_setup+0xf4>
 8002f28:	4b36      	ldr	r3, [pc, #216]	@ (8003004 <adf5355_setup+0x1cc>)
 8002f2a:	e000      	b.n	8002f2e <adf5355_setup+0xf6>
 8002f2c:	4b36      	ldr	r3, [pc, #216]	@ (8003008 <adf5355_setup+0x1d0>)
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8002f34:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	4a32      	ldr	r2, [pc, #200]	@ (800300c <adf5355_setup+0x1d4>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	09db      	lsrs	r3, r3, #7
 8002f48:	3301      	adds	r3, #1
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d904      	bls.n	8002f5e <adf5355_setup+0x126>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2bff      	cmp	r3, #255	@ 0xff
 8002f58:	bf28      	it	cs
 8002f5a:	23ff      	movcs	r3, #255	@ 0xff
 8002f5c:	e000      	b.n	8002f60 <adf5355_setup+0x128>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f70:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <adf5355_setup+0x1d8>)
 8002f72:	4413      	add	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	3202      	adds	r2, #2
 8002f7e:	fbb1 f2f2 	udiv	r2, r1, r2
 8002f82:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	019b      	lsls	r3, r3, #6
 8002f90:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 8002f94:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002f98:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8003014 <adf5355_setup+0x1dc>)
 8002fa4:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d003      	beq.n	8002fb6 <adf5355_setup+0x17e>
				      || (dev->dev_id == ADF5356))?
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	791b      	ldrb	r3, [r3, #4]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d102      	bne.n	8002fbc <adf5355_setup+0x184>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 8002fb6:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 8002fba:	e000      	b.n	8002fbe <adf5355_setup+0x186>
 8002fbc:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <adf5355_setup+0x1e0>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8002fd4:	9100      	str	r1, [sp, #0]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fde2 	bl	8002ba0 <adf5355_set_freq>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	00800025 	.word	0x00800025
 8002fec:	04000007 	.word	0x04000007
 8002ff0:	15596568 	.word	0x15596568
 8002ff4:	102d0428 	.word	0x102d0428
 8002ff8:	6fd91d85 	.word	0x6fd91d85
 8002ffc:	00ffc000 	.word	0x00ffc000
 8003000:	000186a0 	.word	0x000186a0
 8003004:	00186a00 	.word	0x00186a00
 8003008:	00249f00 	.word	0x00249f00
 800300c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003010:	00f423ff 	.word	0x00f423ff
 8003014:	0061300b 	.word	0x0061300b
 8003018:	0001041c 	.word	0x0001041c
 800301c:	00000000 	.word	0x00000000

08003020 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 800302a:	2198      	movs	r1, #152	@ 0x98
 800302c:	2001      	movs	r0, #1
 800302e:	f000 fb0b 	bl	8003648 <no_os_calloc>
 8003032:	60f8      	str	r0, [r7, #12]
	if (!dev)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <adf5355_init+0x20>
		return -ENOMEM;
 800303a:	f06f 030b 	mvn.w	r3, #11
 800303e:	e0ea      	b.n	8003216 <adf5355_init+0x1f6>

	dev->spi_desc = init_param->spi_init;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	791a      	ldrb	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	7c1a      	ldrb	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	7f1a      	ldrb	r2, [r3, #28]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	7f5a      	ldrb	r2, [r3, #29]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	7f9a      	ldrb	r2, [r3, #30]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	7fda      	ldrb	r2, [r3, #31]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->out_power = init_param->out_power;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80030c8:	461a      	mov	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->ref_diff_en = init_param->ref_diff_en;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->ref_doubler_en = init_param->ref_doubler_en;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->ref_div2_en = init_param->ref_div2_en;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->mux_out_sel = init_param->mux_out_sel;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	dev->outb_sel_fund = init_param->outb_sel_fund;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->num_channels = 1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003124:	4a4c      	ldr	r2, [pc, #304]	@ (8003258 <adf5355_init+0x238>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d903      	bls.n	8003132 <adf5355_init+0x112>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	switch (dev->dev_id) {
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	2b05      	cmp	r3, #5
 8003138:	d85a      	bhi.n	80031f0 <adf5355_init+0x1d0>
 800313a:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <adf5355_init+0x120>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003159 	.word	0x08003159
 8003144:	0800317f 	.word	0x0800317f
 8003148:	080031a5 	.word	0x080031a5
 800314c:	080031cb 	.word	0x080031cb
 8003150:	08003159 	.word	0x08003159
 8003154:	08003159 	.word	0x08003159
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	a331      	add	r3, pc, #196	@ (adr r3, 8003220 <adf5355_init+0x200>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	a330      	add	r3, pc, #192	@ (adr r3, 8003228 <adf5355_init+0x208>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	a32f      	add	r3, pc, #188	@ (adr r3, 8003230 <adf5355_init+0x210>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 800317c:	e038      	b.n	80031f0 <adf5355_init+0x1d0>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	a32d      	add	r3, pc, #180	@ (adr r3, 8003238 <adf5355_init+0x218>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	a326      	add	r3, pc, #152	@ (adr r3, 8003228 <adf5355_init+0x208>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	a325      	add	r3, pc, #148	@ (adr r3, 8003230 <adf5355_init+0x210>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80031a2:	e025      	b.n	80031f0 <adf5355_init+0x1d0>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4a2d      	ldr	r2, [pc, #180]	@ (800325c <adf5355_init+0x23c>)
 80031a8:	f04f 0301 	mov.w	r3, #1
 80031ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	a31d      	add	r3, pc, #116	@ (adr r3, 8003228 <adf5355_init+0x208>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	a31c      	add	r3, pc, #112	@ (adr r3, 8003230 <adf5355_init+0x210>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80031c8:	e012      	b.n	80031f0 <adf5355_init+0x1d0>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	a31c      	add	r3, pc, #112	@ (adr r3, 8003240 <adf5355_init+0x220>)
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	a31b      	add	r3, pc, #108	@ (adr r3, 8003248 <adf5355_init+0x228>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	a31a      	add	r3, pc, #104	@ (adr r3, 8003250 <adf5355_init+0x230>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80031ee:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fe21 	bl	8002e38 <adf5355_setup>
 80031f6:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <adf5355_init+0x1e8>
		goto error_spi;

	*device = dev;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

	return ret;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	e006      	b.n	8003216 <adf5355_init+0x1f6>
		goto error_spi;
 8003208:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fcf7 	bl	8005c02 <HAL_SPI_DeInit>

	return ret;
 8003214:	68bb      	ldr	r3, [r7, #8]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	954fc400 	.word	0x954fc400
 8003224:	00000001 	.word	0x00000001
 8003228:	032a9f88 	.word	0x032a9f88
 800322c:	00000000 	.word	0x00000000
 8003230:	caa7e200 	.word	0xcaa7e200
 8003234:	00000000 	.word	0x00000000
 8003238:	2a9f8800 	.word	0x2a9f8800
 800323c:	00000003 	.word	0x00000003
 8003240:	89640200 	.word	0x89640200
 8003244:	00000001 	.word	0x00000001
 8003248:	0312c804 	.word	0x0312c804
 800324c:	00000000 	.word	0x00000000
 8003250:	c4b20100 	.word	0xc4b20100
 8003254:	00000000 	.word	0x00000000
 8003258:	047868c0 	.word	0x047868c0
 800325c:	0642ac00 	.word	0x0642ac00

08003260 <ADF5355_SetFrequencyOut>:

/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void* ADF5355_SetFrequencyOut(void* new_freq){
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60fb      	str	r3, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003274:	4293      	cmp	r3, r2
 8003276:	d803      	bhi.n	8003280 <ADF5355_SetFrequencyOut+0x20>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b63      	cmp	r3, #99	@ 0x63
 800327e:	d803      	bhi.n	8003288 <ADF5355_SetFrequencyOut+0x28>
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <ADF5355_SetFrequencyOut+0x48>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e007      	b.n	8003298 <ADF5355_SetFrequencyOut+0x38>
	else {
		freq_out = *value;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <ADF5355_SetFrequencyOut+0x4c>)
 8003290:	801a      	strh	r2, [r3, #0]
		ret = true;
 8003292:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <ADF5355_SetFrequencyOut+0x48>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <ADF5355_SetFrequencyOut+0x48>)
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000063d 	.word	0x2000063d
 80032ac:	20000118 	.word	0x20000118

080032b0 <ADF5355_SetFrequencyIn>:

void* ADF5355_SetFrequencyIn(void* new_freq){
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60fb      	str	r3, [r7, #12]
	if (*value > 200 || *value < 5) ret = false;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80032c2:	d803      	bhi.n	80032cc <ADF5355_SetFrequencyIn+0x1c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d803      	bhi.n	80032d4 <ADF5355_SetFrequencyIn+0x24>
 80032cc:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <ADF5355_SetFrequencyIn+0x44>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e007      	b.n	80032e4 <ADF5355_SetFrequencyIn+0x34>
	else {
		freq_in = *value;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <ADF5355_SetFrequencyIn+0x48>)
 80032dc:	701a      	strb	r2, [r3, #0]
		ret = true;
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <ADF5355_SetFrequencyIn+0x44>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <ADF5355_SetFrequencyIn+0x44>)
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	2000063e 	.word	0x2000063e
 80032f8:	2000011a 	.word	0x2000011a

080032fc <ADF5355_SetPower>:

void* ADF5355_SetPower(void* new_pow){
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	static bool ret;
	int8_t* value = (int8_t*)new_pow;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60fb      	str	r3, [r7, #12]
	if (*value > 3 || *value < 0) ret = false;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f993 3000 	ldrsb.w	r3, [r3]
 800330e:	2b03      	cmp	r3, #3
 8003310:	dc04      	bgt.n	800331c <ADF5355_SetPower+0x20>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f993 3000 	ldrsb.w	r3, [r3]
 8003318:	2b00      	cmp	r3, #0
 800331a:	da03      	bge.n	8003324 <ADF5355_SetPower+0x28>
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <ADF5355_SetPower+0x48>)
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e007      	b.n	8003334 <ADF5355_SetPower+0x38>
	else {
		out_power = *value;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f993 2000 	ldrsb.w	r2, [r3]
 800332a:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <ADF5355_SetPower+0x4c>)
 800332c:	701a      	strb	r2, [r3, #0]
		ret = true;
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <ADF5355_SetPower+0x48>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <ADF5355_SetPower+0x48>)
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	2000063f 	.word	0x2000063f
 8003348:	2000011c 	.word	0x2000011c

0800334c <ADF5355_SetCurrent>:

void* ADF5355_SetCurrent(void* new_curr){
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_curr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]
	if (*value > 5000 || *value < 310) ret = false;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d804      	bhi.n	800336e <ADF5355_SetCurrent+0x22>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800336c:	d203      	bcs.n	8003376 <ADF5355_SetCurrent+0x2a>
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <ADF5355_SetCurrent+0x48>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e006      	b.n	8003384 <ADF5355_SetCurrent+0x38>
	else {
		cp_ua = *value;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <ADF5355_SetCurrent+0x4c>)
 800337c:	6013      	str	r3, [r2, #0]
		ret = true;
 800337e:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <ADF5355_SetCurrent+0x48>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <ADF5355_SetCurrent+0x48>)
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000640 	.word	0x20000640
 8003398:	20000120 	.word	0x20000120

0800339c <ADF5355_SetMuxOut>:

void* ADF5355_SetMuxOut(void* new_mux_out){
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	static bool ret;
	enum adf5355_mux_out_sel* value = (enum adf5355_mux_out_sel*)new_mux_out;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60fb      	str	r3, [r7, #12]
	if (*value > ADF5355_MUXOUT_DIGITAL_LOCK_DETECT || *value < ADF5355_MUXOUT_THREESTATE) ret = false;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d903      	bls.n	80033b8 <ADF5355_SetMuxOut+0x1c>
 80033b0:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <ADF5355_SetMuxOut+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e012      	b.n	80033de <ADF5355_SetMuxOut+0x42>
	else {
		mux_out = *value;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <ADF5355_SetMuxOut+0x50>)
 80033be:	701a      	strb	r2, [r3, #0]
		if (synced){
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <ADF5355_SetMuxOut+0x54>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <ADF5355_SetMuxOut+0x3c>
			adf5355_set_muxout(dev, mux_out);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <ADF5355_SetMuxOut+0x58>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a07      	ldr	r2, [pc, #28]	@ (80033ec <ADF5355_SetMuxOut+0x50>)
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fbc6 	bl	8002b64 <adf5355_set_muxout>
		}
		ret = true;
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <ADF5355_SetMuxOut+0x4c>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80033de:	4b02      	ldr	r3, [pc, #8]	@ (80033e8 <ADF5355_SetMuxOut+0x4c>)
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000641 	.word	0x20000641
 80033ec:	20000124 	.word	0x20000124
 80033f0:	2000063c 	.word	0x2000063c
 80033f4:	20000638 	.word	0x20000638

080033f8 <ADF5355_Enable>:

void* ADF5355_Enable(void* state){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <ADF5355_Enable+0x24>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d003      	beq.n	800341c <ADF5355_Enable+0x24>
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <ADF5355_Enable+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e01a      	b.n	8003452 <ADF5355_Enable+0x5a>
	else {
		outb_en = *value;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <ADF5355_Enable+0x68>)
 800342c:	701a      	strb	r2, [r3, #0]
		if (synced){
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <ADF5355_Enable+0x6c>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <ADF5355_Enable+0x54>
			adf5355_set_power(dev, outb_en, out_power);
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <ADF5355_Enable+0x70>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <ADF5355_Enable+0x68>)
 800343c:	7811      	ldrb	r1, [r2, #0]
 800343e:	4a0b      	ldr	r2, [pc, #44]	@ (800346c <ADF5355_Enable+0x74>)
 8003440:	f992 2000 	ldrsb.w	r2, [r2]
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fb2a 	bl	8002aa0 <adf5355_set_power>
		}
		ret = true;
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <ADF5355_Enable+0x64>)
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8003452:	4b02      	ldr	r3, [pc, #8]	@ (800345c <ADF5355_Enable+0x64>)
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000642 	.word	0x20000642
 8003460:	2000011b 	.word	0x2000011b
 8003464:	2000063c 	.word	0x2000063c
 8003468:	20000638 	.word	0x20000638
 800346c:	2000011c 	.word	0x2000011c

08003470 <ADF5355_Param_Init>:

void ADF5355_Param_Init(void){
 8003470:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 8003478:	4c4c      	ldr	r4, [pc, #304]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800347a:	4d4d      	ldr	r5, [pc, #308]	@ (80035b0 <ADF5355_Param_Init+0x140>)
 800347c:	6025      	str	r5, [r4, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 800347e:	4c4b      	ldr	r4, [pc, #300]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003480:	2501      	movs	r5, #1
 8003482:	7125      	strb	r5, [r4, #4]
	hadf5355.freq_req = (uint64_t)freq_out*(uint64_t)1000000; // Żądana częstotliwość wyjściowa w Hz
 8003484:	4c4b      	ldr	r4, [pc, #300]	@ (80035b4 <ADF5355_Param_Init+0x144>)
 8003486:	8824      	ldrh	r4, [r4, #0]
 8003488:	b2a4      	uxth	r4, r4
 800348a:	2500      	movs	r5, #0
 800348c:	46a0      	mov	r8, r4
 800348e:	46a9      	mov	r9, r5
 8003490:	4644      	mov	r4, r8
 8003492:	464d      	mov	r5, r9
 8003494:	f04f 0a00 	mov.w	sl, #0
 8003498:	f04f 0b00 	mov.w	fp, #0
 800349c:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 80034a0:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 80034a4:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 80034a8:	4654      	mov	r4, sl
 80034aa:	465d      	mov	r5, fp
 80034ac:	ebb4 0208 	subs.w	r2, r4, r8
 80034b0:	eb65 0309 	sbc.w	r3, r5, r9
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	f04f 0500 	mov.w	r5, #0
 80034bc:	025d      	lsls	r5, r3, #9
 80034be:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 80034c2:	0254      	lsls	r4, r2, #9
 80034c4:	4622      	mov	r2, r4
 80034c6:	462b      	mov	r3, r5
 80034c8:	eb12 0008 	adds.w	r0, r2, r8
 80034cc:	eb43 0109 	adc.w	r1, r3, r9
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	018b      	lsls	r3, r1, #6
 80034da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034de:	0182      	lsls	r2, r0, #6
 80034e0:	1a14      	subs	r4, r2, r0
 80034e2:	603c      	str	r4, [r7, #0]
 80034e4:	eb63 0301 	sbc.w	r3, r3, r1
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034ee:	460b      	mov	r3, r1
 80034f0:	eb13 0308 	adds.w	r3, r3, r8
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	eb43 0309 	adc.w	r3, r3, r9
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b2b      	ldr	r3, [pc, #172]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003500:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003504:	e9c3 1202 	strd	r1, r2, [r3, #8]
	hadf5355.freq_req_chan = 1; // Kanał częstotliwości
 8003508:	4b28      	ldr	r3, [pc, #160]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800350a:	2201      	movs	r2, #1
 800350c:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = freq_in*1000000; // Częstotliwość zegara wejściowego w Hz
 800350e:	4b2a      	ldr	r3, [pc, #168]	@ (80035b8 <ADF5355_Param_Init+0x148>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b29      	ldr	r3, [pc, #164]	@ (80035bc <ADF5355_Param_Init+0x14c>)
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	461a      	mov	r2, r3
 800351c:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800351e:	615a      	str	r2, [r3, #20]
	hadf5355.cp_ua = cp_ua; // Prąd pompy ładunkowej w mikroamperach
 8003520:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <ADF5355_Param_Init+0x150>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a21      	ldr	r2, [pc, #132]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003526:	6193      	str	r3, [r2, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 8003528:	4b20      	ldr	r3, [pc, #128]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = true;  // Flaga aktywacji bramkowania prądu wycieku
 800352e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003530:	2201      	movs	r2, #1
 8003532:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003536:	2200      	movs	r2, #0
 8003538:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 800353a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800353c:	2200      	movs	r2, #0
 800353e:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = false;  // Flaga aktywacji wyjścia A
 8003540:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = outb_en;  // Flaga aktywacji wyjścia B
 8003548:	4b1e      	ldr	r3, [pc, #120]	@ (80035c4 <ADF5355_Param_Init+0x154>)
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800354e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.out_power = out_power;  // Moc wyjścia B
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <ADF5355_Param_Init+0x158>)
 8003554:	f993 3000 	ldrsb.w	r3, [r3]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800355c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.phase_detector_polarity_neg = false;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 8003560:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 8003568:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 8003570:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 8003580:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.mux_out_sel = mux_out;  // Wybór wyjścia mux
 8003588:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <ADF5355_Param_Init+0x15c>)
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 800358e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <ADF5355_Param_Init+0x13c>)
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	synced = true;
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <ADF5355_Param_Init+0x160>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035aa:	4770      	bx	lr
 80035ac:	20000608 	.word	0x20000608
 80035b0:	200003dc 	.word	0x200003dc
 80035b4:	20000118 	.word	0x20000118
 80035b8:	2000011a 	.word	0x2000011a
 80035bc:	000f4240 	.word	0x000f4240
 80035c0:	20000120 	.word	0x20000120
 80035c4:	2000011b 	.word	0x2000011b
 80035c8:	2000011c 	.word	0x2000011c
 80035cc:	20000124 	.word	0x20000124
 80035d0:	2000063c 	.word	0x2000063c

080035d4 <ADF5355_Load>:


void* ADF5355_Load(void* arg){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	ADF5355_Param_Init();
 80035dc:	f7ff ff48 	bl	8003470 <ADF5355_Param_Init>
	static bool ret = false;
	int32_t response = adf5355_init(&dev, &hadf5355);
 80035e0:	4907      	ldr	r1, [pc, #28]	@ (8003600 <ADF5355_Load+0x2c>)
 80035e2:	4808      	ldr	r0, [pc, #32]	@ (8003604 <ADF5355_Load+0x30>)
 80035e4:	f7ff fd1c 	bl	8003020 <adf5355_init>
 80035e8:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <ADF5355_Load+0x22>
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <ADF5355_Load+0x34>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
	return &ret;
 80035f6:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <ADF5355_Load+0x34>)
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000608 	.word	0x20000608
 8003604:	20000638 	.word	0x20000638
 8003608:	20000643 	.word	0x20000643

0800360c <ADF5355_Run>:

void* ADF5355_Run(void* arg){
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	static bool ret = false;
	int32_t response = adf5355_change_freq(dev, hadf5355.freq_req);
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <ADF5355_Run+0x30>)
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <ADF5355_Run+0x34>)
 800361a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800361e:	4608      	mov	r0, r1
 8003620:	f7ff fa16 	bl	8002a50 <adf5355_change_freq>
 8003624:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <ADF5355_Run+0x26>
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <ADF5355_Run+0x38>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
	return &ret;
 8003632:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <ADF5355_Run+0x38>)
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000638 	.word	0x20000638
 8003640:	20000608 	.word	0x20000608
 8003644:	20000644 	.word	0x20000644

08003648 <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f008 f96f 	bl	800b938 <calloc>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <no_os_greatest_common_divisor+0x16>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d112      	bne.n	80036a0 <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4293      	cmp	r3, r2
 8003680:	bf38      	it	cc
 8003682:	4613      	movcc	r3, r2
 8003684:	e010      	b.n	80036a8 <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	fbb3 f2f2 	udiv	r2, r3, r2
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	fb01 f202 	mul.w	r2, r1, r2
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
		a = b;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	607b      	str	r3, [r7, #4]
		b = div;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ef      	bne.n	8003686 <no_os_greatest_common_divisor+0x22>
	}

	return a;
 80036a6:	687b      	ldr	r3, [r7, #4]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d6:	f7fd fa97 	bl	8000c08 <__aeabi_uldivmod>
 80036da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e8:	f7fd fa8e 	bl	8000c08 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 80036f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370e:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_Init+0x3c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a0b      	ldr	r2, [pc, #44]	@ (8003740 <HAL_Init+0x3c>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003718:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371a:	2003      	movs	r0, #3
 800371c:	f000 f903 	bl	8003926 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003720:	200f      	movs	r0, #15
 8003722:	f7fe fa51 	bl	8001bc8 <HAL_InitTick>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	71fb      	strb	r3, [r7, #7]
 8003730:	e001      	b.n	8003736 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003732:	f7fe fa21 	bl	8001b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003736:	79fb      	ldrb	r3, [r7, #7]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40022000 	.word	0x40022000

08003744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_IncTick+0x20>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_IncTick+0x24>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <HAL_IncTick+0x24>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000012c 	.word	0x2000012c
 8003768:	20000648 	.word	0x20000648

0800376c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return uwTick;
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <HAL_GetTick+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000648 	.word	0x20000648

08003784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7ff ffee 	bl	800376c <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d005      	beq.n	80037aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800379e:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <HAL_Delay+0x44>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037aa:	bf00      	nop
 80037ac:	f7ff ffde 	bl	800376c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d8f7      	bhi.n	80037ac <HAL_Delay+0x28>
  {
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000012c 	.word	0x2000012c

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	@ (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	@ (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	@ (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	@ 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff4c 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800394e:	f7ff ff61 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003952:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	6978      	ldr	r0, [r7, #20]
 800395a:	f7ff ffb1 	bl	80038c0 <NVIC_EncodePriority>
 800395e:	4602      	mov	r2, r0
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff80 	bl	800386c <__NVIC_SetPriority>
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff54 	bl	8003830 <__NVIC_EnableIRQ>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e098      	b.n	8003ad4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae0 <HAL_DMA_Init+0x150>)
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d80f      	bhi.n	80039ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae4 <HAL_DMA_Init+0x154>)
 80039b6:	4413      	add	r3, r2
 80039b8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ae8 <HAL_DMA_Init+0x158>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	009a      	lsls	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a48      	ldr	r2, [pc, #288]	@ (8003aec <HAL_DMA_Init+0x15c>)
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80039cc:	e00e      	b.n	80039ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b46      	ldr	r3, [pc, #280]	@ (8003af0 <HAL_DMA_Init+0x160>)
 80039d6:	4413      	add	r3, r2
 80039d8:	4a43      	ldr	r2, [pc, #268]	@ (8003ae8 <HAL_DMA_Init+0x158>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a42      	ldr	r2, [pc, #264]	@ (8003af4 <HAL_DMA_Init+0x164>)
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a46:	d039      	beq.n	8003abc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	4a27      	ldr	r2, [pc, #156]	@ (8003aec <HAL_DMA_Init+0x15c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d11a      	bne.n	8003a88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a52:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_DMA_Init+0x168>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f003 031c 	and.w	r3, r3, #28
 8003a5e:	210f      	movs	r1, #15
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	4924      	ldr	r1, [pc, #144]	@ (8003af8 <HAL_DMA_Init+0x168>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a6c:	4b22      	ldr	r3, [pc, #136]	@ (8003af8 <HAL_DMA_Init+0x168>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	f003 031c 	and.w	r3, r3, #28
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	491d      	ldr	r1, [pc, #116]	@ (8003af8 <HAL_DMA_Init+0x168>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
 8003a86:	e019      	b.n	8003abc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a88:	4b1c      	ldr	r3, [pc, #112]	@ (8003afc <HAL_DMA_Init+0x16c>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a90:	f003 031c 	and.w	r3, r3, #28
 8003a94:	210f      	movs	r1, #15
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4917      	ldr	r1, [pc, #92]	@ (8003afc <HAL_DMA_Init+0x16c>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003aa2:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <HAL_DMA_Init+0x16c>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f003 031c 	and.w	r3, r3, #28
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	4911      	ldr	r1, [pc, #68]	@ (8003afc <HAL_DMA_Init+0x16c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40020407 	.word	0x40020407
 8003ae4:	bffdfff8 	.word	0xbffdfff8
 8003ae8:	cccccccd 	.word	0xcccccccd
 8003aec:	40020000 	.word	0x40020000
 8003af0:	bffdfbf8 	.word	0xbffdfbf8
 8003af4:	40020400 	.word	0x40020400
 8003af8:	400200a8 	.word	0x400200a8
 8003afc:	400204a8 	.word	0x400204a8

08003b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Start_IT+0x20>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e04b      	b.n	8003bb8 <HAL_DMA_Start_IT+0xb8>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d13a      	bne.n	8003baa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f95f 	bl	8003e1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 020e 	orr.w	r2, r2, #14
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e00f      	b.n	8003b98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 020a 	orr.w	r2, r2, #10
 8003b96:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e005      	b.n	8003bb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d008      	beq.n	8003bea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 020e 	bic.w	r2, r2, #14
 8003bf8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f003 021c 	and.w	r2, r3, #28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d005      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e029      	b.n	8003cb4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020e 	bic.w	r2, r2, #14
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	f003 021c 	and.w	r2, r3, #28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    }
  }
  return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f003 031c 	and.w	r3, r3, #28
 8003cde:	2204      	movs	r2, #4
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d026      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x7a>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d021      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	f003 021c 	and.w	r2, r3, #28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	2104      	movs	r1, #4
 8003d20:	fa01 f202 	lsl.w	r2, r1, r2
 8003d24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d071      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d36:	e06c      	b.n	8003e12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f003 031c 	and.w	r3, r3, #28
 8003d40:	2202      	movs	r2, #2
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02e      	beq.n	8003daa <HAL_DMA_IRQHandler+0xec>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d029      	beq.n	8003daa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 020a 	bic.w	r2, r2, #10
 8003d72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d80:	f003 021c 	and.w	r2, r3, #28
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	2102      	movs	r1, #2
 8003d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d038      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003da8:	e033      	b.n	8003e12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f003 031c 	and.w	r3, r3, #28
 8003db2:	2208      	movs	r2, #8
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d02a      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x156>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d025      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 020e 	bic.w	r2, r2, #14
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	f003 021c 	and.w	r2, r3, #28
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
}
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f003 021c 	and.w	r2, r3, #28
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d108      	bne.n	8003e60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e5e:	e007      	b.n	8003e70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8a:	e17f      	b.n	800418c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2101      	movs	r1, #1
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8171 	beq.w	8004186 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d005      	beq.n	8003ebc <HAL_GPIO_Init+0x40>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d130      	bne.n	8003f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 0201 	and.w	r2, r3, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d118      	bne.n	8003f5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f30:	2201      	movs	r2, #1
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	f003 0201 	and.w	r2, r3, #1
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d017      	beq.n	8003f98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2203      	movs	r2, #3
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d123      	bne.n	8003fec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	6939      	ldr	r1, [r7, #16]
 8003fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80ac 	beq.w	8004186 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402e:	4b5f      	ldr	r3, [pc, #380]	@ (80041ac <HAL_GPIO_Init+0x330>)
 8004030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004032:	4a5e      	ldr	r2, [pc, #376]	@ (80041ac <HAL_GPIO_Init+0x330>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6613      	str	r3, [r2, #96]	@ 0x60
 800403a:	4b5c      	ldr	r3, [pc, #368]	@ (80041ac <HAL_GPIO_Init+0x330>)
 800403c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004046:	4a5a      	ldr	r2, [pc, #360]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	3302      	adds	r3, #2
 800404e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004070:	d025      	beq.n	80040be <HAL_GPIO_Init+0x242>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4f      	ldr	r2, [pc, #316]	@ (80041b4 <HAL_GPIO_Init+0x338>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01f      	beq.n	80040ba <HAL_GPIO_Init+0x23e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4e      	ldr	r2, [pc, #312]	@ (80041b8 <HAL_GPIO_Init+0x33c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d019      	beq.n	80040b6 <HAL_GPIO_Init+0x23a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4d      	ldr	r2, [pc, #308]	@ (80041bc <HAL_GPIO_Init+0x340>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_Init+0x236>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4c      	ldr	r2, [pc, #304]	@ (80041c0 <HAL_GPIO_Init+0x344>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_Init+0x232>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4b      	ldr	r2, [pc, #300]	@ (80041c4 <HAL_GPIO_Init+0x348>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_Init+0x22e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4a      	ldr	r2, [pc, #296]	@ (80041c8 <HAL_GPIO_Init+0x34c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_Init+0x22a>
 80040a2:	2306      	movs	r3, #6
 80040a4:	e00c      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040a6:	2307      	movs	r3, #7
 80040a8:	e00a      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040aa:	2305      	movs	r3, #5
 80040ac:	e008      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040ae:	2304      	movs	r3, #4
 80040b0:	e006      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040b2:	2303      	movs	r3, #3
 80040b4:	e004      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e002      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040be:	2300      	movs	r3, #0
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	f002 0203 	and.w	r2, r2, #3
 80040c6:	0092      	lsls	r2, r2, #2
 80040c8:	4093      	lsls	r3, r2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040d0:	4937      	ldr	r1, [pc, #220]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040de:	4b3b      	ldr	r3, [pc, #236]	@ (80041cc <HAL_GPIO_Init+0x350>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004102:	4a32      	ldr	r2, [pc, #200]	@ (80041cc <HAL_GPIO_Init+0x350>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004108:	4b30      	ldr	r3, [pc, #192]	@ (80041cc <HAL_GPIO_Init+0x350>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800412c:	4a27      	ldr	r2, [pc, #156]	@ (80041cc <HAL_GPIO_Init+0x350>)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004132:	4b26      	ldr	r3, [pc, #152]	@ (80041cc <HAL_GPIO_Init+0x350>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004156:	4a1d      	ldr	r2, [pc, #116]	@ (80041cc <HAL_GPIO_Init+0x350>)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <HAL_GPIO_Init+0x350>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004180:	4a12      	ldr	r2, [pc, #72]	@ (80041cc <HAL_GPIO_Init+0x350>)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	3301      	adds	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	f47f ae78 	bne.w	8003e8c <HAL_GPIO_Init+0x10>
  }
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40010000 	.word	0x40010000
 80041b4:	48000400 	.word	0x48000400
 80041b8:	48000800 	.word	0x48000800
 80041bc:	48000c00 	.word	0x48000c00
 80041c0:	48001000 	.word	0x48001000
 80041c4:	48001400 	.word	0x48001400
 80041c8:	48001800 	.word	0x48001800
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041de:	e0cd      	b.n	800437c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041e0:	2201      	movs	r2, #1
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80c0 	beq.w	8004376 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80041f6:	4a68      	ldr	r2, [pc, #416]	@ (8004398 <HAL_GPIO_DeInit+0x1c8>)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	3302      	adds	r3, #2
 80041fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004202:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	220f      	movs	r2, #15
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800421e:	d025      	beq.n	800426c <HAL_GPIO_DeInit+0x9c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a5e      	ldr	r2, [pc, #376]	@ (800439c <HAL_GPIO_DeInit+0x1cc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01f      	beq.n	8004268 <HAL_GPIO_DeInit+0x98>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a5d      	ldr	r2, [pc, #372]	@ (80043a0 <HAL_GPIO_DeInit+0x1d0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d019      	beq.n	8004264 <HAL_GPIO_DeInit+0x94>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a5c      	ldr	r2, [pc, #368]	@ (80043a4 <HAL_GPIO_DeInit+0x1d4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <HAL_GPIO_DeInit+0x90>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a5b      	ldr	r2, [pc, #364]	@ (80043a8 <HAL_GPIO_DeInit+0x1d8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00d      	beq.n	800425c <HAL_GPIO_DeInit+0x8c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a5a      	ldr	r2, [pc, #360]	@ (80043ac <HAL_GPIO_DeInit+0x1dc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <HAL_GPIO_DeInit+0x88>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a59      	ldr	r2, [pc, #356]	@ (80043b0 <HAL_GPIO_DeInit+0x1e0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_GPIO_DeInit+0x84>
 8004250:	2306      	movs	r3, #6
 8004252:	e00c      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 8004254:	2307      	movs	r3, #7
 8004256:	e00a      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 8004258:	2305      	movs	r3, #5
 800425a:	e008      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 800425c:	2304      	movs	r3, #4
 800425e:	e006      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 8004260:	2303      	movs	r3, #3
 8004262:	e004      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 8004264:	2302      	movs	r3, #2
 8004266:	e002      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_GPIO_DeInit+0x9e>
 800426c:	2300      	movs	r3, #0
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	f002 0203 	and.w	r2, r2, #3
 8004274:	0092      	lsls	r2, r2, #2
 8004276:	4093      	lsls	r3, r2
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	429a      	cmp	r2, r3
 800427c:	d132      	bne.n	80042e4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800427e:	4b4d      	ldr	r3, [pc, #308]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	494b      	ldr	r1, [pc, #300]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 8004288:	4013      	ands	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800428c:	4b49      	ldr	r3, [pc, #292]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	4947      	ldr	r1, [pc, #284]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 8004296:	4013      	ands	r3, r2
 8004298:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800429a:	4b46      	ldr	r3, [pc, #280]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	4944      	ldr	r1, [pc, #272]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80042a8:	4b42      	ldr	r3, [pc, #264]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	4940      	ldr	r1, [pc, #256]	@ (80043b4 <HAL_GPIO_DeInit+0x1e4>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	220f      	movs	r2, #15
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042c6:	4a34      	ldr	r2, [pc, #208]	@ (8004398 <HAL_GPIO_DeInit+0x1c8>)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	3302      	adds	r3, #2
 80042ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	4830      	ldr	r0, [pc, #192]	@ (8004398 <HAL_GPIO_DeInit+0x1c8>)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	400a      	ands	r2, r1
 80042de:	3302      	adds	r3, #2
 80042e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	2103      	movs	r1, #3
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	08da      	lsrs	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3208      	adds	r2, #8
 8004300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	08d2      	lsrs	r2, r2, #3
 8004318:	4019      	ands	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3208      	adds	r2, #8
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2103      	movs	r1, #3
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	401a      	ands	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	2101      	movs	r1, #1
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2103      	movs	r1, #3
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	401a      	ands	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004366:	2101      	movs	r1, #1
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	401a      	ands	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	3301      	adds	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	f47f af2b 	bne.w	80041e0 <HAL_GPIO_DeInit+0x10>
  }
}
 800438a:	bf00      	nop
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40010000 	.word	0x40010000
 800439c:	48000400 	.word	0x48000400
 80043a0:	48000800 	.word	0x48000800
 80043a4:	48000c00 	.word	0x48000c00
 80043a8:	48001000 	.word	0x48001000
 80043ac:	48001400 	.word	0x48001400
 80043b0:	48001800 	.word	0x48001800
 80043b4:	40010400 	.word	0x40010400

080043b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
 80043c4:	4613      	mov	r3, r2
 80043c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043f2:	4b08      	ldr	r3, [pc, #32]	@ (8004414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043fe:	4a05      	ldr	r2, [pc, #20]	@ (8004414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc ffd0 	bl	80013ac <HAL_GPIO_EXTI_Callback>
  }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <HAL_PWREx_GetVoltageRange+0x18>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40007000 	.word	0x40007000

08004434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004442:	d130      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004444:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800444c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004450:	d038      	beq.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004452:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800445a:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004460:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2232      	movs	r2, #50	@ 0x32
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	4a1b      	ldr	r2, [pc, #108]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0c9b      	lsrs	r3, r3, #18
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004478:	e002      	b.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3b01      	subs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004480:	4b14      	ldr	r3, [pc, #80]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448c:	d102      	bne.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x60>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f2      	bne.n	800447a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004494:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a0:	d110      	bne.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a6:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b2:	d007      	beq.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044bc:	4a05      	ldr	r2, [pc, #20]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40007000 	.word	0x40007000
 80044d8:	20000114 	.word	0x20000114
 80044dc:	431bde83 	.word	0x431bde83

080044e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e3ca      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f2:	4b97      	ldr	r3, [pc, #604]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044fc:	4b94      	ldr	r3, [pc, #592]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80e4 	beq.w	80046dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_RCC_OscConfig+0x4a>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	f040 808b 	bne.w	8004638 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 8087 	bne.w	8004638 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800452a:	4b89      	ldr	r3, [pc, #548]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e3a2      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	4b82      	ldr	r3, [pc, #520]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_RCC_OscConfig+0x7c>
 8004552:	4b7f      	ldr	r3, [pc, #508]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800455a:	e005      	b.n	8004568 <HAL_RCC_OscConfig+0x88>
 800455c:	4b7c      	ldr	r3, [pc, #496]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004568:	4293      	cmp	r3, r2
 800456a:	d223      	bcs.n	80045b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fd87 	bl	8005084 <RCC_SetFlashLatencyFromMSIRange>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e383      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004580:	4b73      	ldr	r3, [pc, #460]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a72      	ldr	r2, [pc, #456]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004586:	f043 0308 	orr.w	r3, r3, #8
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b70      	ldr	r3, [pc, #448]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	496d      	ldr	r1, [pc, #436]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459e:	4b6c      	ldr	r3, [pc, #432]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	4968      	ldr	r1, [pc, #416]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	e025      	b.n	8004600 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b4:	4b66      	ldr	r3, [pc, #408]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a65      	ldr	r2, [pc, #404]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045ba:	f043 0308 	orr.w	r3, r3, #8
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b63      	ldr	r3, [pc, #396]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4960      	ldr	r1, [pc, #384]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	495b      	ldr	r1, [pc, #364]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd47 	bl	8005084 <RCC_SetFlashLatencyFromMSIRange>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e343      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004600:	f000 fc4a 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b52      	ldr	r3, [pc, #328]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	4950      	ldr	r1, [pc, #320]	@ (8004754 <HAL_RCC_OscConfig+0x274>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	4a4e      	ldr	r2, [pc, #312]	@ (8004758 <HAL_RCC_OscConfig+0x278>)
 800461e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004620:	4b4e      	ldr	r3, [pc, #312]	@ (800475c <HAL_RCC_OscConfig+0x27c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd facf 	bl	8001bc8 <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d052      	beq.n	80046da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	e327      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d032      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004640:	4b43      	ldr	r3, [pc, #268]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a42      	ldr	r2, [pc, #264]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800464c:	f7ff f88e 	bl	800376c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004654:	f7ff f88a 	bl	800376c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e310      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004666:	4b3a      	ldr	r3, [pc, #232]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004672:	4b37      	ldr	r3, [pc, #220]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a36      	ldr	r2, [pc, #216]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4931      	ldr	r1, [pc, #196]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004690:	4b2f      	ldr	r3, [pc, #188]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	492c      	ldr	r1, [pc, #176]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	e01a      	b.n	80046dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a29      	ldr	r2, [pc, #164]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046b2:	f7ff f85b 	bl	800376c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ba:	f7ff f857 	bl	800376c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e2dd      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046cc:	4b20      	ldr	r3, [pc, #128]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x1da>
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d074      	beq.n	80047d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d005      	beq.n	80046fa <HAL_RCC_OscConfig+0x21a>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d10e      	bne.n	8004712 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d10b      	bne.n	8004712 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d064      	beq.n	80047d0 <HAL_RCC_OscConfig+0x2f0>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d160      	bne.n	80047d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e2ba      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x24a>
 800471c:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0b      	ldr	r2, [pc, #44]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e026      	b.n	8004778 <HAL_RCC_OscConfig+0x298>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004732:	d115      	bne.n	8004760 <HAL_RCC_OscConfig+0x280>
 8004734:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a05      	ldr	r2, [pc, #20]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 800473a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a02      	ldr	r2, [pc, #8]	@ (8004750 <HAL_RCC_OscConfig+0x270>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e014      	b.n	8004778 <HAL_RCC_OscConfig+0x298>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	0800ec58 	.word	0x0800ec58
 8004758:	20000114 	.word	0x20000114
 800475c:	20000128 	.word	0x20000128
 8004760:	4ba0      	ldr	r3, [pc, #640]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a9f      	ldr	r2, [pc, #636]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b9d      	ldr	r3, [pc, #628]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a9c      	ldr	r2, [pc, #624]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d013      	beq.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fe fff4 	bl	800376c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fe fff0 	bl	800376c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e276      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479a:	4b92      	ldr	r3, [pc, #584]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x2a8>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe ffe0 	bl	800376c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe ffdc 	bl	800376c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	@ 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e262      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c2:	4b88      	ldr	r3, [pc, #544]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2d0>
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d060      	beq.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_OscConfig+0x310>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d119      	bne.n	800481e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d116      	bne.n	800481e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	4b7c      	ldr	r3, [pc, #496]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x328>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e23f      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b76      	ldr	r3, [pc, #472]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	4973      	ldr	r1, [pc, #460]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	e040      	b.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d023      	beq.n	800486e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004826:	4b6f      	ldr	r3, [pc, #444]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6e      	ldr	r2, [pc, #440]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fe ff9b 	bl	800376c <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483a:	f7fe ff97 	bl	800376c <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e21d      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484c:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	4b62      	ldr	r3, [pc, #392]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	495f      	ldr	r1, [pc, #380]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
 800486c:	e018      	b.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486e:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5c      	ldr	r2, [pc, #368]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fe ff77 	bl	800376c <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004882:	f7fe ff73 	bl	800376c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1f9      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004894:	4b53      	ldr	r3, [pc, #332]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03c      	beq.n	8004926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01c      	beq.n	80048ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b4:	4b4b      	ldr	r3, [pc, #300]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	4a4a      	ldr	r2, [pc, #296]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fe ff52 	bl	800376c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fe ff4e 	bl	800376c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1d4      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048de:	4b41      	ldr	r3, [pc, #260]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80048e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <HAL_RCC_OscConfig+0x3ec>
 80048ec:	e01b      	b.n	8004926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ee:	4b3d      	ldr	r3, [pc, #244]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80048f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f4:	4a3b      	ldr	r2, [pc, #236]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fe ff35 	bl	800376c <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004906:	f7fe ff31 	bl	800376c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1b7      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004918:	4b32      	ldr	r3, [pc, #200]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ef      	bne.n	8004906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a6 	beq.w	8004a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004938:	4b2a      	ldr	r3, [pc, #168]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10d      	bne.n	8004960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	4a26      	ldr	r2, [pc, #152]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 800494a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004950:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495c:	2301      	movs	r3, #1
 800495e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004960:	4b21      	ldr	r3, [pc, #132]	@ (80049e8 <HAL_RCC_OscConfig+0x508>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d118      	bne.n	800499e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496c:	4b1e      	ldr	r3, [pc, #120]	@ (80049e8 <HAL_RCC_OscConfig+0x508>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_RCC_OscConfig+0x508>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004978:	f7fe fef8 	bl	800376c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fe fef4 	bl	800376c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e17a      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004992:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <HAL_RCC_OscConfig+0x508>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d108      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4d8>
 80049a6:	4b0f      	ldr	r3, [pc, #60]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	4a0d      	ldr	r2, [pc, #52]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b6:	e029      	b.n	8004a0c <HAL_RCC_OscConfig+0x52c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b05      	cmp	r3, #5
 80049be:	d115      	bne.n	80049ec <HAL_RCC_OscConfig+0x50c>
 80049c0:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	4a07      	ldr	r2, [pc, #28]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	4a03      	ldr	r2, [pc, #12]	@ (80049e4 <HAL_RCC_OscConfig+0x504>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e0:	e014      	b.n	8004a0c <HAL_RCC_OscConfig+0x52c>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40007000 	.word	0x40007000
 80049ec:	4b9c      	ldr	r3, [pc, #624]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	4a9b      	ldr	r2, [pc, #620]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049fc:	4b98      	ldr	r3, [pc, #608]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a97      	ldr	r2, [pc, #604]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d016      	beq.n	8004a42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe feaa 	bl	800376c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fe fea6 	bl	800376c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e12a      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a32:	4b8b      	ldr	r3, [pc, #556]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ed      	beq.n	8004a1c <HAL_RCC_OscConfig+0x53c>
 8004a40:	e015      	b.n	8004a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fe fe93 	bl	800376c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fe fe8f 	bl	800376c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e113      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a60:	4b7f      	ldr	r3, [pc, #508]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ed      	bne.n	8004a4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b7a      	ldr	r3, [pc, #488]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	4a79      	ldr	r2, [pc, #484]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80fe 	beq.w	8004c86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	f040 80d0 	bne.w	8004c34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a94:	4b72      	ldr	r3, [pc, #456]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0203 	and.w	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d130      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d127      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d11f      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ad4:	2a07      	cmp	r2, #7
 8004ad6:	bf14      	ite	ne
 8004ad8:	2201      	movne	r2, #1
 8004ada:	2200      	moveq	r2, #0
 8004adc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d113      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d06e      	beq.n	8004be8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d069      	beq.n	8004be4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b10:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b1c:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0ad      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a4b      	ldr	r2, [pc, #300]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b38:	f7fe fe18 	bl	800376c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fe fe14 	bl	800376c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e09a      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b52:	4b43      	ldr	r3, [pc, #268]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5e:	4b40      	ldr	r3, [pc, #256]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	4b40      	ldr	r3, [pc, #256]	@ (8004c64 <HAL_RCC_OscConfig+0x784>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b78:	0212      	lsls	r2, r2, #8
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b80:	0852      	lsrs	r2, r2, #1
 8004b82:	3a01      	subs	r2, #1
 8004b84:	0552      	lsls	r2, r2, #21
 8004b86:	4311      	orrs	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b8c:	0852      	lsrs	r2, r2, #1
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	0652      	lsls	r2, r2, #25
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b98:	0912      	lsrs	r2, r2, #4
 8004b9a:	0452      	lsls	r2, r2, #17
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	4930      	ldr	r1, [pc, #192]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bbc:	f7fe fdd6 	bl	800376c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fe fdd2 	bl	800376c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e058      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be2:	e050      	b.n	8004c86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e04f      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d148      	bne.n	8004c86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c00:	4b17      	ldr	r3, [pc, #92]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a16      	ldr	r2, [pc, #88]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0c:	f7fe fdae 	bl	800376c <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c14:	f7fe fdaa 	bl	800376c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e030      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c26:	4b0e      	ldr	r3, [pc, #56]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x734>
 8004c32:	e028      	b.n	8004c86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d023      	beq.n	8004c82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a08      	ldr	r2, [pc, #32]	@ (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004c40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fe fd91 	bl	800376c <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4c:	e00c      	b.n	8004c68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fe fd8d 	bl	800376c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d905      	bls.n	8004c68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e013      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
 8004c60:	40021000 	.word	0x40021000
 8004c64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c68:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_OscConfig+0x7b0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ec      	bne.n	8004c4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_RCC_OscConfig+0x7b0>)
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	4905      	ldr	r1, [pc, #20]	@ (8004c90 <HAL_RCC_OscConfig+0x7b0>)
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <HAL_RCC_OscConfig+0x7b4>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60cb      	str	r3, [r1, #12]
 8004c80:	e001      	b.n	8004c86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	feeefffc 	.word	0xfeeefffc

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0e7      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b75      	ldr	r3, [pc, #468]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b72      	ldr	r3, [pc, #456]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 0207 	bic.w	r2, r3, #7
 8004cc2:	4970      	ldr	r1, [pc, #448]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b6e      	ldr	r3, [pc, #440]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0cf      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b66      	ldr	r3, [pc, #408]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d908      	bls.n	8004d0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b63      	ldr	r3, [pc, #396]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4960      	ldr	r1, [pc, #384]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d04c      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d121      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0a6      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d36:	4b54      	ldr	r3, [pc, #336]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d115      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e09a      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e08e      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e086      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b46      	ldr	r3, [pc, #280]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4943      	ldr	r1, [pc, #268]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fe fcf4 	bl	800376c <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fe fcf0 	bl	800376c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e06e      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 020c 	and.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1eb      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d208      	bcs.n	8004dde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	492b      	ldr	r1, [pc, #172]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d210      	bcs.n	8004e0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f023 0207 	bic.w	r2, r3, #7
 8004df4:	4923      	ldr	r1, [pc, #140]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfc:	4b21      	ldr	r3, [pc, #132]	@ (8004e84 <HAL_RCC_ClockConfig+0x1ec>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e036      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4918      	ldr	r1, [pc, #96]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e38:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4910      	ldr	r1, [pc, #64]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e4c:	f000 f824 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	490b      	ldr	r1, [pc, #44]	@ (8004e8c <HAL_RCC_ClockConfig+0x1f4>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	4a09      	ldr	r2, [pc, #36]	@ (8004e90 <HAL_RCC_ClockConfig+0x1f8>)
 8004e6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e6c:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <HAL_RCC_ClockConfig+0x1fc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fc fea9 	bl	8001bc8 <HAL_InitTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40022000 	.word	0x40022000
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	0800ec58 	.word	0x0800ec58
 8004e90:	20000114 	.word	0x20000114
 8004e94:	20000128 	.word	0x20000128

08004e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	@ 0x24
 8004e9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x34>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d121      	bne.n	8004f0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d11e      	bne.n	8004f0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ecc:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed8:	4b31      	ldr	r3, [pc, #196]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e005      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10d      	bne.n	8004f20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	e004      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f1c:	4b23      	ldr	r3, [pc, #140]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x114>)
 8004f1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	d134      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f26:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_GetSysClockFreq+0xa6>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d003      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0xac>
 8004f3c:	e005      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f40:	617b      	str	r3, [r7, #20]
      break;
 8004f42:	e005      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f44:	4b19      	ldr	r3, [pc, #100]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x114>)
 8004f46:	617b      	str	r3, [r7, #20]
      break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	617b      	str	r3, [r7, #20]
      break;
 8004f4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f50:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f5e:	4b10      	ldr	r3, [pc, #64]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	fb03 f202 	mul.w	r2, r3, r2
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f76:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	0e5b      	lsrs	r3, r3, #25
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	3301      	adds	r3, #1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f90:	69bb      	ldr	r3, [r7, #24]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	0800ec70 	.word	0x0800ec70
 8004fa8:	00f42400 	.word	0x00f42400
 8004fac:	007a1200 	.word	0x007a1200

08004fb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000114 	.word	0x20000114

08004fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fcc:	f7ff fff0 	bl	8004fb0 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4904      	ldr	r1, [pc, #16]	@ (8004ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	0800ec68 	.word	0x0800ec68

08004ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ff8:	f7ff ffda 	bl	8004fb0 <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0adb      	lsrs	r3, r3, #11
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4904      	ldr	r1, [pc, #16]	@ (800501c <HAL_RCC_GetPCLK2Freq+0x28>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	0800ec68 	.word	0x0800ec68

08005020 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	220f      	movs	r2, #15
 800502e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005030:	4b12      	ldr	r3, [pc, #72]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0203 	and.w	r2, r3, #3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800503c:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005048:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005062:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <HAL_RCC_GetClockConfig+0x60>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000
 8005080:	40022000 	.word	0x40022000

08005084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005090:	4b2a      	ldr	r3, [pc, #168]	@ (800513c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800509c:	f7ff f9bc 	bl	8004418 <HAL_PWREx_GetVoltageRange>
 80050a0:	6178      	str	r0, [r7, #20]
 80050a2:	e014      	b.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050a4:	4b25      	ldr	r3, [pc, #148]	@ (800513c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	4a24      	ldr	r2, [pc, #144]	@ (800513c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050bc:	f7ff f9ac 	bl	8004418 <HAL_PWREx_GetVoltageRange>
 80050c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d4:	d10b      	bne.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b80      	cmp	r3, #128	@ 0x80
 80050da:	d919      	bls.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2ba0      	cmp	r3, #160	@ 0xa0
 80050e0:	d902      	bls.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050e2:	2302      	movs	r3, #2
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e013      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e8:	2301      	movs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e010      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b80      	cmp	r3, #128	@ 0x80
 80050f2:	d902      	bls.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050f4:	2303      	movs	r3, #3
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e00a      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b80      	cmp	r3, #128	@ 0x80
 80050fe:	d102      	bne.n	8005106 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005100:	2302      	movs	r3, #2
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e004      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b70      	cmp	r3, #112	@ 0x70
 800510a:	d101      	bne.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800510c:	2301      	movs	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005110:	4b0b      	ldr	r3, [pc, #44]	@ (8005140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 0207 	bic.w	r2, r3, #7
 8005118:	4909      	ldr	r1, [pc, #36]	@ (8005140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005120:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d001      	beq.n	8005132 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	40022000 	.word	0x40022000

08005144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800514c:	2300      	movs	r3, #0
 800514e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005150:	2300      	movs	r3, #0
 8005152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800515c:	2b00      	cmp	r3, #0
 800515e:	d041      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005164:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005168:	d02a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800516a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800516e:	d824      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005174:	d008      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800517a:	d81e      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005184:	d010      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005186:	e018      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005188:	4b86      	ldr	r3, [pc, #536]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a85      	ldr	r2, [pc, #532]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005192:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005194:	e015      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fabb 	bl	8005718 <RCCEx_PLLSAI1_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a6:	e00c      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3320      	adds	r3, #32
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fba6 	bl	8005900 <RCCEx_PLLSAI2_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	74fb      	strb	r3, [r7, #19]
      break;
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c8:	4b76      	ldr	r3, [pc, #472]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051d6:	4973      	ldr	r1, [pc, #460]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051de:	e001      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d041      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051f8:	d02a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051fe:	d824      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005204:	d008      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800520a:	d81e      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005214:	d010      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005216:	e018      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005218:	4b62      	ldr	r3, [pc, #392]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a61      	ldr	r2, [pc, #388]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005222:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005224:	e015      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	2100      	movs	r1, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fa73 	bl	8005718 <RCCEx_PLLSAI1_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005236:	e00c      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3320      	adds	r3, #32
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fb5e 	bl	8005900 <RCCEx_PLLSAI2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005248:	e003      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	74fb      	strb	r3, [r7, #19]
      break;
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005252:	7cfb      	ldrb	r3, [r7, #19]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005258:	4b52      	ldr	r3, [pc, #328]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005266:	494f      	ldr	r1, [pc, #316]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800526e:	e001      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80a0 	beq.w	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005286:	4b47      	ldr	r3, [pc, #284]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529c:	4b41      	ldr	r3, [pc, #260]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a0:	4a40      	ldr	r2, [pc, #256]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a8:	4b3e      	ldr	r3, [pc, #248]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b4:	2301      	movs	r3, #1
 80052b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b8:	4b3b      	ldr	r3, [pc, #236]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3a      	ldr	r2, [pc, #232]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c4:	f7fe fa52 	bl	800376c <HAL_GetTick>
 80052c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ca:	e009      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fe fa4e 	bl	800376c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d902      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	74fb      	strb	r3, [r7, #19]
        break;
 80052de:	e005      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052e0:	4b31      	ldr	r3, [pc, #196]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ef      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d15c      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052f2:	4b2c      	ldr	r3, [pc, #176]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01f      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d019      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005310:	4b24      	ldr	r3, [pc, #144]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800531c:	4b21      	ldr	r3, [pc, #132]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005322:	4a20      	ldr	r2, [pc, #128]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005332:	4a1c      	ldr	r2, [pc, #112]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800533c:	4a19      	ldr	r2, [pc, #100]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fe fa0d 	bl	800376c <HAL_GetTick>
 8005352:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005354:	e00b      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005356:	f7fe fa09 	bl	800376c <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005364:	4293      	cmp	r3, r2
 8005366:	d902      	bls.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	74fb      	strb	r3, [r7, #19]
            break;
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ec      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10c      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005382:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005392:	4904      	ldr	r1, [pc, #16]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800539a:	e009      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
 80053a0:	e006      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053b0:	7c7b      	ldrb	r3, [r7, #17]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b6:	4b9e      	ldr	r3, [pc, #632]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	4a9d      	ldr	r2, [pc, #628]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ce:	4b98      	ldr	r3, [pc, #608]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d4:	f023 0203 	bic.w	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	4994      	ldr	r1, [pc, #592]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	f023 020c 	bic.w	r2, r3, #12
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fe:	498c      	ldr	r1, [pc, #560]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005412:	4b87      	ldr	r3, [pc, #540]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	4983      	ldr	r1, [pc, #524]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005434:	4b7e      	ldr	r3, [pc, #504]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	497b      	ldr	r1, [pc, #492]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005456:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005464:	4972      	ldr	r1, [pc, #456]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005478:	4b6d      	ldr	r3, [pc, #436]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005486:	496a      	ldr	r1, [pc, #424]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800549a:	4b65      	ldr	r3, [pc, #404]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a8:	4961      	ldr	r1, [pc, #388]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ca:	4959      	ldr	r1, [pc, #356]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054de:	4b54      	ldr	r3, [pc, #336]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ec:	4950      	ldr	r1, [pc, #320]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005500:	4b4b      	ldr	r3, [pc, #300]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550e:	4948      	ldr	r1, [pc, #288]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005522:	4b43      	ldr	r3, [pc, #268]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005530:	493f      	ldr	r1, [pc, #252]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d028      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005544:	4b3a      	ldr	r3, [pc, #232]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005552:	4937      	ldr	r1, [pc, #220]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005562:	d106      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005564:	4b32      	ldr	r3, [pc, #200]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a31      	ldr	r2, [pc, #196]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556e:	60d3      	str	r3, [r2, #12]
 8005570:	e011      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005576:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800557a:	d10c      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	2101      	movs	r1, #1
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f8c8 	bl	8005718 <RCCEx_PLLSAI1_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d028      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055a2:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b0:	491f      	ldr	r1, [pc, #124]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055c0:	d106      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055cc:	60d3      	str	r3, [r2, #12]
 80055ce:	e011      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	2101      	movs	r1, #1
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f899 	bl	8005718 <RCCEx_PLLSAI1_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02b      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005600:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800560e:	4908      	ldr	r1, [pc, #32]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800561e:	d109      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005620:	4b03      	ldr	r3, [pc, #12]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4a02      	ldr	r2, [pc, #8]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800562a:	60d3      	str	r3, [r2, #12]
 800562c:	e014      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800562e:	bf00      	nop
 8005630:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005638:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800563c:	d10c      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	2101      	movs	r1, #1
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f867 	bl	8005718 <RCCEx_PLLSAI1_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800564e:	7cfb      	ldrb	r3, [r7, #19]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02f      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005664:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005672:	4928      	ldr	r1, [pc, #160]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800567e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005682:	d10d      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	2102      	movs	r1, #2
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f844 	bl	8005718 <RCCEx_PLLSAI1_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d014      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	74bb      	strb	r3, [r7, #18]
 800569e:	e011      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3320      	adds	r3, #32
 80056ae:	2102      	movs	r1, #2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f925 	bl	8005900 <RCCEx_PLLSAI2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056d0:	4b10      	ldr	r3, [pc, #64]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056de:	490d      	ldr	r1, [pc, #52]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056f2:	4b08      	ldr	r3, [pc, #32]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005702:	4904      	ldr	r1, [pc, #16]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800570a:	7cbb      	ldrb	r3, [r7, #18]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000

08005718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005726:	4b75      	ldr	r3, [pc, #468]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d018      	beq.n	8005764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005732:	4b72      	ldr	r3, [pc, #456]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0203 	and.w	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d10d      	bne.n	800575e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
       ||
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800574a:	4b6c      	ldr	r3, [pc, #432]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
       ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d047      	beq.n	80057ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	e044      	b.n	80057ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d018      	beq.n	800579e <RCCEx_PLLSAI1_Config+0x86>
 800576c:	2b03      	cmp	r3, #3
 800576e:	d825      	bhi.n	80057bc <RCCEx_PLLSAI1_Config+0xa4>
 8005770:	2b01      	cmp	r3, #1
 8005772:	d002      	beq.n	800577a <RCCEx_PLLSAI1_Config+0x62>
 8005774:	2b02      	cmp	r3, #2
 8005776:	d009      	beq.n	800578c <RCCEx_PLLSAI1_Config+0x74>
 8005778:	e020      	b.n	80057bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800577a:	4b60      	ldr	r3, [pc, #384]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11d      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800578a:	e01a      	b.n	80057c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800578c:	4b5b      	ldr	r3, [pc, #364]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005794:	2b00      	cmp	r3, #0
 8005796:	d116      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579c:	e013      	b.n	80057c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800579e:	4b57      	ldr	r3, [pc, #348]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057aa:	4b54      	ldr	r3, [pc, #336]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ba:	e006      	b.n	80057ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      break;
 80057c0:	e004      	b.n	80057cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057d2:	4b4a      	ldr	r3, [pc, #296]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	430b      	orrs	r3, r1
 80057e8:	4944      	ldr	r1, [pc, #272]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d17d      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057f4:	4b41      	ldr	r3, [pc, #260]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a40      	ldr	r2, [pc, #256]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005800:	f7fd ffb4 	bl	800376c <HAL_GetTick>
 8005804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005806:	e009      	b.n	800581c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005808:	f7fd ffb0 	bl	800376c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d902      	bls.n	800581c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	73fb      	strb	r3, [r7, #15]
        break;
 800581a:	e005      	b.n	8005828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800581c:	4b37      	ldr	r3, [pc, #220]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1ef      	bne.n	8005808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d160      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d111      	bne.n	8005858 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005834:	4b31      	ldr	r3, [pc, #196]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800583c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6892      	ldr	r2, [r2, #8]
 8005844:	0211      	lsls	r1, r2, #8
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	0912      	lsrs	r2, r2, #4
 800584c:	0452      	lsls	r2, r2, #17
 800584e:	430a      	orrs	r2, r1
 8005850:	492a      	ldr	r1, [pc, #168]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	610b      	str	r3, [r1, #16]
 8005856:	e027      	b.n	80058a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d112      	bne.n	8005884 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800585e:	4b27      	ldr	r3, [pc, #156]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005866:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	0211      	lsls	r1, r2, #8
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6912      	ldr	r2, [r2, #16]
 8005874:	0852      	lsrs	r2, r2, #1
 8005876:	3a01      	subs	r2, #1
 8005878:	0552      	lsls	r2, r2, #21
 800587a:	430a      	orrs	r2, r1
 800587c:	491f      	ldr	r1, [pc, #124]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	610b      	str	r3, [r1, #16]
 8005882:	e011      	b.n	80058a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005884:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800588c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6892      	ldr	r2, [r2, #8]
 8005894:	0211      	lsls	r1, r2, #8
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6952      	ldr	r2, [r2, #20]
 800589a:	0852      	lsrs	r2, r2, #1
 800589c:	3a01      	subs	r2, #1
 800589e:	0652      	lsls	r2, r2, #25
 80058a0:	430a      	orrs	r2, r1
 80058a2:	4916      	ldr	r1, [pc, #88]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058a8:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fd ff5a 	bl	800376c <HAL_GetTick>
 80058b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ba:	e009      	b.n	80058d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058bc:	f7fd ff56 	bl	800376c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d902      	bls.n	80058d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	73fb      	strb	r3, [r7, #15]
          break;
 80058ce:	e005      	b.n	80058dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058d0:	4b0a      	ldr	r3, [pc, #40]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ef      	beq.n	80058bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	4904      	ldr	r1, [pc, #16]	@ (80058fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000

08005900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800590e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800591a:	4b67      	ldr	r3, [pc, #412]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0203 	and.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d10d      	bne.n	8005946 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
       ||
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005932:	4b61      	ldr	r3, [pc, #388]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
       ||
 8005942:	429a      	cmp	r2, r3
 8005944:	d047      	beq.n	80059d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	73fb      	strb	r3, [r7, #15]
 800594a:	e044      	b.n	80059d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d018      	beq.n	8005986 <RCCEx_PLLSAI2_Config+0x86>
 8005954:	2b03      	cmp	r3, #3
 8005956:	d825      	bhi.n	80059a4 <RCCEx_PLLSAI2_Config+0xa4>
 8005958:	2b01      	cmp	r3, #1
 800595a:	d002      	beq.n	8005962 <RCCEx_PLLSAI2_Config+0x62>
 800595c:	2b02      	cmp	r3, #2
 800595e:	d009      	beq.n	8005974 <RCCEx_PLLSAI2_Config+0x74>
 8005960:	e020      	b.n	80059a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005962:	4b55      	ldr	r3, [pc, #340]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11d      	bne.n	80059aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005972:	e01a      	b.n	80059aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005974:	4b50      	ldr	r3, [pc, #320]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d116      	bne.n	80059ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005984:	e013      	b.n	80059ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005986:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005992:	4b49      	ldr	r3, [pc, #292]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059a2:	e006      	b.n	80059b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e004      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059aa:	bf00      	nop
 80059ac:	e002      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ae:	bf00      	nop
 80059b0:	e000      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10d      	bne.n	80059d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ba:	4b3f      	ldr	r3, [pc, #252]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	430b      	orrs	r3, r1
 80059d0:	4939      	ldr	r1, [pc, #228]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d167      	bne.n	8005aac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059dc:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a35      	ldr	r2, [pc, #212]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e8:	f7fd fec0 	bl	800376c <HAL_GetTick>
 80059ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ee:	e009      	b.n	8005a04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059f0:	f7fd febc 	bl	800376c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d902      	bls.n	8005a04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	73fb      	strb	r3, [r7, #15]
        break;
 8005a02:	e005      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a04:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1ef      	bne.n	80059f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d14a      	bne.n	8005aac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d111      	bne.n	8005a40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a1c:	4b26      	ldr	r3, [pc, #152]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6892      	ldr	r2, [r2, #8]
 8005a2c:	0211      	lsls	r1, r2, #8
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68d2      	ldr	r2, [r2, #12]
 8005a32:	0912      	lsrs	r2, r2, #4
 8005a34:	0452      	lsls	r2, r2, #17
 8005a36:	430a      	orrs	r2, r1
 8005a38:	491f      	ldr	r1, [pc, #124]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	614b      	str	r3, [r1, #20]
 8005a3e:	e011      	b.n	8005a64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a40:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6892      	ldr	r2, [r2, #8]
 8005a50:	0211      	lsls	r1, r2, #8
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6912      	ldr	r2, [r2, #16]
 8005a56:	0852      	lsrs	r2, r2, #1
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	0652      	lsls	r2, r2, #25
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	4916      	ldr	r1, [pc, #88]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a64:	4b14      	ldr	r3, [pc, #80]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a13      	ldr	r2, [pc, #76]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fd fe7c 	bl	800376c <HAL_GetTick>
 8005a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a76:	e009      	b.n	8005a8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a78:	f7fd fe78 	bl	800376c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d902      	bls.n	8005a8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	73fb      	strb	r3, [r7, #15]
          break;
 8005a8a:	e005      	b.n	8005a98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ef      	beq.n	8005a78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4904      	ldr	r1, [pc, #16]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40021000 	.word	0x40021000

08005abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e095      	b.n	8005bfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ade:	d009      	beq.n	8005af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61da      	str	r2, [r3, #28]
 8005ae6:	e005      	b.n	8005af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb ff66 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b34:	d902      	bls.n	8005b3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e002      	b.n	8005b42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b4a:	d007      	beq.n	8005b5c <HAL_SPI_Init+0xa0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	f003 0204 	and.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005bd8:	ea42 0103 	orr.w	r1, r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e01a      	b.n	8005c4a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fb ff6b 	bl	8001b08 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b088      	sub	sp, #32
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	603b      	str	r3, [r7, #0]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c62:	f7fd fd83 	bl	800376c <HAL_GetTick>
 8005c66:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e15c      	b.n	8005f36 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Transmit+0x36>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e154      	b.n	8005f36 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_SPI_Transmit+0x48>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e14d      	b.n	8005f36 <HAL_SPI_Transmit+0x2e4>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cec:	d10f      	bne.n	8005d0e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d007      	beq.n	8005d2c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d34:	d952      	bls.n	8005ddc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_SPI_Transmit+0xf2>
 8005d3e:	8b7b      	ldrh	r3, [r7, #26]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d145      	bne.n	8005dd0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d68:	e032      	b.n	8005dd0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d112      	bne.n	8005d9e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d9c:	e018      	b.n	8005dd0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d9e:	f7fd fce5 	bl	800376c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d803      	bhi.n	8005db6 <HAL_SPI_Transmit+0x164>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Transmit+0x16a>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e0b2      	b.n	8005f36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1c7      	bne.n	8005d6a <HAL_SPI_Transmit+0x118>
 8005dda:	e083      	b.n	8005ee4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_SPI_Transmit+0x198>
 8005de4:	8b7b      	ldrh	r3, [r7, #26]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d177      	bne.n	8005eda <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d912      	bls.n	8005e1a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b02      	subs	r3, #2
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e18:	e05f      	b.n	8005eda <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e40:	e04b      	b.n	8005eda <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d12b      	bne.n	8005ea8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d912      	bls.n	8005e80 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	881a      	ldrh	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b02      	subs	r3, #2
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e7e:	e02c      	b.n	8005eda <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ea6:	e018      	b.n	8005eda <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea8:	f7fd fc60 	bl	800376c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d803      	bhi.n	8005ec0 <HAL_SPI_Transmit+0x26e>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d102      	bne.n	8005ec6 <HAL_SPI_Transmit+0x274>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e02d      	b.n	8005f36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1ae      	bne.n	8005e42 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fcf5 	bl	80068d8 <SPI_EndRxTxTransaction>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b088      	sub	sp, #32
 8005f42:	af02      	add	r7, sp, #8
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e123      	b.n	80061a6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f66:	d112      	bne.n	8005f8e <HAL_SPI_Receive+0x50>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10e      	bne.n	8005f8e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2204      	movs	r2, #4
 8005f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f912 	bl	80061ae <HAL_SPI_TransmitReceive>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	e10b      	b.n	80061a6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f8e:	f7fd fbed 	bl	800376c <HAL_GetTick>
 8005f92:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_SPI_Receive+0x62>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e100      	b.n	80061a6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_SPI_Receive+0x74>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e0f9      	b.n	80061a6 <HAL_SPI_Receive+0x268>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006004:	d908      	bls.n	8006018 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	e007      	b.n	8006028 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006030:	d10f      	bne.n	8006052 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b40      	cmp	r3, #64	@ 0x40
 800605e:	d007      	beq.n	8006070 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006078:	d875      	bhi.n	8006166 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800607a:	e037      	b.n	80060ec <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d117      	bne.n	80060ba <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f103 020c 	add.w	r2, r3, #12
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80060b8:	e018      	b.n	80060ec <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fd fb57 	bl	800376c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Receive+0x194>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Receive+0x19a>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e05c      	b.n	80061a6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1c1      	bne.n	800607c <HAL_SPI_Receive+0x13e>
 80060f8:	e03b      	b.n	8006172 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d115      	bne.n	8006134 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	b292      	uxth	r2, r2
 8006114:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006132:	e018      	b.n	8006166 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006134:	f7fd fb1a 	bl	800376c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d803      	bhi.n	800614c <HAL_SPI_Receive+0x20e>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d102      	bne.n	8006152 <HAL_SPI_Receive+0x214>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e01f      	b.n	80061a6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1c3      	bne.n	80060fa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fb56 	bl	8006828 <SPI_EndRxTransaction>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80061a4:	2300      	movs	r3, #0
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b08a      	sub	sp, #40	@ 0x28
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061c0:	f7fd fad4 	bl	800376c <HAL_GetTick>
 80061c4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061cc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80061d4:	887b      	ldrh	r3, [r7, #2]
 80061d6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80061d8:	887b      	ldrh	r3, [r7, #2]
 80061da:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d00c      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x4e>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e8:	d106      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x4a>
 80061f2:	7ffb      	ldrb	r3, [r7, #31]
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d001      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	e1f3      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_SPI_TransmitReceive+0x60>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_SPI_TransmitReceive+0x60>
 8006208:	887b      	ldrh	r3, [r7, #2]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e1e8      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x72>
 800621c:	2302      	movs	r3, #2
 800621e:	e1e1      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b04      	cmp	r3, #4
 8006232:	d003      	beq.n	800623c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2205      	movs	r2, #5
 8006238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	887a      	ldrh	r2, [r7, #2]
 800624c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	887a      	ldrh	r2, [r7, #2]
 8006268:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800627e:	d802      	bhi.n	8006286 <HAL_SPI_TransmitReceive+0xd8>
 8006280:	8abb      	ldrh	r3, [r7, #20]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d908      	bls.n	8006298 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	e007      	b.n	80062a8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b2:	2b40      	cmp	r3, #64	@ 0x40
 80062b4:	d007      	beq.n	80062c6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ce:	f240 8083 	bls.w	80063d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x132>
 80062da:	8afb      	ldrh	r3, [r7, #22]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d16f      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	1c9a      	adds	r2, r3, #2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006304:	e05c      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	d11b      	bne.n	800634c <HAL_SPI_TransmitReceive+0x19e>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <HAL_SPI_TransmitReceive+0x19e>
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	2b01      	cmp	r3, #1
 8006322:	d113      	bne.n	800634c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d11c      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x1e6>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	b292      	uxth	r2, r2
 8006372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006390:	2301      	movs	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006394:	f7fd f9ea 	bl	800376c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d80d      	bhi.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d009      	beq.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e111      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d19d      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x158>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d197      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x158>
 80063d6:	e0e5      	b.n	80065a4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x23a>
 80063e0:	8afb      	ldrh	r3, [r7, #22]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	f040 80d1 	bne.w	800658a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d912      	bls.n	8006418 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b02      	subs	r3, #2
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006416:	e0b8      	b.n	800658a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800643e:	e0a4      	b.n	800658a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d134      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x30a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02f      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x30a>
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	2b01      	cmp	r3, #1
 800645c:	d12c      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d912      	bls.n	800648e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b02      	subs	r3, #2
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800648c:	e012      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d148      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x3aa>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d042      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d923      	bls.n	8006526 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	b292      	uxth	r2, r2
 80064ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b02      	subs	r3, #2
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d81f      	bhi.n	8006554 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	e016      	b.n	8006554 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f103 020c 	add.w	r2, r3, #12
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006554:	2301      	movs	r3, #1
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006558:	f7fd f908 	bl	800376c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006564:	429a      	cmp	r2, r3
 8006566:	d803      	bhi.n	8006570 <HAL_SPI_TransmitReceive+0x3c2>
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d102      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x3c8>
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e02c      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	f47f af55 	bne.w	8006440 <HAL_SPI_TransmitReceive+0x292>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f47f af4e 	bne.w	8006440 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f995 	bl	80068d8 <SPI_EndRxTxTransaction>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e00e      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
  }
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3728      	adds	r7, #40	@ 0x28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	4613      	mov	r3, r2
 80065fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065fc:	f7fd f8b6 	bl	800376c <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	4413      	add	r3, r2
 800660a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800660c:	f7fd f8ae 	bl	800376c <HAL_GetTick>
 8006610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006612:	4b39      	ldr	r3, [pc, #228]	@ (80066f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	015b      	lsls	r3, r3, #5
 8006618:	0d1b      	lsrs	r3, r3, #20
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006622:	e054      	b.n	80066ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d050      	beq.n	80066ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800662c:	f7fd f89e 	bl	800376c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	429a      	cmp	r2, r3
 800663a:	d902      	bls.n	8006642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d13d      	bne.n	80066be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800665a:	d111      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006664:	d004      	beq.n	8006670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800666e:	d107      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800667e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006688:	d10f      	bne.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e017      	b.n	80066ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4013      	ands	r3, r2
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	429a      	cmp	r2, r3
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d19b      	bne.n	8006624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000114 	.word	0x20000114

080066fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800670e:	f7fd f82d 	bl	800376c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	4413      	add	r3, r2
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800671e:	f7fd f825 	bl	800376c <HAL_GetTick>
 8006722:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800672c:	4b3d      	ldr	r3, [pc, #244]	@ (8006824 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	00da      	lsls	r2, r3, #3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	0d1b      	lsrs	r3, r3, #20
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006744:	e060      	b.n	8006808 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800674c:	d107      	bne.n	800675e <SPI_WaitFifoStateUntilTimeout+0x62>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800675c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d050      	beq.n	8006808 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006766:	f7fd f801 	bl	800376c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006772:	429a      	cmp	r2, r3
 8006774:	d902      	bls.n	800677c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d13d      	bne.n	80067f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800678a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006794:	d111      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800679e:	d004      	beq.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a8:	d107      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c2:	d10f      	bne.n	80067e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e010      	b.n	800681a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3b01      	subs	r3, #1
 8006806:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4013      	ands	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d196      	bne.n	8006746 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3728      	adds	r7, #40	@ 0x28
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000114 	.word	0x20000114

08006828 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800683c:	d111      	bne.n	8006862 <SPI_EndRxTransaction+0x3a>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006846:	d004      	beq.n	8006852 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006850:	d107      	bne.n	8006862 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006860:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	2180      	movs	r1, #128	@ 0x80
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff febd 	bl	80065ec <SPI_WaitFlagStateUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687c:	f043 0220 	orr.w	r2, r3, #32
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e023      	b.n	80068d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006890:	d11d      	bne.n	80068ce <SPI_EndRxTransaction+0xa6>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689a:	d004      	beq.n	80068a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a4:	d113      	bne.n	80068ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff ff22 	bl	80066fc <SPI_WaitFifoStateUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c2:	f043 0220 	orr.w	r2, r3, #32
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e000      	b.n	80068d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff ff03 	bl	80066fc <SPI_WaitFifoStateUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006900:	f043 0220 	orr.w	r2, r3, #32
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e027      	b.n	800695c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	2180      	movs	r1, #128	@ 0x80
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fe68 	bl	80065ec <SPI_WaitFlagStateUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006926:	f043 0220 	orr.w	r2, r3, #32
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e014      	b.n	800695c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fedc 	bl	80066fc <SPI_WaitFifoStateUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e000      	b.n	800695c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e049      	b.n	8006a0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fb faf0 	bl	8001f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f000 fa3e 	bl	8006e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d001      	beq.n	8006a2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e047      	b.n	8006abc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a23      	ldr	r2, [pc, #140]	@ (8006ac8 <HAL_TIM_Base_Start+0xb4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <HAL_TIM_Base_Start+0x66>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d018      	beq.n	8006a7a <HAL_TIM_Base_Start+0x66>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006acc <HAL_TIM_Base_Start+0xb8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_TIM_Base_Start+0x66>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <HAL_TIM_Base_Start+0xbc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_TIM_Base_Start+0x66>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad4 <HAL_TIM_Base_Start+0xc0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_TIM_Base_Start+0x66>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad8 <HAL_TIM_Base_Start+0xc4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIM_Base_Start+0x66>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a19      	ldr	r2, [pc, #100]	@ (8006adc <HAL_TIM_Base_Start+0xc8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d115      	bne.n	8006aa6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b17      	ldr	r3, [pc, #92]	@ (8006ae0 <HAL_TIM_Base_Start+0xcc>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	d015      	beq.n	8006ab8 <HAL_TIM_Base_Start+0xa4>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a92:	d011      	beq.n	8006ab8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa4:	e008      	b.n	8006ab8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0201 	orr.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e000      	b.n	8006aba <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	00010007 	.word	0x00010007

08006ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d001      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e04f      	b.n	8006b9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a23      	ldr	r2, [pc, #140]	@ (8006ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01d      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x76>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b26:	d018      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x76>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bac <HAL_TIM_Base_Start_IT+0xc8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x76>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x76>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x76>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x76>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a19      	ldr	r2, [pc, #100]	@ (8006bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d115      	bne.n	8006b86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	4b17      	ldr	r3, [pc, #92]	@ (8006bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b06      	cmp	r3, #6
 8006b6a:	d015      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0xb4>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b72:	d011      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	e008      	b.n	8006b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e000      	b.n	8006b9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	00010007 	.word	0x00010007

08006bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d020      	beq.n	8006c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0202 	mvn.w	r2, #2
 8006bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8e9 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006c14:	e005      	b.n	8006c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8db 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f8ec 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d020      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01b      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0204 	mvn.w	r2, #4
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8c3 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f8b5 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8c6 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d020      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01b      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0208 	mvn.w	r2, #8
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2204      	movs	r2, #4
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f89d 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f88f 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f8a0 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d020      	beq.n	8006d0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01b      	beq.n	8006d0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0210 	mvn.w	r2, #16
 8006cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f877 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006cf8:	e005      	b.n	8006d06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f869 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f87a 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00c      	beq.n	8006d30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0201 	mvn.w	r2, #1
 8006d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fc8c 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00c      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f99b 	bl	8007094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f993 	bl	80070a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00c      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f834 	bl	8006e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0220 	mvn.w	r2, #32
 8006dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f95b 	bl	8007080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a46      	ldr	r2, [pc, #280]	@ (8006f50 <TIM_Base_SetConfig+0x12c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d013      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e42:	d00f      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a43      	ldr	r2, [pc, #268]	@ (8006f54 <TIM_Base_SetConfig+0x130>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00b      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a42      	ldr	r2, [pc, #264]	@ (8006f58 <TIM_Base_SetConfig+0x134>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a41      	ldr	r2, [pc, #260]	@ (8006f5c <TIM_Base_SetConfig+0x138>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a40      	ldr	r2, [pc, #256]	@ (8006f60 <TIM_Base_SetConfig+0x13c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d108      	bne.n	8006e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a35      	ldr	r2, [pc, #212]	@ (8006f50 <TIM_Base_SetConfig+0x12c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01f      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e84:	d01b      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a32      	ldr	r2, [pc, #200]	@ (8006f54 <TIM_Base_SetConfig+0x130>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d017      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a31      	ldr	r2, [pc, #196]	@ (8006f58 <TIM_Base_SetConfig+0x134>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a30      	ldr	r2, [pc, #192]	@ (8006f5c <TIM_Base_SetConfig+0x138>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8006f60 <TIM_Base_SetConfig+0x13c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8006f64 <TIM_Base_SetConfig+0x140>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f68 <TIM_Base_SetConfig+0x144>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_Base_SetConfig+0x9a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f6c <TIM_Base_SetConfig+0x148>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d108      	bne.n	8006ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a16      	ldr	r2, [pc, #88]	@ (8006f50 <TIM_Base_SetConfig+0x12c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00f      	beq.n	8006f1c <TIM_Base_SetConfig+0xf8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a18      	ldr	r2, [pc, #96]	@ (8006f60 <TIM_Base_SetConfig+0x13c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <TIM_Base_SetConfig+0xf8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a17      	ldr	r2, [pc, #92]	@ (8006f64 <TIM_Base_SetConfig+0x140>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_Base_SetConfig+0xf8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a16      	ldr	r2, [pc, #88]	@ (8006f68 <TIM_Base_SetConfig+0x144>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_Base_SetConfig+0xf8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <TIM_Base_SetConfig+0x148>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d103      	bne.n	8006f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	611a      	str	r2, [r3, #16]
  }
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e068      	b.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2e      	ldr	r2, [pc, #184]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d108      	bne.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01d      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffa:	d018      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1a      	ldr	r2, [pc, #104]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a18      	ldr	r2, [pc, #96]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a13      	ldr	r2, [pc, #76]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a14      	ldr	r2, [pc, #80]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d10c      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4313      	orrs	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e040      	b.n	8007150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fa ff96 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	@ 0x24
 80070e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fe8e 	bl	8007e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fbd3 	bl	80078b4 <UART_SetConfig>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e01b      	b.n	8007150 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 ff0d 	bl	8007f68 <UART_CheckIdleState>
 800714e:	4603      	mov	r3, r0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	@ 0x28
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800716c:	2b20      	cmp	r3, #32
 800716e:	d177      	bne.n	8007260 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_UART_Transmit+0x24>
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e070      	b.n	8007262 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2221      	movs	r2, #33	@ 0x21
 800718c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800718e:	f7fc faed 	bl	800376c <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ac:	d108      	bne.n	80071c0 <HAL_UART_Transmit+0x68>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e003      	b.n	80071c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071c8:	e02f      	b.n	800722a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	@ 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 ff6f 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2220      	movs	r2, #32
 80071e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e03b      	b.n	8007262 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fc:	b292      	uxth	r2, r2
 80071fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	3302      	adds	r3, #2
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e007      	b.n	8007218 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1c9      	bne.n	80071ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2140      	movs	r1, #64	@ 0x40
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 ff39 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e005      	b.n	8007262 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007260:	2302      	movs	r3, #2
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b0ba      	sub	sp, #232	@ 0xe8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007292:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007296:	f640 030f 	movw	r3, #2063	@ 0x80f
 800729a:	4013      	ands	r3, r2
 800729c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80072a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d115      	bne.n	80072d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00f      	beq.n	80072d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 82ca 	beq.w	800785e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
      }
      return;
 80072d2:	e2c4      	b.n	800785e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80072d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8117 	beq.w	800750c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80072de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80072ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80072ee:	4b85      	ldr	r3, [pc, #532]	@ (8007504 <HAL_UART_IRQHandler+0x298>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 810a 	beq.w	800750c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d011      	beq.n	8007328 <HAL_UART_IRQHandler+0xbc>
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2201      	movs	r2, #1
 8007316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800731e:	f043 0201 	orr.w	r2, r3, #1
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d011      	beq.n	8007358 <HAL_UART_IRQHandler+0xec>
 8007334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2202      	movs	r2, #2
 8007346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800734e:	f043 0204 	orr.w	r2, r3, #4
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d011      	beq.n	8007388 <HAL_UART_IRQHandler+0x11c>
 8007364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2204      	movs	r2, #4
 8007376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800737e:	f043 0202 	orr.w	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d017      	beq.n	80073c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ba:	f043 0208 	orr.w	r2, r3, #8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d012      	beq.n	80073f6 <HAL_UART_IRQHandler+0x18a>
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00c      	beq.n	80073f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ec:	f043 0220 	orr.w	r2, r3, #32
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8230 	beq.w	8007862 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00d      	beq.n	800742a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800740e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007430:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d005      	beq.n	800744e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007446:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800744a:	2b00      	cmp	r3, #0
 800744c:	d04f      	beq.n	80074ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 ff66 	bl	8008320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745e:	2b40      	cmp	r3, #64	@ 0x40
 8007460:	d141      	bne.n	80074e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800747c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3308      	adds	r3, #8
 800748a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800748e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800749a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1d9      	bne.n	8007462 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d013      	beq.n	80074de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ba:	4a13      	ldr	r2, [pc, #76]	@ (8007508 <HAL_UART_IRQHandler+0x29c>)
 80074bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fc fbba 	bl	8003c3c <HAL_DMA_Abort_IT>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d017      	beq.n	80074fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	e00f      	b.n	80074fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9de 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	e00b      	b.n	80074fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9da 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e007      	b.n	80074fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9d6 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80074fc:	e1b1      	b.n	8007862 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fe:	bf00      	nop
    return;
 8007500:	e1af      	b.n	8007862 <HAL_UART_IRQHandler+0x5f6>
 8007502:	bf00      	nop
 8007504:	04000120 	.word	0x04000120
 8007508:	080085d1 	.word	0x080085d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007510:	2b01      	cmp	r3, #1
 8007512:	f040 816a 	bne.w	80077ea <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751a:	f003 0310 	and.w	r3, r3, #16
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8163 	beq.w	80077ea <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 815c 	beq.w	80077ea <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2210      	movs	r2, #16
 8007538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007544:	2b40      	cmp	r3, #64	@ 0x40
 8007546:	f040 80d4 	bne.w	80076f2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007556:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80ad 	beq.w	80076ba <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800756a:	429a      	cmp	r2, r3
 800756c:	f080 80a5 	bcs.w	80076ba <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007576:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8086 	bne.w	8007698 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1da      	bne.n	800758c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80075e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80075fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800760c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e1      	bne.n	80075d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007636:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007638:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800763c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007668:	f023 0310 	bic.w	r3, r3, #16
 800766c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800767a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800767c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e4      	bne.n	8007658 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007692:	4618      	mov	r0, r3
 8007694:	f7fc fa94 	bl	8003bc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7f9 fe30 	bl	8001318 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80076b8:	e0d5      	b.n	8007866 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076c4:	429a      	cmp	r2, r3
 80076c6:	f040 80ce 	bne.w	8007866 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	f040 80c5 	bne.w	8007866 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7f9 fe14 	bl	8001318 <HAL_UARTEx_RxEventCallback>
      return;
 80076f0:	e0b9      	b.n	8007866 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80ab 	beq.w	800786a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80a6 	beq.w	800786a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800772c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007740:	647b      	str	r3, [r7, #68]	@ 0x44
 8007742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800774e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e4      	bne.n	800771e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	623b      	str	r3, [r7, #32]
   return(result);
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007778:	633a      	str	r2, [r7, #48]	@ 0x30
 800777a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800777e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e3      	bne.n	8007754 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f023 0310 	bic.w	r3, r3, #16
 80077b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	617b      	str	r3, [r7, #20]
   return(result);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e4      	bne.n	80077a0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7f9 fd98 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077e8:	e03f      	b.n	800786a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00e      	beq.n	8007814 <HAL_UART_IRQHandler+0x5a8>
 80077f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800780a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 ff1f 	bl	8008650 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007812:	e02d      	b.n	8007870 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00e      	beq.n	800783e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007828:	2b00      	cmp	r3, #0
 800782a:	d008      	beq.n	800783e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01c      	beq.n	800786e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
    }
    return;
 800783c:	e017      	b.n	800786e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d012      	beq.n	8007870 <HAL_UART_IRQHandler+0x604>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800784e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00c      	beq.n	8007870 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fed0 	bl	80085fc <UART_EndTransmit_IT>
    return;
 800785c:	e008      	b.n	8007870 <HAL_UART_IRQHandler+0x604>
      return;
 800785e:	bf00      	nop
 8007860:	e006      	b.n	8007870 <HAL_UART_IRQHandler+0x604>
    return;
 8007862:	bf00      	nop
 8007864:	e004      	b.n	8007870 <HAL_UART_IRQHandler+0x604>
      return;
 8007866:	bf00      	nop
 8007868:	e002      	b.n	8007870 <HAL_UART_IRQHandler+0x604>
      return;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <HAL_UART_IRQHandler+0x604>
    return;
 800786e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007870:	37e8      	adds	r7, #232	@ 0xe8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop

08007878 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b8:	b08a      	sub	sp, #40	@ 0x28
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	4313      	orrs	r3, r2
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4ba4      	ldr	r3, [pc, #656]	@ (8007b74 <UART_SetConfig+0x2c0>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a99      	ldr	r2, [pc, #612]	@ (8007b78 <UART_SetConfig+0x2c4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d004      	beq.n	8007920 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800791c:	4313      	orrs	r3, r2
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007930:	430a      	orrs	r2, r1
 8007932:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a90      	ldr	r2, [pc, #576]	@ (8007b7c <UART_SetConfig+0x2c8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d126      	bne.n	800798c <UART_SetConfig+0xd8>
 800793e:	4b90      	ldr	r3, [pc, #576]	@ (8007b80 <UART_SetConfig+0x2cc>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d81b      	bhi.n	8007984 <UART_SetConfig+0xd0>
 800794c:	a201      	add	r2, pc, #4	@ (adr r2, 8007954 <UART_SetConfig+0xa0>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	08007965 	.word	0x08007965
 8007958:	08007975 	.word	0x08007975
 800795c:	0800796d 	.word	0x0800796d
 8007960:	0800797d 	.word	0x0800797d
 8007964:	2301      	movs	r3, #1
 8007966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796a:	e116      	b.n	8007b9a <UART_SetConfig+0x2e6>
 800796c:	2302      	movs	r3, #2
 800796e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007972:	e112      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007974:	2304      	movs	r3, #4
 8007976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797a:	e10e      	b.n	8007b9a <UART_SetConfig+0x2e6>
 800797c:	2308      	movs	r3, #8
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007982:	e10a      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007984:	2310      	movs	r3, #16
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798a:	e106      	b.n	8007b9a <UART_SetConfig+0x2e6>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a7c      	ldr	r2, [pc, #496]	@ (8007b84 <UART_SetConfig+0x2d0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d138      	bne.n	8007a08 <UART_SetConfig+0x154>
 8007996:	4b7a      	ldr	r3, [pc, #488]	@ (8007b80 <UART_SetConfig+0x2cc>)
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799c:	f003 030c 	and.w	r3, r3, #12
 80079a0:	2b0c      	cmp	r3, #12
 80079a2:	d82d      	bhi.n	8007a00 <UART_SetConfig+0x14c>
 80079a4:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <UART_SetConfig+0xf8>)
 80079a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079aa:	bf00      	nop
 80079ac:	080079e1 	.word	0x080079e1
 80079b0:	08007a01 	.word	0x08007a01
 80079b4:	08007a01 	.word	0x08007a01
 80079b8:	08007a01 	.word	0x08007a01
 80079bc:	080079f1 	.word	0x080079f1
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	08007a01 	.word	0x08007a01
 80079c8:	08007a01 	.word	0x08007a01
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	080079f9 	.word	0x080079f9
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e6:	e0d8      	b.n	8007b9a <UART_SetConfig+0x2e6>
 80079e8:	2302      	movs	r3, #2
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ee:	e0d4      	b.n	8007b9a <UART_SetConfig+0x2e6>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f6:	e0d0      	b.n	8007b9a <UART_SetConfig+0x2e6>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fe:	e0cc      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a06:	e0c8      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a5e      	ldr	r2, [pc, #376]	@ (8007b88 <UART_SetConfig+0x2d4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d125      	bne.n	8007a5e <UART_SetConfig+0x1aa>
 8007a12:	4b5b      	ldr	r3, [pc, #364]	@ (8007b80 <UART_SetConfig+0x2cc>)
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a1c:	2b30      	cmp	r3, #48	@ 0x30
 8007a1e:	d016      	beq.n	8007a4e <UART_SetConfig+0x19a>
 8007a20:	2b30      	cmp	r3, #48	@ 0x30
 8007a22:	d818      	bhi.n	8007a56 <UART_SetConfig+0x1a2>
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d00a      	beq.n	8007a3e <UART_SetConfig+0x18a>
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d814      	bhi.n	8007a56 <UART_SetConfig+0x1a2>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <UART_SetConfig+0x182>
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d008      	beq.n	8007a46 <UART_SetConfig+0x192>
 8007a34:	e00f      	b.n	8007a56 <UART_SetConfig+0x1a2>
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a3c:	e0ad      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a44:	e0a9      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a46:	2304      	movs	r3, #4
 8007a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4c:	e0a5      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a4e:	2308      	movs	r3, #8
 8007a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a54:	e0a1      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a56:	2310      	movs	r3, #16
 8007a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5c:	e09d      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a4a      	ldr	r2, [pc, #296]	@ (8007b8c <UART_SetConfig+0x2d8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d125      	bne.n	8007ab4 <UART_SetConfig+0x200>
 8007a68:	4b45      	ldr	r3, [pc, #276]	@ (8007b80 <UART_SetConfig+0x2cc>)
 8007a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a74:	d016      	beq.n	8007aa4 <UART_SetConfig+0x1f0>
 8007a76:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a78:	d818      	bhi.n	8007aac <UART_SetConfig+0x1f8>
 8007a7a:	2b80      	cmp	r3, #128	@ 0x80
 8007a7c:	d00a      	beq.n	8007a94 <UART_SetConfig+0x1e0>
 8007a7e:	2b80      	cmp	r3, #128	@ 0x80
 8007a80:	d814      	bhi.n	8007aac <UART_SetConfig+0x1f8>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <UART_SetConfig+0x1d8>
 8007a86:	2b40      	cmp	r3, #64	@ 0x40
 8007a88:	d008      	beq.n	8007a9c <UART_SetConfig+0x1e8>
 8007a8a:	e00f      	b.n	8007aac <UART_SetConfig+0x1f8>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a92:	e082      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a9a:	e07e      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa2:	e07a      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aaa:	e076      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab2:	e072      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a35      	ldr	r2, [pc, #212]	@ (8007b90 <UART_SetConfig+0x2dc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d12a      	bne.n	8007b14 <UART_SetConfig+0x260>
 8007abe:	4b30      	ldr	r3, [pc, #192]	@ (8007b80 <UART_SetConfig+0x2cc>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007acc:	d01a      	beq.n	8007b04 <UART_SetConfig+0x250>
 8007ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ad2:	d81b      	bhi.n	8007b0c <UART_SetConfig+0x258>
 8007ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad8:	d00c      	beq.n	8007af4 <UART_SetConfig+0x240>
 8007ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ade:	d815      	bhi.n	8007b0c <UART_SetConfig+0x258>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <UART_SetConfig+0x238>
 8007ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae8:	d008      	beq.n	8007afc <UART_SetConfig+0x248>
 8007aea:	e00f      	b.n	8007b0c <UART_SetConfig+0x258>
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af2:	e052      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007af4:	2302      	movs	r3, #2
 8007af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007afa:	e04e      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007afc:	2304      	movs	r3, #4
 8007afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b02:	e04a      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b04:	2308      	movs	r3, #8
 8007b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b0a:	e046      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b0c:	2310      	movs	r3, #16
 8007b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b12:	e042      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a17      	ldr	r2, [pc, #92]	@ (8007b78 <UART_SetConfig+0x2c4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d13a      	bne.n	8007b94 <UART_SetConfig+0x2e0>
 8007b1e:	4b18      	ldr	r3, [pc, #96]	@ (8007b80 <UART_SetConfig+0x2cc>)
 8007b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b2c:	d01a      	beq.n	8007b64 <UART_SetConfig+0x2b0>
 8007b2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b32:	d81b      	bhi.n	8007b6c <UART_SetConfig+0x2b8>
 8007b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b38:	d00c      	beq.n	8007b54 <UART_SetConfig+0x2a0>
 8007b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b3e:	d815      	bhi.n	8007b6c <UART_SetConfig+0x2b8>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <UART_SetConfig+0x298>
 8007b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b48:	d008      	beq.n	8007b5c <UART_SetConfig+0x2a8>
 8007b4a:	e00f      	b.n	8007b6c <UART_SetConfig+0x2b8>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b52:	e022      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5a:	e01e      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b62:	e01a      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b64:	2308      	movs	r3, #8
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b6a:	e016      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b72:	e012      	b.n	8007b9a <UART_SetConfig+0x2e6>
 8007b74:	efff69f3 	.word	0xefff69f3
 8007b78:	40008000 	.word	0x40008000
 8007b7c:	40013800 	.word	0x40013800
 8007b80:	40021000 	.word	0x40021000
 8007b84:	40004400 	.word	0x40004400
 8007b88:	40004800 	.word	0x40004800
 8007b8c:	40004c00 	.word	0x40004c00
 8007b90:	40005000 	.word	0x40005000
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a9f      	ldr	r2, [pc, #636]	@ (8007e1c <UART_SetConfig+0x568>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d17a      	bne.n	8007c9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d824      	bhi.n	8007bf6 <UART_SetConfig+0x342>
 8007bac:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <UART_SetConfig+0x300>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007bf7 	.word	0x08007bf7
 8007bbc:	08007be1 	.word	0x08007be1
 8007bc0:	08007bf7 	.word	0x08007bf7
 8007bc4:	08007be7 	.word	0x08007be7
 8007bc8:	08007bf7 	.word	0x08007bf7
 8007bcc:	08007bf7 	.word	0x08007bf7
 8007bd0:	08007bf7 	.word	0x08007bf7
 8007bd4:	08007bef 	.word	0x08007bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd8:	f7fd f9f6 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8007bdc:	61f8      	str	r0, [r7, #28]
        break;
 8007bde:	e010      	b.n	8007c02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007be0:	4b8f      	ldr	r3, [pc, #572]	@ (8007e20 <UART_SetConfig+0x56c>)
 8007be2:	61fb      	str	r3, [r7, #28]
        break;
 8007be4:	e00d      	b.n	8007c02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007be6:	f7fd f957 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8007bea:	61f8      	str	r0, [r7, #28]
        break;
 8007bec:	e009      	b.n	8007c02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bf2:	61fb      	str	r3, [r7, #28]
        break;
 8007bf4:	e005      	b.n	8007c02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80fb 	beq.w	8007e00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d305      	bcc.n	8007c26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d903      	bls.n	8007c2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c2c:	e0e8      	b.n	8007e00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	2200      	movs	r2, #0
 8007c32:	461c      	mov	r4, r3
 8007c34:	4615      	mov	r5, r2
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	022b      	lsls	r3, r5, #8
 8007c40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c44:	0222      	lsls	r2, r4, #8
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	6849      	ldr	r1, [r1, #4]
 8007c4a:	0849      	lsrs	r1, r1, #1
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	4688      	mov	r8, r1
 8007c50:	4681      	mov	r9, r0
 8007c52:	eb12 0a08 	adds.w	sl, r2, r8
 8007c56:	eb43 0b09 	adc.w	fp, r3, r9
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	f7f8 ffcc 	bl	8000c08 <__aeabi_uldivmod>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4613      	mov	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c7e:	d308      	bcc.n	8007c92 <UART_SetConfig+0x3de>
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c86:	d204      	bcs.n	8007c92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	60da      	str	r2, [r3, #12]
 8007c90:	e0b6      	b.n	8007e00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c98:	e0b2      	b.n	8007e00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca2:	d15e      	bne.n	8007d62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d828      	bhi.n	8007cfe <UART_SetConfig+0x44a>
 8007cac:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <UART_SetConfig+0x400>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007cd9 	.word	0x08007cd9
 8007cb8:	08007ce1 	.word	0x08007ce1
 8007cbc:	08007ce9 	.word	0x08007ce9
 8007cc0:	08007cff 	.word	0x08007cff
 8007cc4:	08007cef 	.word	0x08007cef
 8007cc8:	08007cff 	.word	0x08007cff
 8007ccc:	08007cff 	.word	0x08007cff
 8007cd0:	08007cff 	.word	0x08007cff
 8007cd4:	08007cf7 	.word	0x08007cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd8:	f7fd f976 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8007cdc:	61f8      	str	r0, [r7, #28]
        break;
 8007cde:	e014      	b.n	8007d0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce0:	f7fd f988 	bl	8004ff4 <HAL_RCC_GetPCLK2Freq>
 8007ce4:	61f8      	str	r0, [r7, #28]
        break;
 8007ce6:	e010      	b.n	8007d0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8007e20 <UART_SetConfig+0x56c>)
 8007cea:	61fb      	str	r3, [r7, #28]
        break;
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fd f8d3 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8007cf2:	61f8      	str	r0, [r7, #28]
        break;
 8007cf4:	e009      	b.n	8007d0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cfa:	61fb      	str	r3, [r7, #28]
        break;
 8007cfc:	e005      	b.n	8007d0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d077      	beq.n	8007e00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	005a      	lsls	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	085b      	lsrs	r3, r3, #1
 8007d1a:	441a      	add	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b0f      	cmp	r3, #15
 8007d2a:	d916      	bls.n	8007d5a <UART_SetConfig+0x4a6>
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d32:	d212      	bcs.n	8007d5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f023 030f 	bic.w	r3, r3, #15
 8007d3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	8afb      	ldrh	r3, [r7, #22]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	8afa      	ldrh	r2, [r7, #22]
 8007d56:	60da      	str	r2, [r3, #12]
 8007d58:	e052      	b.n	8007e00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d60:	e04e      	b.n	8007e00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d827      	bhi.n	8007dba <UART_SetConfig+0x506>
 8007d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <UART_SetConfig+0x4bc>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	08007dbb 	.word	0x08007dbb
 8007d80:	08007dab 	.word	0x08007dab
 8007d84:	08007dbb 	.word	0x08007dbb
 8007d88:	08007dbb 	.word	0x08007dbb
 8007d8c:	08007dbb 	.word	0x08007dbb
 8007d90:	08007db3 	.word	0x08007db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d94:	f7fd f918 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8007d98:	61f8      	str	r0, [r7, #28]
        break;
 8007d9a:	e014      	b.n	8007dc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d9c:	f7fd f92a 	bl	8004ff4 <HAL_RCC_GetPCLK2Freq>
 8007da0:	61f8      	str	r0, [r7, #28]
        break;
 8007da2:	e010      	b.n	8007dc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e20 <UART_SetConfig+0x56c>)
 8007da6:	61fb      	str	r3, [r7, #28]
        break;
 8007da8:	e00d      	b.n	8007dc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007daa:	f7fd f875 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8007dae:	61f8      	str	r0, [r7, #28]
        break;
 8007db0:	e009      	b.n	8007dc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007db6:	61fb      	str	r3, [r7, #28]
        break;
 8007db8:	e005      	b.n	8007dc6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007dc4:	bf00      	nop
    }

    if (pclk != 0U)
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d019      	beq.n	8007e00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	085a      	lsrs	r2, r3, #1
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	441a      	add	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dde:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d909      	bls.n	8007dfa <UART_SetConfig+0x546>
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dec:	d205      	bcs.n	8007dfa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60da      	str	r2, [r3, #12]
 8007df8:	e002      	b.n	8007e00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	@ 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40008000 	.word	0x40008000
 8007e20:	00f42400 	.word	0x00f42400

08007e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	f003 0308 	and.w	r3, r3, #8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01a      	beq.n	8007f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f22:	d10a      	bne.n	8007f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b098      	sub	sp, #96	@ 0x60
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f78:	f7fb fbf8 	bl	800376c <HAL_GetTick>
 8007f7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d12e      	bne.n	8007fea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f94:	2200      	movs	r2, #0
 8007f96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f88c 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d021      	beq.n	8007fea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e062      	b.n	80080b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d149      	bne.n	800808c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008000:	2200      	movs	r2, #0
 8008002:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f856 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d03c      	beq.n	800808c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	623b      	str	r3, [r7, #32]
   return(result);
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008030:	633b      	str	r3, [r7, #48]	@ 0x30
 8008032:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800803e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e6      	bne.n	8008012 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	60fb      	str	r3, [r7, #12]
   return(result);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3308      	adds	r3, #8
 8008062:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008064:	61fa      	str	r2, [r7, #28]
 8008066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	69b9      	ldr	r1, [r7, #24]
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	617b      	str	r3, [r7, #20]
   return(result);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e5      	bne.n	8008044 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e011      	b.n	80080b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3758      	adds	r7, #88	@ 0x58
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c8:	e04f      	b.n	800816a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d04b      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d2:	f7fb fb4b 	bl	800376c <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e04e      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d037      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0xb2>
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b80      	cmp	r3, #128	@ 0x80
 80080fe:	d034      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b40      	cmp	r3, #64	@ 0x40
 8008104:	d031      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b08      	cmp	r3, #8
 8008112:	d110      	bne.n	8008136 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2208      	movs	r2, #8
 800811a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f8ff 	bl	8008320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2208      	movs	r2, #8
 8008126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e029      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008144:	d111      	bne.n	800816a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800814e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f8e5 	bl	8008320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e00f      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4013      	ands	r3, r2
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	429a      	cmp	r2, r3
 8008178:	bf0c      	ite	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	2300      	movne	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	461a      	mov	r2, r3
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	429a      	cmp	r2, r3
 8008186:	d0a0      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b096      	sub	sp, #88	@ 0x58
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	88fa      	ldrh	r2, [r7, #6]
 80081ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2222      	movs	r2, #34	@ 0x22
 80081bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d028      	beq.n	800821a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081cc:	4a3e      	ldr	r2, [pc, #248]	@ (80082c8 <UART_Start_Receive_DMA+0x134>)
 80081ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081d4:	4a3d      	ldr	r2, [pc, #244]	@ (80082cc <UART_Start_Receive_DMA+0x138>)
 80081d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081dc:	4a3c      	ldr	r2, [pc, #240]	@ (80082d0 <UART_Start_Receive_DMA+0x13c>)
 80081de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e4:	2200      	movs	r2, #0
 80081e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3324      	adds	r3, #36	@ 0x24
 80081f2:	4619      	mov	r1, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	461a      	mov	r2, r3
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	f7fb fc80 	bl	8003b00 <HAL_DMA_Start_IT>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2210      	movs	r2, #16
 800820a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e051      	b.n	80082be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d018      	beq.n	8008254 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008236:	657b      	str	r3, [r7, #84]	@ 0x54
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008242:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800824e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e6      	bne.n	8008222 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3308      	adds	r3, #8
 800825a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	653b      	str	r3, [r7, #80]	@ 0x50
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008274:	637a      	str	r2, [r7, #52]	@ 0x34
 8008276:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800827a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e5      	bne.n	8008254 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	613b      	str	r3, [r7, #16]
   return(result);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800829e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082a8:	623a      	str	r2, [r7, #32]
 80082aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	69f9      	ldr	r1, [r7, #28]
 80082ae:	6a3a      	ldr	r2, [r7, #32]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3758      	adds	r7, #88	@ 0x58
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	080083e9 	.word	0x080083e9
 80082cc:	08008515 	.word	0x08008515
 80082d0:	08008553 	.word	0x08008553

080082d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	@ 0x24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80082f0:	61fb      	str	r3, [r7, #28]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6979      	ldr	r1, [r7, #20]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	613b      	str	r3, [r7, #16]
   return(result);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e6      	bne.n	80082dc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008314:	bf00      	nop
 8008316:	3724      	adds	r7, #36	@ 0x24
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b095      	sub	sp, #84	@ 0x54
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800833c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008346:	643b      	str	r3, [r7, #64]	@ 0x40
 8008348:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800834c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e6      	bne.n	8008328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	61fb      	str	r3, [r7, #28]
   return(result);
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f023 0301 	bic.w	r3, r3, #1
 8008370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800837a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800837c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e5      	bne.n	800835a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008392:	2b01      	cmp	r3, #1
 8008394:	d118      	bne.n	80083c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f023 0310 	bic.w	r3, r3, #16
 80083aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6979      	ldr	r1, [r7, #20]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	613b      	str	r3, [r7, #16]
   return(result);
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083dc:	bf00      	nop
 80083de:	3754      	adds	r7, #84	@ 0x54
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b09c      	sub	sp, #112	@ 0x70
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0320 	and.w	r3, r3, #32
 8008400:	2b00      	cmp	r3, #0
 8008402:	d171      	bne.n	80084e8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008406:	2200      	movs	r2, #0
 8008408:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800841a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800841c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800842a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800842c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e6      	bne.n	800840c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	f023 0301 	bic.w	r3, r3, #1
 8008454:	667b      	str	r3, [r7, #100]	@ 0x64
 8008456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800845e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800846c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e5      	bne.n	800843e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3308      	adds	r3, #8
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	623b      	str	r3, [r7, #32]
   return(result);
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008488:	663b      	str	r3, [r7, #96]	@ 0x60
 800848a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008492:	633a      	str	r2, [r7, #48]	@ 0x30
 8008494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e5      	bne.n	8008472 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a8:	2220      	movs	r2, #32
 80084aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d118      	bne.n	80084e8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d4:	61fb      	str	r3, [r7, #28]
 80084d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	69b9      	ldr	r1, [r7, #24]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	617b      	str	r3, [r7, #20]
   return(result);
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ea:	2200      	movs	r2, #0
 80084ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d107      	bne.n	8008506 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80084fc:	4619      	mov	r1, r3
 80084fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008500:	f7f8 ff0a 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008504:	e002      	b.n	800850c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008506:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008508:	f7ff f9b6 	bl	8007878 <HAL_UART_RxCpltCallback>
}
 800850c:	bf00      	nop
 800850e:	3770      	adds	r7, #112	@ 0x70
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008520:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800852c:	2b01      	cmp	r3, #1
 800852e:	d109      	bne.n	8008544 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008536:	085b      	lsrs	r3, r3, #1
 8008538:	b29b      	uxth	r3, r3
 800853a:	4619      	mov	r1, r3
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7f8 feeb 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008542:	e002      	b.n	800854a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff f9a1 	bl	800788c <HAL_UART_RxHalfCpltCallback>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008564:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008578:	2b80      	cmp	r3, #128	@ 0x80
 800857a:	d109      	bne.n	8008590 <UART_DMAError+0x3e>
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	2b21      	cmp	r3, #33	@ 0x21
 8008580:	d106      	bne.n	8008590 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f7ff fea2 	bl	80082d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859a:	2b40      	cmp	r3, #64	@ 0x40
 800859c:	d109      	bne.n	80085b2 <UART_DMAError+0x60>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b22      	cmp	r3, #34	@ 0x22
 80085a2:	d106      	bne.n	80085b2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80085ac:	6978      	ldr	r0, [r7, #20]
 80085ae:	f7ff feb7 	bl	8008320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085b8:	f043 0210 	orr.w	r2, r3, #16
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085c2:	6978      	ldr	r0, [r7, #20]
 80085c4:	f7ff f96c 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c8:	bf00      	nop
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff f956 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	60bb      	str	r3, [r7, #8]
   return(result);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6979      	ldr	r1, [r7, #20]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	613b      	str	r3, [r7, #16]
   return(result);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e6      	bne.n	8008604 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f8 fea8 	bl	8001398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008648:	bf00      	nop
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08c      	sub	sp, #48	@ 0x30
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008678:	2b20      	cmp	r3, #32
 800867a:	d142      	bne.n	8008702 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e03b      	b.n	8008704 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008698:	88fb      	ldrh	r3, [r7, #6]
 800869a:	461a      	mov	r2, r3
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7ff fd78 	bl	8008194 <UART_Start_Receive_DMA>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80086aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d124      	bne.n	80086fc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d11d      	bne.n	80086f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2210      	movs	r2, #16
 80086c0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	617b      	str	r3, [r7, #20]
   return(result);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f043 0310 	orr.w	r3, r3, #16
 80086d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	6a39      	ldr	r1, [r7, #32]
 80086e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e6      	bne.n	80086c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80086f4:	e002      	b.n	80086fc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80086fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008700:	e000      	b.n	8008704 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008702:	2302      	movs	r3, #2
  }
}
 8008704:	4618      	mov	r0, r3
 8008706:	3730      	adds	r7, #48	@ 0x30
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <__NVIC_SetPriority>:
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800871c:	2b00      	cmp	r3, #0
 800871e:	db0a      	blt.n	8008736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	b2da      	uxtb	r2, r3
 8008724:	490c      	ldr	r1, [pc, #48]	@ (8008758 <__NVIC_SetPriority+0x4c>)
 8008726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872a:	0112      	lsls	r2, r2, #4
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	440b      	add	r3, r1
 8008730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008734:	e00a      	b.n	800874c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	b2da      	uxtb	r2, r3
 800873a:	4908      	ldr	r1, [pc, #32]	@ (800875c <__NVIC_SetPriority+0x50>)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	3b04      	subs	r3, #4
 8008744:	0112      	lsls	r2, r2, #4
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	440b      	add	r3, r1
 800874a:	761a      	strb	r2, [r3, #24]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	e000e100 	.word	0xe000e100
 800875c:	e000ed00 	.word	0xe000ed00

08008760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <SysTick_Handler+0x1c>)
 8008766:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008768:	f001 fe62 	bl	800a430 <xTaskGetSchedulerState>
 800876c:	4603      	mov	r3, r0
 800876e:	2b01      	cmp	r3, #1
 8008770:	d001      	beq.n	8008776 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008772:	f002 fe61 	bl	800b438 <xPortSysTickHandler>
  }
}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	e000e010 	.word	0xe000e010

08008780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008784:	2100      	movs	r1, #0
 8008786:	f06f 0004 	mvn.w	r0, #4
 800878a:	f7ff ffbf 	bl	800870c <__NVIC_SetPriority>
#endif
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879a:	f3ef 8305 	mrs	r3, IPSR
 800879e:	603b      	str	r3, [r7, #0]
  return(result);
 80087a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087a6:	f06f 0305 	mvn.w	r3, #5
 80087aa:	607b      	str	r3, [r7, #4]
 80087ac:	e00c      	b.n	80087c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087ae:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <osKernelInitialize+0x44>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80087b6:	4b08      	ldr	r3, [pc, #32]	@ (80087d8 <osKernelInitialize+0x44>)
 80087b8:	2201      	movs	r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087bc:	2300      	movs	r3, #0
 80087be:	607b      	str	r3, [r7, #4]
 80087c0:	e002      	b.n	80087c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295
 80087c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087c8:	687b      	ldr	r3, [r7, #4]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	2000064c 	.word	0x2000064c

080087dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e2:	f3ef 8305 	mrs	r3, IPSR
 80087e6:	603b      	str	r3, [r7, #0]
  return(result);
 80087e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80087ee:	f06f 0305 	mvn.w	r3, #5
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	e010      	b.n	8008818 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <osKernelStart+0x48>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d109      	bne.n	8008812 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087fe:	f7ff ffbf 	bl	8008780 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008802:	4b08      	ldr	r3, [pc, #32]	@ (8008824 <osKernelStart+0x48>)
 8008804:	2202      	movs	r2, #2
 8008806:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008808:	f001 f99e 	bl	8009b48 <vTaskStartScheduler>
      stat = osOK;
 800880c:	2300      	movs	r3, #0
 800880e:	607b      	str	r3, [r7, #4]
 8008810:	e002      	b.n	8008818 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008812:	f04f 33ff 	mov.w	r3, #4294967295
 8008816:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008818:	687b      	ldr	r3, [r7, #4]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	2000064c 	.word	0x2000064c

08008828 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af04      	add	r7, sp, #16
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008838:	f3ef 8305 	mrs	r3, IPSR
 800883c:	617b      	str	r3, [r7, #20]
  return(result);
 800883e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008840:	2b00      	cmp	r3, #0
 8008842:	d17e      	bne.n	8008942 <osThreadNew+0x11a>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d07b      	beq.n	8008942 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800884a:	2380      	movs	r3, #128	@ 0x80
 800884c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800884e:	2318      	movs	r3, #24
 8008850:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008856:	f04f 33ff 	mov.w	r3, #4294967295
 800885a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d045      	beq.n	80088ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <osThreadNew+0x48>
        name = attr->name;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d008      	beq.n	8008896 <osThreadNew+0x6e>
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b38      	cmp	r3, #56	@ 0x38
 8008888:	d805      	bhi.n	8008896 <osThreadNew+0x6e>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <osThreadNew+0x72>
        return (NULL);
 8008896:	2300      	movs	r3, #0
 8008898:	e054      	b.n	8008944 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	089b      	lsrs	r3, r3, #2
 80088a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <osThreadNew+0xa8>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	2ba7      	cmp	r3, #167	@ 0xa7
 80088b8:	d90a      	bls.n	80088d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d006      	beq.n	80088d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <osThreadNew+0xa8>
        mem = 1;
 80088ca:	2301      	movs	r3, #1
 80088cc:	61bb      	str	r3, [r7, #24]
 80088ce:	e010      	b.n	80088f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <osThreadNew+0xca>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d108      	bne.n	80088f2 <osThreadNew+0xca>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d104      	bne.n	80088f2 <osThreadNew+0xca>
          mem = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61bb      	str	r3, [r7, #24]
 80088ec:	e001      	b.n	80088f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d110      	bne.n	800891a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008900:	9202      	str	r2, [sp, #8]
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 ff26 	bl	8009760 <xTaskCreateStatic>
 8008914:	4603      	mov	r3, r0
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	e013      	b.n	8008942 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d110      	bne.n	8008942 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	b29a      	uxth	r2, r3
 8008924:	f107 0310 	add.w	r3, r7, #16
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 ff74 	bl	8009820 <xTaskCreate>
 8008938:	4603      	mov	r3, r0
 800893a:	2b01      	cmp	r3, #1
 800893c:	d001      	beq.n	8008942 <osThreadNew+0x11a>
            hTask = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008942:	693b      	ldr	r3, [r7, #16]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3728      	adds	r7, #40	@ 0x28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <osThreadFlagsSet+0x1a>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	da03      	bge.n	800896e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008966:	f06f 0303 	mvn.w	r3, #3
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e035      	b.n	80089da <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008974:	f3ef 8305 	mrs	r3, IPSR
 8008978:	613b      	str	r3, [r7, #16]
  return(result);
 800897a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01f      	beq.n	80089c0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008980:	2300      	movs	r3, #0
 8008982:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008984:	f107 0308 	add.w	r3, r7, #8
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	2300      	movs	r3, #0
 800898c:	2201      	movs	r2, #1
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6978      	ldr	r0, [r7, #20]
 8008992:	f001 fefd 	bl	800a790 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	2200      	movs	r2, #0
 800899c:	9200      	str	r2, [sp, #0]
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	6978      	ldr	r0, [r7, #20]
 80089a4:	f001 fef4 	bl	800a790 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d015      	beq.n	80089da <osThreadFlagsSet+0x8e>
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <osThreadFlagsSet+0x98>)
 80089b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	e00c      	b.n	80089da <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80089c0:	2300      	movs	r3, #0
 80089c2:	2201      	movs	r2, #1
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6978      	ldr	r0, [r7, #20]
 80089c8:	f001 fe20 	bl	800a60c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80089cc:	f107 030c 	add.w	r3, r7, #12
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	6978      	ldr	r0, [r7, #20]
 80089d6:	f001 fe19 	bl	800a60c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80089da:	68fb      	ldr	r3, [r7, #12]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f0:	f3ef 8305 	mrs	r3, IPSR
 80089f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089f6:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 80089fc:	f06f 0305 	mvn.w	r3, #5
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e02a      	b.n	8008a5a <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da03      	bge.n	8008a12 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8008a0a:	f06f 0303 	mvn.w	r3, #3
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	e023      	b.n	8008a5a <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8008a12:	f001 fcfd 	bl	800a410 <xTaskGetCurrentTaskHandle>
 8008a16:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8008a18:	f107 0308 	add.w	r3, r7, #8
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6938      	ldr	r0, [r7, #16]
 8008a22:	f001 fdf3 	bl	800a60c <xTaskGenericNotify>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d113      	bne.n	8008a54 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	43da      	mvns	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	4013      	ands	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2203      	movs	r2, #3
 8008a40:	6938      	ldr	r0, [r7, #16]
 8008a42:	f001 fde3 	bl	800a60c <xTaskGenericNotify>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d006      	beq.n	8008a5a <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 8008a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	e002      	b.n	8008a5a <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8008a5a:	697b      	ldr	r3, [r7, #20]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	@ 0x30
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a70:	f3ef 8305 	mrs	r3, IPSR
 8008a74:	617b      	str	r3, [r7, #20]
  return(result);
 8008a76:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008a7c:	f06f 0305 	mvn.w	r3, #5
 8008a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a82:	e06b      	b.n	8008b5c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da03      	bge.n	8008a92 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008a8a:	f06f 0303 	mvn.w	r3, #3
 8008a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a90:	e064      	b.n	8008b5c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aa0:	e001      	b.n	8008aa6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8008aae:	f001 f967 	bl	8009d80 <xTaskGetTickCount>
 8008ab2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008ab4:	f107 0210 	add.w	r2, r7, #16
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008abc:	2000      	movs	r0, #0
 8008abe:	f001 fd45 	bl	800a54c <xTaskNotifyWait>
 8008ac2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d137      	bne.n	8008b3a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00c      	beq.n	8008afe <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	4013      	ands	r3, r2
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d032      	beq.n	8008b56 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10f      	bne.n	8008b16 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008af6:	f06f 0302 	mvn.w	r3, #2
 8008afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008afc:	e02e      	b.n	8008b5c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d128      	bne.n	8008b5a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d103      	bne.n	8008b16 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008b0e:	f06f 0302 	mvn.w	r3, #2
 8008b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008b14:	e022      	b.n	8008b5c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008b16:	f001 f933 	bl	8009d80 <xTaskGetTickCount>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d902      	bls.n	8008b30 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b2e:	e00e      	b.n	8008b4e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b38:	e009      	b.n	8008b4e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d103      	bne.n	8008b48 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008b40:	f06f 0302 	mvn.w	r3, #2
 8008b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b46:	e002      	b.n	8008b4e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008b48:	f06f 0301 	mvn.w	r3, #1
 8008b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1af      	bne.n	8008ab4 <osThreadFlagsWait+0x50>
 8008b54:	e002      	b.n	8008b5c <osThreadFlagsWait+0xf8>
            break;
 8008b56:	bf00      	nop
 8008b58:	e000      	b.n	8008b5c <osThreadFlagsWait+0xf8>
            break;
 8008b5a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3730      	adds	r7, #48	@ 0x30
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b6e:	f3ef 8305 	mrs	r3, IPSR
 8008b72:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <osDelay+0x1c>
    stat = osErrorISR;
 8008b7a:	f06f 0305 	mvn.w	r3, #5
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	e007      	b.n	8008b92 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 ffa5 	bl	8009adc <vTaskDelay>
    }
  }

  return (stat);
 8008b92:	68fb      	ldr	r3, [r7, #12]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4a07      	ldr	r2, [pc, #28]	@ (8008bc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	4a06      	ldr	r2, [pc, #24]	@ (8008bcc <vApplicationGetIdleTaskMemory+0x30>)
 8008bb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2280      	movs	r2, #128	@ 0x80
 8008bb8:	601a      	str	r2, [r3, #0]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000650 	.word	0x20000650
 8008bcc:	200006f8 	.word	0x200006f8

08008bd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a07      	ldr	r2, [pc, #28]	@ (8008bfc <vApplicationGetTimerTaskMemory+0x2c>)
 8008be0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	4a06      	ldr	r2, [pc, #24]	@ (8008c00 <vApplicationGetTimerTaskMemory+0x30>)
 8008be6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bee:	601a      	str	r2, [r3, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	200008f8 	.word	0x200008f8
 8008c00:	200009a0 	.word	0x200009a0

08008c04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f103 0208 	add.w	r2, r3, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f103 0208 	add.w	r2, r3, #8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f103 0208 	add.w	r2, r3, #8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
}
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d103      	bne.n	8008cc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	e00c      	b.n	8008ce0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	e002      	b.n	8008cd4 <vListInsert+0x2e>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d2f6      	bcs.n	8008cce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	601a      	str	r2, [r3, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6892      	ldr	r2, [r2, #8]
 8008d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6852      	ldr	r2, [r2, #4]
 8008d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d103      	bne.n	8008d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	1e5a      	subs	r2, r3, #1
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d98:	f002 fabe 	bl	800b318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da4:	68f9      	ldr	r1, [r7, #12]
 8008da6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008da8:	fb01 f303 	mul.w	r3, r1, r3
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	441a      	add	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	22ff      	movs	r2, #255	@ 0xff
 8008ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	22ff      	movs	r2, #255	@ 0xff
 8008de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d114      	bne.n	8008e18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01a      	beq.n	8008e2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3310      	adds	r3, #16
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 f942 	bl	800a084 <xTaskRemoveFromEventList>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d012      	beq.n	8008e2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e06:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <xQueueGenericReset+0xd0>)
 8008e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	e009      	b.n	8008e2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fef1 	bl	8008c04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3324      	adds	r3, #36	@ 0x24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff feec 	bl	8008c04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e2c:	f002 faa6 	bl	800b37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e30:	2301      	movs	r3, #1
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08e      	sub	sp, #56	@ 0x38
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10b      	bne.n	8008e6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e66:	bf00      	nop
 8008e68:	bf00      	nop
 8008e6a:	e7fd      	b.n	8008e68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10b      	bne.n	8008e8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <xQueueGenericCreateStatic+0x56>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <xQueueGenericCreateStatic+0x5a>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <xQueueGenericCreateStatic+0x5c>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	623b      	str	r3, [r7, #32]
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	e7fd      	b.n	8008eb4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d102      	bne.n	8008ec4 <xQueueGenericCreateStatic+0x84>
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <xQueueGenericCreateStatic+0x88>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <xQueueGenericCreateStatic+0x8a>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61fb      	str	r3, [r7, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ee6:	2350      	movs	r3, #80	@ 0x50
 8008ee8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b50      	cmp	r3, #80	@ 0x50
 8008eee:	d00b      	beq.n	8008f08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	61bb      	str	r3, [r7, #24]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00d      	beq.n	8008f30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f1c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f805 	bl	8008f3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3730      	adds	r7, #48	@ 0x30
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d103      	bne.n	8008f56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e002      	b.n	8008f5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f68:	2101      	movs	r1, #1
 8008f6a:	69b8      	ldr	r0, [r7, #24]
 8008f6c:	f7ff fefe 	bl	8008d6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	@ 0x38
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10b      	bne.n	8008fb4 <xQueueGenericSend+0x34>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	e7fd      	b.n	8008fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <xQueueGenericSend+0x42>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <xQueueGenericSend+0x46>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <xQueueGenericSend+0x48>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <xQueueGenericSend+0x64>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d103      	bne.n	8008ff2 <xQueueGenericSend+0x72>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <xQueueGenericSend+0x76>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <xQueueGenericSend+0x78>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10b      	bne.n	8009014 <xQueueGenericSend+0x94>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	623b      	str	r3, [r7, #32]
}
 800900e:	bf00      	nop
 8009010:	bf00      	nop
 8009012:	e7fd      	b.n	8009010 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009014:	f001 fa0c 	bl	800a430 <xTaskGetSchedulerState>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <xQueueGenericSend+0xa4>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <xQueueGenericSend+0xa8>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <xQueueGenericSend+0xaa>
 8009028:	2300      	movs	r3, #0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <xQueueGenericSend+0xc6>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	61fb      	str	r3, [r7, #28]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009046:	f002 f967 	bl	800b318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009052:	429a      	cmp	r2, r3
 8009054:	d302      	bcc.n	800905c <xQueueGenericSend+0xdc>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d129      	bne.n	80090b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009062:	f000 fa0f 	bl	8009484 <prvCopyDataToQueue>
 8009066:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	d010      	beq.n	8009092 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	3324      	adds	r3, #36	@ 0x24
 8009074:	4618      	mov	r0, r3
 8009076:	f001 f805 	bl	800a084 <xTaskRemoveFromEventList>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d013      	beq.n	80090a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009080:	4b3f      	ldr	r3, [pc, #252]	@ (8009180 <xQueueGenericSend+0x200>)
 8009082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	e00a      	b.n	80090a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d007      	beq.n	80090a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009098:	4b39      	ldr	r3, [pc, #228]	@ (8009180 <xQueueGenericSend+0x200>)
 800909a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090a8:	f002 f968 	bl	800b37c <vPortExitCritical>
				return pdPASS;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e063      	b.n	8009178 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d103      	bne.n	80090be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090b6:	f002 f961 	bl	800b37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	e05c      	b.n	8009178 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d106      	bne.n	80090d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090c4:	f107 0314 	add.w	r3, r7, #20
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 f83f 	bl	800a14c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090ce:	2301      	movs	r3, #1
 80090d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090d2:	f002 f953 	bl	800b37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d6:	f000 fda7 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090da:	f002 f91d 	bl	800b318 <vPortEnterCritical>
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090e4:	b25b      	sxtb	r3, r3
 80090e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ea:	d103      	bne.n	80090f4 <xQueueGenericSend+0x174>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d103      	bne.n	800910a <xQueueGenericSend+0x18a>
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800910a:	f002 f937 	bl	800b37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800910e:	1d3a      	adds	r2, r7, #4
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f001 f82e 	bl	800a178 <xTaskCheckForTimeOut>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d124      	bne.n	800916c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009122:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009124:	f000 faa6 	bl	8009674 <prvIsQueueFull>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	3310      	adds	r3, #16
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f000 ff52 	bl	8009fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800913c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800913e:	f000 fa31 	bl	80095a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009142:	f000 fd7f 	bl	8009c44 <xTaskResumeAll>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f af7c 	bne.w	8009046 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800914e:	4b0c      	ldr	r3, [pc, #48]	@ (8009180 <xQueueGenericSend+0x200>)
 8009150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	e772      	b.n	8009046 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009162:	f000 fa1f 	bl	80095a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009166:	f000 fd6d 	bl	8009c44 <xTaskResumeAll>
 800916a:	e76c      	b.n	8009046 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800916c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800916e:	f000 fa19 	bl	80095a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009172:	f000 fd67 	bl	8009c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009176:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009178:	4618      	mov	r0, r3
 800917a:	3738      	adds	r7, #56	@ 0x38
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b090      	sub	sp, #64	@ 0x40
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <xQueueGenericSendFromISR+0x3e>
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <xQueueGenericSendFromISR+0x42>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <xQueueGenericSendFromISR+0x44>
 80091c6:	2300      	movs	r3, #0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d103      	bne.n	80091f2 <xQueueGenericSendFromISR+0x6e>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <xQueueGenericSendFromISR+0x72>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <xQueueGenericSendFromISR+0x74>
 80091f6:	2300      	movs	r3, #0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10b      	bne.n	8009214 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	623b      	str	r3, [r7, #32]
}
 800920e:	bf00      	nop
 8009210:	bf00      	nop
 8009212:	e7fd      	b.n	8009210 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009214:	f002 f960 	bl	800b4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009218:	f3ef 8211 	mrs	r2, BASEPRI
 800921c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	61fa      	str	r2, [r7, #28]
 800922e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009230:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009232:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923c:	429a      	cmp	r2, r3
 800923e:	d302      	bcc.n	8009246 <xQueueGenericSendFromISR+0xc2>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d12f      	bne.n	80092a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800924c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009254:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800925c:	f000 f912 	bl	8009484 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009260:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009268:	d112      	bne.n	8009290 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800926a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d016      	beq.n	80092a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	3324      	adds	r3, #36	@ 0x24
 8009276:	4618      	mov	r0, r3
 8009278:	f000 ff04 	bl	800a084 <xTaskRemoveFromEventList>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00e      	beq.n	80092a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	e007      	b.n	80092a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009290:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009294:	3301      	adds	r3, #1
 8009296:	b2db      	uxtb	r3, r3
 8009298:	b25a      	sxtb	r2, r3
 800929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80092a0:	2301      	movs	r3, #1
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80092a4:	e001      	b.n	80092aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3740      	adds	r7, #64	@ 0x40
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08c      	sub	sp, #48	@ 0x30
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <xQueueReceive+0x32>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	623b      	str	r3, [r7, #32]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <xQueueReceive+0x40>
 80092f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <xQueueReceive+0x44>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <xQueueReceive+0x46>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <xQueueReceive+0x62>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	61fb      	str	r3, [r7, #28]
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	e7fd      	b.n	800931e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009322:	f001 f885 	bl	800a430 <xTaskGetSchedulerState>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <xQueueReceive+0x72>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <xQueueReceive+0x76>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueReceive+0x78>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10b      	bne.n	8009354 <xQueueReceive+0x94>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61bb      	str	r3, [r7, #24]
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	e7fd      	b.n	8009350 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009354:	f001 ffe0 	bl	800b318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01f      	beq.n	80093a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009364:	68b9      	ldr	r1, [r7, #8]
 8009366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009368:	f000 f8f6 	bl	8009558 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	1e5a      	subs	r2, r3, #1
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00f      	beq.n	800939c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	3310      	adds	r3, #16
 8009380:	4618      	mov	r0, r3
 8009382:	f000 fe7f 	bl	800a084 <xTaskRemoveFromEventList>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800938c:	4b3c      	ldr	r3, [pc, #240]	@ (8009480 <xQueueReceive+0x1c0>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800939c:	f001 ffee 	bl	800b37c <vPortExitCritical>
				return pdPASS;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e069      	b.n	8009478 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093aa:	f001 ffe7 	bl	800b37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e062      	b.n	8009478 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fec5 	bl	800a14c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093c6:	f001 ffd9 	bl	800b37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093ca:	f000 fc2d 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ce:	f001 ffa3 	bl	800b318 <vPortEnterCritical>
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093de:	d103      	bne.n	80093e8 <xQueueReceive+0x128>
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d103      	bne.n	80093fe <xQueueReceive+0x13e>
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093fe:	f001 ffbd 	bl	800b37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009402:	1d3a      	adds	r2, r7, #4
 8009404:	f107 0310 	add.w	r3, r7, #16
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 feb4 	bl	800a178 <xTaskCheckForTimeOut>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d123      	bne.n	800945e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009418:	f000 f916 	bl	8009648 <prvIsQueueEmpty>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d017      	beq.n	8009452 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	3324      	adds	r3, #36	@ 0x24
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fdd8 	bl	8009fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009432:	f000 f8b7 	bl	80095a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009436:	f000 fc05 	bl	8009c44 <xTaskResumeAll>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d189      	bne.n	8009354 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009440:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <xQueueReceive+0x1c0>)
 8009442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	e780      	b.n	8009354 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009454:	f000 f8a6 	bl	80095a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009458:	f000 fbf4 	bl	8009c44 <xTaskResumeAll>
 800945c:	e77a      	b.n	8009354 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800945e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009460:	f000 f8a0 	bl	80095a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009464:	f000 fbee 	bl	8009c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009468:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800946a:	f000 f8ed 	bl	8009648 <prvIsQueueEmpty>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	f43f af6f 	beq.w	8009354 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009476:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009478:	4618      	mov	r0, r3
 800947a:	3730      	adds	r7, #48	@ 0x30
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009498:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10d      	bne.n	80094be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d14d      	bne.n	8009546 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 ffdc 	bl	800a46c <xTaskPriorityDisinherit>
 80094b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	609a      	str	r2, [r3, #8]
 80094bc:	e043      	b.n	8009546 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d119      	bne.n	80094f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6858      	ldr	r0, [r3, #4]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094cc:	461a      	mov	r2, r3
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	f003 fa47 	bl	800c962 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094dc:	441a      	add	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d32b      	bcc.n	8009546 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	605a      	str	r2, [r3, #4]
 80094f6:	e026      	b.n	8009546 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68d8      	ldr	r0, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009500:	461a      	mov	r2, r3
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	f003 fa2d 	bl	800c962 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009510:	425b      	negs	r3, r3
 8009512:	441a      	add	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d207      	bcs.n	8009534 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952c:	425b      	negs	r3, r3
 800952e:	441a      	add	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d105      	bne.n	8009546 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3b01      	subs	r3, #1
 8009544:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800954e:	697b      	ldr	r3, [r7, #20]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009566:	2b00      	cmp	r3, #0
 8009568:	d018      	beq.n	800959c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009572:	441a      	add	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	429a      	cmp	r2, r3
 8009582:	d303      	bcc.n	800958c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68d9      	ldr	r1, [r3, #12]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009594:	461a      	mov	r2, r3
 8009596:	6838      	ldr	r0, [r7, #0]
 8009598:	f003 f9e3 	bl	800c962 <memcpy>
	}
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095ac:	f001 feb4 	bl	800b318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095b8:	e011      	b.n	80095de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d012      	beq.n	80095e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3324      	adds	r3, #36	@ 0x24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fd5c 	bl	800a084 <xTaskRemoveFromEventList>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095d2:	f000 fe35 	bl	800a240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	3b01      	subs	r3, #1
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dce9      	bgt.n	80095ba <prvUnlockQueue+0x16>
 80095e6:	e000      	b.n	80095ea <prvUnlockQueue+0x46>
					break;
 80095e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	22ff      	movs	r2, #255	@ 0xff
 80095ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80095f2:	f001 fec3 	bl	800b37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095f6:	f001 fe8f 	bl	800b318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009602:	e011      	b.n	8009628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d012      	beq.n	8009632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3310      	adds	r3, #16
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fd37 	bl	800a084 <xTaskRemoveFromEventList>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800961c:	f000 fe10 	bl	800a240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	3b01      	subs	r3, #1
 8009624:	b2db      	uxtb	r3, r3
 8009626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800962c:	2b00      	cmp	r3, #0
 800962e:	dce9      	bgt.n	8009604 <prvUnlockQueue+0x60>
 8009630:	e000      	b.n	8009634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	22ff      	movs	r2, #255	@ 0xff
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800963c:	f001 fe9e 	bl	800b37c <vPortExitCritical>
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009650:	f001 fe62 	bl	800b318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009658:	2b00      	cmp	r3, #0
 800965a:	d102      	bne.n	8009662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e001      	b.n	8009666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009666:	f001 fe89 	bl	800b37c <vPortExitCritical>

	return xReturn;
 800966a:	68fb      	ldr	r3, [r7, #12]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800967c:	f001 fe4c 	bl	800b318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009688:	429a      	cmp	r2, r3
 800968a:	d102      	bne.n	8009692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800968c:	2301      	movs	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	e001      	b.n	8009696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009696:	f001 fe71 	bl	800b37c <vPortExitCritical>

	return xReturn;
 800969a:	68fb      	ldr	r3, [r7, #12]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e014      	b.n	80096de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096b4:	4a0f      	ldr	r2, [pc, #60]	@ (80096f4 <vQueueAddToRegistry+0x50>)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10b      	bne.n	80096d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096c0:	490c      	ldr	r1, [pc, #48]	@ (80096f4 <vQueueAddToRegistry+0x50>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096ca:	4a0a      	ldr	r2, [pc, #40]	@ (80096f4 <vQueueAddToRegistry+0x50>)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4413      	add	r3, r2
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096d6:	e006      	b.n	80096e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b07      	cmp	r3, #7
 80096e2:	d9e7      	bls.n	80096b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000da0 	.word	0x20000da0

080096f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009708:	f001 fe06 	bl	800b318 <vPortEnterCritical>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009712:	b25b      	sxtb	r3, r3
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d103      	bne.n	8009722 <vQueueWaitForMessageRestricted+0x2a>
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009728:	b25b      	sxtb	r3, r3
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d103      	bne.n	8009738 <vQueueWaitForMessageRestricted+0x40>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009738:	f001 fe20 	bl	800b37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3324      	adds	r3, #36	@ 0x24
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fc6d 	bl	800a02c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f7ff ff26 	bl	80095a4 <prvUnlockQueue>
	}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08e      	sub	sp, #56	@ 0x38
 8009764:	af04      	add	r7, sp, #16
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800976e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10b      	bne.n	800978c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	623b      	str	r3, [r7, #32]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	61fb      	str	r3, [r7, #28]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097aa:	23a8      	movs	r3, #168	@ 0xa8
 80097ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80097b2:	d00b      	beq.n	80097cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	61bb      	str	r3, [r7, #24]
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01e      	beq.n	8009812 <xTaskCreateStatic+0xb2>
 80097d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01b      	beq.n	8009812 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097ec:	2300      	movs	r3, #0
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	f107 0314 	add.w	r3, r7, #20
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f851 	bl	80098ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800980a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800980c:	f000 f8f6 	bl	80099fc <prvAddNewTaskToReadyList>
 8009810:	e001      	b.n	8009816 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009812:	2300      	movs	r3, #0
 8009814:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009816:	697b      	ldr	r3, [r7, #20]
	}
 8009818:	4618      	mov	r0, r3
 800981a:	3728      	adds	r7, #40	@ 0x28
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08c      	sub	sp, #48	@ 0x30
 8009824:	af04      	add	r7, sp, #16
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	4613      	mov	r3, r2
 800982e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4618      	mov	r0, r3
 8009836:	f001 fe91 	bl	800b55c <pvPortMalloc>
 800983a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00e      	beq.n	8009860 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009842:	20a8      	movs	r0, #168	@ 0xa8
 8009844:	f001 fe8a 	bl	800b55c <pvPortMalloc>
 8009848:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	631a      	str	r2, [r3, #48]	@ 0x30
 8009856:	e005      	b.n	8009864 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009858:	6978      	ldr	r0, [r7, #20]
 800985a:	f001 ff4d 	bl	800b6f8 <vPortFree>
 800985e:	e001      	b.n	8009864 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d017      	beq.n	800989a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	2300      	movs	r3, #0
 8009876:	9303      	str	r3, [sp, #12]
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	9302      	str	r3, [sp, #8]
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f80f 	bl	80098ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800988e:	69f8      	ldr	r0, [r7, #28]
 8009890:	f000 f8b4 	bl	80099fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009894:	2301      	movs	r3, #1
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e002      	b.n	80098a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800989a:	f04f 33ff 	mov.w	r3, #4294967295
 800989e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098a0:	69bb      	ldr	r3, [r7, #24]
	}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3720      	adds	r7, #32
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	461a      	mov	r2, r3
 80098c4:	21a5      	movs	r1, #165	@ 0xa5
 80098c6:	f002 ff0a 	bl	800c6de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098d4:	3b01      	subs	r3, #1
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00b      	beq.n	8009906 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	617b      	str	r3, [r7, #20]
}
 8009900:	bf00      	nop
 8009902:	bf00      	nop
 8009904:	e7fd      	b.n	8009902 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01f      	beq.n	800994c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	e012      	b.n	8009938 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	7819      	ldrb	r1, [r3, #0]
 800991a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	3334      	adds	r3, #52	@ 0x34
 8009922:	460a      	mov	r2, r1
 8009924:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d006      	beq.n	8009940 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	3301      	adds	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	2b0f      	cmp	r3, #15
 800993c:	d9e9      	bls.n	8009912 <prvInitialiseNewTask+0x66>
 800993e:	e000      	b.n	8009942 <prvInitialiseNewTask+0x96>
			{
				break;
 8009940:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800994a:	e003      	b.n	8009954 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009956:	2b37      	cmp	r3, #55	@ 0x37
 8009958:	d901      	bls.n	800995e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800995a:	2337      	movs	r3, #55	@ 0x37
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009962:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009968:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	2200      	movs	r2, #0
 800996e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	3304      	adds	r3, #4
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff f965 	bl	8008c44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	3318      	adds	r3, #24
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff f960 	bl	8008c44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009988:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009998:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	3354      	adds	r3, #84	@ 0x54
 80099ae:	224c      	movs	r2, #76	@ 0x4c
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f002 fe93 	bl	800c6de <memset>
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	4a0d      	ldr	r2, [pc, #52]	@ (80099f0 <prvInitialiseNewTask+0x144>)
 80099bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	4a0c      	ldr	r2, [pc, #48]	@ (80099f4 <prvInitialiseNewTask+0x148>)
 80099c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	4a0c      	ldr	r2, [pc, #48]	@ (80099f8 <prvInitialiseNewTask+0x14c>)
 80099c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	68f9      	ldr	r1, [r7, #12]
 80099ce:	69b8      	ldr	r0, [r7, #24]
 80099d0:	f001 fb72 	bl	800b0b8 <pxPortInitialiseStack>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099e6:	bf00      	nop
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	2000337c 	.word	0x2000337c
 80099f4:	200033e4 	.word	0x200033e4
 80099f8:	2000344c 	.word	0x2000344c

080099fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a04:	f001 fc88 	bl	800b318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a08:	4b2d      	ldr	r3, [pc, #180]	@ (8009ac0 <prvAddNewTaskToReadyList+0xc4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8009ac0 <prvAddNewTaskToReadyList+0xc4>)
 8009a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a12:	4b2c      	ldr	r3, [pc, #176]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc8>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc8>)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a20:	4b27      	ldr	r3, [pc, #156]	@ (8009ac0 <prvAddNewTaskToReadyList+0xc4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d110      	bne.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a28:	f000 fc2e 	bl	800a288 <prvInitialiseTaskLists>
 8009a2c:	e00d      	b.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a2e:	4b26      	ldr	r3, [pc, #152]	@ (8009ac8 <prvAddNewTaskToReadyList+0xcc>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a36:	4b23      	ldr	r3, [pc, #140]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d802      	bhi.n	8009a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a44:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc8>)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a4a:	4b20      	ldr	r3, [pc, #128]	@ (8009acc <prvAddNewTaskToReadyList+0xd0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	4a1e      	ldr	r2, [pc, #120]	@ (8009acc <prvAddNewTaskToReadyList+0xd0>)
 8009a52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a54:	4b1d      	ldr	r3, [pc, #116]	@ (8009acc <prvAddNewTaskToReadyList+0xd0>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a60:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad0 <prvAddNewTaskToReadyList+0xd4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d903      	bls.n	8009a70 <prvAddNewTaskToReadyList+0x74>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	4a18      	ldr	r2, [pc, #96]	@ (8009ad0 <prvAddNewTaskToReadyList+0xd4>)
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4a15      	ldr	r2, [pc, #84]	@ (8009ad4 <prvAddNewTaskToReadyList+0xd8>)
 8009a7e:	441a      	add	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f7ff f8e9 	bl	8008c5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a8c:	f001 fc76 	bl	800b37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a90:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac8 <prvAddNewTaskToReadyList+0xcc>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00e      	beq.n	8009ab6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a98:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d207      	bcs.n	8009ab6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <prvAddNewTaskToReadyList+0xdc>)
 8009aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200012b4 	.word	0x200012b4
 8009ac4:	20000de0 	.word	0x20000de0
 8009ac8:	200012c0 	.word	0x200012c0
 8009acc:	200012d0 	.word	0x200012d0
 8009ad0:	200012bc 	.word	0x200012bc
 8009ad4:	20000de4 	.word	0x20000de4
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d018      	beq.n	8009b20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009aee:	4b14      	ldr	r3, [pc, #80]	@ (8009b40 <vTaskDelay+0x64>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <vTaskDelay+0x32>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60bb      	str	r3, [r7, #8]
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	e7fd      	b.n	8009b0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b0e:	f000 f88b 	bl	8009c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b12:	2100      	movs	r1, #0
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 ff21 	bl	800a95c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b1a:	f000 f893 	bl	8009c44 <xTaskResumeAll>
 8009b1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d107      	bne.n	8009b36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b26:	4b07      	ldr	r3, [pc, #28]	@ (8009b44 <vTaskDelay+0x68>)
 8009b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200012dc 	.word	0x200012dc
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	@ 0x28
 8009b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b56:	463a      	mov	r2, r7
 8009b58:	1d39      	adds	r1, r7, #4
 8009b5a:	f107 0308 	add.w	r3, r7, #8
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff f81c 	bl	8008b9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	9202      	str	r2, [sp, #8]
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	2300      	movs	r3, #0
 8009b74:	460a      	mov	r2, r1
 8009b76:	4924      	ldr	r1, [pc, #144]	@ (8009c08 <vTaskStartScheduler+0xc0>)
 8009b78:	4824      	ldr	r0, [pc, #144]	@ (8009c0c <vTaskStartScheduler+0xc4>)
 8009b7a:	f7ff fdf1 	bl	8009760 <xTaskCreateStatic>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4a23      	ldr	r2, [pc, #140]	@ (8009c10 <vTaskStartScheduler+0xc8>)
 8009b82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b84:	4b22      	ldr	r3, [pc, #136]	@ (8009c10 <vTaskStartScheduler+0xc8>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e001      	b.n	8009b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d102      	bne.n	8009ba2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b9c:	f000 ff32 	bl	800aa04 <xTimerCreateTimerTask>
 8009ba0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d11b      	bne.n	8009be0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	613b      	str	r3, [r7, #16]
}
 8009bba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bbc:	4b15      	ldr	r3, [pc, #84]	@ (8009c14 <vTaskStartScheduler+0xcc>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3354      	adds	r3, #84	@ 0x54
 8009bc2:	4a15      	ldr	r2, [pc, #84]	@ (8009c18 <vTaskStartScheduler+0xd0>)
 8009bc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc6:	4b15      	ldr	r3, [pc, #84]	@ (8009c1c <vTaskStartScheduler+0xd4>)
 8009bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bce:	4b14      	ldr	r3, [pc, #80]	@ (8009c20 <vTaskStartScheduler+0xd8>)
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bd4:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <vTaskStartScheduler+0xdc>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bda:	f001 faf9 	bl	800b1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bde:	e00f      	b.n	8009c00 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d10b      	bne.n	8009c00 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	60fb      	str	r3, [r7, #12]
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	e7fd      	b.n	8009bfc <vTaskStartScheduler+0xb4>
}
 8009c00:	bf00      	nop
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	0800ebb0 	.word	0x0800ebb0
 8009c0c:	0800a259 	.word	0x0800a259
 8009c10:	200012d8 	.word	0x200012d8
 8009c14:	20000de0 	.word	0x20000de0
 8009c18:	20000140 	.word	0x20000140
 8009c1c:	200012d4 	.word	0x200012d4
 8009c20:	200012c0 	.word	0x200012c0
 8009c24:	200012b8 	.word	0x200012b8

08009c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c2c:	4b04      	ldr	r3, [pc, #16]	@ (8009c40 <vTaskSuspendAll+0x18>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a03      	ldr	r2, [pc, #12]	@ (8009c40 <vTaskSuspendAll+0x18>)
 8009c34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c36:	bf00      	nop
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	200012dc 	.word	0x200012dc

08009c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c52:	4b42      	ldr	r3, [pc, #264]	@ (8009d5c <xTaskResumeAll+0x118>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10b      	bne.n	8009c72 <xTaskResumeAll+0x2e>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	603b      	str	r3, [r7, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	e7fd      	b.n	8009c6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c72:	f001 fb51 	bl	800b318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c76:	4b39      	ldr	r3, [pc, #228]	@ (8009d5c <xTaskResumeAll+0x118>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	4a37      	ldr	r2, [pc, #220]	@ (8009d5c <xTaskResumeAll+0x118>)
 8009c7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c80:	4b36      	ldr	r3, [pc, #216]	@ (8009d5c <xTaskResumeAll+0x118>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d162      	bne.n	8009d4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c88:	4b35      	ldr	r3, [pc, #212]	@ (8009d60 <xTaskResumeAll+0x11c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d05e      	beq.n	8009d4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c90:	e02f      	b.n	8009cf2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c92:	4b34      	ldr	r3, [pc, #208]	@ (8009d64 <xTaskResumeAll+0x120>)
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3318      	adds	r3, #24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff f83a 	bl	8008d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff f835 	bl	8008d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8009d68 <xTaskResumeAll+0x124>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d903      	bls.n	8009cc2 <xTaskResumeAll+0x7e>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009d68 <xTaskResumeAll+0x124>)
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4a27      	ldr	r2, [pc, #156]	@ (8009d6c <xTaskResumeAll+0x128>)
 8009cd0:	441a      	add	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4610      	mov	r0, r2
 8009cda:	f7fe ffc0 	bl	8008c5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce2:	4b23      	ldr	r3, [pc, #140]	@ (8009d70 <xTaskResumeAll+0x12c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d302      	bcc.n	8009cf2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009cec:	4b21      	ldr	r3, [pc, #132]	@ (8009d74 <xTaskResumeAll+0x130>)
 8009cee:	2201      	movs	r2, #1
 8009cf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d64 <xTaskResumeAll+0x120>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1cb      	bne.n	8009c92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d00:	f000 fb66 	bl	800a3d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d04:	4b1c      	ldr	r3, [pc, #112]	@ (8009d78 <xTaskResumeAll+0x134>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d010      	beq.n	8009d32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d10:	f000 f846 	bl	8009da0 <xTaskIncrementTick>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d1a:	4b16      	ldr	r3, [pc, #88]	@ (8009d74 <xTaskResumeAll+0x130>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f1      	bne.n	8009d10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009d2c:	4b12      	ldr	r3, [pc, #72]	@ (8009d78 <xTaskResumeAll+0x134>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <xTaskResumeAll+0x130>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009d7c <xTaskResumeAll+0x138>)
 8009d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d4e:	f001 fb15 	bl	800b37c <vPortExitCritical>

	return xAlreadyYielded;
 8009d52:	68bb      	ldr	r3, [r7, #8]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	200012dc 	.word	0x200012dc
 8009d60:	200012b4 	.word	0x200012b4
 8009d64:	20001274 	.word	0x20001274
 8009d68:	200012bc 	.word	0x200012bc
 8009d6c:	20000de4 	.word	0x20000de4
 8009d70:	20000de0 	.word	0x20000de0
 8009d74:	200012c8 	.word	0x200012c8
 8009d78:	200012c4 	.word	0x200012c4
 8009d7c:	e000ed04 	.word	0xe000ed04

08009d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d86:	4b05      	ldr	r3, [pc, #20]	@ (8009d9c <xTaskGetTickCount+0x1c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d8c:	687b      	ldr	r3, [r7, #4]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	200012b8 	.word	0x200012b8

08009da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009daa:	4b4f      	ldr	r3, [pc, #316]	@ (8009ee8 <xTaskIncrementTick+0x148>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f040 8090 	bne.w	8009ed4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009db4:	4b4d      	ldr	r3, [pc, #308]	@ (8009eec <xTaskIncrementTick+0x14c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3301      	adds	r3, #1
 8009dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8009eec <xTaskIncrementTick+0x14c>)
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d121      	bne.n	8009e0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dc8:	4b49      	ldr	r3, [pc, #292]	@ (8009ef0 <xTaskIncrementTick+0x150>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00b      	beq.n	8009dea <xTaskIncrementTick+0x4a>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	603b      	str	r3, [r7, #0]
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop
 8009de8:	e7fd      	b.n	8009de6 <xTaskIncrementTick+0x46>
 8009dea:	4b41      	ldr	r3, [pc, #260]	@ (8009ef0 <xTaskIncrementTick+0x150>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	4b40      	ldr	r3, [pc, #256]	@ (8009ef4 <xTaskIncrementTick+0x154>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ef0 <xTaskIncrementTick+0x150>)
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ef4 <xTaskIncrementTick+0x154>)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8009ef8 <xTaskIncrementTick+0x158>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	4a3c      	ldr	r2, [pc, #240]	@ (8009ef8 <xTaskIncrementTick+0x158>)
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	f000 fae2 	bl	800a3d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8009efc <xTaskIncrementTick+0x15c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d349      	bcc.n	8009eaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e16:	4b36      	ldr	r3, [pc, #216]	@ (8009ef0 <xTaskIncrementTick+0x150>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d104      	bne.n	8009e2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e20:	4b36      	ldr	r3, [pc, #216]	@ (8009efc <xTaskIncrementTick+0x15c>)
 8009e22:	f04f 32ff 	mov.w	r2, #4294967295
 8009e26:	601a      	str	r2, [r3, #0]
					break;
 8009e28:	e03f      	b.n	8009eaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e2a:	4b31      	ldr	r3, [pc, #196]	@ (8009ef0 <xTaskIncrementTick+0x150>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d203      	bcs.n	8009e4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e42:	4a2e      	ldr	r2, [pc, #184]	@ (8009efc <xTaskIncrementTick+0x15c>)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e48:	e02f      	b.n	8009eaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe ff62 	bl	8008d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	3318      	adds	r3, #24
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe ff59 	bl	8008d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6a:	4b25      	ldr	r3, [pc, #148]	@ (8009f00 <xTaskIncrementTick+0x160>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d903      	bls.n	8009e7a <xTaskIncrementTick+0xda>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e76:	4a22      	ldr	r2, [pc, #136]	@ (8009f00 <xTaskIncrementTick+0x160>)
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4a1f      	ldr	r2, [pc, #124]	@ (8009f04 <xTaskIncrementTick+0x164>)
 8009e88:	441a      	add	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f7fe fee4 	bl	8008c5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009f08 <xTaskIncrementTick+0x168>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d3b8      	bcc.n	8009e16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ea8:	e7b5      	b.n	8009e16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eaa:	4b17      	ldr	r3, [pc, #92]	@ (8009f08 <xTaskIncrementTick+0x168>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb0:	4914      	ldr	r1, [pc, #80]	@ (8009f04 <xTaskIncrementTick+0x164>)
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d901      	bls.n	8009ec6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ec6:	4b11      	ldr	r3, [pc, #68]	@ (8009f0c <xTaskIncrementTick+0x16c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	e004      	b.n	8009ede <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f10 <xTaskIncrementTick+0x170>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	4a0d      	ldr	r2, [pc, #52]	@ (8009f10 <xTaskIncrementTick+0x170>)
 8009edc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ede:	697b      	ldr	r3, [r7, #20]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	200012dc 	.word	0x200012dc
 8009eec:	200012b8 	.word	0x200012b8
 8009ef0:	2000126c 	.word	0x2000126c
 8009ef4:	20001270 	.word	0x20001270
 8009ef8:	200012cc 	.word	0x200012cc
 8009efc:	200012d4 	.word	0x200012d4
 8009f00:	200012bc 	.word	0x200012bc
 8009f04:	20000de4 	.word	0x20000de4
 8009f08:	20000de0 	.word	0x20000de0
 8009f0c:	200012c8 	.word	0x200012c8
 8009f10:	200012c4 	.word	0x200012c4

08009f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc8 <vTaskSwitchContext+0xb4>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f22:	4b2a      	ldr	r3, [pc, #168]	@ (8009fcc <vTaskSwitchContext+0xb8>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f28:	e047      	b.n	8009fba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009f2a:	4b28      	ldr	r3, [pc, #160]	@ (8009fcc <vTaskSwitchContext+0xb8>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f30:	4b27      	ldr	r3, [pc, #156]	@ (8009fd0 <vTaskSwitchContext+0xbc>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e011      	b.n	8009f5c <vTaskSwitchContext+0x48>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10b      	bne.n	8009f56 <vTaskSwitchContext+0x42>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	e7fd      	b.n	8009f52 <vTaskSwitchContext+0x3e>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	491d      	ldr	r1, [pc, #116]	@ (8009fd4 <vTaskSwitchContext+0xc0>)
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0e3      	beq.n	8009f38 <vTaskSwitchContext+0x24>
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4a16      	ldr	r2, [pc, #88]	@ (8009fd4 <vTaskSwitchContext+0xc0>)
 8009f7c:	4413      	add	r3, r2
 8009f7e:	60bb      	str	r3, [r7, #8]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	3308      	adds	r3, #8
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d104      	bne.n	8009fa0 <vTaskSwitchContext+0x8c>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	605a      	str	r2, [r3, #4]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8009fd8 <vTaskSwitchContext+0xc4>)
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	4a09      	ldr	r2, [pc, #36]	@ (8009fd0 <vTaskSwitchContext+0xbc>)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fb0:	4b09      	ldr	r3, [pc, #36]	@ (8009fd8 <vTaskSwitchContext+0xc4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3354      	adds	r3, #84	@ 0x54
 8009fb6:	4a09      	ldr	r2, [pc, #36]	@ (8009fdc <vTaskSwitchContext+0xc8>)
 8009fb8:	6013      	str	r3, [r2, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	200012dc 	.word	0x200012dc
 8009fcc:	200012c8 	.word	0x200012c8
 8009fd0:	200012bc 	.word	0x200012bc
 8009fd4:	20000de4 	.word	0x20000de4
 8009fd8:	20000de0 	.word	0x20000de0
 8009fdc:	20000140 	.word	0x20000140

08009fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10b      	bne.n	800a008 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	60fb      	str	r3, [r7, #12]
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a008:	4b07      	ldr	r3, [pc, #28]	@ (800a028 <vTaskPlaceOnEventList+0x48>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3318      	adds	r3, #24
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7fe fe48 	bl	8008ca6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a016:	2101      	movs	r1, #1
 800a018:	6838      	ldr	r0, [r7, #0]
 800a01a:	f000 fc9f 	bl	800a95c <prvAddCurrentTaskToDelayedList>
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000de0 	.word	0x20000de0

0800a02c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10b      	bne.n	800a056 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	617b      	str	r3, [r7, #20]
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	e7fd      	b.n	800a052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a056:	4b0a      	ldr	r3, [pc, #40]	@ (800a080 <vTaskPlaceOnEventListRestricted+0x54>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3318      	adds	r3, #24
 800a05c:	4619      	mov	r1, r3
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7fe fdfd 	bl	8008c5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f000 fc72 	bl	800a95c <prvAddCurrentTaskToDelayedList>
	}
 800a078:	bf00      	nop
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20000de0 	.word	0x20000de0

0800a084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	60fb      	str	r3, [r7, #12]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	3318      	adds	r3, #24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fe2e 	bl	8008d18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a134 <xTaskRemoveFromEventList+0xb0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11d      	bne.n	800a100 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe fe25 	bl	8008d18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d2:	4b19      	ldr	r3, [pc, #100]	@ (800a138 <xTaskRemoveFromEventList+0xb4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d903      	bls.n	800a0e2 <xTaskRemoveFromEventList+0x5e>
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0de:	4a16      	ldr	r2, [pc, #88]	@ (800a138 <xTaskRemoveFromEventList+0xb4>)
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4a13      	ldr	r2, [pc, #76]	@ (800a13c <xTaskRemoveFromEventList+0xb8>)
 800a0f0:	441a      	add	r2, r3
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f7fe fdb0 	bl	8008c5e <vListInsertEnd>
 800a0fe:	e005      	b.n	800a10c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	3318      	adds	r3, #24
 800a104:	4619      	mov	r1, r3
 800a106:	480e      	ldr	r0, [pc, #56]	@ (800a140 <xTaskRemoveFromEventList+0xbc>)
 800a108:	f7fe fda9 	bl	8008c5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a110:	4b0c      	ldr	r3, [pc, #48]	@ (800a144 <xTaskRemoveFromEventList+0xc0>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	429a      	cmp	r2, r3
 800a118:	d905      	bls.n	800a126 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a11a:	2301      	movs	r3, #1
 800a11c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a11e:	4b0a      	ldr	r3, [pc, #40]	@ (800a148 <xTaskRemoveFromEventList+0xc4>)
 800a120:	2201      	movs	r2, #1
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e001      	b.n	800a12a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a126:	2300      	movs	r3, #0
 800a128:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a12a:	697b      	ldr	r3, [r7, #20]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	200012dc 	.word	0x200012dc
 800a138:	200012bc 	.word	0x200012bc
 800a13c:	20000de4 	.word	0x20000de4
 800a140:	20001274 	.word	0x20001274
 800a144:	20000de0 	.word	0x20000de0
 800a148:	200012c8 	.word	0x200012c8

0800a14c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a154:	4b06      	ldr	r3, [pc, #24]	@ (800a170 <vTaskInternalSetTimeOutState+0x24>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a15c:	4b05      	ldr	r3, [pc, #20]	@ (800a174 <vTaskInternalSetTimeOutState+0x28>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	605a      	str	r2, [r3, #4]
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	200012cc 	.word	0x200012cc
 800a174:	200012b8 	.word	0x200012b8

0800a178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	613b      	str	r3, [r7, #16]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60fb      	str	r3, [r7, #12]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a1be:	f001 f8ab 	bl	800b318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a238 <xTaskCheckForTimeOut+0xc0>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d102      	bne.n	800a1e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61fb      	str	r3, [r7, #28]
 800a1e0:	e023      	b.n	800a22a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b15      	ldr	r3, [pc, #84]	@ (800a23c <xTaskCheckForTimeOut+0xc4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d007      	beq.n	800a1fe <xTaskCheckForTimeOut+0x86>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d302      	bcc.n	800a1fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	e015      	b.n	800a22a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	429a      	cmp	r2, r3
 800a206:	d20b      	bcs.n	800a220 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	1ad2      	subs	r2, r2, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ff99 	bl	800a14c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	e004      	b.n	800a22a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a22a:	f001 f8a7 	bl	800b37c <vPortExitCritical>

	return xReturn;
 800a22e:	69fb      	ldr	r3, [r7, #28]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	200012b8 	.word	0x200012b8
 800a23c:	200012cc 	.word	0x200012cc

0800a240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a244:	4b03      	ldr	r3, [pc, #12]	@ (800a254 <vTaskMissedYield+0x14>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
}
 800a24a:	bf00      	nop
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	200012c8 	.word	0x200012c8

0800a258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a260:	f000 f852 	bl	800a308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a264:	4b06      	ldr	r3, [pc, #24]	@ (800a280 <prvIdleTask+0x28>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d9f9      	bls.n	800a260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a26c:	4b05      	ldr	r3, [pc, #20]	@ (800a284 <prvIdleTask+0x2c>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a27c:	e7f0      	b.n	800a260 <prvIdleTask+0x8>
 800a27e:	bf00      	nop
 800a280:	20000de4 	.word	0x20000de4
 800a284:	e000ed04 	.word	0xe000ed04

0800a288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	e00c      	b.n	800a2ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4a12      	ldr	r2, [pc, #72]	@ (800a2e8 <prvInitialiseTaskLists+0x60>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fcae 	bl	8008c04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	607b      	str	r3, [r7, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b37      	cmp	r3, #55	@ 0x37
 800a2b2:	d9ef      	bls.n	800a294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2b4:	480d      	ldr	r0, [pc, #52]	@ (800a2ec <prvInitialiseTaskLists+0x64>)
 800a2b6:	f7fe fca5 	bl	8008c04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ba:	480d      	ldr	r0, [pc, #52]	@ (800a2f0 <prvInitialiseTaskLists+0x68>)
 800a2bc:	f7fe fca2 	bl	8008c04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2c0:	480c      	ldr	r0, [pc, #48]	@ (800a2f4 <prvInitialiseTaskLists+0x6c>)
 800a2c2:	f7fe fc9f 	bl	8008c04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2c6:	480c      	ldr	r0, [pc, #48]	@ (800a2f8 <prvInitialiseTaskLists+0x70>)
 800a2c8:	f7fe fc9c 	bl	8008c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2cc:	480b      	ldr	r0, [pc, #44]	@ (800a2fc <prvInitialiseTaskLists+0x74>)
 800a2ce:	f7fe fc99 	bl	8008c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a300 <prvInitialiseTaskLists+0x78>)
 800a2d4:	4a05      	ldr	r2, [pc, #20]	@ (800a2ec <prvInitialiseTaskLists+0x64>)
 800a2d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a304 <prvInitialiseTaskLists+0x7c>)
 800a2da:	4a05      	ldr	r2, [pc, #20]	@ (800a2f0 <prvInitialiseTaskLists+0x68>)
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000de4 	.word	0x20000de4
 800a2ec:	20001244 	.word	0x20001244
 800a2f0:	20001258 	.word	0x20001258
 800a2f4:	20001274 	.word	0x20001274
 800a2f8:	20001288 	.word	0x20001288
 800a2fc:	200012a0 	.word	0x200012a0
 800a300:	2000126c 	.word	0x2000126c
 800a304:	20001270 	.word	0x20001270

0800a308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a30e:	e019      	b.n	800a344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a310:	f001 f802 	bl	800b318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a314:	4b10      	ldr	r3, [pc, #64]	@ (800a358 <prvCheckTasksWaitingTermination+0x50>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fcf9 	bl	8008d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a326:	4b0d      	ldr	r3, [pc, #52]	@ (800a35c <prvCheckTasksWaitingTermination+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	4a0b      	ldr	r2, [pc, #44]	@ (800a35c <prvCheckTasksWaitingTermination+0x54>)
 800a32e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a330:	4b0b      	ldr	r3, [pc, #44]	@ (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3b01      	subs	r3, #1
 800a336:	4a0a      	ldr	r2, [pc, #40]	@ (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a33a:	f001 f81f 	bl	800b37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f810 	bl	800a364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a344:	4b06      	ldr	r3, [pc, #24]	@ (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e1      	bne.n	800a310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001288 	.word	0x20001288
 800a35c:	200012b4 	.word	0x200012b4
 800a360:	2000129c 	.word	0x2000129c

0800a364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3354      	adds	r3, #84	@ 0x54
 800a370:	4618      	mov	r0, r3
 800a372:	f002 fa2d 	bl	800c7d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d108      	bne.n	800a392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a384:	4618      	mov	r0, r3
 800a386:	f001 f9b7 	bl	800b6f8 <vPortFree>
				vPortFree( pxTCB );
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 f9b4 	bl	800b6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a390:	e019      	b.n	800a3c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d103      	bne.n	800a3a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f001 f9ab 	bl	800b6f8 <vPortFree>
	}
 800a3a2:	e010      	b.n	800a3c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d00b      	beq.n	800a3c6 <prvDeleteTCB+0x62>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	bf00      	nop
 800a3c4:	e7fd      	b.n	800a3c2 <prvDeleteTCB+0x5e>
	}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a408 <prvResetNextTaskUnblockTime+0x38>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <prvResetNextTaskUnblockTime+0x3c>)
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e8:	e008      	b.n	800a3fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ea:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <prvResetNextTaskUnblockTime+0x38>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4a04      	ldr	r2, [pc, #16]	@ (800a40c <prvResetNextTaskUnblockTime+0x3c>)
 800a3fa:	6013      	str	r3, [r2, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	2000126c 	.word	0x2000126c
 800a40c:	200012d4 	.word	0x200012d4

0800a410 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a416:	4b05      	ldr	r3, [pc, #20]	@ (800a42c <xTaskGetCurrentTaskHandle+0x1c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a41c:	687b      	ldr	r3, [r7, #4]
	}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	20000de0 	.word	0x20000de0

0800a430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a436:	4b0b      	ldr	r3, [pc, #44]	@ (800a464 <xTaskGetSchedulerState+0x34>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a43e:	2301      	movs	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	e008      	b.n	800a456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a444:	4b08      	ldr	r3, [pc, #32]	@ (800a468 <xTaskGetSchedulerState+0x38>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a44c:	2302      	movs	r3, #2
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	e001      	b.n	800a456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a456:	687b      	ldr	r3, [r7, #4]
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	200012c0 	.word	0x200012c0
 800a468:	200012dc 	.word	0x200012dc

0800a46c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d058      	beq.n	800a534 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a482:	4b2f      	ldr	r3, [pc, #188]	@ (800a540 <xTaskPriorityDisinherit+0xd4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d00b      	beq.n	800a4a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	60fb      	str	r3, [r7, #12]
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10b      	bne.n	800a4c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	60bb      	str	r3, [r7, #8]
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	e7fd      	b.n	800a4c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4c8:	1e5a      	subs	r2, r3, #1
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d02c      	beq.n	800a534 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d128      	bne.n	800a534 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fc16 	bl	8008d18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a504:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <xTaskPriorityDisinherit+0xd8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d903      	bls.n	800a514 <xTaskPriorityDisinherit+0xa8>
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a510:	4a0c      	ldr	r2, [pc, #48]	@ (800a544 <xTaskPriorityDisinherit+0xd8>)
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4a09      	ldr	r2, [pc, #36]	@ (800a548 <xTaskPriorityDisinherit+0xdc>)
 800a522:	441a      	add	r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	3304      	adds	r3, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f7fe fb97 	bl	8008c5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a530:	2301      	movs	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a534:	697b      	ldr	r3, [r7, #20]
	}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000de0 	.word	0x20000de0
 800a544:	200012bc 	.word	0x200012bc
 800a548:	20000de4 	.word	0x20000de4

0800a54c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a55a:	f000 fedd 	bl	800b318 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a55e:	4b29      	ldr	r3, [pc, #164]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d01c      	beq.n	800a5a6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a56c:	4b25      	ldr	r3, [pc, #148]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	43d2      	mvns	r2, r2
 800a578:	400a      	ands	r2, r1
 800a57a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a57e:	4b21      	ldr	r3, [pc, #132]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a58e:	2101      	movs	r1, #1
 800a590:	6838      	ldr	r0, [r7, #0]
 800a592:	f000 f9e3 	bl	800a95c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a596:	4b1c      	ldr	r3, [pc, #112]	@ (800a608 <xTaskNotifyWait+0xbc>)
 800a598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a5a6:	f000 fee9 	bl	800b37c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a5aa:	f000 feb5 	bl	800b318 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a5b4:	4b13      	ldr	r3, [pc, #76]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a5c0:	4b10      	ldr	r3, [pc, #64]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d002      	beq.n	800a5d4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	e00a      	b.n	800a5ea <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	43d2      	mvns	r2, r2
 800a5e0:	400a      	ands	r2, r1
 800a5e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5ea:	4b06      	ldr	r3, [pc, #24]	@ (800a604 <xTaskNotifyWait+0xb8>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800a5f4:	f000 fec2 	bl	800b37c <vPortExitCritical>

		return xReturn;
 800a5f8:	697b      	ldr	r3, [r7, #20]
	}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000de0 	.word	0x20000de0
 800a608:	e000ed04 	.word	0xe000ed04

0800a60c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08a      	sub	sp, #40	@ 0x28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a61c:	2301      	movs	r3, #1
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10b      	bne.n	800a63e <xTaskGenericNotify+0x32>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	61bb      	str	r3, [r7, #24]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a642:	f000 fe69 	bl	800b318 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a65c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	2202      	movs	r2, #2
 800a662:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d82e      	bhi.n	800a6ca <xTaskGenericNotify+0xbe>
 800a66c:	a201      	add	r2, pc, #4	@ (adr r2, 800a674 <xTaskGenericNotify+0x68>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a6ef 	.word	0x0800a6ef
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a69b 	.word	0x0800a69b
 800a680:	0800a6ab 	.word	0x0800a6ab
 800a684:	0800a6b5 	.word	0x0800a6b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	431a      	orrs	r2, r3
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a698:	e02c      	b.n	800a6f4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a6a8:	e024      	b.n	800a6f4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a6b2:	e01f      	b.n	800a6f4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a6b4:	7ffb      	ldrb	r3, [r7, #31]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d004      	beq.n	800a6c4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a6c2:	e017      	b.n	800a6f4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a6c8:	e014      	b.n	800a6f4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d00d      	beq.n	800a6f2 <xTaskGenericNotify+0xe6>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	617b      	str	r3, [r7, #20]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <xTaskGenericNotify+0xde>
					break;
 800a6ee:	bf00      	nop
 800a6f0:	e000      	b.n	800a6f4 <xTaskGenericNotify+0xe8>

					break;
 800a6f2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a6f4:	7ffb      	ldrb	r3, [r7, #31]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d13b      	bne.n	800a772 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fb0a 	bl	8008d18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a708:	4b1d      	ldr	r3, [pc, #116]	@ (800a780 <xTaskGenericNotify+0x174>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d903      	bls.n	800a718 <xTaskGenericNotify+0x10c>
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a714:	4a1a      	ldr	r2, [pc, #104]	@ (800a780 <xTaskGenericNotify+0x174>)
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4a17      	ldr	r2, [pc, #92]	@ (800a784 <xTaskGenericNotify+0x178>)
 800a726:	441a      	add	r2, r3
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fe fa95 	bl	8008c5e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <xTaskGenericNotify+0x148>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	613b      	str	r3, [r7, #16]
}
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	e7fd      	b.n	800a750 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a758:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <xTaskGenericNotify+0x17c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75e:	429a      	cmp	r2, r3
 800a760:	d907      	bls.n	800a772 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a762:	4b0a      	ldr	r3, [pc, #40]	@ (800a78c <xTaskGenericNotify+0x180>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a772:	f000 fe03 	bl	800b37c <vPortExitCritical>

		return xReturn;
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a778:	4618      	mov	r0, r3
 800a77a:	3728      	adds	r7, #40	@ 0x28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	200012bc 	.word	0x200012bc
 800a784:	20000de4 	.word	0x20000de4
 800a788:	20000de0 	.word	0x20000de0
 800a78c:	e000ed04 	.word	0xe000ed04

0800a790 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08e      	sub	sp, #56	@ 0x38
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10b      	bne.n	800a7c2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	e7fd      	b.n	800a7be <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7c2:	f000 fe89 	bl	800b4d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800a7ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	623a      	str	r2, [r7, #32]
 800a7e0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a7e2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a7fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	2202      	movs	r2, #2
 800a804:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b04      	cmp	r3, #4
 800a80c:	d82e      	bhi.n	800a86c <xTaskGenericNotifyFromISR+0xdc>
 800a80e:	a201      	add	r2, pc, #4	@ (adr r2, 800a814 <xTaskGenericNotifyFromISR+0x84>)
 800a810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a814:	0800a891 	.word	0x0800a891
 800a818:	0800a829 	.word	0x0800a829
 800a81c:	0800a83b 	.word	0x0800a83b
 800a820:	0800a84b 	.word	0x0800a84b
 800a824:	0800a855 	.word	0x0800a855
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	431a      	orrs	r2, r3
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a838:	e02d      	b.n	800a896 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a848:	e025      	b.n	800a896 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a852:	e020      	b.n	800a896 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a854:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d004      	beq.n	800a866 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a864:	e017      	b.n	800a896 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a86a:	e014      	b.n	800a896 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d00d      	beq.n	800a894 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	61bb      	str	r3, [r7, #24]
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	e7fd      	b.n	800a88c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a890:	bf00      	nop
 800a892:	e000      	b.n	800a896 <xTaskGenericNotifyFromISR+0x106>
					break;
 800a894:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a896:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d147      	bne.n	800a92e <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00b      	beq.n	800a8be <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	617b      	str	r3, [r7, #20]
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	e7fd      	b.n	800a8ba <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8be:	4b21      	ldr	r3, [pc, #132]	@ (800a944 <xTaskGenericNotifyFromISR+0x1b4>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d11d      	bne.n	800a902 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe fa24 	bl	8008d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d4:	4b1c      	ldr	r3, [pc, #112]	@ (800a948 <xTaskGenericNotifyFromISR+0x1b8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d903      	bls.n	800a8e4 <xTaskGenericNotifyFromISR+0x154>
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e0:	4a19      	ldr	r2, [pc, #100]	@ (800a948 <xTaskGenericNotifyFromISR+0x1b8>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4a16      	ldr	r2, [pc, #88]	@ (800a94c <xTaskGenericNotifyFromISR+0x1bc>)
 800a8f2:	441a      	add	r2, r3
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	f7fe f9af 	bl	8008c5e <vListInsertEnd>
 800a900:	e005      	b.n	800a90e <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	3318      	adds	r3, #24
 800a906:	4619      	mov	r1, r3
 800a908:	4811      	ldr	r0, [pc, #68]	@ (800a950 <xTaskGenericNotifyFromISR+0x1c0>)
 800a90a:	f7fe f9a8 	bl	8008c5e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a912:	4b10      	ldr	r3, [pc, #64]	@ (800a954 <xTaskGenericNotifyFromISR+0x1c4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a918:	429a      	cmp	r2, r3
 800a91a:	d908      	bls.n	800a92e <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a91c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d002      	beq.n	800a928 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a924:	2201      	movs	r2, #1
 800a926:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a928:	4b0b      	ldr	r3, [pc, #44]	@ (800a958 <xTaskGenericNotifyFromISR+0x1c8>)
 800a92a:	2201      	movs	r2, #1
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a930:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f383 8811 	msr	BASEPRI, r3
}
 800a938:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3738      	adds	r7, #56	@ 0x38
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	200012dc 	.word	0x200012dc
 800a948:	200012bc 	.word	0x200012bc
 800a94c:	20000de4 	.word	0x20000de4
 800a950:	20001274 	.word	0x20001274
 800a954:	20000de0 	.word	0x20000de0
 800a958:	200012c8 	.word	0x200012c8

0800a95c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a966:	4b21      	ldr	r3, [pc, #132]	@ (800a9ec <prvAddCurrentTaskToDelayedList+0x90>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a96c:	4b20      	ldr	r3, [pc, #128]	@ (800a9f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3304      	adds	r3, #4
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe f9d0 	bl	8008d18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97e:	d10a      	bne.n	800a996 <prvAddCurrentTaskToDelayedList+0x3a>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d007      	beq.n	800a996 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a986:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3304      	adds	r3, #4
 800a98c:	4619      	mov	r1, r3
 800a98e:	4819      	ldr	r0, [pc, #100]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a990:	f7fe f965 	bl	8008c5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a994:	e026      	b.n	800a9e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4413      	add	r3, r2
 800a99c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a99e:	4b14      	ldr	r3, [pc, #80]	@ (800a9f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d209      	bcs.n	800a9c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9ae:	4b12      	ldr	r3, [pc, #72]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7fe f973 	bl	8008ca6 <vListInsert>
}
 800a9c0:	e010      	b.n	800a9e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a9fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f7fe f969 	bl	8008ca6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d202      	bcs.n	800a9e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9de:	4a08      	ldr	r2, [pc, #32]	@ (800aa00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	6013      	str	r3, [r2, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	200012b8 	.word	0x200012b8
 800a9f0:	20000de0 	.word	0x20000de0
 800a9f4:	200012a0 	.word	0x200012a0
 800a9f8:	20001270 	.word	0x20001270
 800a9fc:	2000126c 	.word	0x2000126c
 800aa00:	200012d4 	.word	0x200012d4

0800aa04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	@ 0x28
 800aa08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa0e:	f000 fb13 	bl	800b038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa12:	4b1d      	ldr	r3, [pc, #116]	@ (800aa88 <xTimerCreateTimerTask+0x84>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d021      	beq.n	800aa5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa22:	1d3a      	adds	r2, r7, #4
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	f107 030c 	add.w	r3, r7, #12
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe f8cf 	bl	8008bd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	9202      	str	r2, [sp, #8]
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	2300      	movs	r3, #0
 800aa42:	460a      	mov	r2, r1
 800aa44:	4911      	ldr	r1, [pc, #68]	@ (800aa8c <xTimerCreateTimerTask+0x88>)
 800aa46:	4812      	ldr	r0, [pc, #72]	@ (800aa90 <xTimerCreateTimerTask+0x8c>)
 800aa48:	f7fe fe8a 	bl	8009760 <xTaskCreateStatic>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	4a11      	ldr	r2, [pc, #68]	@ (800aa94 <xTimerCreateTimerTask+0x90>)
 800aa50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa52:	4b10      	ldr	r3, [pc, #64]	@ (800aa94 <xTimerCreateTimerTask+0x90>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10b      	bne.n	800aa7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	613b      	str	r3, [r7, #16]
}
 800aa76:	bf00      	nop
 800aa78:	bf00      	nop
 800aa7a:	e7fd      	b.n	800aa78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa7c:	697b      	ldr	r3, [r7, #20]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20001310 	.word	0x20001310
 800aa8c:	0800ebb8 	.word	0x0800ebb8
 800aa90:	0800abd1 	.word	0x0800abd1
 800aa94:	20001314 	.word	0x20001314

0800aa98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	@ 0x28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10b      	bne.n	800aac8 <xTimerGenericCommand+0x30>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	623b      	str	r3, [r7, #32]
}
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	e7fd      	b.n	800aac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aac8:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <xTimerGenericCommand+0x98>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d02a      	beq.n	800ab26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b05      	cmp	r3, #5
 800aae0:	dc18      	bgt.n	800ab14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aae2:	f7ff fca5 	bl	800a430 <xTaskGetSchedulerState>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d109      	bne.n	800ab00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aaec:	4b10      	ldr	r3, [pc, #64]	@ (800ab30 <xTimerGenericCommand+0x98>)
 800aaee:	6818      	ldr	r0, [r3, #0]
 800aaf0:	f107 0110 	add.w	r1, r7, #16
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaf8:	f7fe fa42 	bl	8008f80 <xQueueGenericSend>
 800aafc:	6278      	str	r0, [r7, #36]	@ 0x24
 800aafe:	e012      	b.n	800ab26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab00:	4b0b      	ldr	r3, [pc, #44]	@ (800ab30 <xTimerGenericCommand+0x98>)
 800ab02:	6818      	ldr	r0, [r3, #0]
 800ab04:	f107 0110 	add.w	r1, r7, #16
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f7fe fa38 	bl	8008f80 <xQueueGenericSend>
 800ab10:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab12:	e008      	b.n	800ab26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab14:	4b06      	ldr	r3, [pc, #24]	@ (800ab30 <xTimerGenericCommand+0x98>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	f107 0110 	add.w	r1, r7, #16
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	f7fe fb30 	bl	8009184 <xQueueGenericSendFromISR>
 800ab24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3728      	adds	r7, #40	@ 0x28
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20001310 	.word	0x20001310

0800ab34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af02      	add	r7, sp, #8
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3e:	4b23      	ldr	r3, [pc, #140]	@ (800abcc <prvProcessExpiredTimer+0x98>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe f8e3 	bl	8008d18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d023      	beq.n	800aba8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	699a      	ldr	r2, [r3, #24]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	18d1      	adds	r1, r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	6978      	ldr	r0, [r7, #20]
 800ab6e:	f000 f8d5 	bl	800ad1c <prvInsertTimerInActiveList>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d020      	beq.n	800abba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	2100      	movs	r1, #0
 800ab82:	6978      	ldr	r0, [r7, #20]
 800ab84:	f7ff ff88 	bl	800aa98 <xTimerGenericCommand>
 800ab88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d114      	bne.n	800abba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	60fb      	str	r3, [r7, #12]
}
 800aba2:	bf00      	nop
 800aba4:	bf00      	nop
 800aba6:	e7fd      	b.n	800aba4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abae:	f023 0301 	bic.w	r3, r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	6978      	ldr	r0, [r7, #20]
 800abc0:	4798      	blx	r3
}
 800abc2:	bf00      	nop
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20001308 	.word	0x20001308

0800abd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abd8:	f107 0308 	add.w	r3, r7, #8
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 f859 	bl	800ac94 <prvGetNextExpireTime>
 800abe2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	4619      	mov	r1, r3
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 f805 	bl	800abf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800abee:	f000 f8d7 	bl	800ada0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abf2:	bf00      	nop
 800abf4:	e7f0      	b.n	800abd8 <prvTimerTask+0x8>
	...

0800abf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac02:	f7ff f811 	bl	8009c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac06:	f107 0308 	add.w	r3, r7, #8
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f866 	bl	800acdc <prvSampleTimeNow>
 800ac10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d130      	bne.n	800ac7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10a      	bne.n	800ac34 <prvProcessTimerOrBlockTask+0x3c>
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d806      	bhi.n	800ac34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac26:	f7ff f80d 	bl	8009c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac2a:	68f9      	ldr	r1, [r7, #12]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff ff81 	bl	800ab34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac32:	e024      	b.n	800ac7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d008      	beq.n	800ac4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac3a:	4b13      	ldr	r3, [pc, #76]	@ (800ac88 <prvProcessTimerOrBlockTask+0x90>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <prvProcessTimerOrBlockTask+0x50>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <prvProcessTimerOrBlockTask+0x52>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac8c <prvProcessTimerOrBlockTask+0x94>)
 800ac4e:	6818      	ldr	r0, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f7fe fd4d 	bl	80096f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac5e:	f7fe fff1 	bl	8009c44 <xTaskResumeAll>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac68:	4b09      	ldr	r3, [pc, #36]	@ (800ac90 <prvProcessTimerOrBlockTask+0x98>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
}
 800ac78:	e001      	b.n	800ac7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac7a:	f7fe ffe3 	bl	8009c44 <xTaskResumeAll>
}
 800ac7e:	bf00      	nop
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	2000130c 	.word	0x2000130c
 800ac8c:	20001310 	.word	0x20001310
 800ac90:	e000ed04 	.word	0xe000ed04

0800ac94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	@ (800acd8 <prvGetNextExpireTime+0x44>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <prvGetNextExpireTime+0x16>
 800aca6:	2201      	movs	r2, #1
 800aca8:	e000      	b.n	800acac <prvGetNextExpireTime+0x18>
 800acaa:	2200      	movs	r2, #0
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d105      	bne.n	800acc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acb8:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <prvGetNextExpireTime+0x44>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	e001      	b.n	800acc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800acc8:	68fb      	ldr	r3, [r7, #12]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	20001308 	.word	0x20001308

0800acdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ace4:	f7ff f84c 	bl	8009d80 <xTaskGetTickCount>
 800ace8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acea:	4b0b      	ldr	r3, [pc, #44]	@ (800ad18 <prvSampleTimeNow+0x3c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d205      	bcs.n	800ad00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800acf4:	f000 f93a 	bl	800af6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	e002      	b.n	800ad06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad06:	4a04      	ldr	r2, [pc, #16]	@ (800ad18 <prvSampleTimeNow+0x3c>)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20001318 	.word	0x20001318

0800ad1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d812      	bhi.n	800ad68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	1ad2      	subs	r2, r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d302      	bcc.n	800ad56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad50:	2301      	movs	r3, #1
 800ad52:	617b      	str	r3, [r7, #20]
 800ad54:	e01b      	b.n	800ad8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad56:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <prvInsertTimerInActiveList+0x7c>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7fd ffa0 	bl	8008ca6 <vListInsert>
 800ad66:	e012      	b.n	800ad8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d206      	bcs.n	800ad7e <prvInsertTimerInActiveList+0x62>
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d302      	bcc.n	800ad7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	617b      	str	r3, [r7, #20]
 800ad7c:	e007      	b.n	800ad8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad7e:	4b07      	ldr	r3, [pc, #28]	@ (800ad9c <prvInsertTimerInActiveList+0x80>)
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3304      	adds	r3, #4
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7fd ff8c 	bl	8008ca6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad8e:	697b      	ldr	r3, [r7, #20]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	2000130c 	.word	0x2000130c
 800ad9c:	20001308 	.word	0x20001308

0800ada0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08e      	sub	sp, #56	@ 0x38
 800ada4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ada6:	e0ce      	b.n	800af46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da19      	bge.n	800ade2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adae:	1d3b      	adds	r3, r7, #4
 800adb0:	3304      	adds	r3, #4
 800adb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800adb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10b      	bne.n	800add2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	61fb      	str	r3, [r7, #28]
}
 800adcc:	bf00      	nop
 800adce:	bf00      	nop
 800add0:	e7fd      	b.n	800adce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800add8:	6850      	ldr	r0, [r2, #4]
 800adda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800addc:	6892      	ldr	r2, [r2, #8]
 800adde:	4611      	mov	r1, r2
 800ade0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f2c0 80ae 	blt.w	800af46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d004      	beq.n	800ae00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fd ff8c 	bl	8008d18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae00:	463b      	mov	r3, r7
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff ff6a 	bl	800acdc <prvSampleTimeNow>
 800ae08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b09      	cmp	r3, #9
 800ae0e:	f200 8097 	bhi.w	800af40 <prvProcessReceivedCommands+0x1a0>
 800ae12:	a201      	add	r2, pc, #4	@ (adr r2, 800ae18 <prvProcessReceivedCommands+0x78>)
 800ae14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae18:	0800ae41 	.word	0x0800ae41
 800ae1c:	0800ae41 	.word	0x0800ae41
 800ae20:	0800ae41 	.word	0x0800ae41
 800ae24:	0800aeb7 	.word	0x0800aeb7
 800ae28:	0800aecb 	.word	0x0800aecb
 800ae2c:	0800af17 	.word	0x0800af17
 800ae30:	0800ae41 	.word	0x0800ae41
 800ae34:	0800ae41 	.word	0x0800ae41
 800ae38:	0800aeb7 	.word	0x0800aeb7
 800ae3c:	0800aecb 	.word	0x0800aecb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	18d1      	adds	r1, r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae60:	f7ff ff5c 	bl	800ad1c <prvInsertTimerInActiveList>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d06c      	beq.n	800af44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d061      	beq.n	800af44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	441a      	add	r2, r3
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	2100      	movs	r1, #0
 800ae90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae92:	f7ff fe01 	bl	800aa98 <xTimerGenericCommand>
 800ae96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d152      	bne.n	800af44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	61bb      	str	r3, [r7, #24]
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	e7fd      	b.n	800aeb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aec8:	e03d      	b.n	800af46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aeca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10b      	bne.n	800af02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	617b      	str	r3, [r7, #20]
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	e7fd      	b.n	800aefe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af04:	699a      	ldr	r2, [r3, #24]
 800af06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af08:	18d1      	adds	r1, r2, r3
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af10:	f7ff ff04 	bl	800ad1c <prvInsertTimerInActiveList>
					break;
 800af14:	e017      	b.n	800af46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af1c:	f003 0302 	and.w	r3, r3, #2
 800af20:	2b00      	cmp	r3, #0
 800af22:	d103      	bne.n	800af2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800af24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af26:	f000 fbe7 	bl	800b6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af2a:	e00c      	b.n	800af46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af32:	f023 0301 	bic.w	r3, r3, #1
 800af36:	b2da      	uxtb	r2, r3
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af3e:	e002      	b.n	800af46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800af40:	bf00      	nop
 800af42:	e000      	b.n	800af46 <prvProcessReceivedCommands+0x1a6>
					break;
 800af44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af46:	4b08      	ldr	r3, [pc, #32]	@ (800af68 <prvProcessReceivedCommands+0x1c8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	1d39      	adds	r1, r7, #4
 800af4c:	2200      	movs	r2, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe f9b6 	bl	80092c0 <xQueueReceive>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	f47f af26 	bne.w	800ada8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	3730      	adds	r7, #48	@ 0x30
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20001310 	.word	0x20001310

0800af6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af72:	e049      	b.n	800b008 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af74:	4b2e      	ldr	r3, [pc, #184]	@ (800b030 <prvSwitchTimerLists+0xc4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af7e:	4b2c      	ldr	r3, [pc, #176]	@ (800b030 <prvSwitchTimerLists+0xc4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fd fec3 	bl	8008d18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d02f      	beq.n	800b008 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	4413      	add	r3, r2
 800afb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d90e      	bls.n	800afd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afc6:	4b1a      	ldr	r3, [pc, #104]	@ (800b030 <prvSwitchTimerLists+0xc4>)
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3304      	adds	r3, #4
 800afce:	4619      	mov	r1, r3
 800afd0:	4610      	mov	r0, r2
 800afd2:	f7fd fe68 	bl	8008ca6 <vListInsert>
 800afd6:	e017      	b.n	800b008 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afd8:	2300      	movs	r3, #0
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	2300      	movs	r3, #0
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	2100      	movs	r1, #0
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f7ff fd58 	bl	800aa98 <xTimerGenericCommand>
 800afe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10b      	bne.n	800b008 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	603b      	str	r3, [r7, #0]
}
 800b002:	bf00      	nop
 800b004:	bf00      	nop
 800b006:	e7fd      	b.n	800b004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b008:	4b09      	ldr	r3, [pc, #36]	@ (800b030 <prvSwitchTimerLists+0xc4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1b0      	bne.n	800af74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b012:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <prvSwitchTimerLists+0xc4>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b018:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <prvSwitchTimerLists+0xc8>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a04      	ldr	r2, [pc, #16]	@ (800b030 <prvSwitchTimerLists+0xc4>)
 800b01e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b020:	4a04      	ldr	r2, [pc, #16]	@ (800b034 <prvSwitchTimerLists+0xc8>)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	6013      	str	r3, [r2, #0]
}
 800b026:	bf00      	nop
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20001308 	.word	0x20001308
 800b034:	2000130c 	.word	0x2000130c

0800b038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b03e:	f000 f96b 	bl	800b318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b042:	4b15      	ldr	r3, [pc, #84]	@ (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d120      	bne.n	800b08c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b04a:	4814      	ldr	r0, [pc, #80]	@ (800b09c <prvCheckForValidListAndQueue+0x64>)
 800b04c:	f7fd fdda 	bl	8008c04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b050:	4813      	ldr	r0, [pc, #76]	@ (800b0a0 <prvCheckForValidListAndQueue+0x68>)
 800b052:	f7fd fdd7 	bl	8008c04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b056:	4b13      	ldr	r3, [pc, #76]	@ (800b0a4 <prvCheckForValidListAndQueue+0x6c>)
 800b058:	4a10      	ldr	r2, [pc, #64]	@ (800b09c <prvCheckForValidListAndQueue+0x64>)
 800b05a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b05c:	4b12      	ldr	r3, [pc, #72]	@ (800b0a8 <prvCheckForValidListAndQueue+0x70>)
 800b05e:	4a10      	ldr	r2, [pc, #64]	@ (800b0a0 <prvCheckForValidListAndQueue+0x68>)
 800b060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b062:	2300      	movs	r3, #0
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	4b11      	ldr	r3, [pc, #68]	@ (800b0ac <prvCheckForValidListAndQueue+0x74>)
 800b068:	4a11      	ldr	r2, [pc, #68]	@ (800b0b0 <prvCheckForValidListAndQueue+0x78>)
 800b06a:	2110      	movs	r1, #16
 800b06c:	200a      	movs	r0, #10
 800b06e:	f7fd fee7 	bl	8008e40 <xQueueGenericCreateStatic>
 800b072:	4603      	mov	r3, r0
 800b074:	4a08      	ldr	r2, [pc, #32]	@ (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b078:	4b07      	ldr	r3, [pc, #28]	@ (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b080:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <prvCheckForValidListAndQueue+0x60>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	490b      	ldr	r1, [pc, #44]	@ (800b0b4 <prvCheckForValidListAndQueue+0x7c>)
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fb0c 	bl	80096a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b08c:	f000 f976 	bl	800b37c <vPortExitCritical>
}
 800b090:	bf00      	nop
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20001310 	.word	0x20001310
 800b09c:	200012e0 	.word	0x200012e0
 800b0a0:	200012f4 	.word	0x200012f4
 800b0a4:	20001308 	.word	0x20001308
 800b0a8:	2000130c 	.word	0x2000130c
 800b0ac:	200013bc 	.word	0x200013bc
 800b0b0:	2000131c 	.word	0x2000131c
 800b0b4:	0800ebc0 	.word	0x0800ebc0

0800b0b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3b04      	subs	r3, #4
 800b0c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3b04      	subs	r3, #4
 800b0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f023 0201 	bic.w	r2, r3, #1
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0e8:	4a0c      	ldr	r2, [pc, #48]	@ (800b11c <pxPortInitialiseStack+0x64>)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3b14      	subs	r3, #20
 800b0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3b04      	subs	r3, #4
 800b0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f06f 0202 	mvn.w	r2, #2
 800b106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3b20      	subs	r3, #32
 800b10c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b10e:	68fb      	ldr	r3, [r7, #12]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	0800b121 	.word	0x0800b121

0800b120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b12a:	4b13      	ldr	r3, [pc, #76]	@ (800b178 <prvTaskExitError+0x58>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b132:	d00b      	beq.n	800b14c <prvTaskExitError+0x2c>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	60fb      	str	r3, [r7, #12]
}
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	e7fd      	b.n	800b148 <prvTaskExitError+0x28>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	60bb      	str	r3, [r7, #8]
}
 800b15e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b160:	bf00      	nop
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0fc      	beq.n	800b162 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20000130 	.word	0x20000130
 800b17c:	00000000 	.word	0x00000000

0800b180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b180:	4b07      	ldr	r3, [pc, #28]	@ (800b1a0 <pxCurrentTCBConst2>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	f380 8809 	msr	PSP, r0
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f04f 0000 	mov.w	r0, #0
 800b196:	f380 8811 	msr	BASEPRI, r0
 800b19a:	4770      	bx	lr
 800b19c:	f3af 8000 	nop.w

0800b1a0 <pxCurrentTCBConst2>:
 800b1a0:	20000de0 	.word	0x20000de0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1a8:	4808      	ldr	r0, [pc, #32]	@ (800b1cc <prvPortStartFirstTask+0x24>)
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	6800      	ldr	r0, [r0, #0]
 800b1ae:	f380 8808 	msr	MSP, r0
 800b1b2:	f04f 0000 	mov.w	r0, #0
 800b1b6:	f380 8814 	msr	CONTROL, r0
 800b1ba:	b662      	cpsie	i
 800b1bc:	b661      	cpsie	f
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	df00      	svc	0
 800b1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed08 	.word	0xe000ed08

0800b1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1d6:	4b47      	ldr	r3, [pc, #284]	@ (800b2f4 <xPortStartScheduler+0x124>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a47      	ldr	r2, [pc, #284]	@ (800b2f8 <xPortStartScheduler+0x128>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d10b      	bne.n	800b1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	613b      	str	r3, [r7, #16]
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b2f4 <xPortStartScheduler+0x124>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800b2fc <xPortStartScheduler+0x12c>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d10b      	bne.n	800b21a <xPortStartScheduler+0x4a>
	__asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	60fb      	str	r3, [r7, #12]
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	e7fd      	b.n	800b216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b21a:	4b39      	ldr	r3, [pc, #228]	@ (800b300 <xPortStartScheduler+0x130>)
 800b21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	22ff      	movs	r2, #255	@ 0xff
 800b22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	b2db      	uxtb	r3, r3
 800b232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	4b31      	ldr	r3, [pc, #196]	@ (800b304 <xPortStartScheduler+0x134>)
 800b240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b242:	4b31      	ldr	r3, [pc, #196]	@ (800b308 <xPortStartScheduler+0x138>)
 800b244:	2207      	movs	r2, #7
 800b246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b248:	e009      	b.n	800b25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b24a:	4b2f      	ldr	r3, [pc, #188]	@ (800b308 <xPortStartScheduler+0x138>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3b01      	subs	r3, #1
 800b250:	4a2d      	ldr	r2, [pc, #180]	@ (800b308 <xPortStartScheduler+0x138>)
 800b252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b25e:	78fb      	ldrb	r3, [r7, #3]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b266:	2b80      	cmp	r3, #128	@ 0x80
 800b268:	d0ef      	beq.n	800b24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b26a:	4b27      	ldr	r3, [pc, #156]	@ (800b308 <xPortStartScheduler+0x138>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f1c3 0307 	rsb	r3, r3, #7
 800b272:	2b04      	cmp	r3, #4
 800b274:	d00b      	beq.n	800b28e <xPortStartScheduler+0xbe>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	60bb      	str	r3, [r7, #8]
}
 800b288:	bf00      	nop
 800b28a:	bf00      	nop
 800b28c:	e7fd      	b.n	800b28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b28e:	4b1e      	ldr	r3, [pc, #120]	@ (800b308 <xPortStartScheduler+0x138>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	021b      	lsls	r3, r3, #8
 800b294:	4a1c      	ldr	r2, [pc, #112]	@ (800b308 <xPortStartScheduler+0x138>)
 800b296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b298:	4b1b      	ldr	r3, [pc, #108]	@ (800b308 <xPortStartScheduler+0x138>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2a0:	4a19      	ldr	r2, [pc, #100]	@ (800b308 <xPortStartScheduler+0x138>)
 800b2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2ac:	4b17      	ldr	r3, [pc, #92]	@ (800b30c <xPortStartScheduler+0x13c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a16      	ldr	r2, [pc, #88]	@ (800b30c <xPortStartScheduler+0x13c>)
 800b2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2b8:	4b14      	ldr	r3, [pc, #80]	@ (800b30c <xPortStartScheduler+0x13c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a13      	ldr	r2, [pc, #76]	@ (800b30c <xPortStartScheduler+0x13c>)
 800b2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2c4:	f000 f8da 	bl	800b47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2c8:	4b11      	ldr	r3, [pc, #68]	@ (800b310 <xPortStartScheduler+0x140>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2ce:	f000 f8f9 	bl	800b4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2d2:	4b10      	ldr	r3, [pc, #64]	@ (800b314 <xPortStartScheduler+0x144>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b314 <xPortStartScheduler+0x144>)
 800b2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2de:	f7ff ff63 	bl	800b1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2e2:	f7fe fe17 	bl	8009f14 <vTaskSwitchContext>
	prvTaskExitError();
 800b2e6:	f7ff ff1b 	bl	800b120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	e000ed00 	.word	0xe000ed00
 800b2f8:	410fc271 	.word	0x410fc271
 800b2fc:	410fc270 	.word	0x410fc270
 800b300:	e000e400 	.word	0xe000e400
 800b304:	2000140c 	.word	0x2000140c
 800b308:	20001410 	.word	0x20001410
 800b30c:	e000ed20 	.word	0xe000ed20
 800b310:	20000130 	.word	0x20000130
 800b314:	e000ef34 	.word	0xe000ef34

0800b318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	607b      	str	r3, [r7, #4]
}
 800b330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b332:	4b10      	ldr	r3, [pc, #64]	@ (800b374 <vPortEnterCritical+0x5c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3301      	adds	r3, #1
 800b338:	4a0e      	ldr	r2, [pc, #56]	@ (800b374 <vPortEnterCritical+0x5c>)
 800b33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b33c:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <vPortEnterCritical+0x5c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d110      	bne.n	800b366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b344:	4b0c      	ldr	r3, [pc, #48]	@ (800b378 <vPortEnterCritical+0x60>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00b      	beq.n	800b366 <vPortEnterCritical+0x4e>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	603b      	str	r3, [r7, #0]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <vPortEnterCritical+0x4a>
	}
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20000130 	.word	0x20000130
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b382:	4b12      	ldr	r3, [pc, #72]	@ (800b3cc <vPortExitCritical+0x50>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <vPortExitCritical+0x26>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	607b      	str	r3, [r7, #4]
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	e7fd      	b.n	800b39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3cc <vPortExitCritical+0x50>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	4a08      	ldr	r2, [pc, #32]	@ (800b3cc <vPortExitCritical+0x50>)
 800b3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3ac:	4b07      	ldr	r3, [pc, #28]	@ (800b3cc <vPortExitCritical+0x50>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d105      	bne.n	800b3c0 <vPortExitCritical+0x44>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	f383 8811 	msr	BASEPRI, r3
}
 800b3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	20000130 	.word	0x20000130

0800b3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3d0:	f3ef 8009 	mrs	r0, PSP
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4b15      	ldr	r3, [pc, #84]	@ (800b430 <pxCurrentTCBConst>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f01e 0f10 	tst.w	lr, #16
 800b3e0:	bf08      	it	eq
 800b3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b3f4:	f380 8811 	msr	BASEPRI, r0
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f7fe fd88 	bl	8009f14 <vTaskSwitchContext>
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f380 8811 	msr	BASEPRI, r0
 800b40c:	bc09      	pop	{r0, r3}
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b416:	f01e 0f10 	tst.w	lr, #16
 800b41a:	bf08      	it	eq
 800b41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b420:	f380 8809 	msr	PSP, r0
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst>:
 800b430:	20000de0 	.word	0x20000de0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b452:	f7fe fca5 	bl	8009da0 <xTaskIncrementTick>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b45c:	4b06      	ldr	r3, [pc, #24]	@ (800b478 <xPortSysTickHandler+0x40>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	2300      	movs	r3, #0
 800b466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f383 8811 	msr	BASEPRI, r3
}
 800b46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b480:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b486:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b4 <vPortSetupTimerInterrupt+0x38>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b8 <vPortSetupTimerInterrupt+0x3c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a0a      	ldr	r2, [pc, #40]	@ (800b4bc <vPortSetupTimerInterrupt+0x40>)
 800b492:	fba2 2303 	umull	r2, r3, r2, r3
 800b496:	099b      	lsrs	r3, r3, #6
 800b498:	4a09      	ldr	r2, [pc, #36]	@ (800b4c0 <vPortSetupTimerInterrupt+0x44>)
 800b49a:	3b01      	subs	r3, #1
 800b49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b49e:	4b04      	ldr	r3, [pc, #16]	@ (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	e000e010 	.word	0xe000e010
 800b4b4:	e000e018 	.word	0xe000e018
 800b4b8:	20000114 	.word	0x20000114
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	e000e014 	.word	0xe000e014

0800b4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b4d4 <vPortEnableVFP+0x10>
 800b4c8:	6801      	ldr	r1, [r0, #0]
 800b4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b4ce:	6001      	str	r1, [r0, #0]
 800b4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4d2:	bf00      	nop
 800b4d4:	e000ed88 	.word	0xe000ed88

0800b4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4de:	f3ef 8305 	mrs	r3, IPSR
 800b4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b0f      	cmp	r3, #15
 800b4e8:	d915      	bls.n	800b516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4ea:	4a18      	ldr	r2, [pc, #96]	@ (800b54c <vPortValidateInterruptPriority+0x74>)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4f4:	4b16      	ldr	r3, [pc, #88]	@ (800b550 <vPortValidateInterruptPriority+0x78>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	7afa      	ldrb	r2, [r7, #11]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d20b      	bcs.n	800b516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	e7fd      	b.n	800b512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b516:	4b0f      	ldr	r3, [pc, #60]	@ (800b554 <vPortValidateInterruptPriority+0x7c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b51e:	4b0e      	ldr	r3, [pc, #56]	@ (800b558 <vPortValidateInterruptPriority+0x80>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d90b      	bls.n	800b53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	603b      	str	r3, [r7, #0]
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	e7fd      	b.n	800b53a <vPortValidateInterruptPriority+0x62>
	}
 800b53e:	bf00      	nop
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	e000e3f0 	.word	0xe000e3f0
 800b550:	2000140c 	.word	0x2000140c
 800b554:	e000ed0c 	.word	0xe000ed0c
 800b558:	20001410 	.word	0x20001410

0800b55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	@ 0x28
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b564:	2300      	movs	r3, #0
 800b566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b568:	f7fe fb5e 	bl	8009c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b56c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6e0 <pvPortMalloc+0x184>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b574:	f000 f924 	bl	800b7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b578:	4b5a      	ldr	r3, [pc, #360]	@ (800b6e4 <pvPortMalloc+0x188>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4013      	ands	r3, r2
 800b580:	2b00      	cmp	r3, #0
 800b582:	f040 8095 	bne.w	800b6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d01e      	beq.n	800b5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b58c:	2208      	movs	r2, #8
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f003 0307 	and.w	r3, r3, #7
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d015      	beq.n	800b5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f023 0307 	bic.w	r3, r3, #7
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f003 0307 	and.w	r3, r3, #7
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00b      	beq.n	800b5ca <pvPortMalloc+0x6e>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	617b      	str	r3, [r7, #20]
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop
 800b5c8:	e7fd      	b.n	800b5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d06f      	beq.n	800b6b0 <pvPortMalloc+0x154>
 800b5d0:	4b45      	ldr	r3, [pc, #276]	@ (800b6e8 <pvPortMalloc+0x18c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d86a      	bhi.n	800b6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5da:	4b44      	ldr	r3, [pc, #272]	@ (800b6ec <pvPortMalloc+0x190>)
 800b5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5de:	4b43      	ldr	r3, [pc, #268]	@ (800b6ec <pvPortMalloc+0x190>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5e4:	e004      	b.n	800b5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d903      	bls.n	800b602 <pvPortMalloc+0xa6>
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f1      	bne.n	800b5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b602:	4b37      	ldr	r3, [pc, #220]	@ (800b6e0 <pvPortMalloc+0x184>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b608:	429a      	cmp	r2, r3
 800b60a:	d051      	beq.n	800b6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b60c:	6a3b      	ldr	r3, [r7, #32]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2208      	movs	r2, #8
 800b612:	4413      	add	r3, r2
 800b614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	1ad2      	subs	r2, r2, r3
 800b626:	2308      	movs	r3, #8
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d920      	bls.n	800b670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4413      	add	r3, r2
 800b634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <pvPortMalloc+0xfc>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	613b      	str	r3, [r7, #16]
}
 800b652:	bf00      	nop
 800b654:	bf00      	nop
 800b656:	e7fd      	b.n	800b654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	1ad2      	subs	r2, r2, r3
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b66a:	69b8      	ldr	r0, [r7, #24]
 800b66c:	f000 f90a 	bl	800b884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b670:	4b1d      	ldr	r3, [pc, #116]	@ (800b6e8 <pvPortMalloc+0x18c>)
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6e8 <pvPortMalloc+0x18c>)
 800b67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b67e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e8 <pvPortMalloc+0x18c>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	4b1b      	ldr	r3, [pc, #108]	@ (800b6f0 <pvPortMalloc+0x194>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d203      	bcs.n	800b692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b68a:	4b17      	ldr	r3, [pc, #92]	@ (800b6e8 <pvPortMalloc+0x18c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a18      	ldr	r2, [pc, #96]	@ (800b6f0 <pvPortMalloc+0x194>)
 800b690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4b13      	ldr	r3, [pc, #76]	@ (800b6e4 <pvPortMalloc+0x188>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6a6:	4b13      	ldr	r3, [pc, #76]	@ (800b6f4 <pvPortMalloc+0x198>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	4a11      	ldr	r2, [pc, #68]	@ (800b6f4 <pvPortMalloc+0x198>)
 800b6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6b0:	f7fe fac8 	bl	8009c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00b      	beq.n	800b6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	60fb      	str	r3, [r7, #12]
}
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop
 800b6d4:	e7fd      	b.n	800b6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3728      	adds	r7, #40	@ 0x28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	2000335c 	.word	0x2000335c
 800b6e4:	20003370 	.word	0x20003370
 800b6e8:	20003360 	.word	0x20003360
 800b6ec:	20003354 	.word	0x20003354
 800b6f0:	20003364 	.word	0x20003364
 800b6f4:	20003368 	.word	0x20003368

0800b6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d04f      	beq.n	800b7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b70a:	2308      	movs	r3, #8
 800b70c:	425b      	negs	r3, r3
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	4413      	add	r3, r2
 800b712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	4b25      	ldr	r3, [pc, #148]	@ (800b7b4 <vPortFree+0xbc>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4013      	ands	r3, r2
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10b      	bne.n	800b73e <vPortFree+0x46>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	60fb      	str	r3, [r7, #12]
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	e7fd      	b.n	800b73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00b      	beq.n	800b75e <vPortFree+0x66>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	60bb      	str	r3, [r7, #8]
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	e7fd      	b.n	800b75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <vPortFree+0xbc>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4013      	ands	r3, r2
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01e      	beq.n	800b7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d11a      	bne.n	800b7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b4 <vPortFree+0xbc>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	43db      	mvns	r3, r3
 800b77e:	401a      	ands	r2, r3
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b784:	f7fe fa50 	bl	8009c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b8 <vPortFree+0xc0>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4413      	add	r3, r2
 800b792:	4a09      	ldr	r2, [pc, #36]	@ (800b7b8 <vPortFree+0xc0>)
 800b794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b796:	6938      	ldr	r0, [r7, #16]
 800b798:	f000 f874 	bl	800b884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b79c:	4b07      	ldr	r3, [pc, #28]	@ (800b7bc <vPortFree+0xc4>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	4a06      	ldr	r2, [pc, #24]	@ (800b7bc <vPortFree+0xc4>)
 800b7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7a6:	f7fe fa4d 	bl	8009c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7aa:	bf00      	nop
 800b7ac:	3718      	adds	r7, #24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20003370 	.word	0x20003370
 800b7b8:	20003360 	.word	0x20003360
 800b7bc:	2000336c 	.word	0x2000336c

0800b7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7c6:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800b7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7cc:	4b27      	ldr	r3, [pc, #156]	@ (800b86c <prvHeapInit+0xac>)
 800b7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00c      	beq.n	800b7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f023 0307 	bic.w	r3, r3, #7
 800b7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b86c <prvHeapInit+0xac>)
 800b7f0:	4413      	add	r3, r2
 800b7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b870 <prvHeapInit+0xb0>)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800b870 <prvHeapInit+0xb0>)
 800b800:	2200      	movs	r2, #0
 800b802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	4413      	add	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b80c:	2208      	movs	r2, #8
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	1a9b      	subs	r3, r3, r2
 800b812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 0307 	bic.w	r3, r3, #7
 800b81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4a15      	ldr	r2, [pc, #84]	@ (800b874 <prvHeapInit+0xb4>)
 800b820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b822:	4b14      	ldr	r3, [pc, #80]	@ (800b874 <prvHeapInit+0xb4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2200      	movs	r2, #0
 800b828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b82a:	4b12      	ldr	r3, [pc, #72]	@ (800b874 <prvHeapInit+0xb4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	1ad2      	subs	r2, r2, r3
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b840:	4b0c      	ldr	r3, [pc, #48]	@ (800b874 <prvHeapInit+0xb4>)
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	4a0a      	ldr	r2, [pc, #40]	@ (800b878 <prvHeapInit+0xb8>)
 800b84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4a09      	ldr	r2, [pc, #36]	@ (800b87c <prvHeapInit+0xbc>)
 800b856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b858:	4b09      	ldr	r3, [pc, #36]	@ (800b880 <prvHeapInit+0xc0>)
 800b85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b85e:	601a      	str	r2, [r3, #0]
}
 800b860:	bf00      	nop
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20001414 	.word	0x20001414
 800b870:	20003354 	.word	0x20003354
 800b874:	2000335c 	.word	0x2000335c
 800b878:	20003364 	.word	0x20003364
 800b87c:	20003360 	.word	0x20003360
 800b880:	20003370 	.word	0x20003370

0800b884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b88c:	4b28      	ldr	r3, [pc, #160]	@ (800b930 <prvInsertBlockIntoFreeList+0xac>)
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	e002      	b.n	800b898 <prvInsertBlockIntoFreeList+0x14>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	60fb      	str	r3, [r7, #12]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d8f7      	bhi.n	800b892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d108      	bne.n	800b8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	441a      	add	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	441a      	add	r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d118      	bne.n	800b90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	4b15      	ldr	r3, [pc, #84]	@ (800b934 <prvInsertBlockIntoFreeList+0xb0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d00d      	beq.n	800b902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	441a      	add	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	e008      	b.n	800b914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b902:	4b0c      	ldr	r3, [pc, #48]	@ (800b934 <prvInsertBlockIntoFreeList+0xb0>)
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	e003      	b.n	800b914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d002      	beq.n	800b922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b922:	bf00      	nop
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	20003354 	.word	0x20003354
 800b934:	2000335c 	.word	0x2000335c

0800b938 <calloc>:
 800b938:	4b02      	ldr	r3, [pc, #8]	@ (800b944 <calloc+0xc>)
 800b93a:	460a      	mov	r2, r1
 800b93c:	4601      	mov	r1, r0
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	f000 b802 	b.w	800b948 <_calloc_r>
 800b944:	20000140 	.word	0x20000140

0800b948 <_calloc_r>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	fba1 5402 	umull	r5, r4, r1, r2
 800b94e:	b93c      	cbnz	r4, 800b960 <_calloc_r+0x18>
 800b950:	4629      	mov	r1, r5
 800b952:	f000 f837 	bl	800b9c4 <_malloc_r>
 800b956:	4606      	mov	r6, r0
 800b958:	b928      	cbnz	r0, 800b966 <_calloc_r+0x1e>
 800b95a:	2600      	movs	r6, #0
 800b95c:	4630      	mov	r0, r6
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	220c      	movs	r2, #12
 800b962:	6002      	str	r2, [r0, #0]
 800b964:	e7f9      	b.n	800b95a <_calloc_r+0x12>
 800b966:	462a      	mov	r2, r5
 800b968:	4621      	mov	r1, r4
 800b96a:	f000 feb8 	bl	800c6de <memset>
 800b96e:	e7f5      	b.n	800b95c <_calloc_r+0x14>

0800b970 <malloc>:
 800b970:	4b02      	ldr	r3, [pc, #8]	@ (800b97c <malloc+0xc>)
 800b972:	4601      	mov	r1, r0
 800b974:	6818      	ldr	r0, [r3, #0]
 800b976:	f000 b825 	b.w	800b9c4 <_malloc_r>
 800b97a:	bf00      	nop
 800b97c:	20000140 	.word	0x20000140

0800b980 <sbrk_aligned>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4e0f      	ldr	r6, [pc, #60]	@ (800b9c0 <sbrk_aligned+0x40>)
 800b984:	460c      	mov	r4, r1
 800b986:	6831      	ldr	r1, [r6, #0]
 800b988:	4605      	mov	r5, r0
 800b98a:	b911      	cbnz	r1, 800b992 <sbrk_aligned+0x12>
 800b98c:	f000 ff9a 	bl	800c8c4 <_sbrk_r>
 800b990:	6030      	str	r0, [r6, #0]
 800b992:	4621      	mov	r1, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f000 ff95 	bl	800c8c4 <_sbrk_r>
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	d103      	bne.n	800b9a6 <sbrk_aligned+0x26>
 800b99e:	f04f 34ff 	mov.w	r4, #4294967295
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	bd70      	pop	{r4, r5, r6, pc}
 800b9a6:	1cc4      	adds	r4, r0, #3
 800b9a8:	f024 0403 	bic.w	r4, r4, #3
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d0f8      	beq.n	800b9a2 <sbrk_aligned+0x22>
 800b9b0:	1a21      	subs	r1, r4, r0
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f000 ff86 	bl	800c8c4 <_sbrk_r>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d1f2      	bne.n	800b9a2 <sbrk_aligned+0x22>
 800b9bc:	e7ef      	b.n	800b99e <sbrk_aligned+0x1e>
 800b9be:	bf00      	nop
 800b9c0:	20003374 	.word	0x20003374

0800b9c4 <_malloc_r>:
 800b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	1ccd      	adds	r5, r1, #3
 800b9ca:	f025 0503 	bic.w	r5, r5, #3
 800b9ce:	3508      	adds	r5, #8
 800b9d0:	2d0c      	cmp	r5, #12
 800b9d2:	bf38      	it	cc
 800b9d4:	250c      	movcc	r5, #12
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	4606      	mov	r6, r0
 800b9da:	db01      	blt.n	800b9e0 <_malloc_r+0x1c>
 800b9dc:	42a9      	cmp	r1, r5
 800b9de:	d904      	bls.n	800b9ea <_malloc_r+0x26>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	6033      	str	r3, [r6, #0]
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bac0 <_malloc_r+0xfc>
 800b9ee:	f000 f869 	bl	800bac4 <__malloc_lock>
 800b9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f6:	461c      	mov	r4, r3
 800b9f8:	bb44      	cbnz	r4, 800ba4c <_malloc_r+0x88>
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff ffbf 	bl	800b980 <sbrk_aligned>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	4604      	mov	r4, r0
 800ba06:	d158      	bne.n	800baba <_malloc_r+0xf6>
 800ba08:	f8d8 4000 	ldr.w	r4, [r8]
 800ba0c:	4627      	mov	r7, r4
 800ba0e:	2f00      	cmp	r7, #0
 800ba10:	d143      	bne.n	800ba9a <_malloc_r+0xd6>
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	d04b      	beq.n	800baae <_malloc_r+0xea>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	4639      	mov	r1, r7
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	eb04 0903 	add.w	r9, r4, r3
 800ba20:	f000 ff50 	bl	800c8c4 <_sbrk_r>
 800ba24:	4581      	cmp	r9, r0
 800ba26:	d142      	bne.n	800baae <_malloc_r+0xea>
 800ba28:	6821      	ldr	r1, [r4, #0]
 800ba2a:	1a6d      	subs	r5, r5, r1
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ffa6 	bl	800b980 <sbrk_aligned>
 800ba34:	3001      	adds	r0, #1
 800ba36:	d03a      	beq.n	800baae <_malloc_r+0xea>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	442b      	add	r3, r5
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	bb62      	cbnz	r2, 800baa0 <_malloc_r+0xdc>
 800ba46:	f8c8 7000 	str.w	r7, [r8]
 800ba4a:	e00f      	b.n	800ba6c <_malloc_r+0xa8>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	1b52      	subs	r2, r2, r5
 800ba50:	d420      	bmi.n	800ba94 <_malloc_r+0xd0>
 800ba52:	2a0b      	cmp	r2, #11
 800ba54:	d917      	bls.n	800ba86 <_malloc_r+0xc2>
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	6025      	str	r5, [r4, #0]
 800ba5c:	bf18      	it	ne
 800ba5e:	6059      	strne	r1, [r3, #4]
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	bf08      	it	eq
 800ba64:	f8c8 1000 	streq.w	r1, [r8]
 800ba68:	5162      	str	r2, [r4, r5]
 800ba6a:	604b      	str	r3, [r1, #4]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f82f 	bl	800bad0 <__malloc_unlock>
 800ba72:	f104 000b 	add.w	r0, r4, #11
 800ba76:	1d23      	adds	r3, r4, #4
 800ba78:	f020 0007 	bic.w	r0, r0, #7
 800ba7c:	1ac2      	subs	r2, r0, r3
 800ba7e:	bf1c      	itt	ne
 800ba80:	1a1b      	subne	r3, r3, r0
 800ba82:	50a3      	strne	r3, [r4, r2]
 800ba84:	e7af      	b.n	800b9e6 <_malloc_r+0x22>
 800ba86:	6862      	ldr	r2, [r4, #4]
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	bf0c      	ite	eq
 800ba8c:	f8c8 2000 	streq.w	r2, [r8]
 800ba90:	605a      	strne	r2, [r3, #4]
 800ba92:	e7eb      	b.n	800ba6c <_malloc_r+0xa8>
 800ba94:	4623      	mov	r3, r4
 800ba96:	6864      	ldr	r4, [r4, #4]
 800ba98:	e7ae      	b.n	800b9f8 <_malloc_r+0x34>
 800ba9a:	463c      	mov	r4, r7
 800ba9c:	687f      	ldr	r7, [r7, #4]
 800ba9e:	e7b6      	b.n	800ba0e <_malloc_r+0x4a>
 800baa0:	461a      	mov	r2, r3
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d1fb      	bne.n	800baa0 <_malloc_r+0xdc>
 800baa8:	2300      	movs	r3, #0
 800baaa:	6053      	str	r3, [r2, #4]
 800baac:	e7de      	b.n	800ba6c <_malloc_r+0xa8>
 800baae:	230c      	movs	r3, #12
 800bab0:	6033      	str	r3, [r6, #0]
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f80c 	bl	800bad0 <__malloc_unlock>
 800bab8:	e794      	b.n	800b9e4 <_malloc_r+0x20>
 800baba:	6005      	str	r5, [r0, #0]
 800babc:	e7d6      	b.n	800ba6c <_malloc_r+0xa8>
 800babe:	bf00      	nop
 800bac0:	20003378 	.word	0x20003378

0800bac4 <__malloc_lock>:
 800bac4:	4801      	ldr	r0, [pc, #4]	@ (800bacc <__malloc_lock+0x8>)
 800bac6:	f000 bf4a 	b.w	800c95e <__retarget_lock_acquire_recursive>
 800baca:	bf00      	nop
 800bacc:	200034bc 	.word	0x200034bc

0800bad0 <__malloc_unlock>:
 800bad0:	4801      	ldr	r0, [pc, #4]	@ (800bad8 <__malloc_unlock+0x8>)
 800bad2:	f000 bf45 	b.w	800c960 <__retarget_lock_release_recursive>
 800bad6:	bf00      	nop
 800bad8:	200034bc 	.word	0x200034bc

0800badc <_strtol_l.constprop.0>:
 800badc:	2b24      	cmp	r3, #36	@ 0x24
 800bade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae2:	4686      	mov	lr, r0
 800bae4:	4690      	mov	r8, r2
 800bae6:	d801      	bhi.n	800baec <_strtol_l.constprop.0+0x10>
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d106      	bne.n	800bafa <_strtol_l.constprop.0+0x1e>
 800baec:	f000 ff0c 	bl	800c908 <__errno>
 800baf0:	2316      	movs	r3, #22
 800baf2:	6003      	str	r3, [r0, #0]
 800baf4:	2000      	movs	r0, #0
 800baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafa:	4834      	ldr	r0, [pc, #208]	@ (800bbcc <_strtol_l.constprop.0+0xf0>)
 800bafc:	460d      	mov	r5, r1
 800bafe:	462a      	mov	r2, r5
 800bb00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb04:	5d06      	ldrb	r6, [r0, r4]
 800bb06:	f016 0608 	ands.w	r6, r6, #8
 800bb0a:	d1f8      	bne.n	800bafe <_strtol_l.constprop.0+0x22>
 800bb0c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bb0e:	d12d      	bne.n	800bb6c <_strtol_l.constprop.0+0x90>
 800bb10:	782c      	ldrb	r4, [r5, #0]
 800bb12:	2601      	movs	r6, #1
 800bb14:	1c95      	adds	r5, r2, #2
 800bb16:	f033 0210 	bics.w	r2, r3, #16
 800bb1a:	d109      	bne.n	800bb30 <_strtol_l.constprop.0+0x54>
 800bb1c:	2c30      	cmp	r4, #48	@ 0x30
 800bb1e:	d12a      	bne.n	800bb76 <_strtol_l.constprop.0+0x9a>
 800bb20:	782a      	ldrb	r2, [r5, #0]
 800bb22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb26:	2a58      	cmp	r2, #88	@ 0x58
 800bb28:	d125      	bne.n	800bb76 <_strtol_l.constprop.0+0x9a>
 800bb2a:	786c      	ldrb	r4, [r5, #1]
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	3502      	adds	r5, #2
 800bb30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bb34:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb38:	2200      	movs	r2, #0
 800bb3a:	fbbc f9f3 	udiv	r9, ip, r3
 800bb3e:	4610      	mov	r0, r2
 800bb40:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bb48:	2f09      	cmp	r7, #9
 800bb4a:	d81b      	bhi.n	800bb84 <_strtol_l.constprop.0+0xa8>
 800bb4c:	463c      	mov	r4, r7
 800bb4e:	42a3      	cmp	r3, r4
 800bb50:	dd27      	ble.n	800bba2 <_strtol_l.constprop.0+0xc6>
 800bb52:	1c57      	adds	r7, r2, #1
 800bb54:	d007      	beq.n	800bb66 <_strtol_l.constprop.0+0x8a>
 800bb56:	4581      	cmp	r9, r0
 800bb58:	d320      	bcc.n	800bb9c <_strtol_l.constprop.0+0xc0>
 800bb5a:	d101      	bne.n	800bb60 <_strtol_l.constprop.0+0x84>
 800bb5c:	45a2      	cmp	sl, r4
 800bb5e:	db1d      	blt.n	800bb9c <_strtol_l.constprop.0+0xc0>
 800bb60:	fb00 4003 	mla	r0, r0, r3, r4
 800bb64:	2201      	movs	r2, #1
 800bb66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb6a:	e7eb      	b.n	800bb44 <_strtol_l.constprop.0+0x68>
 800bb6c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb6e:	bf04      	itt	eq
 800bb70:	782c      	ldrbeq	r4, [r5, #0]
 800bb72:	1c95      	addeq	r5, r2, #2
 800bb74:	e7cf      	b.n	800bb16 <_strtol_l.constprop.0+0x3a>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1da      	bne.n	800bb30 <_strtol_l.constprop.0+0x54>
 800bb7a:	2c30      	cmp	r4, #48	@ 0x30
 800bb7c:	bf0c      	ite	eq
 800bb7e:	2308      	moveq	r3, #8
 800bb80:	230a      	movne	r3, #10
 800bb82:	e7d5      	b.n	800bb30 <_strtol_l.constprop.0+0x54>
 800bb84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb88:	2f19      	cmp	r7, #25
 800bb8a:	d801      	bhi.n	800bb90 <_strtol_l.constprop.0+0xb4>
 800bb8c:	3c37      	subs	r4, #55	@ 0x37
 800bb8e:	e7de      	b.n	800bb4e <_strtol_l.constprop.0+0x72>
 800bb90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb94:	2f19      	cmp	r7, #25
 800bb96:	d804      	bhi.n	800bba2 <_strtol_l.constprop.0+0xc6>
 800bb98:	3c57      	subs	r4, #87	@ 0x57
 800bb9a:	e7d8      	b.n	800bb4e <_strtol_l.constprop.0+0x72>
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	e7e1      	b.n	800bb66 <_strtol_l.constprop.0+0x8a>
 800bba2:	1c53      	adds	r3, r2, #1
 800bba4:	d108      	bne.n	800bbb8 <_strtol_l.constprop.0+0xdc>
 800bba6:	2322      	movs	r3, #34	@ 0x22
 800bba8:	f8ce 3000 	str.w	r3, [lr]
 800bbac:	4660      	mov	r0, ip
 800bbae:	f1b8 0f00 	cmp.w	r8, #0
 800bbb2:	d0a0      	beq.n	800baf6 <_strtol_l.constprop.0+0x1a>
 800bbb4:	1e69      	subs	r1, r5, #1
 800bbb6:	e006      	b.n	800bbc6 <_strtol_l.constprop.0+0xea>
 800bbb8:	b106      	cbz	r6, 800bbbc <_strtol_l.constprop.0+0xe0>
 800bbba:	4240      	negs	r0, r0
 800bbbc:	f1b8 0f00 	cmp.w	r8, #0
 800bbc0:	d099      	beq.n	800baf6 <_strtol_l.constprop.0+0x1a>
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	d1f6      	bne.n	800bbb4 <_strtol_l.constprop.0+0xd8>
 800bbc6:	f8c8 1000 	str.w	r1, [r8]
 800bbca:	e794      	b.n	800baf6 <_strtol_l.constprop.0+0x1a>
 800bbcc:	0800eca1 	.word	0x0800eca1

0800bbd0 <strtol>:
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	460a      	mov	r2, r1
 800bbd4:	4601      	mov	r1, r0
 800bbd6:	4802      	ldr	r0, [pc, #8]	@ (800bbe0 <strtol+0x10>)
 800bbd8:	6800      	ldr	r0, [r0, #0]
 800bbda:	f7ff bf7f 	b.w	800badc <_strtol_l.constprop.0>
 800bbde:	bf00      	nop
 800bbe0:	20000140 	.word	0x20000140

0800bbe4 <__cvt>:
 800bbe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	ec57 6b10 	vmov	r6, r7, d0
 800bbec:	2f00      	cmp	r7, #0
 800bbee:	460c      	mov	r4, r1
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	463b      	mov	r3, r7
 800bbf4:	bfbb      	ittet	lt
 800bbf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bbfa:	461f      	movlt	r7, r3
 800bbfc:	2300      	movge	r3, #0
 800bbfe:	232d      	movlt	r3, #45	@ 0x2d
 800bc00:	700b      	strb	r3, [r1, #0]
 800bc02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bc08:	4691      	mov	r9, r2
 800bc0a:	f023 0820 	bic.w	r8, r3, #32
 800bc0e:	bfbc      	itt	lt
 800bc10:	4632      	movlt	r2, r6
 800bc12:	4616      	movlt	r6, r2
 800bc14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc18:	d005      	beq.n	800bc26 <__cvt+0x42>
 800bc1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc1e:	d100      	bne.n	800bc22 <__cvt+0x3e>
 800bc20:	3401      	adds	r4, #1
 800bc22:	2102      	movs	r1, #2
 800bc24:	e000      	b.n	800bc28 <__cvt+0x44>
 800bc26:	2103      	movs	r1, #3
 800bc28:	ab03      	add	r3, sp, #12
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	ab02      	add	r3, sp, #8
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	ec47 6b10 	vmov	d0, r6, r7
 800bc34:	4653      	mov	r3, sl
 800bc36:	4622      	mov	r2, r4
 800bc38:	f000 ff4a 	bl	800cad0 <_dtoa_r>
 800bc3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc40:	4605      	mov	r5, r0
 800bc42:	d119      	bne.n	800bc78 <__cvt+0x94>
 800bc44:	f019 0f01 	tst.w	r9, #1
 800bc48:	d00e      	beq.n	800bc68 <__cvt+0x84>
 800bc4a:	eb00 0904 	add.w	r9, r0, r4
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2300      	movs	r3, #0
 800bc52:	4630      	mov	r0, r6
 800bc54:	4639      	mov	r1, r7
 800bc56:	f7f4 ff47 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc5a:	b108      	cbz	r0, 800bc60 <__cvt+0x7c>
 800bc5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc60:	2230      	movs	r2, #48	@ 0x30
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	454b      	cmp	r3, r9
 800bc66:	d31e      	bcc.n	800bca6 <__cvt+0xc2>
 800bc68:	9b03      	ldr	r3, [sp, #12]
 800bc6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc6c:	1b5b      	subs	r3, r3, r5
 800bc6e:	4628      	mov	r0, r5
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	b004      	add	sp, #16
 800bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc7c:	eb00 0904 	add.w	r9, r0, r4
 800bc80:	d1e5      	bne.n	800bc4e <__cvt+0x6a>
 800bc82:	7803      	ldrb	r3, [r0, #0]
 800bc84:	2b30      	cmp	r3, #48	@ 0x30
 800bc86:	d10a      	bne.n	800bc9e <__cvt+0xba>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc94:	b918      	cbnz	r0, 800bc9e <__cvt+0xba>
 800bc96:	f1c4 0401 	rsb	r4, r4, #1
 800bc9a:	f8ca 4000 	str.w	r4, [sl]
 800bc9e:	f8da 3000 	ldr.w	r3, [sl]
 800bca2:	4499      	add	r9, r3
 800bca4:	e7d3      	b.n	800bc4e <__cvt+0x6a>
 800bca6:	1c59      	adds	r1, r3, #1
 800bca8:	9103      	str	r1, [sp, #12]
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	e7d9      	b.n	800bc62 <__cvt+0x7e>

0800bcae <__exponent>:
 800bcae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	bfba      	itte	lt
 800bcb4:	4249      	neglt	r1, r1
 800bcb6:	232d      	movlt	r3, #45	@ 0x2d
 800bcb8:	232b      	movge	r3, #43	@ 0x2b
 800bcba:	2909      	cmp	r1, #9
 800bcbc:	7002      	strb	r2, [r0, #0]
 800bcbe:	7043      	strb	r3, [r0, #1]
 800bcc0:	dd29      	ble.n	800bd16 <__exponent+0x68>
 800bcc2:	f10d 0307 	add.w	r3, sp, #7
 800bcc6:	461d      	mov	r5, r3
 800bcc8:	270a      	movs	r7, #10
 800bcca:	461a      	mov	r2, r3
 800bccc:	fbb1 f6f7 	udiv	r6, r1, r7
 800bcd0:	fb07 1416 	mls	r4, r7, r6, r1
 800bcd4:	3430      	adds	r4, #48	@ 0x30
 800bcd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bcda:	460c      	mov	r4, r1
 800bcdc:	2c63      	cmp	r4, #99	@ 0x63
 800bcde:	f103 33ff 	add.w	r3, r3, #4294967295
 800bce2:	4631      	mov	r1, r6
 800bce4:	dcf1      	bgt.n	800bcca <__exponent+0x1c>
 800bce6:	3130      	adds	r1, #48	@ 0x30
 800bce8:	1e94      	subs	r4, r2, #2
 800bcea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bcee:	1c41      	adds	r1, r0, #1
 800bcf0:	4623      	mov	r3, r4
 800bcf2:	42ab      	cmp	r3, r5
 800bcf4:	d30a      	bcc.n	800bd0c <__exponent+0x5e>
 800bcf6:	f10d 0309 	add.w	r3, sp, #9
 800bcfa:	1a9b      	subs	r3, r3, r2
 800bcfc:	42ac      	cmp	r4, r5
 800bcfe:	bf88      	it	hi
 800bd00:	2300      	movhi	r3, #0
 800bd02:	3302      	adds	r3, #2
 800bd04:	4403      	add	r3, r0
 800bd06:	1a18      	subs	r0, r3, r0
 800bd08:	b003      	add	sp, #12
 800bd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd10:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd14:	e7ed      	b.n	800bcf2 <__exponent+0x44>
 800bd16:	2330      	movs	r3, #48	@ 0x30
 800bd18:	3130      	adds	r1, #48	@ 0x30
 800bd1a:	7083      	strb	r3, [r0, #2]
 800bd1c:	70c1      	strb	r1, [r0, #3]
 800bd1e:	1d03      	adds	r3, r0, #4
 800bd20:	e7f1      	b.n	800bd06 <__exponent+0x58>
	...

0800bd24 <_printf_float>:
 800bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	b08d      	sub	sp, #52	@ 0x34
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd30:	4616      	mov	r6, r2
 800bd32:	461f      	mov	r7, r3
 800bd34:	4605      	mov	r5, r0
 800bd36:	f000 fd37 	bl	800c7a8 <_localeconv_r>
 800bd3a:	6803      	ldr	r3, [r0, #0]
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7f4 faa6 	bl	8000290 <strlen>
 800bd44:	2300      	movs	r3, #0
 800bd46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd48:	f8d8 3000 	ldr.w	r3, [r8]
 800bd4c:	9005      	str	r0, [sp, #20]
 800bd4e:	3307      	adds	r3, #7
 800bd50:	f023 0307 	bic.w	r3, r3, #7
 800bd54:	f103 0208 	add.w	r2, r3, #8
 800bd58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd5c:	f8d4 b000 	ldr.w	fp, [r4]
 800bd60:	f8c8 2000 	str.w	r2, [r8]
 800bd64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bd6c:	9307      	str	r3, [sp, #28]
 800bd6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bd76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd7a:	4b9c      	ldr	r3, [pc, #624]	@ (800bfec <_printf_float+0x2c8>)
 800bd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd80:	f7f4 fee4 	bl	8000b4c <__aeabi_dcmpun>
 800bd84:	bb70      	cbnz	r0, 800bde4 <_printf_float+0xc0>
 800bd86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd8a:	4b98      	ldr	r3, [pc, #608]	@ (800bfec <_printf_float+0x2c8>)
 800bd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd90:	f7f4 febe 	bl	8000b10 <__aeabi_dcmple>
 800bd94:	bb30      	cbnz	r0, 800bde4 <_printf_float+0xc0>
 800bd96:	2200      	movs	r2, #0
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 fead 	bl	8000afc <__aeabi_dcmplt>
 800bda2:	b110      	cbz	r0, 800bdaa <_printf_float+0x86>
 800bda4:	232d      	movs	r3, #45	@ 0x2d
 800bda6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdaa:	4a91      	ldr	r2, [pc, #580]	@ (800bff0 <_printf_float+0x2cc>)
 800bdac:	4b91      	ldr	r3, [pc, #580]	@ (800bff4 <_printf_float+0x2d0>)
 800bdae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bdb2:	bf94      	ite	ls
 800bdb4:	4690      	movls	r8, r2
 800bdb6:	4698      	movhi	r8, r3
 800bdb8:	2303      	movs	r3, #3
 800bdba:	6123      	str	r3, [r4, #16]
 800bdbc:	f02b 0304 	bic.w	r3, fp, #4
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	f04f 0900 	mov.w	r9, #0
 800bdc6:	9700      	str	r7, [sp, #0]
 800bdc8:	4633      	mov	r3, r6
 800bdca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f000 f9d2 	bl	800c178 <_printf_common>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f040 808d 	bne.w	800bef4 <_printf_float+0x1d0>
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	b00d      	add	sp, #52	@ 0x34
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	4642      	mov	r2, r8
 800bde6:	464b      	mov	r3, r9
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 feae 	bl	8000b4c <__aeabi_dcmpun>
 800bdf0:	b140      	cbz	r0, 800be04 <_printf_float+0xe0>
 800bdf2:	464b      	mov	r3, r9
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfbc      	itt	lt
 800bdf8:	232d      	movlt	r3, #45	@ 0x2d
 800bdfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bdfe:	4a7e      	ldr	r2, [pc, #504]	@ (800bff8 <_printf_float+0x2d4>)
 800be00:	4b7e      	ldr	r3, [pc, #504]	@ (800bffc <_printf_float+0x2d8>)
 800be02:	e7d4      	b.n	800bdae <_printf_float+0x8a>
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800be0a:	9206      	str	r2, [sp, #24]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	d13b      	bne.n	800be88 <_printf_float+0x164>
 800be10:	2306      	movs	r3, #6
 800be12:	6063      	str	r3, [r4, #4]
 800be14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800be18:	2300      	movs	r3, #0
 800be1a:	6022      	str	r2, [r4, #0]
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800be20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be24:	ab09      	add	r3, sp, #36	@ 0x24
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	6861      	ldr	r1, [r4, #4]
 800be2a:	ec49 8b10 	vmov	d0, r8, r9
 800be2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be32:	4628      	mov	r0, r5
 800be34:	f7ff fed6 	bl	800bbe4 <__cvt>
 800be38:	9b06      	ldr	r3, [sp, #24]
 800be3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be3c:	2b47      	cmp	r3, #71	@ 0x47
 800be3e:	4680      	mov	r8, r0
 800be40:	d129      	bne.n	800be96 <_printf_float+0x172>
 800be42:	1cc8      	adds	r0, r1, #3
 800be44:	db02      	blt.n	800be4c <_printf_float+0x128>
 800be46:	6863      	ldr	r3, [r4, #4]
 800be48:	4299      	cmp	r1, r3
 800be4a:	dd41      	ble.n	800bed0 <_printf_float+0x1ac>
 800be4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800be50:	fa5f fa8a 	uxtb.w	sl, sl
 800be54:	3901      	subs	r1, #1
 800be56:	4652      	mov	r2, sl
 800be58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800be5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800be5e:	f7ff ff26 	bl	800bcae <__exponent>
 800be62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be64:	1813      	adds	r3, r2, r0
 800be66:	2a01      	cmp	r2, #1
 800be68:	4681      	mov	r9, r0
 800be6a:	6123      	str	r3, [r4, #16]
 800be6c:	dc02      	bgt.n	800be74 <_printf_float+0x150>
 800be6e:	6822      	ldr	r2, [r4, #0]
 800be70:	07d2      	lsls	r2, r2, #31
 800be72:	d501      	bpl.n	800be78 <_printf_float+0x154>
 800be74:	3301      	adds	r3, #1
 800be76:	6123      	str	r3, [r4, #16]
 800be78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0a2      	beq.n	800bdc6 <_printf_float+0xa2>
 800be80:	232d      	movs	r3, #45	@ 0x2d
 800be82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be86:	e79e      	b.n	800bdc6 <_printf_float+0xa2>
 800be88:	9a06      	ldr	r2, [sp, #24]
 800be8a:	2a47      	cmp	r2, #71	@ 0x47
 800be8c:	d1c2      	bne.n	800be14 <_printf_float+0xf0>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1c0      	bne.n	800be14 <_printf_float+0xf0>
 800be92:	2301      	movs	r3, #1
 800be94:	e7bd      	b.n	800be12 <_printf_float+0xee>
 800be96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be9a:	d9db      	bls.n	800be54 <_printf_float+0x130>
 800be9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bea0:	d118      	bne.n	800bed4 <_printf_float+0x1b0>
 800bea2:	2900      	cmp	r1, #0
 800bea4:	6863      	ldr	r3, [r4, #4]
 800bea6:	dd0b      	ble.n	800bec0 <_printf_float+0x19c>
 800bea8:	6121      	str	r1, [r4, #16]
 800beaa:	b913      	cbnz	r3, 800beb2 <_printf_float+0x18e>
 800beac:	6822      	ldr	r2, [r4, #0]
 800beae:	07d0      	lsls	r0, r2, #31
 800beb0:	d502      	bpl.n	800beb8 <_printf_float+0x194>
 800beb2:	3301      	adds	r3, #1
 800beb4:	440b      	add	r3, r1
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800beba:	f04f 0900 	mov.w	r9, #0
 800bebe:	e7db      	b.n	800be78 <_printf_float+0x154>
 800bec0:	b913      	cbnz	r3, 800bec8 <_printf_float+0x1a4>
 800bec2:	6822      	ldr	r2, [r4, #0]
 800bec4:	07d2      	lsls	r2, r2, #31
 800bec6:	d501      	bpl.n	800becc <_printf_float+0x1a8>
 800bec8:	3302      	adds	r3, #2
 800beca:	e7f4      	b.n	800beb6 <_printf_float+0x192>
 800becc:	2301      	movs	r3, #1
 800bece:	e7f2      	b.n	800beb6 <_printf_float+0x192>
 800bed0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bed6:	4299      	cmp	r1, r3
 800bed8:	db05      	blt.n	800bee6 <_printf_float+0x1c2>
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	6121      	str	r1, [r4, #16]
 800bede:	07d8      	lsls	r0, r3, #31
 800bee0:	d5ea      	bpl.n	800beb8 <_printf_float+0x194>
 800bee2:	1c4b      	adds	r3, r1, #1
 800bee4:	e7e7      	b.n	800beb6 <_printf_float+0x192>
 800bee6:	2900      	cmp	r1, #0
 800bee8:	bfd4      	ite	le
 800beea:	f1c1 0202 	rsble	r2, r1, #2
 800beee:	2201      	movgt	r2, #1
 800bef0:	4413      	add	r3, r2
 800bef2:	e7e0      	b.n	800beb6 <_printf_float+0x192>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	055a      	lsls	r2, r3, #21
 800bef8:	d407      	bmi.n	800bf0a <_printf_float+0x1e6>
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	4642      	mov	r2, r8
 800befe:	4631      	mov	r1, r6
 800bf00:	4628      	mov	r0, r5
 800bf02:	47b8      	blx	r7
 800bf04:	3001      	adds	r0, #1
 800bf06:	d12b      	bne.n	800bf60 <_printf_float+0x23c>
 800bf08:	e767      	b.n	800bdda <_printf_float+0xb6>
 800bf0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf0e:	f240 80dd 	bls.w	800c0cc <_printf_float+0x3a8>
 800bf12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf16:	2200      	movs	r2, #0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f7f4 fde5 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d033      	beq.n	800bf8a <_printf_float+0x266>
 800bf22:	4a37      	ldr	r2, [pc, #220]	@ (800c000 <_printf_float+0x2dc>)
 800bf24:	2301      	movs	r3, #1
 800bf26:	4631      	mov	r1, r6
 800bf28:	4628      	mov	r0, r5
 800bf2a:	47b8      	blx	r7
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	f43f af54 	beq.w	800bdda <_printf_float+0xb6>
 800bf32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bf36:	4543      	cmp	r3, r8
 800bf38:	db02      	blt.n	800bf40 <_printf_float+0x21c>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	07d8      	lsls	r0, r3, #31
 800bf3e:	d50f      	bpl.n	800bf60 <_printf_float+0x23c>
 800bf40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf44:	4631      	mov	r1, r6
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b8      	blx	r7
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	f43f af45 	beq.w	800bdda <_printf_float+0xb6>
 800bf50:	f04f 0900 	mov.w	r9, #0
 800bf54:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf58:	f104 0a1a 	add.w	sl, r4, #26
 800bf5c:	45c8      	cmp	r8, r9
 800bf5e:	dc09      	bgt.n	800bf74 <_printf_float+0x250>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	079b      	lsls	r3, r3, #30
 800bf64:	f100 8103 	bmi.w	800c16e <_printf_float+0x44a>
 800bf68:	68e0      	ldr	r0, [r4, #12]
 800bf6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf6c:	4298      	cmp	r0, r3
 800bf6e:	bfb8      	it	lt
 800bf70:	4618      	movlt	r0, r3
 800bf72:	e734      	b.n	800bdde <_printf_float+0xba>
 800bf74:	2301      	movs	r3, #1
 800bf76:	4652      	mov	r2, sl
 800bf78:	4631      	mov	r1, r6
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	47b8      	blx	r7
 800bf7e:	3001      	adds	r0, #1
 800bf80:	f43f af2b 	beq.w	800bdda <_printf_float+0xb6>
 800bf84:	f109 0901 	add.w	r9, r9, #1
 800bf88:	e7e8      	b.n	800bf5c <_printf_float+0x238>
 800bf8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dc39      	bgt.n	800c004 <_printf_float+0x2e0>
 800bf90:	4a1b      	ldr	r2, [pc, #108]	@ (800c000 <_printf_float+0x2dc>)
 800bf92:	2301      	movs	r3, #1
 800bf94:	4631      	mov	r1, r6
 800bf96:	4628      	mov	r0, r5
 800bf98:	47b8      	blx	r7
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	f43f af1d 	beq.w	800bdda <_printf_float+0xb6>
 800bfa0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bfa4:	ea59 0303 	orrs.w	r3, r9, r3
 800bfa8:	d102      	bne.n	800bfb0 <_printf_float+0x28c>
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	07d9      	lsls	r1, r3, #31
 800bfae:	d5d7      	bpl.n	800bf60 <_printf_float+0x23c>
 800bfb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	47b8      	blx	r7
 800bfba:	3001      	adds	r0, #1
 800bfbc:	f43f af0d 	beq.w	800bdda <_printf_float+0xb6>
 800bfc0:	f04f 0a00 	mov.w	sl, #0
 800bfc4:	f104 0b1a 	add.w	fp, r4, #26
 800bfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfca:	425b      	negs	r3, r3
 800bfcc:	4553      	cmp	r3, sl
 800bfce:	dc01      	bgt.n	800bfd4 <_printf_float+0x2b0>
 800bfd0:	464b      	mov	r3, r9
 800bfd2:	e793      	b.n	800befc <_printf_float+0x1d8>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	465a      	mov	r2, fp
 800bfd8:	4631      	mov	r1, r6
 800bfda:	4628      	mov	r0, r5
 800bfdc:	47b8      	blx	r7
 800bfde:	3001      	adds	r0, #1
 800bfe0:	f43f aefb 	beq.w	800bdda <_printf_float+0xb6>
 800bfe4:	f10a 0a01 	add.w	sl, sl, #1
 800bfe8:	e7ee      	b.n	800bfc8 <_printf_float+0x2a4>
 800bfea:	bf00      	nop
 800bfec:	7fefffff 	.word	0x7fefffff
 800bff0:	0800eda1 	.word	0x0800eda1
 800bff4:	0800eda5 	.word	0x0800eda5
 800bff8:	0800eda9 	.word	0x0800eda9
 800bffc:	0800edad 	.word	0x0800edad
 800c000:	0800edb1 	.word	0x0800edb1
 800c004:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c006:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c00a:	4553      	cmp	r3, sl
 800c00c:	bfa8      	it	ge
 800c00e:	4653      	movge	r3, sl
 800c010:	2b00      	cmp	r3, #0
 800c012:	4699      	mov	r9, r3
 800c014:	dc36      	bgt.n	800c084 <_printf_float+0x360>
 800c016:	f04f 0b00 	mov.w	fp, #0
 800c01a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c01e:	f104 021a 	add.w	r2, r4, #26
 800c022:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	eba3 0309 	sub.w	r3, r3, r9
 800c02a:	455b      	cmp	r3, fp
 800c02c:	dc31      	bgt.n	800c092 <_printf_float+0x36e>
 800c02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c030:	459a      	cmp	sl, r3
 800c032:	dc3a      	bgt.n	800c0aa <_printf_float+0x386>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	07da      	lsls	r2, r3, #31
 800c038:	d437      	bmi.n	800c0aa <_printf_float+0x386>
 800c03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03c:	ebaa 0903 	sub.w	r9, sl, r3
 800c040:	9b06      	ldr	r3, [sp, #24]
 800c042:	ebaa 0303 	sub.w	r3, sl, r3
 800c046:	4599      	cmp	r9, r3
 800c048:	bfa8      	it	ge
 800c04a:	4699      	movge	r9, r3
 800c04c:	f1b9 0f00 	cmp.w	r9, #0
 800c050:	dc33      	bgt.n	800c0ba <_printf_float+0x396>
 800c052:	f04f 0800 	mov.w	r8, #0
 800c056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c05a:	f104 0b1a 	add.w	fp, r4, #26
 800c05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c060:	ebaa 0303 	sub.w	r3, sl, r3
 800c064:	eba3 0309 	sub.w	r3, r3, r9
 800c068:	4543      	cmp	r3, r8
 800c06a:	f77f af79 	ble.w	800bf60 <_printf_float+0x23c>
 800c06e:	2301      	movs	r3, #1
 800c070:	465a      	mov	r2, fp
 800c072:	4631      	mov	r1, r6
 800c074:	4628      	mov	r0, r5
 800c076:	47b8      	blx	r7
 800c078:	3001      	adds	r0, #1
 800c07a:	f43f aeae 	beq.w	800bdda <_printf_float+0xb6>
 800c07e:	f108 0801 	add.w	r8, r8, #1
 800c082:	e7ec      	b.n	800c05e <_printf_float+0x33a>
 800c084:	4642      	mov	r2, r8
 800c086:	4631      	mov	r1, r6
 800c088:	4628      	mov	r0, r5
 800c08a:	47b8      	blx	r7
 800c08c:	3001      	adds	r0, #1
 800c08e:	d1c2      	bne.n	800c016 <_printf_float+0x2f2>
 800c090:	e6a3      	b.n	800bdda <_printf_float+0xb6>
 800c092:	2301      	movs	r3, #1
 800c094:	4631      	mov	r1, r6
 800c096:	4628      	mov	r0, r5
 800c098:	9206      	str	r2, [sp, #24]
 800c09a:	47b8      	blx	r7
 800c09c:	3001      	adds	r0, #1
 800c09e:	f43f ae9c 	beq.w	800bdda <_printf_float+0xb6>
 800c0a2:	9a06      	ldr	r2, [sp, #24]
 800c0a4:	f10b 0b01 	add.w	fp, fp, #1
 800c0a8:	e7bb      	b.n	800c022 <_printf_float+0x2fe>
 800c0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ae:	4631      	mov	r1, r6
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	47b8      	blx	r7
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d1c0      	bne.n	800c03a <_printf_float+0x316>
 800c0b8:	e68f      	b.n	800bdda <_printf_float+0xb6>
 800c0ba:	9a06      	ldr	r2, [sp, #24]
 800c0bc:	464b      	mov	r3, r9
 800c0be:	4442      	add	r2, r8
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b8      	blx	r7
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	d1c3      	bne.n	800c052 <_printf_float+0x32e>
 800c0ca:	e686      	b.n	800bdda <_printf_float+0xb6>
 800c0cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0d0:	f1ba 0f01 	cmp.w	sl, #1
 800c0d4:	dc01      	bgt.n	800c0da <_printf_float+0x3b6>
 800c0d6:	07db      	lsls	r3, r3, #31
 800c0d8:	d536      	bpl.n	800c148 <_printf_float+0x424>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	4642      	mov	r2, r8
 800c0de:	4631      	mov	r1, r6
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b8      	blx	r7
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	f43f ae78 	beq.w	800bdda <_printf_float+0xb6>
 800c0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	47b8      	blx	r7
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	f43f ae70 	beq.w	800bdda <_printf_float+0xb6>
 800c0fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0fe:	2200      	movs	r2, #0
 800c100:	2300      	movs	r3, #0
 800c102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c106:	f7f4 fcef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c10a:	b9c0      	cbnz	r0, 800c13e <_printf_float+0x41a>
 800c10c:	4653      	mov	r3, sl
 800c10e:	f108 0201 	add.w	r2, r8, #1
 800c112:	4631      	mov	r1, r6
 800c114:	4628      	mov	r0, r5
 800c116:	47b8      	blx	r7
 800c118:	3001      	adds	r0, #1
 800c11a:	d10c      	bne.n	800c136 <_printf_float+0x412>
 800c11c:	e65d      	b.n	800bdda <_printf_float+0xb6>
 800c11e:	2301      	movs	r3, #1
 800c120:	465a      	mov	r2, fp
 800c122:	4631      	mov	r1, r6
 800c124:	4628      	mov	r0, r5
 800c126:	47b8      	blx	r7
 800c128:	3001      	adds	r0, #1
 800c12a:	f43f ae56 	beq.w	800bdda <_printf_float+0xb6>
 800c12e:	f108 0801 	add.w	r8, r8, #1
 800c132:	45d0      	cmp	r8, sl
 800c134:	dbf3      	blt.n	800c11e <_printf_float+0x3fa>
 800c136:	464b      	mov	r3, r9
 800c138:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c13c:	e6df      	b.n	800befe <_printf_float+0x1da>
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	f104 0b1a 	add.w	fp, r4, #26
 800c146:	e7f4      	b.n	800c132 <_printf_float+0x40e>
 800c148:	2301      	movs	r3, #1
 800c14a:	4642      	mov	r2, r8
 800c14c:	e7e1      	b.n	800c112 <_printf_float+0x3ee>
 800c14e:	2301      	movs	r3, #1
 800c150:	464a      	mov	r2, r9
 800c152:	4631      	mov	r1, r6
 800c154:	4628      	mov	r0, r5
 800c156:	47b8      	blx	r7
 800c158:	3001      	adds	r0, #1
 800c15a:	f43f ae3e 	beq.w	800bdda <_printf_float+0xb6>
 800c15e:	f108 0801 	add.w	r8, r8, #1
 800c162:	68e3      	ldr	r3, [r4, #12]
 800c164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c166:	1a5b      	subs	r3, r3, r1
 800c168:	4543      	cmp	r3, r8
 800c16a:	dcf0      	bgt.n	800c14e <_printf_float+0x42a>
 800c16c:	e6fc      	b.n	800bf68 <_printf_float+0x244>
 800c16e:	f04f 0800 	mov.w	r8, #0
 800c172:	f104 0919 	add.w	r9, r4, #25
 800c176:	e7f4      	b.n	800c162 <_printf_float+0x43e>

0800c178 <_printf_common>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	4616      	mov	r6, r2
 800c17e:	4698      	mov	r8, r3
 800c180:	688a      	ldr	r2, [r1, #8]
 800c182:	690b      	ldr	r3, [r1, #16]
 800c184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c188:	4293      	cmp	r3, r2
 800c18a:	bfb8      	it	lt
 800c18c:	4613      	movlt	r3, r2
 800c18e:	6033      	str	r3, [r6, #0]
 800c190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c194:	4607      	mov	r7, r0
 800c196:	460c      	mov	r4, r1
 800c198:	b10a      	cbz	r2, 800c19e <_printf_common+0x26>
 800c19a:	3301      	adds	r3, #1
 800c19c:	6033      	str	r3, [r6, #0]
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	0699      	lsls	r1, r3, #26
 800c1a2:	bf42      	ittt	mi
 800c1a4:	6833      	ldrmi	r3, [r6, #0]
 800c1a6:	3302      	addmi	r3, #2
 800c1a8:	6033      	strmi	r3, [r6, #0]
 800c1aa:	6825      	ldr	r5, [r4, #0]
 800c1ac:	f015 0506 	ands.w	r5, r5, #6
 800c1b0:	d106      	bne.n	800c1c0 <_printf_common+0x48>
 800c1b2:	f104 0a19 	add.w	sl, r4, #25
 800c1b6:	68e3      	ldr	r3, [r4, #12]
 800c1b8:	6832      	ldr	r2, [r6, #0]
 800c1ba:	1a9b      	subs	r3, r3, r2
 800c1bc:	42ab      	cmp	r3, r5
 800c1be:	dc26      	bgt.n	800c20e <_printf_common+0x96>
 800c1c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1c4:	6822      	ldr	r2, [r4, #0]
 800c1c6:	3b00      	subs	r3, #0
 800c1c8:	bf18      	it	ne
 800c1ca:	2301      	movne	r3, #1
 800c1cc:	0692      	lsls	r2, r2, #26
 800c1ce:	d42b      	bmi.n	800c228 <_printf_common+0xb0>
 800c1d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1d4:	4641      	mov	r1, r8
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	47c8      	blx	r9
 800c1da:	3001      	adds	r0, #1
 800c1dc:	d01e      	beq.n	800c21c <_printf_common+0xa4>
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	6922      	ldr	r2, [r4, #16]
 800c1e2:	f003 0306 	and.w	r3, r3, #6
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	bf02      	ittt	eq
 800c1ea:	68e5      	ldreq	r5, [r4, #12]
 800c1ec:	6833      	ldreq	r3, [r6, #0]
 800c1ee:	1aed      	subeq	r5, r5, r3
 800c1f0:	68a3      	ldr	r3, [r4, #8]
 800c1f2:	bf0c      	ite	eq
 800c1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1f8:	2500      	movne	r5, #0
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	bfc4      	itt	gt
 800c1fe:	1a9b      	subgt	r3, r3, r2
 800c200:	18ed      	addgt	r5, r5, r3
 800c202:	2600      	movs	r6, #0
 800c204:	341a      	adds	r4, #26
 800c206:	42b5      	cmp	r5, r6
 800c208:	d11a      	bne.n	800c240 <_printf_common+0xc8>
 800c20a:	2000      	movs	r0, #0
 800c20c:	e008      	b.n	800c220 <_printf_common+0xa8>
 800c20e:	2301      	movs	r3, #1
 800c210:	4652      	mov	r2, sl
 800c212:	4641      	mov	r1, r8
 800c214:	4638      	mov	r0, r7
 800c216:	47c8      	blx	r9
 800c218:	3001      	adds	r0, #1
 800c21a:	d103      	bne.n	800c224 <_printf_common+0xac>
 800c21c:	f04f 30ff 	mov.w	r0, #4294967295
 800c220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c224:	3501      	adds	r5, #1
 800c226:	e7c6      	b.n	800c1b6 <_printf_common+0x3e>
 800c228:	18e1      	adds	r1, r4, r3
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	2030      	movs	r0, #48	@ 0x30
 800c22e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c232:	4422      	add	r2, r4
 800c234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c23c:	3302      	adds	r3, #2
 800c23e:	e7c7      	b.n	800c1d0 <_printf_common+0x58>
 800c240:	2301      	movs	r3, #1
 800c242:	4622      	mov	r2, r4
 800c244:	4641      	mov	r1, r8
 800c246:	4638      	mov	r0, r7
 800c248:	47c8      	blx	r9
 800c24a:	3001      	adds	r0, #1
 800c24c:	d0e6      	beq.n	800c21c <_printf_common+0xa4>
 800c24e:	3601      	adds	r6, #1
 800c250:	e7d9      	b.n	800c206 <_printf_common+0x8e>
	...

0800c254 <_printf_i>:
 800c254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c258:	7e0f      	ldrb	r7, [r1, #24]
 800c25a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c25c:	2f78      	cmp	r7, #120	@ 0x78
 800c25e:	4691      	mov	r9, r2
 800c260:	4680      	mov	r8, r0
 800c262:	460c      	mov	r4, r1
 800c264:	469a      	mov	sl, r3
 800c266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c26a:	d807      	bhi.n	800c27c <_printf_i+0x28>
 800c26c:	2f62      	cmp	r7, #98	@ 0x62
 800c26e:	d80a      	bhi.n	800c286 <_printf_i+0x32>
 800c270:	2f00      	cmp	r7, #0
 800c272:	f000 80d2 	beq.w	800c41a <_printf_i+0x1c6>
 800c276:	2f58      	cmp	r7, #88	@ 0x58
 800c278:	f000 80b9 	beq.w	800c3ee <_printf_i+0x19a>
 800c27c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c284:	e03a      	b.n	800c2fc <_printf_i+0xa8>
 800c286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c28a:	2b15      	cmp	r3, #21
 800c28c:	d8f6      	bhi.n	800c27c <_printf_i+0x28>
 800c28e:	a101      	add	r1, pc, #4	@ (adr r1, 800c294 <_printf_i+0x40>)
 800c290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c294:	0800c2ed 	.word	0x0800c2ed
 800c298:	0800c301 	.word	0x0800c301
 800c29c:	0800c27d 	.word	0x0800c27d
 800c2a0:	0800c27d 	.word	0x0800c27d
 800c2a4:	0800c27d 	.word	0x0800c27d
 800c2a8:	0800c27d 	.word	0x0800c27d
 800c2ac:	0800c301 	.word	0x0800c301
 800c2b0:	0800c27d 	.word	0x0800c27d
 800c2b4:	0800c27d 	.word	0x0800c27d
 800c2b8:	0800c27d 	.word	0x0800c27d
 800c2bc:	0800c27d 	.word	0x0800c27d
 800c2c0:	0800c401 	.word	0x0800c401
 800c2c4:	0800c32b 	.word	0x0800c32b
 800c2c8:	0800c3bb 	.word	0x0800c3bb
 800c2cc:	0800c27d 	.word	0x0800c27d
 800c2d0:	0800c27d 	.word	0x0800c27d
 800c2d4:	0800c423 	.word	0x0800c423
 800c2d8:	0800c27d 	.word	0x0800c27d
 800c2dc:	0800c32b 	.word	0x0800c32b
 800c2e0:	0800c27d 	.word	0x0800c27d
 800c2e4:	0800c27d 	.word	0x0800c27d
 800c2e8:	0800c3c3 	.word	0x0800c3c3
 800c2ec:	6833      	ldr	r3, [r6, #0]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6032      	str	r2, [r6, #0]
 800c2f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e09d      	b.n	800c43c <_printf_i+0x1e8>
 800c300:	6833      	ldr	r3, [r6, #0]
 800c302:	6820      	ldr	r0, [r4, #0]
 800c304:	1d19      	adds	r1, r3, #4
 800c306:	6031      	str	r1, [r6, #0]
 800c308:	0606      	lsls	r6, r0, #24
 800c30a:	d501      	bpl.n	800c310 <_printf_i+0xbc>
 800c30c:	681d      	ldr	r5, [r3, #0]
 800c30e:	e003      	b.n	800c318 <_printf_i+0xc4>
 800c310:	0645      	lsls	r5, r0, #25
 800c312:	d5fb      	bpl.n	800c30c <_printf_i+0xb8>
 800c314:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c318:	2d00      	cmp	r5, #0
 800c31a:	da03      	bge.n	800c324 <_printf_i+0xd0>
 800c31c:	232d      	movs	r3, #45	@ 0x2d
 800c31e:	426d      	negs	r5, r5
 800c320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c324:	4859      	ldr	r0, [pc, #356]	@ (800c48c <_printf_i+0x238>)
 800c326:	230a      	movs	r3, #10
 800c328:	e011      	b.n	800c34e <_printf_i+0xfa>
 800c32a:	6821      	ldr	r1, [r4, #0]
 800c32c:	6833      	ldr	r3, [r6, #0]
 800c32e:	0608      	lsls	r0, r1, #24
 800c330:	f853 5b04 	ldr.w	r5, [r3], #4
 800c334:	d402      	bmi.n	800c33c <_printf_i+0xe8>
 800c336:	0649      	lsls	r1, r1, #25
 800c338:	bf48      	it	mi
 800c33a:	b2ad      	uxthmi	r5, r5
 800c33c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c33e:	4853      	ldr	r0, [pc, #332]	@ (800c48c <_printf_i+0x238>)
 800c340:	6033      	str	r3, [r6, #0]
 800c342:	bf14      	ite	ne
 800c344:	230a      	movne	r3, #10
 800c346:	2308      	moveq	r3, #8
 800c348:	2100      	movs	r1, #0
 800c34a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c34e:	6866      	ldr	r6, [r4, #4]
 800c350:	60a6      	str	r6, [r4, #8]
 800c352:	2e00      	cmp	r6, #0
 800c354:	bfa2      	ittt	ge
 800c356:	6821      	ldrge	r1, [r4, #0]
 800c358:	f021 0104 	bicge.w	r1, r1, #4
 800c35c:	6021      	strge	r1, [r4, #0]
 800c35e:	b90d      	cbnz	r5, 800c364 <_printf_i+0x110>
 800c360:	2e00      	cmp	r6, #0
 800c362:	d04b      	beq.n	800c3fc <_printf_i+0x1a8>
 800c364:	4616      	mov	r6, r2
 800c366:	fbb5 f1f3 	udiv	r1, r5, r3
 800c36a:	fb03 5711 	mls	r7, r3, r1, r5
 800c36e:	5dc7      	ldrb	r7, [r0, r7]
 800c370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c374:	462f      	mov	r7, r5
 800c376:	42bb      	cmp	r3, r7
 800c378:	460d      	mov	r5, r1
 800c37a:	d9f4      	bls.n	800c366 <_printf_i+0x112>
 800c37c:	2b08      	cmp	r3, #8
 800c37e:	d10b      	bne.n	800c398 <_printf_i+0x144>
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	07df      	lsls	r7, r3, #31
 800c384:	d508      	bpl.n	800c398 <_printf_i+0x144>
 800c386:	6923      	ldr	r3, [r4, #16]
 800c388:	6861      	ldr	r1, [r4, #4]
 800c38a:	4299      	cmp	r1, r3
 800c38c:	bfde      	ittt	le
 800c38e:	2330      	movle	r3, #48	@ 0x30
 800c390:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c394:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c398:	1b92      	subs	r2, r2, r6
 800c39a:	6122      	str	r2, [r4, #16]
 800c39c:	f8cd a000 	str.w	sl, [sp]
 800c3a0:	464b      	mov	r3, r9
 800c3a2:	aa03      	add	r2, sp, #12
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	f7ff fee6 	bl	800c178 <_printf_common>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d14a      	bne.n	800c446 <_printf_i+0x1f2>
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	b004      	add	sp, #16
 800c3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	f043 0320 	orr.w	r3, r3, #32
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	4833      	ldr	r0, [pc, #204]	@ (800c490 <_printf_i+0x23c>)
 800c3c4:	2778      	movs	r7, #120	@ 0x78
 800c3c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	6831      	ldr	r1, [r6, #0]
 800c3ce:	061f      	lsls	r7, r3, #24
 800c3d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3d4:	d402      	bmi.n	800c3dc <_printf_i+0x188>
 800c3d6:	065f      	lsls	r7, r3, #25
 800c3d8:	bf48      	it	mi
 800c3da:	b2ad      	uxthmi	r5, r5
 800c3dc:	6031      	str	r1, [r6, #0]
 800c3de:	07d9      	lsls	r1, r3, #31
 800c3e0:	bf44      	itt	mi
 800c3e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c3e6:	6023      	strmi	r3, [r4, #0]
 800c3e8:	b11d      	cbz	r5, 800c3f2 <_printf_i+0x19e>
 800c3ea:	2310      	movs	r3, #16
 800c3ec:	e7ac      	b.n	800c348 <_printf_i+0xf4>
 800c3ee:	4827      	ldr	r0, [pc, #156]	@ (800c48c <_printf_i+0x238>)
 800c3f0:	e7e9      	b.n	800c3c6 <_printf_i+0x172>
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	f023 0320 	bic.w	r3, r3, #32
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	e7f6      	b.n	800c3ea <_printf_i+0x196>
 800c3fc:	4616      	mov	r6, r2
 800c3fe:	e7bd      	b.n	800c37c <_printf_i+0x128>
 800c400:	6833      	ldr	r3, [r6, #0]
 800c402:	6825      	ldr	r5, [r4, #0]
 800c404:	6961      	ldr	r1, [r4, #20]
 800c406:	1d18      	adds	r0, r3, #4
 800c408:	6030      	str	r0, [r6, #0]
 800c40a:	062e      	lsls	r6, r5, #24
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	d501      	bpl.n	800c414 <_printf_i+0x1c0>
 800c410:	6019      	str	r1, [r3, #0]
 800c412:	e002      	b.n	800c41a <_printf_i+0x1c6>
 800c414:	0668      	lsls	r0, r5, #25
 800c416:	d5fb      	bpl.n	800c410 <_printf_i+0x1bc>
 800c418:	8019      	strh	r1, [r3, #0]
 800c41a:	2300      	movs	r3, #0
 800c41c:	6123      	str	r3, [r4, #16]
 800c41e:	4616      	mov	r6, r2
 800c420:	e7bc      	b.n	800c39c <_printf_i+0x148>
 800c422:	6833      	ldr	r3, [r6, #0]
 800c424:	1d1a      	adds	r2, r3, #4
 800c426:	6032      	str	r2, [r6, #0]
 800c428:	681e      	ldr	r6, [r3, #0]
 800c42a:	6862      	ldr	r2, [r4, #4]
 800c42c:	2100      	movs	r1, #0
 800c42e:	4630      	mov	r0, r6
 800c430:	f7f3 fede 	bl	80001f0 <memchr>
 800c434:	b108      	cbz	r0, 800c43a <_printf_i+0x1e6>
 800c436:	1b80      	subs	r0, r0, r6
 800c438:	6060      	str	r0, [r4, #4]
 800c43a:	6863      	ldr	r3, [r4, #4]
 800c43c:	6123      	str	r3, [r4, #16]
 800c43e:	2300      	movs	r3, #0
 800c440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c444:	e7aa      	b.n	800c39c <_printf_i+0x148>
 800c446:	6923      	ldr	r3, [r4, #16]
 800c448:	4632      	mov	r2, r6
 800c44a:	4649      	mov	r1, r9
 800c44c:	4640      	mov	r0, r8
 800c44e:	47d0      	blx	sl
 800c450:	3001      	adds	r0, #1
 800c452:	d0ad      	beq.n	800c3b0 <_printf_i+0x15c>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	079b      	lsls	r3, r3, #30
 800c458:	d413      	bmi.n	800c482 <_printf_i+0x22e>
 800c45a:	68e0      	ldr	r0, [r4, #12]
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	4298      	cmp	r0, r3
 800c460:	bfb8      	it	lt
 800c462:	4618      	movlt	r0, r3
 800c464:	e7a6      	b.n	800c3b4 <_printf_i+0x160>
 800c466:	2301      	movs	r3, #1
 800c468:	4632      	mov	r2, r6
 800c46a:	4649      	mov	r1, r9
 800c46c:	4640      	mov	r0, r8
 800c46e:	47d0      	blx	sl
 800c470:	3001      	adds	r0, #1
 800c472:	d09d      	beq.n	800c3b0 <_printf_i+0x15c>
 800c474:	3501      	adds	r5, #1
 800c476:	68e3      	ldr	r3, [r4, #12]
 800c478:	9903      	ldr	r1, [sp, #12]
 800c47a:	1a5b      	subs	r3, r3, r1
 800c47c:	42ab      	cmp	r3, r5
 800c47e:	dcf2      	bgt.n	800c466 <_printf_i+0x212>
 800c480:	e7eb      	b.n	800c45a <_printf_i+0x206>
 800c482:	2500      	movs	r5, #0
 800c484:	f104 0619 	add.w	r6, r4, #25
 800c488:	e7f5      	b.n	800c476 <_printf_i+0x222>
 800c48a:	bf00      	nop
 800c48c:	0800edb3 	.word	0x0800edb3
 800c490:	0800edc4 	.word	0x0800edc4

0800c494 <std>:
 800c494:	2300      	movs	r3, #0
 800c496:	b510      	push	{r4, lr}
 800c498:	4604      	mov	r4, r0
 800c49a:	e9c0 3300 	strd	r3, r3, [r0]
 800c49e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4a2:	6083      	str	r3, [r0, #8]
 800c4a4:	8181      	strh	r1, [r0, #12]
 800c4a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4a8:	81c2      	strh	r2, [r0, #14]
 800c4aa:	6183      	str	r3, [r0, #24]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	2208      	movs	r2, #8
 800c4b0:	305c      	adds	r0, #92	@ 0x5c
 800c4b2:	f000 f914 	bl	800c6de <memset>
 800c4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c4ec <std+0x58>)
 800c4b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <std+0x5c>)
 800c4bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c4be:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f4 <std+0x60>)
 800c4c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f8 <std+0x64>)
 800c4c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c4fc <std+0x68>)
 800c4c8:	6224      	str	r4, [r4, #32]
 800c4ca:	429c      	cmp	r4, r3
 800c4cc:	d006      	beq.n	800c4dc <std+0x48>
 800c4ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4d2:	4294      	cmp	r4, r2
 800c4d4:	d002      	beq.n	800c4dc <std+0x48>
 800c4d6:	33d0      	adds	r3, #208	@ 0xd0
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	d105      	bne.n	800c4e8 <std+0x54>
 800c4dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e4:	f000 ba3a 	b.w	800c95c <__retarget_lock_init_recursive>
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	bf00      	nop
 800c4ec:	0800c659 	.word	0x0800c659
 800c4f0:	0800c67b 	.word	0x0800c67b
 800c4f4:	0800c6b3 	.word	0x0800c6b3
 800c4f8:	0800c6d7 	.word	0x0800c6d7
 800c4fc:	2000337c 	.word	0x2000337c

0800c500 <stdio_exit_handler>:
 800c500:	4a02      	ldr	r2, [pc, #8]	@ (800c50c <stdio_exit_handler+0xc>)
 800c502:	4903      	ldr	r1, [pc, #12]	@ (800c510 <stdio_exit_handler+0x10>)
 800c504:	4803      	ldr	r0, [pc, #12]	@ (800c514 <stdio_exit_handler+0x14>)
 800c506:	f000 b869 	b.w	800c5dc <_fwalk_sglue>
 800c50a:	bf00      	nop
 800c50c:	20000134 	.word	0x20000134
 800c510:	0800e1a9 	.word	0x0800e1a9
 800c514:	20000144 	.word	0x20000144

0800c518 <cleanup_stdio>:
 800c518:	6841      	ldr	r1, [r0, #4]
 800c51a:	4b0c      	ldr	r3, [pc, #48]	@ (800c54c <cleanup_stdio+0x34>)
 800c51c:	4299      	cmp	r1, r3
 800c51e:	b510      	push	{r4, lr}
 800c520:	4604      	mov	r4, r0
 800c522:	d001      	beq.n	800c528 <cleanup_stdio+0x10>
 800c524:	f001 fe40 	bl	800e1a8 <_fflush_r>
 800c528:	68a1      	ldr	r1, [r4, #8]
 800c52a:	4b09      	ldr	r3, [pc, #36]	@ (800c550 <cleanup_stdio+0x38>)
 800c52c:	4299      	cmp	r1, r3
 800c52e:	d002      	beq.n	800c536 <cleanup_stdio+0x1e>
 800c530:	4620      	mov	r0, r4
 800c532:	f001 fe39 	bl	800e1a8 <_fflush_r>
 800c536:	68e1      	ldr	r1, [r4, #12]
 800c538:	4b06      	ldr	r3, [pc, #24]	@ (800c554 <cleanup_stdio+0x3c>)
 800c53a:	4299      	cmp	r1, r3
 800c53c:	d004      	beq.n	800c548 <cleanup_stdio+0x30>
 800c53e:	4620      	mov	r0, r4
 800c540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c544:	f001 be30 	b.w	800e1a8 <_fflush_r>
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	bf00      	nop
 800c54c:	2000337c 	.word	0x2000337c
 800c550:	200033e4 	.word	0x200033e4
 800c554:	2000344c 	.word	0x2000344c

0800c558 <global_stdio_init.part.0>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	4b0b      	ldr	r3, [pc, #44]	@ (800c588 <global_stdio_init.part.0+0x30>)
 800c55c:	4c0b      	ldr	r4, [pc, #44]	@ (800c58c <global_stdio_init.part.0+0x34>)
 800c55e:	4a0c      	ldr	r2, [pc, #48]	@ (800c590 <global_stdio_init.part.0+0x38>)
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	4620      	mov	r0, r4
 800c564:	2200      	movs	r2, #0
 800c566:	2104      	movs	r1, #4
 800c568:	f7ff ff94 	bl	800c494 <std>
 800c56c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c570:	2201      	movs	r2, #1
 800c572:	2109      	movs	r1, #9
 800c574:	f7ff ff8e 	bl	800c494 <std>
 800c578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c57c:	2202      	movs	r2, #2
 800c57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c582:	2112      	movs	r1, #18
 800c584:	f7ff bf86 	b.w	800c494 <std>
 800c588:	200034b4 	.word	0x200034b4
 800c58c:	2000337c 	.word	0x2000337c
 800c590:	0800c501 	.word	0x0800c501

0800c594 <__sfp_lock_acquire>:
 800c594:	4801      	ldr	r0, [pc, #4]	@ (800c59c <__sfp_lock_acquire+0x8>)
 800c596:	f000 b9e2 	b.w	800c95e <__retarget_lock_acquire_recursive>
 800c59a:	bf00      	nop
 800c59c:	200034bd 	.word	0x200034bd

0800c5a0 <__sfp_lock_release>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	@ (800c5a8 <__sfp_lock_release+0x8>)
 800c5a2:	f000 b9dd 	b.w	800c960 <__retarget_lock_release_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	200034bd 	.word	0x200034bd

0800c5ac <__sinit>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	f7ff fff0 	bl	800c594 <__sfp_lock_acquire>
 800c5b4:	6a23      	ldr	r3, [r4, #32]
 800c5b6:	b11b      	cbz	r3, 800c5c0 <__sinit+0x14>
 800c5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5bc:	f7ff bff0 	b.w	800c5a0 <__sfp_lock_release>
 800c5c0:	4b04      	ldr	r3, [pc, #16]	@ (800c5d4 <__sinit+0x28>)
 800c5c2:	6223      	str	r3, [r4, #32]
 800c5c4:	4b04      	ldr	r3, [pc, #16]	@ (800c5d8 <__sinit+0x2c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1f5      	bne.n	800c5b8 <__sinit+0xc>
 800c5cc:	f7ff ffc4 	bl	800c558 <global_stdio_init.part.0>
 800c5d0:	e7f2      	b.n	800c5b8 <__sinit+0xc>
 800c5d2:	bf00      	nop
 800c5d4:	0800c519 	.word	0x0800c519
 800c5d8:	200034b4 	.word	0x200034b4

0800c5dc <_fwalk_sglue>:
 800c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	4688      	mov	r8, r1
 800c5e4:	4614      	mov	r4, r2
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c5f0:	d505      	bpl.n	800c5fe <_fwalk_sglue+0x22>
 800c5f2:	6824      	ldr	r4, [r4, #0]
 800c5f4:	2c00      	cmp	r4, #0
 800c5f6:	d1f7      	bne.n	800c5e8 <_fwalk_sglue+0xc>
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d907      	bls.n	800c614 <_fwalk_sglue+0x38>
 800c604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c608:	3301      	adds	r3, #1
 800c60a:	d003      	beq.n	800c614 <_fwalk_sglue+0x38>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4638      	mov	r0, r7
 800c610:	47c0      	blx	r8
 800c612:	4306      	orrs	r6, r0
 800c614:	3568      	adds	r5, #104	@ 0x68
 800c616:	e7e9      	b.n	800c5ec <_fwalk_sglue+0x10>

0800c618 <siprintf>:
 800c618:	b40e      	push	{r1, r2, r3}
 800c61a:	b500      	push	{lr}
 800c61c:	b09c      	sub	sp, #112	@ 0x70
 800c61e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c620:	9002      	str	r0, [sp, #8]
 800c622:	9006      	str	r0, [sp, #24]
 800c624:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c628:	4809      	ldr	r0, [pc, #36]	@ (800c650 <siprintf+0x38>)
 800c62a:	9107      	str	r1, [sp, #28]
 800c62c:	9104      	str	r1, [sp, #16]
 800c62e:	4909      	ldr	r1, [pc, #36]	@ (800c654 <siprintf+0x3c>)
 800c630:	f853 2b04 	ldr.w	r2, [r3], #4
 800c634:	9105      	str	r1, [sp, #20]
 800c636:	6800      	ldr	r0, [r0, #0]
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	a902      	add	r1, sp, #8
 800c63c:	f001 fc34 	bl	800dea8 <_svfiprintf_r>
 800c640:	9b02      	ldr	r3, [sp, #8]
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	b01c      	add	sp, #112	@ 0x70
 800c648:	f85d eb04 	ldr.w	lr, [sp], #4
 800c64c:	b003      	add	sp, #12
 800c64e:	4770      	bx	lr
 800c650:	20000140 	.word	0x20000140
 800c654:	ffff0208 	.word	0xffff0208

0800c658 <__sread>:
 800c658:	b510      	push	{r4, lr}
 800c65a:	460c      	mov	r4, r1
 800c65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c660:	f000 f91e 	bl	800c8a0 <_read_r>
 800c664:	2800      	cmp	r0, #0
 800c666:	bfab      	itete	ge
 800c668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c66a:	89a3      	ldrhlt	r3, [r4, #12]
 800c66c:	181b      	addge	r3, r3, r0
 800c66e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c672:	bfac      	ite	ge
 800c674:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c676:	81a3      	strhlt	r3, [r4, #12]
 800c678:	bd10      	pop	{r4, pc}

0800c67a <__swrite>:
 800c67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c67e:	461f      	mov	r7, r3
 800c680:	898b      	ldrh	r3, [r1, #12]
 800c682:	05db      	lsls	r3, r3, #23
 800c684:	4605      	mov	r5, r0
 800c686:	460c      	mov	r4, r1
 800c688:	4616      	mov	r6, r2
 800c68a:	d505      	bpl.n	800c698 <__swrite+0x1e>
 800c68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c690:	2302      	movs	r3, #2
 800c692:	2200      	movs	r2, #0
 800c694:	f000 f8f2 	bl	800c87c <_lseek_r>
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c69e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	4632      	mov	r2, r6
 800c6a6:	463b      	mov	r3, r7
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ae:	f000 b919 	b.w	800c8e4 <_write_r>

0800c6b2 <__sseek>:
 800c6b2:	b510      	push	{r4, lr}
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ba:	f000 f8df 	bl	800c87c <_lseek_r>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	bf15      	itete	ne
 800c6c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6ce:	81a3      	strheq	r3, [r4, #12]
 800c6d0:	bf18      	it	ne
 800c6d2:	81a3      	strhne	r3, [r4, #12]
 800c6d4:	bd10      	pop	{r4, pc}

0800c6d6 <__sclose>:
 800c6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6da:	f000 b869 	b.w	800c7b0 <_close_r>

0800c6de <memset>:
 800c6de:	4402      	add	r2, r0
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d100      	bne.n	800c6e8 <memset+0xa>
 800c6e6:	4770      	bx	lr
 800c6e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ec:	e7f9      	b.n	800c6e2 <memset+0x4>
	...

0800c6f0 <strtok>:
 800c6f0:	4b16      	ldr	r3, [pc, #88]	@ (800c74c <strtok+0x5c>)
 800c6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	681f      	ldr	r7, [r3, #0]
 800c6f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c6fa:	4605      	mov	r5, r0
 800c6fc:	460e      	mov	r6, r1
 800c6fe:	b9ec      	cbnz	r4, 800c73c <strtok+0x4c>
 800c700:	2050      	movs	r0, #80	@ 0x50
 800c702:	f7ff f935 	bl	800b970 <malloc>
 800c706:	4602      	mov	r2, r0
 800c708:	6478      	str	r0, [r7, #68]	@ 0x44
 800c70a:	b920      	cbnz	r0, 800c716 <strtok+0x26>
 800c70c:	4b10      	ldr	r3, [pc, #64]	@ (800c750 <strtok+0x60>)
 800c70e:	4811      	ldr	r0, [pc, #68]	@ (800c754 <strtok+0x64>)
 800c710:	215b      	movs	r1, #91	@ 0x5b
 800c712:	f000 f935 	bl	800c980 <__assert_func>
 800c716:	e9c0 4400 	strd	r4, r4, [r0]
 800c71a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c71e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c722:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c726:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c72a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c72e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c732:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c736:	6184      	str	r4, [r0, #24]
 800c738:	7704      	strb	r4, [r0, #28]
 800c73a:	6244      	str	r4, [r0, #36]	@ 0x24
 800c73c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c73e:	4631      	mov	r1, r6
 800c740:	4628      	mov	r0, r5
 800c742:	2301      	movs	r3, #1
 800c744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c748:	f000 b806 	b.w	800c758 <__strtok_r>
 800c74c:	20000140 	.word	0x20000140
 800c750:	0800edd5 	.word	0x0800edd5
 800c754:	0800edec 	.word	0x0800edec

0800c758 <__strtok_r>:
 800c758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c75a:	4604      	mov	r4, r0
 800c75c:	b908      	cbnz	r0, 800c762 <__strtok_r+0xa>
 800c75e:	6814      	ldr	r4, [r2, #0]
 800c760:	b144      	cbz	r4, 800c774 <__strtok_r+0x1c>
 800c762:	4620      	mov	r0, r4
 800c764:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c768:	460f      	mov	r7, r1
 800c76a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c76e:	b91e      	cbnz	r6, 800c778 <__strtok_r+0x20>
 800c770:	b965      	cbnz	r5, 800c78c <__strtok_r+0x34>
 800c772:	6015      	str	r5, [r2, #0]
 800c774:	2000      	movs	r0, #0
 800c776:	e005      	b.n	800c784 <__strtok_r+0x2c>
 800c778:	42b5      	cmp	r5, r6
 800c77a:	d1f6      	bne.n	800c76a <__strtok_r+0x12>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f0      	bne.n	800c762 <__strtok_r+0xa>
 800c780:	6014      	str	r4, [r2, #0]
 800c782:	7003      	strb	r3, [r0, #0]
 800c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c786:	461c      	mov	r4, r3
 800c788:	e00c      	b.n	800c7a4 <__strtok_r+0x4c>
 800c78a:	b915      	cbnz	r5, 800c792 <__strtok_r+0x3a>
 800c78c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c790:	460e      	mov	r6, r1
 800c792:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c796:	42ab      	cmp	r3, r5
 800c798:	d1f7      	bne.n	800c78a <__strtok_r+0x32>
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d0f3      	beq.n	800c786 <__strtok_r+0x2e>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c7a4:	6014      	str	r4, [r2, #0]
 800c7a6:	e7ed      	b.n	800c784 <__strtok_r+0x2c>

0800c7a8 <_localeconv_r>:
 800c7a8:	4800      	ldr	r0, [pc, #0]	@ (800c7ac <_localeconv_r+0x4>)
 800c7aa:	4770      	bx	lr
 800c7ac:	20000280 	.word	0x20000280

0800c7b0 <_close_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4d06      	ldr	r5, [pc, #24]	@ (800c7cc <_close_r+0x1c>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	602b      	str	r3, [r5, #0]
 800c7bc:	f7f5 fb26 	bl	8001e0c <_close>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_close_r+0x1a>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_close_r+0x1a>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	200034b8 	.word	0x200034b8

0800c7d0 <_reclaim_reent>:
 800c7d0:	4b29      	ldr	r3, [pc, #164]	@ (800c878 <_reclaim_reent+0xa8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4283      	cmp	r3, r0
 800c7d6:	b570      	push	{r4, r5, r6, lr}
 800c7d8:	4604      	mov	r4, r0
 800c7da:	d04b      	beq.n	800c874 <_reclaim_reent+0xa4>
 800c7dc:	69c3      	ldr	r3, [r0, #28]
 800c7de:	b1ab      	cbz	r3, 800c80c <_reclaim_reent+0x3c>
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	b16b      	cbz	r3, 800c800 <_reclaim_reent+0x30>
 800c7e4:	2500      	movs	r5, #0
 800c7e6:	69e3      	ldr	r3, [r4, #28]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	5959      	ldr	r1, [r3, r5]
 800c7ec:	2900      	cmp	r1, #0
 800c7ee:	d13b      	bne.n	800c868 <_reclaim_reent+0x98>
 800c7f0:	3504      	adds	r5, #4
 800c7f2:	2d80      	cmp	r5, #128	@ 0x80
 800c7f4:	d1f7      	bne.n	800c7e6 <_reclaim_reent+0x16>
 800c7f6:	69e3      	ldr	r3, [r4, #28]
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	68d9      	ldr	r1, [r3, #12]
 800c7fc:	f000 ff2c 	bl	800d658 <_free_r>
 800c800:	69e3      	ldr	r3, [r4, #28]
 800c802:	6819      	ldr	r1, [r3, #0]
 800c804:	b111      	cbz	r1, 800c80c <_reclaim_reent+0x3c>
 800c806:	4620      	mov	r0, r4
 800c808:	f000 ff26 	bl	800d658 <_free_r>
 800c80c:	6961      	ldr	r1, [r4, #20]
 800c80e:	b111      	cbz	r1, 800c816 <_reclaim_reent+0x46>
 800c810:	4620      	mov	r0, r4
 800c812:	f000 ff21 	bl	800d658 <_free_r>
 800c816:	69e1      	ldr	r1, [r4, #28]
 800c818:	b111      	cbz	r1, 800c820 <_reclaim_reent+0x50>
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 ff1c 	bl	800d658 <_free_r>
 800c820:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c822:	b111      	cbz	r1, 800c82a <_reclaim_reent+0x5a>
 800c824:	4620      	mov	r0, r4
 800c826:	f000 ff17 	bl	800d658 <_free_r>
 800c82a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c82c:	b111      	cbz	r1, 800c834 <_reclaim_reent+0x64>
 800c82e:	4620      	mov	r0, r4
 800c830:	f000 ff12 	bl	800d658 <_free_r>
 800c834:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c836:	b111      	cbz	r1, 800c83e <_reclaim_reent+0x6e>
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 ff0d 	bl	800d658 <_free_r>
 800c83e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c840:	b111      	cbz	r1, 800c848 <_reclaim_reent+0x78>
 800c842:	4620      	mov	r0, r4
 800c844:	f000 ff08 	bl	800d658 <_free_r>
 800c848:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c84a:	b111      	cbz	r1, 800c852 <_reclaim_reent+0x82>
 800c84c:	4620      	mov	r0, r4
 800c84e:	f000 ff03 	bl	800d658 <_free_r>
 800c852:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c854:	b111      	cbz	r1, 800c85c <_reclaim_reent+0x8c>
 800c856:	4620      	mov	r0, r4
 800c858:	f000 fefe 	bl	800d658 <_free_r>
 800c85c:	6a23      	ldr	r3, [r4, #32]
 800c85e:	b14b      	cbz	r3, 800c874 <_reclaim_reent+0xa4>
 800c860:	4620      	mov	r0, r4
 800c862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c866:	4718      	bx	r3
 800c868:	680e      	ldr	r6, [r1, #0]
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fef4 	bl	800d658 <_free_r>
 800c870:	4631      	mov	r1, r6
 800c872:	e7bb      	b.n	800c7ec <_reclaim_reent+0x1c>
 800c874:	bd70      	pop	{r4, r5, r6, pc}
 800c876:	bf00      	nop
 800c878:	20000140 	.word	0x20000140

0800c87c <_lseek_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d07      	ldr	r5, [pc, #28]	@ (800c89c <_lseek_r+0x20>)
 800c880:	4604      	mov	r4, r0
 800c882:	4608      	mov	r0, r1
 800c884:	4611      	mov	r1, r2
 800c886:	2200      	movs	r2, #0
 800c888:	602a      	str	r2, [r5, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	f7f5 fae5 	bl	8001e5a <_lseek>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_lseek_r+0x1e>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_lseek_r+0x1e>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	200034b8 	.word	0x200034b8

0800c8a0 <_read_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	@ (800c8c0 <_read_r+0x20>)
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	602a      	str	r2, [r5, #0]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f7f5 fa73 	bl	8001d9a <_read>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_read_r+0x1e>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_read_r+0x1e>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	200034b8 	.word	0x200034b8

0800c8c4 <_sbrk_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d06      	ldr	r5, [pc, #24]	@ (800c8e0 <_sbrk_r+0x1c>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7f5 fad0 	bl	8001e74 <_sbrk>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_sbrk_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_sbrk_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	200034b8 	.word	0x200034b8

0800c8e4 <_write_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d07      	ldr	r5, [pc, #28]	@ (800c904 <_write_r+0x20>)
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	602a      	str	r2, [r5, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f7f5 fa6e 	bl	8001dd4 <_write>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d102      	bne.n	800c902 <_write_r+0x1e>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	b103      	cbz	r3, 800c902 <_write_r+0x1e>
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	200034b8 	.word	0x200034b8

0800c908 <__errno>:
 800c908:	4b01      	ldr	r3, [pc, #4]	@ (800c910 <__errno+0x8>)
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	20000140 	.word	0x20000140

0800c914 <__libc_init_array>:
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	4d0d      	ldr	r5, [pc, #52]	@ (800c94c <__libc_init_array+0x38>)
 800c918:	4c0d      	ldr	r4, [pc, #52]	@ (800c950 <__libc_init_array+0x3c>)
 800c91a:	1b64      	subs	r4, r4, r5
 800c91c:	10a4      	asrs	r4, r4, #2
 800c91e:	2600      	movs	r6, #0
 800c920:	42a6      	cmp	r6, r4
 800c922:	d109      	bne.n	800c938 <__libc_init_array+0x24>
 800c924:	4d0b      	ldr	r5, [pc, #44]	@ (800c954 <__libc_init_array+0x40>)
 800c926:	4c0c      	ldr	r4, [pc, #48]	@ (800c958 <__libc_init_array+0x44>)
 800c928:	f001 ff8c 	bl	800e844 <_init>
 800c92c:	1b64      	subs	r4, r4, r5
 800c92e:	10a4      	asrs	r4, r4, #2
 800c930:	2600      	movs	r6, #0
 800c932:	42a6      	cmp	r6, r4
 800c934:	d105      	bne.n	800c942 <__libc_init_array+0x2e>
 800c936:	bd70      	pop	{r4, r5, r6, pc}
 800c938:	f855 3b04 	ldr.w	r3, [r5], #4
 800c93c:	4798      	blx	r3
 800c93e:	3601      	adds	r6, #1
 800c940:	e7ee      	b.n	800c920 <__libc_init_array+0xc>
 800c942:	f855 3b04 	ldr.w	r3, [r5], #4
 800c946:	4798      	blx	r3
 800c948:	3601      	adds	r6, #1
 800c94a:	e7f2      	b.n	800c932 <__libc_init_array+0x1e>
 800c94c:	0800f074 	.word	0x0800f074
 800c950:	0800f074 	.word	0x0800f074
 800c954:	0800f074 	.word	0x0800f074
 800c958:	0800f078 	.word	0x0800f078

0800c95c <__retarget_lock_init_recursive>:
 800c95c:	4770      	bx	lr

0800c95e <__retarget_lock_acquire_recursive>:
 800c95e:	4770      	bx	lr

0800c960 <__retarget_lock_release_recursive>:
 800c960:	4770      	bx	lr

0800c962 <memcpy>:
 800c962:	440a      	add	r2, r1
 800c964:	4291      	cmp	r1, r2
 800c966:	f100 33ff 	add.w	r3, r0, #4294967295
 800c96a:	d100      	bne.n	800c96e <memcpy+0xc>
 800c96c:	4770      	bx	lr
 800c96e:	b510      	push	{r4, lr}
 800c970:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c974:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c978:	4291      	cmp	r1, r2
 800c97a:	d1f9      	bne.n	800c970 <memcpy+0xe>
 800c97c:	bd10      	pop	{r4, pc}
	...

0800c980 <__assert_func>:
 800c980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c982:	4614      	mov	r4, r2
 800c984:	461a      	mov	r2, r3
 800c986:	4b09      	ldr	r3, [pc, #36]	@ (800c9ac <__assert_func+0x2c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4605      	mov	r5, r0
 800c98c:	68d8      	ldr	r0, [r3, #12]
 800c98e:	b954      	cbnz	r4, 800c9a6 <__assert_func+0x26>
 800c990:	4b07      	ldr	r3, [pc, #28]	@ (800c9b0 <__assert_func+0x30>)
 800c992:	461c      	mov	r4, r3
 800c994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c998:	9100      	str	r1, [sp, #0]
 800c99a:	462b      	mov	r3, r5
 800c99c:	4905      	ldr	r1, [pc, #20]	@ (800c9b4 <__assert_func+0x34>)
 800c99e:	f001 fc2b 	bl	800e1f8 <fiprintf>
 800c9a2:	f001 fc55 	bl	800e250 <abort>
 800c9a6:	4b04      	ldr	r3, [pc, #16]	@ (800c9b8 <__assert_func+0x38>)
 800c9a8:	e7f4      	b.n	800c994 <__assert_func+0x14>
 800c9aa:	bf00      	nop
 800c9ac:	20000140 	.word	0x20000140
 800c9b0:	0800ee81 	.word	0x0800ee81
 800c9b4:	0800ee53 	.word	0x0800ee53
 800c9b8:	0800ee46 	.word	0x0800ee46

0800c9bc <quorem>:
 800c9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	6903      	ldr	r3, [r0, #16]
 800c9c2:	690c      	ldr	r4, [r1, #16]
 800c9c4:	42a3      	cmp	r3, r4
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	db7e      	blt.n	800cac8 <quorem+0x10c>
 800c9ca:	3c01      	subs	r4, #1
 800c9cc:	f101 0814 	add.w	r8, r1, #20
 800c9d0:	00a3      	lsls	r3, r4, #2
 800c9d2:	f100 0514 	add.w	r5, r0, #20
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9f2:	d32e      	bcc.n	800ca52 <quorem+0x96>
 800c9f4:	f04f 0a00 	mov.w	sl, #0
 800c9f8:	46c4      	mov	ip, r8
 800c9fa:	46ae      	mov	lr, r5
 800c9fc:	46d3      	mov	fp, sl
 800c9fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca02:	b298      	uxth	r0, r3
 800ca04:	fb06 a000 	mla	r0, r6, r0, sl
 800ca08:	0c02      	lsrs	r2, r0, #16
 800ca0a:	0c1b      	lsrs	r3, r3, #16
 800ca0c:	fb06 2303 	mla	r3, r6, r3, r2
 800ca10:	f8de 2000 	ldr.w	r2, [lr]
 800ca14:	b280      	uxth	r0, r0
 800ca16:	b292      	uxth	r2, r2
 800ca18:	1a12      	subs	r2, r2, r0
 800ca1a:	445a      	add	r2, fp
 800ca1c:	f8de 0000 	ldr.w	r0, [lr]
 800ca20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca2e:	b292      	uxth	r2, r2
 800ca30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca34:	45e1      	cmp	r9, ip
 800ca36:	f84e 2b04 	str.w	r2, [lr], #4
 800ca3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca3e:	d2de      	bcs.n	800c9fe <quorem+0x42>
 800ca40:	9b00      	ldr	r3, [sp, #0]
 800ca42:	58eb      	ldr	r3, [r5, r3]
 800ca44:	b92b      	cbnz	r3, 800ca52 <quorem+0x96>
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	3b04      	subs	r3, #4
 800ca4a:	429d      	cmp	r5, r3
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	d32f      	bcc.n	800cab0 <quorem+0xf4>
 800ca50:	613c      	str	r4, [r7, #16]
 800ca52:	4638      	mov	r0, r7
 800ca54:	f001 f8c4 	bl	800dbe0 <__mcmp>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	db25      	blt.n	800caa8 <quorem+0xec>
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	2000      	movs	r0, #0
 800ca60:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca64:	f8d1 c000 	ldr.w	ip, [r1]
 800ca68:	fa1f fe82 	uxth.w	lr, r2
 800ca6c:	fa1f f38c 	uxth.w	r3, ip
 800ca70:	eba3 030e 	sub.w	r3, r3, lr
 800ca74:	4403      	add	r3, r0
 800ca76:	0c12      	lsrs	r2, r2, #16
 800ca78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca86:	45c1      	cmp	r9, r8
 800ca88:	f841 3b04 	str.w	r3, [r1], #4
 800ca8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca90:	d2e6      	bcs.n	800ca60 <quorem+0xa4>
 800ca92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca9a:	b922      	cbnz	r2, 800caa6 <quorem+0xea>
 800ca9c:	3b04      	subs	r3, #4
 800ca9e:	429d      	cmp	r5, r3
 800caa0:	461a      	mov	r2, r3
 800caa2:	d30b      	bcc.n	800cabc <quorem+0x100>
 800caa4:	613c      	str	r4, [r7, #16]
 800caa6:	3601      	adds	r6, #1
 800caa8:	4630      	mov	r0, r6
 800caaa:	b003      	add	sp, #12
 800caac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab0:	6812      	ldr	r2, [r2, #0]
 800cab2:	3b04      	subs	r3, #4
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	d1cb      	bne.n	800ca50 <quorem+0x94>
 800cab8:	3c01      	subs	r4, #1
 800caba:	e7c6      	b.n	800ca4a <quorem+0x8e>
 800cabc:	6812      	ldr	r2, [r2, #0]
 800cabe:	3b04      	subs	r3, #4
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	d1ef      	bne.n	800caa4 <quorem+0xe8>
 800cac4:	3c01      	subs	r4, #1
 800cac6:	e7ea      	b.n	800ca9e <quorem+0xe2>
 800cac8:	2000      	movs	r0, #0
 800caca:	e7ee      	b.n	800caaa <quorem+0xee>
 800cacc:	0000      	movs	r0, r0
	...

0800cad0 <_dtoa_r>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	69c7      	ldr	r7, [r0, #28]
 800cad6:	b099      	sub	sp, #100	@ 0x64
 800cad8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cadc:	ec55 4b10 	vmov	r4, r5, d0
 800cae0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cae2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cae4:	4683      	mov	fp, r0
 800cae6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800caea:	b97f      	cbnz	r7, 800cb0c <_dtoa_r+0x3c>
 800caec:	2010      	movs	r0, #16
 800caee:	f7fe ff3f 	bl	800b970 <malloc>
 800caf2:	4602      	mov	r2, r0
 800caf4:	f8cb 001c 	str.w	r0, [fp, #28]
 800caf8:	b920      	cbnz	r0, 800cb04 <_dtoa_r+0x34>
 800cafa:	4ba7      	ldr	r3, [pc, #668]	@ (800cd98 <_dtoa_r+0x2c8>)
 800cafc:	21ef      	movs	r1, #239	@ 0xef
 800cafe:	48a7      	ldr	r0, [pc, #668]	@ (800cd9c <_dtoa_r+0x2cc>)
 800cb00:	f7ff ff3e 	bl	800c980 <__assert_func>
 800cb04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb08:	6007      	str	r7, [r0, #0]
 800cb0a:	60c7      	str	r7, [r0, #12]
 800cb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb10:	6819      	ldr	r1, [r3, #0]
 800cb12:	b159      	cbz	r1, 800cb2c <_dtoa_r+0x5c>
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	604a      	str	r2, [r1, #4]
 800cb18:	2301      	movs	r3, #1
 800cb1a:	4093      	lsls	r3, r2
 800cb1c:	608b      	str	r3, [r1, #8]
 800cb1e:	4658      	mov	r0, fp
 800cb20:	f000 fe24 	bl	800d76c <_Bfree>
 800cb24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	1e2b      	subs	r3, r5, #0
 800cb2e:	bfb9      	ittee	lt
 800cb30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb34:	9303      	strlt	r3, [sp, #12]
 800cb36:	2300      	movge	r3, #0
 800cb38:	6033      	strge	r3, [r6, #0]
 800cb3a:	9f03      	ldr	r7, [sp, #12]
 800cb3c:	4b98      	ldr	r3, [pc, #608]	@ (800cda0 <_dtoa_r+0x2d0>)
 800cb3e:	bfbc      	itt	lt
 800cb40:	2201      	movlt	r2, #1
 800cb42:	6032      	strlt	r2, [r6, #0]
 800cb44:	43bb      	bics	r3, r7
 800cb46:	d112      	bne.n	800cb6e <_dtoa_r+0x9e>
 800cb48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb54:	4323      	orrs	r3, r4
 800cb56:	f000 854d 	beq.w	800d5f4 <_dtoa_r+0xb24>
 800cb5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cdb4 <_dtoa_r+0x2e4>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 854f 	beq.w	800d604 <_dtoa_r+0xb34>
 800cb66:	f10a 0303 	add.w	r3, sl, #3
 800cb6a:	f000 bd49 	b.w	800d600 <_dtoa_r+0xb30>
 800cb6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	ec51 0b17 	vmov	r0, r1, d7
 800cb78:	2300      	movs	r3, #0
 800cb7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cb7e:	f7f3 ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb82:	4680      	mov	r8, r0
 800cb84:	b158      	cbz	r0, 800cb9e <_dtoa_r+0xce>
 800cb86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb88:	2301      	movs	r3, #1
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb8e:	b113      	cbz	r3, 800cb96 <_dtoa_r+0xc6>
 800cb90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb92:	4b84      	ldr	r3, [pc, #528]	@ (800cda4 <_dtoa_r+0x2d4>)
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cdb8 <_dtoa_r+0x2e8>
 800cb9a:	f000 bd33 	b.w	800d604 <_dtoa_r+0xb34>
 800cb9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cba2:	aa16      	add	r2, sp, #88	@ 0x58
 800cba4:	a917      	add	r1, sp, #92	@ 0x5c
 800cba6:	4658      	mov	r0, fp
 800cba8:	f001 f8ca 	bl	800dd40 <__d2b>
 800cbac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cbb0:	4681      	mov	r9, r0
 800cbb2:	2e00      	cmp	r6, #0
 800cbb4:	d077      	beq.n	800cca6 <_dtoa_r+0x1d6>
 800cbb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cbc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cbcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	4b74      	ldr	r3, [pc, #464]	@ (800cda8 <_dtoa_r+0x2d8>)
 800cbd6:	f7f3 fb67 	bl	80002a8 <__aeabi_dsub>
 800cbda:	a369      	add	r3, pc, #420	@ (adr r3, 800cd80 <_dtoa_r+0x2b0>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fd1a 	bl	8000618 <__aeabi_dmul>
 800cbe4:	a368      	add	r3, pc, #416	@ (adr r3, 800cd88 <_dtoa_r+0x2b8>)
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	f7f3 fb5f 	bl	80002ac <__adddf3>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	460d      	mov	r5, r1
 800cbf4:	f7f3 fca6 	bl	8000544 <__aeabi_i2d>
 800cbf8:	a365      	add	r3, pc, #404	@ (adr r3, 800cd90 <_dtoa_r+0x2c0>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f3 fd0b 	bl	8000618 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fb4f 	bl	80002ac <__adddf3>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	f7f3 ffb1 	bl	8000b78 <__aeabi_d2iz>
 800cc16:	2200      	movs	r2, #0
 800cc18:	4607      	mov	r7, r0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f7f3 ff6c 	bl	8000afc <__aeabi_dcmplt>
 800cc24:	b140      	cbz	r0, 800cc38 <_dtoa_r+0x168>
 800cc26:	4638      	mov	r0, r7
 800cc28:	f7f3 fc8c 	bl	8000544 <__aeabi_i2d>
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	462b      	mov	r3, r5
 800cc30:	f7f3 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc34:	b900      	cbnz	r0, 800cc38 <_dtoa_r+0x168>
 800cc36:	3f01      	subs	r7, #1
 800cc38:	2f16      	cmp	r7, #22
 800cc3a:	d851      	bhi.n	800cce0 <_dtoa_r+0x210>
 800cc3c:	4b5b      	ldr	r3, [pc, #364]	@ (800cdac <_dtoa_r+0x2dc>)
 800cc3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc4a:	f7f3 ff57 	bl	8000afc <__aeabi_dcmplt>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d048      	beq.n	800cce4 <_dtoa_r+0x214>
 800cc52:	3f01      	subs	r7, #1
 800cc54:	2300      	movs	r3, #0
 800cc56:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc5a:	1b9b      	subs	r3, r3, r6
 800cc5c:	1e5a      	subs	r2, r3, #1
 800cc5e:	bf44      	itt	mi
 800cc60:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc64:	2300      	movmi	r3, #0
 800cc66:	9208      	str	r2, [sp, #32]
 800cc68:	bf54      	ite	pl
 800cc6a:	f04f 0800 	movpl.w	r8, #0
 800cc6e:	9308      	strmi	r3, [sp, #32]
 800cc70:	2f00      	cmp	r7, #0
 800cc72:	db39      	blt.n	800cce8 <_dtoa_r+0x218>
 800cc74:	9b08      	ldr	r3, [sp, #32]
 800cc76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cc78:	443b      	add	r3, r7
 800cc7a:	9308      	str	r3, [sp, #32]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	d864      	bhi.n	800cd50 <_dtoa_r+0x280>
 800cc86:	2b05      	cmp	r3, #5
 800cc88:	bfc4      	itt	gt
 800cc8a:	3b04      	subgt	r3, #4
 800cc8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc90:	f1a3 0302 	sub.w	r3, r3, #2
 800cc94:	bfcc      	ite	gt
 800cc96:	2400      	movgt	r4, #0
 800cc98:	2401      	movle	r4, #1
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d863      	bhi.n	800cd66 <_dtoa_r+0x296>
 800cc9e:	e8df f003 	tbb	[pc, r3]
 800cca2:	372a      	.short	0x372a
 800cca4:	5535      	.short	0x5535
 800cca6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ccaa:	441e      	add	r6, r3
 800ccac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ccb0:	2b20      	cmp	r3, #32
 800ccb2:	bfc1      	itttt	gt
 800ccb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ccb8:	409f      	lslgt	r7, r3
 800ccba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ccbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ccc2:	bfd6      	itet	le
 800ccc4:	f1c3 0320 	rsble	r3, r3, #32
 800ccc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cccc:	fa04 f003 	lslle.w	r0, r4, r3
 800ccd0:	f7f3 fc28 	bl	8000524 <__aeabi_ui2d>
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ccda:	3e01      	subs	r6, #1
 800ccdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800ccde:	e777      	b.n	800cbd0 <_dtoa_r+0x100>
 800cce0:	2301      	movs	r3, #1
 800cce2:	e7b8      	b.n	800cc56 <_dtoa_r+0x186>
 800cce4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cce6:	e7b7      	b.n	800cc58 <_dtoa_r+0x188>
 800cce8:	427b      	negs	r3, r7
 800ccea:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccec:	2300      	movs	r3, #0
 800ccee:	eba8 0807 	sub.w	r8, r8, r7
 800ccf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccf4:	e7c4      	b.n	800cc80 <_dtoa_r+0x1b0>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	dc35      	bgt.n	800cd6c <_dtoa_r+0x29c>
 800cd00:	2301      	movs	r3, #1
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	9307      	str	r3, [sp, #28]
 800cd06:	461a      	mov	r2, r3
 800cd08:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd0a:	e00b      	b.n	800cd24 <_dtoa_r+0x254>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e7f3      	b.n	800ccf8 <_dtoa_r+0x228>
 800cd10:	2300      	movs	r3, #0
 800cd12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd16:	18fb      	adds	r3, r7, r3
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	9307      	str	r3, [sp, #28]
 800cd20:	bfb8      	it	lt
 800cd22:	2301      	movlt	r3, #1
 800cd24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cd28:	2100      	movs	r1, #0
 800cd2a:	2204      	movs	r2, #4
 800cd2c:	f102 0514 	add.w	r5, r2, #20
 800cd30:	429d      	cmp	r5, r3
 800cd32:	d91f      	bls.n	800cd74 <_dtoa_r+0x2a4>
 800cd34:	6041      	str	r1, [r0, #4]
 800cd36:	4658      	mov	r0, fp
 800cd38:	f000 fcd8 	bl	800d6ec <_Balloc>
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d13c      	bne.n	800cdbc <_dtoa_r+0x2ec>
 800cd42:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb0 <_dtoa_r+0x2e0>)
 800cd44:	4602      	mov	r2, r0
 800cd46:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd4a:	e6d8      	b.n	800cafe <_dtoa_r+0x2e>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e7e0      	b.n	800cd12 <_dtoa_r+0x242>
 800cd50:	2401      	movs	r4, #1
 800cd52:	2300      	movs	r3, #0
 800cd54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd58:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	9307      	str	r3, [sp, #28]
 800cd60:	2200      	movs	r2, #0
 800cd62:	2312      	movs	r3, #18
 800cd64:	e7d0      	b.n	800cd08 <_dtoa_r+0x238>
 800cd66:	2301      	movs	r3, #1
 800cd68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd6a:	e7f5      	b.n	800cd58 <_dtoa_r+0x288>
 800cd6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	9307      	str	r3, [sp, #28]
 800cd72:	e7d7      	b.n	800cd24 <_dtoa_r+0x254>
 800cd74:	3101      	adds	r1, #1
 800cd76:	0052      	lsls	r2, r2, #1
 800cd78:	e7d8      	b.n	800cd2c <_dtoa_r+0x25c>
 800cd7a:	bf00      	nop
 800cd7c:	f3af 8000 	nop.w
 800cd80:	636f4361 	.word	0x636f4361
 800cd84:	3fd287a7 	.word	0x3fd287a7
 800cd88:	8b60c8b3 	.word	0x8b60c8b3
 800cd8c:	3fc68a28 	.word	0x3fc68a28
 800cd90:	509f79fb 	.word	0x509f79fb
 800cd94:	3fd34413 	.word	0x3fd34413
 800cd98:	0800edd5 	.word	0x0800edd5
 800cd9c:	0800ee8f 	.word	0x0800ee8f
 800cda0:	7ff00000 	.word	0x7ff00000
 800cda4:	0800edb2 	.word	0x0800edb2
 800cda8:	3ff80000 	.word	0x3ff80000
 800cdac:	0800ef88 	.word	0x0800ef88
 800cdb0:	0800eee7 	.word	0x0800eee7
 800cdb4:	0800ee8b 	.word	0x0800ee8b
 800cdb8:	0800edb1 	.word	0x0800edb1
 800cdbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cdc0:	6018      	str	r0, [r3, #0]
 800cdc2:	9b07      	ldr	r3, [sp, #28]
 800cdc4:	2b0e      	cmp	r3, #14
 800cdc6:	f200 80a4 	bhi.w	800cf12 <_dtoa_r+0x442>
 800cdca:	2c00      	cmp	r4, #0
 800cdcc:	f000 80a1 	beq.w	800cf12 <_dtoa_r+0x442>
 800cdd0:	2f00      	cmp	r7, #0
 800cdd2:	dd33      	ble.n	800ce3c <_dtoa_r+0x36c>
 800cdd4:	4bad      	ldr	r3, [pc, #692]	@ (800d08c <_dtoa_r+0x5bc>)
 800cdd6:	f007 020f 	and.w	r2, r7, #15
 800cdda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdde:	ed93 7b00 	vldr	d7, [r3]
 800cde2:	05f8      	lsls	r0, r7, #23
 800cde4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cde8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cdec:	d516      	bpl.n	800ce1c <_dtoa_r+0x34c>
 800cdee:	4ba8      	ldr	r3, [pc, #672]	@ (800d090 <_dtoa_r+0x5c0>)
 800cdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdf8:	f7f3 fd38 	bl	800086c <__aeabi_ddiv>
 800cdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce00:	f004 040f 	and.w	r4, r4, #15
 800ce04:	2603      	movs	r6, #3
 800ce06:	4da2      	ldr	r5, [pc, #648]	@ (800d090 <_dtoa_r+0x5c0>)
 800ce08:	b954      	cbnz	r4, 800ce20 <_dtoa_r+0x350>
 800ce0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce12:	f7f3 fd2b 	bl	800086c <__aeabi_ddiv>
 800ce16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce1a:	e028      	b.n	800ce6e <_dtoa_r+0x39e>
 800ce1c:	2602      	movs	r6, #2
 800ce1e:	e7f2      	b.n	800ce06 <_dtoa_r+0x336>
 800ce20:	07e1      	lsls	r1, r4, #31
 800ce22:	d508      	bpl.n	800ce36 <_dtoa_r+0x366>
 800ce24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce2c:	f7f3 fbf4 	bl	8000618 <__aeabi_dmul>
 800ce30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce34:	3601      	adds	r6, #1
 800ce36:	1064      	asrs	r4, r4, #1
 800ce38:	3508      	adds	r5, #8
 800ce3a:	e7e5      	b.n	800ce08 <_dtoa_r+0x338>
 800ce3c:	f000 80d2 	beq.w	800cfe4 <_dtoa_r+0x514>
 800ce40:	427c      	negs	r4, r7
 800ce42:	4b92      	ldr	r3, [pc, #584]	@ (800d08c <_dtoa_r+0x5bc>)
 800ce44:	4d92      	ldr	r5, [pc, #584]	@ (800d090 <_dtoa_r+0x5c0>)
 800ce46:	f004 020f 	and.w	r2, r4, #15
 800ce4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce56:	f7f3 fbdf 	bl	8000618 <__aeabi_dmul>
 800ce5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5e:	1124      	asrs	r4, r4, #4
 800ce60:	2300      	movs	r3, #0
 800ce62:	2602      	movs	r6, #2
 800ce64:	2c00      	cmp	r4, #0
 800ce66:	f040 80b2 	bne.w	800cfce <_dtoa_r+0x4fe>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1d3      	bne.n	800ce16 <_dtoa_r+0x346>
 800ce6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 80b7 	beq.w	800cfe8 <_dtoa_r+0x518>
 800ce7a:	4b86      	ldr	r3, [pc, #536]	@ (800d094 <_dtoa_r+0x5c4>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fe3b 	bl	8000afc <__aeabi_dcmplt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f000 80ae 	beq.w	800cfe8 <_dtoa_r+0x518>
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 80aa 	beq.w	800cfe8 <_dtoa_r+0x518>
 800ce94:	9b00      	ldr	r3, [sp, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	dd37      	ble.n	800cf0a <_dtoa_r+0x43a>
 800ce9a:	1e7b      	subs	r3, r7, #1
 800ce9c:	9304      	str	r3, [sp, #16]
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4b7d      	ldr	r3, [pc, #500]	@ (800d098 <_dtoa_r+0x5c8>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7f3 fbb7 	bl	8000618 <__aeabi_dmul>
 800ceaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceae:	9c00      	ldr	r4, [sp, #0]
 800ceb0:	3601      	adds	r6, #1
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7f3 fb46 	bl	8000544 <__aeabi_i2d>
 800ceb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cebc:	f7f3 fbac 	bl	8000618 <__aeabi_dmul>
 800cec0:	4b76      	ldr	r3, [pc, #472]	@ (800d09c <_dtoa_r+0x5cc>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	f7f3 f9f2 	bl	80002ac <__adddf3>
 800cec8:	4605      	mov	r5, r0
 800ceca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cece:	2c00      	cmp	r4, #0
 800ced0:	f040 808d 	bne.w	800cfee <_dtoa_r+0x51e>
 800ced4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced8:	4b71      	ldr	r3, [pc, #452]	@ (800d0a0 <_dtoa_r+0x5d0>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	f7f3 f9e4 	bl	80002a8 <__aeabi_dsub>
 800cee0:	4602      	mov	r2, r0
 800cee2:	460b      	mov	r3, r1
 800cee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cee8:	462a      	mov	r2, r5
 800ceea:	4633      	mov	r3, r6
 800ceec:	f7f3 fe24 	bl	8000b38 <__aeabi_dcmpgt>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	f040 828b 	bne.w	800d40c <_dtoa_r+0x93c>
 800cef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cefa:	462a      	mov	r2, r5
 800cefc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf00:	f7f3 fdfc 	bl	8000afc <__aeabi_dcmplt>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	f040 8128 	bne.w	800d15a <_dtoa_r+0x68a>
 800cf0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cf0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f2c0 815a 	blt.w	800d1ce <_dtoa_r+0x6fe>
 800cf1a:	2f0e      	cmp	r7, #14
 800cf1c:	f300 8157 	bgt.w	800d1ce <_dtoa_r+0x6fe>
 800cf20:	4b5a      	ldr	r3, [pc, #360]	@ (800d08c <_dtoa_r+0x5bc>)
 800cf22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf26:	ed93 7b00 	vldr	d7, [r3]
 800cf2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	ed8d 7b00 	vstr	d7, [sp]
 800cf32:	da03      	bge.n	800cf3c <_dtoa_r+0x46c>
 800cf34:	9b07      	ldr	r3, [sp, #28]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f340 8101 	ble.w	800d13e <_dtoa_r+0x66e>
 800cf3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf40:	4656      	mov	r6, sl
 800cf42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf46:	4620      	mov	r0, r4
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7f3 fc8f 	bl	800086c <__aeabi_ddiv>
 800cf4e:	f7f3 fe13 	bl	8000b78 <__aeabi_d2iz>
 800cf52:	4680      	mov	r8, r0
 800cf54:	f7f3 faf6 	bl	8000544 <__aeabi_i2d>
 800cf58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf5c:	f7f3 fb5c 	bl	8000618 <__aeabi_dmul>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	4620      	mov	r0, r4
 800cf66:	4629      	mov	r1, r5
 800cf68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf6c:	f7f3 f99c 	bl	80002a8 <__aeabi_dsub>
 800cf70:	f806 4b01 	strb.w	r4, [r6], #1
 800cf74:	9d07      	ldr	r5, [sp, #28]
 800cf76:	eba6 040a 	sub.w	r4, r6, sl
 800cf7a:	42a5      	cmp	r5, r4
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	f040 8117 	bne.w	800d1b2 <_dtoa_r+0x6e2>
 800cf84:	f7f3 f992 	bl	80002ac <__adddf3>
 800cf88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	460d      	mov	r5, r1
 800cf90:	f7f3 fdd2 	bl	8000b38 <__aeabi_dcmpgt>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	f040 80f9 	bne.w	800d18c <_dtoa_r+0x6bc>
 800cf9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fda1 	bl	8000ae8 <__aeabi_dcmpeq>
 800cfa6:	b118      	cbz	r0, 800cfb0 <_dtoa_r+0x4e0>
 800cfa8:	f018 0f01 	tst.w	r8, #1
 800cfac:	f040 80ee 	bne.w	800d18c <_dtoa_r+0x6bc>
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	4658      	mov	r0, fp
 800cfb4:	f000 fbda 	bl	800d76c <_Bfree>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	7033      	strb	r3, [r6, #0]
 800cfbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfbe:	3701      	adds	r7, #1
 800cfc0:	601f      	str	r7, [r3, #0]
 800cfc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 831d 	beq.w	800d604 <_dtoa_r+0xb34>
 800cfca:	601e      	str	r6, [r3, #0]
 800cfcc:	e31a      	b.n	800d604 <_dtoa_r+0xb34>
 800cfce:	07e2      	lsls	r2, r4, #31
 800cfd0:	d505      	bpl.n	800cfde <_dtoa_r+0x50e>
 800cfd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfd6:	f7f3 fb1f 	bl	8000618 <__aeabi_dmul>
 800cfda:	3601      	adds	r6, #1
 800cfdc:	2301      	movs	r3, #1
 800cfde:	1064      	asrs	r4, r4, #1
 800cfe0:	3508      	adds	r5, #8
 800cfe2:	e73f      	b.n	800ce64 <_dtoa_r+0x394>
 800cfe4:	2602      	movs	r6, #2
 800cfe6:	e742      	b.n	800ce6e <_dtoa_r+0x39e>
 800cfe8:	9c07      	ldr	r4, [sp, #28]
 800cfea:	9704      	str	r7, [sp, #16]
 800cfec:	e761      	b.n	800ceb2 <_dtoa_r+0x3e2>
 800cfee:	4b27      	ldr	r3, [pc, #156]	@ (800d08c <_dtoa_r+0x5bc>)
 800cff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cff6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cffa:	4454      	add	r4, sl
 800cffc:	2900      	cmp	r1, #0
 800cffe:	d053      	beq.n	800d0a8 <_dtoa_r+0x5d8>
 800d000:	4928      	ldr	r1, [pc, #160]	@ (800d0a4 <_dtoa_r+0x5d4>)
 800d002:	2000      	movs	r0, #0
 800d004:	f7f3 fc32 	bl	800086c <__aeabi_ddiv>
 800d008:	4633      	mov	r3, r6
 800d00a:	462a      	mov	r2, r5
 800d00c:	f7f3 f94c 	bl	80002a8 <__aeabi_dsub>
 800d010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d014:	4656      	mov	r6, sl
 800d016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d01a:	f7f3 fdad 	bl	8000b78 <__aeabi_d2iz>
 800d01e:	4605      	mov	r5, r0
 800d020:	f7f3 fa90 	bl	8000544 <__aeabi_i2d>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02c:	f7f3 f93c 	bl	80002a8 <__aeabi_dsub>
 800d030:	3530      	adds	r5, #48	@ 0x30
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d03a:	f806 5b01 	strb.w	r5, [r6], #1
 800d03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d042:	f7f3 fd5b 	bl	8000afc <__aeabi_dcmplt>
 800d046:	2800      	cmp	r0, #0
 800d048:	d171      	bne.n	800d12e <_dtoa_r+0x65e>
 800d04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d04e:	4911      	ldr	r1, [pc, #68]	@ (800d094 <_dtoa_r+0x5c4>)
 800d050:	2000      	movs	r0, #0
 800d052:	f7f3 f929 	bl	80002a8 <__aeabi_dsub>
 800d056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d05a:	f7f3 fd4f 	bl	8000afc <__aeabi_dcmplt>
 800d05e:	2800      	cmp	r0, #0
 800d060:	f040 8095 	bne.w	800d18e <_dtoa_r+0x6be>
 800d064:	42a6      	cmp	r6, r4
 800d066:	f43f af50 	beq.w	800cf0a <_dtoa_r+0x43a>
 800d06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d06e:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <_dtoa_r+0x5c8>)
 800d070:	2200      	movs	r2, #0
 800d072:	f7f3 fad1 	bl	8000618 <__aeabi_dmul>
 800d076:	4b08      	ldr	r3, [pc, #32]	@ (800d098 <_dtoa_r+0x5c8>)
 800d078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d07c:	2200      	movs	r2, #0
 800d07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d082:	f7f3 fac9 	bl	8000618 <__aeabi_dmul>
 800d086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d08a:	e7c4      	b.n	800d016 <_dtoa_r+0x546>
 800d08c:	0800ef88 	.word	0x0800ef88
 800d090:	0800ef60 	.word	0x0800ef60
 800d094:	3ff00000 	.word	0x3ff00000
 800d098:	40240000 	.word	0x40240000
 800d09c:	401c0000 	.word	0x401c0000
 800d0a0:	40140000 	.word	0x40140000
 800d0a4:	3fe00000 	.word	0x3fe00000
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f7f3 fab4 	bl	8000618 <__aeabi_dmul>
 800d0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d0b6:	4656      	mov	r6, sl
 800d0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0bc:	f7f3 fd5c 	bl	8000b78 <__aeabi_d2iz>
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	f7f3 fa3f 	bl	8000544 <__aeabi_i2d>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ce:	f7f3 f8eb 	bl	80002a8 <__aeabi_dsub>
 800d0d2:	3530      	adds	r5, #48	@ 0x30
 800d0d4:	f806 5b01 	strb.w	r5, [r6], #1
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	42a6      	cmp	r6, r4
 800d0de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0e2:	f04f 0200 	mov.w	r2, #0
 800d0e6:	d124      	bne.n	800d132 <_dtoa_r+0x662>
 800d0e8:	4bac      	ldr	r3, [pc, #688]	@ (800d39c <_dtoa_r+0x8cc>)
 800d0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0ee:	f7f3 f8dd 	bl	80002ac <__adddf3>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0fa:	f7f3 fd1d 	bl	8000b38 <__aeabi_dcmpgt>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d145      	bne.n	800d18e <_dtoa_r+0x6be>
 800d102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d106:	49a5      	ldr	r1, [pc, #660]	@ (800d39c <_dtoa_r+0x8cc>)
 800d108:	2000      	movs	r0, #0
 800d10a:	f7f3 f8cd 	bl	80002a8 <__aeabi_dsub>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d116:	f7f3 fcf1 	bl	8000afc <__aeabi_dcmplt>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	f43f aef5 	beq.w	800cf0a <_dtoa_r+0x43a>
 800d120:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d122:	1e73      	subs	r3, r6, #1
 800d124:	9315      	str	r3, [sp, #84]	@ 0x54
 800d126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d12a:	2b30      	cmp	r3, #48	@ 0x30
 800d12c:	d0f8      	beq.n	800d120 <_dtoa_r+0x650>
 800d12e:	9f04      	ldr	r7, [sp, #16]
 800d130:	e73e      	b.n	800cfb0 <_dtoa_r+0x4e0>
 800d132:	4b9b      	ldr	r3, [pc, #620]	@ (800d3a0 <_dtoa_r+0x8d0>)
 800d134:	f7f3 fa70 	bl	8000618 <__aeabi_dmul>
 800d138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d13c:	e7bc      	b.n	800d0b8 <_dtoa_r+0x5e8>
 800d13e:	d10c      	bne.n	800d15a <_dtoa_r+0x68a>
 800d140:	4b98      	ldr	r3, [pc, #608]	@ (800d3a4 <_dtoa_r+0x8d4>)
 800d142:	2200      	movs	r2, #0
 800d144:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d148:	f7f3 fa66 	bl	8000618 <__aeabi_dmul>
 800d14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d150:	f7f3 fce8 	bl	8000b24 <__aeabi_dcmpge>
 800d154:	2800      	cmp	r0, #0
 800d156:	f000 8157 	beq.w	800d408 <_dtoa_r+0x938>
 800d15a:	2400      	movs	r4, #0
 800d15c:	4625      	mov	r5, r4
 800d15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d160:	43db      	mvns	r3, r3
 800d162:	9304      	str	r3, [sp, #16]
 800d164:	4656      	mov	r6, sl
 800d166:	2700      	movs	r7, #0
 800d168:	4621      	mov	r1, r4
 800d16a:	4658      	mov	r0, fp
 800d16c:	f000 fafe 	bl	800d76c <_Bfree>
 800d170:	2d00      	cmp	r5, #0
 800d172:	d0dc      	beq.n	800d12e <_dtoa_r+0x65e>
 800d174:	b12f      	cbz	r7, 800d182 <_dtoa_r+0x6b2>
 800d176:	42af      	cmp	r7, r5
 800d178:	d003      	beq.n	800d182 <_dtoa_r+0x6b2>
 800d17a:	4639      	mov	r1, r7
 800d17c:	4658      	mov	r0, fp
 800d17e:	f000 faf5 	bl	800d76c <_Bfree>
 800d182:	4629      	mov	r1, r5
 800d184:	4658      	mov	r0, fp
 800d186:	f000 faf1 	bl	800d76c <_Bfree>
 800d18a:	e7d0      	b.n	800d12e <_dtoa_r+0x65e>
 800d18c:	9704      	str	r7, [sp, #16]
 800d18e:	4633      	mov	r3, r6
 800d190:	461e      	mov	r6, r3
 800d192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d196:	2a39      	cmp	r2, #57	@ 0x39
 800d198:	d107      	bne.n	800d1aa <_dtoa_r+0x6da>
 800d19a:	459a      	cmp	sl, r3
 800d19c:	d1f8      	bne.n	800d190 <_dtoa_r+0x6c0>
 800d19e:	9a04      	ldr	r2, [sp, #16]
 800d1a0:	3201      	adds	r2, #1
 800d1a2:	9204      	str	r2, [sp, #16]
 800d1a4:	2230      	movs	r2, #48	@ 0x30
 800d1a6:	f88a 2000 	strb.w	r2, [sl]
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	3201      	adds	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
 800d1b0:	e7bd      	b.n	800d12e <_dtoa_r+0x65e>
 800d1b2:	4b7b      	ldr	r3, [pc, #492]	@ (800d3a0 <_dtoa_r+0x8d0>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7f3 fa2f 	bl	8000618 <__aeabi_dmul>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f43f aebb 	beq.w	800cf42 <_dtoa_r+0x472>
 800d1cc:	e6f0      	b.n	800cfb0 <_dtoa_r+0x4e0>
 800d1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	f000 80db 	beq.w	800d38c <_dtoa_r+0x8bc>
 800d1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1d8:	2a01      	cmp	r2, #1
 800d1da:	f300 80bf 	bgt.w	800d35c <_dtoa_r+0x88c>
 800d1de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	f000 80b7 	beq.w	800d354 <_dtoa_r+0x884>
 800d1e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d1ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1ec:	4646      	mov	r6, r8
 800d1ee:	9a08      	ldr	r2, [sp, #32]
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	441a      	add	r2, r3
 800d1f4:	4658      	mov	r0, fp
 800d1f6:	4498      	add	r8, r3
 800d1f8:	9208      	str	r2, [sp, #32]
 800d1fa:	f000 fb6b 	bl	800d8d4 <__i2b>
 800d1fe:	4605      	mov	r5, r0
 800d200:	b15e      	cbz	r6, 800d21a <_dtoa_r+0x74a>
 800d202:	9b08      	ldr	r3, [sp, #32]
 800d204:	2b00      	cmp	r3, #0
 800d206:	dd08      	ble.n	800d21a <_dtoa_r+0x74a>
 800d208:	42b3      	cmp	r3, r6
 800d20a:	9a08      	ldr	r2, [sp, #32]
 800d20c:	bfa8      	it	ge
 800d20e:	4633      	movge	r3, r6
 800d210:	eba8 0803 	sub.w	r8, r8, r3
 800d214:	1af6      	subs	r6, r6, r3
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	9308      	str	r3, [sp, #32]
 800d21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d21c:	b1f3      	cbz	r3, 800d25c <_dtoa_r+0x78c>
 800d21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 80b7 	beq.w	800d394 <_dtoa_r+0x8c4>
 800d226:	b18c      	cbz	r4, 800d24c <_dtoa_r+0x77c>
 800d228:	4629      	mov	r1, r5
 800d22a:	4622      	mov	r2, r4
 800d22c:	4658      	mov	r0, fp
 800d22e:	f000 fc11 	bl	800da54 <__pow5mult>
 800d232:	464a      	mov	r2, r9
 800d234:	4601      	mov	r1, r0
 800d236:	4605      	mov	r5, r0
 800d238:	4658      	mov	r0, fp
 800d23a:	f000 fb61 	bl	800d900 <__multiply>
 800d23e:	4649      	mov	r1, r9
 800d240:	9004      	str	r0, [sp, #16]
 800d242:	4658      	mov	r0, fp
 800d244:	f000 fa92 	bl	800d76c <_Bfree>
 800d248:	9b04      	ldr	r3, [sp, #16]
 800d24a:	4699      	mov	r9, r3
 800d24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d24e:	1b1a      	subs	r2, r3, r4
 800d250:	d004      	beq.n	800d25c <_dtoa_r+0x78c>
 800d252:	4649      	mov	r1, r9
 800d254:	4658      	mov	r0, fp
 800d256:	f000 fbfd 	bl	800da54 <__pow5mult>
 800d25a:	4681      	mov	r9, r0
 800d25c:	2101      	movs	r1, #1
 800d25e:	4658      	mov	r0, fp
 800d260:	f000 fb38 	bl	800d8d4 <__i2b>
 800d264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d266:	4604      	mov	r4, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 81cf 	beq.w	800d60c <_dtoa_r+0xb3c>
 800d26e:	461a      	mov	r2, r3
 800d270:	4601      	mov	r1, r0
 800d272:	4658      	mov	r0, fp
 800d274:	f000 fbee 	bl	800da54 <__pow5mult>
 800d278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	4604      	mov	r4, r0
 800d27e:	f300 8095 	bgt.w	800d3ac <_dtoa_r+0x8dc>
 800d282:	9b02      	ldr	r3, [sp, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f040 8087 	bne.w	800d398 <_dtoa_r+0x8c8>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 8089 	bne.w	800d3a8 <_dtoa_r+0x8d8>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d29c:	0d1b      	lsrs	r3, r3, #20
 800d29e:	051b      	lsls	r3, r3, #20
 800d2a0:	b12b      	cbz	r3, 800d2ae <_dtoa_r+0x7de>
 800d2a2:	9b08      	ldr	r3, [sp, #32]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	9308      	str	r3, [sp, #32]
 800d2a8:	f108 0801 	add.w	r8, r8, #1
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 81b0 	beq.w	800d618 <_dtoa_r+0xb48>
 800d2b8:	6923      	ldr	r3, [r4, #16]
 800d2ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2be:	6918      	ldr	r0, [r3, #16]
 800d2c0:	f000 fabc 	bl	800d83c <__hi0bits>
 800d2c4:	f1c0 0020 	rsb	r0, r0, #32
 800d2c8:	9b08      	ldr	r3, [sp, #32]
 800d2ca:	4418      	add	r0, r3
 800d2cc:	f010 001f 	ands.w	r0, r0, #31
 800d2d0:	d077      	beq.n	800d3c2 <_dtoa_r+0x8f2>
 800d2d2:	f1c0 0320 	rsb	r3, r0, #32
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	dd6b      	ble.n	800d3b2 <_dtoa_r+0x8e2>
 800d2da:	9b08      	ldr	r3, [sp, #32]
 800d2dc:	f1c0 001c 	rsb	r0, r0, #28
 800d2e0:	4403      	add	r3, r0
 800d2e2:	4480      	add	r8, r0
 800d2e4:	4406      	add	r6, r0
 800d2e6:	9308      	str	r3, [sp, #32]
 800d2e8:	f1b8 0f00 	cmp.w	r8, #0
 800d2ec:	dd05      	ble.n	800d2fa <_dtoa_r+0x82a>
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	4642      	mov	r2, r8
 800d2f2:	4658      	mov	r0, fp
 800d2f4:	f000 fc08 	bl	800db08 <__lshift>
 800d2f8:	4681      	mov	r9, r0
 800d2fa:	9b08      	ldr	r3, [sp, #32]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	dd05      	ble.n	800d30c <_dtoa_r+0x83c>
 800d300:	4621      	mov	r1, r4
 800d302:	461a      	mov	r2, r3
 800d304:	4658      	mov	r0, fp
 800d306:	f000 fbff 	bl	800db08 <__lshift>
 800d30a:	4604      	mov	r4, r0
 800d30c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d059      	beq.n	800d3c6 <_dtoa_r+0x8f6>
 800d312:	4621      	mov	r1, r4
 800d314:	4648      	mov	r0, r9
 800d316:	f000 fc63 	bl	800dbe0 <__mcmp>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	da53      	bge.n	800d3c6 <_dtoa_r+0x8f6>
 800d31e:	1e7b      	subs	r3, r7, #1
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	4649      	mov	r1, r9
 800d324:	2300      	movs	r3, #0
 800d326:	220a      	movs	r2, #10
 800d328:	4658      	mov	r0, fp
 800d32a:	f000 fa41 	bl	800d7b0 <__multadd>
 800d32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d330:	4681      	mov	r9, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 8172 	beq.w	800d61c <_dtoa_r+0xb4c>
 800d338:	2300      	movs	r3, #0
 800d33a:	4629      	mov	r1, r5
 800d33c:	220a      	movs	r2, #10
 800d33e:	4658      	mov	r0, fp
 800d340:	f000 fa36 	bl	800d7b0 <__multadd>
 800d344:	9b00      	ldr	r3, [sp, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	4605      	mov	r5, r0
 800d34a:	dc67      	bgt.n	800d41c <_dtoa_r+0x94c>
 800d34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d34e:	2b02      	cmp	r3, #2
 800d350:	dc41      	bgt.n	800d3d6 <_dtoa_r+0x906>
 800d352:	e063      	b.n	800d41c <_dtoa_r+0x94c>
 800d354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d35a:	e746      	b.n	800d1ea <_dtoa_r+0x71a>
 800d35c:	9b07      	ldr	r3, [sp, #28]
 800d35e:	1e5c      	subs	r4, r3, #1
 800d360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d362:	42a3      	cmp	r3, r4
 800d364:	bfbf      	itttt	lt
 800d366:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d368:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d36a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d36c:	1ae3      	sublt	r3, r4, r3
 800d36e:	bfb4      	ite	lt
 800d370:	18d2      	addlt	r2, r2, r3
 800d372:	1b1c      	subge	r4, r3, r4
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	bfbc      	itt	lt
 800d378:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d37a:	2400      	movlt	r4, #0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	bfb5      	itete	lt
 800d380:	eba8 0603 	sublt.w	r6, r8, r3
 800d384:	9b07      	ldrge	r3, [sp, #28]
 800d386:	2300      	movlt	r3, #0
 800d388:	4646      	movge	r6, r8
 800d38a:	e730      	b.n	800d1ee <_dtoa_r+0x71e>
 800d38c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d38e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d390:	4646      	mov	r6, r8
 800d392:	e735      	b.n	800d200 <_dtoa_r+0x730>
 800d394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d396:	e75c      	b.n	800d252 <_dtoa_r+0x782>
 800d398:	2300      	movs	r3, #0
 800d39a:	e788      	b.n	800d2ae <_dtoa_r+0x7de>
 800d39c:	3fe00000 	.word	0x3fe00000
 800d3a0:	40240000 	.word	0x40240000
 800d3a4:	40140000 	.word	0x40140000
 800d3a8:	9b02      	ldr	r3, [sp, #8]
 800d3aa:	e780      	b.n	800d2ae <_dtoa_r+0x7de>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3b0:	e782      	b.n	800d2b8 <_dtoa_r+0x7e8>
 800d3b2:	d099      	beq.n	800d2e8 <_dtoa_r+0x818>
 800d3b4:	9a08      	ldr	r2, [sp, #32]
 800d3b6:	331c      	adds	r3, #28
 800d3b8:	441a      	add	r2, r3
 800d3ba:	4498      	add	r8, r3
 800d3bc:	441e      	add	r6, r3
 800d3be:	9208      	str	r2, [sp, #32]
 800d3c0:	e792      	b.n	800d2e8 <_dtoa_r+0x818>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	e7f6      	b.n	800d3b4 <_dtoa_r+0x8e4>
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	9704      	str	r7, [sp, #16]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dc20      	bgt.n	800d410 <_dtoa_r+0x940>
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	dd1e      	ble.n	800d414 <_dtoa_r+0x944>
 800d3d6:	9b00      	ldr	r3, [sp, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f47f aec0 	bne.w	800d15e <_dtoa_r+0x68e>
 800d3de:	4621      	mov	r1, r4
 800d3e0:	2205      	movs	r2, #5
 800d3e2:	4658      	mov	r0, fp
 800d3e4:	f000 f9e4 	bl	800d7b0 <__multadd>
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4648      	mov	r0, r9
 800d3ee:	f000 fbf7 	bl	800dbe0 <__mcmp>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	f77f aeb3 	ble.w	800d15e <_dtoa_r+0x68e>
 800d3f8:	4656      	mov	r6, sl
 800d3fa:	2331      	movs	r3, #49	@ 0x31
 800d3fc:	f806 3b01 	strb.w	r3, [r6], #1
 800d400:	9b04      	ldr	r3, [sp, #16]
 800d402:	3301      	adds	r3, #1
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	e6ae      	b.n	800d166 <_dtoa_r+0x696>
 800d408:	9c07      	ldr	r4, [sp, #28]
 800d40a:	9704      	str	r7, [sp, #16]
 800d40c:	4625      	mov	r5, r4
 800d40e:	e7f3      	b.n	800d3f8 <_dtoa_r+0x928>
 800d410:	9b07      	ldr	r3, [sp, #28]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 8104 	beq.w	800d624 <_dtoa_r+0xb54>
 800d41c:	2e00      	cmp	r6, #0
 800d41e:	dd05      	ble.n	800d42c <_dtoa_r+0x95c>
 800d420:	4629      	mov	r1, r5
 800d422:	4632      	mov	r2, r6
 800d424:	4658      	mov	r0, fp
 800d426:	f000 fb6f 	bl	800db08 <__lshift>
 800d42a:	4605      	mov	r5, r0
 800d42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d05a      	beq.n	800d4e8 <_dtoa_r+0xa18>
 800d432:	6869      	ldr	r1, [r5, #4]
 800d434:	4658      	mov	r0, fp
 800d436:	f000 f959 	bl	800d6ec <_Balloc>
 800d43a:	4606      	mov	r6, r0
 800d43c:	b928      	cbnz	r0, 800d44a <_dtoa_r+0x97a>
 800d43e:	4b84      	ldr	r3, [pc, #528]	@ (800d650 <_dtoa_r+0xb80>)
 800d440:	4602      	mov	r2, r0
 800d442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d446:	f7ff bb5a 	b.w	800cafe <_dtoa_r+0x2e>
 800d44a:	692a      	ldr	r2, [r5, #16]
 800d44c:	3202      	adds	r2, #2
 800d44e:	0092      	lsls	r2, r2, #2
 800d450:	f105 010c 	add.w	r1, r5, #12
 800d454:	300c      	adds	r0, #12
 800d456:	f7ff fa84 	bl	800c962 <memcpy>
 800d45a:	2201      	movs	r2, #1
 800d45c:	4631      	mov	r1, r6
 800d45e:	4658      	mov	r0, fp
 800d460:	f000 fb52 	bl	800db08 <__lshift>
 800d464:	f10a 0301 	add.w	r3, sl, #1
 800d468:	9307      	str	r3, [sp, #28]
 800d46a:	9b00      	ldr	r3, [sp, #0]
 800d46c:	4453      	add	r3, sl
 800d46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d470:	9b02      	ldr	r3, [sp, #8]
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	462f      	mov	r7, r5
 800d478:	930a      	str	r3, [sp, #40]	@ 0x28
 800d47a:	4605      	mov	r5, r0
 800d47c:	9b07      	ldr	r3, [sp, #28]
 800d47e:	4621      	mov	r1, r4
 800d480:	3b01      	subs	r3, #1
 800d482:	4648      	mov	r0, r9
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	f7ff fa99 	bl	800c9bc <quorem>
 800d48a:	4639      	mov	r1, r7
 800d48c:	9002      	str	r0, [sp, #8]
 800d48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d492:	4648      	mov	r0, r9
 800d494:	f000 fba4 	bl	800dbe0 <__mcmp>
 800d498:	462a      	mov	r2, r5
 800d49a:	9008      	str	r0, [sp, #32]
 800d49c:	4621      	mov	r1, r4
 800d49e:	4658      	mov	r0, fp
 800d4a0:	f000 fbba 	bl	800dc18 <__mdiff>
 800d4a4:	68c2      	ldr	r2, [r0, #12]
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	bb02      	cbnz	r2, 800d4ec <_dtoa_r+0xa1c>
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 fb97 	bl	800dbe0 <__mcmp>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4ba:	f000 f957 	bl	800d76c <_Bfree>
 800d4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4c2:	9e07      	ldr	r6, [sp, #28]
 800d4c4:	ea43 0102 	orr.w	r1, r3, r2
 800d4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ca:	4319      	orrs	r1, r3
 800d4cc:	d110      	bne.n	800d4f0 <_dtoa_r+0xa20>
 800d4ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4d2:	d029      	beq.n	800d528 <_dtoa_r+0xa58>
 800d4d4:	9b08      	ldr	r3, [sp, #32]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	dd02      	ble.n	800d4e0 <_dtoa_r+0xa10>
 800d4da:	9b02      	ldr	r3, [sp, #8]
 800d4dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d4e0:	9b00      	ldr	r3, [sp, #0]
 800d4e2:	f883 8000 	strb.w	r8, [r3]
 800d4e6:	e63f      	b.n	800d168 <_dtoa_r+0x698>
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e7bb      	b.n	800d464 <_dtoa_r+0x994>
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	e7e1      	b.n	800d4b4 <_dtoa_r+0x9e4>
 800d4f0:	9b08      	ldr	r3, [sp, #32]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	db04      	blt.n	800d500 <_dtoa_r+0xa30>
 800d4f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4f8:	430b      	orrs	r3, r1
 800d4fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	d120      	bne.n	800d542 <_dtoa_r+0xa72>
 800d500:	2a00      	cmp	r2, #0
 800d502:	dded      	ble.n	800d4e0 <_dtoa_r+0xa10>
 800d504:	4649      	mov	r1, r9
 800d506:	2201      	movs	r2, #1
 800d508:	4658      	mov	r0, fp
 800d50a:	f000 fafd 	bl	800db08 <__lshift>
 800d50e:	4621      	mov	r1, r4
 800d510:	4681      	mov	r9, r0
 800d512:	f000 fb65 	bl	800dbe0 <__mcmp>
 800d516:	2800      	cmp	r0, #0
 800d518:	dc03      	bgt.n	800d522 <_dtoa_r+0xa52>
 800d51a:	d1e1      	bne.n	800d4e0 <_dtoa_r+0xa10>
 800d51c:	f018 0f01 	tst.w	r8, #1
 800d520:	d0de      	beq.n	800d4e0 <_dtoa_r+0xa10>
 800d522:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d526:	d1d8      	bne.n	800d4da <_dtoa_r+0xa0a>
 800d528:	9a00      	ldr	r2, [sp, #0]
 800d52a:	2339      	movs	r3, #57	@ 0x39
 800d52c:	7013      	strb	r3, [r2, #0]
 800d52e:	4633      	mov	r3, r6
 800d530:	461e      	mov	r6, r3
 800d532:	3b01      	subs	r3, #1
 800d534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d538:	2a39      	cmp	r2, #57	@ 0x39
 800d53a:	d052      	beq.n	800d5e2 <_dtoa_r+0xb12>
 800d53c:	3201      	adds	r2, #1
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	e612      	b.n	800d168 <_dtoa_r+0x698>
 800d542:	2a00      	cmp	r2, #0
 800d544:	dd07      	ble.n	800d556 <_dtoa_r+0xa86>
 800d546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d54a:	d0ed      	beq.n	800d528 <_dtoa_r+0xa58>
 800d54c:	9a00      	ldr	r2, [sp, #0]
 800d54e:	f108 0301 	add.w	r3, r8, #1
 800d552:	7013      	strb	r3, [r2, #0]
 800d554:	e608      	b.n	800d168 <_dtoa_r+0x698>
 800d556:	9b07      	ldr	r3, [sp, #28]
 800d558:	9a07      	ldr	r2, [sp, #28]
 800d55a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d560:	4293      	cmp	r3, r2
 800d562:	d028      	beq.n	800d5b6 <_dtoa_r+0xae6>
 800d564:	4649      	mov	r1, r9
 800d566:	2300      	movs	r3, #0
 800d568:	220a      	movs	r2, #10
 800d56a:	4658      	mov	r0, fp
 800d56c:	f000 f920 	bl	800d7b0 <__multadd>
 800d570:	42af      	cmp	r7, r5
 800d572:	4681      	mov	r9, r0
 800d574:	f04f 0300 	mov.w	r3, #0
 800d578:	f04f 020a 	mov.w	r2, #10
 800d57c:	4639      	mov	r1, r7
 800d57e:	4658      	mov	r0, fp
 800d580:	d107      	bne.n	800d592 <_dtoa_r+0xac2>
 800d582:	f000 f915 	bl	800d7b0 <__multadd>
 800d586:	4607      	mov	r7, r0
 800d588:	4605      	mov	r5, r0
 800d58a:	9b07      	ldr	r3, [sp, #28]
 800d58c:	3301      	adds	r3, #1
 800d58e:	9307      	str	r3, [sp, #28]
 800d590:	e774      	b.n	800d47c <_dtoa_r+0x9ac>
 800d592:	f000 f90d 	bl	800d7b0 <__multadd>
 800d596:	4629      	mov	r1, r5
 800d598:	4607      	mov	r7, r0
 800d59a:	2300      	movs	r3, #0
 800d59c:	220a      	movs	r2, #10
 800d59e:	4658      	mov	r0, fp
 800d5a0:	f000 f906 	bl	800d7b0 <__multadd>
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	e7f0      	b.n	800d58a <_dtoa_r+0xaba>
 800d5a8:	9b00      	ldr	r3, [sp, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfcc      	ite	gt
 800d5ae:	461e      	movgt	r6, r3
 800d5b0:	2601      	movle	r6, #1
 800d5b2:	4456      	add	r6, sl
 800d5b4:	2700      	movs	r7, #0
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	4658      	mov	r0, fp
 800d5bc:	f000 faa4 	bl	800db08 <__lshift>
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	4681      	mov	r9, r0
 800d5c4:	f000 fb0c 	bl	800dbe0 <__mcmp>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	dcb0      	bgt.n	800d52e <_dtoa_r+0xa5e>
 800d5cc:	d102      	bne.n	800d5d4 <_dtoa_r+0xb04>
 800d5ce:	f018 0f01 	tst.w	r8, #1
 800d5d2:	d1ac      	bne.n	800d52e <_dtoa_r+0xa5e>
 800d5d4:	4633      	mov	r3, r6
 800d5d6:	461e      	mov	r6, r3
 800d5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5dc:	2a30      	cmp	r2, #48	@ 0x30
 800d5de:	d0fa      	beq.n	800d5d6 <_dtoa_r+0xb06>
 800d5e0:	e5c2      	b.n	800d168 <_dtoa_r+0x698>
 800d5e2:	459a      	cmp	sl, r3
 800d5e4:	d1a4      	bne.n	800d530 <_dtoa_r+0xa60>
 800d5e6:	9b04      	ldr	r3, [sp, #16]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	2331      	movs	r3, #49	@ 0x31
 800d5ee:	f88a 3000 	strb.w	r3, [sl]
 800d5f2:	e5b9      	b.n	800d168 <_dtoa_r+0x698>
 800d5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d654 <_dtoa_r+0xb84>
 800d5fa:	b11b      	cbz	r3, 800d604 <_dtoa_r+0xb34>
 800d5fc:	f10a 0308 	add.w	r3, sl, #8
 800d600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	4650      	mov	r0, sl
 800d606:	b019      	add	sp, #100	@ 0x64
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60e:	2b01      	cmp	r3, #1
 800d610:	f77f ae37 	ble.w	800d282 <_dtoa_r+0x7b2>
 800d614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d616:	930a      	str	r3, [sp, #40]	@ 0x28
 800d618:	2001      	movs	r0, #1
 800d61a:	e655      	b.n	800d2c8 <_dtoa_r+0x7f8>
 800d61c:	9b00      	ldr	r3, [sp, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f77f aed6 	ble.w	800d3d0 <_dtoa_r+0x900>
 800d624:	4656      	mov	r6, sl
 800d626:	4621      	mov	r1, r4
 800d628:	4648      	mov	r0, r9
 800d62a:	f7ff f9c7 	bl	800c9bc <quorem>
 800d62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d632:	f806 8b01 	strb.w	r8, [r6], #1
 800d636:	9b00      	ldr	r3, [sp, #0]
 800d638:	eba6 020a 	sub.w	r2, r6, sl
 800d63c:	4293      	cmp	r3, r2
 800d63e:	ddb3      	ble.n	800d5a8 <_dtoa_r+0xad8>
 800d640:	4649      	mov	r1, r9
 800d642:	2300      	movs	r3, #0
 800d644:	220a      	movs	r2, #10
 800d646:	4658      	mov	r0, fp
 800d648:	f000 f8b2 	bl	800d7b0 <__multadd>
 800d64c:	4681      	mov	r9, r0
 800d64e:	e7ea      	b.n	800d626 <_dtoa_r+0xb56>
 800d650:	0800eee7 	.word	0x0800eee7
 800d654:	0800ee82 	.word	0x0800ee82

0800d658 <_free_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4605      	mov	r5, r0
 800d65c:	2900      	cmp	r1, #0
 800d65e:	d041      	beq.n	800d6e4 <_free_r+0x8c>
 800d660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d664:	1f0c      	subs	r4, r1, #4
 800d666:	2b00      	cmp	r3, #0
 800d668:	bfb8      	it	lt
 800d66a:	18e4      	addlt	r4, r4, r3
 800d66c:	f7fe fa2a 	bl	800bac4 <__malloc_lock>
 800d670:	4a1d      	ldr	r2, [pc, #116]	@ (800d6e8 <_free_r+0x90>)
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	b933      	cbnz	r3, 800d684 <_free_r+0x2c>
 800d676:	6063      	str	r3, [r4, #4]
 800d678:	6014      	str	r4, [r2, #0]
 800d67a:	4628      	mov	r0, r5
 800d67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d680:	f7fe ba26 	b.w	800bad0 <__malloc_unlock>
 800d684:	42a3      	cmp	r3, r4
 800d686:	d908      	bls.n	800d69a <_free_r+0x42>
 800d688:	6820      	ldr	r0, [r4, #0]
 800d68a:	1821      	adds	r1, r4, r0
 800d68c:	428b      	cmp	r3, r1
 800d68e:	bf01      	itttt	eq
 800d690:	6819      	ldreq	r1, [r3, #0]
 800d692:	685b      	ldreq	r3, [r3, #4]
 800d694:	1809      	addeq	r1, r1, r0
 800d696:	6021      	streq	r1, [r4, #0]
 800d698:	e7ed      	b.n	800d676 <_free_r+0x1e>
 800d69a:	461a      	mov	r2, r3
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	b10b      	cbz	r3, 800d6a4 <_free_r+0x4c>
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	d9fa      	bls.n	800d69a <_free_r+0x42>
 800d6a4:	6811      	ldr	r1, [r2, #0]
 800d6a6:	1850      	adds	r0, r2, r1
 800d6a8:	42a0      	cmp	r0, r4
 800d6aa:	d10b      	bne.n	800d6c4 <_free_r+0x6c>
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	4401      	add	r1, r0
 800d6b0:	1850      	adds	r0, r2, r1
 800d6b2:	4283      	cmp	r3, r0
 800d6b4:	6011      	str	r1, [r2, #0]
 800d6b6:	d1e0      	bne.n	800d67a <_free_r+0x22>
 800d6b8:	6818      	ldr	r0, [r3, #0]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	6053      	str	r3, [r2, #4]
 800d6be:	4408      	add	r0, r1
 800d6c0:	6010      	str	r0, [r2, #0]
 800d6c2:	e7da      	b.n	800d67a <_free_r+0x22>
 800d6c4:	d902      	bls.n	800d6cc <_free_r+0x74>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	e7d6      	b.n	800d67a <_free_r+0x22>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	1821      	adds	r1, r4, r0
 800d6d0:	428b      	cmp	r3, r1
 800d6d2:	bf04      	itt	eq
 800d6d4:	6819      	ldreq	r1, [r3, #0]
 800d6d6:	685b      	ldreq	r3, [r3, #4]
 800d6d8:	6063      	str	r3, [r4, #4]
 800d6da:	bf04      	itt	eq
 800d6dc:	1809      	addeq	r1, r1, r0
 800d6de:	6021      	streq	r1, [r4, #0]
 800d6e0:	6054      	str	r4, [r2, #4]
 800d6e2:	e7ca      	b.n	800d67a <_free_r+0x22>
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20003378 	.word	0x20003378

0800d6ec <_Balloc>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	69c6      	ldr	r6, [r0, #28]
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	460d      	mov	r5, r1
 800d6f4:	b976      	cbnz	r6, 800d714 <_Balloc+0x28>
 800d6f6:	2010      	movs	r0, #16
 800d6f8:	f7fe f93a 	bl	800b970 <malloc>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	61e0      	str	r0, [r4, #28]
 800d700:	b920      	cbnz	r0, 800d70c <_Balloc+0x20>
 800d702:	4b18      	ldr	r3, [pc, #96]	@ (800d764 <_Balloc+0x78>)
 800d704:	4818      	ldr	r0, [pc, #96]	@ (800d768 <_Balloc+0x7c>)
 800d706:	216b      	movs	r1, #107	@ 0x6b
 800d708:	f7ff f93a 	bl	800c980 <__assert_func>
 800d70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d710:	6006      	str	r6, [r0, #0]
 800d712:	60c6      	str	r6, [r0, #12]
 800d714:	69e6      	ldr	r6, [r4, #28]
 800d716:	68f3      	ldr	r3, [r6, #12]
 800d718:	b183      	cbz	r3, 800d73c <_Balloc+0x50>
 800d71a:	69e3      	ldr	r3, [r4, #28]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d722:	b9b8      	cbnz	r0, 800d754 <_Balloc+0x68>
 800d724:	2101      	movs	r1, #1
 800d726:	fa01 f605 	lsl.w	r6, r1, r5
 800d72a:	1d72      	adds	r2, r6, #5
 800d72c:	0092      	lsls	r2, r2, #2
 800d72e:	4620      	mov	r0, r4
 800d730:	f7fe f90a 	bl	800b948 <_calloc_r>
 800d734:	b160      	cbz	r0, 800d750 <_Balloc+0x64>
 800d736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d73a:	e00e      	b.n	800d75a <_Balloc+0x6e>
 800d73c:	2221      	movs	r2, #33	@ 0x21
 800d73e:	2104      	movs	r1, #4
 800d740:	4620      	mov	r0, r4
 800d742:	f7fe f901 	bl	800b948 <_calloc_r>
 800d746:	69e3      	ldr	r3, [r4, #28]
 800d748:	60f0      	str	r0, [r6, #12]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1e4      	bne.n	800d71a <_Balloc+0x2e>
 800d750:	2000      	movs	r0, #0
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	6802      	ldr	r2, [r0, #0]
 800d756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d75a:	2300      	movs	r3, #0
 800d75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d760:	e7f7      	b.n	800d752 <_Balloc+0x66>
 800d762:	bf00      	nop
 800d764:	0800edd5 	.word	0x0800edd5
 800d768:	0800eef8 	.word	0x0800eef8

0800d76c <_Bfree>:
 800d76c:	b570      	push	{r4, r5, r6, lr}
 800d76e:	69c6      	ldr	r6, [r0, #28]
 800d770:	4605      	mov	r5, r0
 800d772:	460c      	mov	r4, r1
 800d774:	b976      	cbnz	r6, 800d794 <_Bfree+0x28>
 800d776:	2010      	movs	r0, #16
 800d778:	f7fe f8fa 	bl	800b970 <malloc>
 800d77c:	4602      	mov	r2, r0
 800d77e:	61e8      	str	r0, [r5, #28]
 800d780:	b920      	cbnz	r0, 800d78c <_Bfree+0x20>
 800d782:	4b09      	ldr	r3, [pc, #36]	@ (800d7a8 <_Bfree+0x3c>)
 800d784:	4809      	ldr	r0, [pc, #36]	@ (800d7ac <_Bfree+0x40>)
 800d786:	218f      	movs	r1, #143	@ 0x8f
 800d788:	f7ff f8fa 	bl	800c980 <__assert_func>
 800d78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d790:	6006      	str	r6, [r0, #0]
 800d792:	60c6      	str	r6, [r0, #12]
 800d794:	b13c      	cbz	r4, 800d7a6 <_Bfree+0x3a>
 800d796:	69eb      	ldr	r3, [r5, #28]
 800d798:	6862      	ldr	r2, [r4, #4]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7a0:	6021      	str	r1, [r4, #0]
 800d7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7a6:	bd70      	pop	{r4, r5, r6, pc}
 800d7a8:	0800edd5 	.word	0x0800edd5
 800d7ac:	0800eef8 	.word	0x0800eef8

0800d7b0 <__multadd>:
 800d7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b4:	690d      	ldr	r5, [r1, #16]
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	461e      	mov	r6, r3
 800d7bc:	f101 0c14 	add.w	ip, r1, #20
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	f8dc 3000 	ldr.w	r3, [ip]
 800d7c6:	b299      	uxth	r1, r3
 800d7c8:	fb02 6101 	mla	r1, r2, r1, r6
 800d7cc:	0c1e      	lsrs	r6, r3, #16
 800d7ce:	0c0b      	lsrs	r3, r1, #16
 800d7d0:	fb02 3306 	mla	r3, r2, r6, r3
 800d7d4:	b289      	uxth	r1, r1
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7dc:	4285      	cmp	r5, r0
 800d7de:	f84c 1b04 	str.w	r1, [ip], #4
 800d7e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7e6:	dcec      	bgt.n	800d7c2 <__multadd+0x12>
 800d7e8:	b30e      	cbz	r6, 800d82e <__multadd+0x7e>
 800d7ea:	68a3      	ldr	r3, [r4, #8]
 800d7ec:	42ab      	cmp	r3, r5
 800d7ee:	dc19      	bgt.n	800d824 <__multadd+0x74>
 800d7f0:	6861      	ldr	r1, [r4, #4]
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	3101      	adds	r1, #1
 800d7f6:	f7ff ff79 	bl	800d6ec <_Balloc>
 800d7fa:	4680      	mov	r8, r0
 800d7fc:	b928      	cbnz	r0, 800d80a <__multadd+0x5a>
 800d7fe:	4602      	mov	r2, r0
 800d800:	4b0c      	ldr	r3, [pc, #48]	@ (800d834 <__multadd+0x84>)
 800d802:	480d      	ldr	r0, [pc, #52]	@ (800d838 <__multadd+0x88>)
 800d804:	21ba      	movs	r1, #186	@ 0xba
 800d806:	f7ff f8bb 	bl	800c980 <__assert_func>
 800d80a:	6922      	ldr	r2, [r4, #16]
 800d80c:	3202      	adds	r2, #2
 800d80e:	f104 010c 	add.w	r1, r4, #12
 800d812:	0092      	lsls	r2, r2, #2
 800d814:	300c      	adds	r0, #12
 800d816:	f7ff f8a4 	bl	800c962 <memcpy>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7ff ffa5 	bl	800d76c <_Bfree>
 800d822:	4644      	mov	r4, r8
 800d824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d828:	3501      	adds	r5, #1
 800d82a:	615e      	str	r6, [r3, #20]
 800d82c:	6125      	str	r5, [r4, #16]
 800d82e:	4620      	mov	r0, r4
 800d830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d834:	0800eee7 	.word	0x0800eee7
 800d838:	0800eef8 	.word	0x0800eef8

0800d83c <__hi0bits>:
 800d83c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d840:	4603      	mov	r3, r0
 800d842:	bf36      	itet	cc
 800d844:	0403      	lslcc	r3, r0, #16
 800d846:	2000      	movcs	r0, #0
 800d848:	2010      	movcc	r0, #16
 800d84a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d84e:	bf3c      	itt	cc
 800d850:	021b      	lslcc	r3, r3, #8
 800d852:	3008      	addcc	r0, #8
 800d854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d858:	bf3c      	itt	cc
 800d85a:	011b      	lslcc	r3, r3, #4
 800d85c:	3004      	addcc	r0, #4
 800d85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d862:	bf3c      	itt	cc
 800d864:	009b      	lslcc	r3, r3, #2
 800d866:	3002      	addcc	r0, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	db05      	blt.n	800d878 <__hi0bits+0x3c>
 800d86c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d870:	f100 0001 	add.w	r0, r0, #1
 800d874:	bf08      	it	eq
 800d876:	2020      	moveq	r0, #32
 800d878:	4770      	bx	lr

0800d87a <__lo0bits>:
 800d87a:	6803      	ldr	r3, [r0, #0]
 800d87c:	4602      	mov	r2, r0
 800d87e:	f013 0007 	ands.w	r0, r3, #7
 800d882:	d00b      	beq.n	800d89c <__lo0bits+0x22>
 800d884:	07d9      	lsls	r1, r3, #31
 800d886:	d421      	bmi.n	800d8cc <__lo0bits+0x52>
 800d888:	0798      	lsls	r0, r3, #30
 800d88a:	bf49      	itett	mi
 800d88c:	085b      	lsrmi	r3, r3, #1
 800d88e:	089b      	lsrpl	r3, r3, #2
 800d890:	2001      	movmi	r0, #1
 800d892:	6013      	strmi	r3, [r2, #0]
 800d894:	bf5c      	itt	pl
 800d896:	6013      	strpl	r3, [r2, #0]
 800d898:	2002      	movpl	r0, #2
 800d89a:	4770      	bx	lr
 800d89c:	b299      	uxth	r1, r3
 800d89e:	b909      	cbnz	r1, 800d8a4 <__lo0bits+0x2a>
 800d8a0:	0c1b      	lsrs	r3, r3, #16
 800d8a2:	2010      	movs	r0, #16
 800d8a4:	b2d9      	uxtb	r1, r3
 800d8a6:	b909      	cbnz	r1, 800d8ac <__lo0bits+0x32>
 800d8a8:	3008      	adds	r0, #8
 800d8aa:	0a1b      	lsrs	r3, r3, #8
 800d8ac:	0719      	lsls	r1, r3, #28
 800d8ae:	bf04      	itt	eq
 800d8b0:	091b      	lsreq	r3, r3, #4
 800d8b2:	3004      	addeq	r0, #4
 800d8b4:	0799      	lsls	r1, r3, #30
 800d8b6:	bf04      	itt	eq
 800d8b8:	089b      	lsreq	r3, r3, #2
 800d8ba:	3002      	addeq	r0, #2
 800d8bc:	07d9      	lsls	r1, r3, #31
 800d8be:	d403      	bmi.n	800d8c8 <__lo0bits+0x4e>
 800d8c0:	085b      	lsrs	r3, r3, #1
 800d8c2:	f100 0001 	add.w	r0, r0, #1
 800d8c6:	d003      	beq.n	800d8d0 <__lo0bits+0x56>
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	4770      	bx	lr
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	4770      	bx	lr
 800d8d0:	2020      	movs	r0, #32
 800d8d2:	4770      	bx	lr

0800d8d4 <__i2b>:
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	2101      	movs	r1, #1
 800d8da:	f7ff ff07 	bl	800d6ec <_Balloc>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	b928      	cbnz	r0, 800d8ee <__i2b+0x1a>
 800d8e2:	4b05      	ldr	r3, [pc, #20]	@ (800d8f8 <__i2b+0x24>)
 800d8e4:	4805      	ldr	r0, [pc, #20]	@ (800d8fc <__i2b+0x28>)
 800d8e6:	f240 1145 	movw	r1, #325	@ 0x145
 800d8ea:	f7ff f849 	bl	800c980 <__assert_func>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	6144      	str	r4, [r0, #20]
 800d8f2:	6103      	str	r3, [r0, #16]
 800d8f4:	bd10      	pop	{r4, pc}
 800d8f6:	bf00      	nop
 800d8f8:	0800eee7 	.word	0x0800eee7
 800d8fc:	0800eef8 	.word	0x0800eef8

0800d900 <__multiply>:
 800d900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d904:	4614      	mov	r4, r2
 800d906:	690a      	ldr	r2, [r1, #16]
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	bfa8      	it	ge
 800d90e:	4623      	movge	r3, r4
 800d910:	460f      	mov	r7, r1
 800d912:	bfa4      	itt	ge
 800d914:	460c      	movge	r4, r1
 800d916:	461f      	movge	r7, r3
 800d918:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d91c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d920:	68a3      	ldr	r3, [r4, #8]
 800d922:	6861      	ldr	r1, [r4, #4]
 800d924:	eb0a 0609 	add.w	r6, sl, r9
 800d928:	42b3      	cmp	r3, r6
 800d92a:	b085      	sub	sp, #20
 800d92c:	bfb8      	it	lt
 800d92e:	3101      	addlt	r1, #1
 800d930:	f7ff fedc 	bl	800d6ec <_Balloc>
 800d934:	b930      	cbnz	r0, 800d944 <__multiply+0x44>
 800d936:	4602      	mov	r2, r0
 800d938:	4b44      	ldr	r3, [pc, #272]	@ (800da4c <__multiply+0x14c>)
 800d93a:	4845      	ldr	r0, [pc, #276]	@ (800da50 <__multiply+0x150>)
 800d93c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d940:	f7ff f81e 	bl	800c980 <__assert_func>
 800d944:	f100 0514 	add.w	r5, r0, #20
 800d948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d94c:	462b      	mov	r3, r5
 800d94e:	2200      	movs	r2, #0
 800d950:	4543      	cmp	r3, r8
 800d952:	d321      	bcc.n	800d998 <__multiply+0x98>
 800d954:	f107 0114 	add.w	r1, r7, #20
 800d958:	f104 0214 	add.w	r2, r4, #20
 800d95c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d960:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d964:	9302      	str	r3, [sp, #8]
 800d966:	1b13      	subs	r3, r2, r4
 800d968:	3b15      	subs	r3, #21
 800d96a:	f023 0303 	bic.w	r3, r3, #3
 800d96e:	3304      	adds	r3, #4
 800d970:	f104 0715 	add.w	r7, r4, #21
 800d974:	42ba      	cmp	r2, r7
 800d976:	bf38      	it	cc
 800d978:	2304      	movcc	r3, #4
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	9103      	str	r1, [sp, #12]
 800d980:	428b      	cmp	r3, r1
 800d982:	d80c      	bhi.n	800d99e <__multiply+0x9e>
 800d984:	2e00      	cmp	r6, #0
 800d986:	dd03      	ble.n	800d990 <__multiply+0x90>
 800d988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d05b      	beq.n	800da48 <__multiply+0x148>
 800d990:	6106      	str	r6, [r0, #16]
 800d992:	b005      	add	sp, #20
 800d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d998:	f843 2b04 	str.w	r2, [r3], #4
 800d99c:	e7d8      	b.n	800d950 <__multiply+0x50>
 800d99e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d9a2:	f1ba 0f00 	cmp.w	sl, #0
 800d9a6:	d024      	beq.n	800d9f2 <__multiply+0xf2>
 800d9a8:	f104 0e14 	add.w	lr, r4, #20
 800d9ac:	46a9      	mov	r9, r5
 800d9ae:	f04f 0c00 	mov.w	ip, #0
 800d9b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9b6:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ba:	fa1f fb87 	uxth.w	fp, r7
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d9c8:	f8d9 7000 	ldr.w	r7, [r9]
 800d9cc:	4463      	add	r3, ip
 800d9ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9d2:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9e0:	4572      	cmp	r2, lr
 800d9e2:	f849 3b04 	str.w	r3, [r9], #4
 800d9e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9ea:	d8e2      	bhi.n	800d9b2 <__multiply+0xb2>
 800d9ec:	9b01      	ldr	r3, [sp, #4]
 800d9ee:	f845 c003 	str.w	ip, [r5, r3]
 800d9f2:	9b03      	ldr	r3, [sp, #12]
 800d9f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9f8:	3104      	adds	r1, #4
 800d9fa:	f1b9 0f00 	cmp.w	r9, #0
 800d9fe:	d021      	beq.n	800da44 <__multiply+0x144>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	f104 0c14 	add.w	ip, r4, #20
 800da06:	46ae      	mov	lr, r5
 800da08:	f04f 0a00 	mov.w	sl, #0
 800da0c:	f8bc b000 	ldrh.w	fp, [ip]
 800da10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da14:	fb09 770b 	mla	r7, r9, fp, r7
 800da18:	4457      	add	r7, sl
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da20:	f84e 3b04 	str.w	r3, [lr], #4
 800da24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da2c:	f8be 3000 	ldrh.w	r3, [lr]
 800da30:	fb09 330a 	mla	r3, r9, sl, r3
 800da34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da38:	4562      	cmp	r2, ip
 800da3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da3e:	d8e5      	bhi.n	800da0c <__multiply+0x10c>
 800da40:	9f01      	ldr	r7, [sp, #4]
 800da42:	51eb      	str	r3, [r5, r7]
 800da44:	3504      	adds	r5, #4
 800da46:	e799      	b.n	800d97c <__multiply+0x7c>
 800da48:	3e01      	subs	r6, #1
 800da4a:	e79b      	b.n	800d984 <__multiply+0x84>
 800da4c:	0800eee7 	.word	0x0800eee7
 800da50:	0800eef8 	.word	0x0800eef8

0800da54 <__pow5mult>:
 800da54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da58:	4615      	mov	r5, r2
 800da5a:	f012 0203 	ands.w	r2, r2, #3
 800da5e:	4607      	mov	r7, r0
 800da60:	460e      	mov	r6, r1
 800da62:	d007      	beq.n	800da74 <__pow5mult+0x20>
 800da64:	4c25      	ldr	r4, [pc, #148]	@ (800dafc <__pow5mult+0xa8>)
 800da66:	3a01      	subs	r2, #1
 800da68:	2300      	movs	r3, #0
 800da6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da6e:	f7ff fe9f 	bl	800d7b0 <__multadd>
 800da72:	4606      	mov	r6, r0
 800da74:	10ad      	asrs	r5, r5, #2
 800da76:	d03d      	beq.n	800daf4 <__pow5mult+0xa0>
 800da78:	69fc      	ldr	r4, [r7, #28]
 800da7a:	b97c      	cbnz	r4, 800da9c <__pow5mult+0x48>
 800da7c:	2010      	movs	r0, #16
 800da7e:	f7fd ff77 	bl	800b970 <malloc>
 800da82:	4602      	mov	r2, r0
 800da84:	61f8      	str	r0, [r7, #28]
 800da86:	b928      	cbnz	r0, 800da94 <__pow5mult+0x40>
 800da88:	4b1d      	ldr	r3, [pc, #116]	@ (800db00 <__pow5mult+0xac>)
 800da8a:	481e      	ldr	r0, [pc, #120]	@ (800db04 <__pow5mult+0xb0>)
 800da8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da90:	f7fe ff76 	bl	800c980 <__assert_func>
 800da94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da98:	6004      	str	r4, [r0, #0]
 800da9a:	60c4      	str	r4, [r0, #12]
 800da9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800daa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800daa4:	b94c      	cbnz	r4, 800daba <__pow5mult+0x66>
 800daa6:	f240 2171 	movw	r1, #625	@ 0x271
 800daaa:	4638      	mov	r0, r7
 800daac:	f7ff ff12 	bl	800d8d4 <__i2b>
 800dab0:	2300      	movs	r3, #0
 800dab2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dab6:	4604      	mov	r4, r0
 800dab8:	6003      	str	r3, [r0, #0]
 800daba:	f04f 0900 	mov.w	r9, #0
 800dabe:	07eb      	lsls	r3, r5, #31
 800dac0:	d50a      	bpl.n	800dad8 <__pow5mult+0x84>
 800dac2:	4631      	mov	r1, r6
 800dac4:	4622      	mov	r2, r4
 800dac6:	4638      	mov	r0, r7
 800dac8:	f7ff ff1a 	bl	800d900 <__multiply>
 800dacc:	4631      	mov	r1, r6
 800dace:	4680      	mov	r8, r0
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff fe4b 	bl	800d76c <_Bfree>
 800dad6:	4646      	mov	r6, r8
 800dad8:	106d      	asrs	r5, r5, #1
 800dada:	d00b      	beq.n	800daf4 <__pow5mult+0xa0>
 800dadc:	6820      	ldr	r0, [r4, #0]
 800dade:	b938      	cbnz	r0, 800daf0 <__pow5mult+0x9c>
 800dae0:	4622      	mov	r2, r4
 800dae2:	4621      	mov	r1, r4
 800dae4:	4638      	mov	r0, r7
 800dae6:	f7ff ff0b 	bl	800d900 <__multiply>
 800daea:	6020      	str	r0, [r4, #0]
 800daec:	f8c0 9000 	str.w	r9, [r0]
 800daf0:	4604      	mov	r4, r0
 800daf2:	e7e4      	b.n	800dabe <__pow5mult+0x6a>
 800daf4:	4630      	mov	r0, r6
 800daf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dafa:	bf00      	nop
 800dafc:	0800ef54 	.word	0x0800ef54
 800db00:	0800edd5 	.word	0x0800edd5
 800db04:	0800eef8 	.word	0x0800eef8

0800db08 <__lshift>:
 800db08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db0c:	460c      	mov	r4, r1
 800db0e:	6849      	ldr	r1, [r1, #4]
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db16:	68a3      	ldr	r3, [r4, #8]
 800db18:	4607      	mov	r7, r0
 800db1a:	4691      	mov	r9, r2
 800db1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db20:	f108 0601 	add.w	r6, r8, #1
 800db24:	42b3      	cmp	r3, r6
 800db26:	db0b      	blt.n	800db40 <__lshift+0x38>
 800db28:	4638      	mov	r0, r7
 800db2a:	f7ff fddf 	bl	800d6ec <_Balloc>
 800db2e:	4605      	mov	r5, r0
 800db30:	b948      	cbnz	r0, 800db46 <__lshift+0x3e>
 800db32:	4602      	mov	r2, r0
 800db34:	4b28      	ldr	r3, [pc, #160]	@ (800dbd8 <__lshift+0xd0>)
 800db36:	4829      	ldr	r0, [pc, #164]	@ (800dbdc <__lshift+0xd4>)
 800db38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db3c:	f7fe ff20 	bl	800c980 <__assert_func>
 800db40:	3101      	adds	r1, #1
 800db42:	005b      	lsls	r3, r3, #1
 800db44:	e7ee      	b.n	800db24 <__lshift+0x1c>
 800db46:	2300      	movs	r3, #0
 800db48:	f100 0114 	add.w	r1, r0, #20
 800db4c:	f100 0210 	add.w	r2, r0, #16
 800db50:	4618      	mov	r0, r3
 800db52:	4553      	cmp	r3, sl
 800db54:	db33      	blt.n	800dbbe <__lshift+0xb6>
 800db56:	6920      	ldr	r0, [r4, #16]
 800db58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db5c:	f104 0314 	add.w	r3, r4, #20
 800db60:	f019 091f 	ands.w	r9, r9, #31
 800db64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db6c:	d02b      	beq.n	800dbc6 <__lshift+0xbe>
 800db6e:	f1c9 0e20 	rsb	lr, r9, #32
 800db72:	468a      	mov	sl, r1
 800db74:	2200      	movs	r2, #0
 800db76:	6818      	ldr	r0, [r3, #0]
 800db78:	fa00 f009 	lsl.w	r0, r0, r9
 800db7c:	4310      	orrs	r0, r2
 800db7e:	f84a 0b04 	str.w	r0, [sl], #4
 800db82:	f853 2b04 	ldr.w	r2, [r3], #4
 800db86:	459c      	cmp	ip, r3
 800db88:	fa22 f20e 	lsr.w	r2, r2, lr
 800db8c:	d8f3      	bhi.n	800db76 <__lshift+0x6e>
 800db8e:	ebac 0304 	sub.w	r3, ip, r4
 800db92:	3b15      	subs	r3, #21
 800db94:	f023 0303 	bic.w	r3, r3, #3
 800db98:	3304      	adds	r3, #4
 800db9a:	f104 0015 	add.w	r0, r4, #21
 800db9e:	4584      	cmp	ip, r0
 800dba0:	bf38      	it	cc
 800dba2:	2304      	movcc	r3, #4
 800dba4:	50ca      	str	r2, [r1, r3]
 800dba6:	b10a      	cbz	r2, 800dbac <__lshift+0xa4>
 800dba8:	f108 0602 	add.w	r6, r8, #2
 800dbac:	3e01      	subs	r6, #1
 800dbae:	4638      	mov	r0, r7
 800dbb0:	612e      	str	r6, [r5, #16]
 800dbb2:	4621      	mov	r1, r4
 800dbb4:	f7ff fdda 	bl	800d76c <_Bfree>
 800dbb8:	4628      	mov	r0, r5
 800dbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	e7c5      	b.n	800db52 <__lshift+0x4a>
 800dbc6:	3904      	subs	r1, #4
 800dbc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbd0:	459c      	cmp	ip, r3
 800dbd2:	d8f9      	bhi.n	800dbc8 <__lshift+0xc0>
 800dbd4:	e7ea      	b.n	800dbac <__lshift+0xa4>
 800dbd6:	bf00      	nop
 800dbd8:	0800eee7 	.word	0x0800eee7
 800dbdc:	0800eef8 	.word	0x0800eef8

0800dbe0 <__mcmp>:
 800dbe0:	690a      	ldr	r2, [r1, #16]
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	6900      	ldr	r0, [r0, #16]
 800dbe6:	1a80      	subs	r0, r0, r2
 800dbe8:	b530      	push	{r4, r5, lr}
 800dbea:	d10e      	bne.n	800dc0a <__mcmp+0x2a>
 800dbec:	3314      	adds	r3, #20
 800dbee:	3114      	adds	r1, #20
 800dbf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc00:	4295      	cmp	r5, r2
 800dc02:	d003      	beq.n	800dc0c <__mcmp+0x2c>
 800dc04:	d205      	bcs.n	800dc12 <__mcmp+0x32>
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0a:	bd30      	pop	{r4, r5, pc}
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	d3f3      	bcc.n	800dbf8 <__mcmp+0x18>
 800dc10:	e7fb      	b.n	800dc0a <__mcmp+0x2a>
 800dc12:	2001      	movs	r0, #1
 800dc14:	e7f9      	b.n	800dc0a <__mcmp+0x2a>
	...

0800dc18 <__mdiff>:
 800dc18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	4689      	mov	r9, r1
 800dc1e:	4606      	mov	r6, r0
 800dc20:	4611      	mov	r1, r2
 800dc22:	4648      	mov	r0, r9
 800dc24:	4614      	mov	r4, r2
 800dc26:	f7ff ffdb 	bl	800dbe0 <__mcmp>
 800dc2a:	1e05      	subs	r5, r0, #0
 800dc2c:	d112      	bne.n	800dc54 <__mdiff+0x3c>
 800dc2e:	4629      	mov	r1, r5
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7ff fd5b 	bl	800d6ec <_Balloc>
 800dc36:	4602      	mov	r2, r0
 800dc38:	b928      	cbnz	r0, 800dc46 <__mdiff+0x2e>
 800dc3a:	4b3f      	ldr	r3, [pc, #252]	@ (800dd38 <__mdiff+0x120>)
 800dc3c:	f240 2137 	movw	r1, #567	@ 0x237
 800dc40:	483e      	ldr	r0, [pc, #248]	@ (800dd3c <__mdiff+0x124>)
 800dc42:	f7fe fe9d 	bl	800c980 <__assert_func>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	b003      	add	sp, #12
 800dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc54:	bfbc      	itt	lt
 800dc56:	464b      	movlt	r3, r9
 800dc58:	46a1      	movlt	r9, r4
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc60:	bfba      	itte	lt
 800dc62:	461c      	movlt	r4, r3
 800dc64:	2501      	movlt	r5, #1
 800dc66:	2500      	movge	r5, #0
 800dc68:	f7ff fd40 	bl	800d6ec <_Balloc>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	b918      	cbnz	r0, 800dc78 <__mdiff+0x60>
 800dc70:	4b31      	ldr	r3, [pc, #196]	@ (800dd38 <__mdiff+0x120>)
 800dc72:	f240 2145 	movw	r1, #581	@ 0x245
 800dc76:	e7e3      	b.n	800dc40 <__mdiff+0x28>
 800dc78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc7c:	6926      	ldr	r6, [r4, #16]
 800dc7e:	60c5      	str	r5, [r0, #12]
 800dc80:	f109 0310 	add.w	r3, r9, #16
 800dc84:	f109 0514 	add.w	r5, r9, #20
 800dc88:	f104 0e14 	add.w	lr, r4, #20
 800dc8c:	f100 0b14 	add.w	fp, r0, #20
 800dc90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	46d9      	mov	r9, fp
 800dc9c:	f04f 0c00 	mov.w	ip, #0
 800dca0:	9b01      	ldr	r3, [sp, #4]
 800dca2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dca6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dcaa:	9301      	str	r3, [sp, #4]
 800dcac:	fa1f f38a 	uxth.w	r3, sl
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	b283      	uxth	r3, r0
 800dcb4:	1acb      	subs	r3, r1, r3
 800dcb6:	0c00      	lsrs	r0, r0, #16
 800dcb8:	4463      	add	r3, ip
 800dcba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dcbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dcc8:	4576      	cmp	r6, lr
 800dcca:	f849 3b04 	str.w	r3, [r9], #4
 800dcce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcd2:	d8e5      	bhi.n	800dca0 <__mdiff+0x88>
 800dcd4:	1b33      	subs	r3, r6, r4
 800dcd6:	3b15      	subs	r3, #21
 800dcd8:	f023 0303 	bic.w	r3, r3, #3
 800dcdc:	3415      	adds	r4, #21
 800dcde:	3304      	adds	r3, #4
 800dce0:	42a6      	cmp	r6, r4
 800dce2:	bf38      	it	cc
 800dce4:	2304      	movcc	r3, #4
 800dce6:	441d      	add	r5, r3
 800dce8:	445b      	add	r3, fp
 800dcea:	461e      	mov	r6, r3
 800dcec:	462c      	mov	r4, r5
 800dcee:	4544      	cmp	r4, r8
 800dcf0:	d30e      	bcc.n	800dd10 <__mdiff+0xf8>
 800dcf2:	f108 0103 	add.w	r1, r8, #3
 800dcf6:	1b49      	subs	r1, r1, r5
 800dcf8:	f021 0103 	bic.w	r1, r1, #3
 800dcfc:	3d03      	subs	r5, #3
 800dcfe:	45a8      	cmp	r8, r5
 800dd00:	bf38      	it	cc
 800dd02:	2100      	movcc	r1, #0
 800dd04:	440b      	add	r3, r1
 800dd06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd0a:	b191      	cbz	r1, 800dd32 <__mdiff+0x11a>
 800dd0c:	6117      	str	r7, [r2, #16]
 800dd0e:	e79d      	b.n	800dc4c <__mdiff+0x34>
 800dd10:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd14:	46e6      	mov	lr, ip
 800dd16:	0c08      	lsrs	r0, r1, #16
 800dd18:	fa1c fc81 	uxtah	ip, ip, r1
 800dd1c:	4471      	add	r1, lr
 800dd1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd22:	b289      	uxth	r1, r1
 800dd24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd28:	f846 1b04 	str.w	r1, [r6], #4
 800dd2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd30:	e7dd      	b.n	800dcee <__mdiff+0xd6>
 800dd32:	3f01      	subs	r7, #1
 800dd34:	e7e7      	b.n	800dd06 <__mdiff+0xee>
 800dd36:	bf00      	nop
 800dd38:	0800eee7 	.word	0x0800eee7
 800dd3c:	0800eef8 	.word	0x0800eef8

0800dd40 <__d2b>:
 800dd40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd44:	460f      	mov	r7, r1
 800dd46:	2101      	movs	r1, #1
 800dd48:	ec59 8b10 	vmov	r8, r9, d0
 800dd4c:	4616      	mov	r6, r2
 800dd4e:	f7ff fccd 	bl	800d6ec <_Balloc>
 800dd52:	4604      	mov	r4, r0
 800dd54:	b930      	cbnz	r0, 800dd64 <__d2b+0x24>
 800dd56:	4602      	mov	r2, r0
 800dd58:	4b23      	ldr	r3, [pc, #140]	@ (800dde8 <__d2b+0xa8>)
 800dd5a:	4824      	ldr	r0, [pc, #144]	@ (800ddec <__d2b+0xac>)
 800dd5c:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd60:	f7fe fe0e 	bl	800c980 <__assert_func>
 800dd64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd6c:	b10d      	cbz	r5, 800dd72 <__d2b+0x32>
 800dd6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd72:	9301      	str	r3, [sp, #4]
 800dd74:	f1b8 0300 	subs.w	r3, r8, #0
 800dd78:	d023      	beq.n	800ddc2 <__d2b+0x82>
 800dd7a:	4668      	mov	r0, sp
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	f7ff fd7c 	bl	800d87a <__lo0bits>
 800dd82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd86:	b1d0      	cbz	r0, 800ddbe <__d2b+0x7e>
 800dd88:	f1c0 0320 	rsb	r3, r0, #32
 800dd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd90:	430b      	orrs	r3, r1
 800dd92:	40c2      	lsrs	r2, r0
 800dd94:	6163      	str	r3, [r4, #20]
 800dd96:	9201      	str	r2, [sp, #4]
 800dd98:	9b01      	ldr	r3, [sp, #4]
 800dd9a:	61a3      	str	r3, [r4, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bf0c      	ite	eq
 800dda0:	2201      	moveq	r2, #1
 800dda2:	2202      	movne	r2, #2
 800dda4:	6122      	str	r2, [r4, #16]
 800dda6:	b1a5      	cbz	r5, 800ddd2 <__d2b+0x92>
 800dda8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ddac:	4405      	add	r5, r0
 800ddae:	603d      	str	r5, [r7, #0]
 800ddb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ddb4:	6030      	str	r0, [r6, #0]
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	b003      	add	sp, #12
 800ddba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddbe:	6161      	str	r1, [r4, #20]
 800ddc0:	e7ea      	b.n	800dd98 <__d2b+0x58>
 800ddc2:	a801      	add	r0, sp, #4
 800ddc4:	f7ff fd59 	bl	800d87a <__lo0bits>
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	6163      	str	r3, [r4, #20]
 800ddcc:	3020      	adds	r0, #32
 800ddce:	2201      	movs	r2, #1
 800ddd0:	e7e8      	b.n	800dda4 <__d2b+0x64>
 800ddd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddda:	6038      	str	r0, [r7, #0]
 800dddc:	6918      	ldr	r0, [r3, #16]
 800ddde:	f7ff fd2d 	bl	800d83c <__hi0bits>
 800dde2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dde6:	e7e5      	b.n	800ddb4 <__d2b+0x74>
 800dde8:	0800eee7 	.word	0x0800eee7
 800ddec:	0800eef8 	.word	0x0800eef8

0800ddf0 <__ssputs_r>:
 800ddf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf4:	688e      	ldr	r6, [r1, #8]
 800ddf6:	461f      	mov	r7, r3
 800ddf8:	42be      	cmp	r6, r7
 800ddfa:	680b      	ldr	r3, [r1, #0]
 800ddfc:	4682      	mov	sl, r0
 800ddfe:	460c      	mov	r4, r1
 800de00:	4690      	mov	r8, r2
 800de02:	d82d      	bhi.n	800de60 <__ssputs_r+0x70>
 800de04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de0c:	d026      	beq.n	800de5c <__ssputs_r+0x6c>
 800de0e:	6965      	ldr	r5, [r4, #20]
 800de10:	6909      	ldr	r1, [r1, #16]
 800de12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de16:	eba3 0901 	sub.w	r9, r3, r1
 800de1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de1e:	1c7b      	adds	r3, r7, #1
 800de20:	444b      	add	r3, r9
 800de22:	106d      	asrs	r5, r5, #1
 800de24:	429d      	cmp	r5, r3
 800de26:	bf38      	it	cc
 800de28:	461d      	movcc	r5, r3
 800de2a:	0553      	lsls	r3, r2, #21
 800de2c:	d527      	bpl.n	800de7e <__ssputs_r+0x8e>
 800de2e:	4629      	mov	r1, r5
 800de30:	f7fd fdc8 	bl	800b9c4 <_malloc_r>
 800de34:	4606      	mov	r6, r0
 800de36:	b360      	cbz	r0, 800de92 <__ssputs_r+0xa2>
 800de38:	6921      	ldr	r1, [r4, #16]
 800de3a:	464a      	mov	r2, r9
 800de3c:	f7fe fd91 	bl	800c962 <memcpy>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	6126      	str	r6, [r4, #16]
 800de4e:	6165      	str	r5, [r4, #20]
 800de50:	444e      	add	r6, r9
 800de52:	eba5 0509 	sub.w	r5, r5, r9
 800de56:	6026      	str	r6, [r4, #0]
 800de58:	60a5      	str	r5, [r4, #8]
 800de5a:	463e      	mov	r6, r7
 800de5c:	42be      	cmp	r6, r7
 800de5e:	d900      	bls.n	800de62 <__ssputs_r+0x72>
 800de60:	463e      	mov	r6, r7
 800de62:	6820      	ldr	r0, [r4, #0]
 800de64:	4632      	mov	r2, r6
 800de66:	4641      	mov	r1, r8
 800de68:	f000 f9d8 	bl	800e21c <memmove>
 800de6c:	68a3      	ldr	r3, [r4, #8]
 800de6e:	1b9b      	subs	r3, r3, r6
 800de70:	60a3      	str	r3, [r4, #8]
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	4433      	add	r3, r6
 800de76:	6023      	str	r3, [r4, #0]
 800de78:	2000      	movs	r0, #0
 800de7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7e:	462a      	mov	r2, r5
 800de80:	f000 f9ff 	bl	800e282 <_realloc_r>
 800de84:	4606      	mov	r6, r0
 800de86:	2800      	cmp	r0, #0
 800de88:	d1e0      	bne.n	800de4c <__ssputs_r+0x5c>
 800de8a:	6921      	ldr	r1, [r4, #16]
 800de8c:	4650      	mov	r0, sl
 800de8e:	f7ff fbe3 	bl	800d658 <_free_r>
 800de92:	230c      	movs	r3, #12
 800de94:	f8ca 3000 	str.w	r3, [sl]
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de9e:	81a3      	strh	r3, [r4, #12]
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	e7e9      	b.n	800de7a <__ssputs_r+0x8a>
	...

0800dea8 <_svfiprintf_r>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	4698      	mov	r8, r3
 800deae:	898b      	ldrh	r3, [r1, #12]
 800deb0:	061b      	lsls	r3, r3, #24
 800deb2:	b09d      	sub	sp, #116	@ 0x74
 800deb4:	4607      	mov	r7, r0
 800deb6:	460d      	mov	r5, r1
 800deb8:	4614      	mov	r4, r2
 800deba:	d510      	bpl.n	800dede <_svfiprintf_r+0x36>
 800debc:	690b      	ldr	r3, [r1, #16]
 800debe:	b973      	cbnz	r3, 800dede <_svfiprintf_r+0x36>
 800dec0:	2140      	movs	r1, #64	@ 0x40
 800dec2:	f7fd fd7f 	bl	800b9c4 <_malloc_r>
 800dec6:	6028      	str	r0, [r5, #0]
 800dec8:	6128      	str	r0, [r5, #16]
 800deca:	b930      	cbnz	r0, 800deda <_svfiprintf_r+0x32>
 800decc:	230c      	movs	r3, #12
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295
 800ded4:	b01d      	add	sp, #116	@ 0x74
 800ded6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deda:	2340      	movs	r3, #64	@ 0x40
 800dedc:	616b      	str	r3, [r5, #20]
 800dede:	2300      	movs	r3, #0
 800dee0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dee2:	2320      	movs	r3, #32
 800dee4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dee8:	f8cd 800c 	str.w	r8, [sp, #12]
 800deec:	2330      	movs	r3, #48	@ 0x30
 800deee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e08c <_svfiprintf_r+0x1e4>
 800def2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800def6:	f04f 0901 	mov.w	r9, #1
 800defa:	4623      	mov	r3, r4
 800defc:	469a      	mov	sl, r3
 800defe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df02:	b10a      	cbz	r2, 800df08 <_svfiprintf_r+0x60>
 800df04:	2a25      	cmp	r2, #37	@ 0x25
 800df06:	d1f9      	bne.n	800defc <_svfiprintf_r+0x54>
 800df08:	ebba 0b04 	subs.w	fp, sl, r4
 800df0c:	d00b      	beq.n	800df26 <_svfiprintf_r+0x7e>
 800df0e:	465b      	mov	r3, fp
 800df10:	4622      	mov	r2, r4
 800df12:	4629      	mov	r1, r5
 800df14:	4638      	mov	r0, r7
 800df16:	f7ff ff6b 	bl	800ddf0 <__ssputs_r>
 800df1a:	3001      	adds	r0, #1
 800df1c:	f000 80a7 	beq.w	800e06e <_svfiprintf_r+0x1c6>
 800df20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df22:	445a      	add	r2, fp
 800df24:	9209      	str	r2, [sp, #36]	@ 0x24
 800df26:	f89a 3000 	ldrb.w	r3, [sl]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f000 809f 	beq.w	800e06e <_svfiprintf_r+0x1c6>
 800df30:	2300      	movs	r3, #0
 800df32:	f04f 32ff 	mov.w	r2, #4294967295
 800df36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df3a:	f10a 0a01 	add.w	sl, sl, #1
 800df3e:	9304      	str	r3, [sp, #16]
 800df40:	9307      	str	r3, [sp, #28]
 800df42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df46:	931a      	str	r3, [sp, #104]	@ 0x68
 800df48:	4654      	mov	r4, sl
 800df4a:	2205      	movs	r2, #5
 800df4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df50:	484e      	ldr	r0, [pc, #312]	@ (800e08c <_svfiprintf_r+0x1e4>)
 800df52:	f7f2 f94d 	bl	80001f0 <memchr>
 800df56:	9a04      	ldr	r2, [sp, #16]
 800df58:	b9d8      	cbnz	r0, 800df92 <_svfiprintf_r+0xea>
 800df5a:	06d0      	lsls	r0, r2, #27
 800df5c:	bf44      	itt	mi
 800df5e:	2320      	movmi	r3, #32
 800df60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df64:	0711      	lsls	r1, r2, #28
 800df66:	bf44      	itt	mi
 800df68:	232b      	movmi	r3, #43	@ 0x2b
 800df6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df6e:	f89a 3000 	ldrb.w	r3, [sl]
 800df72:	2b2a      	cmp	r3, #42	@ 0x2a
 800df74:	d015      	beq.n	800dfa2 <_svfiprintf_r+0xfa>
 800df76:	9a07      	ldr	r2, [sp, #28]
 800df78:	4654      	mov	r4, sl
 800df7a:	2000      	movs	r0, #0
 800df7c:	f04f 0c0a 	mov.w	ip, #10
 800df80:	4621      	mov	r1, r4
 800df82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df86:	3b30      	subs	r3, #48	@ 0x30
 800df88:	2b09      	cmp	r3, #9
 800df8a:	d94b      	bls.n	800e024 <_svfiprintf_r+0x17c>
 800df8c:	b1b0      	cbz	r0, 800dfbc <_svfiprintf_r+0x114>
 800df8e:	9207      	str	r2, [sp, #28]
 800df90:	e014      	b.n	800dfbc <_svfiprintf_r+0x114>
 800df92:	eba0 0308 	sub.w	r3, r0, r8
 800df96:	fa09 f303 	lsl.w	r3, r9, r3
 800df9a:	4313      	orrs	r3, r2
 800df9c:	9304      	str	r3, [sp, #16]
 800df9e:	46a2      	mov	sl, r4
 800dfa0:	e7d2      	b.n	800df48 <_svfiprintf_r+0xa0>
 800dfa2:	9b03      	ldr	r3, [sp, #12]
 800dfa4:	1d19      	adds	r1, r3, #4
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	9103      	str	r1, [sp, #12]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	bfbb      	ittet	lt
 800dfae:	425b      	neglt	r3, r3
 800dfb0:	f042 0202 	orrlt.w	r2, r2, #2
 800dfb4:	9307      	strge	r3, [sp, #28]
 800dfb6:	9307      	strlt	r3, [sp, #28]
 800dfb8:	bfb8      	it	lt
 800dfba:	9204      	strlt	r2, [sp, #16]
 800dfbc:	7823      	ldrb	r3, [r4, #0]
 800dfbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfc0:	d10a      	bne.n	800dfd8 <_svfiprintf_r+0x130>
 800dfc2:	7863      	ldrb	r3, [r4, #1]
 800dfc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfc6:	d132      	bne.n	800e02e <_svfiprintf_r+0x186>
 800dfc8:	9b03      	ldr	r3, [sp, #12]
 800dfca:	1d1a      	adds	r2, r3, #4
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	9203      	str	r2, [sp, #12]
 800dfd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfd4:	3402      	adds	r4, #2
 800dfd6:	9305      	str	r3, [sp, #20]
 800dfd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e09c <_svfiprintf_r+0x1f4>
 800dfdc:	7821      	ldrb	r1, [r4, #0]
 800dfde:	2203      	movs	r2, #3
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	f7f2 f905 	bl	80001f0 <memchr>
 800dfe6:	b138      	cbz	r0, 800dff8 <_svfiprintf_r+0x150>
 800dfe8:	9b04      	ldr	r3, [sp, #16]
 800dfea:	eba0 000a 	sub.w	r0, r0, sl
 800dfee:	2240      	movs	r2, #64	@ 0x40
 800dff0:	4082      	lsls	r2, r0
 800dff2:	4313      	orrs	r3, r2
 800dff4:	3401      	adds	r4, #1
 800dff6:	9304      	str	r3, [sp, #16]
 800dff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dffc:	4824      	ldr	r0, [pc, #144]	@ (800e090 <_svfiprintf_r+0x1e8>)
 800dffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e002:	2206      	movs	r2, #6
 800e004:	f7f2 f8f4 	bl	80001f0 <memchr>
 800e008:	2800      	cmp	r0, #0
 800e00a:	d036      	beq.n	800e07a <_svfiprintf_r+0x1d2>
 800e00c:	4b21      	ldr	r3, [pc, #132]	@ (800e094 <_svfiprintf_r+0x1ec>)
 800e00e:	bb1b      	cbnz	r3, 800e058 <_svfiprintf_r+0x1b0>
 800e010:	9b03      	ldr	r3, [sp, #12]
 800e012:	3307      	adds	r3, #7
 800e014:	f023 0307 	bic.w	r3, r3, #7
 800e018:	3308      	adds	r3, #8
 800e01a:	9303      	str	r3, [sp, #12]
 800e01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e01e:	4433      	add	r3, r6
 800e020:	9309      	str	r3, [sp, #36]	@ 0x24
 800e022:	e76a      	b.n	800defa <_svfiprintf_r+0x52>
 800e024:	fb0c 3202 	mla	r2, ip, r2, r3
 800e028:	460c      	mov	r4, r1
 800e02a:	2001      	movs	r0, #1
 800e02c:	e7a8      	b.n	800df80 <_svfiprintf_r+0xd8>
 800e02e:	2300      	movs	r3, #0
 800e030:	3401      	adds	r4, #1
 800e032:	9305      	str	r3, [sp, #20]
 800e034:	4619      	mov	r1, r3
 800e036:	f04f 0c0a 	mov.w	ip, #10
 800e03a:	4620      	mov	r0, r4
 800e03c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e040:	3a30      	subs	r2, #48	@ 0x30
 800e042:	2a09      	cmp	r2, #9
 800e044:	d903      	bls.n	800e04e <_svfiprintf_r+0x1a6>
 800e046:	2b00      	cmp	r3, #0
 800e048:	d0c6      	beq.n	800dfd8 <_svfiprintf_r+0x130>
 800e04a:	9105      	str	r1, [sp, #20]
 800e04c:	e7c4      	b.n	800dfd8 <_svfiprintf_r+0x130>
 800e04e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e052:	4604      	mov	r4, r0
 800e054:	2301      	movs	r3, #1
 800e056:	e7f0      	b.n	800e03a <_svfiprintf_r+0x192>
 800e058:	ab03      	add	r3, sp, #12
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	462a      	mov	r2, r5
 800e05e:	4b0e      	ldr	r3, [pc, #56]	@ (800e098 <_svfiprintf_r+0x1f0>)
 800e060:	a904      	add	r1, sp, #16
 800e062:	4638      	mov	r0, r7
 800e064:	f7fd fe5e 	bl	800bd24 <_printf_float>
 800e068:	1c42      	adds	r2, r0, #1
 800e06a:	4606      	mov	r6, r0
 800e06c:	d1d6      	bne.n	800e01c <_svfiprintf_r+0x174>
 800e06e:	89ab      	ldrh	r3, [r5, #12]
 800e070:	065b      	lsls	r3, r3, #25
 800e072:	f53f af2d 	bmi.w	800ded0 <_svfiprintf_r+0x28>
 800e076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e078:	e72c      	b.n	800ded4 <_svfiprintf_r+0x2c>
 800e07a:	ab03      	add	r3, sp, #12
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	462a      	mov	r2, r5
 800e080:	4b05      	ldr	r3, [pc, #20]	@ (800e098 <_svfiprintf_r+0x1f0>)
 800e082:	a904      	add	r1, sp, #16
 800e084:	4638      	mov	r0, r7
 800e086:	f7fe f8e5 	bl	800c254 <_printf_i>
 800e08a:	e7ed      	b.n	800e068 <_svfiprintf_r+0x1c0>
 800e08c:	0800f050 	.word	0x0800f050
 800e090:	0800f05a 	.word	0x0800f05a
 800e094:	0800bd25 	.word	0x0800bd25
 800e098:	0800ddf1 	.word	0x0800ddf1
 800e09c:	0800f056 	.word	0x0800f056

0800e0a0 <__sflush_r>:
 800e0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a8:	0716      	lsls	r6, r2, #28
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	460c      	mov	r4, r1
 800e0ae:	d454      	bmi.n	800e15a <__sflush_r+0xba>
 800e0b0:	684b      	ldr	r3, [r1, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	dc02      	bgt.n	800e0bc <__sflush_r+0x1c>
 800e0b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	dd48      	ble.n	800e14e <__sflush_r+0xae>
 800e0bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	d045      	beq.n	800e14e <__sflush_r+0xae>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0c8:	682f      	ldr	r7, [r5, #0]
 800e0ca:	6a21      	ldr	r1, [r4, #32]
 800e0cc:	602b      	str	r3, [r5, #0]
 800e0ce:	d030      	beq.n	800e132 <__sflush_r+0x92>
 800e0d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	0759      	lsls	r1, r3, #29
 800e0d6:	d505      	bpl.n	800e0e4 <__sflush_r+0x44>
 800e0d8:	6863      	ldr	r3, [r4, #4]
 800e0da:	1ad2      	subs	r2, r2, r3
 800e0dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0de:	b10b      	cbz	r3, 800e0e4 <__sflush_r+0x44>
 800e0e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0e2:	1ad2      	subs	r2, r2, r3
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0e8:	6a21      	ldr	r1, [r4, #32]
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	47b0      	blx	r6
 800e0ee:	1c43      	adds	r3, r0, #1
 800e0f0:	89a3      	ldrh	r3, [r4, #12]
 800e0f2:	d106      	bne.n	800e102 <__sflush_r+0x62>
 800e0f4:	6829      	ldr	r1, [r5, #0]
 800e0f6:	291d      	cmp	r1, #29
 800e0f8:	d82b      	bhi.n	800e152 <__sflush_r+0xb2>
 800e0fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e1a4 <__sflush_r+0x104>)
 800e0fc:	410a      	asrs	r2, r1
 800e0fe:	07d6      	lsls	r6, r2, #31
 800e100:	d427      	bmi.n	800e152 <__sflush_r+0xb2>
 800e102:	2200      	movs	r2, #0
 800e104:	6062      	str	r2, [r4, #4]
 800e106:	04d9      	lsls	r1, r3, #19
 800e108:	6922      	ldr	r2, [r4, #16]
 800e10a:	6022      	str	r2, [r4, #0]
 800e10c:	d504      	bpl.n	800e118 <__sflush_r+0x78>
 800e10e:	1c42      	adds	r2, r0, #1
 800e110:	d101      	bne.n	800e116 <__sflush_r+0x76>
 800e112:	682b      	ldr	r3, [r5, #0]
 800e114:	b903      	cbnz	r3, 800e118 <__sflush_r+0x78>
 800e116:	6560      	str	r0, [r4, #84]	@ 0x54
 800e118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e11a:	602f      	str	r7, [r5, #0]
 800e11c:	b1b9      	cbz	r1, 800e14e <__sflush_r+0xae>
 800e11e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e122:	4299      	cmp	r1, r3
 800e124:	d002      	beq.n	800e12c <__sflush_r+0x8c>
 800e126:	4628      	mov	r0, r5
 800e128:	f7ff fa96 	bl	800d658 <_free_r>
 800e12c:	2300      	movs	r3, #0
 800e12e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e130:	e00d      	b.n	800e14e <__sflush_r+0xae>
 800e132:	2301      	movs	r3, #1
 800e134:	4628      	mov	r0, r5
 800e136:	47b0      	blx	r6
 800e138:	4602      	mov	r2, r0
 800e13a:	1c50      	adds	r0, r2, #1
 800e13c:	d1c9      	bne.n	800e0d2 <__sflush_r+0x32>
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0c6      	beq.n	800e0d2 <__sflush_r+0x32>
 800e144:	2b1d      	cmp	r3, #29
 800e146:	d001      	beq.n	800e14c <__sflush_r+0xac>
 800e148:	2b16      	cmp	r3, #22
 800e14a:	d11e      	bne.n	800e18a <__sflush_r+0xea>
 800e14c:	602f      	str	r7, [r5, #0]
 800e14e:	2000      	movs	r0, #0
 800e150:	e022      	b.n	800e198 <__sflush_r+0xf8>
 800e152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e156:	b21b      	sxth	r3, r3
 800e158:	e01b      	b.n	800e192 <__sflush_r+0xf2>
 800e15a:	690f      	ldr	r7, [r1, #16]
 800e15c:	2f00      	cmp	r7, #0
 800e15e:	d0f6      	beq.n	800e14e <__sflush_r+0xae>
 800e160:	0793      	lsls	r3, r2, #30
 800e162:	680e      	ldr	r6, [r1, #0]
 800e164:	bf08      	it	eq
 800e166:	694b      	ldreq	r3, [r1, #20]
 800e168:	600f      	str	r7, [r1, #0]
 800e16a:	bf18      	it	ne
 800e16c:	2300      	movne	r3, #0
 800e16e:	eba6 0807 	sub.w	r8, r6, r7
 800e172:	608b      	str	r3, [r1, #8]
 800e174:	f1b8 0f00 	cmp.w	r8, #0
 800e178:	dde9      	ble.n	800e14e <__sflush_r+0xae>
 800e17a:	6a21      	ldr	r1, [r4, #32]
 800e17c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e17e:	4643      	mov	r3, r8
 800e180:	463a      	mov	r2, r7
 800e182:	4628      	mov	r0, r5
 800e184:	47b0      	blx	r6
 800e186:	2800      	cmp	r0, #0
 800e188:	dc08      	bgt.n	800e19c <__sflush_r+0xfc>
 800e18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e192:	81a3      	strh	r3, [r4, #12]
 800e194:	f04f 30ff 	mov.w	r0, #4294967295
 800e198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e19c:	4407      	add	r7, r0
 800e19e:	eba8 0800 	sub.w	r8, r8, r0
 800e1a2:	e7e7      	b.n	800e174 <__sflush_r+0xd4>
 800e1a4:	dfbffffe 	.word	0xdfbffffe

0800e1a8 <_fflush_r>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	690b      	ldr	r3, [r1, #16]
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	b913      	cbnz	r3, 800e1b8 <_fflush_r+0x10>
 800e1b2:	2500      	movs	r5, #0
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	bd38      	pop	{r3, r4, r5, pc}
 800e1b8:	b118      	cbz	r0, 800e1c2 <_fflush_r+0x1a>
 800e1ba:	6a03      	ldr	r3, [r0, #32]
 800e1bc:	b90b      	cbnz	r3, 800e1c2 <_fflush_r+0x1a>
 800e1be:	f7fe f9f5 	bl	800c5ac <__sinit>
 800e1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0f3      	beq.n	800e1b2 <_fflush_r+0xa>
 800e1ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1cc:	07d0      	lsls	r0, r2, #31
 800e1ce:	d404      	bmi.n	800e1da <_fflush_r+0x32>
 800e1d0:	0599      	lsls	r1, r3, #22
 800e1d2:	d402      	bmi.n	800e1da <_fflush_r+0x32>
 800e1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1d6:	f7fe fbc2 	bl	800c95e <__retarget_lock_acquire_recursive>
 800e1da:	4628      	mov	r0, r5
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f7ff ff5f 	bl	800e0a0 <__sflush_r>
 800e1e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1e4:	07da      	lsls	r2, r3, #31
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	d4e4      	bmi.n	800e1b4 <_fflush_r+0xc>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	d4e1      	bmi.n	800e1b4 <_fflush_r+0xc>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1f2:	f7fe fbb5 	bl	800c960 <__retarget_lock_release_recursive>
 800e1f6:	e7dd      	b.n	800e1b4 <_fflush_r+0xc>

0800e1f8 <fiprintf>:
 800e1f8:	b40e      	push	{r1, r2, r3}
 800e1fa:	b503      	push	{r0, r1, lr}
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	ab03      	add	r3, sp, #12
 800e200:	4805      	ldr	r0, [pc, #20]	@ (800e218 <fiprintf+0x20>)
 800e202:	f853 2b04 	ldr.w	r2, [r3], #4
 800e206:	6800      	ldr	r0, [r0, #0]
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	f000 f89f 	bl	800e34c <_vfiprintf_r>
 800e20e:	b002      	add	sp, #8
 800e210:	f85d eb04 	ldr.w	lr, [sp], #4
 800e214:	b003      	add	sp, #12
 800e216:	4770      	bx	lr
 800e218:	20000140 	.word	0x20000140

0800e21c <memmove>:
 800e21c:	4288      	cmp	r0, r1
 800e21e:	b510      	push	{r4, lr}
 800e220:	eb01 0402 	add.w	r4, r1, r2
 800e224:	d902      	bls.n	800e22c <memmove+0x10>
 800e226:	4284      	cmp	r4, r0
 800e228:	4623      	mov	r3, r4
 800e22a:	d807      	bhi.n	800e23c <memmove+0x20>
 800e22c:	1e43      	subs	r3, r0, #1
 800e22e:	42a1      	cmp	r1, r4
 800e230:	d008      	beq.n	800e244 <memmove+0x28>
 800e232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e23a:	e7f8      	b.n	800e22e <memmove+0x12>
 800e23c:	4402      	add	r2, r0
 800e23e:	4601      	mov	r1, r0
 800e240:	428a      	cmp	r2, r1
 800e242:	d100      	bne.n	800e246 <memmove+0x2a>
 800e244:	bd10      	pop	{r4, pc}
 800e246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e24e:	e7f7      	b.n	800e240 <memmove+0x24>

0800e250 <abort>:
 800e250:	b508      	push	{r3, lr}
 800e252:	2006      	movs	r0, #6
 800e254:	f000 fa4e 	bl	800e6f4 <raise>
 800e258:	2001      	movs	r0, #1
 800e25a:	f7f3 fd93 	bl	8001d84 <_exit>

0800e25e <__ascii_mbtowc>:
 800e25e:	b082      	sub	sp, #8
 800e260:	b901      	cbnz	r1, 800e264 <__ascii_mbtowc+0x6>
 800e262:	a901      	add	r1, sp, #4
 800e264:	b142      	cbz	r2, 800e278 <__ascii_mbtowc+0x1a>
 800e266:	b14b      	cbz	r3, 800e27c <__ascii_mbtowc+0x1e>
 800e268:	7813      	ldrb	r3, [r2, #0]
 800e26a:	600b      	str	r3, [r1, #0]
 800e26c:	7812      	ldrb	r2, [r2, #0]
 800e26e:	1e10      	subs	r0, r2, #0
 800e270:	bf18      	it	ne
 800e272:	2001      	movne	r0, #1
 800e274:	b002      	add	sp, #8
 800e276:	4770      	bx	lr
 800e278:	4610      	mov	r0, r2
 800e27a:	e7fb      	b.n	800e274 <__ascii_mbtowc+0x16>
 800e27c:	f06f 0001 	mvn.w	r0, #1
 800e280:	e7f8      	b.n	800e274 <__ascii_mbtowc+0x16>

0800e282 <_realloc_r>:
 800e282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e286:	4680      	mov	r8, r0
 800e288:	4615      	mov	r5, r2
 800e28a:	460c      	mov	r4, r1
 800e28c:	b921      	cbnz	r1, 800e298 <_realloc_r+0x16>
 800e28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e292:	4611      	mov	r1, r2
 800e294:	f7fd bb96 	b.w	800b9c4 <_malloc_r>
 800e298:	b92a      	cbnz	r2, 800e2a6 <_realloc_r+0x24>
 800e29a:	f7ff f9dd 	bl	800d658 <_free_r>
 800e29e:	2400      	movs	r4, #0
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a6:	f000 fa41 	bl	800e72c <_malloc_usable_size_r>
 800e2aa:	4285      	cmp	r5, r0
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	d802      	bhi.n	800e2b6 <_realloc_r+0x34>
 800e2b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2b4:	d8f4      	bhi.n	800e2a0 <_realloc_r+0x1e>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	f7fd fb83 	bl	800b9c4 <_malloc_r>
 800e2be:	4607      	mov	r7, r0
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d0ec      	beq.n	800e29e <_realloc_r+0x1c>
 800e2c4:	42b5      	cmp	r5, r6
 800e2c6:	462a      	mov	r2, r5
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	bf28      	it	cs
 800e2cc:	4632      	movcs	r2, r6
 800e2ce:	f7fe fb48 	bl	800c962 <memcpy>
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	f7ff f9bf 	bl	800d658 <_free_r>
 800e2da:	463c      	mov	r4, r7
 800e2dc:	e7e0      	b.n	800e2a0 <_realloc_r+0x1e>

0800e2de <__ascii_wctomb>:
 800e2de:	4603      	mov	r3, r0
 800e2e0:	4608      	mov	r0, r1
 800e2e2:	b141      	cbz	r1, 800e2f6 <__ascii_wctomb+0x18>
 800e2e4:	2aff      	cmp	r2, #255	@ 0xff
 800e2e6:	d904      	bls.n	800e2f2 <__ascii_wctomb+0x14>
 800e2e8:	228a      	movs	r2, #138	@ 0x8a
 800e2ea:	601a      	str	r2, [r3, #0]
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f0:	4770      	bx	lr
 800e2f2:	700a      	strb	r2, [r1, #0]
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	4770      	bx	lr

0800e2f8 <__sfputc_r>:
 800e2f8:	6893      	ldr	r3, [r2, #8]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	b410      	push	{r4}
 800e300:	6093      	str	r3, [r2, #8]
 800e302:	da08      	bge.n	800e316 <__sfputc_r+0x1e>
 800e304:	6994      	ldr	r4, [r2, #24]
 800e306:	42a3      	cmp	r3, r4
 800e308:	db01      	blt.n	800e30e <__sfputc_r+0x16>
 800e30a:	290a      	cmp	r1, #10
 800e30c:	d103      	bne.n	800e316 <__sfputc_r+0x1e>
 800e30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e312:	f000 b933 	b.w	800e57c <__swbuf_r>
 800e316:	6813      	ldr	r3, [r2, #0]
 800e318:	1c58      	adds	r0, r3, #1
 800e31a:	6010      	str	r0, [r2, #0]
 800e31c:	7019      	strb	r1, [r3, #0]
 800e31e:	4608      	mov	r0, r1
 800e320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <__sfputs_r>:
 800e326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e328:	4606      	mov	r6, r0
 800e32a:	460f      	mov	r7, r1
 800e32c:	4614      	mov	r4, r2
 800e32e:	18d5      	adds	r5, r2, r3
 800e330:	42ac      	cmp	r4, r5
 800e332:	d101      	bne.n	800e338 <__sfputs_r+0x12>
 800e334:	2000      	movs	r0, #0
 800e336:	e007      	b.n	800e348 <__sfputs_r+0x22>
 800e338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e33c:	463a      	mov	r2, r7
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ffda 	bl	800e2f8 <__sfputc_r>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d1f3      	bne.n	800e330 <__sfputs_r+0xa>
 800e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e34c <_vfiprintf_r>:
 800e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e350:	460d      	mov	r5, r1
 800e352:	b09d      	sub	sp, #116	@ 0x74
 800e354:	4614      	mov	r4, r2
 800e356:	4698      	mov	r8, r3
 800e358:	4606      	mov	r6, r0
 800e35a:	b118      	cbz	r0, 800e364 <_vfiprintf_r+0x18>
 800e35c:	6a03      	ldr	r3, [r0, #32]
 800e35e:	b90b      	cbnz	r3, 800e364 <_vfiprintf_r+0x18>
 800e360:	f7fe f924 	bl	800c5ac <__sinit>
 800e364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e366:	07d9      	lsls	r1, r3, #31
 800e368:	d405      	bmi.n	800e376 <_vfiprintf_r+0x2a>
 800e36a:	89ab      	ldrh	r3, [r5, #12]
 800e36c:	059a      	lsls	r2, r3, #22
 800e36e:	d402      	bmi.n	800e376 <_vfiprintf_r+0x2a>
 800e370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e372:	f7fe faf4 	bl	800c95e <__retarget_lock_acquire_recursive>
 800e376:	89ab      	ldrh	r3, [r5, #12]
 800e378:	071b      	lsls	r3, r3, #28
 800e37a:	d501      	bpl.n	800e380 <_vfiprintf_r+0x34>
 800e37c:	692b      	ldr	r3, [r5, #16]
 800e37e:	b99b      	cbnz	r3, 800e3a8 <_vfiprintf_r+0x5c>
 800e380:	4629      	mov	r1, r5
 800e382:	4630      	mov	r0, r6
 800e384:	f000 f938 	bl	800e5f8 <__swsetup_r>
 800e388:	b170      	cbz	r0, 800e3a8 <_vfiprintf_r+0x5c>
 800e38a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e38c:	07dc      	lsls	r4, r3, #31
 800e38e:	d504      	bpl.n	800e39a <_vfiprintf_r+0x4e>
 800e390:	f04f 30ff 	mov.w	r0, #4294967295
 800e394:	b01d      	add	sp, #116	@ 0x74
 800e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	0598      	lsls	r0, r3, #22
 800e39e:	d4f7      	bmi.n	800e390 <_vfiprintf_r+0x44>
 800e3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3a2:	f7fe fadd 	bl	800c960 <__retarget_lock_release_recursive>
 800e3a6:	e7f3      	b.n	800e390 <_vfiprintf_r+0x44>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3ac:	2320      	movs	r3, #32
 800e3ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3b6:	2330      	movs	r3, #48	@ 0x30
 800e3b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e568 <_vfiprintf_r+0x21c>
 800e3bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3c0:	f04f 0901 	mov.w	r9, #1
 800e3c4:	4623      	mov	r3, r4
 800e3c6:	469a      	mov	sl, r3
 800e3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3cc:	b10a      	cbz	r2, 800e3d2 <_vfiprintf_r+0x86>
 800e3ce:	2a25      	cmp	r2, #37	@ 0x25
 800e3d0:	d1f9      	bne.n	800e3c6 <_vfiprintf_r+0x7a>
 800e3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800e3d6:	d00b      	beq.n	800e3f0 <_vfiprintf_r+0xa4>
 800e3d8:	465b      	mov	r3, fp
 800e3da:	4622      	mov	r2, r4
 800e3dc:	4629      	mov	r1, r5
 800e3de:	4630      	mov	r0, r6
 800e3e0:	f7ff ffa1 	bl	800e326 <__sfputs_r>
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	f000 80a7 	beq.w	800e538 <_vfiprintf_r+0x1ec>
 800e3ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ec:	445a      	add	r2, fp
 800e3ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 809f 	beq.w	800e538 <_vfiprintf_r+0x1ec>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e404:	f10a 0a01 	add.w	sl, sl, #1
 800e408:	9304      	str	r3, [sp, #16]
 800e40a:	9307      	str	r3, [sp, #28]
 800e40c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e410:	931a      	str	r3, [sp, #104]	@ 0x68
 800e412:	4654      	mov	r4, sl
 800e414:	2205      	movs	r2, #5
 800e416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41a:	4853      	ldr	r0, [pc, #332]	@ (800e568 <_vfiprintf_r+0x21c>)
 800e41c:	f7f1 fee8 	bl	80001f0 <memchr>
 800e420:	9a04      	ldr	r2, [sp, #16]
 800e422:	b9d8      	cbnz	r0, 800e45c <_vfiprintf_r+0x110>
 800e424:	06d1      	lsls	r1, r2, #27
 800e426:	bf44      	itt	mi
 800e428:	2320      	movmi	r3, #32
 800e42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e42e:	0713      	lsls	r3, r2, #28
 800e430:	bf44      	itt	mi
 800e432:	232b      	movmi	r3, #43	@ 0x2b
 800e434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e438:	f89a 3000 	ldrb.w	r3, [sl]
 800e43c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e43e:	d015      	beq.n	800e46c <_vfiprintf_r+0x120>
 800e440:	9a07      	ldr	r2, [sp, #28]
 800e442:	4654      	mov	r4, sl
 800e444:	2000      	movs	r0, #0
 800e446:	f04f 0c0a 	mov.w	ip, #10
 800e44a:	4621      	mov	r1, r4
 800e44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e450:	3b30      	subs	r3, #48	@ 0x30
 800e452:	2b09      	cmp	r3, #9
 800e454:	d94b      	bls.n	800e4ee <_vfiprintf_r+0x1a2>
 800e456:	b1b0      	cbz	r0, 800e486 <_vfiprintf_r+0x13a>
 800e458:	9207      	str	r2, [sp, #28]
 800e45a:	e014      	b.n	800e486 <_vfiprintf_r+0x13a>
 800e45c:	eba0 0308 	sub.w	r3, r0, r8
 800e460:	fa09 f303 	lsl.w	r3, r9, r3
 800e464:	4313      	orrs	r3, r2
 800e466:	9304      	str	r3, [sp, #16]
 800e468:	46a2      	mov	sl, r4
 800e46a:	e7d2      	b.n	800e412 <_vfiprintf_r+0xc6>
 800e46c:	9b03      	ldr	r3, [sp, #12]
 800e46e:	1d19      	adds	r1, r3, #4
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	9103      	str	r1, [sp, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	bfbb      	ittet	lt
 800e478:	425b      	neglt	r3, r3
 800e47a:	f042 0202 	orrlt.w	r2, r2, #2
 800e47e:	9307      	strge	r3, [sp, #28]
 800e480:	9307      	strlt	r3, [sp, #28]
 800e482:	bfb8      	it	lt
 800e484:	9204      	strlt	r2, [sp, #16]
 800e486:	7823      	ldrb	r3, [r4, #0]
 800e488:	2b2e      	cmp	r3, #46	@ 0x2e
 800e48a:	d10a      	bne.n	800e4a2 <_vfiprintf_r+0x156>
 800e48c:	7863      	ldrb	r3, [r4, #1]
 800e48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e490:	d132      	bne.n	800e4f8 <_vfiprintf_r+0x1ac>
 800e492:	9b03      	ldr	r3, [sp, #12]
 800e494:	1d1a      	adds	r2, r3, #4
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	9203      	str	r2, [sp, #12]
 800e49a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e49e:	3402      	adds	r4, #2
 800e4a0:	9305      	str	r3, [sp, #20]
 800e4a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e578 <_vfiprintf_r+0x22c>
 800e4a6:	7821      	ldrb	r1, [r4, #0]
 800e4a8:	2203      	movs	r2, #3
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	f7f1 fea0 	bl	80001f0 <memchr>
 800e4b0:	b138      	cbz	r0, 800e4c2 <_vfiprintf_r+0x176>
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	eba0 000a 	sub.w	r0, r0, sl
 800e4b8:	2240      	movs	r2, #64	@ 0x40
 800e4ba:	4082      	lsls	r2, r0
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	3401      	adds	r4, #1
 800e4c0:	9304      	str	r3, [sp, #16]
 800e4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c6:	4829      	ldr	r0, [pc, #164]	@ (800e56c <_vfiprintf_r+0x220>)
 800e4c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4cc:	2206      	movs	r2, #6
 800e4ce:	f7f1 fe8f 	bl	80001f0 <memchr>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d03f      	beq.n	800e556 <_vfiprintf_r+0x20a>
 800e4d6:	4b26      	ldr	r3, [pc, #152]	@ (800e570 <_vfiprintf_r+0x224>)
 800e4d8:	bb1b      	cbnz	r3, 800e522 <_vfiprintf_r+0x1d6>
 800e4da:	9b03      	ldr	r3, [sp, #12]
 800e4dc:	3307      	adds	r3, #7
 800e4de:	f023 0307 	bic.w	r3, r3, #7
 800e4e2:	3308      	adds	r3, #8
 800e4e4:	9303      	str	r3, [sp, #12]
 800e4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4e8:	443b      	add	r3, r7
 800e4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ec:	e76a      	b.n	800e3c4 <_vfiprintf_r+0x78>
 800e4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	2001      	movs	r0, #1
 800e4f6:	e7a8      	b.n	800e44a <_vfiprintf_r+0xfe>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	3401      	adds	r4, #1
 800e4fc:	9305      	str	r3, [sp, #20]
 800e4fe:	4619      	mov	r1, r3
 800e500:	f04f 0c0a 	mov.w	ip, #10
 800e504:	4620      	mov	r0, r4
 800e506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e50a:	3a30      	subs	r2, #48	@ 0x30
 800e50c:	2a09      	cmp	r2, #9
 800e50e:	d903      	bls.n	800e518 <_vfiprintf_r+0x1cc>
 800e510:	2b00      	cmp	r3, #0
 800e512:	d0c6      	beq.n	800e4a2 <_vfiprintf_r+0x156>
 800e514:	9105      	str	r1, [sp, #20]
 800e516:	e7c4      	b.n	800e4a2 <_vfiprintf_r+0x156>
 800e518:	fb0c 2101 	mla	r1, ip, r1, r2
 800e51c:	4604      	mov	r4, r0
 800e51e:	2301      	movs	r3, #1
 800e520:	e7f0      	b.n	800e504 <_vfiprintf_r+0x1b8>
 800e522:	ab03      	add	r3, sp, #12
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	462a      	mov	r2, r5
 800e528:	4b12      	ldr	r3, [pc, #72]	@ (800e574 <_vfiprintf_r+0x228>)
 800e52a:	a904      	add	r1, sp, #16
 800e52c:	4630      	mov	r0, r6
 800e52e:	f7fd fbf9 	bl	800bd24 <_printf_float>
 800e532:	4607      	mov	r7, r0
 800e534:	1c78      	adds	r0, r7, #1
 800e536:	d1d6      	bne.n	800e4e6 <_vfiprintf_r+0x19a>
 800e538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e53a:	07d9      	lsls	r1, r3, #31
 800e53c:	d405      	bmi.n	800e54a <_vfiprintf_r+0x1fe>
 800e53e:	89ab      	ldrh	r3, [r5, #12]
 800e540:	059a      	lsls	r2, r3, #22
 800e542:	d402      	bmi.n	800e54a <_vfiprintf_r+0x1fe>
 800e544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e546:	f7fe fa0b 	bl	800c960 <__retarget_lock_release_recursive>
 800e54a:	89ab      	ldrh	r3, [r5, #12]
 800e54c:	065b      	lsls	r3, r3, #25
 800e54e:	f53f af1f 	bmi.w	800e390 <_vfiprintf_r+0x44>
 800e552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e554:	e71e      	b.n	800e394 <_vfiprintf_r+0x48>
 800e556:	ab03      	add	r3, sp, #12
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	462a      	mov	r2, r5
 800e55c:	4b05      	ldr	r3, [pc, #20]	@ (800e574 <_vfiprintf_r+0x228>)
 800e55e:	a904      	add	r1, sp, #16
 800e560:	4630      	mov	r0, r6
 800e562:	f7fd fe77 	bl	800c254 <_printf_i>
 800e566:	e7e4      	b.n	800e532 <_vfiprintf_r+0x1e6>
 800e568:	0800f050 	.word	0x0800f050
 800e56c:	0800f05a 	.word	0x0800f05a
 800e570:	0800bd25 	.word	0x0800bd25
 800e574:	0800e327 	.word	0x0800e327
 800e578:	0800f056 	.word	0x0800f056

0800e57c <__swbuf_r>:
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57e:	460e      	mov	r6, r1
 800e580:	4614      	mov	r4, r2
 800e582:	4605      	mov	r5, r0
 800e584:	b118      	cbz	r0, 800e58e <__swbuf_r+0x12>
 800e586:	6a03      	ldr	r3, [r0, #32]
 800e588:	b90b      	cbnz	r3, 800e58e <__swbuf_r+0x12>
 800e58a:	f7fe f80f 	bl	800c5ac <__sinit>
 800e58e:	69a3      	ldr	r3, [r4, #24]
 800e590:	60a3      	str	r3, [r4, #8]
 800e592:	89a3      	ldrh	r3, [r4, #12]
 800e594:	071a      	lsls	r2, r3, #28
 800e596:	d501      	bpl.n	800e59c <__swbuf_r+0x20>
 800e598:	6923      	ldr	r3, [r4, #16]
 800e59a:	b943      	cbnz	r3, 800e5ae <__swbuf_r+0x32>
 800e59c:	4621      	mov	r1, r4
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f000 f82a 	bl	800e5f8 <__swsetup_r>
 800e5a4:	b118      	cbz	r0, 800e5ae <__swbuf_r+0x32>
 800e5a6:	f04f 37ff 	mov.w	r7, #4294967295
 800e5aa:	4638      	mov	r0, r7
 800e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	6922      	ldr	r2, [r4, #16]
 800e5b2:	1a98      	subs	r0, r3, r2
 800e5b4:	6963      	ldr	r3, [r4, #20]
 800e5b6:	b2f6      	uxtb	r6, r6
 800e5b8:	4283      	cmp	r3, r0
 800e5ba:	4637      	mov	r7, r6
 800e5bc:	dc05      	bgt.n	800e5ca <__swbuf_r+0x4e>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f7ff fdf1 	bl	800e1a8 <_fflush_r>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d1ed      	bne.n	800e5a6 <__swbuf_r+0x2a>
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	60a3      	str	r3, [r4, #8]
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	6022      	str	r2, [r4, #0]
 800e5d6:	701e      	strb	r6, [r3, #0]
 800e5d8:	6962      	ldr	r2, [r4, #20]
 800e5da:	1c43      	adds	r3, r0, #1
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d004      	beq.n	800e5ea <__swbuf_r+0x6e>
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	07db      	lsls	r3, r3, #31
 800e5e4:	d5e1      	bpl.n	800e5aa <__swbuf_r+0x2e>
 800e5e6:	2e0a      	cmp	r6, #10
 800e5e8:	d1df      	bne.n	800e5aa <__swbuf_r+0x2e>
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	f7ff fddb 	bl	800e1a8 <_fflush_r>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d0d9      	beq.n	800e5aa <__swbuf_r+0x2e>
 800e5f6:	e7d6      	b.n	800e5a6 <__swbuf_r+0x2a>

0800e5f8 <__swsetup_r>:
 800e5f8:	b538      	push	{r3, r4, r5, lr}
 800e5fa:	4b29      	ldr	r3, [pc, #164]	@ (800e6a0 <__swsetup_r+0xa8>)
 800e5fc:	4605      	mov	r5, r0
 800e5fe:	6818      	ldr	r0, [r3, #0]
 800e600:	460c      	mov	r4, r1
 800e602:	b118      	cbz	r0, 800e60c <__swsetup_r+0x14>
 800e604:	6a03      	ldr	r3, [r0, #32]
 800e606:	b90b      	cbnz	r3, 800e60c <__swsetup_r+0x14>
 800e608:	f7fd ffd0 	bl	800c5ac <__sinit>
 800e60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e610:	0719      	lsls	r1, r3, #28
 800e612:	d422      	bmi.n	800e65a <__swsetup_r+0x62>
 800e614:	06da      	lsls	r2, r3, #27
 800e616:	d407      	bmi.n	800e628 <__swsetup_r+0x30>
 800e618:	2209      	movs	r2, #9
 800e61a:	602a      	str	r2, [r5, #0]
 800e61c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e620:	81a3      	strh	r3, [r4, #12]
 800e622:	f04f 30ff 	mov.w	r0, #4294967295
 800e626:	e033      	b.n	800e690 <__swsetup_r+0x98>
 800e628:	0758      	lsls	r0, r3, #29
 800e62a:	d512      	bpl.n	800e652 <__swsetup_r+0x5a>
 800e62c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e62e:	b141      	cbz	r1, 800e642 <__swsetup_r+0x4a>
 800e630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e634:	4299      	cmp	r1, r3
 800e636:	d002      	beq.n	800e63e <__swsetup_r+0x46>
 800e638:	4628      	mov	r0, r5
 800e63a:	f7ff f80d 	bl	800d658 <_free_r>
 800e63e:	2300      	movs	r3, #0
 800e640:	6363      	str	r3, [r4, #52]	@ 0x34
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e648:	81a3      	strh	r3, [r4, #12]
 800e64a:	2300      	movs	r3, #0
 800e64c:	6063      	str	r3, [r4, #4]
 800e64e:	6923      	ldr	r3, [r4, #16]
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	f043 0308 	orr.w	r3, r3, #8
 800e658:	81a3      	strh	r3, [r4, #12]
 800e65a:	6923      	ldr	r3, [r4, #16]
 800e65c:	b94b      	cbnz	r3, 800e672 <__swsetup_r+0x7a>
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e668:	d003      	beq.n	800e672 <__swsetup_r+0x7a>
 800e66a:	4621      	mov	r1, r4
 800e66c:	4628      	mov	r0, r5
 800e66e:	f000 f88b 	bl	800e788 <__smakebuf_r>
 800e672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e676:	f013 0201 	ands.w	r2, r3, #1
 800e67a:	d00a      	beq.n	800e692 <__swsetup_r+0x9a>
 800e67c:	2200      	movs	r2, #0
 800e67e:	60a2      	str	r2, [r4, #8]
 800e680:	6962      	ldr	r2, [r4, #20]
 800e682:	4252      	negs	r2, r2
 800e684:	61a2      	str	r2, [r4, #24]
 800e686:	6922      	ldr	r2, [r4, #16]
 800e688:	b942      	cbnz	r2, 800e69c <__swsetup_r+0xa4>
 800e68a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e68e:	d1c5      	bne.n	800e61c <__swsetup_r+0x24>
 800e690:	bd38      	pop	{r3, r4, r5, pc}
 800e692:	0799      	lsls	r1, r3, #30
 800e694:	bf58      	it	pl
 800e696:	6962      	ldrpl	r2, [r4, #20]
 800e698:	60a2      	str	r2, [r4, #8]
 800e69a:	e7f4      	b.n	800e686 <__swsetup_r+0x8e>
 800e69c:	2000      	movs	r0, #0
 800e69e:	e7f7      	b.n	800e690 <__swsetup_r+0x98>
 800e6a0:	20000140 	.word	0x20000140

0800e6a4 <_raise_r>:
 800e6a4:	291f      	cmp	r1, #31
 800e6a6:	b538      	push	{r3, r4, r5, lr}
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	d904      	bls.n	800e6b8 <_raise_r+0x14>
 800e6ae:	2316      	movs	r3, #22
 800e6b0:	6003      	str	r3, [r0, #0]
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6ba:	b112      	cbz	r2, 800e6c2 <_raise_r+0x1e>
 800e6bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6c0:	b94b      	cbnz	r3, 800e6d6 <_raise_r+0x32>
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f000 f830 	bl	800e728 <_getpid_r>
 800e6c8:	4622      	mov	r2, r4
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6d2:	f000 b817 	b.w	800e704 <_kill_r>
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d00a      	beq.n	800e6f0 <_raise_r+0x4c>
 800e6da:	1c59      	adds	r1, r3, #1
 800e6dc:	d103      	bne.n	800e6e6 <_raise_r+0x42>
 800e6de:	2316      	movs	r3, #22
 800e6e0:	6003      	str	r3, [r0, #0]
 800e6e2:	2001      	movs	r0, #1
 800e6e4:	e7e7      	b.n	800e6b6 <_raise_r+0x12>
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4798      	blx	r3
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	e7e0      	b.n	800e6b6 <_raise_r+0x12>

0800e6f4 <raise>:
 800e6f4:	4b02      	ldr	r3, [pc, #8]	@ (800e700 <raise+0xc>)
 800e6f6:	4601      	mov	r1, r0
 800e6f8:	6818      	ldr	r0, [r3, #0]
 800e6fa:	f7ff bfd3 	b.w	800e6a4 <_raise_r>
 800e6fe:	bf00      	nop
 800e700:	20000140 	.word	0x20000140

0800e704 <_kill_r>:
 800e704:	b538      	push	{r3, r4, r5, lr}
 800e706:	4d07      	ldr	r5, [pc, #28]	@ (800e724 <_kill_r+0x20>)
 800e708:	2300      	movs	r3, #0
 800e70a:	4604      	mov	r4, r0
 800e70c:	4608      	mov	r0, r1
 800e70e:	4611      	mov	r1, r2
 800e710:	602b      	str	r3, [r5, #0]
 800e712:	f7f3 fb27 	bl	8001d64 <_kill>
 800e716:	1c43      	adds	r3, r0, #1
 800e718:	d102      	bne.n	800e720 <_kill_r+0x1c>
 800e71a:	682b      	ldr	r3, [r5, #0]
 800e71c:	b103      	cbz	r3, 800e720 <_kill_r+0x1c>
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	bd38      	pop	{r3, r4, r5, pc}
 800e722:	bf00      	nop
 800e724:	200034b8 	.word	0x200034b8

0800e728 <_getpid_r>:
 800e728:	f7f3 bb14 	b.w	8001d54 <_getpid>

0800e72c <_malloc_usable_size_r>:
 800e72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e730:	1f18      	subs	r0, r3, #4
 800e732:	2b00      	cmp	r3, #0
 800e734:	bfbc      	itt	lt
 800e736:	580b      	ldrlt	r3, [r1, r0]
 800e738:	18c0      	addlt	r0, r0, r3
 800e73a:	4770      	bx	lr

0800e73c <__swhatbuf_r>:
 800e73c:	b570      	push	{r4, r5, r6, lr}
 800e73e:	460c      	mov	r4, r1
 800e740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e744:	2900      	cmp	r1, #0
 800e746:	b096      	sub	sp, #88	@ 0x58
 800e748:	4615      	mov	r5, r2
 800e74a:	461e      	mov	r6, r3
 800e74c:	da0d      	bge.n	800e76a <__swhatbuf_r+0x2e>
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e754:	f04f 0100 	mov.w	r1, #0
 800e758:	bf14      	ite	ne
 800e75a:	2340      	movne	r3, #64	@ 0x40
 800e75c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e760:	2000      	movs	r0, #0
 800e762:	6031      	str	r1, [r6, #0]
 800e764:	602b      	str	r3, [r5, #0]
 800e766:	b016      	add	sp, #88	@ 0x58
 800e768:	bd70      	pop	{r4, r5, r6, pc}
 800e76a:	466a      	mov	r2, sp
 800e76c:	f000 f848 	bl	800e800 <_fstat_r>
 800e770:	2800      	cmp	r0, #0
 800e772:	dbec      	blt.n	800e74e <__swhatbuf_r+0x12>
 800e774:	9901      	ldr	r1, [sp, #4]
 800e776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e77a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e77e:	4259      	negs	r1, r3
 800e780:	4159      	adcs	r1, r3
 800e782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e786:	e7eb      	b.n	800e760 <__swhatbuf_r+0x24>

0800e788 <__smakebuf_r>:
 800e788:	898b      	ldrh	r3, [r1, #12]
 800e78a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e78c:	079d      	lsls	r5, r3, #30
 800e78e:	4606      	mov	r6, r0
 800e790:	460c      	mov	r4, r1
 800e792:	d507      	bpl.n	800e7a4 <__smakebuf_r+0x1c>
 800e794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	2301      	movs	r3, #1
 800e79e:	6163      	str	r3, [r4, #20]
 800e7a0:	b003      	add	sp, #12
 800e7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a4:	ab01      	add	r3, sp, #4
 800e7a6:	466a      	mov	r2, sp
 800e7a8:	f7ff ffc8 	bl	800e73c <__swhatbuf_r>
 800e7ac:	9f00      	ldr	r7, [sp, #0]
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f7fd f906 	bl	800b9c4 <_malloc_r>
 800e7b8:	b948      	cbnz	r0, 800e7ce <__smakebuf_r+0x46>
 800e7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7be:	059a      	lsls	r2, r3, #22
 800e7c0:	d4ee      	bmi.n	800e7a0 <__smakebuf_r+0x18>
 800e7c2:	f023 0303 	bic.w	r3, r3, #3
 800e7c6:	f043 0302 	orr.w	r3, r3, #2
 800e7ca:	81a3      	strh	r3, [r4, #12]
 800e7cc:	e7e2      	b.n	800e794 <__smakebuf_r+0xc>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	6020      	str	r0, [r4, #0]
 800e7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	9b01      	ldr	r3, [sp, #4]
 800e7da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7de:	b15b      	cbz	r3, 800e7f8 <__smakebuf_r+0x70>
 800e7e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f000 f81d 	bl	800e824 <_isatty_r>
 800e7ea:	b128      	cbz	r0, 800e7f8 <__smakebuf_r+0x70>
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	f023 0303 	bic.w	r3, r3, #3
 800e7f2:	f043 0301 	orr.w	r3, r3, #1
 800e7f6:	81a3      	strh	r3, [r4, #12]
 800e7f8:	89a3      	ldrh	r3, [r4, #12]
 800e7fa:	431d      	orrs	r5, r3
 800e7fc:	81a5      	strh	r5, [r4, #12]
 800e7fe:	e7cf      	b.n	800e7a0 <__smakebuf_r+0x18>

0800e800 <_fstat_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	4d07      	ldr	r5, [pc, #28]	@ (800e820 <_fstat_r+0x20>)
 800e804:	2300      	movs	r3, #0
 800e806:	4604      	mov	r4, r0
 800e808:	4608      	mov	r0, r1
 800e80a:	4611      	mov	r1, r2
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	f7f3 fb09 	bl	8001e24 <_fstat>
 800e812:	1c43      	adds	r3, r0, #1
 800e814:	d102      	bne.n	800e81c <_fstat_r+0x1c>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	b103      	cbz	r3, 800e81c <_fstat_r+0x1c>
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	bd38      	pop	{r3, r4, r5, pc}
 800e81e:	bf00      	nop
 800e820:	200034b8 	.word	0x200034b8

0800e824 <_isatty_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4d06      	ldr	r5, [pc, #24]	@ (800e840 <_isatty_r+0x1c>)
 800e828:	2300      	movs	r3, #0
 800e82a:	4604      	mov	r4, r0
 800e82c:	4608      	mov	r0, r1
 800e82e:	602b      	str	r3, [r5, #0]
 800e830:	f7f3 fb08 	bl	8001e44 <_isatty>
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	d102      	bne.n	800e83e <_isatty_r+0x1a>
 800e838:	682b      	ldr	r3, [r5, #0]
 800e83a:	b103      	cbz	r3, 800e83e <_isatty_r+0x1a>
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	200034b8 	.word	0x200034b8

0800e844 <_init>:
 800e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e846:	bf00      	nop
 800e848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e84a:	bc08      	pop	{r3}
 800e84c:	469e      	mov	lr, r3
 800e84e:	4770      	bx	lr

0800e850 <_fini>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	bf00      	nop
 800e854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e856:	bc08      	pop	{r3}
 800e858:	469e      	mov	lr, r3
 800e85a:	4770      	bx	lr
