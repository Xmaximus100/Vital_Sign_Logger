
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800bbd0  0800bbd0  0000cbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b8  0800c0b8  0000e150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0b8  0800c0b8  0000d0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c0  0800c0c0  0000e150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c0  0800c0c0  0000d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0c4  0800c0c4  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800c0c8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000297c  20000150  0800c218  0000e150  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002acc  0800c218  0000eacc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002517b  00000000  00000000  0000e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005935  00000000  00000000  000332fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  00038c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177e  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db36  00000000  00000000  0003c25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027821  00000000  00000000  00069d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010575b  00000000  00000000  000915b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b58  00000000  00000000  00196d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  0019f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbb8 	.word	0x0800bbb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800bbb8 	.word	0x0800bbb8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b96a 	b.w	8000944 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	460c      	mov	r4, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14e      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000694:	4694      	mov	ip, r2
 8000696:	458c      	cmp	ip, r1
 8000698:	4686      	mov	lr, r0
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	d962      	bls.n	8000766 <__udivmoddi4+0xde>
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0320 	rsb	r3, r2, #32
 80006a6:	4091      	lsls	r1, r2
 80006a8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b0:	4319      	orrs	r1, r3
 80006b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ba:	fa1f f68c 	uxth.w	r6, ip
 80006be:	fbb1 f4f7 	udiv	r4, r1, r7
 80006c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006c6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ce:	fb04 f106 	mul.w	r1, r4, r6
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f104 30ff 	add.w	r0, r4, #4294967295
 80006de:	f080 8112 	bcs.w	8000906 <__udivmoddi4+0x27e>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 810f 	bls.w	8000906 <__udivmoddi4+0x27e>
 80006e8:	3c02      	subs	r4, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a59      	subs	r1, r3, r1
 80006ee:	fa1f f38e 	uxth.w	r3, lr
 80006f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f6:	fb07 1110 	mls	r1, r7, r0, r1
 80006fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006fe:	fb00 f606 	mul.w	r6, r0, r6
 8000702:	429e      	cmp	r6, r3
 8000704:	d90a      	bls.n	800071c <__udivmoddi4+0x94>
 8000706:	eb1c 0303 	adds.w	r3, ip, r3
 800070a:	f100 31ff 	add.w	r1, r0, #4294967295
 800070e:	f080 80fc 	bcs.w	800090a <__udivmoddi4+0x282>
 8000712:	429e      	cmp	r6, r3
 8000714:	f240 80f9 	bls.w	800090a <__udivmoddi4+0x282>
 8000718:	4463      	add	r3, ip
 800071a:	3802      	subs	r0, #2
 800071c:	1b9b      	subs	r3, r3, r6
 800071e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000722:	2100      	movs	r1, #0
 8000724:	b11d      	cbz	r5, 800072e <__udivmoddi4+0xa6>
 8000726:	40d3      	lsrs	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	e9c5 3200 	strd	r3, r2, [r5]
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d905      	bls.n	8000742 <__udivmoddi4+0xba>
 8000736:	b10d      	cbz	r5, 800073c <__udivmoddi4+0xb4>
 8000738:	e9c5 0100 	strd	r0, r1, [r5]
 800073c:	2100      	movs	r1, #0
 800073e:	4608      	mov	r0, r1
 8000740:	e7f5      	b.n	800072e <__udivmoddi4+0xa6>
 8000742:	fab3 f183 	clz	r1, r3
 8000746:	2900      	cmp	r1, #0
 8000748:	d146      	bne.n	80007d8 <__udivmoddi4+0x150>
 800074a:	42a3      	cmp	r3, r4
 800074c:	d302      	bcc.n	8000754 <__udivmoddi4+0xcc>
 800074e:	4290      	cmp	r0, r2
 8000750:	f0c0 80f0 	bcc.w	8000934 <__udivmoddi4+0x2ac>
 8000754:	1a86      	subs	r6, r0, r2
 8000756:	eb64 0303 	sbc.w	r3, r4, r3
 800075a:	2001      	movs	r0, #1
 800075c:	2d00      	cmp	r5, #0
 800075e:	d0e6      	beq.n	800072e <__udivmoddi4+0xa6>
 8000760:	e9c5 6300 	strd	r6, r3, [r5]
 8000764:	e7e3      	b.n	800072e <__udivmoddi4+0xa6>
 8000766:	2a00      	cmp	r2, #0
 8000768:	f040 8090 	bne.w	800088c <__udivmoddi4+0x204>
 800076c:	eba1 040c 	sub.w	r4, r1, ip
 8000770:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000774:	fa1f f78c 	uxth.w	r7, ip
 8000778:	2101      	movs	r1, #1
 800077a:	fbb4 f6f8 	udiv	r6, r4, r8
 800077e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000782:	fb08 4416 	mls	r4, r8, r6, r4
 8000786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078a:	fb07 f006 	mul.w	r0, r7, r6
 800078e:	4298      	cmp	r0, r3
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x11c>
 8000792:	eb1c 0303 	adds.w	r3, ip, r3
 8000796:	f106 34ff 	add.w	r4, r6, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x11a>
 800079c:	4298      	cmp	r0, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2b4>
 80007a2:	4626      	mov	r6, r4
 80007a4:	1a1c      	subs	r4, r3, r0
 80007a6:	fa1f f38e 	uxth.w	r3, lr
 80007aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ae:	fb08 4410 	mls	r4, r8, r0, r4
 80007b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007b6:	fb00 f707 	mul.w	r7, r0, r7
 80007ba:	429f      	cmp	r7, r3
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x148>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c6:	d202      	bcs.n	80007ce <__udivmoddi4+0x146>
 80007c8:	429f      	cmp	r7, r3
 80007ca:	f200 80b0 	bhi.w	800092e <__udivmoddi4+0x2a6>
 80007ce:	4620      	mov	r0, r4
 80007d0:	1bdb      	subs	r3, r3, r7
 80007d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d6:	e7a5      	b.n	8000724 <__udivmoddi4+0x9c>
 80007d8:	f1c1 0620 	rsb	r6, r1, #32
 80007dc:	408b      	lsls	r3, r1
 80007de:	fa22 f706 	lsr.w	r7, r2, r6
 80007e2:	431f      	orrs	r7, r3
 80007e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007e8:	fa04 f301 	lsl.w	r3, r4, r1
 80007ec:	ea43 030c 	orr.w	r3, r3, ip
 80007f0:	40f4      	lsrs	r4, r6
 80007f2:	fa00 f801 	lsl.w	r8, r0, r1
 80007f6:	0c38      	lsrs	r0, r7, #16
 80007f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000800:	fa1f fc87 	uxth.w	ip, r7
 8000804:	fb00 441e 	mls	r4, r0, lr, r4
 8000808:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080c:	fb0e f90c 	mul.w	r9, lr, ip
 8000810:	45a1      	cmp	r9, r4
 8000812:	fa02 f201 	lsl.w	r2, r2, r1
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x1a6>
 8000818:	193c      	adds	r4, r7, r4
 800081a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800081e:	f080 8084 	bcs.w	800092a <__udivmoddi4+0x2a2>
 8000822:	45a1      	cmp	r9, r4
 8000824:	f240 8081 	bls.w	800092a <__udivmoddi4+0x2a2>
 8000828:	f1ae 0e02 	sub.w	lr, lr, #2
 800082c:	443c      	add	r4, r7
 800082e:	eba4 0409 	sub.w	r4, r4, r9
 8000832:	fa1f f983 	uxth.w	r9, r3
 8000836:	fbb4 f3f0 	udiv	r3, r4, r0
 800083a:	fb00 4413 	mls	r4, r0, r3, r4
 800083e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000842:	fb03 fc0c 	mul.w	ip, r3, ip
 8000846:	45a4      	cmp	ip, r4
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x1d2>
 800084a:	193c      	adds	r4, r7, r4
 800084c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000850:	d267      	bcs.n	8000922 <__udivmoddi4+0x29a>
 8000852:	45a4      	cmp	ip, r4
 8000854:	d965      	bls.n	8000922 <__udivmoddi4+0x29a>
 8000856:	3b02      	subs	r3, #2
 8000858:	443c      	add	r4, r7
 800085a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800085e:	fba0 9302 	umull	r9, r3, r0, r2
 8000862:	eba4 040c 	sub.w	r4, r4, ip
 8000866:	429c      	cmp	r4, r3
 8000868:	46ce      	mov	lr, r9
 800086a:	469c      	mov	ip, r3
 800086c:	d351      	bcc.n	8000912 <__udivmoddi4+0x28a>
 800086e:	d04e      	beq.n	800090e <__udivmoddi4+0x286>
 8000870:	b155      	cbz	r5, 8000888 <__udivmoddi4+0x200>
 8000872:	ebb8 030e 	subs.w	r3, r8, lr
 8000876:	eb64 040c 	sbc.w	r4, r4, ip
 800087a:	fa04 f606 	lsl.w	r6, r4, r6
 800087e:	40cb      	lsrs	r3, r1
 8000880:	431e      	orrs	r6, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c5 6400 	strd	r6, r4, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	e750      	b.n	800072e <__udivmoddi4+0xa6>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f103 	lsr.w	r1, r0, r3
 8000894:	fa0c fc02 	lsl.w	ip, ip, r2
 8000898:	fa24 f303 	lsr.w	r3, r4, r3
 800089c:	4094      	lsls	r4, r2
 800089e:	430c      	orrs	r4, r1
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a8:	fa1f f78c 	uxth.w	r7, ip
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3110 	mls	r1, r8, r0, r3
 80008b4:	0c23      	lsrs	r3, r4, #16
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f107 	mul.w	r1, r0, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x24c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ca:	d22c      	bcs.n	8000926 <__udivmoddi4+0x29e>
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d92a      	bls.n	8000926 <__udivmoddi4+0x29e>
 80008d0:	3802      	subs	r0, #2
 80008d2:	4463      	add	r3, ip
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008dc:	fb08 3311 	mls	r3, r8, r1, r3
 80008e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e4:	fb01 f307 	mul.w	r3, r1, r7
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x276>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008f4:	d213      	bcs.n	800091e <__udivmoddi4+0x296>
 80008f6:	42a3      	cmp	r3, r4
 80008f8:	d911      	bls.n	800091e <__udivmoddi4+0x296>
 80008fa:	3902      	subs	r1, #2
 80008fc:	4464      	add	r4, ip
 80008fe:	1ae4      	subs	r4, r4, r3
 8000900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000904:	e739      	b.n	800077a <__udivmoddi4+0xf2>
 8000906:	4604      	mov	r4, r0
 8000908:	e6f0      	b.n	80006ec <__udivmoddi4+0x64>
 800090a:	4608      	mov	r0, r1
 800090c:	e706      	b.n	800071c <__udivmoddi4+0x94>
 800090e:	45c8      	cmp	r8, r9
 8000910:	d2ae      	bcs.n	8000870 <__udivmoddi4+0x1e8>
 8000912:	ebb9 0e02 	subs.w	lr, r9, r2
 8000916:	eb63 0c07 	sbc.w	ip, r3, r7
 800091a:	3801      	subs	r0, #1
 800091c:	e7a8      	b.n	8000870 <__udivmoddi4+0x1e8>
 800091e:	4631      	mov	r1, r6
 8000920:	e7ed      	b.n	80008fe <__udivmoddi4+0x276>
 8000922:	4603      	mov	r3, r0
 8000924:	e799      	b.n	800085a <__udivmoddi4+0x1d2>
 8000926:	4630      	mov	r0, r6
 8000928:	e7d4      	b.n	80008d4 <__udivmoddi4+0x24c>
 800092a:	46d6      	mov	lr, sl
 800092c:	e77f      	b.n	800082e <__udivmoddi4+0x1a6>
 800092e:	4463      	add	r3, ip
 8000930:	3802      	subs	r0, #2
 8000932:	e74d      	b.n	80007d0 <__udivmoddi4+0x148>
 8000934:	4606      	mov	r6, r0
 8000936:	4623      	mov	r3, r4
 8000938:	4608      	mov	r0, r1
 800093a:	e70f      	b.n	800075c <__udivmoddi4+0xd4>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	e730      	b.n	80007a4 <__udivmoddi4+0x11c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

HAL_StatusTypeDef Initialize_Delay()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <Initialize_Delay+0x10>)
 800094e:	f004 ff29 	bl	80057a4 <HAL_TIM_Base_Start>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000027c 	.word	0x2000027c

0800095c <delay_us>:

void delay_us(uint32_t us)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	taskENTER_CRITICAL();
 8000964:	f009 fb50 	bl	800a008 <vPortEnterCritical>
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000968:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <delay_us+0x44>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096e:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000974:	e003      	b.n	800097e <delay_us+0x22>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <delay_us+0x44>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097c:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	bfb8      	it	lt
 8000988:	425b      	neglt	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4293      	cmp	r3, r2
 8000990:	d8f1      	bhi.n	8000976 <delay_us+0x1a>
	}
	taskEXIT_CRITICAL();
 8000992:	f009 fb6b 	bl	800a06c <vPortExitCritical>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000

080009a4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f002 f95f 	bl	8002c70 <HAL_Delay>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009f0:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_FREERTOS_Init+0x48>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <MX_FREERTOS_Init+0x4c>)
 80009f6:	f006 fddf 	bl	80075b8 <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <MX_FREERTOS_Init+0x50>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 8000a00:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <MX_FREERTOS_Init+0x54>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <MX_FREERTOS_Init+0x58>)
 8000a06:	f006 fdd7 	bl	80075b8 <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <MX_FREERTOS_Init+0x5c>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 8000a10:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <MX_FREERTOS_Init+0x60>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <MX_FREERTOS_Init+0x64>)
 8000a16:	f006 fdcf 	bl	80075b8 <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <MX_FREERTOS_Init+0x68>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* creation of at_cmds_handler */
  at_cmds_handlerHandle = osThreadNew(StartATCmds, NULL, &at_cmds_handler_attributes);
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <MX_FREERTOS_Init+0x6c>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_FREERTOS_Init+0x70>)
 8000a26:	f006 fdc7 	bl	80075b8 <osThreadNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <MX_FREERTOS_Init+0x74>)
 8000a2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0800bdfc 	.word	0x0800bdfc
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	200001b8 	.word	0x200001b8
 8000a40:	0800be20 	.word	0x0800be20
 8000a44:	08000a75 	.word	0x08000a75
 8000a48:	200001bc 	.word	0x200001bc
 8000a4c:	0800be44 	.word	0x0800be44
 8000a50:	08000a91 	.word	0x08000a91
 8000a54:	200001c0 	.word	0x200001c0
 8000a58:	0800be68 	.word	0x0800be68
 8000a5c:	08000aa1 	.word	0x08000aa1
 8000a60:	200001c4 	.word	0x200001c4

08000a64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
//		len = sprintf(tmp_buf, "TestDMA\n\r");
//		HAL_UART_Transmit_DMA(&huart2, tmp_buf, len); //To prevent receiving constant interrupts after sending
														//simply i
		osDelay(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f006 ff04 	bl	800787a <osDelay>
 8000a72:	e7fb      	b.n	8000a6c <StartDefaultTask+0x8>

08000a74 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
	for(;;)
	{
	//	  UARTLog("Hello World\n\r");
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f006 fe78 	bl	8007778 <osThreadFlagsWait>
		ad7676_start_conversion();
 8000a88:	f000 ffa0 	bl	80019cc <ad7676_start_conversion>
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8000a8c:	bf00      	nop
 8000a8e:	e7f5      	b.n	8000a7c <StartADC+0x8>

08000a90 <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
//	basic_example_main(&hadf5355);
  /* Infinite loop */
	for(;;)
	{
//		UARTLog("Hello World\n\r");
		osDelay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f006 feee 	bl	800787a <osDelay>
 8000a9e:	e7fb      	b.n	8000a98 <StartPLL+0x8>

08000aa0 <StartATCmds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartATCmds */
void StartATCmds(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartATCmds */
	uint8_t received_data[32];
	//	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	490e      	ldr	r1, [pc, #56]	@ (8000ae4 <StartATCmds+0x44>)
 8000aac:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <StartATCmds+0x48>)
 8000aae:	f006 fca1 	bl	80073f4 <HAL_UARTEx_ReceiveToIdle_DMA>
	UARTLog("Send any request\n\r");
 8000ab2:	480e      	ldr	r0, [pc, #56]	@ (8000aec <StartATCmds+0x4c>)
 8000ab4:	f000 fec4 	bl	8001840 <UARTLog>
  /* Infinite loop */
	for(;;)
	{
		if(received_lines > 0){
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <StartATCmds+0x50>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0fb      	beq.n	8000ab8 <StartATCmds+0x18>
		  ParserTakeLine(&buffer, received_data);
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <StartATCmds+0x54>)
 8000ac8:	f000 f9e8 	bl	8000e9c <ParserTakeLine>
		  ParserParse((char*)received_data);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fa09 	bl	8000ee8 <ParserParse>
		  received_lines--;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <StartATCmds+0x50>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <StartATCmds+0x50>)
 8000ae0:	701a      	strb	r2, [r3, #0]
		if(received_lines > 0){
 8000ae2:	e7e9      	b.n	8000ab8 <StartATCmds+0x18>
 8000ae4:	20000194 	.word	0x20000194
 8000ae8:	200002c8 	.word	0x200002c8
 8000aec:	0800bc04 	.word	0x0800bc04
 8000af0:	200001b4 	.word	0x200001b4
 8000af4:	20000170 	.word	0x20000170

08000af8 <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART2){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d11e      	bne.n	8000b4c <HAL_UARTEx_RxEventCallback+0x54>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp, Size)){
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	4910      	ldr	r1, [pc, #64]	@ (8000b58 <HAL_UARTEx_RxEventCallback+0x60>)
 8000b16:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <HAL_UARTEx_RxEventCallback+0x64>)
 8000b18:	f000 fa76 	bl	8001008 <WriteToBuffer>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10c      	bne.n	8000b3c <HAL_UARTEx_RxEventCallback+0x44>
			if(receive_tmp[Size-1] == ENDLINE){
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <HAL_UARTEx_RxEventCallback+0x60>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d109      	bne.n	8000b42 <HAL_UARTEx_RxEventCallback+0x4a>
				received_lines++;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <HAL_UARTEx_RxEventCallback+0x4a>
			}
		}
		else FlushBuffer(&buffer);
 8000b3c:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <HAL_UARTEx_RxEventCallback+0x64>)
 8000b3e:	f000 facb 	bl	80010d8 <FlushBuffer>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8000b42:	2220      	movs	r2, #32
 8000b44:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <HAL_UARTEx_RxEventCallback+0x60>)
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b48:	f006 fc54 	bl	80073f4 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40004400 	.word	0x40004400
 8000b58:	20000194 	.word	0x20000194
 8000b5c:	20000170 	.word	0x20000170
 8000b60:	200001b4 	.word	0x200001b4
 8000b64:	200002c8 	.word	0x200002c8

08000b68 <HAL_UART_TxCpltCallback>:
//		HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2){

  }
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == AD_BUSY_Pin){
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b8c:	d107      	bne.n	8000b9e <HAL_GPIO_EXTI_Callback+0x22>
		ad7676_read_one_sample();
 8000b8e:	f000 fef3 	bl	8001978 <ad7676_read_one_sample>
		osThreadFlagsSet(adc_handlerHandle, 0x01);
 8000b92:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2101      	movs	r1, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f006 fd9f 	bl	80076dc <osThreadFlagsSet>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001bc 	.word	0x200001bc

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a5d      	ldr	r2, [pc, #372]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	4b58      	ldr	r3, [pc, #352]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a57      	ldr	r2, [pc, #348]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b55      	ldr	r3, [pc, #340]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b52      	ldr	r3, [pc, #328]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	4a51      	ldr	r2, [pc, #324]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c16:	4b49      	ldr	r3, [pc, #292]	@ (8000d3c <MX_GPIO_Init+0x190>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2a:	f002 fe3b 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2101      	movs	r1, #1
 8000c32:	4843      	ldr	r0, [pc, #268]	@ (8000d40 <MX_GPIO_Init+0x194>)
 8000c34:	f002 fe36 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CNVST_GPIO_Port, AD_CNVST_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3e:	4841      	ldr	r0, [pc, #260]	@ (8000d44 <MX_GPIO_Init+0x198>)
 8000c40:	f002 fe30 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADF_CS_GPIO_Port, ADF_CS_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f002 fe29 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c58:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4836      	ldr	r0, [pc, #216]	@ (8000d44 <MX_GPIO_Init+0x198>)
 8000c6a:	f002 fb7d 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D15_Pin;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D15_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4830      	ldr	r0, [pc, #192]	@ (8000d44 <MX_GPIO_Init+0x198>)
 8000c82:	f002 fb71 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c86:	2320      	movs	r3, #32
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f002 fb62 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4821      	ldr	r0, [pc, #132]	@ (8000d40 <MX_GPIO_Init+0x194>)
 8000cbc:	f002 fb54 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D9_Pin|D10_Pin
 8000cc0:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8000cc4:	617b      	str	r3, [r7, #20]
                          |D11_Pin|D12_Pin|D13_Pin|D14_Pin
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <MX_GPIO_Init+0x194>)
 8000cd6:	f002 fb47 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8000cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <MX_GPIO_Init+0x198>)
 8000cf2:	f002 fb39 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_CNVST_Pin;
 8000cf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_GPIO_Init+0x198>)
 8000d10:	f002 fb2a 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin;
 8000d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADF_CS_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f002 fb1a 	bl	8003368 <HAL_GPIO_Init>

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	@ 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f001 ff50 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f816 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f7ff ff2a 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 8000d58:	f7ff fe30 	bl	80009bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d5c:	f000 fc88 	bl	8001670 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000d60:	f000 fc30 	bl	80015c4 <MX_TIM6_Init>
  MX_SPI3_Init();
 8000d64:	f000 f9c8 	bl	80010f8 <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d68:	f000 f85b 	bl	8000e22 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Initialize_Delay();
 8000d6c:	f7ff fdec 	bl	8000948 <Initialize_Delay>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d70:	f006 fbd8 	bl	8007524 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d74:	f7ff fe3a 	bl	80009ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d78:	f006 fbf8 	bl	800756c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <main+0x34>

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b096      	sub	sp, #88	@ 0x58
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2244      	movs	r2, #68	@ 0x44
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f009 fec5 	bl	800ab1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000da2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000da6:	f002 fdbb 	bl	8003920 <HAL_PWREx_ControlVoltageScaling>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000db0:	f000 f86e 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fdf2 	bl	80039cc <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dee:	f000 f84f 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2303      	movs	r3, #3
 8000df8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f9ba 	bl	8004184 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e16:	f000 f83b 	bl	8000e90 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3758      	adds	r7, #88	@ 0x58
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2105      	movs	r1, #5
 8000e2a:	2017      	movs	r0, #23
 8000e2c:	f001 fffc 	bl	8002e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e30:	2017      	movs	r0, #23
 8000e32:	f002 f815 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2105      	movs	r1, #5
 8000e3a:	2026      	movs	r0, #38	@ 0x26
 8000e3c:	f001 fff4 	bl	8002e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e40:	2026      	movs	r0, #38	@ 0x26
 8000e42:	f002 f80d 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2105      	movs	r1, #5
 8000e4a:	2011      	movs	r0, #17
 8000e4c:	f001 ffec 	bl	8002e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e50:	2011      	movs	r0, #17
 8000e52:	f002 f805 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2105      	movs	r1, #5
 8000e5a:	2010      	movs	r0, #16
 8000e5c:	f001 ffe4 	bl	8002e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f001 fffd 	bl	8002e60 <HAL_NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7e:	f001 fed7 	bl	8002c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40000c00 	.word	0x40000c00

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <ParserTakeLine>:
	{"EN", "EN set to %ld\n\r", "Type EN 0 or 1\n\r", ADF5355_Enable, 0},
	{"RUN", "New configuration applied\n\r", "New configuration failed to apply\n\r", ADF5355_Run, 1},
	{"SETUP", "Configuration succeed\n\r", "Configuration failed\n\r", LoadADF5355, 1},
};

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 8000eaa:	f107 030e 	add.w	r3, r7, #14
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f8e9 	bl	8001088 <ReadFromBuffer>
		  if(tmp == ENDLINE){
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	d105      	bne.n	8000ec8 <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e004      	b.n	8000ed2 <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	7bba      	ldrb	r2, [r7, #14]
 8000ed0:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d1e5      	bne.n	8000eaa <ParserTakeLine+0xe>
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ParserParse>:

void ParserParse(char* received_string){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09a      	sub	sp, #104	@ 0x68
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	char* endptr;
	char* parse_pointer = strtok(received_string, "=");
 8000ef0:	4941      	ldr	r1, [pc, #260]	@ (8000ff8 <ParserParse+0x110>)
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f009 fe1c 	bl	800ab30 <strtok>
 8000ef8:	65f8      	str	r0, [r7, #92]	@ 0x5c
	int32_t value = strtol(strtok(NULL,","), &endptr, 10);
 8000efa:	4940      	ldr	r1, [pc, #256]	@ (8000ffc <ParserParse+0x114>)
 8000efc:	2000      	movs	r0, #0
 8000efe:	f009 fe17 	bl	800ab30 <strtok>
 8000f02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f06:	220a      	movs	r2, #10
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f009 fcd9 	bl	800a8c0 <strtol>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	653b      	str	r3, [r7, #80]	@ 0x50
	char buffer[70];
	bool cmd_matched = false;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f1c:	e053      	b.n	8000fc6 <ParserParse+0xde>
		if(strcmp(at_cmds[i].command, parse_pointer) == 0){
 8000f1e:	4938      	ldr	r1, [pc, #224]	@ (8001000 <ParserParse+0x118>)
 8000f20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f94d 	bl	80001d0 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d141      	bne.n	8000fc0 <ParserParse+0xd8>
			bool* result = at_cmds[i].function(&value);
 8000f3c:	4930      	ldr	r1, [pc, #192]	@ (8001000 <ParserParse+0x118>)
 8000f3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	330c      	adds	r3, #12
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000f52:	4610      	mov	r0, r2
 8000f54:	4798      	blx	r3
 8000f56:	65b8      	str	r0, [r7, #88]	@ 0x58
			if (*result == true && (endptr != 0x00 || at_cmds[i].optional_argument == 1)){
 8000f58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01d      	beq.n	8000f9c <ParserParse+0xb4>
 8000f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <ParserParse+0x94>
 8000f66:	4926      	ldr	r1, [pc, #152]	@ (8001000 <ParserParse+0x118>)
 8000f68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3310      	adds	r3, #16
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d10f      	bne.n	8000f9c <ParserParse+0xb4>
				sprintf(buffer, at_cmds[i].responsePositive, value);
 8000f7c:	4920      	ldr	r1, [pc, #128]	@ (8001000 <ParserParse+0x118>)
 8000f7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4618      	mov	r0, r3
 8000f96:	f009 fd5f 	bl	800aa58 <siprintf>
 8000f9a:	e00e      	b.n	8000fba <ParserParse+0xd2>
			}
			else {
				sprintf(buffer, at_cmds[i].responseNegative, value);
 8000f9c:	4918      	ldr	r1, [pc, #96]	@ (8001000 <ParserParse+0x118>)
 8000f9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3308      	adds	r3, #8
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f009 fd4f 	bl	800aa58 <siprintf>
			}
			cmd_matched = true;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000fc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	d9a8      	bls.n	8000f1e <ParserParse+0x36>
		}
	}
	if (!cmd_matched){
 8000fcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <ParserParse+0xfe>
		sprintf(buffer, "Available commands are LED, FREQOut, FREQIn, POW, EN, RUN and SETUP\n\r");
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4909      	ldr	r1, [pc, #36]	@ (8001004 <ParserParse+0x11c>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f009 fd39 	bl	800aa58 <siprintf>
	}
	UARTLog(buffer);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fc28 	bl	8001840 <UARTLog>
}
 8000ff0:	bf00      	nop
 8000ff2:	3768      	adds	r7, #104	@ 0x68
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0800bd94 	.word	0x0800bd94
 8000ffc:	0800bd98 	.word	0x0800bd98
 8001000:	2000004c 	.word	0x2000004c
 8001004:	0800bd9c 	.word	0x0800bd9c

08001008 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t *Data, uint8_t Len)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHead;

	for(int i=0; i<Len; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e02a      	b.n	8001072 <WriteToBuffer+0x6a>
		TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8c1b      	ldrh	r3, [r3, #32]
 8001020:	3301      	adds	r3, #1
 8001022:	425a      	negs	r2, r3
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	f002 021f 	and.w	r2, r2, #31
 800102c:	bf58      	it	pl
 800102e:	4253      	negpl	r3, r2
 8001030:	74fb      	strb	r3, [r7, #19]

		if( TempHead == Buffer->Tail) // No room for new data
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	b29a      	uxth	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800103a:	429a      	cmp	r2, r3
 800103c:	d101      	bne.n	8001042 <WriteToBuffer+0x3a>
		{
			return RB_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e01c      	b.n	800107c <WriteToBuffer+0x74>
		}
		else
		{
			Buffer->Buffer[Buffer->Head] = *(Data+i);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	4413      	add	r3, r2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	8c12      	ldrh	r2, [r2, #32]
 800104c:	7819      	ldrb	r1, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	5499      	strb	r1, [r3, r2]

			Buffer->Head++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8c1b      	ldrh	r3, [r3, #32]
 8001056:	3301      	adds	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	841a      	strh	r2, [r3, #32]
			Buffer->Head %= BUFFER_SIZE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8c1b      	ldrh	r3, [r3, #32]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	841a      	strh	r2, [r3, #32]
	for(int i=0; i<Len; i++){
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	429a      	cmp	r2, r3
 8001078:	dbd0      	blt.n	800101c <WriteToBuffer+0x14>
		}
	}
	return RB_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	8c1b      	ldrh	r3, [r3, #32]
 800109a:	429a      	cmp	r2, r3
 800109c:	d101      	bne.n	80010a2 <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e014      	b.n	80010cc <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80010a6:	461a      	mov	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	5c9a      	ldrb	r2, [r3, r2]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80010b4:	3301      	adds	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <FlushBuffer>:

void FlushBuffer(RingBuffer *Buffer)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	Buffer->Tail = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	845a      	strh	r2, [r3, #34]	@ 0x22
	Buffer->Head = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	841a      	strh	r2, [r3, #32]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_SPI3_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <MX_SPI3_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_SPI3_Init+0x74>)
 8001104:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_SPI3_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_SPI3_Init+0x74>)
 8001112:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001116:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_SPI3_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_SPI3_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_SPI3_Init+0x74>)
 8001126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_SPI3_Init+0x74>)
 800112e:	2220      	movs	r2, #32
 8001130:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_SPI3_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_SPI3_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_SPI3_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_SPI3_Init+0x74>)
 8001146:	2207      	movs	r2, #7
 8001148:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_SPI3_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_SPI3_Init+0x74>)
 8001152:	2208      	movs	r2, #8
 8001154:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_SPI3_Init+0x74>)
 8001158:	f003 ff26 	bl	8004fa8 <HAL_SPI_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001162:	f7ff fe95 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001c8 	.word	0x200001c8
 8001170:	40003c00 	.word	0x40003c00

08001174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <HAL_SPI_MspInit+0x7c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d128      	bne.n	80011e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	4a16      	ldr	r2, [pc, #88]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 800119c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011c6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011d8:	2306      	movs	r3, #6
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_SPI_MspInit+0x84>)
 80011e4:	f002 f8c0 	bl	8003368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40003c00 	.word	0x40003c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48000800 	.word	0x48000800

080011fc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_SPI_MspDeInit+0x30>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10a      	bne.n	8001224 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_SPI_MspDeInit+0x34>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_SPI_MspDeInit+0x34>)
 8001214:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001218:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800121a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_SPI_MspDeInit+0x38>)
 8001220:	f002 fa4c 	bl	80036bc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40003c00 	.word	0x40003c00
 8001230:	40021000 	.word	0x40021000
 8001234:	48000800 	.word	0x48000800

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_MspInit+0x4c>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001242:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_MspInit+0x4c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	@ 0x60
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <HAL_MspInit+0x4c>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_MspInit+0x4c>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <HAL_MspInit+0x4c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001260:	6593      	str	r3, [r2, #88]	@ 0x58
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_MspInit+0x4c>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	210f      	movs	r1, #15
 8001272:	f06f 0001 	mvn.w	r0, #1
 8001276:	f001 fdd7 	bl	8002e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	@ 0x38
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001296:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <HAL_InitTick+0xe0>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	4a33      	ldr	r2, [pc, #204]	@ (8001368 <HAL_InitTick+0xe0>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <HAL_InitTick+0xe0>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ae:	f107 0210 	add.w	r2, r7, #16
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f927 	bl	800450c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012c8:	f003 f8f4 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80012cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80012ce:	e004      	b.n	80012da <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012d0:	f003 f8f0 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80012d4:	4603      	mov	r3, r0
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012dc:	4a23      	ldr	r2, [pc, #140]	@ (800136c <HAL_InitTick+0xe4>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9b      	lsrs	r3, r3, #18
 80012e4:	3b01      	subs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <HAL_InitTick+0xe8>)
 80012ea:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <HAL_InitTick+0xec>)
 80012ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_InitTick+0xe8>)
 80012f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001370 <HAL_InitTick+0xe8>)
 80012f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <HAL_InitTick+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_InitTick+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_InitTick+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800130e:	4818      	ldr	r0, [pc, #96]	@ (8001370 <HAL_InitTick+0xe8>)
 8001310:	f004 f9f0 	bl	80056f4 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800131a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800131e:	2b00      	cmp	r3, #0
 8001320:	d11b      	bne.n	800135a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001322:	4813      	ldr	r0, [pc, #76]	@ (8001370 <HAL_InitTick+0xe8>)
 8001324:	f004 faa6 	bl	8005874 <HAL_TIM_Base_Start_IT>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800132e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001332:	2b00      	cmp	r3, #0
 8001334:	d111      	bne.n	800135a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001336:	2032      	movs	r0, #50	@ 0x32
 8001338:	f001 fd92 	bl	8002e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	d808      	bhi.n	8001354 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001342:	2200      	movs	r2, #0
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	2032      	movs	r0, #50	@ 0x32
 8001348:	f001 fd6e 	bl	8002e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <HAL_InitTick+0xf0>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e002      	b.n	800135a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800135a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800135e:	4618      	mov	r0, r3
 8001360:	3738      	adds	r7, #56	@ 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	431bde83 	.word	0x431bde83
 8001370:	2000022c 	.word	0x2000022c
 8001374:	40000c00 	.word	0x40000c00
 8001378:	200000e8 	.word	0x200000e8

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <NMI_Handler+0x4>

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <MemManage_Handler+0x4>

08001394 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <DMA1_Channel6_IRQHandler+0x10>)
 80013ba:	f001 fef6 	bl	80031aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000350 	.word	0x20000350

080013c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Channel7_IRQHandler+0x10>)
 80013ce:	f001 feec 	bl	80031aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000398 	.word	0x20000398

080013dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_BUSY_Pin);
 80013e0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013e4:	f002 fa76 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <USART2_IRQHandler+0x10>)
 80013f2:	f004 fe03 	bl	8005ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002c8 	.word	0x200002c8

08001400 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <TIM5_IRQHandler+0x10>)
 8001406:	f004 faa5 	bl	8005954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000022c 	.word	0x2000022c

08001414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_kill>:

int _kill(int pid, int sig)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800142e:	f009 fc87 	bl	800ad40 <__errno>
 8001432:	4603      	mov	r3, r0
 8001434:	2216      	movs	r2, #22
 8001436:	601a      	str	r2, [r3, #0]
  return -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_exit>:

void _exit (int status)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffe7 	bl	8001424 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001456:	bf00      	nop
 8001458:	e7fd      	b.n	8001456 <_exit+0x12>

0800145a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e00a      	b.n	8001482 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800146c:	f3af 8000 	nop.w
 8001470:	4601      	mov	r1, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	60ba      	str	r2, [r7, #8]
 8001478:	b2ca      	uxtb	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	dbf0      	blt.n	800146c <_read+0x12>
  }

  return len;
 800148a:	687b      	ldr	r3, [r7, #4]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e009      	b.n	80014ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	60ba      	str	r2, [r7, #8]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf1      	blt.n	80014a6 <_write+0x12>
  }
  return len;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_close>:

int _close(int file)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014f4:	605a      	str	r2, [r3, #4]
  return 0;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_isatty>:

int _isatty(int file)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f009 fbec 	bl	800ad40 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20018000 	.word	0x20018000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000278 	.word	0x20000278
 800159c:	20002ad0 	.word	0x20002ad0

080015a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_TIM6_Init+0x64>)
 80015d6:	4a15      	ldr	r2, [pc, #84]	@ (800162c <MX_TIM6_Init+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_TIM6_Init+0x64>)
 80015dc:	224f      	movs	r2, #79	@ 0x4f
 80015de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_TIM6_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_TIM6_Init+0x64>)
 80015e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_TIM6_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <MX_TIM6_Init+0x64>)
 80015f6:	f004 f87d 	bl	80056f4 <HAL_TIM_Base_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001600:	f7ff fc46 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_TIM6_Init+0x64>)
 8001612:	f004 fb75 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800161c:	f7ff fc38 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000027c 	.word	0x2000027c
 800162c:	40001000 	.word	0x40001000

08001630 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_TIM_Base_MspInit+0x38>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10b      	bne.n	800165a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_TIM_Base_MspInit+0x3c>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001646:	4a09      	ldr	r2, [pc, #36]	@ (800166c <HAL_TIM_Base_MspInit+0x3c>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6593      	str	r3, [r2, #88]	@ 0x58
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <HAL_TIM_Base_MspInit+0x3c>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000
 800166c:	40021000 	.word	0x40021000

08001670 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <MX_USART2_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016b4:	f004 fbca 	bl	8005e4c <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f7ff fbe7 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002c8 	.word	0x200002c8
 80016cc:	40004400 	.word	0x40004400

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0ac      	sub	sp, #176	@ 0xb0
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2288      	movs	r2, #136	@ 0x88
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f009 fa14 	bl	800ab1e <memset>
  if(uartHandle->Instance==USART2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001828 <HAL_UART_MspInit+0x158>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	f040 808e 	bne.w	800181e <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001702:	2302      	movs	r3, #2
 8001704:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001706:	2300      	movs	r3, #0
 8001708:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4618      	mov	r0, r3
 8001710:	f002 ff8e 	bl	8004630 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800171a:	f7ff fbb9 	bl	8000e90 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171e:	4b43      	ldr	r3, [pc, #268]	@ (800182c <HAL_UART_MspInit+0x15c>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	4a42      	ldr	r2, [pc, #264]	@ (800182c <HAL_UART_MspInit+0x15c>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	6593      	str	r3, [r2, #88]	@ 0x58
 800172a:	4b40      	ldr	r3, [pc, #256]	@ (800182c <HAL_UART_MspInit+0x15c>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <HAL_UART_MspInit+0x15c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a3c      	ldr	r2, [pc, #240]	@ (800182c <HAL_UART_MspInit+0x15c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <HAL_UART_MspInit+0x15c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174e:	230c      	movs	r3, #12
 8001750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001766:	2307      	movs	r3, #7
 8001768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001776:	f001 fdf7 	bl	8003368 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800177a:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_UART_MspInit+0x160>)
 800177c:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <HAL_UART_MspInit+0x164>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_UART_MspInit+0x160>)
 8001782:	2202      	movs	r2, #2
 8001784:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_UART_MspInit+0x160>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_UART_MspInit+0x160>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_UART_MspInit+0x160>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <HAL_UART_MspInit+0x160>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_UART_MspInit+0x160>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <HAL_UART_MspInit+0x160>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <HAL_UART_MspInit+0x160>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017b0:	481f      	ldr	r0, [pc, #124]	@ (8001830 <HAL_UART_MspInit+0x160>)
 80017b2:	f001 fb63 	bl	8002e7c <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80017bc:	f7ff fb68 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <HAL_UART_MspInit+0x160>)
 80017c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80017c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <HAL_UART_MspInit+0x160>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017ce:	4a1b      	ldr	r2, [pc, #108]	@ (800183c <HAL_UART_MspInit+0x16c>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017da:	2210      	movs	r2, #16
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_UART_MspInit+0x168>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001802:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_UART_MspInit+0x168>)
 8001804:	f001 fb3a 	bl	8002e7c <HAL_DMA_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800180e:	f7ff fb3f 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <HAL_UART_MspInit+0x168>)
 8001816:	671a      	str	r2, [r3, #112]	@ 0x70
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_UART_MspInit+0x168>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800181e:	bf00      	nop
 8001820:	37b0      	adds	r7, #176	@ 0xb0
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40004400 	.word	0x40004400
 800182c:	40021000 	.word	0x40021000
 8001830:	20000350 	.word	0x20000350
 8001834:	4002006c 	.word	0x4002006c
 8001838:	20000398 	.word	0x20000398
 800183c:	40020080 	.word	0x40020080

08001840 <UARTLog>:

extern struct adf5355_init_param hadf5355;
extern struct adf5355_dev* dev;

void UARTLog(char* message)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7fe fccb 	bl	80001e4 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <UARTLog+0x28>)
 800185a:	f004 fb45 	bl	8005ee8 <HAL_UART_Transmit>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200002c8 	.word	0x200002c8

0800186c <LightLED>:

void* SetPLL_Period(void* period_ms){

}

void* LightLED(void* state){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <LightLED+0x24>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d003      	beq.n	8001890 <LightLED+0x24>
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <LightLED+0x44>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e00a      	b.n	80018a6 <LightLED+0x3a>
	else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, *value);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	2120      	movs	r1, #32
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f002 f802 	bl	80038a4 <HAL_GPIO_WritePin>
		ret = true;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <LightLED+0x44>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80018a6:	4b02      	ldr	r3, [pc, #8]	@ (80018b0 <LightLED+0x44>)
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200003e0 	.word	0x200003e0

080018b4 <LoadADF5355>:

void* LoadADF5355(void* arg){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	ADF5355_Param_Init();
 80018bc:	f001 f86a 	bl	8002994 <ADF5355_Param_Init>
	static bool ret = false;
	int32_t response = adf5355_init(&dev, &hadf5355);
 80018c0:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <LoadADF5355+0x2c>)
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <LoadADF5355+0x30>)
 80018c4:	f000 fe54 	bl	8002570 <adf5355_init>
 80018c8:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <LoadADF5355+0x22>
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <LoadADF5355+0x34>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
	return &ret;
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <LoadADF5355+0x34>)
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200003e8 	.word	0x200003e8
 80018e4:	20000418 	.word	0x20000418
 80018e8:	200003e1 	.word	0x200003e1

080018ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001924 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f0:	f7ff fe56 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	@ (800192c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <LoopForever+0xe>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	@ (8001938 <LoopForever+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191a:	f009 fa17 	bl	800ad4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191e:	f7ff fa13 	bl	8000d48 <main>

08001922 <LoopForever>:

LoopForever:
    b LoopForever
 8001922:	e7fe      	b.n	8001922 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001924:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001930:	0800c0c8 	.word	0x0800c0c8
  ldr r2, =_sbss
 8001934:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001938:	20002acc 	.word	0x20002acc

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>

0800193e <ad7676_acquire_data>:

	*ad7676_data = init_data;
}

void ad7676_acquire_data(data_Collector_TypeDef* ad7676_data, int16_t sample)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]
	ad7676_data->data_buf[ad7676_data->data_ptr++] = sample;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8001950:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	b291      	uxth	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 800195e:	f8a2 1ffe 	strh.w	r1, [r2, #4094]	@ 0xffe
 8001962:	461a      	mov	r2, r3
 8001964:	8879      	ldrh	r1, [r7, #2]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <ad7676_read_one_sample>:

void ad7676_read_one_sample()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

//	(GPIOx->IDR & GPIO_Pin);
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <ad7676_read_one_sample+0x48>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	b29b      	uxth	r3, r3
 8001984:	f023 030c 	bic.w	r3, r3, #12
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <ad7676_read_one_sample+0x4c>)
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	b29b      	uxth	r3, r3
 8001990:	03db      	lsls	r3, r3, #15
 8001992:	b29b      	uxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	80fb      	strh	r3, [r7, #6]
	ad7676_acquire_data(ad7676_data, sample);
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <ad7676_read_one_sample+0x50>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ffca 	bl	800193e <ad7676_acquire_data>
	AD7676_CNVST_ON;
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <ad7676_read_one_sample+0x4c>)
 80019b2:	f001 ff77 	bl	80038a4 <HAL_GPIO_WritePin>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	48000400 	.word	0x48000400
 80019c4:	48000800 	.word	0x48000800
 80019c8:	2000016c 	.word	0x2000016c

080019cc <ad7676_start_conversion>:
	}
	ad7676_data->data_ptr = 0;
}

void ad7676_start_conversion()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	AD7676_CNVST_OFF;
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019d6:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <ad7676_start_conversion+0x14>)
 80019d8:	f001 ff64 	bl	80038a4 <HAL_GPIO_WritePin>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	48000800 	.word	0x48000800

080019e4 <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	460b      	mov	r3, r1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	0e1b      	lsrs	r3, r3, #24
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a22:	f001 ff3f 	bl	80038a4 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f107 0110 	add.w	r1, r7, #16
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	2204      	movs	r2, #4
 8001a34:	f003 fb83 	bl	800513e <HAL_SPI_Transmit>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a46:	f001 ff2d 	bl	80038a4 <HAL_GPIO_WritePin>

	return ret;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a5e:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 8001a62:	f107 0108 	add.w	r1, r7, #8
 8001a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	f001 f898 	bl	8002ba0 <no_os_do_div>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 8001a78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	060b      	lsls	r3, r1, #24
 8001a86:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001a8a:	0602      	lsls	r2, r0, #24
 8001a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8001a90:	f107 0110 	add.w	r1, r7, #16
 8001a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a98:	4608      	mov	r0, r1
 8001a9a:	f001 f881 	bl	8002ba0 <no_os_do_div>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa4:	601a      	str	r2, [r3, #0]

	*integer = vco;
 8001aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aac:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8001aae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab4:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aba:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8001abc:	e009      	b.n	8001ad2 <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8001abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	085a      	lsrs	r2, r3, #1
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac6:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	085a      	lsrs	r2, r3, #1
 8001ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad0:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3f0      	bcc.n	8001abe <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8001adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f001 f832 	bl	8002b50 <no_os_greatest_common_divisor>
 8001aec:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 8001aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afa:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 8001afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <adf5355_calc_reg0_to_2>:

/*Private static functions*/

static uint32_t adf5355_calc_reg0_to_2(struct adf5355_dev *dev, uint8_t autocalc_en){
 8001b14:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001b18:	b08a      	sub	sp, #40	@ 0x28
 8001b1a:	af06      	add	r7, sp, #24
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	70f9      	strb	r1, [r7, #3]

	uint32_t tmp_cp_bleed;
	bool prescaler;
//	bool cp_neg_bleed_en; //It might be unused, need to examine it

	adf5355_pll_fract_n_compute(dev->freq_req, dev->fpfd, &dev->integer, &dev->fract1,
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	e9d1 bc10 	ldrd	fp, ip, [r1, #64]	@ 0x40
 8001b26:	687c      	ldr	r4, [r7, #4]
 8001b28:	6ea4      	ldr	r4, [r4, #104]	@ 0x68
 8001b2a:	2500      	movs	r5, #0
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	462b      	mov	r3, r5
 8001b30:	687c      	ldr	r4, [r7, #4]
 8001b32:	346c      	adds	r4, #108	@ 0x6c
 8001b34:	687d      	ldr	r5, [r7, #4]
 8001b36:	3570      	adds	r5, #112	@ 0x70
 8001b38:	687e      	ldr	r6, [r7, #4]
 8001b3a:	3674      	adds	r6, #116	@ 0x74
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	3178      	adds	r1, #120	@ 0x78
 8001b40:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b44:	9004      	str	r0, [sp, #16]
 8001b46:	9103      	str	r1, [sp, #12]
 8001b48:	9602      	str	r6, [sp, #8]
 8001b4a:	9501      	str	r5, [sp, #4]
 8001b4c:	9400      	str	r4, [sp, #0]
 8001b4e:	4658      	mov	r0, fp
 8001b50:	4661      	mov	r1, ip
 8001b52:	f7ff ff7f 	bl	8001a54 <adf5355_pll_fract_n_compute>
						&dev->fract2, &dev->mod2, ADF5355_MAX_MODULUS2);

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b5a:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b5c:	bf8c      	ite	hi
 8001b5e:	2301      	movhi	r3, #1
 8001b60:	2300      	movls	r3, #0
 8001b62:	72fb      	strb	r3, [r7, #11]
//	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
//		cp_neg_bleed_en = false;
//	else
//		cp_neg_bleed_en = dev->cp_neg_bleed_en;

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	791b      	ldrb	r3, [r3, #4]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d003      	beq.n	8001b74 <adf5355_calc_reg0_to_2+0x60>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d113      	bne.n	8001b9c <adf5355_calc_reg0_to_2+0x88>
		tmp_cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b78:	4a2c      	ldr	r2, [pc, #176]	@ (8001c2c <adf5355_calc_reg0_to_2+0x118>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8001b84:	fb03 f202 	mul.w	r2, r3, r2
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	0b9b      	lsrs	r3, r3, #14
 8001b92:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <adf5355_calc_reg0_to_2+0x11c>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e016      	b.n	8001bca <adf5355_calc_reg0_to_2+0xb6>
	} else {
		tmp_cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ba0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001ba4:	fb03 f202 	mul.w	r2, r3, r2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bac:	f240 1177 	movw	r1, #375	@ 0x177
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bbc:	f240 1177 	movw	r1, #375	@ 0x177
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	60fb      	str	r3, [r7, #12]
	}

	tmp_cp_bleed = no_os_clamp(tmp_cp_bleed, 1U, 255U);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d904      	bls.n	8001bda <adf5355_calc_reg0_to_2+0xc6>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2bff      	cmp	r3, #255	@ 0xff
 8001bd4:	bf28      	it	cs
 8001bd6:	23ff      	movcs	r3, #255	@ 0xff
 8001bd8:	e000      	b.n	8001bdc <adf5355_calc_reg0_to_2+0xc8>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001be2:	011a      	lsls	r2, r3, #4
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <adf5355_calc_reg0_to_2+0x120>)
 8001be6:	4013      	ands	r3, r2
					ADF5355_REG0_PRESCALER(prescaler) |
 8001be8:	7afa      	ldrb	r2, [r7, #11]
 8001bea:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001bec:	431a      	orrs	r2, r3
					ADF5355_REG0_AUTOCAL(autocalc_en); //autocalibration needs to be disabled
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	055b      	lsls	r3, r3, #21
					ADF5355_REG0_PRESCALER(prescaler) |
 8001bf2:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c02:	f023 030f 	bic.w	r3, r3, #15
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c0e:	011a      	lsls	r2, r3, #4
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <adf5355_calc_reg0_to_2+0x124>)
 8001c12:	4013      	ands	r3, r2
					ADF5355_REG2_FRAC2(dev->fract2);
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c18:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
	return tmp_cp_bleed;
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001c2c:	10624dd3 	.word	0x10624dd3
 8001c30:	00136b0b 	.word	0x00136b0b
 8001c34:	000ffff0 	.word	0x000ffff0
 8001c38:	0003fff0 	.word	0x0003fff0

08001c3c <adf5355_calc_pfd>:

static void adf5355_calc_pfd(struct adf5355_dev *dev, uint8_t counter_reset)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	dev->ref_div_factor = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001c56:	3301      	adds	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <adf5355_calc_pfd+0x36>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e000      	b.n	8001c74 <adf5355_calc_pfd+0x38>
 8001c72:	2301      	movs	r3, #1
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	f8b2 2090 	ldrh.w	r2, [r2, #144]	@ 0x90
 8001c7e:	4611      	mov	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d001      	beq.n	8001c8e <adf5355_calc_pfd+0x52>
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	e000      	b.n	8001c90 <adf5355_calc_pfd+0x54>
 8001c8e:	2201      	movs	r2, #1
 8001c90:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <adf5355_calc_pfd+0x110>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d8d4      	bhi.n	8001c50 <adf5355_calc_pfd+0x14>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001caa:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 8001cae:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <adf5355_calc_pfd+0x114>)
 8001cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb4:	1ad2      	subs	r2, r2, r3
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <adf5355_calc_pfd+0x92>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	bf28      	it	cs
 8001cca:	230f      	movcs	r3, #15
 8001ccc:	e000      	b.n	8001cd0 <adf5355_calc_pfd+0x94>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	011b      	lsls	r3, r3, #4
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	f892 2088 	ldrb.w	r2, [r2, #136]	@ 0x88
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d101      	bne.n	8001ce4 <adf5355_calc_pfd+0xa8>
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	e000      	b.n	8001ce6 <adf5355_calc_pfd+0xaa>
 8001ce4:	2200      	movs	r2, #0
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 8001ce6:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8001cee:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001cf0:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001cf8:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	029b      	lsls	r3, r3, #10
 8001d02:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001d06:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001d0e:	03d9      	lsls	r1, r3, #15
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <adf5355_calc_pfd+0x118>)
 8001d12:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 8001d14:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001d1c:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001d1e:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001d26:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001d28:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d30:	06db      	lsls	r3, r3, #27
 8001d32:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	047868c0 	.word	0x047868c0
 8001d50:	a01a01a1 	.word	0xa01a01a1
 8001d54:	01ff8000 	.word	0x01ff8000

08001d58 <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d003      	beq.n	8001d74 <adf5355_reg_config+0x1c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	791b      	ldrb	r3, [r3, #4]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d101      	bne.n	8001d78 <adf5355_reg_config+0x20>
 8001d74:	230d      	movs	r3, #13
 8001d76:	e000      	b.n	8001d7a <adf5355_reg_config+0x22>
 8001d78:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 8001d7a:	613b      	str	r3, [r7, #16]

	if ((sync_all || !dev->all_synced) && dev->fpfd <= 75000000) {
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <adf5355_reg_config+0x38>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	795b      	ldrb	r3, [r3, #5]
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <adf5355_reg_config+0x7e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d94:	4a7c      	ldr	r2, [pc, #496]	@ (8001f88 <adf5355_reg_config+0x230>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d81d      	bhi.n	8001dd6 <adf5355_reg_config+0x7e>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e013      	b.n	8001dc8 <adf5355_reg_config+0x70>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	3202      	adds	r2, #2
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	461a      	mov	r2, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fe17 	bl	80019e4 <adf5355_write>
 8001db6:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <adf5355_reg_config+0x6a>
				return ret;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	e0de      	b.n	8001f80 <adf5355_reg_config+0x228>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e8      	bne.n	8001da0 <adf5355_reg_config+0x48>
		}

		dev->all_synced = true;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	715a      	strb	r2, [r3, #5]
 8001dd4:	e066      	b.n	8001ea4 <adf5355_reg_config+0x14c>

	}
	else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	791b      	ldrb	r3, [r3, #4]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d003      	beq.n	8001de6 <adf5355_reg_config+0x8e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d10c      	bne.n	8001e00 <adf5355_reg_config+0xa8>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dea:	461a      	mov	r2, r3
 8001dec:	210d      	movs	r1, #13
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fdf8 	bl	80019e4 <adf5355_write>
 8001df4:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <adf5355_reg_config+0xa8>
				return ret;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	e0bf      	b.n	8001f80 <adf5355_reg_config+0x228>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	461a      	mov	r2, r3
 8001e06:	210a      	movs	r1, #10
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fdeb 	bl	80019e4 <adf5355_write>
 8001e0e:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <adf5355_reg_config+0xc2>
			return ret;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	e0b2      	b.n	8001f80 <adf5355_reg_config+0x228>
		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
		if (ret != 0)
			return ret;
		*/
		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	461a      	mov	r2, r3
 8001e24:	2104      	movs	r1, #4
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fddc 	bl	80019e4 <adf5355_write>
 8001e2c:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <adf5355_reg_config+0xe0>
			return ret;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	e0a3      	b.n	8001f80 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2102      	movs	r1, #2
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fdcf 	bl	80019e4 <adf5355_write>
 8001e46:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <adf5355_reg_config+0xfa>
			return ret;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	e096      	b.n	8001f80 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	461a      	mov	r2, r3
 8001e58:	2101      	movs	r1, #1
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fdc2 	bl	80019e4 <adf5355_write>
 8001e60:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <adf5355_reg_config+0x114>
			return ret;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	e089      	b.n	8001f80 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 8001e70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e74:	461a      	mov	r2, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fdb3 	bl	80019e4 <adf5355_write>
 8001e7e:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <adf5355_reg_config+0x132>
			return ret;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	e07a      	b.n	8001f80 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]); //counter reset disabled by default
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2104      	movs	r1, #4
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fda6 	bl	80019e4 <adf5355_write>
 8001e98:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <adf5355_reg_config+0x14c>
			return ret;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	e06d      	b.n	8001f80 <adf5355_reg_config+0x228>
	}

	if (dev->delay_us > 999)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eae:	d314      	bcc.n	8001eda <adf5355_reg_config+0x182>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb6:	4a35      	ldr	r2, [pc, #212]	@ (8001f8c <adf5355_reg_config+0x234>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb30 	bl	8000524 <__aeabi_ui2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe fba4 	bl	8000618 <__aeabi_d2uiz>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fd66 	bl	80009a4 <delay_ms>
 8001ed8:	e005      	b.n	8001ee6 <adf5355_reg_config+0x18e>
	}
	else
	{
		delay_us(dev->delay_us);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fd3b 	bl	800095c <delay_us>
	}

	if (dev->fpfd > 75000000) { //needs to be verified
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eea:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <adf5355_reg_config+0x230>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d93f      	bls.n	8001f70 <adf5355_reg_config+0x218>
		ret = adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fd73 	bl	80019e4 <adf5355_write>
 8001efe:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <adf5355_reg_config+0x1b2>
			return ret;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	e03a      	b.n	8001f80 <adf5355_reg_config+0x228>

		dev->ref_div2_en = false;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		adf5355_calc_pfd(dev, 0);
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fe91 	bl	8001c3c <adf5355_calc_pfd>

		adf5355_calc_reg0_to_2(dev, 0);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fdf9 	bl	8001b14 <adf5355_calc_reg0_to_2>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	461a      	mov	r2, r3
 8001f28:	2104      	movs	r1, #4
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fd5a 	bl	80019e4 <adf5355_write>
 8001f30:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <adf5355_reg_config+0x1e4>
			return ret;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	e021      	b.n	8001f80 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[2]);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	461a      	mov	r2, r3
 8001f42:	2102      	movs	r1, #2
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fd4d 	bl	80019e4 <adf5355_write>
 8001f4a:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <adf5355_reg_config+0x1fe>
			return ret;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	e014      	b.n	8001f80 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[1]);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fd40 	bl	80019e4 <adf5355_write>
 8001f64:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <adf5355_reg_config+0x218>
			return ret;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	e007      	b.n	8001f80 <adf5355_reg_config+0x228>
		//REGs 0 for halved, 4 for desired, then 2, 1, 0
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	461a      	mov	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fd33 	bl	80019e4 <adf5355_write>
 8001f7e:	4603      	mov	r3, r0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	047868c0 	.word	0x047868c0
 8001f8c:	10624dd3 	.word	0x10624dd3

08001f90 <adf5355_change_freq>:

int32_t adf5355_change_freq(struct adf5355_dev *dev, uint64_t freq){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	e9c7 2300 	strd	r2, r3, [r7]
 * Reg0 (autocal en) for halved fpfd
 * Reg4 for desired fpdf with RDIV dis
 * Reg2-0 (autocal dis)

*/
	dev->freq_req = freq;
 8001f9c:	68f9      	ldr	r1, [r7, #12]
 8001f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fa2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <adf5355_change_freq+0x4c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d903      	bls.n	8001fb8 <adf5355_change_freq+0x28>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	adf5355_calc_pfd(dev, 1);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff fe3e 	bl	8001c3c <adf5355_calc_pfd>
	adf5355_calc_reg0_to_2(dev, 1); //We set autocal as default, first it is negated, then send as default and then negated again
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff fda6 	bl	8001b14 <adf5355_calc_reg0_to_2>

	return adf5355_reg_config(dev, false);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fec4 	bl	8001d58 <adf5355_reg_config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	047868c0 	.word	0x047868c0

08001fe0 <adf5355_set_power>:

int32_t adf5355_set_power(struct adf5355_dev *dev, bool en, uint8_t power){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	70bb      	strb	r3, [r7, #2]

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8001ff0:	78bb      	ldrb	r3, [r7, #2]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
			ADF5355_REG6_RF_OUT_EN(en) |
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8001ffc:	431a      	orrs	r2, r3
			(((dev->dev_id == ADF5355)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791b      	ldrb	r3, [r3, #4]
			  || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <adf5355_set_power+0x2e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d107      	bne.n	800201e <adf5355_set_power+0x3e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002014:	f083 0301 	eor.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	e00a      	b.n	8002034 <adf5355_set_power+0x54>
			 ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8002024:	01db      	lsls	r3, r3, #7
 8002026:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
			 ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002030:	025b      	lsls	r3, r3, #9
			  || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8002032:	430b      	orrs	r3, r1
			ADF5355_REG6_RF_OUT_EN(en) |
 8002034:	431a      	orrs	r2, r3
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800203c:	02db      	lsls	r3, r3, #11
			 ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 800203e:	4313      	orrs	r3, r2
 8002040:	461a      	mov	r2, r3
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <adf5355_set_power+0xe8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	035b      	lsls	r3, r3, #13
 8002048:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 800204c:	431a      	orrs	r2, r3
			ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8002054:	055b      	lsls	r3, r3, #21
 8002056:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 800205a:	431a      	orrs	r2, r3
			ADF5355_REG6_FEEDBACK_FUND(1) |
			ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d104      	bne.n	800206e <adf5355_set_power+0x8e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800206a:	065b      	lsls	r3, r3, #25
 800206c:	e000      	b.n	8002070 <adf5355_set_power+0x90>
 800206e:	2300      	movs	r3, #0
			ADF5355_REG6_FEEDBACK_FUND(1) |
 8002070:	431a      	orrs	r2, r3
					dev->outb_sel_fund : 0) |
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002078:	075b      	lsls	r3, r3, #29
					dev->outb_sel_fund : 0) |
 800207a:	431a      	orrs	r2, r3
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002082:	079b      	lsls	r3, r3, #30
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002084:	431a      	orrs	r2, r3
			ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	791b      	ldrb	r3, [r3, #4]
 800208a:	2b04      	cmp	r3, #4
 800208c:	d003      	beq.n	8002096 <adf5355_set_power+0xb6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d104      	bne.n	80020a0 <adf5355_set_power+0xc0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800209c:	07db      	lsls	r3, r3, #31
 800209e:	e000      	b.n	80020a2 <adf5355_set_power+0xc2>
 80020a0:	2300      	movs	r3, #0
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 80020a2:	4313      	orrs	r3, r2
					|| (dev->dev_id == ADF5356)) ?
					dev->cp_bleed_current_polarity_en : 0) |
 80020a4:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 80020a8:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6213      	str	r3, [r2, #32]
			ADF5355_REG6_DEFAULT;

	return adf5355_write(dev, ADF5355_REG(6), dev->regs[6]);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	461a      	mov	r2, r3
 80020b6:	2106      	movs	r1, #6
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fc93 	bl	80019e4 <adf5355_write>
 80020be:	4603      	mov	r3, r0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200003e4 	.word	0x200003e4

080020cc <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 80020cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	e9c7 2300 	strd	r2, r3, [r7]

	if (chan > dev->num_channels)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80020e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d902      	bls.n	80020ee <adf5355_set_freq+0x22>
		return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ec:	e141      	b.n	8002372 <adf5355_set_freq+0x2a6>

	if (chan == 0) {
 80020ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d13c      	bne.n	8002170 <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80020fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002100:	4290      	cmp	r0, r2
 8002102:	eb71 0303 	sbcs.w	r3, r1, r3
 8002106:	d308      	bcc.n	800211a <adf5355_set_freq+0x4e>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800210e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002112:	4290      	cmp	r0, r2
 8002114:	eb71 0303 	sbcs.w	r3, r1, r3
 8002118:	d202      	bcs.n	8002120 <adf5355_set_freq+0x54>
			return -EINVAL;
 800211a:	f06f 0315 	mvn.w	r3, #21
 800211e:	e128      	b.n	8002372 <adf5355_set_freq+0x2a6>

		dev->rf_div_sel = 0;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002132:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 800213a:	e00f      	b.n	800215c <adf5355_set_freq+0x90>
			freq <<= 1;
 800213c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002140:	eb12 0802 	adds.w	r8, r2, r2
 8002144:	eb43 0903 	adc.w	r9, r3, r3
 8002148:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002166:	4290      	cmp	r0, r2
 8002168:	eb71 0303 	sbcs.w	r3, r1, r3
 800216c:	d3e6      	bcc.n	800213c <adf5355_set_freq+0x70>
 800216e:	e074      	b.n	800225a <adf5355_set_freq+0x18e>
		}
	} else if (dev->dev_id == ADF4356) {
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d14a      	bne.n	800220e <adf5355_set_freq+0x142>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800217e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002182:	4290      	cmp	r0, r2
 8002184:	eb71 0303 	sbcs.w	r3, r1, r3
 8002188:	d310      	bcc.n	80021ac <adf5355_set_freq+0xe0>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002194:	4290      	cmp	r0, r2
 8002196:	eb71 0303 	sbcs.w	r3, r1, r3
 800219a:	d307      	bcc.n	80021ac <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <adf5355_set_freq+0xe6>
			return -EINVAL;
 80021ac:	f06f 0315 	mvn.w	r3, #21
 80021b0:	e0df      	b.n	8002372 <adf5355_set_freq+0x2a6>

		dev->rf_div_sel = 0;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80021c4:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80021c6:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->outb_power);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80021ce:	01db      	lsls	r3, r3, #7
 80021d0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 80021d4:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 80021da:	e00e      	b.n	80021fa <adf5355_set_freq+0x12e>
			freq <<= 1;
 80021dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e0:	1894      	adds	r4, r2, r2
 80021e2:	eb43 0503 	adc.w	r5, r3, r3
 80021e6:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80021f0:	3301      	adds	r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002204:	4290      	cmp	r0, r2
 8002206:	eb71 0303 	sbcs.w	r3, r1, r3
 800220a:	d3e7      	bcc.n	80021dc <adf5355_set_freq+0x110>
 800220c:	e025      	b.n	800225a <adf5355_set_freq+0x18e>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 800220e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002212:	495a      	ldr	r1, [pc, #360]	@ (800237c <adf5355_set_freq+0x2b0>)
 8002214:	428a      	cmp	r2, r1
 8002216:	f173 0303 	sbcs.w	r3, r3, #3
 800221a:	d206      	bcs.n	800222a <adf5355_set_freq+0x15e>
 800221c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002220:	4957      	ldr	r1, [pc, #348]	@ (8002380 <adf5355_set_freq+0x2b4>)
 8002222:	428a      	cmp	r2, r1
 8002224:	f173 0301 	sbcs.w	r3, r3, #1
 8002228:	d202      	bcs.n	8002230 <adf5355_set_freq+0x164>
			return -EINVAL;
 800222a:	f06f 0315 	mvn.w	r3, #21
 800222e:	e0a0      	b.n	8002372 <adf5355_set_freq+0x2a6>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800223a:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	621a      	str	r2, [r3, #32]

		freq >>= 1;
 8002242:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	0842      	lsrs	r2, r0, #1
 8002250:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002254:	084b      	lsrs	r3, r1, #1
 8002256:	e9c7 2300 	strd	r2, r3, [r7]
	}

	cp_bleed = adf5355_calc_reg0_to_2(dev, 1);
 800225a:	2101      	movs	r1, #1
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff fc59 	bl	8001b14 <adf5355_calc_reg0_to_2>
 8002262:	4603      	mov	r3, r0
 8002264:	4a47      	ldr	r2, [pc, #284]	@ (8002384 <adf5355_set_freq+0x2b8>)
 8002266:	6013      	str	r3, [r2, #0]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	791b      	ldrb	r3, [r3, #4]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d003      	beq.n	8002278 <adf5355_set_freq+0x1ac>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <adf5355_set_freq+0x1c6>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800227c:	0b9b      	lsrs	r3, r3, #14
 800227e:	011a      	lsls	r2, r3, #4
 8002280:	4b41      	ldr	r3, [pc, #260]	@ (8002388 <adf5355_set_freq+0x2bc>)
 8002282:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002288:	0b92      	lsrs	r2, r2, #14
 800228a:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80022a4:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 80022a6:	431a      	orrs	r2, r3
				    (((dev->dev_id == ADF5355)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <adf5355_set_freq+0x1ec>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	791b      	ldrb	r3, [r3, #4]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d107      	bne.n	80022c8 <adf5355_set_freq+0x1fc>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80022be:	f083 0301 	eor.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	e00a      	b.n	80022de <adf5355_set_freq+0x212>
				     ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80022ce:	01db      	lsls	r3, r3, #7
 80022d0:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80022da:	025b      	lsls	r3, r3, #9
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 80022dc:	430b      	orrs	r3, r1
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 80022de:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80022e6:	02db      	lsls	r3, r3, #11
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 80022e8:	4313      	orrs	r3, r2
 80022ea:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 80022ec:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <adf5355_set_freq+0x2b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	035b      	lsls	r3, r3, #13
 80022f2:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80022f6:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80022fe:	055b      	lsls	r3, r3, #21
 8002300:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002304:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	791b      	ldrb	r3, [r3, #4]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d104      	bne.n	8002318 <adf5355_set_freq+0x24c>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8002314:	065b      	lsls	r3, r3, #25
 8002316:	e000      	b.n	800231a <adf5355_set_freq+0x24e>
 8002318:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 800231a:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002322:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 8002324:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800232c:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 800232e:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	791b      	ldrb	r3, [r3, #4]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d003      	beq.n	8002340 <adf5355_set_freq+0x274>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d104      	bne.n	800234a <adf5355_set_freq+0x27e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002346:	07db      	lsls	r3, r3, #31
 8002348:	e000      	b.n	800234c <adf5355_set_freq+0x280>
 800234a:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 800234c:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 800234e:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8002352:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	dev->freq_req = freq;
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002360:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return adf5355_reg_config(dev, dev->all_synced);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	795b      	ldrb	r3, [r3, #5]
 8002368:	4619      	mov	r1, r3
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fcf4 	bl	8001d58 <adf5355_reg_config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800237c:	2a9f8801 	.word	0x2a9f8801
 8002380:	954fc400 	.word	0x954fc400
 8002384:	200003e4 	.word	0x200003e4
 8002388:	0003fff0 	.word	0x0003fff0

0800238c <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	6078      	str	r0, [r7, #4]
	adf5355_calc_pfd(dev, 0);
 8002394:	2100      	movs	r1, #0
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fc50 	bl	8001c3c <adf5355_calc_pfd>

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a67      	ldr	r2, [pc, #412]	@ (800253c <adf5355_setup+0x1b0>)
 80023a0:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(1) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a66      	ldr	r2, [pc, #408]	@ (8002540 <adf5355_setup+0x1b4>)
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(0) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d003      	beq.n	80023b8 <adf5355_setup+0x2c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d101      	bne.n	80023bc <adf5355_setup+0x30>
 80023b8:	4a62      	ldr	r2, [pc, #392]	@ (8002544 <adf5355_setup+0x1b8>)
 80023ba:	e000      	b.n	80023be <adf5355_setup+0x32>
 80023bc:	4a62      	ldr	r2, [pc, #392]	@ (8002548 <adf5355_setup+0x1bc>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	uint32_t tmp;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023c6:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 80023ca:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 80023ce:	4a5f      	ldr	r2, [pc, #380]	@ (800254c <adf5355_setup+0x1c0>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	0c9b      	lsrs	r3, r3, #18
 80023d6:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d906      	bls.n	80023ec <adf5355_setup+0x60>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf28      	it	cs
 80023e8:	4613      	movcs	r3, r2
 80023ea:	e000      	b.n	80023ee <adf5355_setup+0x62>
 80023ec:	2301      	movs	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	039a      	lsls	r2, r3, #14
 80023f4:	4b56      	ldr	r3, [pc, #344]	@ (8002550 <adf5355_setup+0x1c4>)
 80023f6:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002402:	fb00 f202 	mul.w	r2, r0, r2
 8002406:	440a      	add	r2, r1
 8002408:	0052      	lsls	r2, r2, #1
 800240a:	1e51      	subs	r1, r2, #1
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4851      	ldr	r0, [pc, #324]	@ (8002554 <adf5355_setup+0x1c8>)
 8002410:	fb00 f202 	mul.w	r2, r0, r2
 8002414:	fbb1 f2f2 	udiv	r2, r1, r2
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 800241e:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4849      	ldr	r0, [pc, #292]	@ (8002554 <adf5355_setup+0x1c8>)
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	4413      	add	r3, r2
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4846      	ldr	r0, [pc, #280]	@ (8002554 <adf5355_setup+0x1c8>)
 800243c:	fb00 f303 	mul.w	r3, r0, r3
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	025b      	lsls	r3, r3, #9
 8002446:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 800244a:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	7909      	ldrb	r1, [r1, #4]
 8002456:	2904      	cmp	r1, #4
 8002458:	d003      	beq.n	8002462 <adf5355_setup+0xd6>
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	7909      	ldrb	r1, [r1, #4]
 800245e:	2905      	cmp	r1, #5
 8002460:	d101      	bne.n	8002466 <adf5355_setup+0xda>
 8002462:	493d      	ldr	r1, [pc, #244]	@ (8002558 <adf5355_setup+0x1cc>)
 8002464:	e000      	b.n	8002468 <adf5355_setup+0xdc>
 8002466:	493d      	ldr	r1, [pc, #244]	@ (800255c <adf5355_setup+0x1d0>)
 8002468:	440b      	add	r3, r1
 800246a:	1e59      	subs	r1, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d003      	beq.n	800247c <adf5355_setup+0xf0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d101      	bne.n	8002480 <adf5355_setup+0xf4>
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <adf5355_setup+0x1cc>)
 800247e:	e000      	b.n	8002482 <adf5355_setup+0xf6>
 8002480:	4b36      	ldr	r3, [pc, #216]	@ (800255c <adf5355_setup+0x1d0>)
 8002482:	fbb1 f3f3 	udiv	r3, r1, r3
 8002486:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8002488:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	4a32      	ldr	r2, [pc, #200]	@ (8002560 <adf5355_setup+0x1d4>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	09db      	lsrs	r3, r3, #7
 800249c:	3301      	adds	r3, #1
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d904      	bls.n	80024b2 <adf5355_setup+0x126>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2bff      	cmp	r3, #255	@ 0xff
 80024ac:	bf28      	it	cs
 80024ae:	23ff      	movcs	r3, #255	@ 0xff
 80024b0:	e000      	b.n	80024b4 <adf5355_setup+0x128>
 80024b2:	2301      	movs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <adf5355_setup+0x1d8>)
 80024c6:	4413      	add	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	3202      	adds	r2, #2
 80024d2:	fbb1 f2f2 	udiv	r2, r1, r2
 80024d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 80024e8:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80024ec:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <adf5355_setup+0x1dc>)
 80024f8:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d003      	beq.n	800250a <adf5355_setup+0x17e>
				      || (dev->dev_id == ADF5356))?
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d102      	bne.n	8002510 <adf5355_setup+0x184>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 800250a:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 800250e:	e000      	b.n	8002512 <adf5355_setup+0x186>
 8002510:	4a16      	ldr	r2, [pc, #88]	@ (800256c <adf5355_setup+0x1e0>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8002528:	9100      	str	r1, [sp, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fdce 	bl	80020cc <adf5355_set_freq>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	00800025 	.word	0x00800025
 8002540:	04000007 	.word	0x04000007
 8002544:	15596568 	.word	0x15596568
 8002548:	102d0428 	.word	0x102d0428
 800254c:	6fd91d85 	.word	0x6fd91d85
 8002550:	00ffc000 	.word	0x00ffc000
 8002554:	000186a0 	.word	0x000186a0
 8002558:	00186a00 	.word	0x00186a00
 800255c:	00249f00 	.word	0x00249f00
 8002560:	0a7c5ac5 	.word	0x0a7c5ac5
 8002564:	00f423ff 	.word	0x00f423ff
 8002568:	0061300b 	.word	0x0061300b
 800256c:	0001041c 	.word	0x0001041c

08002570 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 800257a:	2198      	movs	r1, #152	@ 0x98
 800257c:	2001      	movs	r0, #1
 800257e:	f000 fad9 	bl	8002b34 <no_os_calloc>
 8002582:	60f8      	str	r0, [r7, #12]
	if (!dev)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <adf5355_init+0x20>
		return -ENOMEM;
 800258a:	f06f 030b 	mvn.w	r3, #11
 800258e:	e0f0      	b.n	8002772 <adf5355_init+0x202>

	dev->spi_desc = init_param->spi_init;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	791a      	ldrb	r2, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025a6:	68f9      	ldr	r1, [r7, #12]
 80025a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7c1a      	ldrb	r2, [r3, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7f1a      	ldrb	r2, [r3, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	7f5a      	ldrb	r2, [r3, #29]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	7f9a      	ldrb	r2, [r3, #30]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	7fda      	ldrb	r2, [r3, #31]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->outa_power = init_param->outa_power;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->outb_power = init_param->outb_power;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002624:	461a      	mov	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->ref_diff_en = init_param->ref_diff_en;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->ref_doubler_en = init_param->ref_doubler_en;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->ref_div2_en = init_param->ref_div2_en;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	dev->mux_out_sel = init_param->mux_out_sel;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	dev->outb_sel_fund = init_param->outb_sel_fund;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->num_channels = 2;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002680:	4a4d      	ldr	r2, [pc, #308]	@ (80027b8 <adf5355_init+0x248>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d903      	bls.n	800268e <adf5355_init+0x11e>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	switch (dev->dev_id) {
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	791b      	ldrb	r3, [r3, #4]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d85a      	bhi.n	800274c <adf5355_init+0x1dc>
 8002696:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <adf5355_init+0x12c>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026b5 	.word	0x080026b5
 80026a0:	080026db 	.word	0x080026db
 80026a4:	08002701 	.word	0x08002701
 80026a8:	08002727 	.word	0x08002727
 80026ac:	080026b5 	.word	0x080026b5
 80026b0:	080026b5 	.word	0x080026b5
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	a332      	add	r3, pc, #200	@ (adr r3, 8002780 <adf5355_init+0x210>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	a331      	add	r3, pc, #196	@ (adr r3, 8002788 <adf5355_init+0x218>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	a330      	add	r3, pc, #192	@ (adr r3, 8002790 <adf5355_init+0x220>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80026d8:	e038      	b.n	800274c <adf5355_init+0x1dc>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	a32e      	add	r3, pc, #184	@ (adr r3, 8002798 <adf5355_init+0x228>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	a327      	add	r3, pc, #156	@ (adr r3, 8002788 <adf5355_init+0x218>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	a326      	add	r3, pc, #152	@ (adr r3, 8002790 <adf5355_init+0x220>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80026fe:	e025      	b.n	800274c <adf5355_init+0x1dc>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	4a2e      	ldr	r2, [pc, #184]	@ (80027bc <adf5355_init+0x24c>)
 8002704:	f04f 0301 	mov.w	r3, #1
 8002708:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002788 <adf5355_init+0x218>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	a31d      	add	r3, pc, #116	@ (adr r3, 8002790 <adf5355_init+0x220>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8002724:	e012      	b.n	800274c <adf5355_init+0x1dc>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	a31d      	add	r3, pc, #116	@ (adr r3, 80027a0 <adf5355_init+0x230>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	a31c      	add	r3, pc, #112	@ (adr r3, 80027a8 <adf5355_init+0x238>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 800273e:	68f9      	ldr	r1, [r7, #12]
 8002740:	a31b      	add	r3, pc, #108	@ (adr r3, 80027b0 <adf5355_init+0x240>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 800274a:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fe1d 	bl	800238c <adf5355_setup>
 8002752:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <adf5355_init+0x1f4>
		goto error_spi;

	*device = dev;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	601a      	str	r2, [r3, #0]

	return ret;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	e006      	b.n	8002772 <adf5355_init+0x202>
		goto error_spi;
 8002764:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fcbf 	bl	80050ee <HAL_SPI_DeInit>

	return ret;
 8002770:	68bb      	ldr	r3, [r7, #8]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	954fc400 	.word	0x954fc400
 8002784:	00000001 	.word	0x00000001
 8002788:	032a9f88 	.word	0x032a9f88
 800278c:	00000000 	.word	0x00000000
 8002790:	caa7e200 	.word	0xcaa7e200
 8002794:	00000000 	.word	0x00000000
 8002798:	2a9f8800 	.word	0x2a9f8800
 800279c:	00000003 	.word	0x00000003
 80027a0:	89640200 	.word	0x89640200
 80027a4:	00000001 	.word	0x00000001
 80027a8:	0312c804 	.word	0x0312c804
 80027ac:	00000000 	.word	0x00000000
 80027b0:	c4b20100 	.word	0xc4b20100
 80027b4:	00000000 	.word	0x00000000
 80027b8:	047868c0 	.word	0x047868c0
 80027bc:	0642ac00 	.word	0x0642ac00

080027c0 <ADF5355_SetFrequencyOut>:

/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void* ADF5355_SetFrequencyOut(void* new_freq){
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	60f9      	str	r1, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	6809      	ldr	r1, [r1, #0]
 80027d0:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80027d4:	4281      	cmp	r1, r0
 80027d6:	d803      	bhi.n	80027e0 <ADF5355_SetFrequencyOut+0x20>
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	2963      	cmp	r1, #99	@ 0x63
 80027de:	d803      	bhi.n	80027e8 <ADF5355_SetFrequencyOut+0x28>
 80027e0:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <ADF5355_SetFrequencyOut+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e015      	b.n	8002814 <ADF5355_SetFrequencyOut+0x54>
	else {
		freq_out = *value;
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	6809      	ldr	r1, [r1, #0]
 80027ec:	480e      	ldr	r0, [pc, #56]	@ (8002828 <ADF5355_SetFrequencyOut+0x68>)
 80027ee:	6001      	str	r1, [r0, #0]
		if (synced){
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <ADF5355_SetFrequencyOut+0x6c>)
 80027f2:	7809      	ldrb	r1, [r1, #0]
 80027f4:	2900      	cmp	r1, #0
 80027f6:	d00a      	beq.n	800280e <ADF5355_SetFrequencyOut+0x4e>
			hadf5355.freq_req = 1000000*freq_out;
 80027f8:	490b      	ldr	r1, [pc, #44]	@ (8002828 <ADF5355_SetFrequencyOut+0x68>)
 80027fa:	6809      	ldr	r1, [r1, #0]
 80027fc:	480c      	ldr	r0, [pc, #48]	@ (8002830 <ADF5355_SetFrequencyOut+0x70>)
 80027fe:	fb00 f101 	mul.w	r1, r0, r1
 8002802:	2000      	movs	r0, #0
 8002804:	460a      	mov	r2, r1
 8002806:	4603      	mov	r3, r0
 8002808:	490a      	ldr	r1, [pc, #40]	@ (8002834 <ADF5355_SetFrequencyOut+0x74>)
 800280a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		ret = true;
 800280e:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <ADF5355_SetFrequencyOut+0x64>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <ADF5355_SetFrequencyOut+0x64>)
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000041d 	.word	0x2000041d
 8002828:	200000dc 	.word	0x200000dc
 800282c:	2000041c 	.word	0x2000041c
 8002830:	000f4240 	.word	0x000f4240
 8002834:	200003e8 	.word	0x200003e8

08002838 <ADF5355_SetFrequencyIn>:

void* ADF5355_SetFrequencyIn(void* new_freq){
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60fb      	str	r3, [r7, #12]
	if (*value > 200 || *value < 5) ret = false;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2bc8      	cmp	r3, #200	@ 0xc8
 800284a:	d803      	bhi.n	8002854 <ADF5355_SetFrequencyIn+0x1c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b04      	cmp	r3, #4
 8002852:	d803      	bhi.n	800285c <ADF5355_SetFrequencyIn+0x24>
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <ADF5355_SetFrequencyIn+0x58>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e011      	b.n	8002880 <ADF5355_SetFrequencyIn+0x48>
	else {
		freq_in = *value;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <ADF5355_SetFrequencyIn+0x5c>)
 8002862:	6013      	str	r3, [r2, #0]
		if (synced){
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <ADF5355_SetFrequencyIn+0x60>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <ADF5355_SetFrequencyIn+0x42>
			hadf5355.clkin_freq = 1000000*freq_in;
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <ADF5355_SetFrequencyIn+0x5c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <ADF5355_SetFrequencyIn+0x64>)
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <ADF5355_SetFrequencyIn+0x68>)
 8002878:	6153      	str	r3, [r2, #20]
		}
		ret = true;
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <ADF5355_SetFrequencyIn+0x58>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <ADF5355_SetFrequencyIn+0x58>)
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000041e 	.word	0x2000041e
 8002894:	200000e0 	.word	0x200000e0
 8002898:	2000041c 	.word	0x2000041c
 800289c:	000f4240 	.word	0x000f4240
 80028a0:	200003e8 	.word	0x200003e8

080028a4 <ADF5355_SetPower>:

void* ADF5355_SetPower(void* new_pow){
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	static bool ret;
	int8_t* value = (int8_t*)new_pow;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
	if (*value > 3 || *value < 0) ret = false;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f993 3000 	ldrsb.w	r3, [r3]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	dc04      	bgt.n	80028c4 <ADF5355_SetPower+0x20>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f993 3000 	ldrsb.w	r3, [r3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da03      	bge.n	80028cc <ADF5355_SetPower+0x28>
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <ADF5355_SetPower+0x5c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e012      	b.n	80028f2 <ADF5355_SetPower+0x4e>
	else {
		out_power = *value;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f993 2000 	ldrsb.w	r2, [r3]
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <ADF5355_SetPower+0x60>)
 80028d4:	701a      	strb	r2, [r3, #0]
		if (synced){
 80028d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <ADF5355_SetPower+0x64>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <ADF5355_SetPower+0x48>
			hadf5355.outb_power = out_power;
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <ADF5355_SetPower+0x60>)
 80028e0:	f993 3000 	ldrsb.w	r3, [r3]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <ADF5355_SetPower+0x68>)
 80028e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		ret = true;
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <ADF5355_SetPower+0x5c>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80028f2:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <ADF5355_SetPower+0x5c>)
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	2000041f 	.word	0x2000041f
 8002904:	200000e5 	.word	0x200000e5
 8002908:	2000041c 	.word	0x2000041c
 800290c:	200003e8 	.word	0x200003e8

08002910 <ADF5355_Enable>:

void* ADF5355_Enable(void* state){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <ADF5355_Enable+0x24>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d003      	beq.n	8002934 <ADF5355_Enable+0x24>
 800292c:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <ADF5355_Enable+0x70>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e01f      	b.n	8002974 <ADF5355_Enable+0x64>
	else {
		outb_en = *value;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <ADF5355_Enable+0x74>)
 8002944:	701a      	strb	r2, [r3, #0]
		if (synced){
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <ADF5355_Enable+0x78>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00f      	beq.n	800296e <ADF5355_Enable+0x5e>
			hadf5355.outb_en = outb_en;
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <ADF5355_Enable+0x74>)
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <ADF5355_Enable+0x7c>)
 8002954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			adf5355_set_power(dev, hadf5355.outb_en, hadf5355.outb_power);
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <ADF5355_Enable+0x80>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0b      	ldr	r2, [pc, #44]	@ (800298c <ADF5355_Enable+0x7c>)
 800295e:	f892 1021 	ldrb.w	r1, [r2, #33]	@ 0x21
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <ADF5355_Enable+0x7c>)
 8002964:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fb39 	bl	8001fe0 <adf5355_set_power>
		}
		ret = true;
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <ADF5355_Enable+0x70>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002974:	4b02      	ldr	r3, [pc, #8]	@ (8002980 <ADF5355_Enable+0x70>)
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000420 	.word	0x20000420
 8002984:	200000e4 	.word	0x200000e4
 8002988:	2000041c 	.word	0x2000041c
 800298c:	200003e8 	.word	0x200003e8
 8002990:	20000418 	.word	0x20000418

08002994 <ADF5355_Param_Init>:

void ADF5355_Param_Init(void){
 8002994:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 800299c:	4c4d      	ldr	r4, [pc, #308]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 800299e:	4d4e      	ldr	r5, [pc, #312]	@ (8002ad8 <ADF5355_Param_Init+0x144>)
 80029a0:	6025      	str	r5, [r4, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 80029a2:	4c4c      	ldr	r4, [pc, #304]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 80029a4:	2501      	movs	r5, #1
 80029a6:	7125      	strb	r5, [r4, #4]
	hadf5355.freq_req = (uint64_t)freq_out*(uint64_t)1000000; // Żądana częstotliwość wyjściowa w Hz
 80029a8:	4c4c      	ldr	r4, [pc, #304]	@ (8002adc <ADF5355_Param_Init+0x148>)
 80029aa:	6824      	ldr	r4, [r4, #0]
 80029ac:	2500      	movs	r5, #0
 80029ae:	46a0      	mov	r8, r4
 80029b0:	46a9      	mov	r9, r5
 80029b2:	4644      	mov	r4, r8
 80029b4:	464d      	mov	r5, r9
 80029b6:	f04f 0a00 	mov.w	sl, #0
 80029ba:	f04f 0b00 	mov.w	fp, #0
 80029be:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 80029c2:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 80029c6:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 80029ca:	4654      	mov	r4, sl
 80029cc:	465d      	mov	r5, fp
 80029ce:	ebb4 0208 	subs.w	r2, r4, r8
 80029d2:	eb65 0309 	sbc.w	r3, r5, r9
 80029d6:	f04f 0400 	mov.w	r4, #0
 80029da:	f04f 0500 	mov.w	r5, #0
 80029de:	025d      	lsls	r5, r3, #9
 80029e0:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 80029e4:	0254      	lsls	r4, r2, #9
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	eb12 0008 	adds.w	r0, r2, r8
 80029ee:	eb43 0109 	adc.w	r1, r3, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a00:	0182      	lsls	r2, r0, #6
 8002a02:	1a14      	subs	r4, r2, r0
 8002a04:	603c      	str	r4, [r7, #0]
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a10:	460b      	mov	r3, r1
 8002a12:	eb13 0308 	adds.w	r3, r3, r8
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	eb43 0309 	adc.w	r3, r3, r9
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a26:	e9c3 1202 	strd	r1, r2, [r3, #8]
	hadf5355.freq_req_chan = 1; // Kanał częstotliwości
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = freq_in*1000000; // Częstotliwość zegara wejściowego w Hz
 8002a30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <ADF5355_Param_Init+0x14c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <ADF5355_Param_Init+0x150>)
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a26      	ldr	r2, [pc, #152]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a3c:	6153      	str	r3, [r2, #20]
	hadf5355.cp_ua = 1000; // Prąd pompy ładunkowej w mikroamperach
 8002a3e:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a44:	619a      	str	r2, [r3, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 8002a46:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = false;  // Flaga aktywacji bramkowania prądu wycieku
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 8002a52:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = false;  // Flaga aktywacji wyjścia A
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = outb_en;  // Flaga aktywacji wyjścia B
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <ADF5355_Param_Init+0x154>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.outa_power = 0;  // Moc wyjścia A
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.outb_power = out_power;  // Moc wyjścia B
 8002a78:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <ADF5355_Param_Init+0x158>)
 8002a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a82:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.phase_detector_polarity_neg = true;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 8002a86:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 8002a96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.mux_out_sel = mux_out;  // Wybór wyjścia mux
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <ADF5355_Param_Init+0x15c>)
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002ab4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <ADF5355_Param_Init+0x140>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	synced = true;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <ADF5355_Param_Init+0x160>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	200003e8 	.word	0x200003e8
 8002ad8:	200001c8 	.word	0x200001c8
 8002adc:	200000dc 	.word	0x200000dc
 8002ae0:	200000e0 	.word	0x200000e0
 8002ae4:	000f4240 	.word	0x000f4240
 8002ae8:	200000e4 	.word	0x200000e4
 8002aec:	200000e5 	.word	0x200000e5
 8002af0:	200000e6 	.word	0x200000e6
 8002af4:	2000041c 	.word	0x2000041c

08002af8 <ADF5355_Run>:

void* ADF5355_Run(void* arg){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	static bool ret = false;
	int32_t response = adf5355_change_freq(dev, hadf5355.freq_req);
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <ADF5355_Run+0x30>)
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <ADF5355_Run+0x34>)
 8002b06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b0a:	4608      	mov	r0, r1
 8002b0c:	f7ff fa40 	bl	8001f90 <adf5355_change_freq>
 8002b10:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <ADF5355_Run+0x26>
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <ADF5355_Run+0x38>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
	return &ret;
 8002b1e:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <ADF5355_Run+0x38>)
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000418 	.word	0x20000418
 8002b2c:	200003e8 	.word	0x200003e8
 8002b30:	20000421 	.word	0x20000421

08002b34 <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f007 fd71 	bl	800a628 <calloc>
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <no_os_greatest_common_divisor+0x16>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d112      	bne.n	8002b8c <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bf38      	it	cc
 8002b6e:	4613      	movcc	r3, r2
 8002b70:	e010      	b.n	8002b94 <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	fb01 f202 	mul.w	r2, r1, r2
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
		a = b;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	607b      	str	r3, [r7, #4]
		b = div;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ef      	bne.n	8002b72 <no_os_greatest_common_divisor+0x22>
	}

	return a;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc2:	f7fd fd49 	bl	8000658 <__aeabi_uldivmod>
 8002bc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd4:	f7fd fd40 	bl	8000658 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 8002be2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_Init+0x3c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <HAL_Init+0x3c>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c06:	2003      	movs	r0, #3
 8002c08:	f000 f903 	bl	8002e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0c:	200f      	movs	r0, #15
 8002c0e:	f7fe fb3b 	bl	8001288 <HAL_InitTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	e001      	b.n	8002c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c1e:	f7fe fb0b 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x20>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_IncTick+0x24>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_IncTick+0x24>)
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	200000ec 	.word	0x200000ec
 8002c54:	20000424 	.word	0x20000424

08002c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_GetTick+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000424 	.word	0x20000424

08002c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff ffee 	bl	8002c58 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d005      	beq.n	8002c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_Delay+0x44>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c96:	bf00      	nop
 8002c98:	f7ff ffde 	bl	8002c58 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d8f7      	bhi.n	8002c98 <HAL_Delay+0x28>
  {
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200000ec 	.word	0x200000ec

08002cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <__NVIC_GetPriorityGrouping+0x18>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db0b      	blt.n	8002d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4907      	ldr	r1, [pc, #28]	@ (8002d54 <__NVIC_EnableIRQ+0x38>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	db0a      	blt.n	8002d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	490c      	ldr	r1, [pc, #48]	@ (8002da4 <__NVIC_SetPriority+0x4c>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d80:	e00a      	b.n	8002d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4908      	ldr	r1, [pc, #32]	@ (8002da8 <__NVIC_SetPriority+0x50>)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	761a      	strb	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f1c3 0307 	rsb	r3, r3, #7
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	bf28      	it	cs
 8002dca:	2304      	movcs	r3, #4
 8002dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d902      	bls.n	8002ddc <NVIC_EncodePriority+0x30>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3b03      	subs	r3, #3
 8002dda:	e000      	b.n	8002dde <NVIC_EncodePriority+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	401a      	ands	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	4313      	orrs	r3, r2
         );
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	@ 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ff4c 	bl	8002cb8 <__NVIC_SetPriorityGrouping>
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3a:	f7ff ff61 	bl	8002d00 <__NVIC_GetPriorityGrouping>
 8002e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	6978      	ldr	r0, [r7, #20]
 8002e46:	f7ff ffb1 	bl	8002dac <NVIC_EncodePriority>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff80 	bl	8002d58 <__NVIC_SetPriority>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff54 	bl	8002d1c <__NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e098      	b.n	8002fc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b4d      	ldr	r3, [pc, #308]	@ (8002fcc <HAL_DMA_Init+0x150>)
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d80f      	bhi.n	8002eba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_DMA_Init+0x154>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd4 <HAL_DMA_Init+0x158>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	@ (8002fd8 <HAL_DMA_Init+0x15c>)
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eb8:	e00e      	b.n	8002ed8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b46      	ldr	r3, [pc, #280]	@ (8002fdc <HAL_DMA_Init+0x160>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a43      	ldr	r2, [pc, #268]	@ (8002fd4 <HAL_DMA_Init+0x158>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	009a      	lsls	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a42      	ldr	r2, [pc, #264]	@ (8002fe0 <HAL_DMA_Init+0x164>)
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f32:	d039      	beq.n	8002fa8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	4a27      	ldr	r2, [pc, #156]	@ (8002fd8 <HAL_DMA_Init+0x15c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d11a      	bne.n	8002f74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f3e:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <HAL_DMA_Init+0x168>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f003 031c 	and.w	r3, r3, #28
 8002f4a:	210f      	movs	r1, #15
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4924      	ldr	r1, [pc, #144]	@ (8002fe4 <HAL_DMA_Init+0x168>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f58:	4b22      	ldr	r3, [pc, #136]	@ (8002fe4 <HAL_DMA_Init+0x168>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	f003 031c 	and.w	r3, r3, #28
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	491d      	ldr	r1, [pc, #116]	@ (8002fe4 <HAL_DMA_Init+0x168>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
 8002f72:	e019      	b.n	8002fa8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f74:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe8 <HAL_DMA_Init+0x16c>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7c:	f003 031c 	and.w	r3, r3, #28
 8002f80:	210f      	movs	r1, #15
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	4917      	ldr	r1, [pc, #92]	@ (8002fe8 <HAL_DMA_Init+0x16c>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f8e:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <HAL_DMA_Init+0x16c>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f003 031c 	and.w	r3, r3, #28
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	4911      	ldr	r1, [pc, #68]	@ (8002fe8 <HAL_DMA_Init+0x16c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40020407 	.word	0x40020407
 8002fd0:	bffdfff8 	.word	0xbffdfff8
 8002fd4:	cccccccd 	.word	0xcccccccd
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	bffdfbf8 	.word	0xbffdfbf8
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	400200a8 	.word	0x400200a8
 8002fe8:	400204a8 	.word	0x400204a8

08002fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_DMA_Start_IT+0x20>
 8003008:	2302      	movs	r3, #2
 800300a:	e04b      	b.n	80030a4 <HAL_DMA_Start_IT+0xb8>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d13a      	bne.n	8003096 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f95f 	bl	8003308 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 020e 	orr.w	r2, r2, #14
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e00f      	b.n	8003084 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0204 	bic.w	r2, r2, #4
 8003072:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 020a 	orr.w	r2, r2, #10
 8003082:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e005      	b.n	80030a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d008      	beq.n	80030d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2204      	movs	r2, #4
 80030c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e022      	b.n	800311c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 020e 	bic.w	r2, r2, #14
 80030e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f003 021c 	and.w	r2, r3, #28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d005      	beq.n	800314c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2204      	movs	r2, #4
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e029      	b.n	80031a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 020e 	bic.w	r2, r2, #14
 800315a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003170:	f003 021c 	and.w	r2, r3, #28
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
    }
  }
  return status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f003 031c 	and.w	r3, r3, #28
 80031ca:	2204      	movs	r2, #4
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d026      	beq.n	8003224 <HAL_DMA_IRQHandler+0x7a>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d021      	beq.n	8003224 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0204 	bic.w	r2, r2, #4
 80031fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f003 021c 	and.w	r2, r3, #28
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2104      	movs	r1, #4
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	2b00      	cmp	r3, #0
 8003218:	d071      	beq.n	80032fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003222:	e06c      	b.n	80032fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	f003 031c 	and.w	r3, r3, #28
 800322c:	2202      	movs	r2, #2
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02e      	beq.n	8003296 <HAL_DMA_IRQHandler+0xec>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d029      	beq.n	8003296 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 020a 	bic.w	r2, r2, #10
 800325e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f003 021c 	and.w	r2, r3, #28
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2102      	movs	r1, #2
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d038      	beq.n	80032fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003294:	e033      	b.n	80032fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f003 031c 	and.w	r3, r3, #28
 800329e:	2208      	movs	r2, #8
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d02a      	beq.n	8003300 <HAL_DMA_IRQHandler+0x156>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d025      	beq.n	8003300 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 020e 	bic.w	r2, r2, #14
 80032c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f003 021c 	and.w	r2, r3, #28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
}
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f003 021c 	and.w	r2, r3, #28
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d108      	bne.n	800334c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800334a:	e007      	b.n	800335c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003376:	e17f      	b.n	8003678 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8171 	beq.w	8003672 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d005      	beq.n	80033a8 <HAL_GPIO_Init+0x40>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d130      	bne.n	800340a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033de:	2201      	movs	r2, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 0201 	and.w	r2, r3, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b03      	cmp	r3, #3
 8003414:	d118      	bne.n	8003448 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800341c:	2201      	movs	r2, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d017      	beq.n	8003484 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	6939      	ldr	r1, [r7, #16]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80ac 	beq.w	8003672 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	4b5f      	ldr	r3, [pc, #380]	@ (8003698 <HAL_GPIO_Init+0x330>)
 800351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351e:	4a5e      	ldr	r2, [pc, #376]	@ (8003698 <HAL_GPIO_Init+0x330>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6613      	str	r3, [r2, #96]	@ 0x60
 8003526:	4b5c      	ldr	r3, [pc, #368]	@ (8003698 <HAL_GPIO_Init+0x330>)
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003532:	4a5a      	ldr	r2, [pc, #360]	@ (800369c <HAL_GPIO_Init+0x334>)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x242>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4f      	ldr	r2, [pc, #316]	@ (80036a0 <HAL_GPIO_Init+0x338>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x23e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4e      	ldr	r2, [pc, #312]	@ (80036a4 <HAL_GPIO_Init+0x33c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x23a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4d      	ldr	r2, [pc, #308]	@ (80036a8 <HAL_GPIO_Init+0x340>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x236>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4c      	ldr	r2, [pc, #304]	@ (80036ac <HAL_GPIO_Init+0x344>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x232>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4b      	ldr	r2, [pc, #300]	@ (80036b0 <HAL_GPIO_Init+0x348>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x22e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4a      	ldr	r2, [pc, #296]	@ (80036b4 <HAL_GPIO_Init+0x34c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x22a>
 800358e:	2306      	movs	r3, #6
 8003590:	e00c      	b.n	80035ac <HAL_GPIO_Init+0x244>
 8003592:	2307      	movs	r3, #7
 8003594:	e00a      	b.n	80035ac <HAL_GPIO_Init+0x244>
 8003596:	2305      	movs	r3, #5
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x244>
 800359a:	2304      	movs	r3, #4
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x244>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x244>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x244>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x244>
 80035aa:	2300      	movs	r3, #0
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035bc:	4937      	ldr	r1, [pc, #220]	@ (800369c <HAL_GPIO_Init+0x334>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035ee:	4a32      	ldr	r2, [pc, #200]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035f4:	4b30      	ldr	r3, [pc, #192]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003618:	4a27      	ldr	r2, [pc, #156]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800361e:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003642:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003648:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800366c:	4a12      	ldr	r2, [pc, #72]	@ (80036b8 <HAL_GPIO_Init+0x350>)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3301      	adds	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	f47f ae78 	bne.w	8003378 <HAL_GPIO_Init+0x10>
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800
 80036a8:	48000c00 	.word	0x48000c00
 80036ac:	48001000 	.word	0x48001000
 80036b0:	48001400 	.word	0x48001400
 80036b4:	48001800 	.word	0x48001800
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80036ca:	e0cd      	b.n	8003868 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80036cc:	2201      	movs	r2, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80c0 	beq.w	8003862 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80036e2:	4a68      	ldr	r2, [pc, #416]	@ (8003884 <HAL_GPIO_DeInit+0x1c8>)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800370a:	d025      	beq.n	8003758 <HAL_GPIO_DeInit+0x9c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a5e      	ldr	r2, [pc, #376]	@ (8003888 <HAL_GPIO_DeInit+0x1cc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d01f      	beq.n	8003754 <HAL_GPIO_DeInit+0x98>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a5d      	ldr	r2, [pc, #372]	@ (800388c <HAL_GPIO_DeInit+0x1d0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d019      	beq.n	8003750 <HAL_GPIO_DeInit+0x94>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a5c      	ldr	r2, [pc, #368]	@ (8003890 <HAL_GPIO_DeInit+0x1d4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_GPIO_DeInit+0x90>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a5b      	ldr	r2, [pc, #364]	@ (8003894 <HAL_GPIO_DeInit+0x1d8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00d      	beq.n	8003748 <HAL_GPIO_DeInit+0x8c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a5a      	ldr	r2, [pc, #360]	@ (8003898 <HAL_GPIO_DeInit+0x1dc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <HAL_GPIO_DeInit+0x88>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a59      	ldr	r2, [pc, #356]	@ (800389c <HAL_GPIO_DeInit+0x1e0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_GPIO_DeInit+0x84>
 800373c:	2306      	movs	r3, #6
 800373e:	e00c      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003740:	2307      	movs	r3, #7
 8003742:	e00a      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003744:	2305      	movs	r3, #5
 8003746:	e008      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003748:	2304      	movs	r3, #4
 800374a:	e006      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 800374c:	2303      	movs	r3, #3
 800374e:	e004      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003750:	2302      	movs	r3, #2
 8003752:	e002      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003758:	2300      	movs	r3, #0
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	4093      	lsls	r3, r2
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	429a      	cmp	r2, r3
 8003768:	d132      	bne.n	80037d0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800376a:	4b4d      	ldr	r3, [pc, #308]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43db      	mvns	r3, r3
 8003772:	494b      	ldr	r1, [pc, #300]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 8003774:	4013      	ands	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003778:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	4947      	ldr	r1, [pc, #284]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 8003782:	4013      	ands	r3, r2
 8003784:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003786:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	4944      	ldr	r1, [pc, #272]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 8003790:	4013      	ands	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003794:	4b42      	ldr	r3, [pc, #264]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	4940      	ldr	r1, [pc, #256]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 800379e:	4013      	ands	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220f      	movs	r2, #15
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80037b2:	4a34      	ldr	r2, [pc, #208]	@ (8003884 <HAL_GPIO_DeInit+0x1c8>)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	4830      	ldr	r0, [pc, #192]	@ (8003884 <HAL_GPIO_DeInit+0x1c8>)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	400a      	ands	r2, r1
 80037ca:	3302      	adds	r3, #2
 80037cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2103      	movs	r1, #3
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	08d2      	lsrs	r2, r2, #3
 8003804:	4019      	ands	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3208      	adds	r2, #8
 800380a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2103      	movs	r1, #3
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	2101      	movs	r1, #1
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2103      	movs	r1, #3
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003852:	2101      	movs	r1, #1
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	401a      	ands	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3301      	adds	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af2b 	bne.w	80036cc <HAL_GPIO_DeInit+0x10>
  }
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40010000 	.word	0x40010000
 8003888:	48000400 	.word	0x48000400
 800388c:	48000800 	.word	0x48000800
 8003890:	48000c00 	.word	0x48000c00
 8003894:	48001000 	.word	0x48001000
 8003898:	48001400 	.word	0x48001400
 800389c:	48001800 	.word	0x48001800
 80038a0:	40010400 	.word	0x40010400

080038a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038de:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ea:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd f942 	bl	8000b7c <HAL_GPIO_EXTI_Callback>
  }
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003908:	4b04      	ldr	r3, [pc, #16]	@ (800391c <HAL_PWREx_GetVoltageRange+0x18>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40007000 	.word	0x40007000

08003920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800392e:	d130      	bne.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003930:	4b23      	ldr	r3, [pc, #140]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800393c:	d038      	beq.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800393e:	4b20      	ldr	r3, [pc, #128]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003946:	4a1e      	ldr	r2, [pc, #120]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800394e:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2232      	movs	r2, #50	@ 0x32
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	4a1b      	ldr	r2, [pc, #108]	@ (80039c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0c9b      	lsrs	r3, r3, #18
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003964:	e002      	b.n	800396c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b01      	subs	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396c:	4b14      	ldr	r3, [pc, #80]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003978:	d102      	bne.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f2      	bne.n	8003966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398c:	d110      	bne.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e00f      	b.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399e:	d007      	beq.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039a8:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40007000 	.word	0x40007000
 80039c4:	200000d8 	.word	0x200000d8
 80039c8:	431bde83 	.word	0x431bde83

080039cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e3ca      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039de:	4b97      	ldr	r3, [pc, #604]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e8:	4b94      	ldr	r3, [pc, #592]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80e4 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_RCC_OscConfig+0x4a>
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	f040 808b 	bne.w	8003b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 8087 	bne.w	8003b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a16:	4b89      	ldr	r3, [pc, #548]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e3a2      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	4b82      	ldr	r3, [pc, #520]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_RCC_OscConfig+0x7c>
 8003a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_OscConfig+0x88>
 8003a48:	4b7c      	ldr	r3, [pc, #496]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d223      	bcs.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fd87 	bl	8004570 <RCC_SetFlashLatencyFromMSIRange>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e383      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6c:	4b73      	ldr	r3, [pc, #460]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a72      	ldr	r2, [pc, #456]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a72:	f043 0308 	orr.w	r3, r3, #8
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b70      	ldr	r3, [pc, #448]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	496d      	ldr	r1, [pc, #436]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4968      	ldr	r1, [pc, #416]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
 8003a9e:	e025      	b.n	8003aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa0:	4b66      	ldr	r3, [pc, #408]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4960      	ldr	r1, [pc, #384]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003abe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	495b      	ldr	r1, [pc, #364]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fd47 	bl	8004570 <RCC_SetFlashLatencyFromMSIRange>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e343      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aec:	f000 fc4a 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b52      	ldr	r3, [pc, #328]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	4950      	ldr	r1, [pc, #320]	@ (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	4a4e      	ldr	r2, [pc, #312]	@ (8003c44 <HAL_RCC_OscConfig+0x278>)
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c48 <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd fbb9 	bl	8001288 <HAL_InitTick>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d052      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	e327      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d032      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b2c:	4b43      	ldr	r3, [pc, #268]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a42      	ldr	r2, [pc, #264]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b38:	f7ff f88e 	bl	8002c58 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b40:	f7ff f88a 	bl	8002c58 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e310      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b52:	4b3a      	ldr	r3, [pc, #232]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5e:	4b37      	ldr	r3, [pc, #220]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a36      	ldr	r2, [pc, #216]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b64:	f043 0308 	orr.w	r3, r3, #8
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b34      	ldr	r3, [pc, #208]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4931      	ldr	r1, [pc, #196]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	492c      	ldr	r1, [pc, #176]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
 8003b90:	e01a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b92:	4b2a      	ldr	r3, [pc, #168]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a29      	ldr	r2, [pc, #164]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b9e:	f7ff f85b 	bl	8002c58 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba6:	f7ff f857 	bl	8002c58 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e2dd      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bb8:	4b20      	ldr	r3, [pc, #128]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1da>
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d074      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x21a>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d10e      	bne.n	8003bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d064      	beq.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d160      	bne.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e2ba      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x24a>
 8003c08:	4b0c      	ldr	r3, [pc, #48]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e026      	b.n	8003c64 <HAL_RCC_OscConfig+0x298>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c1e:	d115      	bne.n	8003c4c <HAL_RCC_OscConfig+0x280>
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a05      	ldr	r2, [pc, #20]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a02      	ldr	r2, [pc, #8]	@ (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x298>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800be8c 	.word	0x0800be8c
 8003c44:	200000d8 	.word	0x200000d8
 8003c48:	200000e8 	.word	0x200000e8
 8003c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a9f      	ldr	r2, [pc, #636]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b9d      	ldr	r3, [pc, #628]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a9c      	ldr	r2, [pc, #624]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fff4 	bl	8002c58 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fff0 	bl	8002c58 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	@ 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e276      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c86:	4b92      	ldr	r3, [pc, #584]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x2a8>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe ffe0 	bl	8002c58 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fe ffdc 	bl	8002c58 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e262      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cae:	4b88      	ldr	r3, [pc, #544]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2d0>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d060      	beq.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_OscConfig+0x310>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d116      	bne.n	8003d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x328>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e23f      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b76      	ldr	r3, [pc, #472]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	4973      	ldr	r1, [pc, #460]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d08:	e040      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d023      	beq.n	8003d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d12:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fe ff9b 	bl	8002c58 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d26:	f7fe ff97 	bl	8002c58 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e21d      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d38:	4b65      	ldr	r3, [pc, #404]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d44:	4b62      	ldr	r3, [pc, #392]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	495f      	ldr	r1, [pc, #380]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
 8003d58:	e018      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fe ff77 	bl	8002c58 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fe ff73 	bl	8002c58 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1f9      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d80:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01c      	beq.n	8003dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fe ff52 	bl	8002c58 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe ff4e 	bl	8002c58 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1d4      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dca:	4b41      	ldr	r3, [pc, #260]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ef      	beq.n	8003db8 <HAL_RCC_OscConfig+0x3ec>
 8003dd8:	e01b      	b.n	8003e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dda:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe ff35 	bl	8002c58 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe ff31 	bl	8002c58 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1b7      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e04:	4b32      	ldr	r3, [pc, #200]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ef      	bne.n	8003df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a6 	beq.w	8003f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e20:	2300      	movs	r3, #0
 8003e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10d      	bne.n	8003e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	4a26      	ldr	r2, [pc, #152]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e3c:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4c:	4b21      	ldr	r3, [pc, #132]	@ (8003ed4 <HAL_RCC_OscConfig+0x508>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d118      	bne.n	8003e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e58:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <HAL_RCC_OscConfig+0x508>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed4 <HAL_RCC_OscConfig+0x508>)
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e64:	f7fe fef8 	bl	8002c58 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fe fef4 	bl	8002c58 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e17a      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <HAL_RCC_OscConfig+0x508>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d108      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4d8>
 8003e92:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e98:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea2:	e029      	b.n	8003ef8 <HAL_RCC_OscConfig+0x52c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d115      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x50c>
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb2:	4a07      	ldr	r2, [pc, #28]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ebc:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	4a03      	ldr	r2, [pc, #12]	@ (8003ed0 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ecc:	e014      	b.n	8003ef8 <HAL_RCC_OscConfig+0x52c>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	4a9b      	ldr	r2, [pc, #620]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ee8:	4b98      	ldr	r3, [pc, #608]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eee:	4a97      	ldr	r2, [pc, #604]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d016      	beq.n	8003f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe feaa 	bl	8002c58 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fe fea6 	bl	8002c58 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e12a      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ed      	beq.n	8003f08 <HAL_RCC_OscConfig+0x53c>
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fe93 	bl	8002c58 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fe fe8f 	bl	8002c58 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e113      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ed      	bne.n	8003f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5a:	7ffb      	ldrb	r3, [r7, #31]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b7a      	ldr	r3, [pc, #488]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f64:	4a79      	ldr	r2, [pc, #484]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80fe 	beq.w	8004172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	f040 80d0 	bne.w	8004120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f80:	4b72      	ldr	r3, [pc, #456]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d130      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d127      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d11f      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fc0:	2a07      	cmp	r2, #7
 8003fc2:	bf14      	ite	ne
 8003fc4:	2201      	movne	r2, #1
 8003fc6:	2200      	moveq	r2, #0
 8003fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d113      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d06e      	beq.n	80040d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	d069      	beq.n	80040d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ffc:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004008:	4b50      	ldr	r3, [pc, #320]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0ad      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004018:	4b4c      	ldr	r3, [pc, #304]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a4b      	ldr	r2, [pc, #300]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004024:	f7fe fe18 	bl	8002c58 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe fe14 	bl	8002c58 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e09a      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403e:	4b43      	ldr	r3, [pc, #268]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404a:	4b40      	ldr	r3, [pc, #256]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	4b40      	ldr	r3, [pc, #256]	@ (8004150 <HAL_RCC_OscConfig+0x784>)
 8004050:	4013      	ands	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800405a:	3a01      	subs	r2, #1
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004064:	0212      	lsls	r2, r2, #8
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800406c:	0852      	lsrs	r2, r2, #1
 800406e:	3a01      	subs	r2, #1
 8004070:	0552      	lsls	r2, r2, #21
 8004072:	4311      	orrs	r1, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004078:	0852      	lsrs	r2, r2, #1
 800407a:	3a01      	subs	r2, #1
 800407c:	0652      	lsls	r2, r2, #25
 800407e:	4311      	orrs	r1, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004084:	0912      	lsrs	r2, r2, #4
 8004086:	0452      	lsls	r2, r2, #17
 8004088:	430a      	orrs	r2, r1
 800408a:	4930      	ldr	r1, [pc, #192]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800408c:	4313      	orrs	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004090:	4b2e      	ldr	r3, [pc, #184]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2d      	ldr	r2, [pc, #180]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800409c:	4b2b      	ldr	r3, [pc, #172]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040a8:	f7fe fdd6 	bl	8002c58 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fdd2 	bl	8002c58 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e058      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c2:	4b22      	ldr	r3, [pc, #136]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ce:	e050      	b.n	8004172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04f      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d4:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d148      	bne.n	8004172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040e0:	4b1a      	ldr	r3, [pc, #104]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ec:	4b17      	ldr	r3, [pc, #92]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a16      	ldr	r2, [pc, #88]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040f8:	f7fe fdae 	bl	8002c58 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fe fdaa 	bl	8002c58 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e030      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004112:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x734>
 800411e:	e028      	b.n	8004172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d023      	beq.n	800416e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004126:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a08      	ldr	r2, [pc, #32]	@ (800414c <HAL_RCC_OscConfig+0x780>)
 800412c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe fd91 	bl	8002c58 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004138:	e00c      	b.n	8004154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe fd8d 	bl	8002c58 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d905      	bls.n	8004154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e013      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
 800414c:	40021000 	.word	0x40021000
 8004150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <HAL_RCC_OscConfig+0x7b0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ec      	bne.n	800413a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCC_OscConfig+0x7b0>)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	4905      	ldr	r1, [pc, #20]	@ (800417c <HAL_RCC_OscConfig+0x7b0>)
 8004166:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <HAL_RCC_OscConfig+0x7b4>)
 8004168:	4013      	ands	r3, r2
 800416a:	60cb      	str	r3, [r1, #12]
 800416c:	e001      	b.n	8004172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	feeefffc 	.word	0xfeeefffc

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0e7      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b75      	ldr	r3, [pc, #468]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d910      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b72      	ldr	r3, [pc, #456]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 0207 	bic.w	r2, r3, #7
 80041ae:	4970      	ldr	r1, [pc, #448]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b6e      	ldr	r3, [pc, #440]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cf      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b66      	ldr	r3, [pc, #408]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d908      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b63      	ldr	r3, [pc, #396]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4960      	ldr	r1, [pc, #384]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d04c      	beq.n	800429c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	4b5a      	ldr	r3, [pc, #360]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d121      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0a6      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004222:	4b54      	ldr	r3, [pc, #336]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d115      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e09a      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800423a:	4b4e      	ldr	r3, [pc, #312]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e08e      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424a:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e086      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800425a:	4b46      	ldr	r3, [pc, #280]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 0203 	bic.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4943      	ldr	r1, [pc, #268]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fe fcf4 	bl	8002c58 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	e00a      	b.n	800428a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004274:	f7fe fcf0 	bl	8002c58 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e06e      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	4b3a      	ldr	r3, [pc, #232]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 020c 	and.w	r2, r3, #12
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	429a      	cmp	r2, r3
 800429a:	d1eb      	bne.n	8004274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	4b31      	ldr	r3, [pc, #196]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d208      	bcs.n	80042ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	492b      	ldr	r1, [pc, #172]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ca:	4b29      	ldr	r3, [pc, #164]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d210      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d8:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 0207 	bic.w	r2, r3, #7
 80042e0:	4923      	ldr	r1, [pc, #140]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e8:	4b21      	ldr	r3, [pc, #132]	@ (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e036      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004306:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4918      	ldr	r1, [pc, #96]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004324:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4910      	ldr	r1, [pc, #64]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004338:	f000 f824 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	490b      	ldr	r1, [pc, #44]	@ (8004378 <HAL_RCC_ClockConfig+0x1f4>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
 8004354:	4a09      	ldr	r2, [pc, #36]	@ (800437c <HAL_RCC_ClockConfig+0x1f8>)
 8004356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_RCC_ClockConfig+0x1fc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc ff93 	bl	8001288 <HAL_InitTick>
 8004362:	4603      	mov	r3, r0
 8004364:	72fb      	strb	r3, [r7, #11]

  return status;
 8004366:	7afb      	ldrb	r3, [r7, #11]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40022000 	.word	0x40022000
 8004374:	40021000 	.word	0x40021000
 8004378:	0800be8c 	.word	0x0800be8c
 800437c:	200000d8 	.word	0x200000d8
 8004380:	200000e8 	.word	0x200000e8

08004384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	@ 0x24
 8004388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004392:	4b3e      	ldr	r3, [pc, #248]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439c:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x34>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d121      	bne.n	80043f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d11e      	bne.n	80043f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043b8:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043c4:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 80043c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	e005      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043d4:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043fc:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_RCC_GetSysClockFreq+0x110>)
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e004      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d101      	bne.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004408:	4b23      	ldr	r3, [pc, #140]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x114>)
 800440a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d134      	bne.n	800447c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0xa6>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d003      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0xac>
 8004428:	e005      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800442a:	4b1a      	ldr	r3, [pc, #104]	@ (8004494 <HAL_RCC_GetSysClockFreq+0x110>)
 800442c:	617b      	str	r3, [r7, #20]
      break;
 800442e:	e005      	b.n	800443c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004430:	4b19      	ldr	r3, [pc, #100]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x114>)
 8004432:	617b      	str	r3, [r7, #20]
      break;
 8004434:	e002      	b.n	800443c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	617b      	str	r3, [r7, #20]
      break;
 800443a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	3301      	adds	r3, #1
 8004448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	fb03 f202 	mul.w	r2, r3, r2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004462:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	0e5b      	lsrs	r3, r3, #25
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	3301      	adds	r3, #1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800447c:	69bb      	ldr	r3, [r7, #24]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	@ 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	0800bea4 	.word	0x0800bea4
 8004494:	00f42400 	.word	0x00f42400
 8004498:	007a1200 	.word	0x007a1200

0800449c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	200000d8 	.word	0x200000d8

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044b8:	f7ff fff0 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	@ (80044dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800be9c 	.word	0x0800be9c

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044e4:	f7ff ffda 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0adb      	lsrs	r3, r3, #11
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4904      	ldr	r1, [pc, #16]	@ (8004508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	0800be9c 	.word	0x0800be9c

0800450c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	220f      	movs	r2, #15
 800451a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800451c:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004528:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004540:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	08db      	lsrs	r3, r3, #3
 8004546:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <HAL_RCC_GetClockConfig+0x60>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	40022000 	.word	0x40022000

08004570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800457c:	4b2a      	ldr	r3, [pc, #168]	@ (8004628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004588:	f7ff f9bc 	bl	8003904 <HAL_PWREx_GetVoltageRange>
 800458c:	6178      	str	r0, [r7, #20]
 800458e:	e014      	b.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	4a24      	ldr	r2, [pc, #144]	@ (8004628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	@ 0x58
 800459c:	4b22      	ldr	r3, [pc, #136]	@ (8004628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045a8:	f7ff f9ac 	bl	8003904 <HAL_PWREx_GetVoltageRange>
 80045ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c0:	d10b      	bne.n	80045da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b80      	cmp	r3, #128	@ 0x80
 80045c6:	d919      	bls.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80045cc:	d902      	bls.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ce:	2302      	movs	r3, #2
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e013      	b.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d4:	2301      	movs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e010      	b.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b80      	cmp	r3, #128	@ 0x80
 80045de:	d902      	bls.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045e0:	2303      	movs	r3, #3
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	e00a      	b.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b80      	cmp	r3, #128	@ 0x80
 80045ea:	d102      	bne.n	80045f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ec:	2302      	movs	r3, #2
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e004      	b.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b70      	cmp	r3, #112	@ 0x70
 80045f6:	d101      	bne.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045f8:	2301      	movs	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 0207 	bic.w	r2, r3, #7
 8004604:	4909      	ldr	r1, [pc, #36]	@ (800462c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	d001      	beq.n	800461e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000
 800462c:	40022000 	.word	0x40022000

08004630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004638:	2300      	movs	r3, #0
 800463a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800463c:	2300      	movs	r3, #0
 800463e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004648:	2b00      	cmp	r3, #0
 800464a:	d041      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004650:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004654:	d02a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004656:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800465a:	d824      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800465c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004660:	d008      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004662:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004666:	d81e      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800466c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004670:	d010      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004672:	e018      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004674:	4b86      	ldr	r3, [pc, #536]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a85      	ldr	r2, [pc, #532]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004680:	e015      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fabb 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004692:	e00c      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3320      	adds	r3, #32
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fba6 	bl	8004dec <RCCEx_PLLSAI2_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a4:	e003      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	74fb      	strb	r3, [r7, #19]
      break;
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b4:	4b76      	ldr	r3, [pc, #472]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046c2:	4973      	ldr	r1, [pc, #460]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046ca:	e001      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d041      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046e4:	d02a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046ea:	d824      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046f0:	d008      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046f6:	d81e      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004700:	d010      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004702:	e018      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004704:	4b62      	ldr	r3, [pc, #392]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a61      	ldr	r2, [pc, #388]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004710:	e015      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fa73 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004722:	e00c      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3320      	adds	r3, #32
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fb5e 	bl	8004dec <RCCEx_PLLSAI2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	74fb      	strb	r3, [r7, #19]
      break;
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800473c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004744:	4b52      	ldr	r3, [pc, #328]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004752:	494f      	ldr	r1, [pc, #316]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a0 	beq.w	80048ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004772:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	4b41      	ldr	r3, [pc, #260]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	4a40      	ldr	r2, [pc, #256]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004792:	6593      	str	r3, [r2, #88]	@ 0x58
 8004794:	4b3e      	ldr	r3, [pc, #248]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a0:	2301      	movs	r3, #1
 80047a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047b0:	f7fe fa52 	bl	8002c58 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047b6:	e009      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b8:	f7fe fa4e 	bl	8002c58 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	74fb      	strb	r3, [r7, #19]
        break;
 80047ca:	e005      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047cc:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ef      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d15c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047de:	4b2c      	ldr	r3, [pc, #176]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01f      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d019      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fc:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004808:	4b21      	ldr	r3, [pc, #132]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	4a20      	ldr	r2, [pc, #128]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	4a1c      	ldr	r2, [pc, #112]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004828:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fe fa0d 	bl	8002c58 <HAL_GetTick>
 800483e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004840:	e00b      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fe fa09 	bl	8002c58 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004850:	4293      	cmp	r3, r2
 8004852:	d902      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	74fb      	strb	r3, [r7, #19]
            break;
 8004858:	e006      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ec      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486e:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800487e:	4904      	ldr	r1, [pc, #16]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489c:	7c7b      	ldrb	r3, [r7, #17]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	4b9e      	ldr	r3, [pc, #632]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a6:	4a9d      	ldr	r2, [pc, #628]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ba:	4b98      	ldr	r3, [pc, #608]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c0:	f023 0203 	bic.w	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	4994      	ldr	r1, [pc, #592]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f023 020c 	bic.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	498c      	ldr	r1, [pc, #560]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048fe:	4b87      	ldr	r3, [pc, #540]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004904:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	4983      	ldr	r1, [pc, #524]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004920:	4b7e      	ldr	r3, [pc, #504]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	497b      	ldr	r1, [pc, #492]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004942:	4b76      	ldr	r3, [pc, #472]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004950:	4972      	ldr	r1, [pc, #456]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004964:	4b6d      	ldr	r3, [pc, #436]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004972:	496a      	ldr	r1, [pc, #424]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004986:	4b65      	ldr	r3, [pc, #404]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	4961      	ldr	r1, [pc, #388]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049a8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b6:	4959      	ldr	r1, [pc, #356]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ca:	4b54      	ldr	r3, [pc, #336]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d8:	4950      	ldr	r1, [pc, #320]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ec:	4b4b      	ldr	r3, [pc, #300]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	4948      	ldr	r1, [pc, #288]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a0e:	4b43      	ldr	r3, [pc, #268]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1c:	493f      	ldr	r1, [pc, #252]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d028      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a30:	4b3a      	ldr	r3, [pc, #232]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a3e:	4937      	ldr	r1, [pc, #220]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a50:	4b32      	ldr	r3, [pc, #200]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a31      	ldr	r2, [pc, #196]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a5a:	60d3      	str	r3, [r2, #12]
 8004a5c:	e011      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f8c8 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a8e:	4b23      	ldr	r3, [pc, #140]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	491f      	ldr	r1, [pc, #124]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aac:	d106      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aae:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab8:	60d3      	str	r3, [r2, #12]
 8004aba:	e011      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f899 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d02b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afa:	4908      	ldr	r1, [pc, #32]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b0a:	d109      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a02      	ldr	r2, [pc, #8]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
 8004b18:	e014      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2101      	movs	r1, #1
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f867 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02f      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b50:	4b2b      	ldr	r3, [pc, #172]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b5e:	4928      	ldr	r1, [pc, #160]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	2102      	movs	r1, #2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f844 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	74bb      	strb	r3, [r7, #18]
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3320      	adds	r3, #32
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f925 	bl	8004dec <RCCEx_PLLSAI2_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bbc:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bca:	490d      	ldr	r1, [pc, #52]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bde:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bee:	4904      	ldr	r1, [pc, #16]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bf6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000

08004c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c12:	4b75      	ldr	r3, [pc, #468]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c1e:	4b72      	ldr	r3, [pc, #456]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d10d      	bne.n	8004c4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
       ||
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c36:	4b6c      	ldr	r3, [pc, #432]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
       ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d047      	beq.n	8004cda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
 8004c4e:	e044      	b.n	8004cda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d018      	beq.n	8004c8a <RCCEx_PLLSAI1_Config+0x86>
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d825      	bhi.n	8004ca8 <RCCEx_PLLSAI1_Config+0xa4>
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d002      	beq.n	8004c66 <RCCEx_PLLSAI1_Config+0x62>
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d009      	beq.n	8004c78 <RCCEx_PLLSAI1_Config+0x74>
 8004c64:	e020      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c66:	4b60      	ldr	r3, [pc, #384]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d11d      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c76:	e01a      	b.n	8004cae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c78:	4b5b      	ldr	r3, [pc, #364]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d116      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c88:	e013      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c8a:	4b57      	ldr	r3, [pc, #348]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c96:	4b54      	ldr	r3, [pc, #336]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ca6:	e006      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e004      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	4944      	ldr	r1, [pc, #272]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d17d      	bne.n	8004ddc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ce0:	4b41      	ldr	r3, [pc, #260]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a40      	ldr	r2, [pc, #256]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fd ffb4 	bl	8002c58 <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cf2:	e009      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cf4:	f7fd ffb0 	bl	8002c58 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	73fb      	strb	r3, [r7, #15]
        break;
 8004d06:	e005      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d08:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ef      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d160      	bne.n	8004ddc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d111      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d20:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6892      	ldr	r2, [r2, #8]
 8004d30:	0211      	lsls	r1, r2, #8
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68d2      	ldr	r2, [r2, #12]
 8004d36:	0912      	lsrs	r2, r2, #4
 8004d38:	0452      	lsls	r2, r2, #17
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	492a      	ldr	r1, [pc, #168]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	610b      	str	r3, [r1, #16]
 8004d42:	e027      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d112      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	0211      	lsls	r1, r2, #8
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6912      	ldr	r2, [r2, #16]
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0552      	lsls	r2, r2, #21
 8004d66:	430a      	orrs	r2, r1
 8004d68:	491f      	ldr	r1, [pc, #124]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	610b      	str	r3, [r1, #16]
 8004d6e:	e011      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6892      	ldr	r2, [r2, #8]
 8004d80:	0211      	lsls	r1, r2, #8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6952      	ldr	r2, [r2, #20]
 8004d86:	0852      	lsrs	r2, r2, #1
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	0652      	lsls	r2, r2, #25
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	4916      	ldr	r1, [pc, #88]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d94:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fd ff5a 	bl	8002c58 <HAL_GetTick>
 8004da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da6:	e009      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004da8:	f7fd ff56 	bl	8002c58 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d902      	bls.n	8004dbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	73fb      	strb	r3, [r7, #15]
          break;
 8004dba:	e005      	b.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ef      	beq.n	8004da8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dce:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	4904      	ldr	r1, [pc, #16]	@ (8004de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000

08004dec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e06:	4b67      	ldr	r3, [pc, #412]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d10d      	bne.n	8004e32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
       ||
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e1e:	4b61      	ldr	r3, [pc, #388]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d047      	beq.n	8004ec2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	e044      	b.n	8004ec2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d018      	beq.n	8004e72 <RCCEx_PLLSAI2_Config+0x86>
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d825      	bhi.n	8004e90 <RCCEx_PLLSAI2_Config+0xa4>
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d002      	beq.n	8004e4e <RCCEx_PLLSAI2_Config+0x62>
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d009      	beq.n	8004e60 <RCCEx_PLLSAI2_Config+0x74>
 8004e4c:	e020      	b.n	8004e90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e4e:	4b55      	ldr	r3, [pc, #340]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d11d      	bne.n	8004e96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5e:	e01a      	b.n	8004e96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e60:	4b50      	ldr	r3, [pc, #320]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d116      	bne.n	8004e9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e70:	e013      	b.n	8004e9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e72:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e7e:	4b49      	ldr	r3, [pc, #292]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e8e:	e006      	b.n	8004e9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	e004      	b.n	8004ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	4939      	ldr	r1, [pc, #228]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d167      	bne.n	8004f98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ec8:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a35      	ldr	r2, [pc, #212]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fd fec0 	bl	8002c58 <HAL_GetTick>
 8004ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eda:	e009      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004edc:	f7fd febc 	bl	8002c58 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d902      	bls.n	8004ef0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	73fb      	strb	r3, [r7, #15]
        break;
 8004eee:	e005      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ef      	bne.n	8004edc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d14a      	bne.n	8004f98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d111      	bne.n	8004f2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f08:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	0211      	lsls	r1, r2, #8
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68d2      	ldr	r2, [r2, #12]
 8004f1e:	0912      	lsrs	r2, r2, #4
 8004f20:	0452      	lsls	r2, r2, #17
 8004f22:	430a      	orrs	r2, r1
 8004f24:	491f      	ldr	r1, [pc, #124]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	614b      	str	r3, [r1, #20]
 8004f2a:	e011      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6892      	ldr	r2, [r2, #8]
 8004f3c:	0211      	lsls	r1, r2, #8
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6912      	ldr	r2, [r2, #16]
 8004f42:	0852      	lsrs	r2, r2, #1
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0652      	lsls	r2, r2, #25
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	4916      	ldr	r1, [pc, #88]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f50:	4b14      	ldr	r3, [pc, #80]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a13      	ldr	r2, [pc, #76]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fd fe7c 	bl	8002c58 <HAL_GetTick>
 8004f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f62:	e009      	b.n	8004f78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f64:	f7fd fe78 	bl	8002c58 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d902      	bls.n	8004f78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	73fb      	strb	r3, [r7, #15]
          break;
 8004f76:	e005      	b.n	8004f84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f78:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ef      	beq.n	8004f64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f8a:	4b06      	ldr	r3, [pc, #24]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	4904      	ldr	r1, [pc, #16]	@ (8004fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e095      	b.n	80050e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d108      	bne.n	8004fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fca:	d009      	beq.n	8004fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61da      	str	r2, [r3, #28]
 8004fd2:	e005      	b.n	8004fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc f8ba 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005020:	d902      	bls.n	8005028 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e002      	b.n	800502e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800502c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005036:	d007      	beq.n	8005048 <HAL_SPI_Init+0xa0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005040:	d002      	beq.n	8005048 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	ea42 0103 	orr.w	r1, r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	f003 0204 	and.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050c4:	ea42 0103 	orr.w	r1, r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e01a      	b.n	8005136 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005116:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fc f86f 	bl	80011fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514e:	f7fd fd83 	bl	8002c58 <HAL_GetTick>
 8005152:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
 8005166:	e15c      	b.n	8005422 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_Transmit+0x36>
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e154      	b.n	8005422 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_SPI_Transmit+0x48>
 8005182:	2302      	movs	r3, #2
 8005184:	e14d      	b.n	8005422 <HAL_SPI_Transmit+0x2e4>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d8:	d10f      	bne.n	80051fa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d007      	beq.n	8005218 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005220:	d952      	bls.n	80052c8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Transmit+0xf2>
 800522a:	8b7b      	ldrh	r3, [r7, #26]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d145      	bne.n	80052bc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	881a      	ldrh	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	1c9a      	adds	r2, r3, #2
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005254:	e032      	b.n	80052bc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d112      	bne.n	800528a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005288:	e018      	b.n	80052bc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528a:	f7fd fce5 	bl	8002c58 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d803      	bhi.n	80052a2 <HAL_SPI_Transmit+0x164>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d102      	bne.n	80052a8 <HAL_SPI_Transmit+0x16a>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0b2      	b.n	8005422 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1c7      	bne.n	8005256 <HAL_SPI_Transmit+0x118>
 80052c6:	e083      	b.n	80053d0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_SPI_Transmit+0x198>
 80052d0:	8b7b      	ldrh	r3, [r7, #26]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d177      	bne.n	80053c6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d912      	bls.n	8005306 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b02      	subs	r3, #2
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005304:	e05f      	b.n	80053c6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800532c:	e04b      	b.n	80053c6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b02      	cmp	r3, #2
 800533a:	d12b      	bne.n	8005394 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d912      	bls.n	800536c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b02      	subs	r3, #2
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800536a:	e02c      	b.n	80053c6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005392:	e018      	b.n	80053c6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005394:	f7fd fc60 	bl	8002c58 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d803      	bhi.n	80053ac <HAL_SPI_Transmit+0x26e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d102      	bne.n	80053b2 <HAL_SPI_Transmit+0x274>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e02d      	b.n	8005422 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ae      	bne.n	800532e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f947 	bl	8005668 <SPI_EndRxTxTransaction>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005420:	2300      	movs	r3, #0
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800543c:	f7fd fc0c 	bl	8002c58 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	4413      	add	r3, r2
 800544a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800544c:	f7fd fc04 	bl	8002c58 <HAL_GetTick>
 8005450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005452:	4b39      	ldr	r3, [pc, #228]	@ (8005538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	015b      	lsls	r3, r3, #5
 8005458:	0d1b      	lsrs	r3, r3, #20
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005462:	e054      	b.n	800550e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d050      	beq.n	800550e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800546c:	f7fd fbf4 	bl	8002c58 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	429a      	cmp	r2, r3
 800547a:	d902      	bls.n	8005482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d13d      	bne.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800549a:	d111      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054a4:	d004      	beq.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ae:	d107      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c8:	d10f      	bne.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e017      	b.n	800552e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3b01      	subs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d19b      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200000d8 	.word	0x200000d8

0800553c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800554e:	f7fd fb83 	bl	8002c58 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	4413      	add	r3, r2
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800555e:	f7fd fb7b 	bl	8002c58 <HAL_GetTick>
 8005562:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800556c:	4b3d      	ldr	r3, [pc, #244]	@ (8005664 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	00da      	lsls	r2, r3, #3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	0d1b      	lsrs	r3, r3, #20
 800557c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005584:	e060      	b.n	8005648 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800558c:	d107      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0x62>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800559c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d050      	beq.n	8005648 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055a6:	f7fd fb57 	bl	8002c58 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d902      	bls.n	80055bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d13d      	bne.n	8005638 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055d4:	d111      	bne.n	80055fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055de:	d004      	beq.n	80055ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e8:	d107      	bne.n	80055fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005602:	d10f      	bne.n	8005624 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005622:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e010      	b.n	800565a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3b01      	subs	r3, #1
 8005646:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d196      	bne.n	8005586 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3728      	adds	r7, #40	@ 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	200000d8 	.word	0x200000d8

08005668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff ff5b 	bl	800553c <SPI_WaitFifoStateUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e027      	b.n	80056ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2200      	movs	r2, #0
 80056a4:	2180      	movs	r1, #128	@ 0x80
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fec0 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e014      	b.n	80056ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff ff34 	bl	800553c <SPI_WaitFifoStateUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056de:	f043 0220 	orr.w	r2, r3, #32
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e000      	b.n	80056ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e049      	b.n	800579a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb ff88 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fa3e 	bl	8005bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d001      	beq.n	80057bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e047      	b.n	800584c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a23      	ldr	r2, [pc, #140]	@ (8005858 <HAL_TIM_Base_Start+0xb4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01d      	beq.n	800580a <HAL_TIM_Base_Start+0x66>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d6:	d018      	beq.n	800580a <HAL_TIM_Base_Start+0x66>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	@ (800585c <HAL_TIM_Base_Start+0xb8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIM_Base_Start+0x66>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005860 <HAL_TIM_Base_Start+0xbc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIM_Base_Start+0x66>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005864 <HAL_TIM_Base_Start+0xc0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIM_Base_Start+0x66>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005868 <HAL_TIM_Base_Start+0xc4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIM_Base_Start+0x66>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	@ (800586c <HAL_TIM_Base_Start+0xc8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d115      	bne.n	8005836 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <HAL_TIM_Base_Start+0xcc>)
 8005812:	4013      	ands	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b06      	cmp	r3, #6
 800581a:	d015      	beq.n	8005848 <HAL_TIM_Base_Start+0xa4>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005822:	d011      	beq.n	8005848 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	e008      	b.n	8005848 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e000      	b.n	800584a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40013400 	.word	0x40013400
 800586c:	40014000 	.word	0x40014000
 8005870:	00010007 	.word	0x00010007

08005874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d001      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e04f      	b.n	800592c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a23      	ldr	r2, [pc, #140]	@ (8005938 <HAL_TIM_Base_Start_IT+0xc4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x76>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b6:	d018      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x76>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1f      	ldr	r2, [pc, #124]	@ (800593c <HAL_TIM_Base_Start_IT+0xc8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x76>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005940 <HAL_TIM_Base_Start_IT+0xcc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x76>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005944 <HAL_TIM_Base_Start_IT+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x76>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1b      	ldr	r2, [pc, #108]	@ (8005948 <HAL_TIM_Base_Start_IT+0xd4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x76>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a19      	ldr	r2, [pc, #100]	@ (800594c <HAL_TIM_Base_Start_IT+0xd8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d115      	bne.n	8005916 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <HAL_TIM_Base_Start_IT+0xdc>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d015      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0xb4>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005902:	d011      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005914:	e008      	b.n	8005928 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e000      	b.n	800592a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005928:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00
 8005948:	40013400 	.word	0x40013400
 800594c:	40014000 	.word	0x40014000
 8005950:	00010007 	.word	0x00010007

08005954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d020      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0202 	mvn.w	r2, #2
 8005988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8e9 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8db 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8ec 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d020      	beq.n	8005a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0204 	mvn.w	r2, #4
 80059d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f8c3 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 80059f0:	e005      	b.n	80059fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8b5 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f8c6 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0208 	mvn.w	r2, #8
 8005a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2204      	movs	r2, #4
 8005a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f89d 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f88f 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8a0 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2208      	movs	r2, #8
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f877 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f869 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f87a 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00c      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0201 	mvn.w	r2, #1
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb f9d6 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f99b 	bl	8005e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f993 	bl	8005e38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f834 	bl	8005b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00c      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0220 	mvn.w	r2, #32
 8005b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f95b 	bl	8005e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a46      	ldr	r2, [pc, #280]	@ (8005ce0 <TIM_Base_SetConfig+0x12c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd2:	d00f      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a43      	ldr	r2, [pc, #268]	@ (8005ce4 <TIM_Base_SetConfig+0x130>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a42      	ldr	r2, [pc, #264]	@ (8005ce8 <TIM_Base_SetConfig+0x134>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a41      	ldr	r2, [pc, #260]	@ (8005cec <TIM_Base_SetConfig+0x138>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a40      	ldr	r2, [pc, #256]	@ (8005cf0 <TIM_Base_SetConfig+0x13c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d108      	bne.n	8005c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a35      	ldr	r2, [pc, #212]	@ (8005ce0 <TIM_Base_SetConfig+0x12c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01f      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c14:	d01b      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a32      	ldr	r2, [pc, #200]	@ (8005ce4 <TIM_Base_SetConfig+0x130>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d017      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a31      	ldr	r2, [pc, #196]	@ (8005ce8 <TIM_Base_SetConfig+0x134>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a30      	ldr	r2, [pc, #192]	@ (8005cec <TIM_Base_SetConfig+0x138>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2f      	ldr	r2, [pc, #188]	@ (8005cf0 <TIM_Base_SetConfig+0x13c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2e      	ldr	r2, [pc, #184]	@ (8005cf4 <TIM_Base_SetConfig+0x140>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf8 <TIM_Base_SetConfig+0x144>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2c      	ldr	r2, [pc, #176]	@ (8005cfc <TIM_Base_SetConfig+0x148>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d108      	bne.n	8005c60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a16      	ldr	r2, [pc, #88]	@ (8005ce0 <TIM_Base_SetConfig+0x12c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	@ (8005cf0 <TIM_Base_SetConfig+0x13c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	@ (8005cf4 <TIM_Base_SetConfig+0x140>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	@ (8005cf8 <TIM_Base_SetConfig+0x144>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <TIM_Base_SetConfig+0x148>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d103      	bne.n	8005cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f023 0201 	bic.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	611a      	str	r2, [r3, #16]
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40012c00 	.word	0x40012c00
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40013400 	.word	0x40013400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40014400 	.word	0x40014400
 8005cfc:	40014800 	.word	0x40014800

08005d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e068      	b.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2d      	ldr	r2, [pc, #180]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01d      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8a:	d018      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1b      	ldr	r2, [pc, #108]	@ (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d009      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a13      	ldr	r2, [pc, #76]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a14      	ldr	r2, [pc, #80]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40013400 	.word	0x40013400
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40014000 	.word	0x40014000

08005e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e040      	b.n	8005ee0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fb fc2e 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2224      	movs	r2, #36	@ 0x24
 8005e78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fe8e 	bl	8006bb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fbd3 	bl	8006644 <UART_SetConfig>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e01b      	b.n	8005ee0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 ff0d 	bl	8006cf8 <UART_CheckIdleState>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d177      	bne.n	8005ff0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Transmit+0x24>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e070      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2221      	movs	r2, #33	@ 0x21
 8005f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f1e:	f7fc fe9b 	bl	8002c58 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3c:	d108      	bne.n	8005f50 <HAL_UART_Transmit+0x68>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	e003      	b.n	8005f58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f58:	e02f      	b.n	8005fba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	2180      	movs	r1, #128	@ 0x80
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 ff6f 	bl	8006e48 <UART_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e03b      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	881a      	ldrh	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f8c:	b292      	uxth	r2, r2
 8005f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	3302      	adds	r3, #2
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	e007      	b.n	8005fa8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1c9      	bne.n	8005f5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2140      	movs	r1, #64	@ 0x40
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 ff39 	bl	8006e48 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e005      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b0ba      	sub	sp, #232	@ 0xe8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006022:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006026:	f640 030f 	movw	r3, #2063	@ 0x80f
 800602a:	4013      	ands	r3, r2
 800602c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d115      	bne.n	8006064 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00f      	beq.n	8006064 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 82ca 	beq.w	80065ee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
      }
      return;
 8006062:	e2c4      	b.n	80065ee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8117 	beq.w	800629c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800606e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800607a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800607e:	4b85      	ldr	r3, [pc, #532]	@ (8006294 <HAL_UART_IRQHandler+0x298>)
 8006080:	4013      	ands	r3, r2
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 810a 	beq.w	800629c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d011      	beq.n	80060b8 <HAL_UART_IRQHandler+0xbc>
 8006094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2201      	movs	r2, #1
 80060a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ae:	f043 0201 	orr.w	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d011      	beq.n	80060e8 <HAL_UART_IRQHandler+0xec>
 80060c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2202      	movs	r2, #2
 80060d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060de:	f043 0204 	orr.w	r2, r3, #4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d011      	beq.n	8006118 <HAL_UART_IRQHandler+0x11c>
 80060f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2204      	movs	r2, #4
 8006106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610e:	f043 0202 	orr.w	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2208      	movs	r2, #8
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614a:	f043 0208 	orr.w	r2, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800615c:	2b00      	cmp	r3, #0
 800615e:	d012      	beq.n	8006186 <HAL_UART_IRQHandler+0x18a>
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8230 	beq.w	80065f2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800619e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04f      	beq.n	800627e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 ff66 	bl	80070b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ee:	2b40      	cmp	r3, #64	@ 0x40
 80061f0:	d141      	bne.n	8006276 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800620c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800621e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800622a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1d9      	bne.n	80061f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	2b00      	cmp	r3, #0
 8006244:	d013      	beq.n	800626e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800624a:	4a13      	ldr	r2, [pc, #76]	@ (8006298 <HAL_UART_IRQHandler+0x29c>)
 800624c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006252:	4618      	mov	r0, r3
 8006254:	f7fc ff68 	bl	8003128 <HAL_DMA_Abort_IT>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d017      	beq.n	800628e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006268:	4610      	mov	r0, r2
 800626a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e00f      	b.n	800628e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9de 	bl	8006630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e00b      	b.n	800628e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9da 	bl	8006630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627c:	e007      	b.n	800628e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9d6 	bl	8006630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800628c:	e1b1      	b.n	80065f2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628e:	bf00      	nop
    return;
 8006290:	e1af      	b.n	80065f2 <HAL_UART_IRQHandler+0x5f6>
 8006292:	bf00      	nop
 8006294:	04000120 	.word	0x04000120
 8006298:	08007361 	.word	0x08007361

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	f040 816a 	bne.w	800657a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8163 	beq.w	800657a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 815c 	beq.w	800657a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d4:	2b40      	cmp	r3, #64	@ 0x40
 80062d6:	f040 80d4 	bne.w	8006482 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80ad 	beq.w	800644a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062fa:	429a      	cmp	r2, r3
 80062fc:	f080 80a5 	bcs.w	800644a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006306:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 8086 	bne.w	8006428 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800634a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800635e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1da      	bne.n	800631c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3308      	adds	r3, #8
 8006386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800638a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800638e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800639c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e1      	bne.n	8006366 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800640a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800640c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e4      	bne.n	80063e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006422:	4618      	mov	r0, r3
 8006424:	f7fc fe42 	bl	80030ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800643a:	b29b      	uxth	r3, r3
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	b29b      	uxth	r3, r3
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fa fb58 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006448:	e0d5      	b.n	80065f6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006454:	429a      	cmp	r2, r3
 8006456:	f040 80ce 	bne.w	80065f6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b20      	cmp	r3, #32
 8006468:	f040 80c5 	bne.w	80065f6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fa fb3c 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
      return;
 8006480:	e0b9      	b.n	80065f6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800648e:	b29b      	uxth	r3, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80ab 	beq.w	80065fa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80064a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80a6 	beq.w	80065fa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e4      	bne.n	80064ae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	623b      	str	r3, [r7, #32]
   return(result);
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006508:	633a      	str	r2, [r7, #48]	@ 0x30
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800650e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e3      	bne.n	80064e4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	60fb      	str	r3, [r7, #12]
   return(result);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 0310 	bic.w	r3, r3, #16
 8006544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	69b9      	ldr	r1, [r7, #24]
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	617b      	str	r3, [r7, #20]
   return(result);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e4      	bne.n	8006530 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800656c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fa fac0 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006578:	e03f      	b.n	80065fa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00e      	beq.n	80065a4 <HAL_UART_IRQHandler+0x5a8>
 8006586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800659a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 ff1f 	bl	80073e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065a2:	e02d      	b.n	8006600 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00e      	beq.n	80065ce <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01c      	beq.n	80065fe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	4798      	blx	r3
    }
    return;
 80065cc:	e017      	b.n	80065fe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d012      	beq.n	8006600 <HAL_UART_IRQHandler+0x604>
 80065da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fed0 	bl	800738c <UART_EndTransmit_IT>
    return;
 80065ec:	e008      	b.n	8006600 <HAL_UART_IRQHandler+0x604>
      return;
 80065ee:	bf00      	nop
 80065f0:	e006      	b.n	8006600 <HAL_UART_IRQHandler+0x604>
    return;
 80065f2:	bf00      	nop
 80065f4:	e004      	b.n	8006600 <HAL_UART_IRQHandler+0x604>
      return;
 80065f6:	bf00      	nop
 80065f8:	e002      	b.n	8006600 <HAL_UART_IRQHandler+0x604>
      return;
 80065fa:	bf00      	nop
 80065fc:	e000      	b.n	8006600 <HAL_UART_IRQHandler+0x604>
    return;
 80065fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006600:	37e8      	adds	r7, #232	@ 0xe8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop

08006608 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006648:	b08a      	sub	sp, #40	@ 0x28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	431a      	orrs	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	4313      	orrs	r3, r2
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4ba4      	ldr	r3, [pc, #656]	@ (8006904 <UART_SetConfig+0x2c0>)
 8006674:	4013      	ands	r3, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800667c:	430b      	orrs	r3, r1
 800667e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a99      	ldr	r2, [pc, #612]	@ (8006908 <UART_SetConfig+0x2c4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ac:	4313      	orrs	r3, r2
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c0:	430a      	orrs	r2, r1
 80066c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a90      	ldr	r2, [pc, #576]	@ (800690c <UART_SetConfig+0x2c8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d126      	bne.n	800671c <UART_SetConfig+0xd8>
 80066ce:	4b90      	ldr	r3, [pc, #576]	@ (8006910 <UART_SetConfig+0x2cc>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d81b      	bhi.n	8006714 <UART_SetConfig+0xd0>
 80066dc:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <UART_SetConfig+0xa0>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	08006705 	.word	0x08006705
 80066ec:	080066fd 	.word	0x080066fd
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fa:	e116      	b.n	800692a <UART_SetConfig+0x2e6>
 80066fc:	2302      	movs	r3, #2
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006702:	e112      	b.n	800692a <UART_SetConfig+0x2e6>
 8006704:	2304      	movs	r3, #4
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800670a:	e10e      	b.n	800692a <UART_SetConfig+0x2e6>
 800670c:	2308      	movs	r3, #8
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006712:	e10a      	b.n	800692a <UART_SetConfig+0x2e6>
 8006714:	2310      	movs	r3, #16
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800671a:	e106      	b.n	800692a <UART_SetConfig+0x2e6>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a7c      	ldr	r2, [pc, #496]	@ (8006914 <UART_SetConfig+0x2d0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d138      	bne.n	8006798 <UART_SetConfig+0x154>
 8006726:	4b7a      	ldr	r3, [pc, #488]	@ (8006910 <UART_SetConfig+0x2cc>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672c:	f003 030c 	and.w	r3, r3, #12
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d82d      	bhi.n	8006790 <UART_SetConfig+0x14c>
 8006734:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <UART_SetConfig+0xf8>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006771 	.word	0x08006771
 8006740:	08006791 	.word	0x08006791
 8006744:	08006791 	.word	0x08006791
 8006748:	08006791 	.word	0x08006791
 800674c:	08006781 	.word	0x08006781
 8006750:	08006791 	.word	0x08006791
 8006754:	08006791 	.word	0x08006791
 8006758:	08006791 	.word	0x08006791
 800675c:	08006779 	.word	0x08006779
 8006760:	08006791 	.word	0x08006791
 8006764:	08006791 	.word	0x08006791
 8006768:	08006791 	.word	0x08006791
 800676c:	08006789 	.word	0x08006789
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006776:	e0d8      	b.n	800692a <UART_SetConfig+0x2e6>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677e:	e0d4      	b.n	800692a <UART_SetConfig+0x2e6>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006786:	e0d0      	b.n	800692a <UART_SetConfig+0x2e6>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e0cc      	b.n	800692a <UART_SetConfig+0x2e6>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006796:	e0c8      	b.n	800692a <UART_SetConfig+0x2e6>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a5e      	ldr	r2, [pc, #376]	@ (8006918 <UART_SetConfig+0x2d4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d125      	bne.n	80067ee <UART_SetConfig+0x1aa>
 80067a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006910 <UART_SetConfig+0x2cc>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067ac:	2b30      	cmp	r3, #48	@ 0x30
 80067ae:	d016      	beq.n	80067de <UART_SetConfig+0x19a>
 80067b0:	2b30      	cmp	r3, #48	@ 0x30
 80067b2:	d818      	bhi.n	80067e6 <UART_SetConfig+0x1a2>
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d00a      	beq.n	80067ce <UART_SetConfig+0x18a>
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d814      	bhi.n	80067e6 <UART_SetConfig+0x1a2>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <UART_SetConfig+0x182>
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d008      	beq.n	80067d6 <UART_SetConfig+0x192>
 80067c4:	e00f      	b.n	80067e6 <UART_SetConfig+0x1a2>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067cc:	e0ad      	b.n	800692a <UART_SetConfig+0x2e6>
 80067ce:	2302      	movs	r3, #2
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d4:	e0a9      	b.n	800692a <UART_SetConfig+0x2e6>
 80067d6:	2304      	movs	r3, #4
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067dc:	e0a5      	b.n	800692a <UART_SetConfig+0x2e6>
 80067de:	2308      	movs	r3, #8
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e4:	e0a1      	b.n	800692a <UART_SetConfig+0x2e6>
 80067e6:	2310      	movs	r3, #16
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ec:	e09d      	b.n	800692a <UART_SetConfig+0x2e6>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a4a      	ldr	r2, [pc, #296]	@ (800691c <UART_SetConfig+0x2d8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d125      	bne.n	8006844 <UART_SetConfig+0x200>
 80067f8:	4b45      	ldr	r3, [pc, #276]	@ (8006910 <UART_SetConfig+0x2cc>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006802:	2bc0      	cmp	r3, #192	@ 0xc0
 8006804:	d016      	beq.n	8006834 <UART_SetConfig+0x1f0>
 8006806:	2bc0      	cmp	r3, #192	@ 0xc0
 8006808:	d818      	bhi.n	800683c <UART_SetConfig+0x1f8>
 800680a:	2b80      	cmp	r3, #128	@ 0x80
 800680c:	d00a      	beq.n	8006824 <UART_SetConfig+0x1e0>
 800680e:	2b80      	cmp	r3, #128	@ 0x80
 8006810:	d814      	bhi.n	800683c <UART_SetConfig+0x1f8>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <UART_SetConfig+0x1d8>
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d008      	beq.n	800682c <UART_SetConfig+0x1e8>
 800681a:	e00f      	b.n	800683c <UART_SetConfig+0x1f8>
 800681c:	2300      	movs	r3, #0
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006822:	e082      	b.n	800692a <UART_SetConfig+0x2e6>
 8006824:	2302      	movs	r3, #2
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682a:	e07e      	b.n	800692a <UART_SetConfig+0x2e6>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006832:	e07a      	b.n	800692a <UART_SetConfig+0x2e6>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683a:	e076      	b.n	800692a <UART_SetConfig+0x2e6>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006842:	e072      	b.n	800692a <UART_SetConfig+0x2e6>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a35      	ldr	r2, [pc, #212]	@ (8006920 <UART_SetConfig+0x2dc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d12a      	bne.n	80068a4 <UART_SetConfig+0x260>
 800684e:	4b30      	ldr	r3, [pc, #192]	@ (8006910 <UART_SetConfig+0x2cc>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800685c:	d01a      	beq.n	8006894 <UART_SetConfig+0x250>
 800685e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006862:	d81b      	bhi.n	800689c <UART_SetConfig+0x258>
 8006864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006868:	d00c      	beq.n	8006884 <UART_SetConfig+0x240>
 800686a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800686e:	d815      	bhi.n	800689c <UART_SetConfig+0x258>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <UART_SetConfig+0x238>
 8006874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006878:	d008      	beq.n	800688c <UART_SetConfig+0x248>
 800687a:	e00f      	b.n	800689c <UART_SetConfig+0x258>
 800687c:	2300      	movs	r3, #0
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e052      	b.n	800692a <UART_SetConfig+0x2e6>
 8006884:	2302      	movs	r3, #2
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e04e      	b.n	800692a <UART_SetConfig+0x2e6>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006892:	e04a      	b.n	800692a <UART_SetConfig+0x2e6>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689a:	e046      	b.n	800692a <UART_SetConfig+0x2e6>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e042      	b.n	800692a <UART_SetConfig+0x2e6>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a17      	ldr	r2, [pc, #92]	@ (8006908 <UART_SetConfig+0x2c4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d13a      	bne.n	8006924 <UART_SetConfig+0x2e0>
 80068ae:	4b18      	ldr	r3, [pc, #96]	@ (8006910 <UART_SetConfig+0x2cc>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068bc:	d01a      	beq.n	80068f4 <UART_SetConfig+0x2b0>
 80068be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068c2:	d81b      	bhi.n	80068fc <UART_SetConfig+0x2b8>
 80068c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c8:	d00c      	beq.n	80068e4 <UART_SetConfig+0x2a0>
 80068ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ce:	d815      	bhi.n	80068fc <UART_SetConfig+0x2b8>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <UART_SetConfig+0x298>
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d8:	d008      	beq.n	80068ec <UART_SetConfig+0x2a8>
 80068da:	e00f      	b.n	80068fc <UART_SetConfig+0x2b8>
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e2:	e022      	b.n	800692a <UART_SetConfig+0x2e6>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ea:	e01e      	b.n	800692a <UART_SetConfig+0x2e6>
 80068ec:	2304      	movs	r3, #4
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f2:	e01a      	b.n	800692a <UART_SetConfig+0x2e6>
 80068f4:	2308      	movs	r3, #8
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068fa:	e016      	b.n	800692a <UART_SetConfig+0x2e6>
 80068fc:	2310      	movs	r3, #16
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006902:	e012      	b.n	800692a <UART_SetConfig+0x2e6>
 8006904:	efff69f3 	.word	0xefff69f3
 8006908:	40008000 	.word	0x40008000
 800690c:	40013800 	.word	0x40013800
 8006910:	40021000 	.word	0x40021000
 8006914:	40004400 	.word	0x40004400
 8006918:	40004800 	.word	0x40004800
 800691c:	40004c00 	.word	0x40004c00
 8006920:	40005000 	.word	0x40005000
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a9f      	ldr	r2, [pc, #636]	@ (8006bac <UART_SetConfig+0x568>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d17a      	bne.n	8006a2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006934:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006938:	2b08      	cmp	r3, #8
 800693a:	d824      	bhi.n	8006986 <UART_SetConfig+0x342>
 800693c:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <UART_SetConfig+0x300>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006969 	.word	0x08006969
 8006948:	08006987 	.word	0x08006987
 800694c:	08006971 	.word	0x08006971
 8006950:	08006987 	.word	0x08006987
 8006954:	08006977 	.word	0x08006977
 8006958:	08006987 	.word	0x08006987
 800695c:	08006987 	.word	0x08006987
 8006960:	08006987 	.word	0x08006987
 8006964:	0800697f 	.word	0x0800697f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006968:	f7fd fda4 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 800696c:	61f8      	str	r0, [r7, #28]
        break;
 800696e:	e010      	b.n	8006992 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006970:	4b8f      	ldr	r3, [pc, #572]	@ (8006bb0 <UART_SetConfig+0x56c>)
 8006972:	61fb      	str	r3, [r7, #28]
        break;
 8006974:	e00d      	b.n	8006992 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006976:	f7fd fd05 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 800697a:	61f8      	str	r0, [r7, #28]
        break;
 800697c:	e009      	b.n	8006992 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006982:	61fb      	str	r3, [r7, #28]
        break;
 8006984:	e005      	b.n	8006992 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80fb 	beq.w	8006b90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4413      	add	r3, r2
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d305      	bcc.n	80069b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d903      	bls.n	80069be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069bc:	e0e8      	b.n	8006b90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	2200      	movs	r2, #0
 80069c2:	461c      	mov	r4, r3
 80069c4:	4615      	mov	r5, r2
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	022b      	lsls	r3, r5, #8
 80069d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069d4:	0222      	lsls	r2, r4, #8
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	6849      	ldr	r1, [r1, #4]
 80069da:	0849      	lsrs	r1, r1, #1
 80069dc:	2000      	movs	r0, #0
 80069de:	4688      	mov	r8, r1
 80069e0:	4681      	mov	r9, r0
 80069e2:	eb12 0a08 	adds.w	sl, r2, r8
 80069e6:	eb43 0b09 	adc.w	fp, r3, r9
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f8:	4650      	mov	r0, sl
 80069fa:	4659      	mov	r1, fp
 80069fc:	f7f9 fe2c 	bl	8000658 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4613      	mov	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a0e:	d308      	bcc.n	8006a22 <UART_SetConfig+0x3de>
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a16:	d204      	bcs.n	8006a22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	60da      	str	r2, [r3, #12]
 8006a20:	e0b6      	b.n	8006b90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a28:	e0b2      	b.n	8006b90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a32:	d15e      	bne.n	8006af2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d828      	bhi.n	8006a8e <UART_SetConfig+0x44a>
 8006a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a44 <UART_SetConfig+0x400>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a71 	.word	0x08006a71
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	08006a8f 	.word	0x08006a8f
 8006a54:	08006a7f 	.word	0x08006a7f
 8006a58:	08006a8f 	.word	0x08006a8f
 8006a5c:	08006a8f 	.word	0x08006a8f
 8006a60:	08006a8f 	.word	0x08006a8f
 8006a64:	08006a87 	.word	0x08006a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a68:	f7fd fd24 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8006a6c:	61f8      	str	r0, [r7, #28]
        break;
 8006a6e:	e014      	b.n	8006a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a70:	f7fd fd36 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8006a74:	61f8      	str	r0, [r7, #28]
        break;
 8006a76:	e010      	b.n	8006a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a78:	4b4d      	ldr	r3, [pc, #308]	@ (8006bb0 <UART_SetConfig+0x56c>)
 8006a7a:	61fb      	str	r3, [r7, #28]
        break;
 8006a7c:	e00d      	b.n	8006a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7e:	f7fd fc81 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8006a82:	61f8      	str	r0, [r7, #28]
        break;
 8006a84:	e009      	b.n	8006a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a8a:	61fb      	str	r3, [r7, #28]
        break;
 8006a8c:	e005      	b.n	8006a9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d077      	beq.n	8006b90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005a      	lsls	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	441a      	add	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b0f      	cmp	r3, #15
 8006aba:	d916      	bls.n	8006aea <UART_SetConfig+0x4a6>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac2:	d212      	bcs.n	8006aea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f023 030f 	bic.w	r3, r3, #15
 8006acc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	8afb      	ldrh	r3, [r7, #22]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	8afa      	ldrh	r2, [r7, #22]
 8006ae6:	60da      	str	r2, [r3, #12]
 8006ae8:	e052      	b.n	8006b90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006af0:	e04e      	b.n	8006b90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006af2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d827      	bhi.n	8006b4a <UART_SetConfig+0x506>
 8006afa:	a201      	add	r2, pc, #4	@ (adr r2, 8006b00 <UART_SetConfig+0x4bc>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fd fcc6 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8006b28:	61f8      	str	r0, [r7, #28]
        break;
 8006b2a:	e014      	b.n	8006b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fd fcd8 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e010      	b.n	8006b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb0 <UART_SetConfig+0x56c>)
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e00d      	b.n	8006b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fd fc23 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8006b3e:	61f8      	str	r0, [r7, #28]
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b46:	61fb      	str	r3, [r7, #28]
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b54:	bf00      	nop
    }

    if (pclk != 0U)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d019      	beq.n	8006b90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	085a      	lsrs	r2, r3, #1
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d909      	bls.n	8006b8a <UART_SetConfig+0x546>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b7c:	d205      	bcs.n	8006b8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60da      	str	r2, [r3, #12]
 8006b88:	e002      	b.n	8006b90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3728      	adds	r7, #40	@ 0x28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006baa:	bf00      	nop
 8006bac:	40008000 	.word	0x40008000
 8006bb0:	00f42400 	.word	0x00f42400

08006bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01a      	beq.n	8006cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb2:	d10a      	bne.n	8006cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]
  }
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b098      	sub	sp, #96	@ 0x60
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d08:	f7fb ffa6 	bl	8002c58 <HAL_GetTick>
 8006d0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d12e      	bne.n	8006d7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d24:	2200      	movs	r2, #0
 8006d26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f88c 	bl	8006e48 <UART_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d021      	beq.n	8006d7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e062      	b.n	8006e40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d149      	bne.n	8006e1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d90:	2200      	movs	r2, #0
 8006d92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f856 	bl	8006e48 <UART_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d03c      	beq.n	8006e1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	623b      	str	r3, [r7, #32]
   return(result);
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e6      	bne.n	8006da2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006df4:	61fa      	str	r2, [r7, #28]
 8006df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	617b      	str	r3, [r7, #20]
   return(result);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e011      	b.n	8006e40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3758      	adds	r7, #88	@ 0x58
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	4613      	mov	r3, r2
 8006e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e58:	e04f      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d04b      	beq.n	8006efa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e62:	f7fb fef9 	bl	8002c58 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d302      	bcc.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e04e      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d037      	beq.n	8006efa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b80      	cmp	r3, #128	@ 0x80
 8006e8e:	d034      	beq.n	8006efa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b40      	cmp	r3, #64	@ 0x40
 8006e94:	d031      	beq.n	8006efa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d110      	bne.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f8ff 	bl	80070b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e029      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed4:	d111      	bne.n	8006efa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f8e5 	bl	80070b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e00f      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4013      	ands	r3, r2
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	bf0c      	ite	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	2300      	movne	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d0a0      	beq.n	8006e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b096      	sub	sp, #88	@ 0x58
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2222      	movs	r2, #34	@ 0x22
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d028      	beq.n	8006faa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8007058 <UART_Start_Receive_DMA+0x134>)
 8006f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f64:	4a3d      	ldr	r2, [pc, #244]	@ (800705c <UART_Start_Receive_DMA+0x138>)
 8006f66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8007060 <UART_Start_Receive_DMA+0x13c>)
 8006f6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f74:	2200      	movs	r2, #0
 8006f76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3324      	adds	r3, #36	@ 0x24
 8006f82:	4619      	mov	r1, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f88:	461a      	mov	r2, r3
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	f7fc f82e 	bl	8002fec <HAL_DMA_Start_IT>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2210      	movs	r2, #16
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e051      	b.n	800704e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d018      	beq.n	8006fe4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fd2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007004:	637a      	str	r2, [r7, #52]	@ 0x34
 8007006:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800700a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	613b      	str	r3, [r7, #16]
   return(result);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800702e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007038:	623a      	str	r2, [r7, #32]
 800703a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	6a3a      	ldr	r2, [r7, #32]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	61bb      	str	r3, [r7, #24]
   return(result);
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e5      	bne.n	8007018 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3758      	adds	r7, #88	@ 0x58
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	08007179 	.word	0x08007179
 800705c:	080072a5 	.word	0x080072a5
 8007060:	080072e3 	.word	0x080072e3

08007064 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b089      	sub	sp, #36	@ 0x24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	60bb      	str	r3, [r7, #8]
   return(result);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6979      	ldr	r1, [r7, #20]
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	613b      	str	r3, [r7, #16]
   return(result);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e6      	bne.n	800706c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80070a4:	bf00      	nop
 80070a6:	3724      	adds	r7, #36	@ 0x24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b095      	sub	sp, #84	@ 0x54
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800710c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e5      	bne.n	80070ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007122:	2b01      	cmp	r3, #1
 8007124:	d118      	bne.n	8007158 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	60bb      	str	r3, [r7, #8]
   return(result);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f023 0310 	bic.w	r3, r3, #16
 800713a:	647b      	str	r3, [r7, #68]	@ 0x44
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6979      	ldr	r1, [r7, #20]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	613b      	str	r3, [r7, #16]
   return(result);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e6      	bne.n	8007126 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800716c:	bf00      	nop
 800716e:	3754      	adds	r7, #84	@ 0x54
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b09c      	sub	sp, #112	@ 0x70
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007184:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d171      	bne.n	8007278 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007196:	2200      	movs	r2, #0
 8007198:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800719c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80071ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80071f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	623b      	str	r3, [r7, #32]
   return(result);
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007218:	663b      	str	r3, [r7, #96]	@ 0x60
 800721a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007222:	633a      	str	r2, [r7, #48]	@ 0x30
 8007224:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e5      	bne.n	8007202 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007242:	2b01      	cmp	r3, #1
 8007244:	d118      	bne.n	8007278 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60fb      	str	r3, [r7, #12]
   return(result);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800725c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	69b9      	ldr	r1, [r7, #24]
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	617b      	str	r3, [r7, #20]
   return(result);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e6      	bne.n	8007246 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800727a:	2200      	movs	r2, #0
 800727c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007282:	2b01      	cmp	r3, #1
 8007284:	d107      	bne.n	8007296 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800728c:	4619      	mov	r1, r3
 800728e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007290:	f7f9 fc32 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007294:	e002      	b.n	800729c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007296:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007298:	f7ff f9b6 	bl	8006608 <HAL_UART_RxCpltCallback>
}
 800729c:	bf00      	nop
 800729e:	3770      	adds	r7, #112	@ 0x70
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d109      	bne.n	80072d4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7f9 fc13 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072d2:	e002      	b.n	80072da <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff f9a1 	bl	800661c <HAL_UART_RxHalfCpltCallback>
}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007308:	2b80      	cmp	r3, #128	@ 0x80
 800730a:	d109      	bne.n	8007320 <UART_DMAError+0x3e>
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b21      	cmp	r3, #33	@ 0x21
 8007310:	d106      	bne.n	8007320 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800731a:	6978      	ldr	r0, [r7, #20]
 800731c:	f7ff fea2 	bl	8007064 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732a:	2b40      	cmp	r3, #64	@ 0x40
 800732c:	d109      	bne.n	8007342 <UART_DMAError+0x60>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b22      	cmp	r3, #34	@ 0x22
 8007332:	d106      	bne.n	8007342 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2200      	movs	r2, #0
 8007338:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800733c:	6978      	ldr	r0, [r7, #20]
 800733e:	f7ff feb7 	bl	80070b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007348:	f043 0210 	orr.w	r2, r3, #16
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007352:	6978      	ldr	r0, [r7, #20]
 8007354:	f7ff f96c 	bl	8006630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007358:	bf00      	nop
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff f956 	bl	8006630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6979      	ldr	r1, [r7, #20]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	613b      	str	r3, [r7, #16]
   return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7f9 fbc8 	bl	8000b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d8:	bf00      	nop
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	@ 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007408:	2b20      	cmp	r3, #32
 800740a:	d142      	bne.n	8007492 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e03b      	b.n	8007494 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	461a      	mov	r2, r3
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff fd78 	bl	8006f24 <UART_Start_Receive_DMA>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800743a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d124      	bne.n	800748c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11d      	bne.n	8007486 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2210      	movs	r2, #16
 8007450:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	617b      	str	r3, [r7, #20]
   return(result);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f043 0310 	orr.w	r3, r3, #16
 8007466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
 8007472:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6a39      	ldr	r1, [r7, #32]
 8007476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	61fb      	str	r3, [r7, #28]
   return(result);
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007484:	e002      	b.n	800748c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800748c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007490:	e000      	b.n	8007494 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3730      	adds	r7, #48	@ 0x30
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <__NVIC_SetPriority>:
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	db0a      	blt.n	80074c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	490c      	ldr	r1, [pc, #48]	@ (80074e8 <__NVIC_SetPriority+0x4c>)
 80074b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ba:	0112      	lsls	r2, r2, #4
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	440b      	add	r3, r1
 80074c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80074c4:	e00a      	b.n	80074dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	4908      	ldr	r1, [pc, #32]	@ (80074ec <__NVIC_SetPriority+0x50>)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	3b04      	subs	r3, #4
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	440b      	add	r3, r1
 80074da:	761a      	strb	r2, [r3, #24]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	e000e100 	.word	0xe000e100
 80074ec:	e000ed00 	.word	0xe000ed00

080074f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074f4:	4b05      	ldr	r3, [pc, #20]	@ (800750c <SysTick_Handler+0x1c>)
 80074f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074f8:	f001 fe14 	bl	8009124 <xTaskGetSchedulerState>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d001      	beq.n	8007506 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007502:	f002 fe11 	bl	800a128 <xPortSysTickHandler>
  }
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	e000e010 	.word	0xe000e010

08007510 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007514:	2100      	movs	r1, #0
 8007516:	f06f 0004 	mvn.w	r0, #4
 800751a:	f7ff ffbf 	bl	800749c <__NVIC_SetPriority>
#endif
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752a:	f3ef 8305 	mrs	r3, IPSR
 800752e:	603b      	str	r3, [r7, #0]
  return(result);
 8007530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007536:	f06f 0305 	mvn.w	r3, #5
 800753a:	607b      	str	r3, [r7, #4]
 800753c:	e00c      	b.n	8007558 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800753e:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <osKernelInitialize+0x44>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007546:	4b08      	ldr	r3, [pc, #32]	@ (8007568 <osKernelInitialize+0x44>)
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800754c:	2300      	movs	r3, #0
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	e002      	b.n	8007558 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007552:	f04f 33ff 	mov.w	r3, #4294967295
 8007556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007558:	687b      	ldr	r3, [r7, #4]
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000428 	.word	0x20000428

0800756c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007572:	f3ef 8305 	mrs	r3, IPSR
 8007576:	603b      	str	r3, [r7, #0]
  return(result);
 8007578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <osKernelStart+0x1a>
    stat = osErrorISR;
 800757e:	f06f 0305 	mvn.w	r3, #5
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e010      	b.n	80075a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007586:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <osKernelStart+0x48>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d109      	bne.n	80075a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800758e:	f7ff ffbf 	bl	8007510 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007592:	4b08      	ldr	r3, [pc, #32]	@ (80075b4 <osKernelStart+0x48>)
 8007594:	2202      	movs	r2, #2
 8007596:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007598:	f001 f960 	bl	800885c <vTaskStartScheduler>
      stat = osOK;
 800759c:	2300      	movs	r3, #0
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	e002      	b.n	80075a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075a2:	f04f 33ff 	mov.w	r3, #4294967295
 80075a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075a8:	687b      	ldr	r3, [r7, #4]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000428 	.word	0x20000428

080075b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	@ 0x38
 80075bc:	af04      	add	r7, sp, #16
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c8:	f3ef 8305 	mrs	r3, IPSR
 80075cc:	617b      	str	r3, [r7, #20]
  return(result);
 80075ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d17e      	bne.n	80076d2 <osThreadNew+0x11a>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d07b      	beq.n	80076d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075da:	2380      	movs	r3, #128	@ 0x80
 80075dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075de:	2318      	movs	r3, #24
 80075e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d045      	beq.n	800767e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <osThreadNew+0x48>
        name = attr->name;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <osThreadNew+0x6e>
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2b38      	cmp	r3, #56	@ 0x38
 8007618:	d805      	bhi.n	8007626 <osThreadNew+0x6e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <osThreadNew+0x72>
        return (NULL);
 8007626:	2300      	movs	r3, #0
 8007628:	e054      	b.n	80076d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	089b      	lsrs	r3, r3, #2
 8007638:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00e      	beq.n	8007660 <osThreadNew+0xa8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2ba7      	cmp	r3, #167	@ 0xa7
 8007648:	d90a      	bls.n	8007660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <osThreadNew+0xa8>
        mem = 1;
 800765a:	2301      	movs	r3, #1
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e010      	b.n	8007682 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <osThreadNew+0xca>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d108      	bne.n	8007682 <osThreadNew+0xca>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <osThreadNew+0xca>
          mem = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	e001      	b.n	8007682 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d110      	bne.n	80076aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fee8 	bl	8008474 <xTaskCreateStatic>
 80076a4:	4603      	mov	r3, r0
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e013      	b.n	80076d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d110      	bne.n	80076d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f107 0310 	add.w	r3, r7, #16
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 ff36 	bl	8008534 <xTaskCreate>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d001      	beq.n	80076d2 <osThreadNew+0x11a>
            hTask = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076d2:	693b      	ldr	r3, [r7, #16]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3728      	adds	r7, #40	@ 0x28
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <osThreadFlagsSet+0x1a>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da03      	bge.n	80076fe <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80076f6:	f06f 0303 	mvn.w	r3, #3
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e035      	b.n	800776a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007704:	f3ef 8305 	mrs	r3, IPSR
 8007708:	613b      	str	r3, [r7, #16]
  return(result);
 800770a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01f      	beq.n	8007750 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007714:	f107 0308 	add.w	r3, r7, #8
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	2201      	movs	r2, #1
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6978      	ldr	r0, [r7, #20]
 8007722:	f001 feaf 	bl	8009484 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007726:	f107 030c 	add.w	r3, r7, #12
 800772a:	2200      	movs	r2, #0
 800772c:	9200      	str	r2, [sp, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	6978      	ldr	r0, [r7, #20]
 8007734:	f001 fea6 	bl	8009484 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d015      	beq.n	800776a <osThreadFlagsSet+0x8e>
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <osThreadFlagsSet+0x98>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	e00c      	b.n	800776a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007750:	2300      	movs	r3, #0
 8007752:	2201      	movs	r2, #1
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6978      	ldr	r0, [r7, #20]
 8007758:	f001 fdd2 	bl	8009300 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800775c:	f107 030c 	add.w	r3, r7, #12
 8007760:	2200      	movs	r2, #0
 8007762:	2100      	movs	r1, #0
 8007764:	6978      	ldr	r0, [r7, #20]
 8007766:	f001 fdcb 	bl	8009300 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800776a:	68fb      	ldr	r3, [r7, #12]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b08c      	sub	sp, #48	@ 0x30
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007784:	f3ef 8305 	mrs	r3, IPSR
 8007788:	617b      	str	r3, [r7, #20]
  return(result);
 800778a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8007790:	f06f 0305 	mvn.w	r3, #5
 8007794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007796:	e06b      	b.n	8007870 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	da03      	bge.n	80077a6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800779e:	f06f 0303 	mvn.w	r3, #3
 80077a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077a4:	e064      	b.n	8007870 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077b4:	e001      	b.n	80077ba <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 80077c2:	f001 f967 	bl	8008a94 <xTaskGetTickCount>
 80077c6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80077c8:	f107 0210 	add.w	r2, r7, #16
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d0:	2000      	movs	r0, #0
 80077d2:	f001 fd35 	bl	8009240 <xTaskNotifyWait>
 80077d6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d137      	bne.n	800784e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80077de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4013      	ands	r3, r2
 80077e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ea:	4313      	orrs	r3, r2
 80077ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00c      	beq.n	8007812 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	4013      	ands	r3, r2
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	429a      	cmp	r2, r3
 8007802:	d032      	beq.n	800786a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10f      	bne.n	800782a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800780a:	f06f 0302 	mvn.w	r3, #2
 800780e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8007810:	e02e      	b.n	8007870 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d128      	bne.n	800786e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007822:	f06f 0302 	mvn.w	r3, #2
 8007826:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8007828:	e022      	b.n	8007870 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800782a:	f001 f933 	bl	8008a94 <xTaskGetTickCount>
 800782e:	4602      	mov	r2, r0
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	429a      	cmp	r2, r3
 800783c:	d902      	bls.n	8007844 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24
 8007842:	e00e      	b.n	8007862 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8007844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
 800784c:	e009      	b.n	8007862 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d103      	bne.n	800785c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8007854:	f06f 0302 	mvn.w	r3, #2
 8007858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800785a:	e002      	b.n	8007862 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800785c:	f06f 0301 	mvn.w	r3, #1
 8007860:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1af      	bne.n	80077c8 <osThreadFlagsWait+0x50>
 8007868:	e002      	b.n	8007870 <osThreadFlagsWait+0xf8>
            break;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <osThreadFlagsWait+0xf8>
            break;
 800786e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007872:	4618      	mov	r0, r3
 8007874:	3730      	adds	r7, #48	@ 0x30
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007882:	f3ef 8305 	mrs	r3, IPSR
 8007886:	60bb      	str	r3, [r7, #8]
  return(result);
 8007888:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <osDelay+0x1c>
    stat = osErrorISR;
 800788e:	f06f 0305 	mvn.w	r3, #5
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e007      	b.n	80078a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 ffa5 	bl	80087f0 <vTaskDelay>
    }
  }

  return (stat);
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a07      	ldr	r2, [pc, #28]	@ (80078dc <vApplicationGetIdleTaskMemory+0x2c>)
 80078c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4a06      	ldr	r2, [pc, #24]	@ (80078e0 <vApplicationGetIdleTaskMemory+0x30>)
 80078c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2280      	movs	r2, #128	@ 0x80
 80078cc:	601a      	str	r2, [r3, #0]
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	2000042c 	.word	0x2000042c
 80078e0:	200004d4 	.word	0x200004d4

080078e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a07      	ldr	r2, [pc, #28]	@ (8007910 <vApplicationGetTimerTaskMemory+0x2c>)
 80078f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4a06      	ldr	r2, [pc, #24]	@ (8007914 <vApplicationGetTimerTaskMemory+0x30>)
 80078fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007902:	601a      	str	r2, [r3, #0]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	200006d4 	.word	0x200006d4
 8007914:	2000077c 	.word	0x2000077c

08007918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f103 0208 	add.w	r2, r3, #8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f103 0208 	add.w	r2, r3, #8
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f103 0208 	add.w	r2, r3, #8
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d103      	bne.n	80079da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e00c      	b.n	80079f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3308      	adds	r3, #8
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e002      	b.n	80079e8 <vListInsert+0x2e>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d2f6      	bcs.n	80079e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6892      	ldr	r2, [r2, #8]
 8007a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6852      	ldr	r2, [r2, #4]
 8007a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d103      	bne.n	8007a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	1e5a      	subs	r2, r3, #1
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aac:	f002 faac 	bl	800a008 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab8:	68f9      	ldr	r1, [r7, #12]
 8007aba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	441a      	add	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007adc:	3b01      	subs	r3, #1
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ae2:	fb01 f303 	mul.w	r3, r1, r3
 8007ae6:	441a      	add	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	22ff      	movs	r2, #255	@ 0xff
 8007af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	22ff      	movs	r2, #255	@ 0xff
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d114      	bne.n	8007b2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01a      	beq.n	8007b40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 f942 	bl	8008d98 <xTaskRemoveFromEventList>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d012      	beq.n	8007b40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b50 <xQueueGenericReset+0xd0>)
 8007b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	e009      	b.n	8007b40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3310      	adds	r3, #16
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff fef1 	bl	8007918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3324      	adds	r3, #36	@ 0x24
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff feec 	bl	8007918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b40:	f002 fa94 	bl	800a06c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b44:	2301      	movs	r3, #1
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08e      	sub	sp, #56	@ 0x38
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	e7fd      	b.n	8007b7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10b      	bne.n	8007b9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	e7fd      	b.n	8007b9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <xQueueGenericCreateStatic+0x56>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <xQueueGenericCreateStatic+0x5a>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <xQueueGenericCreateStatic+0x5c>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	623b      	str	r3, [r7, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <xQueueGenericCreateStatic+0x84>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <xQueueGenericCreateStatic+0x88>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <xQueueGenericCreateStatic+0x8a>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10b      	bne.n	8007bfa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	61fb      	str	r3, [r7, #28]
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	e7fd      	b.n	8007bf6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bfa:	2350      	movs	r3, #80	@ 0x50
 8007bfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b50      	cmp	r3, #80	@ 0x50
 8007c02:	d00b      	beq.n	8007c1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61bb      	str	r3, [r7, #24]
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f805 	bl	8007c4e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3730      	adds	r7, #48	@ 0x30
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e002      	b.n	8007c70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	69b8      	ldr	r0, [r7, #24]
 8007c80:	f7ff fefe 	bl	8007a80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	@ 0x38
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xQueueGenericSend+0x34>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <xQueueGenericSend+0x42>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <xQueueGenericSend+0x46>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueGenericSend+0x48>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10b      	bne.n	8007cf8 <xQueueGenericSend+0x64>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cf2:	bf00      	nop
 8007cf4:	bf00      	nop
 8007cf6:	e7fd      	b.n	8007cf4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d103      	bne.n	8007d06 <xQueueGenericSend+0x72>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <xQueueGenericSend+0x76>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueGenericSend+0x78>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <xQueueGenericSend+0x94>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	623b      	str	r3, [r7, #32]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d28:	f001 f9fc 	bl	8009124 <xTaskGetSchedulerState>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <xQueueGenericSend+0xa4>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <xQueueGenericSend+0xa8>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <xQueueGenericSend+0xaa>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10b      	bne.n	8007d5a <xQueueGenericSend+0xc6>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	61fb      	str	r3, [r7, #28]
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	e7fd      	b.n	8007d56 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d5a:	f002 f955 	bl	800a008 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <xQueueGenericSend+0xdc>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d129      	bne.n	8007dc4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d76:	f000 fa0f 	bl	8008198 <prvCopyDataToQueue>
 8007d7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d010      	beq.n	8007da6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	3324      	adds	r3, #36	@ 0x24
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 f805 	bl	8008d98 <xTaskRemoveFromEventList>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d013      	beq.n	8007dbc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d94:	4b3f      	ldr	r3, [pc, #252]	@ (8007e94 <xQueueGenericSend+0x200>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	e00a      	b.n	8007dbc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d007      	beq.n	8007dbc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007dac:	4b39      	ldr	r3, [pc, #228]	@ (8007e94 <xQueueGenericSend+0x200>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dbc:	f002 f956 	bl	800a06c <vPortExitCritical>
				return pdPASS;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e063      	b.n	8007e8c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dca:	f002 f94f 	bl	800a06c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e05c      	b.n	8007e8c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 f83f 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007de2:	2301      	movs	r3, #1
 8007de4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de6:	f002 f941 	bl	800a06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dea:	f000 fda7 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dee:	f002 f90b 	bl	800a008 <vPortEnterCritical>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df8:	b25b      	sxtb	r3, r3
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfe:	d103      	bne.n	8007e08 <xQueueGenericSend+0x174>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e0e:	b25b      	sxtb	r3, r3
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d103      	bne.n	8007e1e <xQueueGenericSend+0x18a>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e1e:	f002 f925 	bl	800a06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e22:	1d3a      	adds	r2, r7, #4
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 f82e 	bl	8008e8c <xTaskCheckForTimeOut>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d124      	bne.n	8007e80 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e38:	f000 faa6 	bl	8008388 <prvIsQueueFull>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d018      	beq.n	8007e74 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e44:	3310      	adds	r3, #16
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 ff52 	bl	8008cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e52:	f000 fa31 	bl	80082b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e56:	f000 fd7f 	bl	8008958 <xTaskResumeAll>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f47f af7c 	bne.w	8007d5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e62:	4b0c      	ldr	r3, [pc, #48]	@ (8007e94 <xQueueGenericSend+0x200>)
 8007e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	e772      	b.n	8007d5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e76:	f000 fa1f 	bl	80082b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e7a:	f000 fd6d 	bl	8008958 <xTaskResumeAll>
 8007e7e:	e76c      	b.n	8007d5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e82:	f000 fa19 	bl	80082b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e86:	f000 fd67 	bl	8008958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3738      	adds	r7, #56	@ 0x38
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	e000ed04 	.word	0xe000ed04

08007e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b090      	sub	sp, #64	@ 0x40
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	e7fd      	b.n	8007ec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <xQueueGenericSendFromISR+0x3e>
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <xQueueGenericSendFromISR+0x42>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <xQueueGenericSendFromISR+0x44>
 8007eda:	2300      	movs	r3, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d103      	bne.n	8007f06 <xQueueGenericSendFromISR+0x6e>
 8007efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <xQueueGenericSendFromISR+0x72>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueGenericSendFromISR+0x74>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	623b      	str	r3, [r7, #32]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f28:	f002 f94e 	bl	800a1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f2c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	61fa      	str	r2, [r7, #28]
 8007f42:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f44:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d302      	bcc.n	8007f5a <xQueueGenericSendFromISR+0xc2>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d12f      	bne.n	8007fba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f70:	f000 f912 	bl	8008198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f74:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d112      	bne.n	8007fa4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d016      	beq.n	8007fb4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	3324      	adds	r3, #36	@ 0x24
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 ff04 	bl	8008d98 <xTaskRemoveFromEventList>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	e007      	b.n	8007fb4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fa8:	3301      	adds	r3, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	b25a      	sxtb	r2, r3
 8007fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007fb8:	e001      	b.n	8007fbe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3740      	adds	r7, #64	@ 0x40
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08c      	sub	sp, #48	@ 0x30
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <xQueueReceive+0x32>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	623b      	str	r3, [r7, #32]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <xQueueReceive+0x40>
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <xQueueReceive+0x44>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <xQueueReceive+0x46>
 8008018:	2300      	movs	r3, #0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10b      	bne.n	8008036 <xQueueReceive+0x62>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	61fb      	str	r3, [r7, #28]
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	e7fd      	b.n	8008032 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008036:	f001 f875 	bl	8009124 <xTaskGetSchedulerState>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <xQueueReceive+0x72>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <xQueueReceive+0x76>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <xQueueReceive+0x78>
 800804a:	2300      	movs	r3, #0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <xQueueReceive+0x94>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	61bb      	str	r3, [r7, #24]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008068:	f001 ffce 	bl	800a008 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800806c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01f      	beq.n	80080b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800807c:	f000 f8f6 	bl	800826c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	1e5a      	subs	r2, r3, #1
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00f      	beq.n	80080b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	3310      	adds	r3, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fe7f 	bl	8008d98 <xTaskRemoveFromEventList>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008194 <xQueueReceive+0x1c0>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080b0:	f001 ffdc 	bl	800a06c <vPortExitCritical>
				return pdPASS;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e069      	b.n	800818c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080be:	f001 ffd5 	bl	800a06c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080c2:	2300      	movs	r3, #0
 80080c4:	e062      	b.n	800818c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fec5 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080da:	f001 ffc7 	bl	800a06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080de:	f000 fc2d 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080e2:	f001 ff91 	bl	800a008 <vPortEnterCritical>
 80080e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080ec:	b25b      	sxtb	r3, r3
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d103      	bne.n	80080fc <xQueueReceive+0x128>
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008102:	b25b      	sxtb	r3, r3
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008108:	d103      	bne.n	8008112 <xQueueReceive+0x13e>
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008112:	f001 ffab 	bl	800a06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008116:	1d3a      	adds	r2, r7, #4
 8008118:	f107 0310 	add.w	r3, r7, #16
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f000 feb4 	bl	8008e8c <xTaskCheckForTimeOut>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d123      	bne.n	8008172 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800812a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812c:	f000 f916 	bl	800835c <prvIsQueueEmpty>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d017      	beq.n	8008166 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	3324      	adds	r3, #36	@ 0x24
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fdd8 	bl	8008cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008146:	f000 f8b7 	bl	80082b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800814a:	f000 fc05 	bl	8008958 <xTaskResumeAll>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d189      	bne.n	8008068 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008154:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <xQueueReceive+0x1c0>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	e780      	b.n	8008068 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008168:	f000 f8a6 	bl	80082b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800816c:	f000 fbf4 	bl	8008958 <xTaskResumeAll>
 8008170:	e77a      	b.n	8008068 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008174:	f000 f8a0 	bl	80082b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008178:	f000 fbee 	bl	8008958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800817c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800817e:	f000 f8ed 	bl	800835c <prvIsQueueEmpty>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	f43f af6f 	beq.w	8008068 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800818a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800818c:	4618      	mov	r0, r3
 800818e:	3730      	adds	r7, #48	@ 0x30
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10d      	bne.n	80081d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d14d      	bne.n	800825a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 ffcc 	bl	8009160 <xTaskPriorityDisinherit>
 80081c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	609a      	str	r2, [r3, #8]
 80081d0:	e043      	b.n	800825a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d119      	bne.n	800820c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6858      	ldr	r0, [r3, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e0:	461a      	mov	r2, r3
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	f002 fdd9 	bl	800ad9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d32b      	bcc.n	800825a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	e026      	b.n	800825a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68d8      	ldr	r0, [r3, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008214:	461a      	mov	r2, r3
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	f002 fdbf 	bl	800ad9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008224:	425b      	negs	r3, r3
 8008226:	441a      	add	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d207      	bcs.n	8008248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008240:	425b      	negs	r3, r3
 8008242:	441a      	add	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d105      	bne.n	800825a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3b01      	subs	r3, #1
 8008258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008262:	697b      	ldr	r3, [r7, #20]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d018      	beq.n	80082b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008286:	441a      	add	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	429a      	cmp	r2, r3
 8008296:	d303      	bcc.n	80082a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68d9      	ldr	r1, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a8:	461a      	mov	r2, r3
 80082aa:	6838      	ldr	r0, [r7, #0]
 80082ac:	f002 fd75 	bl	800ad9a <memcpy>
	}
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c0:	f001 fea2 	bl	800a008 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082cc:	e011      	b.n	80082f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d012      	beq.n	80082fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3324      	adds	r3, #36	@ 0x24
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fd5c 	bl	8008d98 <xTaskRemoveFromEventList>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082e6:	f000 fe35 	bl	8008f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dce9      	bgt.n	80082ce <prvUnlockQueue+0x16>
 80082fa:	e000      	b.n	80082fe <prvUnlockQueue+0x46>
					break;
 80082fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	22ff      	movs	r2, #255	@ 0xff
 8008302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008306:	f001 feb1 	bl	800a06c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800830a:	f001 fe7d 	bl	800a008 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008316:	e011      	b.n	800833c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d012      	beq.n	8008346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3310      	adds	r3, #16
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fd37 	bl	8008d98 <xTaskRemoveFromEventList>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008330:	f000 fe10 	bl	8008f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	3b01      	subs	r3, #1
 8008338:	b2db      	uxtb	r3, r3
 800833a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800833c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dce9      	bgt.n	8008318 <prvUnlockQueue+0x60>
 8008344:	e000      	b.n	8008348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	22ff      	movs	r2, #255	@ 0xff
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008350:	f001 fe8c 	bl	800a06c <vPortExitCritical>
}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008364:	f001 fe50 	bl	800a008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e001      	b.n	800837a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800837a:	f001 fe77 	bl	800a06c <vPortExitCritical>

	return xReturn;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008390:	f001 fe3a 	bl	800a008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839c:	429a      	cmp	r2, r3
 800839e:	d102      	bne.n	80083a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e001      	b.n	80083aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083aa:	f001 fe5f 	bl	800a06c <vPortExitCritical>

	return xReturn;
 80083ae:	68fb      	ldr	r3, [r7, #12]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e014      	b.n	80083f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008408 <vQueueAddToRegistry+0x50>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083d4:	490c      	ldr	r1, [pc, #48]	@ (8008408 <vQueueAddToRegistry+0x50>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083de:	4a0a      	ldr	r2, [pc, #40]	@ (8008408 <vQueueAddToRegistry+0x50>)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	4413      	add	r3, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ea:	e006      	b.n	80083fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b07      	cmp	r3, #7
 80083f6:	d9e7      	bls.n	80083c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20000b7c 	.word	0x20000b7c

0800840c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800841c:	f001 fdf4 	bl	800a008 <vPortEnterCritical>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008426:	b25b      	sxtb	r3, r3
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d103      	bne.n	8008436 <vQueueWaitForMessageRestricted+0x2a>
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d103      	bne.n	800844c <vQueueWaitForMessageRestricted+0x40>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800844c:	f001 fe0e 	bl	800a06c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3324      	adds	r3, #36	@ 0x24
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fc6d 	bl	8008d40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	f7ff ff26 	bl	80082b8 <prvUnlockQueue>
	}
 800846c:	bf00      	nop
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08e      	sub	sp, #56	@ 0x38
 8008478:	af04      	add	r7, sp, #16
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <xTaskCreateStatic+0x4a>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	61fb      	str	r3, [r7, #28]
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	e7fd      	b.n	80084ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084be:	23a8      	movs	r3, #168	@ 0xa8
 80084c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2ba8      	cmp	r3, #168	@ 0xa8
 80084c6:	d00b      	beq.n	80084e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61bb      	str	r3, [r7, #24]
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01e      	beq.n	8008526 <xTaskCreateStatic+0xb2>
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01b      	beq.n	8008526 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008500:	2300      	movs	r3, #0
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f851 	bl	80085c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800851e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008520:	f000 f8f6 	bl	8008710 <prvAddNewTaskToReadyList>
 8008524:	e001      	b.n	800852a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800852a:	697b      	ldr	r3, [r7, #20]
	}
 800852c:	4618      	mov	r0, r3
 800852e:	3728      	adds	r7, #40	@ 0x28
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08c      	sub	sp, #48	@ 0x30
 8008538:	af04      	add	r7, sp, #16
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4618      	mov	r0, r3
 800854a:	f001 fe7f 	bl	800a24c <pvPortMalloc>
 800854e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008556:	20a8      	movs	r0, #168	@ 0xa8
 8008558:	f001 fe78 	bl	800a24c <pvPortMalloc>
 800855c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
 800856a:	e005      	b.n	8008578 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800856c:	6978      	ldr	r0, [r7, #20]
 800856e:	f001 ff3b 	bl	800a3e8 <vPortFree>
 8008572:	e001      	b.n	8008578 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d017      	beq.n	80085ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008586:	88fa      	ldrh	r2, [r7, #6]
 8008588:	2300      	movs	r3, #0
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f80f 	bl	80085c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085a2:	69f8      	ldr	r0, [r7, #28]
 80085a4:	f000 f8b4 	bl	8008710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e002      	b.n	80085b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085b4:	69bb      	ldr	r3, [r7, #24]
	}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	461a      	mov	r2, r3
 80085d8:	21a5      	movs	r1, #165	@ 0xa5
 80085da:	f002 faa0 	bl	800ab1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085e8:	3b01      	subs	r3, #1
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f023 0307 	bic.w	r3, r3, #7
 80085f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	617b      	str	r3, [r7, #20]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01f      	beq.n	8008660 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e012      	b.n	800864c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	4413      	add	r3, r2
 800862c:	7819      	ldrb	r1, [r3, #0]
 800862e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	4413      	add	r3, r2
 8008634:	3334      	adds	r3, #52	@ 0x34
 8008636:	460a      	mov	r2, r1
 8008638:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	3301      	adds	r3, #1
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b0f      	cmp	r3, #15
 8008650:	d9e9      	bls.n	8008626 <prvInitialiseNewTask+0x66>
 8008652:	e000      	b.n	8008656 <prvInitialiseNewTask+0x96>
			{
				break;
 8008654:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800865e:	e003      	b.n	8008668 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	2b37      	cmp	r3, #55	@ 0x37
 800866c:	d901      	bls.n	8008672 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800866e:	2337      	movs	r3, #55	@ 0x37
 8008670:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008676:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800867c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	2200      	movs	r2, #0
 8008682:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	3304      	adds	r3, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff f965 	bl	8007958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	3318      	adds	r3, #24
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff f960 	bl	8007958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	3354      	adds	r3, #84	@ 0x54
 80086c2:	224c      	movs	r2, #76	@ 0x4c
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f002 fa29 	bl	800ab1e <memset>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008704 <prvInitialiseNewTask+0x144>)
 80086d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008708 <prvInitialiseNewTask+0x148>)
 80086d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	4a0c      	ldr	r2, [pc, #48]	@ (800870c <prvInitialiseNewTask+0x14c>)
 80086dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	68f9      	ldr	r1, [r7, #12]
 80086e2:	69b8      	ldr	r0, [r7, #24]
 80086e4:	f001 fb62 	bl	8009dac <pxPortInitialiseStack>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086fa:	bf00      	nop
 80086fc:	3720      	adds	r7, #32
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20002988 	.word	0x20002988
 8008708:	200029f0 	.word	0x200029f0
 800870c:	20002a58 	.word	0x20002a58

08008710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008718:	f001 fc76 	bl	800a008 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800871c:	4b2d      	ldr	r3, [pc, #180]	@ (80087d4 <prvAddNewTaskToReadyList+0xc4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a2c      	ldr	r2, [pc, #176]	@ (80087d4 <prvAddNewTaskToReadyList+0xc4>)
 8008724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008726:	4b2c      	ldr	r3, [pc, #176]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d109      	bne.n	8008742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800872e:	4a2a      	ldr	r2, [pc, #168]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008734:	4b27      	ldr	r3, [pc, #156]	@ (80087d4 <prvAddNewTaskToReadyList+0xc4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d110      	bne.n	800875e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800873c:	f000 fc2e 	bl	8008f9c <prvInitialiseTaskLists>
 8008740:	e00d      	b.n	800875e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008742:	4b26      	ldr	r3, [pc, #152]	@ (80087dc <prvAddNewTaskToReadyList+0xcc>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800874a:	4b23      	ldr	r3, [pc, #140]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	d802      	bhi.n	800875e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008758:	4a1f      	ldr	r2, [pc, #124]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800875e:	4b20      	ldr	r3, [pc, #128]	@ (80087e0 <prvAddNewTaskToReadyList+0xd0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	4a1e      	ldr	r2, [pc, #120]	@ (80087e0 <prvAddNewTaskToReadyList+0xd0>)
 8008766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008768:	4b1d      	ldr	r3, [pc, #116]	@ (80087e0 <prvAddNewTaskToReadyList+0xd0>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008774:	4b1b      	ldr	r3, [pc, #108]	@ (80087e4 <prvAddNewTaskToReadyList+0xd4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d903      	bls.n	8008784 <prvAddNewTaskToReadyList+0x74>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008780:	4a18      	ldr	r2, [pc, #96]	@ (80087e4 <prvAddNewTaskToReadyList+0xd4>)
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4a15      	ldr	r2, [pc, #84]	@ (80087e8 <prvAddNewTaskToReadyList+0xd8>)
 8008792:	441a      	add	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7ff f8e9 	bl	8007972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087a0:	f001 fc64 	bl	800a06c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087a4:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <prvAddNewTaskToReadyList+0xcc>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00e      	beq.n	80087ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087ac:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d207      	bcs.n	80087ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ba:	4b0c      	ldr	r3, [pc, #48]	@ (80087ec <prvAddNewTaskToReadyList+0xdc>)
 80087bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001090 	.word	0x20001090
 80087d8:	20000bbc 	.word	0x20000bbc
 80087dc:	2000109c 	.word	0x2000109c
 80087e0:	200010ac 	.word	0x200010ac
 80087e4:	20001098 	.word	0x20001098
 80087e8:	20000bc0 	.word	0x20000bc0
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d018      	beq.n	8008834 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008802:	4b14      	ldr	r3, [pc, #80]	@ (8008854 <vTaskDelay+0x64>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <vTaskDelay+0x32>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	60bb      	str	r3, [r7, #8]
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	e7fd      	b.n	800881e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008822:	f000 f88b 	bl	800893c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008826:	2100      	movs	r1, #0
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 ff11 	bl	8009650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800882e:	f000 f893 	bl	8008958 <xTaskResumeAll>
 8008832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800883a:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <vTaskDelay+0x68>)
 800883c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	200010b8 	.word	0x200010b8
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	@ 0x28
 8008860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800886a:	463a      	mov	r2, r7
 800886c:	1d39      	adds	r1, r7, #4
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff f81c 	bl	80078b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	9202      	str	r2, [sp, #8]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2300      	movs	r3, #0
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	460a      	mov	r2, r1
 800888a:	4924      	ldr	r1, [pc, #144]	@ (800891c <vTaskStartScheduler+0xc0>)
 800888c:	4824      	ldr	r0, [pc, #144]	@ (8008920 <vTaskStartScheduler+0xc4>)
 800888e:	f7ff fdf1 	bl	8008474 <xTaskCreateStatic>
 8008892:	4603      	mov	r3, r0
 8008894:	4a23      	ldr	r2, [pc, #140]	@ (8008924 <vTaskStartScheduler+0xc8>)
 8008896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008898:	4b22      	ldr	r3, [pc, #136]	@ (8008924 <vTaskStartScheduler+0xc8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088a0:	2301      	movs	r3, #1
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e001      	b.n	80088aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d102      	bne.n	80088b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088b0:	f000 ff22 	bl	80096f8 <xTimerCreateTimerTask>
 80088b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d11b      	bne.n	80088f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	613b      	str	r3, [r7, #16]
}
 80088ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088d0:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <vTaskStartScheduler+0xcc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3354      	adds	r3, #84	@ 0x54
 80088d6:	4a15      	ldr	r2, [pc, #84]	@ (800892c <vTaskStartScheduler+0xd0>)
 80088d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088da:	4b15      	ldr	r3, [pc, #84]	@ (8008930 <vTaskStartScheduler+0xd4>)
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295
 80088e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088e2:	4b14      	ldr	r3, [pc, #80]	@ (8008934 <vTaskStartScheduler+0xd8>)
 80088e4:	2201      	movs	r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088e8:	4b13      	ldr	r3, [pc, #76]	@ (8008938 <vTaskStartScheduler+0xdc>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088ee:	f001 fae7 	bl	8009ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088f2:	e00f      	b.n	8008914 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d10b      	bne.n	8008914 <vTaskStartScheduler+0xb8>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	60fb      	str	r3, [r7, #12]
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <vTaskStartScheduler+0xb4>
}
 8008914:	bf00      	nop
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	0800bde4 	.word	0x0800bde4
 8008920:	08008f6d 	.word	0x08008f6d
 8008924:	200010b4 	.word	0x200010b4
 8008928:	20000bbc 	.word	0x20000bbc
 800892c:	20000100 	.word	0x20000100
 8008930:	200010b0 	.word	0x200010b0
 8008934:	2000109c 	.word	0x2000109c
 8008938:	20001094 	.word	0x20001094

0800893c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008940:	4b04      	ldr	r3, [pc, #16]	@ (8008954 <vTaskSuspendAll+0x18>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	4a03      	ldr	r2, [pc, #12]	@ (8008954 <vTaskSuspendAll+0x18>)
 8008948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800894a:	bf00      	nop
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	200010b8 	.word	0x200010b8

08008958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008966:	4b42      	ldr	r3, [pc, #264]	@ (8008a70 <xTaskResumeAll+0x118>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <xTaskResumeAll+0x2e>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	603b      	str	r3, [r7, #0]
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	e7fd      	b.n	8008982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008986:	f001 fb3f 	bl	800a008 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800898a:	4b39      	ldr	r3, [pc, #228]	@ (8008a70 <xTaskResumeAll+0x118>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3b01      	subs	r3, #1
 8008990:	4a37      	ldr	r2, [pc, #220]	@ (8008a70 <xTaskResumeAll+0x118>)
 8008992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008994:	4b36      	ldr	r3, [pc, #216]	@ (8008a70 <xTaskResumeAll+0x118>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d162      	bne.n	8008a62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800899c:	4b35      	ldr	r3, [pc, #212]	@ (8008a74 <xTaskResumeAll+0x11c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d05e      	beq.n	8008a62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a4:	e02f      	b.n	8008a06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a6:	4b34      	ldr	r3, [pc, #208]	@ (8008a78 <xTaskResumeAll+0x120>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3318      	adds	r3, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff f83a 	bl	8007a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff f835 	bl	8007a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a7c <xTaskResumeAll+0x124>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d903      	bls.n	80089d6 <xTaskResumeAll+0x7e>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a7c <xTaskResumeAll+0x124>)
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a27      	ldr	r2, [pc, #156]	@ (8008a80 <xTaskResumeAll+0x128>)
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7fe ffc0 	bl	8007972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f6:	4b23      	ldr	r3, [pc, #140]	@ (8008a84 <xTaskResumeAll+0x12c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d302      	bcc.n	8008a06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a00:	4b21      	ldr	r3, [pc, #132]	@ (8008a88 <xTaskResumeAll+0x130>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a06:	4b1c      	ldr	r3, [pc, #112]	@ (8008a78 <xTaskResumeAll+0x120>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1cb      	bne.n	80089a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a14:	f000 fb66 	bl	80090e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a18:	4b1c      	ldr	r3, [pc, #112]	@ (8008a8c <xTaskResumeAll+0x134>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d010      	beq.n	8008a46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a24:	f000 f846 	bl	8008ab4 <xTaskIncrementTick>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008a2e:	4b16      	ldr	r3, [pc, #88]	@ (8008a88 <xTaskResumeAll+0x130>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f1      	bne.n	8008a24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a40:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <xTaskResumeAll+0x134>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a46:	4b10      	ldr	r3, [pc, #64]	@ (8008a88 <xTaskResumeAll+0x130>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a52:	4b0f      	ldr	r3, [pc, #60]	@ (8008a90 <xTaskResumeAll+0x138>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a62:	f001 fb03 	bl	800a06c <vPortExitCritical>

	return xAlreadyYielded;
 8008a66:	68bb      	ldr	r3, [r7, #8]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	200010b8 	.word	0x200010b8
 8008a74:	20001090 	.word	0x20001090
 8008a78:	20001050 	.word	0x20001050
 8008a7c:	20001098 	.word	0x20001098
 8008a80:	20000bc0 	.word	0x20000bc0
 8008a84:	20000bbc 	.word	0x20000bbc
 8008a88:	200010a4 	.word	0x200010a4
 8008a8c:	200010a0 	.word	0x200010a0
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <xTaskGetTickCount+0x1c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008aa0:	687b      	ldr	r3, [r7, #4]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20001094 	.word	0x20001094

08008ab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008abe:	4b4f      	ldr	r3, [pc, #316]	@ (8008bfc <xTaskIncrementTick+0x148>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f040 8090 	bne.w	8008be8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8008c00 <xTaskIncrementTick+0x14c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8008c00 <xTaskIncrementTick+0x14c>)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d121      	bne.n	8008b20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008adc:	4b49      	ldr	r3, [pc, #292]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	603b      	str	r3, [r7, #0]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <xTaskIncrementTick+0x46>
 8008afe:	4b41      	ldr	r3, [pc, #260]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	4b40      	ldr	r3, [pc, #256]	@ (8008c08 <xTaskIncrementTick+0x154>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a3e      	ldr	r2, [pc, #248]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008c08 <xTaskIncrementTick+0x154>)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	4b3e      	ldr	r3, [pc, #248]	@ (8008c0c <xTaskIncrementTick+0x158>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	4a3c      	ldr	r2, [pc, #240]	@ (8008c0c <xTaskIncrementTick+0x158>)
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	f000 fae2 	bl	80090e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b20:	4b3b      	ldr	r3, [pc, #236]	@ (8008c10 <xTaskIncrementTick+0x15c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d349      	bcc.n	8008bbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2a:	4b36      	ldr	r3, [pc, #216]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b34:	4b36      	ldr	r3, [pc, #216]	@ (8008c10 <xTaskIncrementTick+0x15c>)
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	601a      	str	r2, [r3, #0]
					break;
 8008b3c:	e03f      	b.n	8008bbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b3e:	4b31      	ldr	r3, [pc, #196]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d203      	bcs.n	8008b5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b56:	4a2e      	ldr	r2, [pc, #184]	@ (8008c10 <xTaskIncrementTick+0x15c>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b5c:	e02f      	b.n	8008bbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe ff62 	bl	8007a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3318      	adds	r3, #24
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe ff59 	bl	8007a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7e:	4b25      	ldr	r3, [pc, #148]	@ (8008c14 <xTaskIncrementTick+0x160>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d903      	bls.n	8008b8e <xTaskIncrementTick+0xda>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	4a22      	ldr	r2, [pc, #136]	@ (8008c14 <xTaskIncrementTick+0x160>)
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008c18 <xTaskIncrementTick+0x164>)
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	f7fe fee4 	bl	8007972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bae:	4b1b      	ldr	r3, [pc, #108]	@ (8008c1c <xTaskIncrementTick+0x168>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d3b8      	bcc.n	8008b2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bbc:	e7b5      	b.n	8008b2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bbe:	4b17      	ldr	r3, [pc, #92]	@ (8008c1c <xTaskIncrementTick+0x168>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	4914      	ldr	r1, [pc, #80]	@ (8008c18 <xTaskIncrementTick+0x164>)
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d901      	bls.n	8008bda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bda:	4b11      	ldr	r3, [pc, #68]	@ (8008c20 <xTaskIncrementTick+0x16c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]
 8008be6:	e004      	b.n	8008bf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008be8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c24 <xTaskIncrementTick+0x170>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	4a0d      	ldr	r2, [pc, #52]	@ (8008c24 <xTaskIncrementTick+0x170>)
 8008bf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bf2:	697b      	ldr	r3, [r7, #20]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	200010b8 	.word	0x200010b8
 8008c00:	20001094 	.word	0x20001094
 8008c04:	20001048 	.word	0x20001048
 8008c08:	2000104c 	.word	0x2000104c
 8008c0c:	200010a8 	.word	0x200010a8
 8008c10:	200010b0 	.word	0x200010b0
 8008c14:	20001098 	.word	0x20001098
 8008c18:	20000bc0 	.word	0x20000bc0
 8008c1c:	20000bbc 	.word	0x20000bbc
 8008c20:	200010a4 	.word	0x200010a4
 8008c24:	200010a0 	.word	0x200010a0

08008c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008cdc <vTaskSwitchContext+0xb4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c36:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce0 <vTaskSwitchContext+0xb8>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c3c:	e047      	b.n	8008cce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c3e:	4b28      	ldr	r3, [pc, #160]	@ (8008ce0 <vTaskSwitchContext+0xb8>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	4b27      	ldr	r3, [pc, #156]	@ (8008ce4 <vTaskSwitchContext+0xbc>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e011      	b.n	8008c70 <vTaskSwitchContext+0x48>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <vTaskSwitchContext+0x42>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <vTaskSwitchContext+0x3e>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	491d      	ldr	r1, [pc, #116]	@ (8008ce8 <vTaskSwitchContext+0xc0>)
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0e3      	beq.n	8008c4c <vTaskSwitchContext+0x24>
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ce8 <vTaskSwitchContext+0xc0>)
 8008c90:	4413      	add	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d104      	bne.n	8008cb4 <vTaskSwitchContext+0x8c>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4a0c      	ldr	r2, [pc, #48]	@ (8008cec <vTaskSwitchContext+0xc4>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4a09      	ldr	r2, [pc, #36]	@ (8008ce4 <vTaskSwitchContext+0xbc>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cc4:	4b09      	ldr	r3, [pc, #36]	@ (8008cec <vTaskSwitchContext+0xc4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3354      	adds	r3, #84	@ 0x54
 8008cca:	4a09      	ldr	r2, [pc, #36]	@ (8008cf0 <vTaskSwitchContext+0xc8>)
 8008ccc:	6013      	str	r3, [r2, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	200010b8 	.word	0x200010b8
 8008ce0:	200010a4 	.word	0x200010a4
 8008ce4:	20001098 	.word	0x20001098
 8008ce8:	20000bc0 	.word	0x20000bc0
 8008cec:	20000bbc 	.word	0x20000bbc
 8008cf0:	20000100 	.word	0x20000100

08008cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10b      	bne.n	8008d1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	60fb      	str	r3, [r7, #12]
}
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	e7fd      	b.n	8008d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d1c:	4b07      	ldr	r3, [pc, #28]	@ (8008d3c <vTaskPlaceOnEventList+0x48>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3318      	adds	r3, #24
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fe fe48 	bl	80079ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	6838      	ldr	r0, [r7, #0]
 8008d2e:	f000 fc8f 	bl	8009650 <prvAddCurrentTaskToDelayedList>
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000bbc 	.word	0x20000bbc

08008d40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	617b      	str	r3, [r7, #20]
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4619      	mov	r1, r3
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7fe fdfd 	bl	8007972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	68b8      	ldr	r0, [r7, #8]
 8008d88:	f000 fc62 	bl	8009650 <prvAddCurrentTaskToDelayedList>
	}
 8008d8c:	bf00      	nop
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20000bbc 	.word	0x20000bbc

08008d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	3318      	adds	r3, #24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fe2e 	bl	8007a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e48 <xTaskRemoveFromEventList+0xb0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11d      	bne.n	8008e14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fe25 	bl	8007a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de6:	4b19      	ldr	r3, [pc, #100]	@ (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d903      	bls.n	8008df6 <xTaskRemoveFromEventList+0x5e>
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df2:	4a16      	ldr	r2, [pc, #88]	@ (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4a13      	ldr	r2, [pc, #76]	@ (8008e50 <xTaskRemoveFromEventList+0xb8>)
 8008e04:	441a      	add	r2, r3
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7fe fdb0 	bl	8007972 <vListInsertEnd>
 8008e12:	e005      	b.n	8008e20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	3318      	adds	r3, #24
 8008e18:	4619      	mov	r1, r3
 8008e1a:	480e      	ldr	r0, [pc, #56]	@ (8008e54 <xTaskRemoveFromEventList+0xbc>)
 8008e1c:	f7fe fda9 	bl	8007972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <xTaskRemoveFromEventList+0xc0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d905      	bls.n	8008e3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	@ (8008e5c <xTaskRemoveFromEventList+0xc4>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e001      	b.n	8008e3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e3e:	697b      	ldr	r3, [r7, #20]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200010b8 	.word	0x200010b8
 8008e4c:	20001098 	.word	0x20001098
 8008e50:	20000bc0 	.word	0x20000bc0
 8008e54:	20001050 	.word	0x20001050
 8008e58:	20000bbc 	.word	0x20000bbc
 8008e5c:	200010a4 	.word	0x200010a4

08008e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e68:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <vTaskInternalSetTimeOutState+0x24>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e70:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <vTaskInternalSetTimeOutState+0x28>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	200010a8 	.word	0x200010a8
 8008e88:	20001094 	.word	0x20001094

08008e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10b      	bne.n	8008eb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	613b      	str	r3, [r7, #16]
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	e7fd      	b.n	8008eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	e7fd      	b.n	8008ece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ed2:	f001 f899 	bl	800a008 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f4c <xTaskCheckForTimeOut+0xc0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d102      	bne.n	8008ef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
 8008ef4:	e023      	b.n	8008f3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b15      	ldr	r3, [pc, #84]	@ (8008f50 <xTaskCheckForTimeOut+0xc4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d007      	beq.n	8008f12 <xTaskCheckForTimeOut+0x86>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	61fb      	str	r3, [r7, #28]
 8008f10:	e015      	b.n	8008f3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d20b      	bcs.n	8008f34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	1ad2      	subs	r2, r2, r3
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff ff99 	bl	8008e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e004      	b.n	8008f3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f3e:	f001 f895 	bl	800a06c <vPortExitCritical>

	return xReturn;
 8008f42:	69fb      	ldr	r3, [r7, #28]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20001094 	.word	0x20001094
 8008f50:	200010a8 	.word	0x200010a8

08008f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f58:	4b03      	ldr	r3, [pc, #12]	@ (8008f68 <vTaskMissedYield+0x14>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	200010a4 	.word	0x200010a4

08008f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f74:	f000 f852 	bl	800901c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f78:	4b06      	ldr	r3, [pc, #24]	@ (8008f94 <prvIdleTask+0x28>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d9f9      	bls.n	8008f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f80:	4b05      	ldr	r3, [pc, #20]	@ (8008f98 <prvIdleTask+0x2c>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f90:	e7f0      	b.n	8008f74 <prvIdleTask+0x8>
 8008f92:	bf00      	nop
 8008f94:	20000bc0 	.word	0x20000bc0
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	e00c      	b.n	8008fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4a12      	ldr	r2, [pc, #72]	@ (8008ffc <prvInitialiseTaskLists+0x60>)
 8008fb4:	4413      	add	r3, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe fcae 	bl	8007918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	607b      	str	r3, [r7, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b37      	cmp	r3, #55	@ 0x37
 8008fc6:	d9ef      	bls.n	8008fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fc8:	480d      	ldr	r0, [pc, #52]	@ (8009000 <prvInitialiseTaskLists+0x64>)
 8008fca:	f7fe fca5 	bl	8007918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fce:	480d      	ldr	r0, [pc, #52]	@ (8009004 <prvInitialiseTaskLists+0x68>)
 8008fd0:	f7fe fca2 	bl	8007918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fd4:	480c      	ldr	r0, [pc, #48]	@ (8009008 <prvInitialiseTaskLists+0x6c>)
 8008fd6:	f7fe fc9f 	bl	8007918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fda:	480c      	ldr	r0, [pc, #48]	@ (800900c <prvInitialiseTaskLists+0x70>)
 8008fdc:	f7fe fc9c 	bl	8007918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fe0:	480b      	ldr	r0, [pc, #44]	@ (8009010 <prvInitialiseTaskLists+0x74>)
 8008fe2:	f7fe fc99 	bl	8007918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8009014 <prvInitialiseTaskLists+0x78>)
 8008fe8:	4a05      	ldr	r2, [pc, #20]	@ (8009000 <prvInitialiseTaskLists+0x64>)
 8008fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	@ (8009018 <prvInitialiseTaskLists+0x7c>)
 8008fee:	4a05      	ldr	r2, [pc, #20]	@ (8009004 <prvInitialiseTaskLists+0x68>)
 8008ff0:	601a      	str	r2, [r3, #0]
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000bc0 	.word	0x20000bc0
 8009000:	20001020 	.word	0x20001020
 8009004:	20001034 	.word	0x20001034
 8009008:	20001050 	.word	0x20001050
 800900c:	20001064 	.word	0x20001064
 8009010:	2000107c 	.word	0x2000107c
 8009014:	20001048 	.word	0x20001048
 8009018:	2000104c 	.word	0x2000104c

0800901c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009022:	e019      	b.n	8009058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009024:	f000 fff0 	bl	800a008 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009028:	4b10      	ldr	r3, [pc, #64]	@ (800906c <prvCheckTasksWaitingTermination+0x50>)
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3304      	adds	r3, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fcf9 	bl	8007a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <prvCheckTasksWaitingTermination+0x54>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3b01      	subs	r3, #1
 8009040:	4a0b      	ldr	r2, [pc, #44]	@ (8009070 <prvCheckTasksWaitingTermination+0x54>)
 8009042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <prvCheckTasksWaitingTermination+0x58>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3b01      	subs	r3, #1
 800904a:	4a0a      	ldr	r2, [pc, #40]	@ (8009074 <prvCheckTasksWaitingTermination+0x58>)
 800904c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800904e:	f001 f80d 	bl	800a06c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f810 	bl	8009078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009058:	4b06      	ldr	r3, [pc, #24]	@ (8009074 <prvCheckTasksWaitingTermination+0x58>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e1      	bne.n	8009024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20001064 	.word	0x20001064
 8009070:	20001090 	.word	0x20001090
 8009074:	20001078 	.word	0x20001078

08009078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3354      	adds	r3, #84	@ 0x54
 8009084:	4618      	mov	r0, r3
 8009086:	f001 fdbf 	bl	800ac08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f9a5 	bl	800a3e8 <vPortFree>
				vPortFree( pxTCB );
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 f9a2 	bl	800a3e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a4:	e019      	b.n	80090da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d103      	bne.n	80090b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f999 	bl	800a3e8 <vPortFree>
	}
 80090b6:	e010      	b.n	80090da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d00b      	beq.n	80090da <prvDeleteTCB+0x62>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60fb      	str	r3, [r7, #12]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <prvDeleteTCB+0x5e>
	}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ea:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <prvResetNextTaskUnblockTime+0x38>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <prvResetNextTaskUnblockTime+0x3c>)
 80090f6:	f04f 32ff 	mov.w	r2, #4294967295
 80090fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090fc:	e008      	b.n	8009110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fe:	4b07      	ldr	r3, [pc, #28]	@ (800911c <prvResetNextTaskUnblockTime+0x38>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4a04      	ldr	r2, [pc, #16]	@ (8009120 <prvResetNextTaskUnblockTime+0x3c>)
 800910e:	6013      	str	r3, [r2, #0]
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20001048 	.word	0x20001048
 8009120:	200010b0 	.word	0x200010b0

08009124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800912a:	4b0b      	ldr	r3, [pc, #44]	@ (8009158 <xTaskGetSchedulerState+0x34>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009132:	2301      	movs	r3, #1
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	e008      	b.n	800914a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009138:	4b08      	ldr	r3, [pc, #32]	@ (800915c <xTaskGetSchedulerState+0x38>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009140:	2302      	movs	r3, #2
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	e001      	b.n	800914a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800914a:	687b      	ldr	r3, [r7, #4]
	}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	2000109c 	.word	0x2000109c
 800915c:	200010b8 	.word	0x200010b8

08009160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d058      	beq.n	8009228 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009176:	4b2f      	ldr	r3, [pc, #188]	@ (8009234 <xTaskPriorityDisinherit+0xd4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	429a      	cmp	r2, r3
 800917e:	d00b      	beq.n	8009198 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	60fb      	str	r3, [r7, #12]
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10b      	bne.n	80091b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60bb      	str	r3, [r7, #8]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091bc:	1e5a      	subs	r2, r3, #1
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d02c      	beq.n	8009228 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d128      	bne.n	8009228 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fc26 	bl	8007a2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009238 <xTaskPriorityDisinherit+0xd8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d903      	bls.n	8009208 <xTaskPriorityDisinherit+0xa8>
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009204:	4a0c      	ldr	r2, [pc, #48]	@ (8009238 <xTaskPriorityDisinherit+0xd8>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a09      	ldr	r2, [pc, #36]	@ (800923c <xTaskPriorityDisinherit+0xdc>)
 8009216:	441a      	add	r2, r3
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe fba7 	bl	8007972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009228:	697b      	ldr	r3, [r7, #20]
	}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000bbc 	.word	0x20000bbc
 8009238:	20001098 	.word	0x20001098
 800923c:	20000bc0 	.word	0x20000bc0

08009240 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800924e:	f000 fedb 	bl	800a008 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009252:	4b29      	ldr	r3, [pc, #164]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d01c      	beq.n	800929a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009260:	4b25      	ldr	r3, [pc, #148]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	43d2      	mvns	r2, r2
 800926c:	400a      	ands	r2, r1
 800926e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009272:	4b21      	ldr	r3, [pc, #132]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009282:	2101      	movs	r1, #1
 8009284:	6838      	ldr	r0, [r7, #0]
 8009286:	f000 f9e3 	bl	8009650 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800928a:	4b1c      	ldr	r3, [pc, #112]	@ (80092fc <xTaskNotifyWait+0xbc>)
 800928c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800929a:	f000 fee7 	bl	800a06c <vPortExitCritical>

		taskENTER_CRITICAL();
 800929e:	f000 feb3 	bl	800a008 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80092a8:	4b13      	ldr	r3, [pc, #76]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092b4:	4b10      	ldr	r3, [pc, #64]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d002      	beq.n	80092c8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	e00a      	b.n	80092de <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80092c8:	4b0b      	ldr	r3, [pc, #44]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	43d2      	mvns	r2, r2
 80092d4:	400a      	ands	r2, r1
 80092d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80092da:	2301      	movs	r3, #1
 80092dc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092de:	4b06      	ldr	r3, [pc, #24]	@ (80092f8 <xTaskNotifyWait+0xb8>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80092e8:	f000 fec0 	bl	800a06c <vPortExitCritical>

		return xReturn;
 80092ec:	697b      	ldr	r3, [r7, #20]
	}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20000bbc 	.word	0x20000bbc
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	@ 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009310:	2301      	movs	r3, #1
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <xTaskGenericNotify+0x32>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	61bb      	str	r3, [r7, #24]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009336:	f000 fe67 	bl	800a008 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009350:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	2202      	movs	r2, #2
 8009356:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	2b04      	cmp	r3, #4
 800935e:	d82e      	bhi.n	80093be <xTaskGenericNotify+0xbe>
 8009360:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <xTaskGenericNotify+0x68>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	080093e3 	.word	0x080093e3
 800936c:	0800937d 	.word	0x0800937d
 8009370:	0800938f 	.word	0x0800938f
 8009374:	0800939f 	.word	0x0800939f
 8009378:	080093a9 	.word	0x080093a9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	431a      	orrs	r2, r3
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800938c:	e02c      	b.n	80093e8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800939c:	e024      	b.n	80093e8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80093a6:	e01f      	b.n	80093e8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80093a8:	7ffb      	ldrb	r3, [r7, #31]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d004      	beq.n	80093b8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80093b6:	e017      	b.n	80093e8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80093bc:	e014      	b.n	80093e8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c8:	d00d      	beq.n	80093e6 <xTaskGenericNotify+0xe6>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	617b      	str	r3, [r7, #20]
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	e7fd      	b.n	80093de <xTaskGenericNotify+0xde>
					break;
 80093e2:	bf00      	nop
 80093e4:	e000      	b.n	80093e8 <xTaskGenericNotify+0xe8>

					break;
 80093e6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80093e8:	7ffb      	ldrb	r3, [r7, #31]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d13b      	bne.n	8009466 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fb1a 	bl	8007a2c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009474 <xTaskGenericNotify+0x174>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d903      	bls.n	800940c <xTaskGenericNotify+0x10c>
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009408:	4a1a      	ldr	r2, [pc, #104]	@ (8009474 <xTaskGenericNotify+0x174>)
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4a17      	ldr	r2, [pc, #92]	@ (8009478 <xTaskGenericNotify+0x178>)
 800941a:	441a      	add	r2, r3
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe faa5 	bl	8007972 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <xTaskGenericNotify+0x148>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	613b      	str	r3, [r7, #16]
}
 8009442:	bf00      	nop
 8009444:	bf00      	nop
 8009446:	e7fd      	b.n	8009444 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944c:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <xTaskGenericNotify+0x17c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	429a      	cmp	r2, r3
 8009454:	d907      	bls.n	8009466 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009456:	4b0a      	ldr	r3, [pc, #40]	@ (8009480 <xTaskGenericNotify+0x180>)
 8009458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009466:	f000 fe01 	bl	800a06c <vPortExitCritical>

		return xReturn;
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800946c:	4618      	mov	r0, r3
 800946e:	3728      	adds	r7, #40	@ 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20001098 	.word	0x20001098
 8009478:	20000bc0 	.word	0x20000bc0
 800947c:	20000bbc 	.word	0x20000bbc
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08e      	sub	sp, #56	@ 0x38
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	603b      	str	r3, [r7, #0]
 8009490:	4613      	mov	r3, r2
 8009492:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009494:	2301      	movs	r3, #1
 8009496:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10b      	bne.n	80094b6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094b6:	f000 fe87 	bl	800a1c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80094be:	f3ef 8211 	mrs	r2, BASEPRI
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	623a      	str	r2, [r7, #32]
 80094d4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80094d6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80094f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d82e      	bhi.n	8009560 <xTaskGenericNotifyFromISR+0xdc>
 8009502:	a201      	add	r2, pc, #4	@ (adr r2, 8009508 <xTaskGenericNotifyFromISR+0x84>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	08009585 	.word	0x08009585
 800950c:	0800951d 	.word	0x0800951d
 8009510:	0800952f 	.word	0x0800952f
 8009514:	0800953f 	.word	0x0800953f
 8009518:	08009549 	.word	0x08009549
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800951c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	431a      	orrs	r2, r3
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800952c:	e02d      	b.n	800958a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800953c:	e025      	b.n	800958a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009546:	e020      	b.n	800958a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009548:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800954c:	2b02      	cmp	r3, #2
 800954e:	d004      	beq.n	800955a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009558:	e017      	b.n	800958a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800955a:	2300      	movs	r3, #0
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800955e:	e014      	b.n	800958a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956a:	d00d      	beq.n	8009588 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	61bb      	str	r3, [r7, #24]
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009584:	bf00      	nop
 8009586:	e000      	b.n	800958a <xTaskGenericNotifyFromISR+0x106>
					break;
 8009588:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800958a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800958e:	2b01      	cmp	r3, #1
 8009590:	d147      	bne.n	8009622 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	617b      	str	r3, [r7, #20]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b2:	4b21      	ldr	r3, [pc, #132]	@ (8009638 <xTaskGenericNotifyFromISR+0x1b4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11d      	bne.n	80095f6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fa34 	bl	8007a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c8:	4b1c      	ldr	r3, [pc, #112]	@ (800963c <xTaskGenericNotifyFromISR+0x1b8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <xTaskGenericNotifyFromISR+0x154>
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	4a19      	ldr	r2, [pc, #100]	@ (800963c <xTaskGenericNotifyFromISR+0x1b8>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a16      	ldr	r2, [pc, #88]	@ (8009640 <xTaskGenericNotifyFromISR+0x1bc>)
 80095e6:	441a      	add	r2, r3
 80095e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fe f9bf 	bl	8007972 <vListInsertEnd>
 80095f4:	e005      	b.n	8009602 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	3318      	adds	r3, #24
 80095fa:	4619      	mov	r1, r3
 80095fc:	4811      	ldr	r0, [pc, #68]	@ (8009644 <xTaskGenericNotifyFromISR+0x1c0>)
 80095fe:	f7fe f9b8 	bl	8007972 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	4b10      	ldr	r3, [pc, #64]	@ (8009648 <xTaskGenericNotifyFromISR+0x1c4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	429a      	cmp	r2, r3
 800960e:	d908      	bls.n	8009622 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009618:	2201      	movs	r2, #1
 800961a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800961c:	4b0b      	ldr	r3, [pc, #44]	@ (800964c <xTaskGenericNotifyFromISR+0x1c8>)
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009624:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f383 8811 	msr	BASEPRI, r3
}
 800962c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800962e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009630:	4618      	mov	r0, r3
 8009632:	3738      	adds	r7, #56	@ 0x38
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200010b8 	.word	0x200010b8
 800963c:	20001098 	.word	0x20001098
 8009640:	20000bc0 	.word	0x20000bc0
 8009644:	20001050 	.word	0x20001050
 8009648:	20000bbc 	.word	0x20000bbc
 800964c:	200010a4 	.word	0x200010a4

08009650 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800965a:	4b21      	ldr	r3, [pc, #132]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009660:	4b20      	ldr	r3, [pc, #128]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3304      	adds	r3, #4
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe f9e0 	bl	8007a2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d10a      	bne.n	800968a <prvAddCurrentTaskToDelayedList+0x3a>
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800967a:	4b1a      	ldr	r3, [pc, #104]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4819      	ldr	r0, [pc, #100]	@ (80096e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009684:	f7fe f975 	bl	8007972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009688:	e026      	b.n	80096d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4413      	add	r3, r2
 8009690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009692:	4b14      	ldr	r3, [pc, #80]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d209      	bcs.n	80096b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096a2:	4b12      	ldr	r3, [pc, #72]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4b0f      	ldr	r3, [pc, #60]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3304      	adds	r3, #4
 80096ac:	4619      	mov	r1, r3
 80096ae:	4610      	mov	r0, r2
 80096b0:	f7fe f983 	bl	80079ba <vListInsert>
}
 80096b4:	e010      	b.n	80096d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b6:	4b0e      	ldr	r3, [pc, #56]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f7fe f979 	bl	80079ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096c8:	4b0a      	ldr	r3, [pc, #40]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d202      	bcs.n	80096d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096d2:	4a08      	ldr	r2, [pc, #32]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	6013      	str	r3, [r2, #0]
}
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20001094 	.word	0x20001094
 80096e4:	20000bbc 	.word	0x20000bbc
 80096e8:	2000107c 	.word	0x2000107c
 80096ec:	2000104c 	.word	0x2000104c
 80096f0:	20001048 	.word	0x20001048
 80096f4:	200010b0 	.word	0x200010b0

080096f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08a      	sub	sp, #40	@ 0x28
 80096fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009702:	f000 fb13 	bl	8009d2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009706:	4b1d      	ldr	r3, [pc, #116]	@ (800977c <xTimerCreateTimerTask+0x84>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d021      	beq.n	8009752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009716:	1d3a      	adds	r2, r7, #4
 8009718:	f107 0108 	add.w	r1, r7, #8
 800971c:	f107 030c 	add.w	r3, r7, #12
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe f8df 	bl	80078e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	9202      	str	r2, [sp, #8]
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	2302      	movs	r3, #2
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2300      	movs	r3, #0
 8009736:	460a      	mov	r2, r1
 8009738:	4911      	ldr	r1, [pc, #68]	@ (8009780 <xTimerCreateTimerTask+0x88>)
 800973a:	4812      	ldr	r0, [pc, #72]	@ (8009784 <xTimerCreateTimerTask+0x8c>)
 800973c:	f7fe fe9a 	bl	8008474 <xTaskCreateStatic>
 8009740:	4603      	mov	r3, r0
 8009742:	4a11      	ldr	r2, [pc, #68]	@ (8009788 <xTimerCreateTimerTask+0x90>)
 8009744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009746:	4b10      	ldr	r3, [pc, #64]	@ (8009788 <xTimerCreateTimerTask+0x90>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800974e:	2301      	movs	r3, #1
 8009750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10b      	bne.n	8009770 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	613b      	str	r3, [r7, #16]
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	e7fd      	b.n	800976c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009770:	697b      	ldr	r3, [r7, #20]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200010ec 	.word	0x200010ec
 8009780:	0800bdec 	.word	0x0800bdec
 8009784:	080098c5 	.word	0x080098c5
 8009788:	200010f0 	.word	0x200010f0

0800978c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	@ 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800979a:	2300      	movs	r3, #0
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10b      	bne.n	80097bc <xTimerGenericCommand+0x30>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	623b      	str	r3, [r7, #32]
}
 80097b6:	bf00      	nop
 80097b8:	bf00      	nop
 80097ba:	e7fd      	b.n	80097b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097bc:	4b19      	ldr	r3, [pc, #100]	@ (8009824 <xTimerGenericCommand+0x98>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d02a      	beq.n	800981a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	dc18      	bgt.n	8009808 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097d6:	f7ff fca5 	bl	8009124 <xTaskGetSchedulerState>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d109      	bne.n	80097f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097e0:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <xTimerGenericCommand+0x98>)
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	f107 0110 	add.w	r1, r7, #16
 80097e8:	2300      	movs	r3, #0
 80097ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ec:	f7fe fa52 	bl	8007c94 <xQueueGenericSend>
 80097f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80097f2:	e012      	b.n	800981a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <xTimerGenericCommand+0x98>)
 80097f6:	6818      	ldr	r0, [r3, #0]
 80097f8:	f107 0110 	add.w	r1, r7, #16
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	f7fe fa48 	bl	8007c94 <xQueueGenericSend>
 8009804:	6278      	str	r0, [r7, #36]	@ 0x24
 8009806:	e008      	b.n	800981a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009808:	4b06      	ldr	r3, [pc, #24]	@ (8009824 <xTimerGenericCommand+0x98>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	f107 0110 	add.w	r1, r7, #16
 8009810:	2300      	movs	r3, #0
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	f7fe fb40 	bl	8007e98 <xQueueGenericSendFromISR>
 8009818:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800981c:	4618      	mov	r0, r3
 800981e:	3728      	adds	r7, #40	@ 0x28
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	200010ec 	.word	0x200010ec

08009828 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009832:	4b23      	ldr	r3, [pc, #140]	@ (80098c0 <prvProcessExpiredTimer+0x98>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe f8f3 	bl	8007a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d023      	beq.n	800989c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	699a      	ldr	r2, [r3, #24]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	18d1      	adds	r1, r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	6978      	ldr	r0, [r7, #20]
 8009862:	f000 f8d5 	bl	8009a10 <prvInsertTimerInActiveList>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d020      	beq.n	80098ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800986c:	2300      	movs	r3, #0
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	2300      	movs	r3, #0
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	2100      	movs	r1, #0
 8009876:	6978      	ldr	r0, [r7, #20]
 8009878:	f7ff ff88 	bl	800978c <xTimerGenericCommand>
 800987c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d114      	bne.n	80098ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60fb      	str	r3, [r7, #12]
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	e7fd      	b.n	8009898 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098a2:	f023 0301 	bic.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	6978      	ldr	r0, [r7, #20]
 80098b4:	4798      	blx	r3
}
 80098b6:	bf00      	nop
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	200010e4 	.word	0x200010e4

080098c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098cc:	f107 0308 	add.w	r3, r7, #8
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f859 	bl	8009988 <prvGetNextExpireTime>
 80098d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4619      	mov	r1, r3
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 f805 	bl	80098ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098e2:	f000 f8d7 	bl	8009a94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098e6:	bf00      	nop
 80098e8:	e7f0      	b.n	80098cc <prvTimerTask+0x8>
	...

080098ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098f6:	f7ff f821 	bl	800893c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098fa:	f107 0308 	add.w	r3, r7, #8
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f866 	bl	80099d0 <prvSampleTimeNow>
 8009904:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d130      	bne.n	800996e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10a      	bne.n	8009928 <prvProcessTimerOrBlockTask+0x3c>
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d806      	bhi.n	8009928 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800991a:	f7ff f81d 	bl	8008958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff ff81 	bl	8009828 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009926:	e024      	b.n	8009972 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d008      	beq.n	8009940 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800992e:	4b13      	ldr	r3, [pc, #76]	@ (800997c <prvProcessTimerOrBlockTask+0x90>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <prvProcessTimerOrBlockTask+0x50>
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <prvProcessTimerOrBlockTask+0x52>
 800993c:	2300      	movs	r3, #0
 800993e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009940:	4b0f      	ldr	r3, [pc, #60]	@ (8009980 <prvProcessTimerOrBlockTask+0x94>)
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	4619      	mov	r1, r3
 800994e:	f7fe fd5d 	bl	800840c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009952:	f7ff f801 	bl	8008958 <xTaskResumeAll>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800995c:	4b09      	ldr	r3, [pc, #36]	@ (8009984 <prvProcessTimerOrBlockTask+0x98>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	f3bf 8f6f 	isb	sy
}
 800996c:	e001      	b.n	8009972 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800996e:	f7fe fff3 	bl	8008958 <xTaskResumeAll>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200010e8 	.word	0x200010e8
 8009980:	200010ec 	.word	0x200010ec
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009990:	4b0e      	ldr	r3, [pc, #56]	@ (80099cc <prvGetNextExpireTime+0x44>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <prvGetNextExpireTime+0x16>
 800999a:	2201      	movs	r2, #1
 800999c:	e000      	b.n	80099a0 <prvGetNextExpireTime+0x18>
 800999e:	2200      	movs	r2, #0
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d105      	bne.n	80099b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099ac:	4b07      	ldr	r3, [pc, #28]	@ (80099cc <prvGetNextExpireTime+0x44>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	e001      	b.n	80099bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099bc:	68fb      	ldr	r3, [r7, #12]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	200010e4 	.word	0x200010e4

080099d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099d8:	f7ff f85c 	bl	8008a94 <xTaskGetTickCount>
 80099dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099de:	4b0b      	ldr	r3, [pc, #44]	@ (8009a0c <prvSampleTimeNow+0x3c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d205      	bcs.n	80099f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099e8:	f000 f93a 	bl	8009c60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	e002      	b.n	80099fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099fa:	4a04      	ldr	r2, [pc, #16]	@ (8009a0c <prvSampleTimeNow+0x3c>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a00:	68fb      	ldr	r3, [r7, #12]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200010f4 	.word	0x200010f4

08009a10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d812      	bhi.n	8009a5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	e01b      	b.n	8009a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a4a:	4b10      	ldr	r3, [pc, #64]	@ (8009a8c <prvInsertTimerInActiveList+0x7c>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3304      	adds	r3, #4
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7fd ffb0 	bl	80079ba <vListInsert>
 8009a5a:	e012      	b.n	8009a82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d206      	bcs.n	8009a72 <prvInsertTimerInActiveList+0x62>
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e007      	b.n	8009a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a72:	4b07      	ldr	r3, [pc, #28]	@ (8009a90 <prvInsertTimerInActiveList+0x80>)
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fd ff9c 	bl	80079ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a82:	697b      	ldr	r3, [r7, #20]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200010e8 	.word	0x200010e8
 8009a90:	200010e4 	.word	0x200010e4

08009a94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08e      	sub	sp, #56	@ 0x38
 8009a98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a9a:	e0ce      	b.n	8009c3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da19      	bge.n	8009ad6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aa2:	1d3b      	adds	r3, r7, #4
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	61fb      	str	r3, [r7, #28]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009acc:	6850      	ldr	r0, [r2, #4]
 8009ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad0:	6892      	ldr	r2, [r2, #8]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f2c0 80ae 	blt.w	8009c3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	3304      	adds	r3, #4
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fd ff9c 	bl	8007a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009af4:	463b      	mov	r3, r7
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff ff6a 	bl	80099d0 <prvSampleTimeNow>
 8009afc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b09      	cmp	r3, #9
 8009b02:	f200 8097 	bhi.w	8009c34 <prvProcessReceivedCommands+0x1a0>
 8009b06:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <prvProcessReceivedCommands+0x78>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009bab 	.word	0x08009bab
 8009b1c:	08009bbf 	.word	0x08009bbf
 8009b20:	08009c0b 	.word	0x08009c0b
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b35 	.word	0x08009b35
 8009b2c:	08009bab 	.word	0x08009bab
 8009b30:	08009bbf 	.word	0x08009bbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b3a:	f043 0301 	orr.w	r3, r3, #1
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	18d1      	adds	r1, r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b54:	f7ff ff5c 	bl	8009a10 <prvInsertTimerInActiveList>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d06c      	beq.n	8009c38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d061      	beq.n	8009c38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	441a      	add	r2, r3
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	2300      	movs	r3, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b86:	f7ff fe01 	bl	800978c <xTimerGenericCommand>
 8009b8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d152      	bne.n	8009c38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	61bb      	str	r3, [r7, #24]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bbc:	e03d      	b.n	8009c3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bc4:	f043 0301 	orr.w	r3, r3, #1
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	617b      	str	r3, [r7, #20]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	18d1      	adds	r1, r2, r3
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c04:	f7ff ff04 	bl	8009a10 <prvInsertTimerInActiveList>
					break;
 8009c08:	e017      	b.n	8009c3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c1a:	f000 fbe5 	bl	800a3e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c1e:	e00c      	b.n	8009c3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c26:	f023 0301 	bic.w	r3, r3, #1
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c32:	e002      	b.n	8009c3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c34:	bf00      	nop
 8009c36:	e000      	b.n	8009c3a <prvProcessReceivedCommands+0x1a6>
					break;
 8009c38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c3a:	4b08      	ldr	r3, [pc, #32]	@ (8009c5c <prvProcessReceivedCommands+0x1c8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	1d39      	adds	r1, r7, #4
 8009c40:	2200      	movs	r2, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe f9c6 	bl	8007fd4 <xQueueReceive>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f47f af26 	bne.w	8009a9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	3730      	adds	r7, #48	@ 0x30
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200010ec 	.word	0x200010ec

08009c60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c66:	e049      	b.n	8009cfc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c68:	4b2e      	ldr	r3, [pc, #184]	@ (8009d24 <prvSwitchTimerLists+0xc4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c72:	4b2c      	ldr	r3, [pc, #176]	@ (8009d24 <prvSwitchTimerLists+0xc4>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fd fed3 	bl	8007a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d02f      	beq.n	8009cfc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d90e      	bls.n	8009ccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cba:	4b1a      	ldr	r3, [pc, #104]	@ (8009d24 <prvSwitchTimerLists+0xc4>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f7fd fe78 	bl	80079ba <vListInsert>
 8009cca:	e017      	b.n	8009cfc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7ff fd58 	bl	800978c <xTimerGenericCommand>
 8009cdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	603b      	str	r3, [r7, #0]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cfc:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <prvSwitchTimerLists+0xc4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1b0      	bne.n	8009c68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d06:	4b07      	ldr	r3, [pc, #28]	@ (8009d24 <prvSwitchTimerLists+0xc4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d0c:	4b06      	ldr	r3, [pc, #24]	@ (8009d28 <prvSwitchTimerLists+0xc8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a04      	ldr	r2, [pc, #16]	@ (8009d24 <prvSwitchTimerLists+0xc4>)
 8009d12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d14:	4a04      	ldr	r2, [pc, #16]	@ (8009d28 <prvSwitchTimerLists+0xc8>)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	6013      	str	r3, [r2, #0]
}
 8009d1a:	bf00      	nop
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200010e4 	.word	0x200010e4
 8009d28:	200010e8 	.word	0x200010e8

08009d2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d32:	f000 f969 	bl	800a008 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d36:	4b15      	ldr	r3, [pc, #84]	@ (8009d8c <prvCheckForValidListAndQueue+0x60>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d120      	bne.n	8009d80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d3e:	4814      	ldr	r0, [pc, #80]	@ (8009d90 <prvCheckForValidListAndQueue+0x64>)
 8009d40:	f7fd fdea 	bl	8007918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d44:	4813      	ldr	r0, [pc, #76]	@ (8009d94 <prvCheckForValidListAndQueue+0x68>)
 8009d46:	f7fd fde7 	bl	8007918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d4a:	4b13      	ldr	r3, [pc, #76]	@ (8009d98 <prvCheckForValidListAndQueue+0x6c>)
 8009d4c:	4a10      	ldr	r2, [pc, #64]	@ (8009d90 <prvCheckForValidListAndQueue+0x64>)
 8009d4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d50:	4b12      	ldr	r3, [pc, #72]	@ (8009d9c <prvCheckForValidListAndQueue+0x70>)
 8009d52:	4a10      	ldr	r2, [pc, #64]	@ (8009d94 <prvCheckForValidListAndQueue+0x68>)
 8009d54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d56:	2300      	movs	r3, #0
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	4b11      	ldr	r3, [pc, #68]	@ (8009da0 <prvCheckForValidListAndQueue+0x74>)
 8009d5c:	4a11      	ldr	r2, [pc, #68]	@ (8009da4 <prvCheckForValidListAndQueue+0x78>)
 8009d5e:	2110      	movs	r1, #16
 8009d60:	200a      	movs	r0, #10
 8009d62:	f7fd fef7 	bl	8007b54 <xQueueGenericCreateStatic>
 8009d66:	4603      	mov	r3, r0
 8009d68:	4a08      	ldr	r2, [pc, #32]	@ (8009d8c <prvCheckForValidListAndQueue+0x60>)
 8009d6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d6c:	4b07      	ldr	r3, [pc, #28]	@ (8009d8c <prvCheckForValidListAndQueue+0x60>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <prvCheckForValidListAndQueue+0x60>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	490b      	ldr	r1, [pc, #44]	@ (8009da8 <prvCheckForValidListAndQueue+0x7c>)
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fb1c 	bl	80083b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d80:	f000 f974 	bl	800a06c <vPortExitCritical>
}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	200010ec 	.word	0x200010ec
 8009d90:	200010bc 	.word	0x200010bc
 8009d94:	200010d0 	.word	0x200010d0
 8009d98:	200010e4 	.word	0x200010e4
 8009d9c:	200010e8 	.word	0x200010e8
 8009da0:	20001198 	.word	0x20001198
 8009da4:	200010f8 	.word	0x200010f8
 8009da8:	0800bdf4 	.word	0x0800bdf4

08009dac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3b04      	subs	r3, #4
 8009dbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3b04      	subs	r3, #4
 8009dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f023 0201 	bic.w	r2, r3, #1
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8009e10 <pxPortInitialiseStack+0x64>)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3b14      	subs	r3, #20
 8009de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b04      	subs	r3, #4
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f06f 0202 	mvn.w	r2, #2
 8009dfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3b20      	subs	r3, #32
 8009e00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e02:	68fb      	ldr	r3, [r7, #12]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	08009e15 	.word	0x08009e15

08009e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e1e:	4b13      	ldr	r3, [pc, #76]	@ (8009e6c <prvTaskExitError+0x58>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d00b      	beq.n	8009e40 <prvTaskExitError+0x2c>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60fb      	str	r3, [r7, #12]
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	e7fd      	b.n	8009e3c <prvTaskExitError+0x28>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	60bb      	str	r3, [r7, #8]
}
 8009e52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e54:	bf00      	nop
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0fc      	beq.n	8009e56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e5c:	bf00      	nop
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	200000f0 	.word	0x200000f0

08009e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e70:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <pxCurrentTCBConst2>)
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	6808      	ldr	r0, [r1, #0]
 8009e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	f380 8809 	msr	PSP, r0
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8811 	msr	BASEPRI, r0
 8009e8a:	4770      	bx	lr
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst2>:
 8009e90:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e98:	4808      	ldr	r0, [pc, #32]	@ (8009ebc <prvPortStartFirstTask+0x24>)
 8009e9a:	6800      	ldr	r0, [r0, #0]
 8009e9c:	6800      	ldr	r0, [r0, #0]
 8009e9e:	f380 8808 	msr	MSP, r0
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8814 	msr	CONTROL, r0
 8009eaa:	b662      	cpsie	i
 8009eac:	b661      	cpsie	f
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	df00      	svc	0
 8009eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eba:	bf00      	nop
 8009ebc:	e000ed08 	.word	0xe000ed08

08009ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ec6:	4b47      	ldr	r3, [pc, #284]	@ (8009fe4 <xPortStartScheduler+0x124>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a47      	ldr	r2, [pc, #284]	@ (8009fe8 <xPortStartScheduler+0x128>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d10b      	bne.n	8009ee8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	613b      	str	r3, [r7, #16]
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	e7fd      	b.n	8009ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fe4 <xPortStartScheduler+0x124>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a3f      	ldr	r2, [pc, #252]	@ (8009fec <xPortStartScheduler+0x12c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d10b      	bne.n	8009f0a <xPortStartScheduler+0x4a>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	60fb      	str	r3, [r7, #12]
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	e7fd      	b.n	8009f06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f0a:	4b39      	ldr	r3, [pc, #228]	@ (8009ff0 <xPortStartScheduler+0x130>)
 8009f0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	22ff      	movs	r2, #255	@ 0xff
 8009f1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ff4 <xPortStartScheduler+0x134>)
 8009f30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f32:	4b31      	ldr	r3, [pc, #196]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f34:	2207      	movs	r2, #7
 8009f36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f38:	e009      	b.n	8009f4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f56:	2b80      	cmp	r3, #128	@ 0x80
 8009f58:	d0ef      	beq.n	8009f3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f5a:	4b27      	ldr	r3, [pc, #156]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1c3 0307 	rsb	r3, r3, #7
 8009f62:	2b04      	cmp	r3, #4
 8009f64:	d00b      	beq.n	8009f7e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	60bb      	str	r3, [r7, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	bf00      	nop
 8009f7c:	e7fd      	b.n	8009f7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f88:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f90:	4a19      	ldr	r2, [pc, #100]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f9c:	4b17      	ldr	r3, [pc, #92]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a16      	ldr	r2, [pc, #88]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009fa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fa8:	4b14      	ldr	r3, [pc, #80]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a13      	ldr	r2, [pc, #76]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009fae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fb4:	f000 f8da 	bl	800a16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fb8:	4b11      	ldr	r3, [pc, #68]	@ (800a000 <xPortStartScheduler+0x140>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fbe:	f000 f8f9 	bl	800a1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fc2:	4b10      	ldr	r3, [pc, #64]	@ (800a004 <xPortStartScheduler+0x144>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a0f      	ldr	r2, [pc, #60]	@ (800a004 <xPortStartScheduler+0x144>)
 8009fc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fce:	f7ff ff63 	bl	8009e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fd2:	f7fe fe29 	bl	8008c28 <vTaskSwitchContext>
	prvTaskExitError();
 8009fd6:	f7ff ff1d 	bl	8009e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	e000ed00 	.word	0xe000ed00
 8009fe8:	410fc271 	.word	0x410fc271
 8009fec:	410fc270 	.word	0x410fc270
 8009ff0:	e000e400 	.word	0xe000e400
 8009ff4:	200011e8 	.word	0x200011e8
 8009ff8:	200011ec 	.word	0x200011ec
 8009ffc:	e000ed20 	.word	0xe000ed20
 800a000:	200000f0 	.word	0x200000f0
 800a004:	e000ef34 	.word	0xe000ef34

0800a008 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a022:	4b10      	ldr	r3, [pc, #64]	@ (800a064 <vPortEnterCritical+0x5c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	4a0e      	ldr	r2, [pc, #56]	@ (800a064 <vPortEnterCritical+0x5c>)
 800a02a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a02c:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <vPortEnterCritical+0x5c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d110      	bne.n	800a056 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a034:	4b0c      	ldr	r3, [pc, #48]	@ (800a068 <vPortEnterCritical+0x60>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <vPortEnterCritical+0x4e>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	603b      	str	r3, [r7, #0]
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	e7fd      	b.n	800a052 <vPortEnterCritical+0x4a>
	}
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	200000f0 	.word	0x200000f0
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a072:	4b12      	ldr	r3, [pc, #72]	@ (800a0bc <vPortExitCritical+0x50>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <vPortExitCritical+0x26>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	607b      	str	r3, [r7, #4]
}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	e7fd      	b.n	800a08e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <vPortExitCritical+0x50>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3b01      	subs	r3, #1
 800a098:	4a08      	ldr	r2, [pc, #32]	@ (800a0bc <vPortExitCritical+0x50>)
 800a09a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a09c:	4b07      	ldr	r3, [pc, #28]	@ (800a0bc <vPortExitCritical+0x50>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d105      	bne.n	800a0b0 <vPortExitCritical+0x44>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	f383 8811 	msr	BASEPRI, r3
}
 800a0ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	200000f0 	.word	0x200000f0

0800a0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0c0:	f3ef 8009 	mrs	r0, PSP
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	4b15      	ldr	r3, [pc, #84]	@ (800a120 <pxCurrentTCBConst>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	f01e 0f10 	tst.w	lr, #16
 800a0d0:	bf08      	it	eq
 800a0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	6010      	str	r0, [r2, #0]
 800a0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0e4:	f380 8811 	msr	BASEPRI, r0
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f7fe fd9a 	bl	8008c28 <vTaskSwitchContext>
 800a0f4:	f04f 0000 	mov.w	r0, #0
 800a0f8:	f380 8811 	msr	BASEPRI, r0
 800a0fc:	bc09      	pop	{r0, r3}
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	6808      	ldr	r0, [r1, #0]
 800a102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a106:	f01e 0f10 	tst.w	lr, #16
 800a10a:	bf08      	it	eq
 800a10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a110:	f380 8809 	msr	PSP, r0
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w

0800a120 <pxCurrentTCBConst>:
 800a120:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop

0800a128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	607b      	str	r3, [r7, #4]
}
 800a140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a142:	f7fe fcb7 	bl	8008ab4 <xTaskIncrementTick>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a14c:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <xPortSysTickHandler+0x40>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	f383 8811 	msr	BASEPRI, r3
}
 800a15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a170:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a0 <vPortSetupTimerInterrupt+0x34>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a176:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <vPortSetupTimerInterrupt+0x38>)
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <vPortSetupTimerInterrupt+0x3c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a0a      	ldr	r2, [pc, #40]	@ (800a1ac <vPortSetupTimerInterrupt+0x40>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	099b      	lsrs	r3, r3, #6
 800a188:	4a09      	ldr	r2, [pc, #36]	@ (800a1b0 <vPortSetupTimerInterrupt+0x44>)
 800a18a:	3b01      	subs	r3, #1
 800a18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a18e:	4b04      	ldr	r3, [pc, #16]	@ (800a1a0 <vPortSetupTimerInterrupt+0x34>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	e000e010 	.word	0xe000e010
 800a1a4:	e000e018 	.word	0xe000e018
 800a1a8:	200000d8 	.word	0x200000d8
 800a1ac:	10624dd3 	.word	0x10624dd3
 800a1b0:	e000e014 	.word	0xe000e014

0800a1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1c4 <vPortEnableVFP+0x10>
 800a1b8:	6801      	ldr	r1, [r0, #0]
 800a1ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1be:	6001      	str	r1, [r0, #0]
 800a1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1c2:	bf00      	nop
 800a1c4:	e000ed88 	.word	0xe000ed88

0800a1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ce:	f3ef 8305 	mrs	r3, IPSR
 800a1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d915      	bls.n	800a206 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1da:	4a18      	ldr	r2, [pc, #96]	@ (800a23c <vPortValidateInterruptPriority+0x74>)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1e4:	4b16      	ldr	r3, [pc, #88]	@ (800a240 <vPortValidateInterruptPriority+0x78>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	7afa      	ldrb	r2, [r7, #11]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d20b      	bcs.n	800a206 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	607b      	str	r3, [r7, #4]
}
 800a200:	bf00      	nop
 800a202:	bf00      	nop
 800a204:	e7fd      	b.n	800a202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a206:	4b0f      	ldr	r3, [pc, #60]	@ (800a244 <vPortValidateInterruptPriority+0x7c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a20e:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <vPortValidateInterruptPriority+0x80>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d90b      	bls.n	800a22e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	603b      	str	r3, [r7, #0]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <vPortValidateInterruptPriority+0x62>
	}
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	e000e3f0 	.word	0xe000e3f0
 800a240:	200011e8 	.word	0x200011e8
 800a244:	e000ed0c 	.word	0xe000ed0c
 800a248:	200011ec 	.word	0x200011ec

0800a24c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	@ 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a258:	f7fe fb70 	bl	800893c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a25c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3d0 <pvPortMalloc+0x184>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a264:	f000 f924 	bl	800a4b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a268:	4b5a      	ldr	r3, [pc, #360]	@ (800a3d4 <pvPortMalloc+0x188>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4013      	ands	r3, r2
 800a270:	2b00      	cmp	r3, #0
 800a272:	f040 8095 	bne.w	800a3a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01e      	beq.n	800a2ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a27c:	2208      	movs	r2, #8
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4413      	add	r3, r2
 800a282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d015      	beq.n	800a2ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f023 0307 	bic.w	r3, r3, #7
 800a294:	3308      	adds	r3, #8
 800a296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <pvPortMalloc+0x6e>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	617b      	str	r3, [r7, #20]
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	e7fd      	b.n	800a2b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d06f      	beq.n	800a3a0 <pvPortMalloc+0x154>
 800a2c0:	4b45      	ldr	r3, [pc, #276]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d86a      	bhi.n	800a3a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2ca:	4b44      	ldr	r3, [pc, #272]	@ (800a3dc <pvPortMalloc+0x190>)
 800a2cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2ce:	4b43      	ldr	r3, [pc, #268]	@ (800a3dc <pvPortMalloc+0x190>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2d4:	e004      	b.n	800a2e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d903      	bls.n	800a2f2 <pvPortMalloc+0xa6>
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f1      	bne.n	800a2d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2f2:	4b37      	ldr	r3, [pc, #220]	@ (800a3d0 <pvPortMalloc+0x184>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d051      	beq.n	800a3a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2208      	movs	r2, #8
 800a302:	4413      	add	r3, r2
 800a304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	1ad2      	subs	r2, r2, r3
 800a316:	2308      	movs	r3, #8
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d920      	bls.n	800a360 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a31e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4413      	add	r3, r2
 800a324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	f003 0307 	and.w	r3, r3, #7
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <pvPortMalloc+0xfc>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	613b      	str	r3, [r7, #16]
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a35a:	69b8      	ldr	r0, [r7, #24]
 800a35c:	f000 f90a 	bl	800a574 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a360:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a36c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a36e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e0 <pvPortMalloc+0x194>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d203      	bcs.n	800a382 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a37a:	4b17      	ldr	r3, [pc, #92]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a18      	ldr	r2, [pc, #96]	@ (800a3e0 <pvPortMalloc+0x194>)
 800a380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	4b13      	ldr	r3, [pc, #76]	@ (800a3d4 <pvPortMalloc+0x188>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	431a      	orrs	r2, r3
 800a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a396:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <pvPortMalloc+0x198>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	4a11      	ldr	r2, [pc, #68]	@ (800a3e4 <pvPortMalloc+0x198>)
 800a39e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3a0:	f7fe fada 	bl	8008958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00b      	beq.n	800a3c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	bf00      	nop
 800a3c4:	e7fd      	b.n	800a3c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3728      	adds	r7, #40	@ 0x28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20002968 	.word	0x20002968
 800a3d4:	2000297c 	.word	0x2000297c
 800a3d8:	2000296c 	.word	0x2000296c
 800a3dc:	20002960 	.word	0x20002960
 800a3e0:	20002970 	.word	0x20002970
 800a3e4:	20002974 	.word	0x20002974

0800a3e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d04f      	beq.n	800a49a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	425b      	negs	r3, r3
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4413      	add	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b25      	ldr	r3, [pc, #148]	@ (800a4a4 <vPortFree+0xbc>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10b      	bne.n	800a42e <vPortFree+0x46>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60fb      	str	r3, [r7, #12]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00b      	beq.n	800a44e <vPortFree+0x66>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60bb      	str	r3, [r7, #8]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	4b14      	ldr	r3, [pc, #80]	@ (800a4a4 <vPortFree+0xbc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4013      	ands	r3, r2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01e      	beq.n	800a49a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11a      	bne.n	800a49a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a4 <vPortFree+0xbc>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	43db      	mvns	r3, r3
 800a46e:	401a      	ands	r2, r3
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a474:	f7fe fa62 	bl	800893c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <vPortFree+0xc0>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4413      	add	r3, r2
 800a482:	4a09      	ldr	r2, [pc, #36]	@ (800a4a8 <vPortFree+0xc0>)
 800a484:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a486:	6938      	ldr	r0, [r7, #16]
 800a488:	f000 f874 	bl	800a574 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a48c:	4b07      	ldr	r3, [pc, #28]	@ (800a4ac <vPortFree+0xc4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3301      	adds	r3, #1
 800a492:	4a06      	ldr	r2, [pc, #24]	@ (800a4ac <vPortFree+0xc4>)
 800a494:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a496:	f7fe fa5f 	bl	8008958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a49a:	bf00      	nop
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2000297c 	.word	0x2000297c
 800a4a8:	2000296c 	.word	0x2000296c
 800a4ac:	20002978 	.word	0x20002978

0800a4b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4b6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a4ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4bc:	4b27      	ldr	r3, [pc, #156]	@ (800a55c <prvHeapInit+0xac>)
 800a4be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00c      	beq.n	800a4e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3307      	adds	r3, #7
 800a4ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0307 	bic.w	r3, r3, #7
 800a4d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	4a1f      	ldr	r2, [pc, #124]	@ (800a55c <prvHeapInit+0xac>)
 800a4e0:	4413      	add	r3, r2
 800a4e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a560 <prvHeapInit+0xb0>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a560 <prvHeapInit+0xb0>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1a9b      	subs	r3, r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0307 	bic.w	r3, r3, #7
 800a50a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4a15      	ldr	r2, [pc, #84]	@ (800a564 <prvHeapInit+0xb4>)
 800a510:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a512:	4b14      	ldr	r3, [pc, #80]	@ (800a564 <prvHeapInit+0xb4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2200      	movs	r2, #0
 800a518:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a51a:	4b12      	ldr	r3, [pc, #72]	@ (800a564 <prvHeapInit+0xb4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	1ad2      	subs	r2, r2, r3
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a530:	4b0c      	ldr	r3, [pc, #48]	@ (800a564 <prvHeapInit+0xb4>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4a0a      	ldr	r2, [pc, #40]	@ (800a568 <prvHeapInit+0xb8>)
 800a53e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4a09      	ldr	r2, [pc, #36]	@ (800a56c <prvHeapInit+0xbc>)
 800a546:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a548:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <prvHeapInit+0xc0>)
 800a54a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a54e:	601a      	str	r2, [r3, #0]
}
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	200011f0 	.word	0x200011f0
 800a560:	20002960 	.word	0x20002960
 800a564:	20002968 	.word	0x20002968
 800a568:	20002970 	.word	0x20002970
 800a56c:	2000296c 	.word	0x2000296c
 800a570:	2000297c 	.word	0x2000297c

0800a574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a57c:	4b28      	ldr	r3, [pc, #160]	@ (800a620 <prvInsertBlockIntoFreeList+0xac>)
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	e002      	b.n	800a588 <prvInsertBlockIntoFreeList+0x14>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d8f7      	bhi.n	800a582 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	4413      	add	r3, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d108      	bne.n	800a5b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d118      	bne.n	800a5fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	4b15      	ldr	r3, [pc, #84]	@ (800a624 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d00d      	beq.n	800a5f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	441a      	add	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	e008      	b.n	800a604 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a624 <prvInsertBlockIntoFreeList+0xb0>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	e003      	b.n	800a604 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d002      	beq.n	800a612 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a612:	bf00      	nop
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	20002960 	.word	0x20002960
 800a624:	20002968 	.word	0x20002968

0800a628 <calloc>:
 800a628:	4b02      	ldr	r3, [pc, #8]	@ (800a634 <calloc+0xc>)
 800a62a:	460a      	mov	r2, r1
 800a62c:	4601      	mov	r1, r0
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	f000 b802 	b.w	800a638 <_calloc_r>
 800a634:	20000100 	.word	0x20000100

0800a638 <_calloc_r>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	fba1 5402 	umull	r5, r4, r1, r2
 800a63e:	b93c      	cbnz	r4, 800a650 <_calloc_r+0x18>
 800a640:	4629      	mov	r1, r5
 800a642:	f000 f837 	bl	800a6b4 <_malloc_r>
 800a646:	4606      	mov	r6, r0
 800a648:	b928      	cbnz	r0, 800a656 <_calloc_r+0x1e>
 800a64a:	2600      	movs	r6, #0
 800a64c:	4630      	mov	r0, r6
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	220c      	movs	r2, #12
 800a652:	6002      	str	r2, [r0, #0]
 800a654:	e7f9      	b.n	800a64a <_calloc_r+0x12>
 800a656:	462a      	mov	r2, r5
 800a658:	4621      	mov	r1, r4
 800a65a:	f000 fa60 	bl	800ab1e <memset>
 800a65e:	e7f5      	b.n	800a64c <_calloc_r+0x14>

0800a660 <malloc>:
 800a660:	4b02      	ldr	r3, [pc, #8]	@ (800a66c <malloc+0xc>)
 800a662:	4601      	mov	r1, r0
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	f000 b825 	b.w	800a6b4 <_malloc_r>
 800a66a:	bf00      	nop
 800a66c:	20000100 	.word	0x20000100

0800a670 <sbrk_aligned>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	4e0f      	ldr	r6, [pc, #60]	@ (800a6b0 <sbrk_aligned+0x40>)
 800a674:	460c      	mov	r4, r1
 800a676:	6831      	ldr	r1, [r6, #0]
 800a678:	4605      	mov	r5, r0
 800a67a:	b911      	cbnz	r1, 800a682 <sbrk_aligned+0x12>
 800a67c:	f000 fb3e 	bl	800acfc <_sbrk_r>
 800a680:	6030      	str	r0, [r6, #0]
 800a682:	4621      	mov	r1, r4
 800a684:	4628      	mov	r0, r5
 800a686:	f000 fb39 	bl	800acfc <_sbrk_r>
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	d103      	bne.n	800a696 <sbrk_aligned+0x26>
 800a68e:	f04f 34ff 	mov.w	r4, #4294967295
 800a692:	4620      	mov	r0, r4
 800a694:	bd70      	pop	{r4, r5, r6, pc}
 800a696:	1cc4      	adds	r4, r0, #3
 800a698:	f024 0403 	bic.w	r4, r4, #3
 800a69c:	42a0      	cmp	r0, r4
 800a69e:	d0f8      	beq.n	800a692 <sbrk_aligned+0x22>
 800a6a0:	1a21      	subs	r1, r4, r0
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 fb2a 	bl	800acfc <_sbrk_r>
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	d1f2      	bne.n	800a692 <sbrk_aligned+0x22>
 800a6ac:	e7ef      	b.n	800a68e <sbrk_aligned+0x1e>
 800a6ae:	bf00      	nop
 800a6b0:	20002980 	.word	0x20002980

0800a6b4 <_malloc_r>:
 800a6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b8:	1ccd      	adds	r5, r1, #3
 800a6ba:	f025 0503 	bic.w	r5, r5, #3
 800a6be:	3508      	adds	r5, #8
 800a6c0:	2d0c      	cmp	r5, #12
 800a6c2:	bf38      	it	cc
 800a6c4:	250c      	movcc	r5, #12
 800a6c6:	2d00      	cmp	r5, #0
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	db01      	blt.n	800a6d0 <_malloc_r+0x1c>
 800a6cc:	42a9      	cmp	r1, r5
 800a6ce:	d904      	bls.n	800a6da <_malloc_r+0x26>
 800a6d0:	230c      	movs	r3, #12
 800a6d2:	6033      	str	r3, [r6, #0]
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7b0 <_malloc_r+0xfc>
 800a6de:	f000 f869 	bl	800a7b4 <__malloc_lock>
 800a6e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e6:	461c      	mov	r4, r3
 800a6e8:	bb44      	cbnz	r4, 800a73c <_malloc_r+0x88>
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff ffbf 	bl	800a670 <sbrk_aligned>
 800a6f2:	1c43      	adds	r3, r0, #1
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	d158      	bne.n	800a7aa <_malloc_r+0xf6>
 800a6f8:	f8d8 4000 	ldr.w	r4, [r8]
 800a6fc:	4627      	mov	r7, r4
 800a6fe:	2f00      	cmp	r7, #0
 800a700:	d143      	bne.n	800a78a <_malloc_r+0xd6>
 800a702:	2c00      	cmp	r4, #0
 800a704:	d04b      	beq.n	800a79e <_malloc_r+0xea>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	4639      	mov	r1, r7
 800a70a:	4630      	mov	r0, r6
 800a70c:	eb04 0903 	add.w	r9, r4, r3
 800a710:	f000 faf4 	bl	800acfc <_sbrk_r>
 800a714:	4581      	cmp	r9, r0
 800a716:	d142      	bne.n	800a79e <_malloc_r+0xea>
 800a718:	6821      	ldr	r1, [r4, #0]
 800a71a:	1a6d      	subs	r5, r5, r1
 800a71c:	4629      	mov	r1, r5
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff ffa6 	bl	800a670 <sbrk_aligned>
 800a724:	3001      	adds	r0, #1
 800a726:	d03a      	beq.n	800a79e <_malloc_r+0xea>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	442b      	add	r3, r5
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	f8d8 3000 	ldr.w	r3, [r8]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	bb62      	cbnz	r2, 800a790 <_malloc_r+0xdc>
 800a736:	f8c8 7000 	str.w	r7, [r8]
 800a73a:	e00f      	b.n	800a75c <_malloc_r+0xa8>
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	1b52      	subs	r2, r2, r5
 800a740:	d420      	bmi.n	800a784 <_malloc_r+0xd0>
 800a742:	2a0b      	cmp	r2, #11
 800a744:	d917      	bls.n	800a776 <_malloc_r+0xc2>
 800a746:	1961      	adds	r1, r4, r5
 800a748:	42a3      	cmp	r3, r4
 800a74a:	6025      	str	r5, [r4, #0]
 800a74c:	bf18      	it	ne
 800a74e:	6059      	strne	r1, [r3, #4]
 800a750:	6863      	ldr	r3, [r4, #4]
 800a752:	bf08      	it	eq
 800a754:	f8c8 1000 	streq.w	r1, [r8]
 800a758:	5162      	str	r2, [r4, r5]
 800a75a:	604b      	str	r3, [r1, #4]
 800a75c:	4630      	mov	r0, r6
 800a75e:	f000 f82f 	bl	800a7c0 <__malloc_unlock>
 800a762:	f104 000b 	add.w	r0, r4, #11
 800a766:	1d23      	adds	r3, r4, #4
 800a768:	f020 0007 	bic.w	r0, r0, #7
 800a76c:	1ac2      	subs	r2, r0, r3
 800a76e:	bf1c      	itt	ne
 800a770:	1a1b      	subne	r3, r3, r0
 800a772:	50a3      	strne	r3, [r4, r2]
 800a774:	e7af      	b.n	800a6d6 <_malloc_r+0x22>
 800a776:	6862      	ldr	r2, [r4, #4]
 800a778:	42a3      	cmp	r3, r4
 800a77a:	bf0c      	ite	eq
 800a77c:	f8c8 2000 	streq.w	r2, [r8]
 800a780:	605a      	strne	r2, [r3, #4]
 800a782:	e7eb      	b.n	800a75c <_malloc_r+0xa8>
 800a784:	4623      	mov	r3, r4
 800a786:	6864      	ldr	r4, [r4, #4]
 800a788:	e7ae      	b.n	800a6e8 <_malloc_r+0x34>
 800a78a:	463c      	mov	r4, r7
 800a78c:	687f      	ldr	r7, [r7, #4]
 800a78e:	e7b6      	b.n	800a6fe <_malloc_r+0x4a>
 800a790:	461a      	mov	r2, r3
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	42a3      	cmp	r3, r4
 800a796:	d1fb      	bne.n	800a790 <_malloc_r+0xdc>
 800a798:	2300      	movs	r3, #0
 800a79a:	6053      	str	r3, [r2, #4]
 800a79c:	e7de      	b.n	800a75c <_malloc_r+0xa8>
 800a79e:	230c      	movs	r3, #12
 800a7a0:	6033      	str	r3, [r6, #0]
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f000 f80c 	bl	800a7c0 <__malloc_unlock>
 800a7a8:	e794      	b.n	800a6d4 <_malloc_r+0x20>
 800a7aa:	6005      	str	r5, [r0, #0]
 800a7ac:	e7d6      	b.n	800a75c <_malloc_r+0xa8>
 800a7ae:	bf00      	nop
 800a7b0:	20002984 	.word	0x20002984

0800a7b4 <__malloc_lock>:
 800a7b4:	4801      	ldr	r0, [pc, #4]	@ (800a7bc <__malloc_lock+0x8>)
 800a7b6:	f000 baee 	b.w	800ad96 <__retarget_lock_acquire_recursive>
 800a7ba:	bf00      	nop
 800a7bc:	20002ac8 	.word	0x20002ac8

0800a7c0 <__malloc_unlock>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	@ (800a7c8 <__malloc_unlock+0x8>)
 800a7c2:	f000 bae9 	b.w	800ad98 <__retarget_lock_release_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20002ac8 	.word	0x20002ac8

0800a7cc <_strtol_l.constprop.0>:
 800a7cc:	2b24      	cmp	r3, #36	@ 0x24
 800a7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d2:	4686      	mov	lr, r0
 800a7d4:	4690      	mov	r8, r2
 800a7d6:	d801      	bhi.n	800a7dc <_strtol_l.constprop.0+0x10>
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d106      	bne.n	800a7ea <_strtol_l.constprop.0+0x1e>
 800a7dc:	f000 fab0 	bl	800ad40 <__errno>
 800a7e0:	2316      	movs	r3, #22
 800a7e2:	6003      	str	r3, [r0, #0]
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ea:	4834      	ldr	r0, [pc, #208]	@ (800a8bc <_strtol_l.constprop.0+0xf0>)
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f4:	5d06      	ldrb	r6, [r0, r4]
 800a7f6:	f016 0608 	ands.w	r6, r6, #8
 800a7fa:	d1f8      	bne.n	800a7ee <_strtol_l.constprop.0+0x22>
 800a7fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a7fe:	d12d      	bne.n	800a85c <_strtol_l.constprop.0+0x90>
 800a800:	782c      	ldrb	r4, [r5, #0]
 800a802:	2601      	movs	r6, #1
 800a804:	1c95      	adds	r5, r2, #2
 800a806:	f033 0210 	bics.w	r2, r3, #16
 800a80a:	d109      	bne.n	800a820 <_strtol_l.constprop.0+0x54>
 800a80c:	2c30      	cmp	r4, #48	@ 0x30
 800a80e:	d12a      	bne.n	800a866 <_strtol_l.constprop.0+0x9a>
 800a810:	782a      	ldrb	r2, [r5, #0]
 800a812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a816:	2a58      	cmp	r2, #88	@ 0x58
 800a818:	d125      	bne.n	800a866 <_strtol_l.constprop.0+0x9a>
 800a81a:	786c      	ldrb	r4, [r5, #1]
 800a81c:	2310      	movs	r3, #16
 800a81e:	3502      	adds	r5, #2
 800a820:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a824:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a828:	2200      	movs	r2, #0
 800a82a:	fbbc f9f3 	udiv	r9, ip, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	fb03 ca19 	mls	sl, r3, r9, ip
 800a834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a838:	2f09      	cmp	r7, #9
 800a83a:	d81b      	bhi.n	800a874 <_strtol_l.constprop.0+0xa8>
 800a83c:	463c      	mov	r4, r7
 800a83e:	42a3      	cmp	r3, r4
 800a840:	dd27      	ble.n	800a892 <_strtol_l.constprop.0+0xc6>
 800a842:	1c57      	adds	r7, r2, #1
 800a844:	d007      	beq.n	800a856 <_strtol_l.constprop.0+0x8a>
 800a846:	4581      	cmp	r9, r0
 800a848:	d320      	bcc.n	800a88c <_strtol_l.constprop.0+0xc0>
 800a84a:	d101      	bne.n	800a850 <_strtol_l.constprop.0+0x84>
 800a84c:	45a2      	cmp	sl, r4
 800a84e:	db1d      	blt.n	800a88c <_strtol_l.constprop.0+0xc0>
 800a850:	fb00 4003 	mla	r0, r0, r3, r4
 800a854:	2201      	movs	r2, #1
 800a856:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a85a:	e7eb      	b.n	800a834 <_strtol_l.constprop.0+0x68>
 800a85c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a85e:	bf04      	itt	eq
 800a860:	782c      	ldrbeq	r4, [r5, #0]
 800a862:	1c95      	addeq	r5, r2, #2
 800a864:	e7cf      	b.n	800a806 <_strtol_l.constprop.0+0x3a>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1da      	bne.n	800a820 <_strtol_l.constprop.0+0x54>
 800a86a:	2c30      	cmp	r4, #48	@ 0x30
 800a86c:	bf0c      	ite	eq
 800a86e:	2308      	moveq	r3, #8
 800a870:	230a      	movne	r3, #10
 800a872:	e7d5      	b.n	800a820 <_strtol_l.constprop.0+0x54>
 800a874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a878:	2f19      	cmp	r7, #25
 800a87a:	d801      	bhi.n	800a880 <_strtol_l.constprop.0+0xb4>
 800a87c:	3c37      	subs	r4, #55	@ 0x37
 800a87e:	e7de      	b.n	800a83e <_strtol_l.constprop.0+0x72>
 800a880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a884:	2f19      	cmp	r7, #25
 800a886:	d804      	bhi.n	800a892 <_strtol_l.constprop.0+0xc6>
 800a888:	3c57      	subs	r4, #87	@ 0x57
 800a88a:	e7d8      	b.n	800a83e <_strtol_l.constprop.0+0x72>
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	e7e1      	b.n	800a856 <_strtol_l.constprop.0+0x8a>
 800a892:	1c53      	adds	r3, r2, #1
 800a894:	d108      	bne.n	800a8a8 <_strtol_l.constprop.0+0xdc>
 800a896:	2322      	movs	r3, #34	@ 0x22
 800a898:	f8ce 3000 	str.w	r3, [lr]
 800a89c:	4660      	mov	r0, ip
 800a89e:	f1b8 0f00 	cmp.w	r8, #0
 800a8a2:	d0a0      	beq.n	800a7e6 <_strtol_l.constprop.0+0x1a>
 800a8a4:	1e69      	subs	r1, r5, #1
 800a8a6:	e006      	b.n	800a8b6 <_strtol_l.constprop.0+0xea>
 800a8a8:	b106      	cbz	r6, 800a8ac <_strtol_l.constprop.0+0xe0>
 800a8aa:	4240      	negs	r0, r0
 800a8ac:	f1b8 0f00 	cmp.w	r8, #0
 800a8b0:	d099      	beq.n	800a7e6 <_strtol_l.constprop.0+0x1a>
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	d1f6      	bne.n	800a8a4 <_strtol_l.constprop.0+0xd8>
 800a8b6:	f8c8 1000 	str.w	r1, [r8]
 800a8ba:	e794      	b.n	800a7e6 <_strtol_l.constprop.0+0x1a>
 800a8bc:	0800bed5 	.word	0x0800bed5

0800a8c0 <strtol>:
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	460a      	mov	r2, r1
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	4802      	ldr	r0, [pc, #8]	@ (800a8d0 <strtol+0x10>)
 800a8c8:	6800      	ldr	r0, [r0, #0]
 800a8ca:	f7ff bf7f 	b.w	800a7cc <_strtol_l.constprop.0>
 800a8ce:	bf00      	nop
 800a8d0:	20000100 	.word	0x20000100

0800a8d4 <std>:
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	4604      	mov	r4, r0
 800a8da:	e9c0 3300 	strd	r3, r3, [r0]
 800a8de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8e2:	6083      	str	r3, [r0, #8]
 800a8e4:	8181      	strh	r1, [r0, #12]
 800a8e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8e8:	81c2      	strh	r2, [r0, #14]
 800a8ea:	6183      	str	r3, [r0, #24]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	2208      	movs	r2, #8
 800a8f0:	305c      	adds	r0, #92	@ 0x5c
 800a8f2:	f000 f914 	bl	800ab1e <memset>
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a92c <std+0x58>)
 800a8f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a930 <std+0x5c>)
 800a8fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <std+0x60>)
 800a900:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a902:	4b0d      	ldr	r3, [pc, #52]	@ (800a938 <std+0x64>)
 800a904:	6323      	str	r3, [r4, #48]	@ 0x30
 800a906:	4b0d      	ldr	r3, [pc, #52]	@ (800a93c <std+0x68>)
 800a908:	6224      	str	r4, [r4, #32]
 800a90a:	429c      	cmp	r4, r3
 800a90c:	d006      	beq.n	800a91c <std+0x48>
 800a90e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a912:	4294      	cmp	r4, r2
 800a914:	d002      	beq.n	800a91c <std+0x48>
 800a916:	33d0      	adds	r3, #208	@ 0xd0
 800a918:	429c      	cmp	r4, r3
 800a91a:	d105      	bne.n	800a928 <std+0x54>
 800a91c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a924:	f000 ba36 	b.w	800ad94 <__retarget_lock_init_recursive>
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	bf00      	nop
 800a92c:	0800aa99 	.word	0x0800aa99
 800a930:	0800aabb 	.word	0x0800aabb
 800a934:	0800aaf3 	.word	0x0800aaf3
 800a938:	0800ab17 	.word	0x0800ab17
 800a93c:	20002988 	.word	0x20002988

0800a940 <stdio_exit_handler>:
 800a940:	4a02      	ldr	r2, [pc, #8]	@ (800a94c <stdio_exit_handler+0xc>)
 800a942:	4903      	ldr	r1, [pc, #12]	@ (800a950 <stdio_exit_handler+0x10>)
 800a944:	4803      	ldr	r0, [pc, #12]	@ (800a954 <stdio_exit_handler+0x14>)
 800a946:	f000 b869 	b.w	800aa1c <_fwalk_sglue>
 800a94a:	bf00      	nop
 800a94c:	200000f4 	.word	0x200000f4
 800a950:	0800b55d 	.word	0x0800b55d
 800a954:	20000104 	.word	0x20000104

0800a958 <cleanup_stdio>:
 800a958:	6841      	ldr	r1, [r0, #4]
 800a95a:	4b0c      	ldr	r3, [pc, #48]	@ (800a98c <cleanup_stdio+0x34>)
 800a95c:	4299      	cmp	r1, r3
 800a95e:	b510      	push	{r4, lr}
 800a960:	4604      	mov	r4, r0
 800a962:	d001      	beq.n	800a968 <cleanup_stdio+0x10>
 800a964:	f000 fdfa 	bl	800b55c <_fflush_r>
 800a968:	68a1      	ldr	r1, [r4, #8]
 800a96a:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <cleanup_stdio+0x38>)
 800a96c:	4299      	cmp	r1, r3
 800a96e:	d002      	beq.n	800a976 <cleanup_stdio+0x1e>
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fdf3 	bl	800b55c <_fflush_r>
 800a976:	68e1      	ldr	r1, [r4, #12]
 800a978:	4b06      	ldr	r3, [pc, #24]	@ (800a994 <cleanup_stdio+0x3c>)
 800a97a:	4299      	cmp	r1, r3
 800a97c:	d004      	beq.n	800a988 <cleanup_stdio+0x30>
 800a97e:	4620      	mov	r0, r4
 800a980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a984:	f000 bdea 	b.w	800b55c <_fflush_r>
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	bf00      	nop
 800a98c:	20002988 	.word	0x20002988
 800a990:	200029f0 	.word	0x200029f0
 800a994:	20002a58 	.word	0x20002a58

0800a998 <global_stdio_init.part.0>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c8 <global_stdio_init.part.0+0x30>)
 800a99c:	4c0b      	ldr	r4, [pc, #44]	@ (800a9cc <global_stdio_init.part.0+0x34>)
 800a99e:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d0 <global_stdio_init.part.0+0x38>)
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2104      	movs	r1, #4
 800a9a8:	f7ff ff94 	bl	800a8d4 <std>
 800a9ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	2109      	movs	r1, #9
 800a9b4:	f7ff ff8e 	bl	800a8d4 <std>
 800a9b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9bc:	2202      	movs	r2, #2
 800a9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c2:	2112      	movs	r1, #18
 800a9c4:	f7ff bf86 	b.w	800a8d4 <std>
 800a9c8:	20002ac0 	.word	0x20002ac0
 800a9cc:	20002988 	.word	0x20002988
 800a9d0:	0800a941 	.word	0x0800a941

0800a9d4 <__sfp_lock_acquire>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	@ (800a9dc <__sfp_lock_acquire+0x8>)
 800a9d6:	f000 b9de 	b.w	800ad96 <__retarget_lock_acquire_recursive>
 800a9da:	bf00      	nop
 800a9dc:	20002ac9 	.word	0x20002ac9

0800a9e0 <__sfp_lock_release>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	@ (800a9e8 <__sfp_lock_release+0x8>)
 800a9e2:	f000 b9d9 	b.w	800ad98 <__retarget_lock_release_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	20002ac9 	.word	0x20002ac9

0800a9ec <__sinit>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	f7ff fff0 	bl	800a9d4 <__sfp_lock_acquire>
 800a9f4:	6a23      	ldr	r3, [r4, #32]
 800a9f6:	b11b      	cbz	r3, 800aa00 <__sinit+0x14>
 800a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9fc:	f7ff bff0 	b.w	800a9e0 <__sfp_lock_release>
 800aa00:	4b04      	ldr	r3, [pc, #16]	@ (800aa14 <__sinit+0x28>)
 800aa02:	6223      	str	r3, [r4, #32]
 800aa04:	4b04      	ldr	r3, [pc, #16]	@ (800aa18 <__sinit+0x2c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f5      	bne.n	800a9f8 <__sinit+0xc>
 800aa0c:	f7ff ffc4 	bl	800a998 <global_stdio_init.part.0>
 800aa10:	e7f2      	b.n	800a9f8 <__sinit+0xc>
 800aa12:	bf00      	nop
 800aa14:	0800a959 	.word	0x0800a959
 800aa18:	20002ac0 	.word	0x20002ac0

0800aa1c <_fwalk_sglue>:
 800aa1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa20:	4607      	mov	r7, r0
 800aa22:	4688      	mov	r8, r1
 800aa24:	4614      	mov	r4, r2
 800aa26:	2600      	movs	r6, #0
 800aa28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa2c:	f1b9 0901 	subs.w	r9, r9, #1
 800aa30:	d505      	bpl.n	800aa3e <_fwalk_sglue+0x22>
 800aa32:	6824      	ldr	r4, [r4, #0]
 800aa34:	2c00      	cmp	r4, #0
 800aa36:	d1f7      	bne.n	800aa28 <_fwalk_sglue+0xc>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d907      	bls.n	800aa54 <_fwalk_sglue+0x38>
 800aa44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	d003      	beq.n	800aa54 <_fwalk_sglue+0x38>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4638      	mov	r0, r7
 800aa50:	47c0      	blx	r8
 800aa52:	4306      	orrs	r6, r0
 800aa54:	3568      	adds	r5, #104	@ 0x68
 800aa56:	e7e9      	b.n	800aa2c <_fwalk_sglue+0x10>

0800aa58 <siprintf>:
 800aa58:	b40e      	push	{r1, r2, r3}
 800aa5a:	b500      	push	{lr}
 800aa5c:	b09c      	sub	sp, #112	@ 0x70
 800aa5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800aa60:	9002      	str	r0, [sp, #8]
 800aa62:	9006      	str	r0, [sp, #24]
 800aa64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa68:	4809      	ldr	r0, [pc, #36]	@ (800aa90 <siprintf+0x38>)
 800aa6a:	9107      	str	r1, [sp, #28]
 800aa6c:	9104      	str	r1, [sp, #16]
 800aa6e:	4909      	ldr	r1, [pc, #36]	@ (800aa94 <siprintf+0x3c>)
 800aa70:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa74:	9105      	str	r1, [sp, #20]
 800aa76:	6800      	ldr	r0, [r0, #0]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	a902      	add	r1, sp, #8
 800aa7c:	f000 fa60 	bl	800af40 <_svfiprintf_r>
 800aa80:	9b02      	ldr	r3, [sp, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	b01c      	add	sp, #112	@ 0x70
 800aa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa8c:	b003      	add	sp, #12
 800aa8e:	4770      	bx	lr
 800aa90:	20000100 	.word	0x20000100
 800aa94:	ffff0208 	.word	0xffff0208

0800aa98 <__sread>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	f000 f91a 	bl	800acd8 <_read_r>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	bfab      	itete	ge
 800aaa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aaaa:	89a3      	ldrhlt	r3, [r4, #12]
 800aaac:	181b      	addge	r3, r3, r0
 800aaae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aab2:	bfac      	ite	ge
 800aab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aab6:	81a3      	strhlt	r3, [r4, #12]
 800aab8:	bd10      	pop	{r4, pc}

0800aaba <__swrite>:
 800aaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabe:	461f      	mov	r7, r3
 800aac0:	898b      	ldrh	r3, [r1, #12]
 800aac2:	05db      	lsls	r3, r3, #23
 800aac4:	4605      	mov	r5, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	4616      	mov	r6, r2
 800aaca:	d505      	bpl.n	800aad8 <__swrite+0x1e>
 800aacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad0:	2302      	movs	r3, #2
 800aad2:	2200      	movs	r2, #0
 800aad4:	f000 f8ee 	bl	800acb4 <_lseek_r>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	4632      	mov	r2, r6
 800aae6:	463b      	mov	r3, r7
 800aae8:	4628      	mov	r0, r5
 800aaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	f000 b915 	b.w	800ad1c <_write_r>

0800aaf2 <__sseek>:
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafa:	f000 f8db 	bl	800acb4 <_lseek_r>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	bf15      	itete	ne
 800ab04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab0e:	81a3      	strheq	r3, [r4, #12]
 800ab10:	bf18      	it	ne
 800ab12:	81a3      	strhne	r3, [r4, #12]
 800ab14:	bd10      	pop	{r4, pc}

0800ab16 <__sclose>:
 800ab16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1a:	f000 b865 	b.w	800abe8 <_close_r>

0800ab1e <memset>:
 800ab1e:	4402      	add	r2, r0
 800ab20:	4603      	mov	r3, r0
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d100      	bne.n	800ab28 <memset+0xa>
 800ab26:	4770      	bx	lr
 800ab28:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2c:	e7f9      	b.n	800ab22 <memset+0x4>
	...

0800ab30 <strtok>:
 800ab30:	4b16      	ldr	r3, [pc, #88]	@ (800ab8c <strtok+0x5c>)
 800ab32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab36:	681f      	ldr	r7, [r3, #0]
 800ab38:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	b9ec      	cbnz	r4, 800ab7c <strtok+0x4c>
 800ab40:	2050      	movs	r0, #80	@ 0x50
 800ab42:	f7ff fd8d 	bl	800a660 <malloc>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6478      	str	r0, [r7, #68]	@ 0x44
 800ab4a:	b920      	cbnz	r0, 800ab56 <strtok+0x26>
 800ab4c:	4b10      	ldr	r3, [pc, #64]	@ (800ab90 <strtok+0x60>)
 800ab4e:	4811      	ldr	r0, [pc, #68]	@ (800ab94 <strtok+0x64>)
 800ab50:	215b      	movs	r1, #91	@ 0x5b
 800ab52:	f000 f931 	bl	800adb8 <__assert_func>
 800ab56:	e9c0 4400 	strd	r4, r4, [r0]
 800ab5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab62:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ab66:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ab6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ab6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ab72:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ab76:	6184      	str	r4, [r0, #24]
 800ab78:	7704      	strb	r4, [r0, #28]
 800ab7a:	6244      	str	r4, [r0, #36]	@ 0x24
 800ab7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4628      	mov	r0, r5
 800ab82:	2301      	movs	r3, #1
 800ab84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	f000 b806 	b.w	800ab98 <__strtok_r>
 800ab8c:	20000100 	.word	0x20000100
 800ab90:	0800bfd5 	.word	0x0800bfd5
 800ab94:	0800bfec 	.word	0x0800bfec

0800ab98 <__strtok_r>:
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	b908      	cbnz	r0, 800aba2 <__strtok_r+0xa>
 800ab9e:	6814      	ldr	r4, [r2, #0]
 800aba0:	b144      	cbz	r4, 800abb4 <__strtok_r+0x1c>
 800aba2:	4620      	mov	r0, r4
 800aba4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aba8:	460f      	mov	r7, r1
 800abaa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abae:	b91e      	cbnz	r6, 800abb8 <__strtok_r+0x20>
 800abb0:	b965      	cbnz	r5, 800abcc <__strtok_r+0x34>
 800abb2:	6015      	str	r5, [r2, #0]
 800abb4:	2000      	movs	r0, #0
 800abb6:	e005      	b.n	800abc4 <__strtok_r+0x2c>
 800abb8:	42b5      	cmp	r5, r6
 800abba:	d1f6      	bne.n	800abaa <__strtok_r+0x12>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f0      	bne.n	800aba2 <__strtok_r+0xa>
 800abc0:	6014      	str	r4, [r2, #0]
 800abc2:	7003      	strb	r3, [r0, #0]
 800abc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc6:	461c      	mov	r4, r3
 800abc8:	e00c      	b.n	800abe4 <__strtok_r+0x4c>
 800abca:	b915      	cbnz	r5, 800abd2 <__strtok_r+0x3a>
 800abcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abd0:	460e      	mov	r6, r1
 800abd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800abd6:	42ab      	cmp	r3, r5
 800abd8:	d1f7      	bne.n	800abca <__strtok_r+0x32>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0f3      	beq.n	800abc6 <__strtok_r+0x2e>
 800abde:	2300      	movs	r3, #0
 800abe0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800abe4:	6014      	str	r4, [r2, #0]
 800abe6:	e7ed      	b.n	800abc4 <__strtok_r+0x2c>

0800abe8 <_close_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d06      	ldr	r5, [pc, #24]	@ (800ac04 <_close_r+0x1c>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f7f6 fc6a 	bl	80014cc <_close>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_close_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_close_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	20002ac4 	.word	0x20002ac4

0800ac08 <_reclaim_reent>:
 800ac08:	4b29      	ldr	r3, [pc, #164]	@ (800acb0 <_reclaim_reent+0xa8>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4283      	cmp	r3, r0
 800ac0e:	b570      	push	{r4, r5, r6, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	d04b      	beq.n	800acac <_reclaim_reent+0xa4>
 800ac14:	69c3      	ldr	r3, [r0, #28]
 800ac16:	b1ab      	cbz	r3, 800ac44 <_reclaim_reent+0x3c>
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	b16b      	cbz	r3, 800ac38 <_reclaim_reent+0x30>
 800ac1c:	2500      	movs	r5, #0
 800ac1e:	69e3      	ldr	r3, [r4, #28]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	5959      	ldr	r1, [r3, r5]
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d13b      	bne.n	800aca0 <_reclaim_reent+0x98>
 800ac28:	3504      	adds	r5, #4
 800ac2a:	2d80      	cmp	r5, #128	@ 0x80
 800ac2c:	d1f7      	bne.n	800ac1e <_reclaim_reent+0x16>
 800ac2e:	69e3      	ldr	r3, [r4, #28]
 800ac30:	4620      	mov	r0, r4
 800ac32:	68d9      	ldr	r1, [r3, #12]
 800ac34:	f000 f8de 	bl	800adf4 <_free_r>
 800ac38:	69e3      	ldr	r3, [r4, #28]
 800ac3a:	6819      	ldr	r1, [r3, #0]
 800ac3c:	b111      	cbz	r1, 800ac44 <_reclaim_reent+0x3c>
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 f8d8 	bl	800adf4 <_free_r>
 800ac44:	6961      	ldr	r1, [r4, #20]
 800ac46:	b111      	cbz	r1, 800ac4e <_reclaim_reent+0x46>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 f8d3 	bl	800adf4 <_free_r>
 800ac4e:	69e1      	ldr	r1, [r4, #28]
 800ac50:	b111      	cbz	r1, 800ac58 <_reclaim_reent+0x50>
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f8ce 	bl	800adf4 <_free_r>
 800ac58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac5a:	b111      	cbz	r1, 800ac62 <_reclaim_reent+0x5a>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 f8c9 	bl	800adf4 <_free_r>
 800ac62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac64:	b111      	cbz	r1, 800ac6c <_reclaim_reent+0x64>
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 f8c4 	bl	800adf4 <_free_r>
 800ac6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ac6e:	b111      	cbz	r1, 800ac76 <_reclaim_reent+0x6e>
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 f8bf 	bl	800adf4 <_free_r>
 800ac76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac78:	b111      	cbz	r1, 800ac80 <_reclaim_reent+0x78>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f8ba 	bl	800adf4 <_free_r>
 800ac80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac82:	b111      	cbz	r1, 800ac8a <_reclaim_reent+0x82>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 f8b5 	bl	800adf4 <_free_r>
 800ac8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac8c:	b111      	cbz	r1, 800ac94 <_reclaim_reent+0x8c>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 f8b0 	bl	800adf4 <_free_r>
 800ac94:	6a23      	ldr	r3, [r4, #32]
 800ac96:	b14b      	cbz	r3, 800acac <_reclaim_reent+0xa4>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac9e:	4718      	bx	r3
 800aca0:	680e      	ldr	r6, [r1, #0]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 f8a6 	bl	800adf4 <_free_r>
 800aca8:	4631      	mov	r1, r6
 800acaa:	e7bb      	b.n	800ac24 <_reclaim_reent+0x1c>
 800acac:	bd70      	pop	{r4, r5, r6, pc}
 800acae:	bf00      	nop
 800acb0:	20000100 	.word	0x20000100

0800acb4 <_lseek_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d07      	ldr	r5, [pc, #28]	@ (800acd4 <_lseek_r+0x20>)
 800acb8:	4604      	mov	r4, r0
 800acba:	4608      	mov	r0, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7f6 fc29 	bl	800151a <_lseek>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_lseek_r+0x1e>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_lseek_r+0x1e>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	20002ac4 	.word	0x20002ac4

0800acd8 <_read_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	@ (800acf8 <_read_r+0x20>)
 800acdc:	4604      	mov	r4, r0
 800acde:	4608      	mov	r0, r1
 800ace0:	4611      	mov	r1, r2
 800ace2:	2200      	movs	r2, #0
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f7f6 fbb7 	bl	800145a <_read>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_read_r+0x1e>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_read_r+0x1e>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20002ac4 	.word	0x20002ac4

0800acfc <_sbrk_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d06      	ldr	r5, [pc, #24]	@ (800ad18 <_sbrk_r+0x1c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f6 fc14 	bl	8001534 <_sbrk>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_sbrk_r+0x1a>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_sbrk_r+0x1a>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	20002ac4 	.word	0x20002ac4

0800ad1c <_write_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	@ (800ad3c <_write_r+0x20>)
 800ad20:	4604      	mov	r4, r0
 800ad22:	4608      	mov	r0, r1
 800ad24:	4611      	mov	r1, r2
 800ad26:	2200      	movs	r2, #0
 800ad28:	602a      	str	r2, [r5, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f7f6 fbb2 	bl	8001494 <_write>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_write_r+0x1e>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_write_r+0x1e>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20002ac4 	.word	0x20002ac4

0800ad40 <__errno>:
 800ad40:	4b01      	ldr	r3, [pc, #4]	@ (800ad48 <__errno+0x8>)
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000100 	.word	0x20000100

0800ad4c <__libc_init_array>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad84 <__libc_init_array+0x38>)
 800ad50:	4c0d      	ldr	r4, [pc, #52]	@ (800ad88 <__libc_init_array+0x3c>)
 800ad52:	1b64      	subs	r4, r4, r5
 800ad54:	10a4      	asrs	r4, r4, #2
 800ad56:	2600      	movs	r6, #0
 800ad58:	42a6      	cmp	r6, r4
 800ad5a:	d109      	bne.n	800ad70 <__libc_init_array+0x24>
 800ad5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad8c <__libc_init_array+0x40>)
 800ad5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ad90 <__libc_init_array+0x44>)
 800ad60:	f000 ff2a 	bl	800bbb8 <_init>
 800ad64:	1b64      	subs	r4, r4, r5
 800ad66:	10a4      	asrs	r4, r4, #2
 800ad68:	2600      	movs	r6, #0
 800ad6a:	42a6      	cmp	r6, r4
 800ad6c:	d105      	bne.n	800ad7a <__libc_init_array+0x2e>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad74:	4798      	blx	r3
 800ad76:	3601      	adds	r6, #1
 800ad78:	e7ee      	b.n	800ad58 <__libc_init_array+0xc>
 800ad7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7e:	4798      	blx	r3
 800ad80:	3601      	adds	r6, #1
 800ad82:	e7f2      	b.n	800ad6a <__libc_init_array+0x1e>
 800ad84:	0800c0c0 	.word	0x0800c0c0
 800ad88:	0800c0c0 	.word	0x0800c0c0
 800ad8c:	0800c0c0 	.word	0x0800c0c0
 800ad90:	0800c0c4 	.word	0x0800c0c4

0800ad94 <__retarget_lock_init_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <__retarget_lock_acquire_recursive>:
 800ad96:	4770      	bx	lr

0800ad98 <__retarget_lock_release_recursive>:
 800ad98:	4770      	bx	lr

0800ad9a <memcpy>:
 800ad9a:	440a      	add	r2, r1
 800ad9c:	4291      	cmp	r1, r2
 800ad9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ada2:	d100      	bne.n	800ada6 <memcpy+0xc>
 800ada4:	4770      	bx	lr
 800ada6:	b510      	push	{r4, lr}
 800ada8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adb0:	4291      	cmp	r1, r2
 800adb2:	d1f9      	bne.n	800ada8 <memcpy+0xe>
 800adb4:	bd10      	pop	{r4, pc}
	...

0800adb8 <__assert_func>:
 800adb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adba:	4614      	mov	r4, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	4b09      	ldr	r3, [pc, #36]	@ (800ade4 <__assert_func+0x2c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4605      	mov	r5, r0
 800adc4:	68d8      	ldr	r0, [r3, #12]
 800adc6:	b954      	cbnz	r4, 800adde <__assert_func+0x26>
 800adc8:	4b07      	ldr	r3, [pc, #28]	@ (800ade8 <__assert_func+0x30>)
 800adca:	461c      	mov	r4, r3
 800adcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add0:	9100      	str	r1, [sp, #0]
 800add2:	462b      	mov	r3, r5
 800add4:	4905      	ldr	r1, [pc, #20]	@ (800adec <__assert_func+0x34>)
 800add6:	f000 fbe9 	bl	800b5ac <fiprintf>
 800adda:	f000 fc13 	bl	800b604 <abort>
 800adde:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <__assert_func+0x38>)
 800ade0:	e7f4      	b.n	800adcc <__assert_func+0x14>
 800ade2:	bf00      	nop
 800ade4:	20000100 	.word	0x20000100
 800ade8:	0800c081 	.word	0x0800c081
 800adec:	0800c053 	.word	0x0800c053
 800adf0:	0800c046 	.word	0x0800c046

0800adf4 <_free_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4605      	mov	r5, r0
 800adf8:	2900      	cmp	r1, #0
 800adfa:	d041      	beq.n	800ae80 <_free_r+0x8c>
 800adfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae00:	1f0c      	subs	r4, r1, #4
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfb8      	it	lt
 800ae06:	18e4      	addlt	r4, r4, r3
 800ae08:	f7ff fcd4 	bl	800a7b4 <__malloc_lock>
 800ae0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ae84 <_free_r+0x90>)
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	b933      	cbnz	r3, 800ae20 <_free_r+0x2c>
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	6014      	str	r4, [r2, #0]
 800ae16:	4628      	mov	r0, r5
 800ae18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae1c:	f7ff bcd0 	b.w	800a7c0 <__malloc_unlock>
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d908      	bls.n	800ae36 <_free_r+0x42>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	1821      	adds	r1, r4, r0
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf01      	itttt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	1809      	addeq	r1, r1, r0
 800ae32:	6021      	streq	r1, [r4, #0]
 800ae34:	e7ed      	b.n	800ae12 <_free_r+0x1e>
 800ae36:	461a      	mov	r2, r3
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	b10b      	cbz	r3, 800ae40 <_free_r+0x4c>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d9fa      	bls.n	800ae36 <_free_r+0x42>
 800ae40:	6811      	ldr	r1, [r2, #0]
 800ae42:	1850      	adds	r0, r2, r1
 800ae44:	42a0      	cmp	r0, r4
 800ae46:	d10b      	bne.n	800ae60 <_free_r+0x6c>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	4401      	add	r1, r0
 800ae4c:	1850      	adds	r0, r2, r1
 800ae4e:	4283      	cmp	r3, r0
 800ae50:	6011      	str	r1, [r2, #0]
 800ae52:	d1e0      	bne.n	800ae16 <_free_r+0x22>
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	6053      	str	r3, [r2, #4]
 800ae5a:	4408      	add	r0, r1
 800ae5c:	6010      	str	r0, [r2, #0]
 800ae5e:	e7da      	b.n	800ae16 <_free_r+0x22>
 800ae60:	d902      	bls.n	800ae68 <_free_r+0x74>
 800ae62:	230c      	movs	r3, #12
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	e7d6      	b.n	800ae16 <_free_r+0x22>
 800ae68:	6820      	ldr	r0, [r4, #0]
 800ae6a:	1821      	adds	r1, r4, r0
 800ae6c:	428b      	cmp	r3, r1
 800ae6e:	bf04      	itt	eq
 800ae70:	6819      	ldreq	r1, [r3, #0]
 800ae72:	685b      	ldreq	r3, [r3, #4]
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	bf04      	itt	eq
 800ae78:	1809      	addeq	r1, r1, r0
 800ae7a:	6021      	streq	r1, [r4, #0]
 800ae7c:	6054      	str	r4, [r2, #4]
 800ae7e:	e7ca      	b.n	800ae16 <_free_r+0x22>
 800ae80:	bd38      	pop	{r3, r4, r5, pc}
 800ae82:	bf00      	nop
 800ae84:	20002984 	.word	0x20002984

0800ae88 <__ssputs_r>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	688e      	ldr	r6, [r1, #8]
 800ae8e:	461f      	mov	r7, r3
 800ae90:	42be      	cmp	r6, r7
 800ae92:	680b      	ldr	r3, [r1, #0]
 800ae94:	4682      	mov	sl, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4690      	mov	r8, r2
 800ae9a:	d82d      	bhi.n	800aef8 <__ssputs_r+0x70>
 800ae9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aea0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aea4:	d026      	beq.n	800aef4 <__ssputs_r+0x6c>
 800aea6:	6965      	ldr	r5, [r4, #20]
 800aea8:	6909      	ldr	r1, [r1, #16]
 800aeaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeae:	eba3 0901 	sub.w	r9, r3, r1
 800aeb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeb6:	1c7b      	adds	r3, r7, #1
 800aeb8:	444b      	add	r3, r9
 800aeba:	106d      	asrs	r5, r5, #1
 800aebc:	429d      	cmp	r5, r3
 800aebe:	bf38      	it	cc
 800aec0:	461d      	movcc	r5, r3
 800aec2:	0553      	lsls	r3, r2, #21
 800aec4:	d527      	bpl.n	800af16 <__ssputs_r+0x8e>
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7ff fbf4 	bl	800a6b4 <_malloc_r>
 800aecc:	4606      	mov	r6, r0
 800aece:	b360      	cbz	r0, 800af2a <__ssputs_r+0xa2>
 800aed0:	6921      	ldr	r1, [r4, #16]
 800aed2:	464a      	mov	r2, r9
 800aed4:	f7ff ff61 	bl	800ad9a <memcpy>
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	6126      	str	r6, [r4, #16]
 800aee6:	6165      	str	r5, [r4, #20]
 800aee8:	444e      	add	r6, r9
 800aeea:	eba5 0509 	sub.w	r5, r5, r9
 800aeee:	6026      	str	r6, [r4, #0]
 800aef0:	60a5      	str	r5, [r4, #8]
 800aef2:	463e      	mov	r6, r7
 800aef4:	42be      	cmp	r6, r7
 800aef6:	d900      	bls.n	800aefa <__ssputs_r+0x72>
 800aef8:	463e      	mov	r6, r7
 800aefa:	6820      	ldr	r0, [r4, #0]
 800aefc:	4632      	mov	r2, r6
 800aefe:	4641      	mov	r1, r8
 800af00:	f000 fb66 	bl	800b5d0 <memmove>
 800af04:	68a3      	ldr	r3, [r4, #8]
 800af06:	1b9b      	subs	r3, r3, r6
 800af08:	60a3      	str	r3, [r4, #8]
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	4433      	add	r3, r6
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	2000      	movs	r0, #0
 800af12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af16:	462a      	mov	r2, r5
 800af18:	f000 fb7b 	bl	800b612 <_realloc_r>
 800af1c:	4606      	mov	r6, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d1e0      	bne.n	800aee4 <__ssputs_r+0x5c>
 800af22:	6921      	ldr	r1, [r4, #16]
 800af24:	4650      	mov	r0, sl
 800af26:	f7ff ff65 	bl	800adf4 <_free_r>
 800af2a:	230c      	movs	r3, #12
 800af2c:	f8ca 3000 	str.w	r3, [sl]
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295
 800af3c:	e7e9      	b.n	800af12 <__ssputs_r+0x8a>
	...

0800af40 <_svfiprintf_r>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4698      	mov	r8, r3
 800af46:	898b      	ldrh	r3, [r1, #12]
 800af48:	061b      	lsls	r3, r3, #24
 800af4a:	b09d      	sub	sp, #116	@ 0x74
 800af4c:	4607      	mov	r7, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	4614      	mov	r4, r2
 800af52:	d510      	bpl.n	800af76 <_svfiprintf_r+0x36>
 800af54:	690b      	ldr	r3, [r1, #16]
 800af56:	b973      	cbnz	r3, 800af76 <_svfiprintf_r+0x36>
 800af58:	2140      	movs	r1, #64	@ 0x40
 800af5a:	f7ff fbab 	bl	800a6b4 <_malloc_r>
 800af5e:	6028      	str	r0, [r5, #0]
 800af60:	6128      	str	r0, [r5, #16]
 800af62:	b930      	cbnz	r0, 800af72 <_svfiprintf_r+0x32>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	b01d      	add	sp, #116	@ 0x74
 800af6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af72:	2340      	movs	r3, #64	@ 0x40
 800af74:	616b      	str	r3, [r5, #20]
 800af76:	2300      	movs	r3, #0
 800af78:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7a:	2320      	movs	r3, #32
 800af7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af80:	f8cd 800c 	str.w	r8, [sp, #12]
 800af84:	2330      	movs	r3, #48	@ 0x30
 800af86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b124 <_svfiprintf_r+0x1e4>
 800af8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af8e:	f04f 0901 	mov.w	r9, #1
 800af92:	4623      	mov	r3, r4
 800af94:	469a      	mov	sl, r3
 800af96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af9a:	b10a      	cbz	r2, 800afa0 <_svfiprintf_r+0x60>
 800af9c:	2a25      	cmp	r2, #37	@ 0x25
 800af9e:	d1f9      	bne.n	800af94 <_svfiprintf_r+0x54>
 800afa0:	ebba 0b04 	subs.w	fp, sl, r4
 800afa4:	d00b      	beq.n	800afbe <_svfiprintf_r+0x7e>
 800afa6:	465b      	mov	r3, fp
 800afa8:	4622      	mov	r2, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	4638      	mov	r0, r7
 800afae:	f7ff ff6b 	bl	800ae88 <__ssputs_r>
 800afb2:	3001      	adds	r0, #1
 800afb4:	f000 80a7 	beq.w	800b106 <_svfiprintf_r+0x1c6>
 800afb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afba:	445a      	add	r2, fp
 800afbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800afbe:	f89a 3000 	ldrb.w	r3, [sl]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 809f 	beq.w	800b106 <_svfiprintf_r+0x1c6>
 800afc8:	2300      	movs	r3, #0
 800afca:	f04f 32ff 	mov.w	r2, #4294967295
 800afce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afd2:	f10a 0a01 	add.w	sl, sl, #1
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	9307      	str	r3, [sp, #28]
 800afda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afde:	931a      	str	r3, [sp, #104]	@ 0x68
 800afe0:	4654      	mov	r4, sl
 800afe2:	2205      	movs	r2, #5
 800afe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe8:	484e      	ldr	r0, [pc, #312]	@ (800b124 <_svfiprintf_r+0x1e4>)
 800afea:	f7f5 f909 	bl	8000200 <memchr>
 800afee:	9a04      	ldr	r2, [sp, #16]
 800aff0:	b9d8      	cbnz	r0, 800b02a <_svfiprintf_r+0xea>
 800aff2:	06d0      	lsls	r0, r2, #27
 800aff4:	bf44      	itt	mi
 800aff6:	2320      	movmi	r3, #32
 800aff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800affc:	0711      	lsls	r1, r2, #28
 800affe:	bf44      	itt	mi
 800b000:	232b      	movmi	r3, #43	@ 0x2b
 800b002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b006:	f89a 3000 	ldrb.w	r3, [sl]
 800b00a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b00c:	d015      	beq.n	800b03a <_svfiprintf_r+0xfa>
 800b00e:	9a07      	ldr	r2, [sp, #28]
 800b010:	4654      	mov	r4, sl
 800b012:	2000      	movs	r0, #0
 800b014:	f04f 0c0a 	mov.w	ip, #10
 800b018:	4621      	mov	r1, r4
 800b01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b01e:	3b30      	subs	r3, #48	@ 0x30
 800b020:	2b09      	cmp	r3, #9
 800b022:	d94b      	bls.n	800b0bc <_svfiprintf_r+0x17c>
 800b024:	b1b0      	cbz	r0, 800b054 <_svfiprintf_r+0x114>
 800b026:	9207      	str	r2, [sp, #28]
 800b028:	e014      	b.n	800b054 <_svfiprintf_r+0x114>
 800b02a:	eba0 0308 	sub.w	r3, r0, r8
 800b02e:	fa09 f303 	lsl.w	r3, r9, r3
 800b032:	4313      	orrs	r3, r2
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	46a2      	mov	sl, r4
 800b038:	e7d2      	b.n	800afe0 <_svfiprintf_r+0xa0>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	1d19      	adds	r1, r3, #4
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	9103      	str	r1, [sp, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	bfbb      	ittet	lt
 800b046:	425b      	neglt	r3, r3
 800b048:	f042 0202 	orrlt.w	r2, r2, #2
 800b04c:	9307      	strge	r3, [sp, #28]
 800b04e:	9307      	strlt	r3, [sp, #28]
 800b050:	bfb8      	it	lt
 800b052:	9204      	strlt	r2, [sp, #16]
 800b054:	7823      	ldrb	r3, [r4, #0]
 800b056:	2b2e      	cmp	r3, #46	@ 0x2e
 800b058:	d10a      	bne.n	800b070 <_svfiprintf_r+0x130>
 800b05a:	7863      	ldrb	r3, [r4, #1]
 800b05c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b05e:	d132      	bne.n	800b0c6 <_svfiprintf_r+0x186>
 800b060:	9b03      	ldr	r3, [sp, #12]
 800b062:	1d1a      	adds	r2, r3, #4
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	9203      	str	r2, [sp, #12]
 800b068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b06c:	3402      	adds	r4, #2
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b134 <_svfiprintf_r+0x1f4>
 800b074:	7821      	ldrb	r1, [r4, #0]
 800b076:	2203      	movs	r2, #3
 800b078:	4650      	mov	r0, sl
 800b07a:	f7f5 f8c1 	bl	8000200 <memchr>
 800b07e:	b138      	cbz	r0, 800b090 <_svfiprintf_r+0x150>
 800b080:	9b04      	ldr	r3, [sp, #16]
 800b082:	eba0 000a 	sub.w	r0, r0, sl
 800b086:	2240      	movs	r2, #64	@ 0x40
 800b088:	4082      	lsls	r2, r0
 800b08a:	4313      	orrs	r3, r2
 800b08c:	3401      	adds	r4, #1
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b094:	4824      	ldr	r0, [pc, #144]	@ (800b128 <_svfiprintf_r+0x1e8>)
 800b096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b09a:	2206      	movs	r2, #6
 800b09c:	f7f5 f8b0 	bl	8000200 <memchr>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d036      	beq.n	800b112 <_svfiprintf_r+0x1d2>
 800b0a4:	4b21      	ldr	r3, [pc, #132]	@ (800b12c <_svfiprintf_r+0x1ec>)
 800b0a6:	bb1b      	cbnz	r3, 800b0f0 <_svfiprintf_r+0x1b0>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	3307      	adds	r3, #7
 800b0ac:	f023 0307 	bic.w	r3, r3, #7
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b6:	4433      	add	r3, r6
 800b0b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ba:	e76a      	b.n	800af92 <_svfiprintf_r+0x52>
 800b0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	e7a8      	b.n	800b018 <_svfiprintf_r+0xd8>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	3401      	adds	r4, #1
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f04f 0c0a 	mov.w	ip, #10
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0d8:	3a30      	subs	r2, #48	@ 0x30
 800b0da:	2a09      	cmp	r2, #9
 800b0dc:	d903      	bls.n	800b0e6 <_svfiprintf_r+0x1a6>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0c6      	beq.n	800b070 <_svfiprintf_r+0x130>
 800b0e2:	9105      	str	r1, [sp, #20]
 800b0e4:	e7c4      	b.n	800b070 <_svfiprintf_r+0x130>
 800b0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e7f0      	b.n	800b0d2 <_svfiprintf_r+0x192>
 800b0f0:	ab03      	add	r3, sp, #12
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b130 <_svfiprintf_r+0x1f0>)
 800b0f8:	a904      	add	r1, sp, #16
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f3af 8000 	nop.w
 800b100:	1c42      	adds	r2, r0, #1
 800b102:	4606      	mov	r6, r0
 800b104:	d1d6      	bne.n	800b0b4 <_svfiprintf_r+0x174>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	065b      	lsls	r3, r3, #25
 800b10a:	f53f af2d 	bmi.w	800af68 <_svfiprintf_r+0x28>
 800b10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b110:	e72c      	b.n	800af6c <_svfiprintf_r+0x2c>
 800b112:	ab03      	add	r3, sp, #12
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	462a      	mov	r2, r5
 800b118:	4b05      	ldr	r3, [pc, #20]	@ (800b130 <_svfiprintf_r+0x1f0>)
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	4638      	mov	r0, r7
 800b11e:	f000 f879 	bl	800b214 <_printf_i>
 800b122:	e7ed      	b.n	800b100 <_svfiprintf_r+0x1c0>
 800b124:	0800c082 	.word	0x0800c082
 800b128:	0800c08c 	.word	0x0800c08c
 800b12c:	00000000 	.word	0x00000000
 800b130:	0800ae89 	.word	0x0800ae89
 800b134:	0800c088 	.word	0x0800c088

0800b138 <_printf_common>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	4616      	mov	r6, r2
 800b13e:	4698      	mov	r8, r3
 800b140:	688a      	ldr	r2, [r1, #8]
 800b142:	690b      	ldr	r3, [r1, #16]
 800b144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b148:	4293      	cmp	r3, r2
 800b14a:	bfb8      	it	lt
 800b14c:	4613      	movlt	r3, r2
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b154:	4607      	mov	r7, r0
 800b156:	460c      	mov	r4, r1
 800b158:	b10a      	cbz	r2, 800b15e <_printf_common+0x26>
 800b15a:	3301      	adds	r3, #1
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	0699      	lsls	r1, r3, #26
 800b162:	bf42      	ittt	mi
 800b164:	6833      	ldrmi	r3, [r6, #0]
 800b166:	3302      	addmi	r3, #2
 800b168:	6033      	strmi	r3, [r6, #0]
 800b16a:	6825      	ldr	r5, [r4, #0]
 800b16c:	f015 0506 	ands.w	r5, r5, #6
 800b170:	d106      	bne.n	800b180 <_printf_common+0x48>
 800b172:	f104 0a19 	add.w	sl, r4, #25
 800b176:	68e3      	ldr	r3, [r4, #12]
 800b178:	6832      	ldr	r2, [r6, #0]
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dc26      	bgt.n	800b1ce <_printf_common+0x96>
 800b180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b184:	6822      	ldr	r2, [r4, #0]
 800b186:	3b00      	subs	r3, #0
 800b188:	bf18      	it	ne
 800b18a:	2301      	movne	r3, #1
 800b18c:	0692      	lsls	r2, r2, #26
 800b18e:	d42b      	bmi.n	800b1e8 <_printf_common+0xb0>
 800b190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b194:	4641      	mov	r1, r8
 800b196:	4638      	mov	r0, r7
 800b198:	47c8      	blx	r9
 800b19a:	3001      	adds	r0, #1
 800b19c:	d01e      	beq.n	800b1dc <_printf_common+0xa4>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	6922      	ldr	r2, [r4, #16]
 800b1a2:	f003 0306 	and.w	r3, r3, #6
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	bf02      	ittt	eq
 800b1aa:	68e5      	ldreq	r5, [r4, #12]
 800b1ac:	6833      	ldreq	r3, [r6, #0]
 800b1ae:	1aed      	subeq	r5, r5, r3
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	bf0c      	ite	eq
 800b1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b8:	2500      	movne	r5, #0
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bfc4      	itt	gt
 800b1be:	1a9b      	subgt	r3, r3, r2
 800b1c0:	18ed      	addgt	r5, r5, r3
 800b1c2:	2600      	movs	r6, #0
 800b1c4:	341a      	adds	r4, #26
 800b1c6:	42b5      	cmp	r5, r6
 800b1c8:	d11a      	bne.n	800b200 <_printf_common+0xc8>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e008      	b.n	800b1e0 <_printf_common+0xa8>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	4641      	mov	r1, r8
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	47c8      	blx	r9
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d103      	bne.n	800b1e4 <_printf_common+0xac>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	e7c6      	b.n	800b176 <_printf_common+0x3e>
 800b1e8:	18e1      	adds	r1, r4, r3
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	2030      	movs	r0, #48	@ 0x30
 800b1ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1f2:	4422      	add	r2, r4
 800b1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	e7c7      	b.n	800b190 <_printf_common+0x58>
 800b200:	2301      	movs	r3, #1
 800b202:	4622      	mov	r2, r4
 800b204:	4641      	mov	r1, r8
 800b206:	4638      	mov	r0, r7
 800b208:	47c8      	blx	r9
 800b20a:	3001      	adds	r0, #1
 800b20c:	d0e6      	beq.n	800b1dc <_printf_common+0xa4>
 800b20e:	3601      	adds	r6, #1
 800b210:	e7d9      	b.n	800b1c6 <_printf_common+0x8e>
	...

0800b214 <_printf_i>:
 800b214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	7e0f      	ldrb	r7, [r1, #24]
 800b21a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b21c:	2f78      	cmp	r7, #120	@ 0x78
 800b21e:	4691      	mov	r9, r2
 800b220:	4680      	mov	r8, r0
 800b222:	460c      	mov	r4, r1
 800b224:	469a      	mov	sl, r3
 800b226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b22a:	d807      	bhi.n	800b23c <_printf_i+0x28>
 800b22c:	2f62      	cmp	r7, #98	@ 0x62
 800b22e:	d80a      	bhi.n	800b246 <_printf_i+0x32>
 800b230:	2f00      	cmp	r7, #0
 800b232:	f000 80d2 	beq.w	800b3da <_printf_i+0x1c6>
 800b236:	2f58      	cmp	r7, #88	@ 0x58
 800b238:	f000 80b9 	beq.w	800b3ae <_printf_i+0x19a>
 800b23c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b244:	e03a      	b.n	800b2bc <_printf_i+0xa8>
 800b246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b24a:	2b15      	cmp	r3, #21
 800b24c:	d8f6      	bhi.n	800b23c <_printf_i+0x28>
 800b24e:	a101      	add	r1, pc, #4	@ (adr r1, 800b254 <_printf_i+0x40>)
 800b250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2c1 	.word	0x0800b2c1
 800b25c:	0800b23d 	.word	0x0800b23d
 800b260:	0800b23d 	.word	0x0800b23d
 800b264:	0800b23d 	.word	0x0800b23d
 800b268:	0800b23d 	.word	0x0800b23d
 800b26c:	0800b2c1 	.word	0x0800b2c1
 800b270:	0800b23d 	.word	0x0800b23d
 800b274:	0800b23d 	.word	0x0800b23d
 800b278:	0800b23d 	.word	0x0800b23d
 800b27c:	0800b23d 	.word	0x0800b23d
 800b280:	0800b3c1 	.word	0x0800b3c1
 800b284:	0800b2eb 	.word	0x0800b2eb
 800b288:	0800b37b 	.word	0x0800b37b
 800b28c:	0800b23d 	.word	0x0800b23d
 800b290:	0800b23d 	.word	0x0800b23d
 800b294:	0800b3e3 	.word	0x0800b3e3
 800b298:	0800b23d 	.word	0x0800b23d
 800b29c:	0800b2eb 	.word	0x0800b2eb
 800b2a0:	0800b23d 	.word	0x0800b23d
 800b2a4:	0800b23d 	.word	0x0800b23d
 800b2a8:	0800b383 	.word	0x0800b383
 800b2ac:	6833      	ldr	r3, [r6, #0]
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6032      	str	r2, [r6, #0]
 800b2b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e09d      	b.n	800b3fc <_printf_i+0x1e8>
 800b2c0:	6833      	ldr	r3, [r6, #0]
 800b2c2:	6820      	ldr	r0, [r4, #0]
 800b2c4:	1d19      	adds	r1, r3, #4
 800b2c6:	6031      	str	r1, [r6, #0]
 800b2c8:	0606      	lsls	r6, r0, #24
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_i+0xbc>
 800b2cc:	681d      	ldr	r5, [r3, #0]
 800b2ce:	e003      	b.n	800b2d8 <_printf_i+0xc4>
 800b2d0:	0645      	lsls	r5, r0, #25
 800b2d2:	d5fb      	bpl.n	800b2cc <_printf_i+0xb8>
 800b2d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2d8:	2d00      	cmp	r5, #0
 800b2da:	da03      	bge.n	800b2e4 <_printf_i+0xd0>
 800b2dc:	232d      	movs	r3, #45	@ 0x2d
 800b2de:	426d      	negs	r5, r5
 800b2e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2e4:	4859      	ldr	r0, [pc, #356]	@ (800b44c <_printf_i+0x238>)
 800b2e6:	230a      	movs	r3, #10
 800b2e8:	e011      	b.n	800b30e <_printf_i+0xfa>
 800b2ea:	6821      	ldr	r1, [r4, #0]
 800b2ec:	6833      	ldr	r3, [r6, #0]
 800b2ee:	0608      	lsls	r0, r1, #24
 800b2f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2f4:	d402      	bmi.n	800b2fc <_printf_i+0xe8>
 800b2f6:	0649      	lsls	r1, r1, #25
 800b2f8:	bf48      	it	mi
 800b2fa:	b2ad      	uxthmi	r5, r5
 800b2fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2fe:	4853      	ldr	r0, [pc, #332]	@ (800b44c <_printf_i+0x238>)
 800b300:	6033      	str	r3, [r6, #0]
 800b302:	bf14      	ite	ne
 800b304:	230a      	movne	r3, #10
 800b306:	2308      	moveq	r3, #8
 800b308:	2100      	movs	r1, #0
 800b30a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b30e:	6866      	ldr	r6, [r4, #4]
 800b310:	60a6      	str	r6, [r4, #8]
 800b312:	2e00      	cmp	r6, #0
 800b314:	bfa2      	ittt	ge
 800b316:	6821      	ldrge	r1, [r4, #0]
 800b318:	f021 0104 	bicge.w	r1, r1, #4
 800b31c:	6021      	strge	r1, [r4, #0]
 800b31e:	b90d      	cbnz	r5, 800b324 <_printf_i+0x110>
 800b320:	2e00      	cmp	r6, #0
 800b322:	d04b      	beq.n	800b3bc <_printf_i+0x1a8>
 800b324:	4616      	mov	r6, r2
 800b326:	fbb5 f1f3 	udiv	r1, r5, r3
 800b32a:	fb03 5711 	mls	r7, r3, r1, r5
 800b32e:	5dc7      	ldrb	r7, [r0, r7]
 800b330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b334:	462f      	mov	r7, r5
 800b336:	42bb      	cmp	r3, r7
 800b338:	460d      	mov	r5, r1
 800b33a:	d9f4      	bls.n	800b326 <_printf_i+0x112>
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d10b      	bne.n	800b358 <_printf_i+0x144>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	07df      	lsls	r7, r3, #31
 800b344:	d508      	bpl.n	800b358 <_printf_i+0x144>
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	6861      	ldr	r1, [r4, #4]
 800b34a:	4299      	cmp	r1, r3
 800b34c:	bfde      	ittt	le
 800b34e:	2330      	movle	r3, #48	@ 0x30
 800b350:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b354:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b358:	1b92      	subs	r2, r2, r6
 800b35a:	6122      	str	r2, [r4, #16]
 800b35c:	f8cd a000 	str.w	sl, [sp]
 800b360:	464b      	mov	r3, r9
 800b362:	aa03      	add	r2, sp, #12
 800b364:	4621      	mov	r1, r4
 800b366:	4640      	mov	r0, r8
 800b368:	f7ff fee6 	bl	800b138 <_printf_common>
 800b36c:	3001      	adds	r0, #1
 800b36e:	d14a      	bne.n	800b406 <_printf_i+0x1f2>
 800b370:	f04f 30ff 	mov.w	r0, #4294967295
 800b374:	b004      	add	sp, #16
 800b376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	f043 0320 	orr.w	r3, r3, #32
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	4833      	ldr	r0, [pc, #204]	@ (800b450 <_printf_i+0x23c>)
 800b384:	2778      	movs	r7, #120	@ 0x78
 800b386:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	6831      	ldr	r1, [r6, #0]
 800b38e:	061f      	lsls	r7, r3, #24
 800b390:	f851 5b04 	ldr.w	r5, [r1], #4
 800b394:	d402      	bmi.n	800b39c <_printf_i+0x188>
 800b396:	065f      	lsls	r7, r3, #25
 800b398:	bf48      	it	mi
 800b39a:	b2ad      	uxthmi	r5, r5
 800b39c:	6031      	str	r1, [r6, #0]
 800b39e:	07d9      	lsls	r1, r3, #31
 800b3a0:	bf44      	itt	mi
 800b3a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b3a6:	6023      	strmi	r3, [r4, #0]
 800b3a8:	b11d      	cbz	r5, 800b3b2 <_printf_i+0x19e>
 800b3aa:	2310      	movs	r3, #16
 800b3ac:	e7ac      	b.n	800b308 <_printf_i+0xf4>
 800b3ae:	4827      	ldr	r0, [pc, #156]	@ (800b44c <_printf_i+0x238>)
 800b3b0:	e7e9      	b.n	800b386 <_printf_i+0x172>
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	f023 0320 	bic.w	r3, r3, #32
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	e7f6      	b.n	800b3aa <_printf_i+0x196>
 800b3bc:	4616      	mov	r6, r2
 800b3be:	e7bd      	b.n	800b33c <_printf_i+0x128>
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	6825      	ldr	r5, [r4, #0]
 800b3c4:	6961      	ldr	r1, [r4, #20]
 800b3c6:	1d18      	adds	r0, r3, #4
 800b3c8:	6030      	str	r0, [r6, #0]
 800b3ca:	062e      	lsls	r6, r5, #24
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	d501      	bpl.n	800b3d4 <_printf_i+0x1c0>
 800b3d0:	6019      	str	r1, [r3, #0]
 800b3d2:	e002      	b.n	800b3da <_printf_i+0x1c6>
 800b3d4:	0668      	lsls	r0, r5, #25
 800b3d6:	d5fb      	bpl.n	800b3d0 <_printf_i+0x1bc>
 800b3d8:	8019      	strh	r1, [r3, #0]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6123      	str	r3, [r4, #16]
 800b3de:	4616      	mov	r6, r2
 800b3e0:	e7bc      	b.n	800b35c <_printf_i+0x148>
 800b3e2:	6833      	ldr	r3, [r6, #0]
 800b3e4:	1d1a      	adds	r2, r3, #4
 800b3e6:	6032      	str	r2, [r6, #0]
 800b3e8:	681e      	ldr	r6, [r3, #0]
 800b3ea:	6862      	ldr	r2, [r4, #4]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7f4 ff06 	bl	8000200 <memchr>
 800b3f4:	b108      	cbz	r0, 800b3fa <_printf_i+0x1e6>
 800b3f6:	1b80      	subs	r0, r0, r6
 800b3f8:	6060      	str	r0, [r4, #4]
 800b3fa:	6863      	ldr	r3, [r4, #4]
 800b3fc:	6123      	str	r3, [r4, #16]
 800b3fe:	2300      	movs	r3, #0
 800b400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b404:	e7aa      	b.n	800b35c <_printf_i+0x148>
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	4632      	mov	r2, r6
 800b40a:	4649      	mov	r1, r9
 800b40c:	4640      	mov	r0, r8
 800b40e:	47d0      	blx	sl
 800b410:	3001      	adds	r0, #1
 800b412:	d0ad      	beq.n	800b370 <_printf_i+0x15c>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	079b      	lsls	r3, r3, #30
 800b418:	d413      	bmi.n	800b442 <_printf_i+0x22e>
 800b41a:	68e0      	ldr	r0, [r4, #12]
 800b41c:	9b03      	ldr	r3, [sp, #12]
 800b41e:	4298      	cmp	r0, r3
 800b420:	bfb8      	it	lt
 800b422:	4618      	movlt	r0, r3
 800b424:	e7a6      	b.n	800b374 <_printf_i+0x160>
 800b426:	2301      	movs	r3, #1
 800b428:	4632      	mov	r2, r6
 800b42a:	4649      	mov	r1, r9
 800b42c:	4640      	mov	r0, r8
 800b42e:	47d0      	blx	sl
 800b430:	3001      	adds	r0, #1
 800b432:	d09d      	beq.n	800b370 <_printf_i+0x15c>
 800b434:	3501      	adds	r5, #1
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	9903      	ldr	r1, [sp, #12]
 800b43a:	1a5b      	subs	r3, r3, r1
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	dcf2      	bgt.n	800b426 <_printf_i+0x212>
 800b440:	e7eb      	b.n	800b41a <_printf_i+0x206>
 800b442:	2500      	movs	r5, #0
 800b444:	f104 0619 	add.w	r6, r4, #25
 800b448:	e7f5      	b.n	800b436 <_printf_i+0x222>
 800b44a:	bf00      	nop
 800b44c:	0800c093 	.word	0x0800c093
 800b450:	0800c0a4 	.word	0x0800c0a4

0800b454 <__sflush_r>:
 800b454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45c:	0716      	lsls	r6, r2, #28
 800b45e:	4605      	mov	r5, r0
 800b460:	460c      	mov	r4, r1
 800b462:	d454      	bmi.n	800b50e <__sflush_r+0xba>
 800b464:	684b      	ldr	r3, [r1, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	dc02      	bgt.n	800b470 <__sflush_r+0x1c>
 800b46a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd48      	ble.n	800b502 <__sflush_r+0xae>
 800b470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b472:	2e00      	cmp	r6, #0
 800b474:	d045      	beq.n	800b502 <__sflush_r+0xae>
 800b476:	2300      	movs	r3, #0
 800b478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b47c:	682f      	ldr	r7, [r5, #0]
 800b47e:	6a21      	ldr	r1, [r4, #32]
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	d030      	beq.n	800b4e6 <__sflush_r+0x92>
 800b484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	0759      	lsls	r1, r3, #29
 800b48a:	d505      	bpl.n	800b498 <__sflush_r+0x44>
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	1ad2      	subs	r2, r2, r3
 800b490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b492:	b10b      	cbz	r3, 800b498 <__sflush_r+0x44>
 800b494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	2300      	movs	r3, #0
 800b49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b49c:	6a21      	ldr	r1, [r4, #32]
 800b49e:	4628      	mov	r0, r5
 800b4a0:	47b0      	blx	r6
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	d106      	bne.n	800b4b6 <__sflush_r+0x62>
 800b4a8:	6829      	ldr	r1, [r5, #0]
 800b4aa:	291d      	cmp	r1, #29
 800b4ac:	d82b      	bhi.n	800b506 <__sflush_r+0xb2>
 800b4ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b558 <__sflush_r+0x104>)
 800b4b0:	410a      	asrs	r2, r1
 800b4b2:	07d6      	lsls	r6, r2, #31
 800b4b4:	d427      	bmi.n	800b506 <__sflush_r+0xb2>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	6062      	str	r2, [r4, #4]
 800b4ba:	04d9      	lsls	r1, r3, #19
 800b4bc:	6922      	ldr	r2, [r4, #16]
 800b4be:	6022      	str	r2, [r4, #0]
 800b4c0:	d504      	bpl.n	800b4cc <__sflush_r+0x78>
 800b4c2:	1c42      	adds	r2, r0, #1
 800b4c4:	d101      	bne.n	800b4ca <__sflush_r+0x76>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	b903      	cbnz	r3, 800b4cc <__sflush_r+0x78>
 800b4ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4ce:	602f      	str	r7, [r5, #0]
 800b4d0:	b1b9      	cbz	r1, 800b502 <__sflush_r+0xae>
 800b4d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4d6:	4299      	cmp	r1, r3
 800b4d8:	d002      	beq.n	800b4e0 <__sflush_r+0x8c>
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f7ff fc8a 	bl	800adf4 <_free_r>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4e4:	e00d      	b.n	800b502 <__sflush_r+0xae>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b0      	blx	r6
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	1c50      	adds	r0, r2, #1
 800b4f0:	d1c9      	bne.n	800b486 <__sflush_r+0x32>
 800b4f2:	682b      	ldr	r3, [r5, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0c6      	beq.n	800b486 <__sflush_r+0x32>
 800b4f8:	2b1d      	cmp	r3, #29
 800b4fa:	d001      	beq.n	800b500 <__sflush_r+0xac>
 800b4fc:	2b16      	cmp	r3, #22
 800b4fe:	d11e      	bne.n	800b53e <__sflush_r+0xea>
 800b500:	602f      	str	r7, [r5, #0]
 800b502:	2000      	movs	r0, #0
 800b504:	e022      	b.n	800b54c <__sflush_r+0xf8>
 800b506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b50a:	b21b      	sxth	r3, r3
 800b50c:	e01b      	b.n	800b546 <__sflush_r+0xf2>
 800b50e:	690f      	ldr	r7, [r1, #16]
 800b510:	2f00      	cmp	r7, #0
 800b512:	d0f6      	beq.n	800b502 <__sflush_r+0xae>
 800b514:	0793      	lsls	r3, r2, #30
 800b516:	680e      	ldr	r6, [r1, #0]
 800b518:	bf08      	it	eq
 800b51a:	694b      	ldreq	r3, [r1, #20]
 800b51c:	600f      	str	r7, [r1, #0]
 800b51e:	bf18      	it	ne
 800b520:	2300      	movne	r3, #0
 800b522:	eba6 0807 	sub.w	r8, r6, r7
 800b526:	608b      	str	r3, [r1, #8]
 800b528:	f1b8 0f00 	cmp.w	r8, #0
 800b52c:	dde9      	ble.n	800b502 <__sflush_r+0xae>
 800b52e:	6a21      	ldr	r1, [r4, #32]
 800b530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b532:	4643      	mov	r3, r8
 800b534:	463a      	mov	r2, r7
 800b536:	4628      	mov	r0, r5
 800b538:	47b0      	blx	r6
 800b53a:	2800      	cmp	r0, #0
 800b53c:	dc08      	bgt.n	800b550 <__sflush_r+0xfc>
 800b53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b550:	4407      	add	r7, r0
 800b552:	eba8 0800 	sub.w	r8, r8, r0
 800b556:	e7e7      	b.n	800b528 <__sflush_r+0xd4>
 800b558:	dfbffffe 	.word	0xdfbffffe

0800b55c <_fflush_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	690b      	ldr	r3, [r1, #16]
 800b560:	4605      	mov	r5, r0
 800b562:	460c      	mov	r4, r1
 800b564:	b913      	cbnz	r3, 800b56c <_fflush_r+0x10>
 800b566:	2500      	movs	r5, #0
 800b568:	4628      	mov	r0, r5
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	b118      	cbz	r0, 800b576 <_fflush_r+0x1a>
 800b56e:	6a03      	ldr	r3, [r0, #32]
 800b570:	b90b      	cbnz	r3, 800b576 <_fflush_r+0x1a>
 800b572:	f7ff fa3b 	bl	800a9ec <__sinit>
 800b576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0f3      	beq.n	800b566 <_fflush_r+0xa>
 800b57e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b580:	07d0      	lsls	r0, r2, #31
 800b582:	d404      	bmi.n	800b58e <_fflush_r+0x32>
 800b584:	0599      	lsls	r1, r3, #22
 800b586:	d402      	bmi.n	800b58e <_fflush_r+0x32>
 800b588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b58a:	f7ff fc04 	bl	800ad96 <__retarget_lock_acquire_recursive>
 800b58e:	4628      	mov	r0, r5
 800b590:	4621      	mov	r1, r4
 800b592:	f7ff ff5f 	bl	800b454 <__sflush_r>
 800b596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b598:	07da      	lsls	r2, r3, #31
 800b59a:	4605      	mov	r5, r0
 800b59c:	d4e4      	bmi.n	800b568 <_fflush_r+0xc>
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	059b      	lsls	r3, r3, #22
 800b5a2:	d4e1      	bmi.n	800b568 <_fflush_r+0xc>
 800b5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5a6:	f7ff fbf7 	bl	800ad98 <__retarget_lock_release_recursive>
 800b5aa:	e7dd      	b.n	800b568 <_fflush_r+0xc>

0800b5ac <fiprintf>:
 800b5ac:	b40e      	push	{r1, r2, r3}
 800b5ae:	b503      	push	{r0, r1, lr}
 800b5b0:	4601      	mov	r1, r0
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	4805      	ldr	r0, [pc, #20]	@ (800b5cc <fiprintf+0x20>)
 800b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ba:	6800      	ldr	r0, [r0, #0]
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	f000 f87f 	bl	800b6c0 <_vfiprintf_r>
 800b5c2:	b002      	add	sp, #8
 800b5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c8:	b003      	add	sp, #12
 800b5ca:	4770      	bx	lr
 800b5cc:	20000100 	.word	0x20000100

0800b5d0 <memmove>:
 800b5d0:	4288      	cmp	r0, r1
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	eb01 0402 	add.w	r4, r1, r2
 800b5d8:	d902      	bls.n	800b5e0 <memmove+0x10>
 800b5da:	4284      	cmp	r4, r0
 800b5dc:	4623      	mov	r3, r4
 800b5de:	d807      	bhi.n	800b5f0 <memmove+0x20>
 800b5e0:	1e43      	subs	r3, r0, #1
 800b5e2:	42a1      	cmp	r1, r4
 800b5e4:	d008      	beq.n	800b5f8 <memmove+0x28>
 800b5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ee:	e7f8      	b.n	800b5e2 <memmove+0x12>
 800b5f0:	4402      	add	r2, r0
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	428a      	cmp	r2, r1
 800b5f6:	d100      	bne.n	800b5fa <memmove+0x2a>
 800b5f8:	bd10      	pop	{r4, pc}
 800b5fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b602:	e7f7      	b.n	800b5f4 <memmove+0x24>

0800b604 <abort>:
 800b604:	b508      	push	{r3, lr}
 800b606:	2006      	movs	r0, #6
 800b608:	f000 fa2e 	bl	800ba68 <raise>
 800b60c:	2001      	movs	r0, #1
 800b60e:	f7f5 ff19 	bl	8001444 <_exit>

0800b612 <_realloc_r>:
 800b612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b616:	4680      	mov	r8, r0
 800b618:	4615      	mov	r5, r2
 800b61a:	460c      	mov	r4, r1
 800b61c:	b921      	cbnz	r1, 800b628 <_realloc_r+0x16>
 800b61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b622:	4611      	mov	r1, r2
 800b624:	f7ff b846 	b.w	800a6b4 <_malloc_r>
 800b628:	b92a      	cbnz	r2, 800b636 <_realloc_r+0x24>
 800b62a:	f7ff fbe3 	bl	800adf4 <_free_r>
 800b62e:	2400      	movs	r4, #0
 800b630:	4620      	mov	r0, r4
 800b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b636:	f000 fa33 	bl	800baa0 <_malloc_usable_size_r>
 800b63a:	4285      	cmp	r5, r0
 800b63c:	4606      	mov	r6, r0
 800b63e:	d802      	bhi.n	800b646 <_realloc_r+0x34>
 800b640:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b644:	d8f4      	bhi.n	800b630 <_realloc_r+0x1e>
 800b646:	4629      	mov	r1, r5
 800b648:	4640      	mov	r0, r8
 800b64a:	f7ff f833 	bl	800a6b4 <_malloc_r>
 800b64e:	4607      	mov	r7, r0
 800b650:	2800      	cmp	r0, #0
 800b652:	d0ec      	beq.n	800b62e <_realloc_r+0x1c>
 800b654:	42b5      	cmp	r5, r6
 800b656:	462a      	mov	r2, r5
 800b658:	4621      	mov	r1, r4
 800b65a:	bf28      	it	cs
 800b65c:	4632      	movcs	r2, r6
 800b65e:	f7ff fb9c 	bl	800ad9a <memcpy>
 800b662:	4621      	mov	r1, r4
 800b664:	4640      	mov	r0, r8
 800b666:	f7ff fbc5 	bl	800adf4 <_free_r>
 800b66a:	463c      	mov	r4, r7
 800b66c:	e7e0      	b.n	800b630 <_realloc_r+0x1e>

0800b66e <__sfputc_r>:
 800b66e:	6893      	ldr	r3, [r2, #8]
 800b670:	3b01      	subs	r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	b410      	push	{r4}
 800b676:	6093      	str	r3, [r2, #8]
 800b678:	da08      	bge.n	800b68c <__sfputc_r+0x1e>
 800b67a:	6994      	ldr	r4, [r2, #24]
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	db01      	blt.n	800b684 <__sfputc_r+0x16>
 800b680:	290a      	cmp	r1, #10
 800b682:	d103      	bne.n	800b68c <__sfputc_r+0x1e>
 800b684:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b688:	f000 b932 	b.w	800b8f0 <__swbuf_r>
 800b68c:	6813      	ldr	r3, [r2, #0]
 800b68e:	1c58      	adds	r0, r3, #1
 800b690:	6010      	str	r0, [r2, #0]
 800b692:	7019      	strb	r1, [r3, #0]
 800b694:	4608      	mov	r0, r1
 800b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <__sfputs_r>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460f      	mov	r7, r1
 800b6a2:	4614      	mov	r4, r2
 800b6a4:	18d5      	adds	r5, r2, r3
 800b6a6:	42ac      	cmp	r4, r5
 800b6a8:	d101      	bne.n	800b6ae <__sfputs_r+0x12>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e007      	b.n	800b6be <__sfputs_r+0x22>
 800b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f7ff ffda 	bl	800b66e <__sfputc_r>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	d1f3      	bne.n	800b6a6 <__sfputs_r+0xa>
 800b6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6c0 <_vfiprintf_r>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	b09d      	sub	sp, #116	@ 0x74
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	4698      	mov	r8, r3
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	b118      	cbz	r0, 800b6d8 <_vfiprintf_r+0x18>
 800b6d0:	6a03      	ldr	r3, [r0, #32]
 800b6d2:	b90b      	cbnz	r3, 800b6d8 <_vfiprintf_r+0x18>
 800b6d4:	f7ff f98a 	bl	800a9ec <__sinit>
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x2a>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x2a>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6e6:	f7ff fb56 	bl	800ad96 <__retarget_lock_acquire_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	071b      	lsls	r3, r3, #28
 800b6ee:	d501      	bpl.n	800b6f4 <_vfiprintf_r+0x34>
 800b6f0:	692b      	ldr	r3, [r5, #16]
 800b6f2:	b99b      	cbnz	r3, 800b71c <_vfiprintf_r+0x5c>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f000 f938 	bl	800b96c <__swsetup_r>
 800b6fc:	b170      	cbz	r0, 800b71c <_vfiprintf_r+0x5c>
 800b6fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b700:	07dc      	lsls	r4, r3, #31
 800b702:	d504      	bpl.n	800b70e <_vfiprintf_r+0x4e>
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	b01d      	add	sp, #116	@ 0x74
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	89ab      	ldrh	r3, [r5, #12]
 800b710:	0598      	lsls	r0, r3, #22
 800b712:	d4f7      	bmi.n	800b704 <_vfiprintf_r+0x44>
 800b714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b716:	f7ff fb3f 	bl	800ad98 <__retarget_lock_release_recursive>
 800b71a:	e7f3      	b.n	800b704 <_vfiprintf_r+0x44>
 800b71c:	2300      	movs	r3, #0
 800b71e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b720:	2320      	movs	r3, #32
 800b722:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b726:	f8cd 800c 	str.w	r8, [sp, #12]
 800b72a:	2330      	movs	r3, #48	@ 0x30
 800b72c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b8dc <_vfiprintf_r+0x21c>
 800b730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b734:	f04f 0901 	mov.w	r9, #1
 800b738:	4623      	mov	r3, r4
 800b73a:	469a      	mov	sl, r3
 800b73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b740:	b10a      	cbz	r2, 800b746 <_vfiprintf_r+0x86>
 800b742:	2a25      	cmp	r2, #37	@ 0x25
 800b744:	d1f9      	bne.n	800b73a <_vfiprintf_r+0x7a>
 800b746:	ebba 0b04 	subs.w	fp, sl, r4
 800b74a:	d00b      	beq.n	800b764 <_vfiprintf_r+0xa4>
 800b74c:	465b      	mov	r3, fp
 800b74e:	4622      	mov	r2, r4
 800b750:	4629      	mov	r1, r5
 800b752:	4630      	mov	r0, r6
 800b754:	f7ff ffa2 	bl	800b69c <__sfputs_r>
 800b758:	3001      	adds	r0, #1
 800b75a:	f000 80a7 	beq.w	800b8ac <_vfiprintf_r+0x1ec>
 800b75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b760:	445a      	add	r2, fp
 800b762:	9209      	str	r2, [sp, #36]	@ 0x24
 800b764:	f89a 3000 	ldrb.w	r3, [sl]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 809f 	beq.w	800b8ac <_vfiprintf_r+0x1ec>
 800b76e:	2300      	movs	r3, #0
 800b770:	f04f 32ff 	mov.w	r2, #4294967295
 800b774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b778:	f10a 0a01 	add.w	sl, sl, #1
 800b77c:	9304      	str	r3, [sp, #16]
 800b77e:	9307      	str	r3, [sp, #28]
 800b780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b784:	931a      	str	r3, [sp, #104]	@ 0x68
 800b786:	4654      	mov	r4, sl
 800b788:	2205      	movs	r2, #5
 800b78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78e:	4853      	ldr	r0, [pc, #332]	@ (800b8dc <_vfiprintf_r+0x21c>)
 800b790:	f7f4 fd36 	bl	8000200 <memchr>
 800b794:	9a04      	ldr	r2, [sp, #16]
 800b796:	b9d8      	cbnz	r0, 800b7d0 <_vfiprintf_r+0x110>
 800b798:	06d1      	lsls	r1, r2, #27
 800b79a:	bf44      	itt	mi
 800b79c:	2320      	movmi	r3, #32
 800b79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7a2:	0713      	lsls	r3, r2, #28
 800b7a4:	bf44      	itt	mi
 800b7a6:	232b      	movmi	r3, #43	@ 0x2b
 800b7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b2:	d015      	beq.n	800b7e0 <_vfiprintf_r+0x120>
 800b7b4:	9a07      	ldr	r2, [sp, #28]
 800b7b6:	4654      	mov	r4, sl
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	f04f 0c0a 	mov.w	ip, #10
 800b7be:	4621      	mov	r1, r4
 800b7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c4:	3b30      	subs	r3, #48	@ 0x30
 800b7c6:	2b09      	cmp	r3, #9
 800b7c8:	d94b      	bls.n	800b862 <_vfiprintf_r+0x1a2>
 800b7ca:	b1b0      	cbz	r0, 800b7fa <_vfiprintf_r+0x13a>
 800b7cc:	9207      	str	r2, [sp, #28]
 800b7ce:	e014      	b.n	800b7fa <_vfiprintf_r+0x13a>
 800b7d0:	eba0 0308 	sub.w	r3, r0, r8
 800b7d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	46a2      	mov	sl, r4
 800b7de:	e7d2      	b.n	800b786 <_vfiprintf_r+0xc6>
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	1d19      	adds	r1, r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	9103      	str	r1, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfbb      	ittet	lt
 800b7ec:	425b      	neglt	r3, r3
 800b7ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f2:	9307      	strge	r3, [sp, #28]
 800b7f4:	9307      	strlt	r3, [sp, #28]
 800b7f6:	bfb8      	it	lt
 800b7f8:	9204      	strlt	r2, [sp, #16]
 800b7fa:	7823      	ldrb	r3, [r4, #0]
 800b7fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7fe:	d10a      	bne.n	800b816 <_vfiprintf_r+0x156>
 800b800:	7863      	ldrb	r3, [r4, #1]
 800b802:	2b2a      	cmp	r3, #42	@ 0x2a
 800b804:	d132      	bne.n	800b86c <_vfiprintf_r+0x1ac>
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	1d1a      	adds	r2, r3, #4
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	9203      	str	r2, [sp, #12]
 800b80e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b812:	3402      	adds	r4, #2
 800b814:	9305      	str	r3, [sp, #20]
 800b816:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b8ec <_vfiprintf_r+0x22c>
 800b81a:	7821      	ldrb	r1, [r4, #0]
 800b81c:	2203      	movs	r2, #3
 800b81e:	4650      	mov	r0, sl
 800b820:	f7f4 fcee 	bl	8000200 <memchr>
 800b824:	b138      	cbz	r0, 800b836 <_vfiprintf_r+0x176>
 800b826:	9b04      	ldr	r3, [sp, #16]
 800b828:	eba0 000a 	sub.w	r0, r0, sl
 800b82c:	2240      	movs	r2, #64	@ 0x40
 800b82e:	4082      	lsls	r2, r0
 800b830:	4313      	orrs	r3, r2
 800b832:	3401      	adds	r4, #1
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83a:	4829      	ldr	r0, [pc, #164]	@ (800b8e0 <_vfiprintf_r+0x220>)
 800b83c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b840:	2206      	movs	r2, #6
 800b842:	f7f4 fcdd 	bl	8000200 <memchr>
 800b846:	2800      	cmp	r0, #0
 800b848:	d03f      	beq.n	800b8ca <_vfiprintf_r+0x20a>
 800b84a:	4b26      	ldr	r3, [pc, #152]	@ (800b8e4 <_vfiprintf_r+0x224>)
 800b84c:	bb1b      	cbnz	r3, 800b896 <_vfiprintf_r+0x1d6>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	3307      	adds	r3, #7
 800b852:	f023 0307 	bic.w	r3, r3, #7
 800b856:	3308      	adds	r3, #8
 800b858:	9303      	str	r3, [sp, #12]
 800b85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85c:	443b      	add	r3, r7
 800b85e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b860:	e76a      	b.n	800b738 <_vfiprintf_r+0x78>
 800b862:	fb0c 3202 	mla	r2, ip, r2, r3
 800b866:	460c      	mov	r4, r1
 800b868:	2001      	movs	r0, #1
 800b86a:	e7a8      	b.n	800b7be <_vfiprintf_r+0xfe>
 800b86c:	2300      	movs	r3, #0
 800b86e:	3401      	adds	r4, #1
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	4619      	mov	r1, r3
 800b874:	f04f 0c0a 	mov.w	ip, #10
 800b878:	4620      	mov	r0, r4
 800b87a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b87e:	3a30      	subs	r2, #48	@ 0x30
 800b880:	2a09      	cmp	r2, #9
 800b882:	d903      	bls.n	800b88c <_vfiprintf_r+0x1cc>
 800b884:	2b00      	cmp	r3, #0
 800b886:	d0c6      	beq.n	800b816 <_vfiprintf_r+0x156>
 800b888:	9105      	str	r1, [sp, #20]
 800b88a:	e7c4      	b.n	800b816 <_vfiprintf_r+0x156>
 800b88c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b890:	4604      	mov	r4, r0
 800b892:	2301      	movs	r3, #1
 800b894:	e7f0      	b.n	800b878 <_vfiprintf_r+0x1b8>
 800b896:	ab03      	add	r3, sp, #12
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	462a      	mov	r2, r5
 800b89c:	4b12      	ldr	r3, [pc, #72]	@ (800b8e8 <_vfiprintf_r+0x228>)
 800b89e:	a904      	add	r1, sp, #16
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f3af 8000 	nop.w
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	1c78      	adds	r0, r7, #1
 800b8aa:	d1d6      	bne.n	800b85a <_vfiprintf_r+0x19a>
 800b8ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ae:	07d9      	lsls	r1, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_vfiprintf_r+0x1fe>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_vfiprintf_r+0x1fe>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8ba:	f7ff fa6d 	bl	800ad98 <__retarget_lock_release_recursive>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	065b      	lsls	r3, r3, #25
 800b8c2:	f53f af1f 	bmi.w	800b704 <_vfiprintf_r+0x44>
 800b8c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8c8:	e71e      	b.n	800b708 <_vfiprintf_r+0x48>
 800b8ca:	ab03      	add	r3, sp, #12
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4b05      	ldr	r3, [pc, #20]	@ (800b8e8 <_vfiprintf_r+0x228>)
 800b8d2:	a904      	add	r1, sp, #16
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7ff fc9d 	bl	800b214 <_printf_i>
 800b8da:	e7e4      	b.n	800b8a6 <_vfiprintf_r+0x1e6>
 800b8dc:	0800c082 	.word	0x0800c082
 800b8e0:	0800c08c 	.word	0x0800c08c
 800b8e4:	00000000 	.word	0x00000000
 800b8e8:	0800b69d 	.word	0x0800b69d
 800b8ec:	0800c088 	.word	0x0800c088

0800b8f0 <__swbuf_r>:
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	460e      	mov	r6, r1
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	b118      	cbz	r0, 800b902 <__swbuf_r+0x12>
 800b8fa:	6a03      	ldr	r3, [r0, #32]
 800b8fc:	b90b      	cbnz	r3, 800b902 <__swbuf_r+0x12>
 800b8fe:	f7ff f875 	bl	800a9ec <__sinit>
 800b902:	69a3      	ldr	r3, [r4, #24]
 800b904:	60a3      	str	r3, [r4, #8]
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	071a      	lsls	r2, r3, #28
 800b90a:	d501      	bpl.n	800b910 <__swbuf_r+0x20>
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	b943      	cbnz	r3, 800b922 <__swbuf_r+0x32>
 800b910:	4621      	mov	r1, r4
 800b912:	4628      	mov	r0, r5
 800b914:	f000 f82a 	bl	800b96c <__swsetup_r>
 800b918:	b118      	cbz	r0, 800b922 <__swbuf_r+0x32>
 800b91a:	f04f 37ff 	mov.w	r7, #4294967295
 800b91e:	4638      	mov	r0, r7
 800b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	6922      	ldr	r2, [r4, #16]
 800b926:	1a98      	subs	r0, r3, r2
 800b928:	6963      	ldr	r3, [r4, #20]
 800b92a:	b2f6      	uxtb	r6, r6
 800b92c:	4283      	cmp	r3, r0
 800b92e:	4637      	mov	r7, r6
 800b930:	dc05      	bgt.n	800b93e <__swbuf_r+0x4e>
 800b932:	4621      	mov	r1, r4
 800b934:	4628      	mov	r0, r5
 800b936:	f7ff fe11 	bl	800b55c <_fflush_r>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d1ed      	bne.n	800b91a <__swbuf_r+0x2a>
 800b93e:	68a3      	ldr	r3, [r4, #8]
 800b940:	3b01      	subs	r3, #1
 800b942:	60a3      	str	r3, [r4, #8]
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	6022      	str	r2, [r4, #0]
 800b94a:	701e      	strb	r6, [r3, #0]
 800b94c:	6962      	ldr	r2, [r4, #20]
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	429a      	cmp	r2, r3
 800b952:	d004      	beq.n	800b95e <__swbuf_r+0x6e>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	07db      	lsls	r3, r3, #31
 800b958:	d5e1      	bpl.n	800b91e <__swbuf_r+0x2e>
 800b95a:	2e0a      	cmp	r6, #10
 800b95c:	d1df      	bne.n	800b91e <__swbuf_r+0x2e>
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f7ff fdfb 	bl	800b55c <_fflush_r>
 800b966:	2800      	cmp	r0, #0
 800b968:	d0d9      	beq.n	800b91e <__swbuf_r+0x2e>
 800b96a:	e7d6      	b.n	800b91a <__swbuf_r+0x2a>

0800b96c <__swsetup_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4b29      	ldr	r3, [pc, #164]	@ (800ba14 <__swsetup_r+0xa8>)
 800b970:	4605      	mov	r5, r0
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	460c      	mov	r4, r1
 800b976:	b118      	cbz	r0, 800b980 <__swsetup_r+0x14>
 800b978:	6a03      	ldr	r3, [r0, #32]
 800b97a:	b90b      	cbnz	r3, 800b980 <__swsetup_r+0x14>
 800b97c:	f7ff f836 	bl	800a9ec <__sinit>
 800b980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b984:	0719      	lsls	r1, r3, #28
 800b986:	d422      	bmi.n	800b9ce <__swsetup_r+0x62>
 800b988:	06da      	lsls	r2, r3, #27
 800b98a:	d407      	bmi.n	800b99c <__swsetup_r+0x30>
 800b98c:	2209      	movs	r2, #9
 800b98e:	602a      	str	r2, [r5, #0]
 800b990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	e033      	b.n	800ba04 <__swsetup_r+0x98>
 800b99c:	0758      	lsls	r0, r3, #29
 800b99e:	d512      	bpl.n	800b9c6 <__swsetup_r+0x5a>
 800b9a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9a2:	b141      	cbz	r1, 800b9b6 <__swsetup_r+0x4a>
 800b9a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9a8:	4299      	cmp	r1, r3
 800b9aa:	d002      	beq.n	800b9b2 <__swsetup_r+0x46>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f7ff fa21 	bl	800adf4 <_free_r>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	f043 0308 	orr.w	r3, r3, #8
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	b94b      	cbnz	r3, 800b9e6 <__swsetup_r+0x7a>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9dc:	d003      	beq.n	800b9e6 <__swsetup_r+0x7a>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f000 f88b 	bl	800bafc <__smakebuf_r>
 800b9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ea:	f013 0201 	ands.w	r2, r3, #1
 800b9ee:	d00a      	beq.n	800ba06 <__swsetup_r+0x9a>
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	60a2      	str	r2, [r4, #8]
 800b9f4:	6962      	ldr	r2, [r4, #20]
 800b9f6:	4252      	negs	r2, r2
 800b9f8:	61a2      	str	r2, [r4, #24]
 800b9fa:	6922      	ldr	r2, [r4, #16]
 800b9fc:	b942      	cbnz	r2, 800ba10 <__swsetup_r+0xa4>
 800b9fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba02:	d1c5      	bne.n	800b990 <__swsetup_r+0x24>
 800ba04:	bd38      	pop	{r3, r4, r5, pc}
 800ba06:	0799      	lsls	r1, r3, #30
 800ba08:	bf58      	it	pl
 800ba0a:	6962      	ldrpl	r2, [r4, #20]
 800ba0c:	60a2      	str	r2, [r4, #8]
 800ba0e:	e7f4      	b.n	800b9fa <__swsetup_r+0x8e>
 800ba10:	2000      	movs	r0, #0
 800ba12:	e7f7      	b.n	800ba04 <__swsetup_r+0x98>
 800ba14:	20000100 	.word	0x20000100

0800ba18 <_raise_r>:
 800ba18:	291f      	cmp	r1, #31
 800ba1a:	b538      	push	{r3, r4, r5, lr}
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	460c      	mov	r4, r1
 800ba20:	d904      	bls.n	800ba2c <_raise_r+0x14>
 800ba22:	2316      	movs	r3, #22
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba2e:	b112      	cbz	r2, 800ba36 <_raise_r+0x1e>
 800ba30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba34:	b94b      	cbnz	r3, 800ba4a <_raise_r+0x32>
 800ba36:	4628      	mov	r0, r5
 800ba38:	f000 f830 	bl	800ba9c <_getpid_r>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	4601      	mov	r1, r0
 800ba40:	4628      	mov	r0, r5
 800ba42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba46:	f000 b817 	b.w	800ba78 <_kill_r>
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d00a      	beq.n	800ba64 <_raise_r+0x4c>
 800ba4e:	1c59      	adds	r1, r3, #1
 800ba50:	d103      	bne.n	800ba5a <_raise_r+0x42>
 800ba52:	2316      	movs	r3, #22
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7e7      	b.n	800ba2a <_raise_r+0x12>
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba60:	4620      	mov	r0, r4
 800ba62:	4798      	blx	r3
 800ba64:	2000      	movs	r0, #0
 800ba66:	e7e0      	b.n	800ba2a <_raise_r+0x12>

0800ba68 <raise>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	@ (800ba74 <raise+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f7ff bfd3 	b.w	800ba18 <_raise_r>
 800ba72:	bf00      	nop
 800ba74:	20000100 	.word	0x20000100

0800ba78 <_kill_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	@ (800ba98 <_kill_r+0x20>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	4611      	mov	r1, r2
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	f7f5 fccd 	bl	8001424 <_kill>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d102      	bne.n	800ba94 <_kill_r+0x1c>
 800ba8e:	682b      	ldr	r3, [r5, #0]
 800ba90:	b103      	cbz	r3, 800ba94 <_kill_r+0x1c>
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	bd38      	pop	{r3, r4, r5, pc}
 800ba96:	bf00      	nop
 800ba98:	20002ac4 	.word	0x20002ac4

0800ba9c <_getpid_r>:
 800ba9c:	f7f5 bcba 	b.w	8001414 <_getpid>

0800baa0 <_malloc_usable_size_r>:
 800baa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa4:	1f18      	subs	r0, r3, #4
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfbc      	itt	lt
 800baaa:	580b      	ldrlt	r3, [r1, r0]
 800baac:	18c0      	addlt	r0, r0, r3
 800baae:	4770      	bx	lr

0800bab0 <__swhatbuf_r>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	460c      	mov	r4, r1
 800bab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab8:	2900      	cmp	r1, #0
 800baba:	b096      	sub	sp, #88	@ 0x58
 800babc:	4615      	mov	r5, r2
 800babe:	461e      	mov	r6, r3
 800bac0:	da0d      	bge.n	800bade <__swhatbuf_r+0x2e>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bac8:	f04f 0100 	mov.w	r1, #0
 800bacc:	bf14      	ite	ne
 800bace:	2340      	movne	r3, #64	@ 0x40
 800bad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bad4:	2000      	movs	r0, #0
 800bad6:	6031      	str	r1, [r6, #0]
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	b016      	add	sp, #88	@ 0x58
 800badc:	bd70      	pop	{r4, r5, r6, pc}
 800bade:	466a      	mov	r2, sp
 800bae0:	f000 f848 	bl	800bb74 <_fstat_r>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	dbec      	blt.n	800bac2 <__swhatbuf_r+0x12>
 800bae8:	9901      	ldr	r1, [sp, #4]
 800baea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800baee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800baf2:	4259      	negs	r1, r3
 800baf4:	4159      	adcs	r1, r3
 800baf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bafa:	e7eb      	b.n	800bad4 <__swhatbuf_r+0x24>

0800bafc <__smakebuf_r>:
 800bafc:	898b      	ldrh	r3, [r1, #12]
 800bafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb00:	079d      	lsls	r5, r3, #30
 800bb02:	4606      	mov	r6, r0
 800bb04:	460c      	mov	r4, r1
 800bb06:	d507      	bpl.n	800bb18 <__smakebuf_r+0x1c>
 800bb08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	6123      	str	r3, [r4, #16]
 800bb10:	2301      	movs	r3, #1
 800bb12:	6163      	str	r3, [r4, #20]
 800bb14:	b003      	add	sp, #12
 800bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb18:	ab01      	add	r3, sp, #4
 800bb1a:	466a      	mov	r2, sp
 800bb1c:	f7ff ffc8 	bl	800bab0 <__swhatbuf_r>
 800bb20:	9f00      	ldr	r7, [sp, #0]
 800bb22:	4605      	mov	r5, r0
 800bb24:	4639      	mov	r1, r7
 800bb26:	4630      	mov	r0, r6
 800bb28:	f7fe fdc4 	bl	800a6b4 <_malloc_r>
 800bb2c:	b948      	cbnz	r0, 800bb42 <__smakebuf_r+0x46>
 800bb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb32:	059a      	lsls	r2, r3, #22
 800bb34:	d4ee      	bmi.n	800bb14 <__smakebuf_r+0x18>
 800bb36:	f023 0303 	bic.w	r3, r3, #3
 800bb3a:	f043 0302 	orr.w	r3, r3, #2
 800bb3e:	81a3      	strh	r3, [r4, #12]
 800bb40:	e7e2      	b.n	800bb08 <__smakebuf_r+0xc>
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	6020      	str	r0, [r4, #0]
 800bb46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb52:	b15b      	cbz	r3, 800bb6c <__smakebuf_r+0x70>
 800bb54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f000 f81d 	bl	800bb98 <_isatty_r>
 800bb5e:	b128      	cbz	r0, 800bb6c <__smakebuf_r+0x70>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	f043 0301 	orr.w	r3, r3, #1
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	431d      	orrs	r5, r3
 800bb70:	81a5      	strh	r5, [r4, #12]
 800bb72:	e7cf      	b.n	800bb14 <__smakebuf_r+0x18>

0800bb74 <_fstat_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d07      	ldr	r5, [pc, #28]	@ (800bb94 <_fstat_r+0x20>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	4611      	mov	r1, r2
 800bb80:	602b      	str	r3, [r5, #0]
 800bb82:	f7f5 fcaf 	bl	80014e4 <_fstat>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	d102      	bne.n	800bb90 <_fstat_r+0x1c>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	b103      	cbz	r3, 800bb90 <_fstat_r+0x1c>
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
 800bb92:	bf00      	nop
 800bb94:	20002ac4 	.word	0x20002ac4

0800bb98 <_isatty_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4d06      	ldr	r5, [pc, #24]	@ (800bbb4 <_isatty_r+0x1c>)
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	602b      	str	r3, [r5, #0]
 800bba4:	f7f5 fcae 	bl	8001504 <_isatty>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_isatty_r+0x1a>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_isatty_r+0x1a>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	20002ac4 	.word	0x20002ac4

0800bbb8 <_init>:
 800bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbba:	bf00      	nop
 800bbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbbe:	bc08      	pop	{r3}
 800bbc0:	469e      	mov	lr, r3
 800bbc2:	4770      	bx	lr

0800bbc4 <_fini>:
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc6:	bf00      	nop
 800bbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbca:	bc08      	pop	{r3}
 800bbcc:	469e      	mov	lr, r3
 800bbce:	4770      	bx	lr
