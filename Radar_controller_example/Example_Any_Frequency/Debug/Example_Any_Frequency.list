
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b874  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800ba04  0800ba04  0000ca04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed8  0800bed8  0000d150  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee0  0800bee0  0000d150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee0  0800bee0  0000cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800bee8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d2c  20000150  0800c038  0000d150  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001e7c  0800c038  0000de7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cd4  00000000  00000000  0000d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000587b  00000000  00000000  00030e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001772  00000000  00000000  00038570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d9b1  00000000  00000000  00039ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002761d  00000000  00000000  00067693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105441  00000000  00000000  0008ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001940f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aec  00000000  00000000  00194134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  0019cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9ec 	.word	0x0800b9ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800b9ec 	.word	0x0800b9ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b96a 	b.w	8000944 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	460c      	mov	r4, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14e      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000694:	4694      	mov	ip, r2
 8000696:	458c      	cmp	ip, r1
 8000698:	4686      	mov	lr, r0
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	d962      	bls.n	8000766 <__udivmoddi4+0xde>
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0320 	rsb	r3, r2, #32
 80006a6:	4091      	lsls	r1, r2
 80006a8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b0:	4319      	orrs	r1, r3
 80006b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ba:	fa1f f68c 	uxth.w	r6, ip
 80006be:	fbb1 f4f7 	udiv	r4, r1, r7
 80006c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006c6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ce:	fb04 f106 	mul.w	r1, r4, r6
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f104 30ff 	add.w	r0, r4, #4294967295
 80006de:	f080 8112 	bcs.w	8000906 <__udivmoddi4+0x27e>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 810f 	bls.w	8000906 <__udivmoddi4+0x27e>
 80006e8:	3c02      	subs	r4, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a59      	subs	r1, r3, r1
 80006ee:	fa1f f38e 	uxth.w	r3, lr
 80006f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f6:	fb07 1110 	mls	r1, r7, r0, r1
 80006fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006fe:	fb00 f606 	mul.w	r6, r0, r6
 8000702:	429e      	cmp	r6, r3
 8000704:	d90a      	bls.n	800071c <__udivmoddi4+0x94>
 8000706:	eb1c 0303 	adds.w	r3, ip, r3
 800070a:	f100 31ff 	add.w	r1, r0, #4294967295
 800070e:	f080 80fc 	bcs.w	800090a <__udivmoddi4+0x282>
 8000712:	429e      	cmp	r6, r3
 8000714:	f240 80f9 	bls.w	800090a <__udivmoddi4+0x282>
 8000718:	4463      	add	r3, ip
 800071a:	3802      	subs	r0, #2
 800071c:	1b9b      	subs	r3, r3, r6
 800071e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000722:	2100      	movs	r1, #0
 8000724:	b11d      	cbz	r5, 800072e <__udivmoddi4+0xa6>
 8000726:	40d3      	lsrs	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	e9c5 3200 	strd	r3, r2, [r5]
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d905      	bls.n	8000742 <__udivmoddi4+0xba>
 8000736:	b10d      	cbz	r5, 800073c <__udivmoddi4+0xb4>
 8000738:	e9c5 0100 	strd	r0, r1, [r5]
 800073c:	2100      	movs	r1, #0
 800073e:	4608      	mov	r0, r1
 8000740:	e7f5      	b.n	800072e <__udivmoddi4+0xa6>
 8000742:	fab3 f183 	clz	r1, r3
 8000746:	2900      	cmp	r1, #0
 8000748:	d146      	bne.n	80007d8 <__udivmoddi4+0x150>
 800074a:	42a3      	cmp	r3, r4
 800074c:	d302      	bcc.n	8000754 <__udivmoddi4+0xcc>
 800074e:	4290      	cmp	r0, r2
 8000750:	f0c0 80f0 	bcc.w	8000934 <__udivmoddi4+0x2ac>
 8000754:	1a86      	subs	r6, r0, r2
 8000756:	eb64 0303 	sbc.w	r3, r4, r3
 800075a:	2001      	movs	r0, #1
 800075c:	2d00      	cmp	r5, #0
 800075e:	d0e6      	beq.n	800072e <__udivmoddi4+0xa6>
 8000760:	e9c5 6300 	strd	r6, r3, [r5]
 8000764:	e7e3      	b.n	800072e <__udivmoddi4+0xa6>
 8000766:	2a00      	cmp	r2, #0
 8000768:	f040 8090 	bne.w	800088c <__udivmoddi4+0x204>
 800076c:	eba1 040c 	sub.w	r4, r1, ip
 8000770:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000774:	fa1f f78c 	uxth.w	r7, ip
 8000778:	2101      	movs	r1, #1
 800077a:	fbb4 f6f8 	udiv	r6, r4, r8
 800077e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000782:	fb08 4416 	mls	r4, r8, r6, r4
 8000786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078a:	fb07 f006 	mul.w	r0, r7, r6
 800078e:	4298      	cmp	r0, r3
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x11c>
 8000792:	eb1c 0303 	adds.w	r3, ip, r3
 8000796:	f106 34ff 	add.w	r4, r6, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x11a>
 800079c:	4298      	cmp	r0, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2b4>
 80007a2:	4626      	mov	r6, r4
 80007a4:	1a1c      	subs	r4, r3, r0
 80007a6:	fa1f f38e 	uxth.w	r3, lr
 80007aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ae:	fb08 4410 	mls	r4, r8, r0, r4
 80007b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007b6:	fb00 f707 	mul.w	r7, r0, r7
 80007ba:	429f      	cmp	r7, r3
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x148>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c6:	d202      	bcs.n	80007ce <__udivmoddi4+0x146>
 80007c8:	429f      	cmp	r7, r3
 80007ca:	f200 80b0 	bhi.w	800092e <__udivmoddi4+0x2a6>
 80007ce:	4620      	mov	r0, r4
 80007d0:	1bdb      	subs	r3, r3, r7
 80007d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d6:	e7a5      	b.n	8000724 <__udivmoddi4+0x9c>
 80007d8:	f1c1 0620 	rsb	r6, r1, #32
 80007dc:	408b      	lsls	r3, r1
 80007de:	fa22 f706 	lsr.w	r7, r2, r6
 80007e2:	431f      	orrs	r7, r3
 80007e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007e8:	fa04 f301 	lsl.w	r3, r4, r1
 80007ec:	ea43 030c 	orr.w	r3, r3, ip
 80007f0:	40f4      	lsrs	r4, r6
 80007f2:	fa00 f801 	lsl.w	r8, r0, r1
 80007f6:	0c38      	lsrs	r0, r7, #16
 80007f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000800:	fa1f fc87 	uxth.w	ip, r7
 8000804:	fb00 441e 	mls	r4, r0, lr, r4
 8000808:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080c:	fb0e f90c 	mul.w	r9, lr, ip
 8000810:	45a1      	cmp	r9, r4
 8000812:	fa02 f201 	lsl.w	r2, r2, r1
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x1a6>
 8000818:	193c      	adds	r4, r7, r4
 800081a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800081e:	f080 8084 	bcs.w	800092a <__udivmoddi4+0x2a2>
 8000822:	45a1      	cmp	r9, r4
 8000824:	f240 8081 	bls.w	800092a <__udivmoddi4+0x2a2>
 8000828:	f1ae 0e02 	sub.w	lr, lr, #2
 800082c:	443c      	add	r4, r7
 800082e:	eba4 0409 	sub.w	r4, r4, r9
 8000832:	fa1f f983 	uxth.w	r9, r3
 8000836:	fbb4 f3f0 	udiv	r3, r4, r0
 800083a:	fb00 4413 	mls	r4, r0, r3, r4
 800083e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000842:	fb03 fc0c 	mul.w	ip, r3, ip
 8000846:	45a4      	cmp	ip, r4
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x1d2>
 800084a:	193c      	adds	r4, r7, r4
 800084c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000850:	d267      	bcs.n	8000922 <__udivmoddi4+0x29a>
 8000852:	45a4      	cmp	ip, r4
 8000854:	d965      	bls.n	8000922 <__udivmoddi4+0x29a>
 8000856:	3b02      	subs	r3, #2
 8000858:	443c      	add	r4, r7
 800085a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800085e:	fba0 9302 	umull	r9, r3, r0, r2
 8000862:	eba4 040c 	sub.w	r4, r4, ip
 8000866:	429c      	cmp	r4, r3
 8000868:	46ce      	mov	lr, r9
 800086a:	469c      	mov	ip, r3
 800086c:	d351      	bcc.n	8000912 <__udivmoddi4+0x28a>
 800086e:	d04e      	beq.n	800090e <__udivmoddi4+0x286>
 8000870:	b155      	cbz	r5, 8000888 <__udivmoddi4+0x200>
 8000872:	ebb8 030e 	subs.w	r3, r8, lr
 8000876:	eb64 040c 	sbc.w	r4, r4, ip
 800087a:	fa04 f606 	lsl.w	r6, r4, r6
 800087e:	40cb      	lsrs	r3, r1
 8000880:	431e      	orrs	r6, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c5 6400 	strd	r6, r4, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	e750      	b.n	800072e <__udivmoddi4+0xa6>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f103 	lsr.w	r1, r0, r3
 8000894:	fa0c fc02 	lsl.w	ip, ip, r2
 8000898:	fa24 f303 	lsr.w	r3, r4, r3
 800089c:	4094      	lsls	r4, r2
 800089e:	430c      	orrs	r4, r1
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a8:	fa1f f78c 	uxth.w	r7, ip
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3110 	mls	r1, r8, r0, r3
 80008b4:	0c23      	lsrs	r3, r4, #16
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f107 	mul.w	r1, r0, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x24c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ca:	d22c      	bcs.n	8000926 <__udivmoddi4+0x29e>
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d92a      	bls.n	8000926 <__udivmoddi4+0x29e>
 80008d0:	3802      	subs	r0, #2
 80008d2:	4463      	add	r3, ip
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008dc:	fb08 3311 	mls	r3, r8, r1, r3
 80008e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e4:	fb01 f307 	mul.w	r3, r1, r7
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x276>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008f4:	d213      	bcs.n	800091e <__udivmoddi4+0x296>
 80008f6:	42a3      	cmp	r3, r4
 80008f8:	d911      	bls.n	800091e <__udivmoddi4+0x296>
 80008fa:	3902      	subs	r1, #2
 80008fc:	4464      	add	r4, ip
 80008fe:	1ae4      	subs	r4, r4, r3
 8000900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000904:	e739      	b.n	800077a <__udivmoddi4+0xf2>
 8000906:	4604      	mov	r4, r0
 8000908:	e6f0      	b.n	80006ec <__udivmoddi4+0x64>
 800090a:	4608      	mov	r0, r1
 800090c:	e706      	b.n	800071c <__udivmoddi4+0x94>
 800090e:	45c8      	cmp	r8, r9
 8000910:	d2ae      	bcs.n	8000870 <__udivmoddi4+0x1e8>
 8000912:	ebb9 0e02 	subs.w	lr, r9, r2
 8000916:	eb63 0c07 	sbc.w	ip, r3, r7
 800091a:	3801      	subs	r0, #1
 800091c:	e7a8      	b.n	8000870 <__udivmoddi4+0x1e8>
 800091e:	4631      	mov	r1, r6
 8000920:	e7ed      	b.n	80008fe <__udivmoddi4+0x276>
 8000922:	4603      	mov	r3, r0
 8000924:	e799      	b.n	800085a <__udivmoddi4+0x1d2>
 8000926:	4630      	mov	r0, r6
 8000928:	e7d4      	b.n	80008d4 <__udivmoddi4+0x24c>
 800092a:	46d6      	mov	lr, sl
 800092c:	e77f      	b.n	800082e <__udivmoddi4+0x1a6>
 800092e:	4463      	add	r3, ip
 8000930:	3802      	subs	r0, #2
 8000932:	e74d      	b.n	80007d0 <__udivmoddi4+0x148>
 8000934:	4606      	mov	r6, r0
 8000936:	4623      	mov	r3, r4
 8000938:	4608      	mov	r0, r1
 800093a:	e70f      	b.n	800075c <__udivmoddi4+0xd4>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	e730      	b.n	80007a4 <__udivmoddi4+0x11c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

HAL_StatusTypeDef Initialize_Delay()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <Initialize_Delay+0x10>)
 800094e:	f004 fedb 	bl	8005708 <HAL_TIM_Base_Start>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000027c 	.word	0x2000027c

0800095c <delay_us>:

void delay_us(uint32_t us)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	taskENTER_CRITICAL();
 8000964:	f009 fac0 	bl	8009ee8 <vPortEnterCritical>
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000968:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <delay_us+0x44>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096e:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000974:	e003      	b.n	800097e <delay_us+0x22>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <delay_us+0x44>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097c:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	bfb8      	it	lt
 8000988:	425b      	neglt	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4293      	cmp	r3, r2
 8000990:	d8f1      	bhi.n	8000976 <delay_us+0x1a>
	}
	taskEXIT_CRITICAL();
 8000992:	f009 fadb 	bl	8009f4c <vPortExitCritical>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000

080009a4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f002 f911 	bl	8002bd4 <HAL_Delay>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009f0:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_FREERTOS_Init+0x48>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <MX_FREERTOS_Init+0x4c>)
 80009f6:	f006 fd91 	bl	800751c <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <MX_FREERTOS_Init+0x50>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 8000a00:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <MX_FREERTOS_Init+0x54>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <MX_FREERTOS_Init+0x58>)
 8000a06:	f006 fd89 	bl	800751c <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <MX_FREERTOS_Init+0x5c>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 8000a10:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <MX_FREERTOS_Init+0x60>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <MX_FREERTOS_Init+0x64>)
 8000a16:	f006 fd81 	bl	800751c <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <MX_FREERTOS_Init+0x68>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* creation of at_cmds_handler */
  at_cmds_handlerHandle = osThreadNew(StartATCmds, NULL, &at_cmds_handler_attributes);
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <MX_FREERTOS_Init+0x6c>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_FREERTOS_Init+0x70>)
 8000a26:	f006 fd79 	bl	800751c <osThreadNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <MX_FREERTOS_Init+0x74>)
 8000a2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0800bc1c 	.word	0x0800bc1c
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	200001b8 	.word	0x200001b8
 8000a40:	0800bc40 	.word	0x0800bc40
 8000a44:	08000a71 	.word	0x08000a71
 8000a48:	200001bc 	.word	0x200001bc
 8000a4c:	0800bc64 	.word	0x0800bc64
 8000a50:	08000a8d 	.word	0x08000a8d
 8000a54:	200001c0 	.word	0x200001c0
 8000a58:	0800bc88 	.word	0x0800bc88
 8000a5c:	08000a9d 	.word	0x08000a9d
 8000a60:	200001c4 	.word	0x200001c4

08000a64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t tmp_buf[20];
	uint8_t len;
  /* Infinite loop */
	for(;;)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <StartDefaultTask+0x8>

08000a70 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
	for(;;)
	{
	//	  UARTLog("Hello World\n\r");
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f006 fe2c 	bl	80076dc <osThreadFlagsWait>
		ad7676_start_conversion();
 8000a84:	f000 ff8e 	bl	80019a4 <ad7676_start_conversion>
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8000a88:	bf00      	nop
 8000a8a:	e7f5      	b.n	8000a78 <StartADC+0x8>

08000a8c <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
//	ADF5355_Param_Init();
//	basic_example_main(&hadf5355);
  /* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f006 fea2 	bl	80077de <osDelay>
 8000a9a:	e7fb      	b.n	8000a94 <StartPLL+0x8>

08000a9c <StartATCmds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartATCmds */
void StartATCmds(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartATCmds */
	uint8_t received_data[32];
	//	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <StartATCmds+0x40>)
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <StartATCmds+0x44>)
 8000aaa:	f006 fc55 	bl	8007358 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
	for(;;)
	{
		if(received_lines > 0){
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <StartATCmds+0x48>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0fb      	beq.n	8000aae <StartATCmds+0x12>
		  ParserTakeLine(&buffer, received_data);
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	480a      	ldr	r0, [pc, #40]	@ (8000ae8 <StartATCmds+0x4c>)
 8000abe:	f000 f9d9 	bl	8000e74 <ParserTakeLine>
		  ParserParse((char*)received_data);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f9fa 	bl	8000ec0 <ParserParse>
		  received_lines--;
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <StartATCmds+0x48>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <StartATCmds+0x48>)
 8000ad6:	701a      	strb	r2, [r3, #0]
		if(received_lines > 0){
 8000ad8:	e7e9      	b.n	8000aae <StartATCmds+0x12>
 8000ada:	bf00      	nop
 8000adc:	20000194 	.word	0x20000194
 8000ae0:	200002c8 	.word	0x200002c8
 8000ae4:	200001b4 	.word	0x200001b4
 8000ae8:	20000170 	.word	0x20000170

08000aec <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART2){
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d11e      	bne.n	8000b40 <HAL_UARTEx_RxEventCallback+0x54>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp, Size)){
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4910      	ldr	r1, [pc, #64]	@ (8000b4c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b0a:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b0c:	f000 fa68 	bl	8000fe0 <WriteToBuffer>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10c      	bne.n	8000b30 <HAL_UARTEx_RxEventCallback+0x44>
			if(receive_tmp[Size-1] == ENDLINE){
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b1c:	5cd3      	ldrb	r3, [r2, r3]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d109      	bne.n	8000b36 <HAL_UARTEx_RxEventCallback+0x4a>
				received_lines++;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e002      	b.n	8000b36 <HAL_UARTEx_RxEventCallback+0x4a>
			}
		}
		else FlushBuffer(&buffer);
 8000b30:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b32:	f000 fabd 	bl	80010b0 <FlushBuffer>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8000b36:	2220      	movs	r2, #32
 8000b38:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b3c:	f006 fc0c 	bl	8007358 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	20000194 	.word	0x20000194
 8000b50:	20000170 	.word	0x20000170
 8000b54:	200001b4 	.word	0x200001b4
 8000b58:	200002c8 	.word	0x200002c8

08000b5c <HAL_UART_TxCpltCallback>:
//		HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2){

  }
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == AD_BUSY_Pin){
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b80:	d107      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x22>
		ad7676_read_one_sample();
 8000b82:	f000 fee5 	bl	8001950 <ad7676_read_one_sample>
		osThreadFlagsSet(adc_handlerHandle, 0x01);
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f006 fd57 	bl	8007640 <osThreadFlagsSet>
	}
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001bc 	.word	0x200001bc

08000ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b57      	ldr	r3, [pc, #348]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a56      	ldr	r2, [pc, #344]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a50      	ldr	r2, [pc, #320]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b4e      	ldr	r3, [pc, #312]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a4a      	ldr	r2, [pc, #296]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b48      	ldr	r3, [pc, #288]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b45      	ldr	r3, [pc, #276]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a44      	ldr	r2, [pc, #272]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f002 fdf3 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2101      	movs	r1, #1
 8000c26:	483c      	ldr	r0, [pc, #240]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c28:	f002 fdee 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CNVST_GPIO_Port, AD_CNVST_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c32:	483a      	ldr	r0, [pc, #232]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c34:	f002 fde8 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADF_CS_GPIO_Port, ADF_CS_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c42:	f002 fde1 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|AD_BUSY_Pin;
 8000c46:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482f      	ldr	r0, [pc, #188]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c5e:	f002 fb35 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D15_Pin;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D15_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4829      	ldr	r0, [pc, #164]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c76:	f002 fb29 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c7a:	2320      	movs	r3, #32
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f002 fb1a 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	481a      	ldr	r0, [pc, #104]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000cb0:	f002 fb0c 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D9_Pin|D10_Pin
 8000cb4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8000cb8:	617b      	str	r3, [r7, #20]
                          |D11_Pin|D12_Pin|D13_Pin|D14_Pin
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000cca:	f002 faff 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_CNVST_Pin;
 8000cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000ce8:	f002 faf0 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin;
 8000cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADF_CS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 fae0 	bl	80032cc <HAL_GPIO_Init>

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	@ 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f001 ff16 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f816 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f7ff ff38 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d30:	f7ff fe44 	bl	80009bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d34:	f000 fc88 	bl	8001648 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000d38:	f000 fc30 	bl	800159c <MX_TIM6_Init>
  MX_SPI3_Init();
 8000d3c:	f000 f9c8 	bl	80010d0 <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d40:	f000 f85b 	bl	8000dfa <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Initialize_Delay();
 8000d44:	f7ff fe00 	bl	8000948 <Initialize_Delay>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d48:	f006 fb9e 	bl	8007488 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d4c:	f7ff fe4e 	bl	80009ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d50:	f006 fbbe 	bl	80074d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <main+0x34>

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b096      	sub	sp, #88	@ 0x58
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	2244      	movs	r2, #68	@ 0x44
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f009 fe49 	bl	800a9fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d7e:	f002 fd81 	bl	8003884 <HAL_PWREx_ControlVoltageScaling>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d88:	f000 f86e 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d96:	2310      	movs	r3, #16
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000daa:	2307      	movs	r3, #7
 8000dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fdb8 	bl	8003930 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f84f 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2104      	movs	r1, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f980 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dee:	f000 f83b 	bl	8000e68 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3758      	adds	r7, #88	@ 0x58
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2017      	movs	r0, #23
 8000e04:	f001 ffc2 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e08:	2017      	movs	r0, #23
 8000e0a:	f001 ffdb 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	2026      	movs	r0, #38	@ 0x26
 8000e14:	f001 ffba 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e18:	2026      	movs	r0, #38	@ 0x26
 8000e1a:	f001 ffd3 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2011      	movs	r0, #17
 8000e24:	f001 ffb2 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e28:	2011      	movs	r0, #17
 8000e2a:	f001 ffcb 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2010      	movs	r0, #16
 8000e34:	f001 ffaa 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f001 ffc3 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e56:	f001 fe9d 	bl	8002b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40000c00 	.word	0x40000c00

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <ParserTakeLine>:
	{"EN", "EN set to %ld\n\r", "Type EN 0 or 1\n\r", ADF5355_Enable, 0},
	{"RUN", "New configuration applied\n\r", "New configuration failed to apply\n\r", ADF5355_Run, 1},
	{"SETUP", "Configuration succeed\n\r", "Configuration failed\n\r", LoadADF5355, 1},
};

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 8000e82:	f107 030e 	add.w	r3, r7, #14
 8000e86:	4619      	mov	r1, r3
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f8e9 	bl	8001060 <ReadFromBuffer>
		  if(tmp == ENDLINE){
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	2b0a      	cmp	r3, #10
 8000e92:	d105      	bne.n	8000ea0 <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e004      	b.n	8000eaa <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	7bba      	ldrb	r2, [r7, #14]
 8000ea8:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	3301      	adds	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	2b0a      	cmp	r3, #10
 8000eb4:	d1e5      	bne.n	8000e82 <ParserTakeLine+0xe>
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ParserParse>:

void ParserParse(char* received_string){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	@ 0x68
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	char* endptr;
	char* parse_pointer = strtok(received_string, "=");
 8000ec8:	4941      	ldr	r1, [pc, #260]	@ (8000fd0 <ParserParse+0x110>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f009 fda0 	bl	800aa10 <strtok>
 8000ed0:	65f8      	str	r0, [r7, #92]	@ 0x5c
	int32_t value = strtol(strtok(NULL,","), &endptr, 10);
 8000ed2:	4940      	ldr	r1, [pc, #256]	@ (8000fd4 <ParserParse+0x114>)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f009 fd9b 	bl	800aa10 <strtok>
 8000eda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ede:	220a      	movs	r2, #10
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f009 fc5d 	bl	800a7a0 <strtol>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	653b      	str	r3, [r7, #80]	@ 0x50
	char buffer[70];
	bool cmd_matched = false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ef4:	e053      	b.n	8000f9e <ParserParse+0xde>
		if(strcmp(at_cmds[i].command, parse_pointer) == 0){
 8000ef6:	4938      	ldr	r1, [pc, #224]	@ (8000fd8 <ParserParse+0x118>)
 8000ef8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f961 	bl	80001d0 <strcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d141      	bne.n	8000f98 <ParserParse+0xd8>
			bool* result = at_cmds[i].function(&value);
 8000f14:	4930      	ldr	r1, [pc, #192]	@ (8000fd8 <ParserParse+0x118>)
 8000f16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	330c      	adds	r3, #12
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4798      	blx	r3
 8000f2e:	65b8      	str	r0, [r7, #88]	@ 0x58
			if (*result == true && (endptr != 0x00 || at_cmds[i].optional_argument == 1)){
 8000f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01d      	beq.n	8000f74 <ParserParse+0xb4>
 8000f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <ParserParse+0x94>
 8000f3e:	4926      	ldr	r1, [pc, #152]	@ (8000fd8 <ParserParse+0x118>)
 8000f40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10f      	bne.n	8000f74 <ParserParse+0xb4>
				sprintf(buffer, at_cmds[i].responsePositive, value);
 8000f54:	4920      	ldr	r1, [pc, #128]	@ (8000fd8 <ParserParse+0x118>)
 8000f56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3304      	adds	r3, #4
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 fce3 	bl	800a938 <siprintf>
 8000f72:	e00e      	b.n	8000f92 <ParserParse+0xd2>
			}
			else {
				sprintf(buffer, at_cmds[i].responseNegative, value);
 8000f74:	4918      	ldr	r1, [pc, #96]	@ (8000fd8 <ParserParse+0x118>)
 8000f76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3308      	adds	r3, #8
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f009 fcd3 	bl	800a938 <siprintf>
			}
			cmd_matched = true;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000f98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d9a8      	bls.n	8000ef6 <ParserParse+0x36>
		}
	}
	if (!cmd_matched){
 8000fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fa8:	f083 0301 	eor.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <ParserParse+0xfe>
		sprintf(buffer, "Available commands are LED, FREQOut, FREQIn, POW, EN, RUN and SETUP\n\r");
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4909      	ldr	r1, [pc, #36]	@ (8000fdc <ParserParse+0x11c>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f009 fcbd 	bl	800a938 <siprintf>
	}
	UARTLog(buffer);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fc28 	bl	8001818 <UARTLog>
}
 8000fc8:	bf00      	nop
 8000fca:	3768      	adds	r7, #104	@ 0x68
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	0800bbb4 	.word	0x0800bbb4
 8000fd4:	0800bbb8 	.word	0x0800bbb8
 8000fd8:	2000004c 	.word	0x2000004c
 8000fdc:	0800bbbc 	.word	0x0800bbbc

08000fe0 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t *Data, uint8_t Len)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHead;

	for(int i=0; i<Len; i++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e02a      	b.n	800104a <WriteToBuffer+0x6a>
		TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	8c1b      	ldrh	r3, [r3, #32]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	425a      	negs	r2, r3
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	f002 021f 	and.w	r2, r2, #31
 8001004:	bf58      	it	pl
 8001006:	4253      	negpl	r3, r2
 8001008:	74fb      	strb	r3, [r7, #19]

		if( TempHead == Buffer->Tail) // No room for new data
 800100a:	7cfb      	ldrb	r3, [r7, #19]
 800100c:	b29a      	uxth	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001012:	429a      	cmp	r2, r3
 8001014:	d101      	bne.n	800101a <WriteToBuffer+0x3a>
		{
			return RB_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e01c      	b.n	8001054 <WriteToBuffer+0x74>
		}
		else
		{
			Buffer->Buffer[Buffer->Head] = *(Data+i);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	8c12      	ldrh	r2, [r2, #32]
 8001024:	7819      	ldrb	r1, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	5499      	strb	r1, [r3, r2]

			Buffer->Head++;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8c1b      	ldrh	r3, [r3, #32]
 800102e:	3301      	adds	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	841a      	strh	r2, [r3, #32]
			Buffer->Head %= BUFFER_SIZE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8c1b      	ldrh	r3, [r3, #32]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	b29a      	uxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	841a      	strh	r2, [r3, #32]
	for(int i=0; i<Len; i++){
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbd0      	blt.n	8000ff4 <WriteToBuffer+0x14>
		}
	}
	return RB_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	8c1b      	ldrh	r3, [r3, #32]
 8001072:	429a      	cmp	r2, r3
 8001074:	d101      	bne.n	800107a <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e014      	b.n	80010a4 <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	5c9a      	ldrb	r2, [r3, r2]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800108c:	3301      	adds	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <FlushBuffer>:

void FlushBuffer(RingBuffer *Buffer)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	Buffer->Tail = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	845a      	strh	r2, [r3, #34]	@ 0x22
	Buffer->Head = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	841a      	strh	r2, [r3, #32]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_SPI3_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001102:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001106:	2220      	movs	r2, #32
 8001108:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_SPI3_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_SPI3_Init+0x74>)
 800111e:	2207      	movs	r2, #7
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_SPI3_Init+0x74>)
 800112a:	2208      	movs	r2, #8
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001130:	f003 feec 	bl	8004f0c <HAL_SPI_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800113a:	f7ff fe95 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001c8 	.word	0x200001c8
 8001148:	40003c00 	.word	0x40003c00

0800114c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <HAL_SPI_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d128      	bne.n	80011c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a16      	ldr	r2, [pc, #88]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800119e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b0:	2306      	movs	r3, #6
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_SPI_MspInit+0x84>)
 80011bc:	f002 f886 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40003c00 	.word	0x40003c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800

080011d4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_SPI_MspDeInit+0x30>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10a      	bne.n	80011fc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_SPI_MspDeInit+0x34>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_SPI_MspDeInit+0x34>)
 80011ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80011f0:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80011f2:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_SPI_MspDeInit+0x38>)
 80011f8:	f002 fa12 	bl	8003620 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40003c00 	.word	0x40003c00
 8001208:	40021000 	.word	0x40021000
 800120c:	48000800 	.word	0x48000800

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_MspInit+0x4c>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_MspInit+0x4c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	@ 0x60
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_MspInit+0x4c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_MspInit+0x4c>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6593      	str	r3, [r2, #88]	@ 0x58
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_MspInit+0x4c>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	210f      	movs	r1, #15
 800124a:	f06f 0001 	mvn.w	r0, #1
 800124e:	f001 fd9d 	bl	8002d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	@ 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_InitTick+0xe0>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <HAL_InitTick+0xe0>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <HAL_InitTick+0xe0>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001286:	f107 0210 	add.w	r2, r7, #16
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f003 f8ed 	bl	8004470 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800129a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012a0:	f003 f8ba 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80012a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012a8:	f003 f8b6 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <HAL_InitTick+0xe4>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3b01      	subs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_InitTick+0xe8>)
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_InitTick+0xec>)
 80012c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_InitTick+0xe8>)
 80012c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012cc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <HAL_InitTick+0xe8>)
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_InitTick+0xe8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_InitTick+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_InitTick+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <HAL_InitTick+0xe8>)
 80012e8:	f004 f9b6 	bl	8005658 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11b      	bne.n	8001332 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <HAL_InitTick+0xe8>)
 80012fc:	f004 fa6c 	bl	80057d8 <HAL_TIM_Base_Start_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800130e:	2032      	movs	r0, #50	@ 0x32
 8001310:	f001 fd58 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d808      	bhi.n	800132c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800131a:	2200      	movs	r2, #0
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2032      	movs	r0, #50	@ 0x32
 8001320:	f001 fd34 	bl	8002d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_InitTick+0xf0>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e002      	b.n	8001332 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001332:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001336:	4618      	mov	r0, r3
 8001338:	3738      	adds	r7, #56	@ 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	431bde83 	.word	0x431bde83
 8001348:	2000022c 	.word	0x2000022c
 800134c:	40000c00 	.word	0x40000c00
 8001350:	200000e8 	.word	0x200000e8

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <DMA1_Channel6_IRQHandler+0x10>)
 8001392:	f001 febc 	bl	800310e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000350 	.word	0x20000350

080013a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Channel7_IRQHandler+0x10>)
 80013a6:	f001 feb2 	bl	800310e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000398 	.word	0x20000398

080013b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_BUSY_Pin);
 80013b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013bc:	f002 fa3c 	bl	8003838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <USART2_IRQHandler+0x10>)
 80013ca:	f004 fdc9 	bl	8005f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002c8 	.word	0x200002c8

080013d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <TIM5_IRQHandler+0x10>)
 80013de:	f004 fa6b 	bl	80058b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000022c 	.word	0x2000022c

080013ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_kill>:

int _kill(int pid, int sig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001406:	f009 fbb5 	bl	800ab74 <__errno>
 800140a:	4603      	mov	r3, r0
 800140c:	2216      	movs	r2, #22
 800140e:	601a      	str	r2, [r3, #0]
  return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_exit>:

void _exit (int status)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffe7 	bl	80013fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <_exit+0x12>

08001432 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e00a      	b.n	800145a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001444:	f3af 8000 	nop.w
 8001448:	4601      	mov	r1, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	60ba      	str	r2, [r7, #8]
 8001450:	b2ca      	uxtb	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	dbf0      	blt.n	8001444 <_read+0x12>
  }

  return len;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e009      	b.n	8001492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf1      	blt.n	800147e <_write+0x12>
  }
  return len;
 800149a:	687b      	ldr	r3, [r7, #4]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_close>:

int _close(int file)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014cc:	605a      	str	r2, [r3, #4]
  return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_isatty>:

int _isatty(int file)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f009 fb1a 	bl	800ab74 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20018000 	.word	0x20018000
 800156c:	00000400 	.word	0x00000400
 8001570:	20000278 	.word	0x20000278
 8001574:	20001e80 	.word	0x20001e80

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <MX_TIM6_Init+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015b4:	224f      	movs	r2, #79	@ 0x4f
 80015b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ce:	f004 f843 	bl	8005658 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015d8:	f7ff fc46 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ea:	f004 fb3b 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f7ff fc38 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000027c 	.word	0x2000027c
 8001604:	40001000 	.word	0x40001000

08001608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_TIM_Base_MspInit+0x38>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10b      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6593      	str	r3, [r2, #88]	@ 0x58
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40001000 	.word	0x40001000
 8001644:	40021000 	.word	0x40021000

08001648 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <MX_USART2_UART_Init+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800168c:	f004 fb90 	bl	8005db0 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001696:	f7ff fbe7 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002c8 	.word	0x200002c8
 80016a4:	40004400 	.word	0x40004400

080016a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0ac      	sub	sp, #176	@ 0xb0
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2288      	movs	r2, #136	@ 0x88
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 f998 	bl	800a9fe <memset>
  if(uartHandle->Instance==USART2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001800 <HAL_UART_MspInit+0x158>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f040 808e 	bne.w	80017f6 <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016da:	2302      	movs	r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016de:	2300      	movs	r3, #0
 80016e0:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff54 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016f2:	f7ff fbb9 	bl	8000e68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f6:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a42      	ldr	r2, [pc, #264]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a3c      	ldr	r2, [pc, #240]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001726:	230c      	movs	r3, #12
 8001728:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174e:	f001 fdbd 	bl	80032cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001754:	4a2d      	ldr	r2, [pc, #180]	@ (800180c <HAL_UART_MspInit+0x164>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001758:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800175a:	2202      	movs	r2, #2
 800175c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001788:	481f      	ldr	r0, [pc, #124]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800178a:	f001 fb29 	bl	8002de0 <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001794:	f7ff fb68 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800179c:	675a      	str	r2, [r3, #116]	@ 0x74
 800179e:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <HAL_UART_MspInit+0x160>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <HAL_UART_MspInit+0x16c>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80017aa:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017b2:	2210      	movs	r2, #16
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017da:	480d      	ldr	r0, [pc, #52]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017dc:	f001 fb00 	bl	8002de0 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80017e6:	f7ff fb3f 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017f6:	bf00      	nop
 80017f8:	37b0      	adds	r7, #176	@ 0xb0
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000
 8001808:	20000350 	.word	0x20000350
 800180c:	4002006c 	.word	0x4002006c
 8001810:	20000398 	.word	0x20000398
 8001814:	40020080 	.word	0x40020080

08001818 <UARTLog>:

extern struct adf5355_init_param hadf5355;
extern struct adf5355_dev* dev;

void UARTLog(char* message)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7fe fcdf 	bl	80001e4 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <UARTLog+0x28>)
 8001832:	f004 fb0b 	bl	8005e4c <HAL_UART_Transmit>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002c8 	.word	0x200002c8

08001844 <LightLED>:

void* LightLED(void* state){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <LightLED+0x24>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d003      	beq.n	8001868 <LightLED+0x24>
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <LightLED+0x44>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e00a      	b.n	800187e <LightLED+0x3a>
	else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, *value);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	2120      	movs	r1, #32
 8001870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001874:	f001 ffc8 	bl	8003808 <HAL_GPIO_WritePin>
		ret = true;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <LightLED+0x44>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 800187e:	4b02      	ldr	r3, [pc, #8]	@ (8001888 <LightLED+0x44>)
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200003e0 	.word	0x200003e0

0800188c <LoadADF5355>:

void* LoadADF5355(void* arg){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	ADF5355_Param_Init();
 8001894:	f001 f86c 	bl	8002970 <ADF5355_Param_Init>
	static bool ret = false;
	int32_t response = adf5355_init(&dev, &hadf5355);
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <LoadADF5355+0x2c>)
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <LoadADF5355+0x30>)
 800189c:	f000 fe54 	bl	8002548 <adf5355_init>
 80018a0:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <LoadADF5355+0x22>
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <LoadADF5355+0x34>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	return &ret;
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <LoadADF5355+0x34>)

}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200003e8 	.word	0x200003e8
 80018bc:	20000418 	.word	0x20000418
 80018c0:	200003e1 	.word	0x200003e1

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff fe56 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f009 f945 	bl	800ab80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff fa13 	bl	8000d20 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001908:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 800190c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001910:	20001e7c 	.word	0x20001e7c

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>

08001916 <ad7676_acquire_data>:

	*ad7676_data = init_data;
}

void ad7676_acquire_data(data_Collector_TypeDef* ad7676_data, int16_t sample)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
	ad7676_data->data_buf[ad7676_data->data_ptr++] = sample;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8001928:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	b291      	uxth	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 8001936:	f8a2 1ffe 	strh.w	r1, [r2, #4094]	@ 0xffe
 800193a:	461a      	mov	r2, r3
 800193c:	8879      	ldrh	r1, [r7, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <ad7676_read_one_sample>:

void ad7676_read_one_sample()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

//	(GPIOx->IDR & GPIO_Pin);
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <ad7676_read_one_sample+0x48>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	b29b      	uxth	r3, r3
 800195c:	f023 030c 	bic.w	r3, r3, #12
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <ad7676_read_one_sample+0x4c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	b29b      	uxth	r3, r3
 8001968:	03db      	lsls	r3, r3, #15
 800196a:	b29b      	uxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	80fb      	strh	r3, [r7, #6]
	ad7676_acquire_data(ad7676_data, sample);
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <ad7676_read_one_sample+0x50>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffca 	bl	8001916 <ad7676_acquire_data>
	AD7676_CNVST_ON;
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <ad7676_read_one_sample+0x4c>)
 800198a:	f001 ff3d 	bl	8003808 <HAL_GPIO_WritePin>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	48000400 	.word	0x48000400
 800199c:	48000800 	.word	0x48000800
 80019a0:	2000016c 	.word	0x2000016c

080019a4 <ad7676_start_conversion>:
	}
	ad7676_data->data_ptr = 0;
}

void ad7676_start_conversion()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	AD7676_CNVST_OFF;
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <ad7676_start_conversion+0x14>)
 80019b0:	f001 ff2a 	bl	8003808 <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	48000800 	.word	0x48000800

080019bc <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	460b      	mov	r3, r1
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0e1b      	lsrs	r3, r3, #24
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fa:	f001 ff05 	bl	8003808 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	f107 0110 	add.w	r1, r7, #16
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	f003 fb49 	bl	80050a2 <HAL_SPI_Transmit>
 8001a10:	4603      	mov	r3, r0
 8001a12:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1e:	f001 fef3 	bl	8003808 <HAL_GPIO_WritePin>

	return ret;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a36:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 8001a3a:	f107 0108 	add.w	r1, r7, #8
 8001a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a42:	4608      	mov	r0, r1
 8001a44:	f001 f85e 	bl	8002b04 <no_os_do_div>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 8001a50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	060b      	lsls	r3, r1, #24
 8001a5e:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001a62:	0602      	lsls	r2, r0, #24
 8001a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8001a68:	f107 0110 	add.w	r1, r7, #16
 8001a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a70:	4608      	mov	r0, r1
 8001a72:	f001 f847 	bl	8002b04 <no_os_do_div>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7c:	601a      	str	r2, [r3, #0]

	*integer = vco;
 8001a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8001a86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8c:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a92:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8001a94:	e009      	b.n	8001aaa <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8001a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	085a      	lsrs	r2, r3, #1
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	085a      	lsrs	r2, r3, #1
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa8:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3f0      	bcc.n	8001a96 <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 fff8 	bl	8002ab4 <no_os_greatest_common_divisor>
 8001ac4:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad2:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <adf5355_calc_reg0_to_2>:

/*Private static functions*/

static uint32_t adf5355_calc_reg0_to_2(struct adf5355_dev *dev, uint8_t autocalc_en){
 8001aec:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001af0:	b08a      	sub	sp, #40	@ 0x28
 8001af2:	af06      	add	r7, sp, #24
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	70f9      	strb	r1, [r7, #3]

	uint32_t tmp_cp_bleed;
	bool prescaler;
//	bool cp_neg_bleed_en; //It might be unused, need to examine it

	adf5355_pll_fract_n_compute(dev->freq_req, dev->fpfd, &dev->integer, &dev->fract1,
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	e9d1 bc10 	ldrd	fp, ip, [r1, #64]	@ 0x40
 8001afe:	687c      	ldr	r4, [r7, #4]
 8001b00:	6ea4      	ldr	r4, [r4, #104]	@ 0x68
 8001b02:	2500      	movs	r5, #0
 8001b04:	4622      	mov	r2, r4
 8001b06:	462b      	mov	r3, r5
 8001b08:	687c      	ldr	r4, [r7, #4]
 8001b0a:	346c      	adds	r4, #108	@ 0x6c
 8001b0c:	687d      	ldr	r5, [r7, #4]
 8001b0e:	3570      	adds	r5, #112	@ 0x70
 8001b10:	687e      	ldr	r6, [r7, #4]
 8001b12:	3674      	adds	r6, #116	@ 0x74
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	3178      	adds	r1, #120	@ 0x78
 8001b18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b1c:	9004      	str	r0, [sp, #16]
 8001b1e:	9103      	str	r1, [sp, #12]
 8001b20:	9602      	str	r6, [sp, #8]
 8001b22:	9501      	str	r5, [sp, #4]
 8001b24:	9400      	str	r4, [sp, #0]
 8001b26:	4658      	mov	r0, fp
 8001b28:	4661      	mov	r1, ip
 8001b2a:	f7ff ff7f 	bl	8001a2c <adf5355_pll_fract_n_compute>
						&dev->fract2, &dev->mod2, ADF5355_MAX_MODULUS2);

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b32:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b34:	bf8c      	ite	hi
 8001b36:	2301      	movhi	r3, #1
 8001b38:	2300      	movls	r3, #0
 8001b3a:	72fb      	strb	r3, [r7, #11]
//	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
//		cp_neg_bleed_en = false;
//	else
//		cp_neg_bleed_en = dev->cp_neg_bleed_en;

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d003      	beq.n	8001b4c <adf5355_calc_reg0_to_2+0x60>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d113      	bne.n	8001b74 <adf5355_calc_reg0_to_2+0x88>
		tmp_cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b50:	4a2c      	ldr	r2, [pc, #176]	@ (8001c04 <adf5355_calc_reg0_to_2+0x118>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8001b5c:	fb03 f202 	mul.w	r2, r3, r2
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	0b9b      	lsrs	r3, r3, #14
 8001b6a:	4a27      	ldr	r2, [pc, #156]	@ (8001c08 <adf5355_calc_reg0_to_2+0x11c>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e016      	b.n	8001ba2 <adf5355_calc_reg0_to_2+0xb6>
	} else {
		tmp_cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b78:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b7c:	fb03 f202 	mul.w	r2, r3, r2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b84:	f240 1177 	movw	r1, #375	@ 0x177
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b94:	f240 1177 	movw	r1, #375	@ 0x177
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	60fb      	str	r3, [r7, #12]
	}

	tmp_cp_bleed = no_os_clamp(tmp_cp_bleed, 1U, 255U);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d904      	bls.n	8001bb2 <adf5355_calc_reg0_to_2+0xc6>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2bff      	cmp	r3, #255	@ 0xff
 8001bac:	bf28      	it	cs
 8001bae:	23ff      	movcs	r3, #255	@ 0xff
 8001bb0:	e000      	b.n	8001bb4 <adf5355_calc_reg0_to_2+0xc8>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bba:	011a      	lsls	r2, r3, #4
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <adf5355_calc_reg0_to_2+0x120>)
 8001bbe:	4013      	ands	r3, r2
					ADF5355_REG0_PRESCALER(prescaler) |
 8001bc0:	7afa      	ldrb	r2, [r7, #11]
 8001bc2:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001bc4:	431a      	orrs	r2, r3
					ADF5355_REG0_AUTOCAL(autocalc_en); //autocalibration needs to be disabled
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	055b      	lsls	r3, r3, #21
					ADF5355_REG0_PRESCALER(prescaler) |
 8001bca:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001bda:	f023 030f 	bic.w	r3, r3, #15
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001be6:	011a      	lsls	r2, r3, #4
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <adf5355_calc_reg0_to_2+0x124>)
 8001bea:	4013      	ands	r3, r2
					ADF5355_REG2_FRAC2(dev->fract2);
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bf0:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
	return tmp_cp_bleed;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001c04:	10624dd3 	.word	0x10624dd3
 8001c08:	00136b0b 	.word	0x00136b0b
 8001c0c:	000ffff0 	.word	0x000ffff0
 8001c10:	0003fff0 	.word	0x0003fff0

08001c14 <adf5355_calc_pfd>:

static void adf5355_calc_pfd(struct adf5355_dev *dev, uint8_t counter_reset)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	dev->ref_div_factor = 0;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <adf5355_calc_pfd+0x36>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e000      	b.n	8001c4c <adf5355_calc_pfd+0x38>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f8b2 2090 	ldrh.w	r2, [r2, #144]	@ 0x90
 8001c56:	4611      	mov	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 8001c5e:	2a00      	cmp	r2, #0
 8001c60:	d001      	beq.n	8001c66 <adf5355_calc_pfd+0x52>
 8001c62:	2202      	movs	r2, #2
 8001c64:	e000      	b.n	8001c68 <adf5355_calc_pfd+0x54>
 8001c66:	2201      	movs	r2, #1
 8001c68:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001c6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c78:	4a2a      	ldr	r2, [pc, #168]	@ (8001d24 <adf5355_calc_pfd+0x110>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d8d4      	bhi.n	8001c28 <adf5355_calc_pfd+0x14>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c82:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 8001c86:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <adf5355_calc_pfd+0x114>)
 8001c88:	fba3 1302 	umull	r1, r3, r3, r2
 8001c8c:	1ad2      	subs	r2, r2, r3
 8001c8e:	0852      	lsrs	r2, r2, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <adf5355_calc_pfd+0x92>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	bf28      	it	cs
 8001ca2:	230f      	movcs	r3, #15
 8001ca4:	e000      	b.n	8001ca8 <adf5355_calc_pfd+0x94>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	011b      	lsls	r3, r3, #4
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	f892 2088 	ldrb.w	r2, [r2, #136]	@ 0x88
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d101      	bne.n	8001cbc <adf5355_calc_pfd+0xa8>
 8001cb8:	2280      	movs	r2, #128	@ 0x80
 8001cba:	e000      	b.n	8001cbe <adf5355_calc_pfd+0xaa>
 8001cbc:	2200      	movs	r2, #0
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 8001cbe:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8001cc6:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001cc8:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001cd0:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001cde:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001ce6:	03d9      	lsls	r1, r3, #15
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <adf5355_calc_pfd+0x118>)
 8001cea:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 8001cec:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001cf4:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001cf6:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001cfe:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001d00:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d08:	06db      	lsls	r3, r3, #27
 8001d0a:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(counter_reset) |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	047868c0 	.word	0x047868c0
 8001d28:	a01a01a1 	.word	0xa01a01a1
 8001d2c:	01ff8000 	.word	0x01ff8000

08001d30 <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d003      	beq.n	8001d4c <adf5355_reg_config+0x1c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	791b      	ldrb	r3, [r3, #4]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d101      	bne.n	8001d50 <adf5355_reg_config+0x20>
 8001d4c:	230d      	movs	r3, #13
 8001d4e:	e000      	b.n	8001d52 <adf5355_reg_config+0x22>
 8001d50:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 8001d52:	613b      	str	r3, [r7, #16]

	if ((sync_all || !dev->all_synced) && dev->fpfd <= 75000000) {
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <adf5355_reg_config+0x38>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	795b      	ldrb	r3, [r3, #5]
 8001d5e:	f083 0301 	eor.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d022      	beq.n	8001dae <adf5355_reg_config+0x7e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d6c:	4a7c      	ldr	r2, [pc, #496]	@ (8001f60 <adf5355_reg_config+0x230>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d81d      	bhi.n	8001dae <adf5355_reg_config+0x7e>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e013      	b.n	8001da0 <adf5355_reg_config+0x70>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	b2d9      	uxtb	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	3202      	adds	r2, #2
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	461a      	mov	r2, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff fe17 	bl	80019bc <adf5355_write>
 8001d8e:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <adf5355_reg_config+0x6a>
				return ret;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	e0de      	b.n	8001f58 <adf5355_reg_config+0x228>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e8      	bne.n	8001d78 <adf5355_reg_config+0x48>
		}

		dev->all_synced = true;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	715a      	strb	r2, [r3, #5]
 8001dac:	e066      	b.n	8001e7c <adf5355_reg_config+0x14c>

	}
	else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	791b      	ldrb	r3, [r3, #4]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d003      	beq.n	8001dbe <adf5355_reg_config+0x8e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	791b      	ldrb	r3, [r3, #4]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <adf5355_reg_config+0xa8>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	210d      	movs	r1, #13
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fdf8 	bl	80019bc <adf5355_write>
 8001dcc:	60f8      	str	r0, [r7, #12]
			if (ret != 0)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <adf5355_reg_config+0xa8>
				return ret;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	e0bf      	b.n	8001f58 <adf5355_reg_config+0x228>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	461a      	mov	r2, r3
 8001dde:	210a      	movs	r1, #10
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fdeb 	bl	80019bc <adf5355_write>
 8001de6:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <adf5355_reg_config+0xc2>
			return ret;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	e0b2      	b.n	8001f58 <adf5355_reg_config+0x228>
		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
		if (ret != 0)
			return ret;
		*/
		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fddc 	bl	80019bc <adf5355_write>
 8001e04:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <adf5355_reg_config+0xe0>
			return ret;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	e0a3      	b.n	8001f58 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	461a      	mov	r2, r3
 8001e16:	2102      	movs	r1, #2
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fdcf 	bl	80019bc <adf5355_write>
 8001e1e:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <adf5355_reg_config+0xfa>
			return ret;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	e096      	b.n	8001f58 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2101      	movs	r1, #1
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fdc2 	bl	80019bc <adf5355_write>
 8001e38:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <adf5355_reg_config+0x114>
			return ret;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	e089      	b.n	8001f58 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 8001e48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fdb3 	bl	80019bc <adf5355_write>
 8001e56:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <adf5355_reg_config+0x132>
			return ret;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	e07a      	b.n	8001f58 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]); //counter reset disabled by default
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	461a      	mov	r2, r3
 8001e68:	2104      	movs	r1, #4
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fda6 	bl	80019bc <adf5355_write>
 8001e70:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <adf5355_reg_config+0x14c>
			return ret;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	e06d      	b.n	8001f58 <adf5355_reg_config+0x228>
	}

	if (dev->delay_us > 999)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e86:	d314      	bcc.n	8001eb2 <adf5355_reg_config+0x182>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8e:	4a35      	ldr	r2, [pc, #212]	@ (8001f64 <adf5355_reg_config+0x234>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb44 	bl	8000524 <__aeabi_ui2d>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fbb8 	bl	8000618 <__aeabi_d2uiz>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fd7a 	bl	80009a4 <delay_ms>
 8001eb0:	e005      	b.n	8001ebe <adf5355_reg_config+0x18e>
	}
	else
	{
		delay_us(dev->delay_us);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fd4f 	bl	800095c <delay_us>
	}

	if (dev->fpfd > 75000000) { //needs to be verified
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <adf5355_reg_config+0x230>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d93f      	bls.n	8001f48 <adf5355_reg_config+0x218>
		ret = adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fd73 	bl	80019bc <adf5355_write>
 8001ed6:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <adf5355_reg_config+0x1b2>
			return ret;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	e03a      	b.n	8001f58 <adf5355_reg_config+0x228>

		dev->ref_div2_en = false;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		adf5355_calc_pfd(dev, 0);
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fe91 	bl	8001c14 <adf5355_calc_pfd>

		adf5355_calc_reg0_to_2(dev, 0);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fdf9 	bl	8001aec <adf5355_calc_reg0_to_2>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	461a      	mov	r2, r3
 8001f00:	2104      	movs	r1, #4
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fd5a 	bl	80019bc <adf5355_write>
 8001f08:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <adf5355_reg_config+0x1e4>
			return ret;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	e021      	b.n	8001f58 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[2]);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fd4d 	bl	80019bc <adf5355_write>
 8001f22:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <adf5355_reg_config+0x1fe>
			return ret;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	e014      	b.n	8001f58 <adf5355_reg_config+0x228>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[1]);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	2101      	movs	r1, #1
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fd40 	bl	80019bc <adf5355_write>
 8001f3c:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <adf5355_reg_config+0x218>
			return ret;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	e007      	b.n	8001f58 <adf5355_reg_config+0x228>
		//REGs 0 for halved, 4 for desired, then 2, 1, 0
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2100      	movs	r1, #0
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fd33 	bl	80019bc <adf5355_write>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	047868c0 	.word	0x047868c0
 8001f64:	10624dd3 	.word	0x10624dd3

08001f68 <adf5355_change_freq>:

int32_t adf5355_change_freq(struct adf5355_dev *dev, uint64_t freq){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	e9c7 2300 	strd	r2, r3, [r7]
 * Reg0 (autocal en) for halved fpfd
 * Reg4 for desired fpdf with RDIV dis
 * Reg2-0 (autocal dis)

*/
	dev->freq_req = freq;
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f7a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <adf5355_change_freq+0x4c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d903      	bls.n	8001f90 <adf5355_change_freq+0x28>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	adf5355_calc_pfd(dev, 1);
 8001f90:	2101      	movs	r1, #1
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fe3e 	bl	8001c14 <adf5355_calc_pfd>
	adf5355_calc_reg0_to_2(dev, 1); //We set autocal as default, first it is negated, then send as default and then negated again
 8001f98:	2101      	movs	r1, #1
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fda6 	bl	8001aec <adf5355_calc_reg0_to_2>

	return adf5355_reg_config(dev, false);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff fec4 	bl	8001d30 <adf5355_reg_config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	047868c0 	.word	0x047868c0

08001fb8 <adf5355_set_power>:

int32_t adf5355_set_power(struct adf5355_dev *dev, bool en, uint8_t power){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	70bb      	strb	r3, [r7, #2]

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8001fc8:	78bb      	ldrb	r3, [r7, #2]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	f003 0230 	and.w	r2, r3, #48	@ 0x30
			ADF5355_REG6_RF_OUT_EN(en) |
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8001fd4:	431a      	orrs	r2, r3
			(((dev->dev_id == ADF5355)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	791b      	ldrb	r3, [r3, #4]
			  || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <adf5355_set_power+0x2e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d107      	bne.n	8001ff6 <adf5355_set_power+0x3e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001fec:	f083 0301 	eor.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	e00a      	b.n	800200c <adf5355_set_power+0x54>
			 ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001ffc:	01db      	lsls	r3, r3, #7
 8001ffe:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
			 ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002008:	025b      	lsls	r3, r3, #9
			  || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 800200a:	430b      	orrs	r3, r1
			ADF5355_REG6_RF_OUT_EN(en) |
 800200c:	431a      	orrs	r2, r3
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002014:	02db      	lsls	r3, r3, #11
			 ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 8002016:	4313      	orrs	r3, r2
 8002018:	461a      	mov	r2, r3
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <adf5355_set_power+0xe8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	035b      	lsls	r3, r3, #13
 8002020:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
			ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 8002024:	431a      	orrs	r2, r3
			ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800202c:	055b      	lsls	r3, r3, #21
 800202e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
			ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 8002032:	431a      	orrs	r2, r3
			ADF5355_REG6_FEEDBACK_FUND(1) |
			ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d104      	bne.n	8002046 <adf5355_set_power+0x8e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8002042:	065b      	lsls	r3, r3, #25
 8002044:	e000      	b.n	8002048 <adf5355_set_power+0x90>
 8002046:	2300      	movs	r3, #0
			ADF5355_REG6_FEEDBACK_FUND(1) |
 8002048:	431a      	orrs	r2, r3
					dev->outb_sel_fund : 0) |
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002050:	075b      	lsls	r3, r3, #29
					dev->outb_sel_fund : 0) |
 8002052:	431a      	orrs	r2, r3
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800205a:	079b      	lsls	r3, r3, #30
			ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 800205c:	431a      	orrs	r2, r3
			ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <adf5355_set_power+0xb6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	2b05      	cmp	r3, #5
 800206c:	d104      	bne.n	8002078 <adf5355_set_power+0xc0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002074:	07db      	lsls	r3, r3, #31
 8002076:	e000      	b.n	800207a <adf5355_set_power+0xc2>
 8002078:	2300      	movs	r3, #0
			ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 800207a:	4313      	orrs	r3, r2
					|| (dev->dev_id == ADF5356)) ?
					dev->cp_bleed_current_polarity_en : 0) |
 800207c:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8002080:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(power) |
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6213      	str	r3, [r2, #32]
			ADF5355_REG6_DEFAULT;

	return adf5355_write(dev, ADF5355_REG(6), dev->regs[6]);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	461a      	mov	r2, r3
 800208e:	2106      	movs	r1, #6
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fc93 	bl	80019bc <adf5355_write>
 8002096:	4603      	mov	r3, r0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200003e4 	.word	0x200003e4

080020a4 <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 80020a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	e9c7 2300 	strd	r2, r3, [r7]

	if (chan > dev->num_channels)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80020b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80020bc:	429a      	cmp	r2, r3
 80020be:	d902      	bls.n	80020c6 <adf5355_set_freq+0x22>
		return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	e141      	b.n	800234a <adf5355_set_freq+0x2a6>

	if (chan == 0) {
 80020c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13c      	bne.n	8002148 <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80020d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020d8:	4290      	cmp	r0, r2
 80020da:	eb71 0303 	sbcs.w	r3, r1, r3
 80020de:	d308      	bcc.n	80020f2 <adf5355_set_freq+0x4e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80020e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020ea:	4290      	cmp	r0, r2
 80020ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80020f0:	d202      	bcs.n	80020f8 <adf5355_set_freq+0x54>
			return -EINVAL;
 80020f2:	f06f 0315 	mvn.w	r3, #21
 80020f6:	e128      	b.n	800234a <adf5355_set_freq+0x2a6>

		dev->rf_div_sel = 0;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800210a:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 8002112:	e00f      	b.n	8002134 <adf5355_set_freq+0x90>
			freq <<= 1;
 8002114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002118:	eb12 0802 	adds.w	r8, r2, r2
 800211c:	eb43 0903 	adc.w	r9, r3, r3
 8002120:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800212a:	3301      	adds	r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800213a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800213e:	4290      	cmp	r0, r2
 8002140:	eb71 0303 	sbcs.w	r3, r1, r3
 8002144:	d3e6      	bcc.n	8002114 <adf5355_set_freq+0x70>
 8002146:	e074      	b.n	8002232 <adf5355_set_freq+0x18e>
		}
	} else if (dev->dev_id == ADF4356) {
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d14a      	bne.n	80021e6 <adf5355_set_freq+0x142>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800215a:	4290      	cmp	r0, r2
 800215c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002160:	d310      	bcc.n	8002184 <adf5355_set_freq+0xe0>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	4290      	cmp	r0, r2
 800216e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002172:	d307      	bcc.n	8002184 <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <adf5355_set_freq+0xe6>
			return -EINVAL;
 8002184:	f06f 0315 	mvn.w	r3, #21
 8002188:	e0df      	b.n	800234a <adf5355_set_freq+0x2a6>

		dev->rf_div_sel = 0;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800219c:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800219e:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->outb_power);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80021a6:	01db      	lsls	r3, r3, #7
 80021a8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 80021ac:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 80021b2:	e00e      	b.n	80021d2 <adf5355_set_freq+0x12e>
			freq <<= 1;
 80021b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b8:	1894      	adds	r4, r2, r2
 80021ba:	eb43 0503 	adc.w	r5, r3, r3
 80021be:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80021d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021dc:	4290      	cmp	r0, r2
 80021de:	eb71 0303 	sbcs.w	r3, r1, r3
 80021e2:	d3e7      	bcc.n	80021b4 <adf5355_set_freq+0x110>
 80021e4:	e025      	b.n	8002232 <adf5355_set_freq+0x18e>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 80021e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021ea:	495a      	ldr	r1, [pc, #360]	@ (8002354 <adf5355_set_freq+0x2b0>)
 80021ec:	428a      	cmp	r2, r1
 80021ee:	f173 0303 	sbcs.w	r3, r3, #3
 80021f2:	d206      	bcs.n	8002202 <adf5355_set_freq+0x15e>
 80021f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f8:	4957      	ldr	r1, [pc, #348]	@ (8002358 <adf5355_set_freq+0x2b4>)
 80021fa:	428a      	cmp	r2, r1
 80021fc:	f173 0301 	sbcs.w	r3, r3, #1
 8002200:	d202      	bcs.n	8002208 <adf5355_set_freq+0x164>
			return -EINVAL;
 8002202:	f06f 0315 	mvn.w	r3, #21
 8002206:	e0a0      	b.n	800234a <adf5355_set_freq+0x2a6>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002212:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	621a      	str	r2, [r3, #32]

		freq >>= 1;
 800221a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	0842      	lsrs	r2, r0, #1
 8002228:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800222c:	084b      	lsrs	r3, r1, #1
 800222e:	e9c7 2300 	strd	r2, r3, [r7]
	}

	cp_bleed = adf5355_calc_reg0_to_2(dev, 1);
 8002232:	2101      	movs	r1, #1
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff fc59 	bl	8001aec <adf5355_calc_reg0_to_2>
 800223a:	4603      	mov	r3, r0
 800223c:	4a47      	ldr	r2, [pc, #284]	@ (800235c <adf5355_set_freq+0x2b8>)
 800223e:	6013      	str	r3, [r2, #0]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	791b      	ldrb	r3, [r3, #4]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d003      	beq.n	8002250 <adf5355_set_freq+0x1ac>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	791b      	ldrb	r3, [r3, #4]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d10c      	bne.n	800226a <adf5355_set_freq+0x1c6>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002254:	0b9b      	lsrs	r3, r3, #14
 8002256:	011a      	lsls	r2, r3, #4
 8002258:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <adf5355_set_freq+0x2bc>)
 800225a:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002260:	0b92      	lsrs	r2, r2, #14
 8002262:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800227c:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 800227e:	431a      	orrs	r2, r3
				    (((dev->dev_id == ADF5355)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <adf5355_set_freq+0x1ec>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	791b      	ldrb	r3, [r3, #4]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d107      	bne.n	80022a0 <adf5355_set_freq+0x1fc>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002296:	f083 0301 	eor.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	e00a      	b.n	80022b6 <adf5355_set_freq+0x212>
				     ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80022a6:	01db      	lsls	r3, r3, #7
 80022a8:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80022b2:	025b      	lsls	r3, r3, #9
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 80022b4:	430b      	orrs	r3, r1
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 80022b6:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80022be:	02db      	lsls	r3, r3, #11
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 80022c0:	4313      	orrs	r3, r2
 80022c2:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <adf5355_set_freq+0x2b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	035b      	lsls	r3, r3, #13
 80022ca:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80022ce:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 80022dc:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d104      	bne.n	80022f0 <adf5355_set_freq+0x24c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80022ec:	065b      	lsls	r3, r3, #25
 80022ee:	e000      	b.n	80022f2 <adf5355_set_freq+0x24e>
 80022f0:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 80022f2:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80022fa:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 80022fc:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002304:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 8002306:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	791b      	ldrb	r3, [r3, #4]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d003      	beq.n	8002318 <adf5355_set_freq+0x274>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	791b      	ldrb	r3, [r3, #4]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d104      	bne.n	8002322 <adf5355_set_freq+0x27e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800231e:	07db      	lsls	r3, r3, #31
 8002320:	e000      	b.n	8002324 <adf5355_set_freq+0x280>
 8002322:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002324:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 8002326:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 800232a:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	dev->freq_req = freq;
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002338:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return adf5355_reg_config(dev, dev->all_synced);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	795b      	ldrb	r3, [r3, #5]
 8002340:	4619      	mov	r1, r3
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff fcf4 	bl	8001d30 <adf5355_reg_config>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002354:	2a9f8801 	.word	0x2a9f8801
 8002358:	954fc400 	.word	0x954fc400
 800235c:	200003e4 	.word	0x200003e4
 8002360:	0003fff0 	.word	0x0003fff0

08002364 <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	6078      	str	r0, [r7, #4]
	adf5355_calc_pfd(dev, 0);
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fc50 	bl	8001c14 <adf5355_calc_pfd>

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a67      	ldr	r2, [pc, #412]	@ (8002514 <adf5355_setup+0x1b0>)
 8002378:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(0) |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a66      	ldr	r2, [pc, #408]	@ (8002518 <adf5355_setup+0x1b4>)
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(0) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 8002384:	2b04      	cmp	r3, #4
 8002386:	d003      	beq.n	8002390 <adf5355_setup+0x2c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d101      	bne.n	8002394 <adf5355_setup+0x30>
 8002390:	4a62      	ldr	r2, [pc, #392]	@ (800251c <adf5355_setup+0x1b8>)
 8002392:	e000      	b.n	8002396 <adf5355_setup+0x32>
 8002394:	4a62      	ldr	r2, [pc, #392]	@ (8002520 <adf5355_setup+0x1bc>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	uint32_t tmp;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800239e:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 80023a2:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 80023a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002524 <adf5355_setup+0x1c0>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	0c9b      	lsrs	r3, r3, #18
 80023ae:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d906      	bls.n	80023c4 <adf5355_setup+0x60>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf28      	it	cs
 80023c0:	4613      	movcs	r3, r2
 80023c2:	e000      	b.n	80023c6 <adf5355_setup+0x62>
 80023c4:	2301      	movs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	039a      	lsls	r2, r3, #14
 80023cc:	4b56      	ldr	r3, [pc, #344]	@ (8002528 <adf5355_setup+0x1c4>)
 80023ce:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80023da:	fb00 f202 	mul.w	r2, r0, r2
 80023de:	440a      	add	r2, r1
 80023e0:	0052      	lsls	r2, r2, #1
 80023e2:	1e51      	subs	r1, r2, #1
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4851      	ldr	r0, [pc, #324]	@ (800252c <adf5355_setup+0x1c8>)
 80023e8:	fb00 f202 	mul.w	r2, r0, r2
 80023ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80023f6:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4849      	ldr	r0, [pc, #292]	@ (800252c <adf5355_setup+0x1c8>)
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	4413      	add	r3, r2
 800240e:	1e5a      	subs	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4846      	ldr	r0, [pc, #280]	@ (800252c <adf5355_setup+0x1c8>)
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 8002422:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	7909      	ldrb	r1, [r1, #4]
 800242e:	2904      	cmp	r1, #4
 8002430:	d003      	beq.n	800243a <adf5355_setup+0xd6>
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	7909      	ldrb	r1, [r1, #4]
 8002436:	2905      	cmp	r1, #5
 8002438:	d101      	bne.n	800243e <adf5355_setup+0xda>
 800243a:	493d      	ldr	r1, [pc, #244]	@ (8002530 <adf5355_setup+0x1cc>)
 800243c:	e000      	b.n	8002440 <adf5355_setup+0xdc>
 800243e:	493d      	ldr	r1, [pc, #244]	@ (8002534 <adf5355_setup+0x1d0>)
 8002440:	440b      	add	r3, r1
 8002442:	1e59      	subs	r1, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	791b      	ldrb	r3, [r3, #4]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d003      	beq.n	8002454 <adf5355_setup+0xf0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	791b      	ldrb	r3, [r3, #4]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d101      	bne.n	8002458 <adf5355_setup+0xf4>
 8002454:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <adf5355_setup+0x1cc>)
 8002456:	e000      	b.n	800245a <adf5355_setup+0xf6>
 8002458:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <adf5355_setup+0x1d0>)
 800245a:	fbb1 f3f3 	udiv	r3, r1, r3
 800245e:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 8002460:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	4a32      	ldr	r2, [pc, #200]	@ (8002538 <adf5355_setup+0x1d4>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	09db      	lsrs	r3, r3, #7
 8002474:	3301      	adds	r3, #1
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d904      	bls.n	800248a <adf5355_setup+0x126>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2bff      	cmp	r3, #255	@ 0xff
 8002484:	bf28      	it	cs
 8002486:	23ff      	movcs	r3, #255	@ 0xff
 8002488:	e000      	b.n	800248c <adf5355_setup+0x128>
 800248a:	2301      	movs	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	fbb2 f2f3 	udiv	r2, r2, r3
 800249c:	4b27      	ldr	r3, [pc, #156]	@ (800253c <adf5355_setup+0x1d8>)
 800249e:	4413      	add	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	3202      	adds	r2, #2
 80024aa:	fbb1 f2f2 	udiv	r2, r1, r2
 80024ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	019b      	lsls	r3, r3, #6
 80024bc:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 80024c0:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80024c4:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002540 <adf5355_setup+0x1dc>)
 80024d0:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d003      	beq.n	80024e2 <adf5355_setup+0x17e>
				      || (dev->dev_id == ADF5356))?
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d102      	bne.n	80024e8 <adf5355_setup+0x184>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80024e2:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 80024e6:	e000      	b.n	80024ea <adf5355_setup+0x186>
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <adf5355_setup+0x1e0>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8002500:	9100      	str	r1, [sp, #0]
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fdce 	bl	80020a4 <adf5355_set_freq>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	00800025 	.word	0x00800025
 8002518:	04000007 	.word	0x04000007
 800251c:	15596568 	.word	0x15596568
 8002520:	102d0428 	.word	0x102d0428
 8002524:	6fd91d85 	.word	0x6fd91d85
 8002528:	00ffc000 	.word	0x00ffc000
 800252c:	000186a0 	.word	0x000186a0
 8002530:	00186a00 	.word	0x00186a00
 8002534:	00249f00 	.word	0x00249f00
 8002538:	0a7c5ac5 	.word	0x0a7c5ac5
 800253c:	00f423ff 	.word	0x00f423ff
 8002540:	0061300b 	.word	0x0061300b
 8002544:	0001041c 	.word	0x0001041c

08002548 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 8002552:	2198      	movs	r1, #152	@ 0x98
 8002554:	2001      	movs	r0, #1
 8002556:	f000 fa9f 	bl	8002a98 <no_os_calloc>
 800255a:	60f8      	str	r0, [r7, #12]
	if (!dev)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <adf5355_init+0x20>
		return -ENOMEM;
 8002562:	f06f 030b 	mvn.w	r3, #11
 8002566:	e0f0      	b.n	800274a <adf5355_init+0x202>

	dev->spi_desc = init_param->spi_init;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	791a      	ldrb	r2, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7c1a      	ldrb	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7f1a      	ldrb	r2, [r3, #28]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	7f5a      	ldrb	r2, [r3, #29]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7f9a      	ldrb	r2, [r3, #30]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	7fda      	ldrb	r2, [r3, #31]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->outa_power = init_param->outa_power;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->outb_power = init_param->outb_power;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025fc:	461a      	mov	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->ref_diff_en = init_param->ref_diff_en;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->ref_doubler_en = init_param->ref_doubler_en;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->ref_div2_en = init_param->ref_div2_en;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	dev->mux_out_sel = init_param->mux_out_sel;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	dev->outb_sel_fund = init_param->outb_sel_fund;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->num_channels = 2;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002658:	4a4d      	ldr	r2, [pc, #308]	@ (8002790 <adf5355_init+0x248>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d903      	bls.n	8002666 <adf5355_init+0x11e>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	switch (dev->dev_id) {
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	791b      	ldrb	r3, [r3, #4]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d85a      	bhi.n	8002724 <adf5355_init+0x1dc>
 800266e:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <adf5355_init+0x12c>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	0800268d 	.word	0x0800268d
 8002678:	080026b3 	.word	0x080026b3
 800267c:	080026d9 	.word	0x080026d9
 8002680:	080026ff 	.word	0x080026ff
 8002684:	0800268d 	.word	0x0800268d
 8002688:	0800268d 	.word	0x0800268d
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	a332      	add	r3, pc, #200	@ (adr r3, 8002758 <adf5355_init+0x210>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	a331      	add	r3, pc, #196	@ (adr r3, 8002760 <adf5355_init+0x218>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	a330      	add	r3, pc, #192	@ (adr r3, 8002768 <adf5355_init+0x220>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80026b0:	e038      	b.n	8002724 <adf5355_init+0x1dc>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 80026b2:	68f9      	ldr	r1, [r7, #12]
 80026b4:	a32e      	add	r3, pc, #184	@ (adr r3, 8002770 <adf5355_init+0x228>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	a327      	add	r3, pc, #156	@ (adr r3, 8002760 <adf5355_init+0x218>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	a326      	add	r3, pc, #152	@ (adr r3, 8002768 <adf5355_init+0x220>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80026d6:	e025      	b.n	8002724 <adf5355_init+0x1dc>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <adf5355_init+0x24c>)
 80026dc:	f04f 0301 	mov.w	r3, #1
 80026e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	a31e      	add	r3, pc, #120	@ (adr r3, 8002760 <adf5355_init+0x218>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8002768 <adf5355_init+0x220>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80026fc:	e012      	b.n	8002724 <adf5355_init+0x1dc>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 80026fe:	68f9      	ldr	r1, [r7, #12]
 8002700:	a31d      	add	r3, pc, #116	@ (adr r3, 8002778 <adf5355_init+0x230>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	a31c      	add	r3, pc, #112	@ (adr r3, 8002780 <adf5355_init+0x238>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	a31b      	add	r3, pc, #108	@ (adr r3, 8002788 <adf5355_init+0x240>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8002722:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff fe1d 	bl	8002364 <adf5355_setup>
 800272a:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <adf5355_init+0x1f4>
		goto error_spi;

	*device = dev;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

	return ret;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	e006      	b.n	800274a <adf5355_init+0x202>
		goto error_spi;
 800273c:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fc85 	bl	8005052 <HAL_SPI_DeInit>

	return ret;
 8002748:	68bb      	ldr	r3, [r7, #8]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	f3af 8000 	nop.w
 8002758:	954fc400 	.word	0x954fc400
 800275c:	00000001 	.word	0x00000001
 8002760:	032a9f88 	.word	0x032a9f88
 8002764:	00000000 	.word	0x00000000
 8002768:	caa7e200 	.word	0xcaa7e200
 800276c:	00000000 	.word	0x00000000
 8002770:	2a9f8800 	.word	0x2a9f8800
 8002774:	00000003 	.word	0x00000003
 8002778:	89640200 	.word	0x89640200
 800277c:	00000001 	.word	0x00000001
 8002780:	0312c804 	.word	0x0312c804
 8002784:	00000000 	.word	0x00000000
 8002788:	c4b20100 	.word	0xc4b20100
 800278c:	00000000 	.word	0x00000000
 8002790:	047868c0 	.word	0x047868c0
 8002794:	0642ac00 	.word	0x0642ac00

08002798 <ADF5355_SetFrequencyOut>:

/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void* ADF5355_SetFrequencyOut(void* new_freq){
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	60f9      	str	r1, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80027ac:	4281      	cmp	r1, r0
 80027ae:	d803      	bhi.n	80027b8 <ADF5355_SetFrequencyOut+0x20>
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	6809      	ldr	r1, [r1, #0]
 80027b4:	2963      	cmp	r1, #99	@ 0x63
 80027b6:	d803      	bhi.n	80027c0 <ADF5355_SetFrequencyOut+0x28>
 80027b8:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <ADF5355_SetFrequencyOut+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e015      	b.n	80027ec <ADF5355_SetFrequencyOut+0x54>
	else {
		freq_out = *value;
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	6809      	ldr	r1, [r1, #0]
 80027c4:	480e      	ldr	r0, [pc, #56]	@ (8002800 <ADF5355_SetFrequencyOut+0x68>)
 80027c6:	6001      	str	r1, [r0, #0]
		if (synced){
 80027c8:	490e      	ldr	r1, [pc, #56]	@ (8002804 <ADF5355_SetFrequencyOut+0x6c>)
 80027ca:	7809      	ldrb	r1, [r1, #0]
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d00a      	beq.n	80027e6 <ADF5355_SetFrequencyOut+0x4e>
			hadf5355.freq_req = 1000000*freq_out;
 80027d0:	490b      	ldr	r1, [pc, #44]	@ (8002800 <ADF5355_SetFrequencyOut+0x68>)
 80027d2:	6809      	ldr	r1, [r1, #0]
 80027d4:	480c      	ldr	r0, [pc, #48]	@ (8002808 <ADF5355_SetFrequencyOut+0x70>)
 80027d6:	fb00 f101 	mul.w	r1, r0, r1
 80027da:	2000      	movs	r0, #0
 80027dc:	460a      	mov	r2, r1
 80027de:	4603      	mov	r3, r0
 80027e0:	490a      	ldr	r1, [pc, #40]	@ (800280c <ADF5355_SetFrequencyOut+0x74>)
 80027e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		ret = true;
 80027e6:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <ADF5355_SetFrequencyOut+0x64>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <ADF5355_SetFrequencyOut+0x64>)
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	2000041d 	.word	0x2000041d
 8002800:	200000dc 	.word	0x200000dc
 8002804:	2000041c 	.word	0x2000041c
 8002808:	000f4240 	.word	0x000f4240
 800280c:	200003e8 	.word	0x200003e8

08002810 <ADF5355_SetFrequencyIn>:

void* ADF5355_SetFrequencyIn(void* new_freq){
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60fb      	str	r3, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002824:	4293      	cmp	r3, r2
 8002826:	d803      	bhi.n	8002830 <ADF5355_SetFrequencyIn+0x20>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b63      	cmp	r3, #99	@ 0x63
 800282e:	d803      	bhi.n	8002838 <ADF5355_SetFrequencyIn+0x28>
 8002830:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <ADF5355_SetFrequencyIn+0x5c>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e011      	b.n	800285c <ADF5355_SetFrequencyIn+0x4c>
	else {
		freq_in = *value;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0c      	ldr	r2, [pc, #48]	@ (8002870 <ADF5355_SetFrequencyIn+0x60>)
 800283e:	6013      	str	r3, [r2, #0]
		if (synced){
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <ADF5355_SetFrequencyIn+0x64>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <ADF5355_SetFrequencyIn+0x46>
			hadf5355.clkin_freq = 1000000*freq_in;
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <ADF5355_SetFrequencyIn+0x60>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <ADF5355_SetFrequencyIn+0x68>)
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <ADF5355_SetFrequencyIn+0x6c>)
 8002854:	6153      	str	r3, [r2, #20]
		}
		ret = true;
 8002856:	4b05      	ldr	r3, [pc, #20]	@ (800286c <ADF5355_SetFrequencyIn+0x5c>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 800285c:	4b03      	ldr	r3, [pc, #12]	@ (800286c <ADF5355_SetFrequencyIn+0x5c>)
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000041e 	.word	0x2000041e
 8002870:	200000e0 	.word	0x200000e0
 8002874:	2000041c 	.word	0x2000041c
 8002878:	000f4240 	.word	0x000f4240
 800287c:	200003e8 	.word	0x200003e8

08002880 <ADF5355_SetPower>:

void* ADF5355_SetPower(void* new_pow){
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	static bool ret;
	int8_t* value = (int8_t*)new_pow;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60fb      	str	r3, [r7, #12]
	if (*value > 3 || *value < 0) ret = false;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f993 3000 	ldrsb.w	r3, [r3]
 8002892:	2b03      	cmp	r3, #3
 8002894:	dc04      	bgt.n	80028a0 <ADF5355_SetPower+0x20>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f993 3000 	ldrsb.w	r3, [r3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da03      	bge.n	80028a8 <ADF5355_SetPower+0x28>
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <ADF5355_SetPower+0x5c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e012      	b.n	80028ce <ADF5355_SetPower+0x4e>
	else {
		outa_power = *value;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f993 2000 	ldrsb.w	r2, [r3]
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <ADF5355_SetPower+0x60>)
 80028b0:	701a      	strb	r2, [r3, #0]
		if (synced){
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <ADF5355_SetPower+0x64>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <ADF5355_SetPower+0x48>
			hadf5355.outa_power = outa_power;
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <ADF5355_SetPower+0x60>)
 80028bc:	f993 3000 	ldrsb.w	r3, [r3]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <ADF5355_SetPower+0x68>)
 80028c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		}
		ret = true;
 80028c8:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <ADF5355_SetPower+0x5c>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80028ce:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <ADF5355_SetPower+0x5c>)
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	2000041f 	.word	0x2000041f
 80028e0:	200000e5 	.word	0x200000e5
 80028e4:	2000041c 	.word	0x2000041c
 80028e8:	200003e8 	.word	0x200003e8

080028ec <ADF5355_Enable>:

void* ADF5355_Enable(void* state){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <ADF5355_Enable+0x24>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d003      	beq.n	8002910 <ADF5355_Enable+0x24>
 8002908:	4b14      	ldr	r3, [pc, #80]	@ (800295c <ADF5355_Enable+0x70>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e01f      	b.n	8002950 <ADF5355_Enable+0x64>
	else {
		outa_en = *value;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <ADF5355_Enable+0x74>)
 8002920:	701a      	strb	r2, [r3, #0]
		if (synced){
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <ADF5355_Enable+0x78>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00f      	beq.n	800294a <ADF5355_Enable+0x5e>
			hadf5355.outa_en = outa_en;
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <ADF5355_Enable+0x74>)
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <ADF5355_Enable+0x7c>)
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
			adf5355_set_power(dev, hadf5355.outa_en, hadf5355.outa_power);
 8002934:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <ADF5355_Enable+0x80>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0b      	ldr	r2, [pc, #44]	@ (8002968 <ADF5355_Enable+0x7c>)
 800293a:	f892 1020 	ldrb.w	r1, [r2, #32]
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <ADF5355_Enable+0x7c>)
 8002940:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fb37 	bl	8001fb8 <adf5355_set_power>
		}
		ret = true;
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <ADF5355_Enable+0x70>)
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8002950:	4b02      	ldr	r3, [pc, #8]	@ (800295c <ADF5355_Enable+0x70>)
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000420 	.word	0x20000420
 8002960:	200000e4 	.word	0x200000e4
 8002964:	2000041c 	.word	0x2000041c
 8002968:	200003e8 	.word	0x200003e8
 800296c:	20000418 	.word	0x20000418

08002970 <ADF5355_Param_Init>:

void ADF5355_Param_Init(void){
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 8002974:	4931      	ldr	r1, [pc, #196]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002976:	4832      	ldr	r0, [pc, #200]	@ (8002a40 <ADF5355_Param_Init+0xd0>)
 8002978:	6008      	str	r0, [r1, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 800297a:	4930      	ldr	r1, [pc, #192]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 800297c:	2001      	movs	r0, #1
 800297e:	7108      	strb	r0, [r1, #4]
	hadf5355.freq_req = freq_out*1000000; // Żądana częstotliwość wyjściowa w Hz
 8002980:	4930      	ldr	r1, [pc, #192]	@ (8002a44 <ADF5355_Param_Init+0xd4>)
 8002982:	6809      	ldr	r1, [r1, #0]
 8002984:	4830      	ldr	r0, [pc, #192]	@ (8002a48 <ADF5355_Param_Init+0xd8>)
 8002986:	fb00 f101 	mul.w	r1, r0, r1
 800298a:	2000      	movs	r0, #0
 800298c:	460a      	mov	r2, r1
 800298e:	4603      	mov	r3, r0
 8002990:	492a      	ldr	r1, [pc, #168]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002992:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hadf5355.freq_req_chan = 0; // Kanał częstotliwości
 8002996:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002998:	2200      	movs	r2, #0
 800299a:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = freq_in*1000000; // Częstotliwość zegara wejściowego w Hz
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <ADF5355_Param_Init+0xdc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <ADF5355_Param_Init+0xd8>)
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029a8:	6153      	str	r3, [r2, #20]
	hadf5355.cp_ua = 1000; // Prąd pompy ładunkowej w mikroamperach
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029b0:	619a      	str	r2, [r3, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 80029b2:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = false;  // Flaga aktywacji bramkowania prądu wycieku
 80029b8:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = outa_en;  // Flaga aktywacji wyjścia A
 80029ca:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <ADF5355_Param_Init+0xe0>)
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = false;  // Flaga aktywacji wyjścia B
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.outa_power = outa_power;  // Moc wyjścia A
 80029dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <ADF5355_Param_Init+0xe4>)
 80029de:	f993 3000 	ldrsb.w	r3, [r3]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.outb_power = 0;  // Moc wyjścia B
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.phase_detector_polarity_neg = true;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 80029f2:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.mux_out_sel = 0;  // Wybór wyjścia mux
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <ADF5355_Param_Init+0xcc>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	synced = true;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <ADF5355_Param_Init+0xe8>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	200003e8 	.word	0x200003e8
 8002a40:	200001c8 	.word	0x200001c8
 8002a44:	200000dc 	.word	0x200000dc
 8002a48:	000f4240 	.word	0x000f4240
 8002a4c:	200000e0 	.word	0x200000e0
 8002a50:	200000e4 	.word	0x200000e4
 8002a54:	200000e5 	.word	0x200000e5
 8002a58:	2000041c 	.word	0x2000041c

08002a5c <ADF5355_Run>:

void* ADF5355_Run(void* arg){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	static bool ret = false;
	int32_t response = adf5355_change_freq(dev, hadf5355.freq_req);
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <ADF5355_Run+0x30>)
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <ADF5355_Run+0x34>)
 8002a6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a6e:	4608      	mov	r0, r1
 8002a70:	f7ff fa7a 	bl	8001f68 <adf5355_change_freq>
 8002a74:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <ADF5355_Run+0x26>
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <ADF5355_Run+0x38>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
	return &ret;
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <ADF5355_Run+0x38>)
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000418 	.word	0x20000418
 8002a90:	200003e8 	.word	0x200003e8
 8002a94:	20000421 	.word	0x20000421

08002a98 <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f007 fd2f 	bl	800a508 <calloc>
 8002aaa:	4603      	mov	r3, r0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <no_os_greatest_common_divisor+0x16>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	bf38      	it	cc
 8002ad2:	4613      	movcc	r3, r2
 8002ad4:	e010      	b.n	8002af8 <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	fb01 f202 	mul.w	r2, r1, r2
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
		a = b;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	607b      	str	r3, [r7, #4]
		b = div;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ef      	bne.n	8002ad6 <no_os_greatest_common_divisor+0x22>
	}

	return a;
 8002af6:	687b      	ldr	r3, [r7, #4]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b26:	f7fd fd97 	bl	8000658 <__aeabi_uldivmod>
 8002b2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b38:	f7fd fd8e 	bl	8000658 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 8002b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <HAL_Init+0x3c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <HAL_Init+0x3c>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	f000 f903 	bl	8002d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b70:	200f      	movs	r0, #15
 8002b72:	f7fe fb75 	bl	8001260 <HAL_InitTick>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	e001      	b.n	8002b86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b82:	f7fe fb45 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b86:	79fb      	ldrb	r3, [r7, #7]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	200000ec 	.word	0x200000ec
 8002bb8:	20000424 	.word	0x20000424

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000424 	.word	0x20000424

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200000ec 	.word	0x200000ec

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	@ (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	@ (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ff4c 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9e:	f7ff ff61 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002da2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	6978      	ldr	r0, [r7, #20]
 8002daa:	f7ff ffb1 	bl	8002d10 <NVIC_EncodePriority>
 8002dae:	4602      	mov	r2, r0
 8002db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff80 	bl	8002cbc <__NVIC_SetPriority>
}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff54 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e098      	b.n	8002f24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f30 <HAL_DMA_Init+0x150>)
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d80f      	bhi.n	8002e1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b4b      	ldr	r3, [pc, #300]	@ (8002f34 <HAL_DMA_Init+0x154>)
 8002e06:	4413      	add	r3, r2
 8002e08:	4a4b      	ldr	r2, [pc, #300]	@ (8002f38 <HAL_DMA_Init+0x158>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a48      	ldr	r2, [pc, #288]	@ (8002f3c <HAL_DMA_Init+0x15c>)
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e1c:	e00e      	b.n	8002e3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b46      	ldr	r3, [pc, #280]	@ (8002f40 <HAL_DMA_Init+0x160>)
 8002e26:	4413      	add	r3, r2
 8002e28:	4a43      	ldr	r2, [pc, #268]	@ (8002f38 <HAL_DMA_Init+0x158>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a42      	ldr	r2, [pc, #264]	@ (8002f44 <HAL_DMA_Init+0x164>)
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e96:	d039      	beq.n	8002f0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <HAL_DMA_Init+0x15c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <HAL_DMA_Init+0x168>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f003 031c 	and.w	r3, r3, #28
 8002eae:	210f      	movs	r1, #15
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4924      	ldr	r1, [pc, #144]	@ (8002f48 <HAL_DMA_Init+0x168>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ebc:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <HAL_DMA_Init+0x168>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec8:	f003 031c 	and.w	r3, r3, #28
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	491d      	ldr	r1, [pc, #116]	@ (8002f48 <HAL_DMA_Init+0x168>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
 8002ed6:	e019      	b.n	8002f0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <HAL_DMA_Init+0x16c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	f003 031c 	and.w	r3, r3, #28
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	4917      	ldr	r1, [pc, #92]	@ (8002f4c <HAL_DMA_Init+0x16c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ef2:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <HAL_DMA_Init+0x16c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f003 031c 	and.w	r3, r3, #28
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	4911      	ldr	r1, [pc, #68]	@ (8002f4c <HAL_DMA_Init+0x16c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40020407 	.word	0x40020407
 8002f34:	bffdfff8 	.word	0xbffdfff8
 8002f38:	cccccccd 	.word	0xcccccccd
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	bffdfbf8 	.word	0xbffdfbf8
 8002f44:	40020400 	.word	0x40020400
 8002f48:	400200a8 	.word	0x400200a8
 8002f4c:	400204a8 	.word	0x400204a8

08002f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA_Start_IT+0x20>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e04b      	b.n	8003008 <HAL_DMA_Start_IT+0xb8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d13a      	bne.n	8002ffa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f95f 	bl	800326c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 020e 	orr.w	r2, r2, #14
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e00f      	b.n	8002fe8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 020a 	orr.w	r2, r2, #10
 8002fe6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e005      	b.n	8003006 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d008      	beq.n	800303a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2204      	movs	r2, #4
 800302c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e022      	b.n	8003080 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 020e 	bic.w	r2, r2, #14
 8003048:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f003 021c 	and.w	r2, r3, #28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d005      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2204      	movs	r2, #4
 80030a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	e029      	b.n	8003104 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 020e 	bic.w	r2, r2, #14
 80030be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d4:	f003 021c 	and.w	r2, r3, #28
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2101      	movs	r1, #1
 80030de:	fa01 f202 	lsl.w	r2, r1, r2
 80030e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
    }
  }
  return status;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f003 031c 	and.w	r3, r3, #28
 800312e:	2204      	movs	r2, #4
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d026      	beq.n	8003188 <HAL_DMA_IRQHandler+0x7a>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d021      	beq.n	8003188 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0204 	bic.w	r2, r2, #4
 8003160:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f003 021c 	and.w	r2, r3, #28
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	2104      	movs	r1, #4
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	2b00      	cmp	r3, #0
 800317c:	d071      	beq.n	8003262 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003186:	e06c      	b.n	8003262 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318c:	f003 031c 	and.w	r3, r3, #28
 8003190:	2202      	movs	r2, #2
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02e      	beq.n	80031fa <HAL_DMA_IRQHandler+0xec>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d029      	beq.n	80031fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 020a 	bic.w	r2, r2, #10
 80031c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	f003 021c 	and.w	r2, r3, #28
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	2102      	movs	r1, #2
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d038      	beq.n	8003262 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031f8:	e033      	b.n	8003262 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f003 031c 	and.w	r3, r3, #28
 8003202:	2208      	movs	r2, #8
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02a      	beq.n	8003264 <HAL_DMA_IRQHandler+0x156>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d025      	beq.n	8003264 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 020e 	bic.w	r2, r2, #14
 8003226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322c:	f003 021c 	and.w	r2, r3, #28
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	2101      	movs	r1, #1
 8003236:	fa01 f202 	lsl.w	r2, r1, r2
 800323a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003262:	bf00      	nop
 8003264:	bf00      	nop
}
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f003 021c 	and.w	r2, r3, #28
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f202 	lsl.w	r2, r1, r2
 800328c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d108      	bne.n	80032b0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ae:	e007      	b.n	80032c0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032da:	e17f      	b.n	80035dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8171 	beq.w	80035d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d005      	beq.n	800330c <HAL_GPIO_Init+0x40>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d130      	bne.n	800336e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003342:	2201      	movs	r2, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 0201 	and.w	r2, r3, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d118      	bne.n	80033ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	6939      	ldr	r1, [r7, #16]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ac 	beq.w	80035d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <HAL_GPIO_Init+0x330>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003482:	4a5e      	ldr	r2, [pc, #376]	@ (80035fc <HAL_GPIO_Init+0x330>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6613      	str	r3, [r2, #96]	@ 0x60
 800348a:	4b5c      	ldr	r3, [pc, #368]	@ (80035fc <HAL_GPIO_Init+0x330>)
 800348c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003496:	4a5a      	ldr	r2, [pc, #360]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034c0:	d025      	beq.n	800350e <HAL_GPIO_Init+0x242>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003604 <HAL_GPIO_Init+0x338>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01f      	beq.n	800350a <HAL_GPIO_Init+0x23e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003608 <HAL_GPIO_Init+0x33c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d019      	beq.n	8003506 <HAL_GPIO_Init+0x23a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4d      	ldr	r2, [pc, #308]	@ (800360c <HAL_GPIO_Init+0x340>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0x236>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003610 <HAL_GPIO_Init+0x344>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00d      	beq.n	80034fe <HAL_GPIO_Init+0x232>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003614 <HAL_GPIO_Init+0x348>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <HAL_GPIO_Init+0x22e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003618 <HAL_GPIO_Init+0x34c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_GPIO_Init+0x22a>
 80034f2:	2306      	movs	r3, #6
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_Init+0x244>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_Init+0x244>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x244>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x244>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x244>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x244>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x244>
 800350e:	2300      	movs	r3, #0
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003520:	4937      	ldr	r1, [pc, #220]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800352e:	4b3b      	ldr	r3, [pc, #236]	@ (800361c <HAL_GPIO_Init+0x350>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003552:	4a32      	ldr	r2, [pc, #200]	@ (800361c <HAL_GPIO_Init+0x350>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003558:	4b30      	ldr	r3, [pc, #192]	@ (800361c <HAL_GPIO_Init+0x350>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800357c:	4a27      	ldr	r2, [pc, #156]	@ (800361c <HAL_GPIO_Init+0x350>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003582:	4b26      	ldr	r3, [pc, #152]	@ (800361c <HAL_GPIO_Init+0x350>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035a6:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_GPIO_Init+0x350>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	@ (800361c <HAL_GPIO_Init+0x350>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d0:	4a12      	ldr	r2, [pc, #72]	@ (800361c <HAL_GPIO_Init+0x350>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f47f ae78 	bne.w	80032dc <HAL_GPIO_Init+0x10>
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010000 	.word	0x40010000
 8003604:	48000400 	.word	0x48000400
 8003608:	48000800 	.word	0x48000800
 800360c:	48000c00 	.word	0x48000c00
 8003610:	48001000 	.word	0x48001000
 8003614:	48001400 	.word	0x48001400
 8003618:	48001800 	.word	0x48001800
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800362e:	e0cd      	b.n	80037cc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003630:	2201      	movs	r2, #1
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80c0 	beq.w	80037c6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003646:	4a68      	ldr	r2, [pc, #416]	@ (80037e8 <HAL_GPIO_DeInit+0x1c8>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003652:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800366e:	d025      	beq.n	80036bc <HAL_GPIO_DeInit+0x9c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a5e      	ldr	r2, [pc, #376]	@ (80037ec <HAL_GPIO_DeInit+0x1cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01f      	beq.n	80036b8 <HAL_GPIO_DeInit+0x98>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a5d      	ldr	r2, [pc, #372]	@ (80037f0 <HAL_GPIO_DeInit+0x1d0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d019      	beq.n	80036b4 <HAL_GPIO_DeInit+0x94>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a5c      	ldr	r2, [pc, #368]	@ (80037f4 <HAL_GPIO_DeInit+0x1d4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_GPIO_DeInit+0x90>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a5b      	ldr	r2, [pc, #364]	@ (80037f8 <HAL_GPIO_DeInit+0x1d8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00d      	beq.n	80036ac <HAL_GPIO_DeInit+0x8c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a5a      	ldr	r2, [pc, #360]	@ (80037fc <HAL_GPIO_DeInit+0x1dc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <HAL_GPIO_DeInit+0x88>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a59      	ldr	r2, [pc, #356]	@ (8003800 <HAL_GPIO_DeInit+0x1e0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_GPIO_DeInit+0x84>
 80036a0:	2306      	movs	r3, #6
 80036a2:	e00c      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036a4:	2307      	movs	r3, #7
 80036a6:	e00a      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036a8:	2305      	movs	r3, #5
 80036aa:	e008      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e006      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036b0:	2303      	movs	r3, #3
 80036b2:	e004      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e002      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_GPIO_DeInit+0x9e>
 80036bc:	2300      	movs	r3, #0
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	f002 0203 	and.w	r2, r2, #3
 80036c4:	0092      	lsls	r2, r2, #2
 80036c6:	4093      	lsls	r3, r2
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d132      	bne.n	8003734 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80036ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	494b      	ldr	r1, [pc, #300]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036d8:	4013      	ands	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80036dc:	4b49      	ldr	r3, [pc, #292]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	4947      	ldr	r1, [pc, #284]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80036ea:	4b46      	ldr	r3, [pc, #280]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	4944      	ldr	r1, [pc, #272]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80036f8:	4b42      	ldr	r3, [pc, #264]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	4940      	ldr	r1, [pc, #256]	@ (8003804 <HAL_GPIO_DeInit+0x1e4>)
 8003702:	4013      	ands	r3, r2
 8003704:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	220f      	movs	r2, #15
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003716:	4a34      	ldr	r2, [pc, #208]	@ (80037e8 <HAL_GPIO_DeInit+0x1c8>)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43da      	mvns	r2, r3
 8003726:	4830      	ldr	r0, [pc, #192]	@ (80037e8 <HAL_GPIO_DeInit+0x1c8>)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	400a      	ands	r2, r1
 800372e:	3302      	adds	r3, #2
 8003730:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2103      	movs	r1, #3
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	220f      	movs	r2, #15
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	08d2      	lsrs	r2, r2, #3
 8003768:	4019      	ands	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3208      	adds	r2, #8
 800376e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2103      	movs	r1, #3
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	2101      	movs	r1, #1
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	401a      	ands	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2103      	movs	r1, #3
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	401a      	ands	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b6:	2101      	movs	r1, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f af2b 	bne.w	8003630 <HAL_GPIO_DeInit+0x10>
  }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40010000 	.word	0x40010000
 80037ec:	48000400 	.word	0x48000400
 80037f0:	48000800 	.word	0x48000800
 80037f4:	48000c00 	.word	0x48000c00
 80037f8:	48001000 	.word	0x48001000
 80037fc:	48001400 	.word	0x48001400
 8003800:	48001800 	.word	0x48001800
 8003804:	40010400 	.word	0x40010400

08003808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
 8003814:	4613      	mov	r3, r2
 8003816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003818:	787b      	ldrb	r3, [r7, #1]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800381e:	887a      	ldrh	r2, [r7, #2]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003824:	e002      	b.n	800382c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003842:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800384e:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd f98a 	bl	8000b70 <HAL_GPIO_EXTI_Callback>
  }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40010400 	.word	0x40010400

08003868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <HAL_PWREx_GetVoltageRange+0x18>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003892:	d130      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800389c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a0:	d038      	beq.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2232      	movs	r2, #50	@ 0x32
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c8:	e002      	b.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d102      	bne.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f2      	bne.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f0:	d110      	bne.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00f      	b.n	8003916 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d007      	beq.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003904:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800390c:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003912:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40007000 	.word	0x40007000
 8003928:	200000d8 	.word	0x200000d8
 800392c:	431bde83 	.word	0x431bde83

08003930 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e3ca      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4b97      	ldr	r3, [pc, #604]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394c:	4b94      	ldr	r3, [pc, #592]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80e4 	beq.w	8003b2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_RCC_OscConfig+0x4a>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	f040 808b 	bne.w	8003a88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b01      	cmp	r3, #1
 8003976:	f040 8087 	bne.w	8003a88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800397a:	4b89      	ldr	r3, [pc, #548]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e3a2      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	4b82      	ldr	r3, [pc, #520]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_RCC_OscConfig+0x7c>
 80039a2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039aa:	e005      	b.n	80039b8 <HAL_RCC_OscConfig+0x88>
 80039ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d223      	bcs.n	8003a04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fd87 	bl	80044d4 <RCC_SetFlashLatencyFromMSIRange>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e383      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d0:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a72      	ldr	r2, [pc, #456]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b70      	ldr	r3, [pc, #448]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	496d      	ldr	r1, [pc, #436]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ee:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	4968      	ldr	r1, [pc, #416]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
 8003a02:	e025      	b.n	8003a50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a04:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4960      	ldr	r1, [pc, #384]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a22:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	495b      	ldr	r1, [pc, #364]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd47 	bl	80044d4 <RCC_SetFlashLatencyFromMSIRange>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e343      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a50:	f000 fc4a 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b52      	ldr	r3, [pc, #328]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	4950      	ldr	r1, [pc, #320]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba8 <HAL_RCC_OscConfig+0x278>)
 8003a6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a70:	4b4e      	ldr	r3, [pc, #312]	@ (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fbf3 	bl	8001260 <HAL_InitTick>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d052      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	e327      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d032      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a90:	4b43      	ldr	r3, [pc, #268]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a42      	ldr	r2, [pc, #264]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a9c:	f7ff f88e 	bl	8002bbc <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa4:	f7ff f88a 	bl	8002bbc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e310      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a36      	ldr	r2, [pc, #216]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b34      	ldr	r3, [pc, #208]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4931      	ldr	r1, [pc, #196]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	492c      	ldr	r1, [pc, #176]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e01a      	b.n	8003b2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003af6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b02:	f7ff f85b 	bl	8002bbc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0a:	f7ff f857 	bl	8002bbc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e2dd      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x1da>
 8003b28:	e000      	b.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d074      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x21a>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d10e      	bne.n	8003b62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d064      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d160      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e2ba      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x24a>
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e026      	b.n	8003bc8 <HAL_RCC_OscConfig+0x298>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b82:	d115      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x280>
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a05      	ldr	r2, [pc, #20]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a02      	ldr	r2, [pc, #8]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCC_OscConfig+0x298>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	0800bcac 	.word	0x0800bcac
 8003ba8:	200000d8 	.word	0x200000d8
 8003bac:	200000e8 	.word	0x200000e8
 8003bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fff4 	bl	8002bbc <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fff0 	bl	8002bbc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e276      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	4b92      	ldr	r3, [pc, #584]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2a8>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe ffe0 	bl	8002bbc <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe ffdc 	bl	8002bbc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e262      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c12:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2d0>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d060      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x310>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d119      	bne.n	8003c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d116      	bne.n	8003c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	4b7c      	ldr	r3, [pc, #496]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x328>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e23f      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	4973      	ldr	r1, [pc, #460]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6c:	e040      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d023      	beq.n	8003cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c76:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fe ff9b 	bl	8002bbc <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fe ff97 	bl	8002bbc <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e21d      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	4b65      	ldr	r3, [pc, #404]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b62      	ldr	r3, [pc, #392]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	495f      	ldr	r1, [pc, #380]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe ff77 	bl	8002bbc <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe ff73 	bl	8002bbc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1f9      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01c      	beq.n	8003d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d04:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fe ff52 	bl	8002bbc <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe ff4e 	bl	8002bbc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1d4      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ef      	beq.n	8003d1c <HAL_RCC_OscConfig+0x3ec>
 8003d3c:	e01b      	b.n	8003d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	4a3b      	ldr	r2, [pc, #236]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe ff35 	bl	8002bbc <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe ff31 	bl	8002bbc <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1b7      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ef      	bne.n	8003d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a6 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d88:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da0:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d118      	bne.n	8003dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc8:	f7fe fef8 	bl	8002bbc <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fe fef4 	bl	8002bbc <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e17a      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	4b15      	ldr	r3, [pc, #84]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4d8>
 8003df6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e06:	e029      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d115      	bne.n	8003e3c <HAL_RCC_OscConfig+0x50c>
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	4a03      	ldr	r2, [pc, #12]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	4a9b      	ldr	r2, [pc, #620]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e4c:	4b98      	ldr	r3, [pc, #608]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	4a97      	ldr	r2, [pc, #604]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe feaa 	bl	8002bbc <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe fea6 	bl	8002bbc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e12a      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e82:	4b8b      	ldr	r3, [pc, #556]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ed      	beq.n	8003e6c <HAL_RCC_OscConfig+0x53c>
 8003e90:	e015      	b.n	8003ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fe93 	bl	8002bbc <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fe8f 	bl	8002bbc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e113      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ed      	bne.n	8003e9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	4a79      	ldr	r2, [pc, #484]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80fe 	beq.w	80040d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	f040 80d0 	bne.w	8004084 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ee4:	4b72      	ldr	r3, [pc, #456]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0203 	and.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d130      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	3b01      	subs	r3, #1
 8003f04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d127      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d11f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f24:	2a07      	cmp	r2, #7
 8003f26:	bf14      	ite	ne
 8003f28:	2201      	movne	r2, #1
 8003f2a:	2200      	moveq	r2, #0
 8003f2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d06e      	beq.n	8004038 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	d069      	beq.n	8004034 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f6c:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0ad      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f88:	f7fe fe18 	bl	8002bbc <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fe14 	bl	8002bbc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e09a      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa2:	4b43      	ldr	r3, [pc, #268]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fae:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	4b40      	ldr	r3, [pc, #256]	@ (80040b4 <HAL_RCC_OscConfig+0x784>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fc8:	0212      	lsls	r2, r2, #8
 8003fca:	4311      	orrs	r1, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fd0:	0852      	lsrs	r2, r2, #1
 8003fd2:	3a01      	subs	r2, #1
 8003fd4:	0552      	lsls	r2, r2, #21
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fdc:	0852      	lsrs	r2, r2, #1
 8003fde:	3a01      	subs	r2, #1
 8003fe0:	0652      	lsls	r2, r2, #25
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fe8:	0912      	lsrs	r2, r2, #4
 8003fea:	0452      	lsls	r2, r2, #17
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4930      	ldr	r1, [pc, #192]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b2b      	ldr	r3, [pc, #172]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400c:	f7fe fdd6 	bl	8002bbc <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fdd2 	bl	8002bbc <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e058      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004032:	e050      	b.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e04f      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004038:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d148      	bne.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004044:	4b1a      	ldr	r3, [pc, #104]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004050:	4b17      	ldr	r3, [pc, #92]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800405a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800405c:	f7fe fdae 	bl	8002bbc <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fe fdaa 	bl	8002bbc <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e030      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x734>
 8004082:	e028      	b.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d023      	beq.n	80040d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004090:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fe fd91 	bl	8002bbc <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	e00c      	b.n	80040b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe fd8d 	bl	8002bbc <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d905      	bls.n	80040b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e013      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
 80040b0:	40021000 	.word	0x40021000
 80040b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ec      	bne.n	800409e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4905      	ldr	r1, [pc, #20]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x7b4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
 80040d0:	e001      	b.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	feeefffc 	.word	0xfeeefffc

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0e7      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b75      	ldr	r3, [pc, #468]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b72      	ldr	r3, [pc, #456]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4970      	ldr	r1, [pc, #448]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b6e      	ldr	r3, [pc, #440]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cf      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4b66      	ldr	r3, [pc, #408]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4960      	ldr	r1, [pc, #384]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04c      	beq.n	8004200 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	4b5a      	ldr	r3, [pc, #360]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d121      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0a6      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004186:	4b54      	ldr	r3, [pc, #336]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d115      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e09a      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800419e:	4b4e      	ldr	r3, [pc, #312]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e08e      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ae:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e086      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4943      	ldr	r1, [pc, #268]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fe fcf4 	bl	8002bbc <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe fcf0 	bl	8002bbc <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e06e      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b3a      	ldr	r3, [pc, #232]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004218:	429a      	cmp	r2, r3
 800421a:	d208      	bcs.n	800422e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	492b      	ldr	r1, [pc, #172]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422e:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d210      	bcs.n	800425e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423c:	4b25      	ldr	r3, [pc, #148]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 0207 	bic.w	r2, r3, #7
 8004244:	4923      	ldr	r1, [pc, #140]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e036      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426a:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4918      	ldr	r1, [pc, #96]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4910      	ldr	r1, [pc, #64]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429c:	f000 f824 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	490b      	ldr	r1, [pc, #44]	@ (80042dc <HAL_RCC_ClockConfig+0x1f4>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80042ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_RCC_ClockConfig+0x1fc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc ffcd 	bl	8001260 <HAL_InitTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800bcac 	.word	0x0800bcac
 80042e0:	200000d8 	.word	0x200000d8
 80042e4:	200000e8 	.word	0x200000e8

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	@ 0x24
 80042ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	4b3b      	ldr	r3, [pc, #236]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d121      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d11e      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800431c:	4b34      	ldr	r3, [pc, #208]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004328:	4b31      	ldr	r3, [pc, #196]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e005      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004338:	4b2d      	ldr	r3, [pc, #180]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004344:	4a2b      	ldr	r2, [pc, #172]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d102      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e004      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d101      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436c:	4b23      	ldr	r3, [pc, #140]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 800436e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d134      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004376:	4b1e      	ldr	r3, [pc, #120]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0xa6>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d003      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xac>
 800438c:	e005      	b.n	800439a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004390:	617b      	str	r3, [r7, #20]
      break;
 8004392:	e005      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004396:	617b      	str	r3, [r7, #20]
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	617b      	str	r3, [r7, #20]
      break;
 800439e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	3301      	adds	r3, #1
 80043ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	fb03 f202 	mul.w	r2, r3, r2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	0e5b      	lsrs	r3, r3, #25
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	3301      	adds	r3, #1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043e0:	69bb      	ldr	r3, [r7, #24]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3724      	adds	r7, #36	@ 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	0800bcc4 	.word	0x0800bcc4
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200000d8 	.word	0x200000d8

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4904      	ldr	r1, [pc, #16]	@ (8004440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	0800bcbc 	.word	0x0800bcbc

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004448:	f7ff ffda 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0adb      	lsrs	r3, r3, #11
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4904      	ldr	r1, [pc, #16]	@ (800446c <HAL_RCC_GetPCLK2Freq+0x28>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	0800bcbc 	.word	0x0800bcbc

08004470 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	220f      	movs	r2, #15
 800447e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004480:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800448c:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044b2:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <HAL_RCC_GetClockConfig+0x60>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0207 	and.w	r2, r3, #7
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40022000 	.word	0x40022000

080044d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e0:	4b2a      	ldr	r3, [pc, #168]	@ (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044ec:	f7ff f9bc 	bl	8003868 <HAL_PWREx_GetVoltageRange>
 80044f0:	6178      	str	r0, [r7, #20]
 80044f2:	e014      	b.n	800451e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b25      	ldr	r3, [pc, #148]	@ (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	4a24      	ldr	r2, [pc, #144]	@ (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004500:	4b22      	ldr	r3, [pc, #136]	@ (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800450c:	f7ff f9ac 	bl	8003868 <HAL_PWREx_GetVoltageRange>
 8004510:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b1e      	ldr	r3, [pc, #120]	@ (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004516:	4a1d      	ldr	r2, [pc, #116]	@ (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004524:	d10b      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	@ 0x80
 800452a:	d919      	bls.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004530:	d902      	bls.n	8004538 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004532:	2302      	movs	r3, #2
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e013      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004538:	2301      	movs	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e010      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b80      	cmp	r3, #128	@ 0x80
 8004542:	d902      	bls.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004544:	2303      	movs	r3, #3
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e00a      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b80      	cmp	r3, #128	@ 0x80
 800454e:	d102      	bne.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004550:	2302      	movs	r3, #2
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	e004      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b70      	cmp	r3, #112	@ 0x70
 800455a:	d101      	bne.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800455c:	2301      	movs	r3, #1
 800455e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004560:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 0207 	bic.w	r2, r3, #7
 8004568:	4909      	ldr	r1, [pc, #36]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004570:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d001      	beq.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	40022000 	.word	0x40022000

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800459c:	2300      	movs	r3, #0
 800459e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d041      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045b8:	d02a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045be:	d824      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045c4:	d008      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045ca:	d81e      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045d4:	d010      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045d6:	e018      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045d8:	4b86      	ldr	r3, [pc, #536]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a85      	ldr	r2, [pc, #532]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e4:	e015      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fabb 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f6:	e00c      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3320      	adds	r3, #32
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fba6 	bl	8004d50 <RCCEx_PLLSAI2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	74fb      	strb	r3, [r7, #19]
      break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004618:	4b76      	ldr	r3, [pc, #472]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004626:	4973      	ldr	r1, [pc, #460]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800462e:	e001      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d041      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004644:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004648:	d02a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800464a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800464e:	d824      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004654:	d008      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800465a:	d81e      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004664:	d010      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004666:	e018      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004668:	4b62      	ldr	r3, [pc, #392]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a61      	ldr	r2, [pc, #388]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004672:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004674:	e015      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fa73 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004686:	e00c      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3320      	adds	r3, #32
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fb5e 	bl	8004d50 <RCCEx_PLLSAI2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004698:	e003      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	74fb      	strb	r3, [r7, #19]
      break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046a8:	4b52      	ldr	r3, [pc, #328]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b6:	494f      	ldr	r1, [pc, #316]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046be:	e001      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a0 	beq.w	8004812 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046d6:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ec:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	4a40      	ldr	r2, [pc, #256]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f8:	4b3e      	ldr	r3, [pc, #248]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004704:	2301      	movs	r3, #1
 8004706:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004708:	4b3b      	ldr	r3, [pc, #236]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3a      	ldr	r2, [pc, #232]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004714:	f7fe fa52 	bl	8002bbc <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800471a:	e009      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fe fa4e 	bl	8002bbc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d902      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	74fb      	strb	r3, [r7, #19]
        break;
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004730:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ef      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d15c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	429a      	cmp	r2, r3
 800475e:	d019      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004760:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800476c:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800477c:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fe fa0d 	bl	8002bbc <HAL_GetTick>
 80047a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a4:	e00b      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fe fa09 	bl	8002bbc <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d902      	bls.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	74fb      	strb	r3, [r7, #19]
            break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ec      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d2:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e2:	4904      	ldr	r1, [pc, #16]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047ea:	e009      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	74bb      	strb	r3, [r7, #18]
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004800:	7c7b      	ldrb	r3, [r7, #17]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004806:	4b9e      	ldr	r3, [pc, #632]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	4a9d      	ldr	r2, [pc, #628]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004810:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481e:	4b98      	ldr	r3, [pc, #608]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f023 0203 	bic.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	4994      	ldr	r1, [pc, #592]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004840:	4b8f      	ldr	r3, [pc, #572]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 020c 	bic.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	498c      	ldr	r1, [pc, #560]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004862:	4b87      	ldr	r3, [pc, #540]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004868:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	4983      	ldr	r1, [pc, #524]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004884:	4b7e      	ldr	r3, [pc, #504]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	497b      	ldr	r1, [pc, #492]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a6:	4b76      	ldr	r3, [pc, #472]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	4972      	ldr	r1, [pc, #456]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	496a      	ldr	r1, [pc, #424]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ea:	4b65      	ldr	r3, [pc, #404]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f8:	4961      	ldr	r1, [pc, #388]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800490c:	4b5c      	ldr	r3, [pc, #368]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491a:	4959      	ldr	r1, [pc, #356]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492e:	4b54      	ldr	r3, [pc, #336]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004934:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493c:	4950      	ldr	r1, [pc, #320]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004950:	4b4b      	ldr	r3, [pc, #300]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	4948      	ldr	r1, [pc, #288]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004972:	4b43      	ldr	r3, [pc, #268]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004980:	493f      	ldr	r1, [pc, #252]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d028      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004994:	4b3a      	ldr	r3, [pc, #232]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a2:	4937      	ldr	r1, [pc, #220]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b32      	ldr	r3, [pc, #200]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a31      	ldr	r2, [pc, #196]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e011      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8c8 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f2:	4b23      	ldr	r3, [pc, #140]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a00:	491f      	ldr	r1, [pc, #124]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a12:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	4a1a      	ldr	r2, [pc, #104]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a1c:	60d3      	str	r3, [r2, #12]
 8004a1e:	e011      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f899 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02b      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5e:	4908      	ldr	r1, [pc, #32]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a02      	ldr	r2, [pc, #8]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
 8004a7c:	e014      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2101      	movs	r1, #1
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f867 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ac2:	4928      	ldr	r1, [pc, #160]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ad2:	d10d      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f844 	bl	8004b68 <RCCEx_PLLSAI1_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d014      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	74bb      	strb	r3, [r7, #18]
 8004aee:	e011      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3320      	adds	r3, #32
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f925 	bl	8004d50 <RCCEx_PLLSAI2_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2e:	490d      	ldr	r1, [pc, #52]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b42:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b52:	4904      	ldr	r1, [pc, #16]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000

08004b68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b76:	4b75      	ldr	r3, [pc, #468]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d018      	beq.n	8004bb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b82:	4b72      	ldr	r3, [pc, #456]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d10d      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
       ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b9a:	4b6c      	ldr	r3, [pc, #432]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d047      	beq.n	8004c3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
 8004bb2:	e044      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d018      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0x86>
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d825      	bhi.n	8004c0c <RCCEx_PLLSAI1_Config+0xa4>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d002      	beq.n	8004bca <RCCEx_PLLSAI1_Config+0x62>
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d009      	beq.n	8004bdc <RCCEx_PLLSAI1_Config+0x74>
 8004bc8:	e020      	b.n	8004c0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bca:	4b60      	ldr	r3, [pc, #384]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bda:	e01a      	b.n	8004c12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bec:	e013      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bee:	4b57      	ldr	r3, [pc, #348]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bfa:	4b54      	ldr	r3, [pc, #336]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c0a:	e006      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c10:	e004      	b.n	8004c1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c12:	bf00      	nop
 8004c14:	e002      	b.n	8004c1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c22:	4b4a      	ldr	r3, [pc, #296]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	430b      	orrs	r3, r1
 8004c38:	4944      	ldr	r1, [pc, #272]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d17d      	bne.n	8004d40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c44:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a40      	ldr	r2, [pc, #256]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fd ffb4 	bl	8002bbc <HAL_GetTick>
 8004c54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c56:	e009      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c58:	f7fd ffb0 	bl	8002bbc <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d902      	bls.n	8004c6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	73fb      	strb	r3, [r7, #15]
        break;
 8004c6a:	e005      	b.n	8004c78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c6c:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ef      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d160      	bne.n	8004d40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c84:	4b31      	ldr	r3, [pc, #196]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6892      	ldr	r2, [r2, #8]
 8004c94:	0211      	lsls	r1, r2, #8
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68d2      	ldr	r2, [r2, #12]
 8004c9a:	0912      	lsrs	r2, r2, #4
 8004c9c:	0452      	lsls	r2, r2, #17
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	492a      	ldr	r1, [pc, #168]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]
 8004ca6:	e027      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d112      	bne.n	8004cd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cae:	4b27      	ldr	r3, [pc, #156]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004cb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6892      	ldr	r2, [r2, #8]
 8004cbe:	0211      	lsls	r1, r2, #8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6912      	ldr	r2, [r2, #16]
 8004cc4:	0852      	lsrs	r2, r2, #1
 8004cc6:	3a01      	subs	r2, #1
 8004cc8:	0552      	lsls	r2, r2, #21
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	491f      	ldr	r1, [pc, #124]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	610b      	str	r3, [r1, #16]
 8004cd2:	e011      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	0211      	lsls	r1, r2, #8
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6952      	ldr	r2, [r2, #20]
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0652      	lsls	r2, r2, #25
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	4916      	ldr	r1, [pc, #88]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cf8:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fd ff5a 	bl	8002bbc <HAL_GetTick>
 8004d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d0a:	e009      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d0c:	f7fd ff56 	bl	8002bbc <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d902      	bls.n	8004d20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d1e:	e005      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d20:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	4904      	ldr	r1, [pc, #16]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000

08004d50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d6a:	4b67      	ldr	r3, [pc, #412]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0203 	and.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d10d      	bne.n	8004d96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d82:	4b61      	ldr	r3, [pc, #388]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
       ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d047      	beq.n	8004e26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
 8004d9a:	e044      	b.n	8004e26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d018      	beq.n	8004dd6 <RCCEx_PLLSAI2_Config+0x86>
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d825      	bhi.n	8004df4 <RCCEx_PLLSAI2_Config+0xa4>
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d002      	beq.n	8004db2 <RCCEx_PLLSAI2_Config+0x62>
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d009      	beq.n	8004dc4 <RCCEx_PLLSAI2_Config+0x74>
 8004db0:	e020      	b.n	8004df4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004db2:	4b55      	ldr	r3, [pc, #340]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11d      	bne.n	8004dfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc2:	e01a      	b.n	8004dfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dc4:	4b50      	ldr	r3, [pc, #320]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d116      	bne.n	8004dfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd4:	e013      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004de2:	4b49      	ldr	r3, [pc, #292]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004df2:	e006      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e004      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10d      	bne.n	8004e26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	4939      	ldr	r1, [pc, #228]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d167      	bne.n	8004efc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e2c:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a35      	ldr	r2, [pc, #212]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e38:	f7fd fec0 	bl	8002bbc <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e3e:	e009      	b.n	8004e54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e40:	f7fd febc 	bl	8002bbc <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d902      	bls.n	8004e54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	73fb      	strb	r3, [r7, #15]
        break;
 8004e52:	e005      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e54:	4b2c      	ldr	r3, [pc, #176]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ef      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d14a      	bne.n	8004efc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d111      	bne.n	8004e90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e6c:	4b26      	ldr	r3, [pc, #152]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	0211      	lsls	r1, r2, #8
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68d2      	ldr	r2, [r2, #12]
 8004e82:	0912      	lsrs	r2, r2, #4
 8004e84:	0452      	lsls	r2, r2, #17
 8004e86:	430a      	orrs	r2, r1
 8004e88:	491f      	ldr	r1, [pc, #124]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	614b      	str	r3, [r1, #20]
 8004e8e:	e011      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e90:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6892      	ldr	r2, [r2, #8]
 8004ea0:	0211      	lsls	r1, r2, #8
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6912      	ldr	r2, [r2, #16]
 8004ea6:	0852      	lsrs	r2, r2, #1
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0652      	lsls	r2, r2, #25
 8004eac:	430a      	orrs	r2, r1
 8004eae:	4916      	ldr	r1, [pc, #88]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fe7c 	bl	8002bbc <HAL_GetTick>
 8004ec4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ec6:	e009      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec8:	f7fd fe78 	bl	8002bbc <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d902      	bls.n	8004edc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	73fb      	strb	r3, [r7, #15]
          break;
 8004eda:	e005      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004edc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4904      	ldr	r1, [pc, #16]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000

08004f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e095      	b.n	800504a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2e:	d009      	beq.n	8004f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	61da      	str	r2, [r3, #28]
 8004f36:	e005      	b.n	8004f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc f8f4 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f84:	d902      	bls.n	8004f8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e002      	b.n	8004f92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f9a:	d007      	beq.n	8004fac <HAL_SPI_Init+0xa0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fee:	ea42 0103 	orr.w	r1, r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	f003 0204 	and.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005028:	ea42 0103 	orr.w	r1, r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e01a      	b.n	800509a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fc f8a9 	bl	80011d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b088      	sub	sp, #32
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	603b      	str	r3, [r7, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050b2:	f7fd fd83 	bl	8002bbc <HAL_GetTick>
 80050b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
 80050ca:	e15c      	b.n	8005386 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Transmit+0x36>
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e154      	b.n	8005386 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_SPI_Transmit+0x48>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e14d      	b.n	8005386 <HAL_SPI_Transmit+0x2e4>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2203      	movs	r2, #3
 80050f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	88fa      	ldrh	r2, [r7, #6]
 800510a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800513c:	d10f      	bne.n	800515e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800515c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005168:	2b40      	cmp	r3, #64	@ 0x40
 800516a:	d007      	beq.n	800517c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800517a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005184:	d952      	bls.n	800522c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_SPI_Transmit+0xf2>
 800518e:	8b7b      	ldrh	r3, [r7, #26]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d145      	bne.n	8005220 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051b8:	e032      	b.n	8005220 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d112      	bne.n	80051ee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	881a      	ldrh	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	1c9a      	adds	r2, r3, #2
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051ec:	e018      	b.n	8005220 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ee:	f7fd fce5 	bl	8002bbc <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d803      	bhi.n	8005206 <HAL_SPI_Transmit+0x164>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d102      	bne.n	800520c <HAL_SPI_Transmit+0x16a>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e0b2      	b.n	8005386 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1c7      	bne.n	80051ba <HAL_SPI_Transmit+0x118>
 800522a:	e083      	b.n	8005334 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_Transmit+0x198>
 8005234:	8b7b      	ldrh	r3, [r7, #26]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d177      	bne.n	800532a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	d912      	bls.n	800526a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b02      	subs	r3, #2
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005268:	e05f      	b.n	800532a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	7812      	ldrb	r2, [r2, #0]
 8005276:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005290:	e04b      	b.n	800532a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d12b      	bne.n	80052f8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d912      	bls.n	80052d0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b02      	subs	r3, #2
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052ce:	e02c      	b.n	800532a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052f6:	e018      	b.n	800532a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f8:	f7fd fc60 	bl	8002bbc <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d803      	bhi.n	8005310 <HAL_SPI_Transmit+0x26e>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d102      	bne.n	8005316 <HAL_SPI_Transmit+0x274>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e02d      	b.n	8005386 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ae      	bne.n	8005292 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f947 	bl	80055cc <SPI_EndRxTxTransaction>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005384:	2300      	movs	r3, #0
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a0:	f7fd fc0c 	bl	8002bbc <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b0:	f7fd fc04 	bl	8002bbc <HAL_GetTick>
 80053b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053b6:	4b39      	ldr	r3, [pc, #228]	@ (800549c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	015b      	lsls	r3, r3, #5
 80053bc:	0d1b      	lsrs	r3, r3, #20
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c6:	e054      	b.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d050      	beq.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d0:	f7fd fbf4 	bl	8002bbc <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d902      	bls.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d13d      	bne.n	8005462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053fe:	d111      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005408:	d004      	beq.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005412:	d107      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800542c:	d10f      	bne.n	800544e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800544c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e017      	b.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	3b01      	subs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d19b      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200000d8 	.word	0x200000d8

080054a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	@ 0x28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054b2:	f7fd fb83 	bl	8002bbc <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	4413      	add	r3, r2
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80054c2:	f7fd fb7b 	bl	8002bbc <HAL_GetTick>
 80054c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054d0:	4b3d      	ldr	r3, [pc, #244]	@ (80055c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	00da      	lsls	r2, r3, #3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	0d1b      	lsrs	r3, r3, #20
 80054e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054e8:	e060      	b.n	80055ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054f0:	d107      	bne.n	8005502 <SPI_WaitFifoStateUntilTimeout+0x62>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005500:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d050      	beq.n	80055ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800550a:	f7fd fb57 	bl	8002bbc <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	429a      	cmp	r2, r3
 8005518:	d902      	bls.n	8005520 <SPI_WaitFifoStateUntilTimeout+0x80>
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d13d      	bne.n	800559c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800552e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005538:	d111      	bne.n	800555e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005542:	d004      	beq.n	800554e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800554c:	d107      	bne.n	800555e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800555c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005566:	d10f      	bne.n	8005588 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005586:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e010      	b.n	80055be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d196      	bne.n	80054ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3728      	adds	r7, #40	@ 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	200000d8 	.word	0x200000d8

080055cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff5b 	bl	80054a0 <SPI_WaitFifoStateUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e027      	b.n	8005650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	2180      	movs	r1, #128	@ 0x80
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fec0 	bl	8005390 <SPI_WaitFlagStateUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e014      	b.n	8005650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff ff34 	bl	80054a0 <SPI_WaitFifoStateUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e000      	b.n	8005650 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e049      	b.n	80056fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fb ffc2 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f000 fa3e 	bl	8005b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e047      	b.n	80057b0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a23      	ldr	r2, [pc, #140]	@ (80057bc <HAL_TIM_Base_Start+0xb4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01d      	beq.n	800576e <HAL_TIM_Base_Start+0x66>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573a:	d018      	beq.n	800576e <HAL_TIM_Base_Start+0x66>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1f      	ldr	r2, [pc, #124]	@ (80057c0 <HAL_TIM_Base_Start+0xb8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_TIM_Base_Start+0x66>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <HAL_TIM_Base_Start+0xbc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_TIM_Base_Start+0x66>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <HAL_TIM_Base_Start+0xc0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_TIM_Base_Start+0x66>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <HAL_TIM_Base_Start+0xc4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_TIM_Base_Start+0x66>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a19      	ldr	r2, [pc, #100]	@ (80057d0 <HAL_TIM_Base_Start+0xc8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d115      	bne.n	800579a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <HAL_TIM_Base_Start+0xcc>)
 8005776:	4013      	ands	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b06      	cmp	r3, #6
 800577e:	d015      	beq.n	80057ac <HAL_TIM_Base_Start+0xa4>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005786:	d011      	beq.n	80057ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	e008      	b.n	80057ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e000      	b.n	80057ae <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	00010007 	.word	0x00010007

080057d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e04f      	b.n	8005890 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a23      	ldr	r2, [pc, #140]	@ (800589c <HAL_TIM_Base_Start_IT+0xc4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581a:	d018      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1e      	ldr	r2, [pc, #120]	@ (80058a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d115      	bne.n	800587a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b17      	ldr	r3, [pc, #92]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005856:	4013      	ands	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b06      	cmp	r3, #6
 800585e:	d015      	beq.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005866:	d011      	beq.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e008      	b.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e000      	b.n	800588e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	00010007 	.word	0x00010007

080058b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0202 	mvn.w	r2, #2
 80058ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8e9 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8db 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f8ec 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d020      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01b      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0204 	mvn.w	r2, #4
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8c3 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f8b5 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8c6 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0208 	mvn.w	r2, #8
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f89d 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f88f 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8a0 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01b      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f877 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f869 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f87a 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0201 	mvn.w	r2, #1
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fb fa10 	bl	8000e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f99b 	bl	8005d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f993 	bl	8005d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f834 	bl	8005b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0220 	mvn.w	r2, #32
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f95b 	bl	8005d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a46      	ldr	r2, [pc, #280]	@ (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b36:	d00f      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a43      	ldr	r2, [pc, #268]	@ (8005c48 <TIM_Base_SetConfig+0x130>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a42      	ldr	r2, [pc, #264]	@ (8005c4c <TIM_Base_SetConfig+0x134>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a41      	ldr	r2, [pc, #260]	@ (8005c50 <TIM_Base_SetConfig+0x138>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a40      	ldr	r2, [pc, #256]	@ (8005c54 <TIM_Base_SetConfig+0x13c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d108      	bne.n	8005b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a35      	ldr	r2, [pc, #212]	@ (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a32      	ldr	r2, [pc, #200]	@ (8005c48 <TIM_Base_SetConfig+0x130>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a31      	ldr	r2, [pc, #196]	@ (8005c4c <TIM_Base_SetConfig+0x134>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a30      	ldr	r2, [pc, #192]	@ (8005c50 <TIM_Base_SetConfig+0x138>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	@ (8005c54 <TIM_Base_SetConfig+0x13c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c58 <TIM_Base_SetConfig+0x140>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c5c <TIM_Base_SetConfig+0x144>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <TIM_Base_SetConfig+0x148>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <TIM_Base_SetConfig+0x13c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <TIM_Base_SetConfig+0x140>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a16      	ldr	r2, [pc, #88]	@ (8005c5c <TIM_Base_SetConfig+0x144>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <TIM_Base_SetConfig+0x148>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d103      	bne.n	8005c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]
  }
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40000c00 	.word	0x40000c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e068      	b.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2d      	ldr	r2, [pc, #180]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d108      	bne.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01d      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cee:	d018      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a13      	ldr	r2, [pc, #76]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a14      	ldr	r2, [pc, #80]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10c      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40013400 	.word	0x40013400
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40014000 	.word	0x40014000

08005d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e040      	b.n	8005e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fb fc68 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2224      	movs	r2, #36	@ 0x24
 8005ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fe8e 	bl	8006b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fbd3 	bl	80065a8 <UART_SetConfig>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e01b      	b.n	8005e44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 ff0d 	bl	8006c5c <UART_CheckIdleState>
 8005e42:	4603      	mov	r3, r0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	@ 0x28
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d177      	bne.n	8005f54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_UART_Transmit+0x24>
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e070      	b.n	8005f56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2221      	movs	r2, #33	@ 0x21
 8005e80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e82:	f7fc fe9b 	bl	8002bbc <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea0:	d108      	bne.n	8005eb4 <HAL_UART_Transmit+0x68>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	e003      	b.n	8005ebc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ebc:	e02f      	b.n	8005f1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2180      	movs	r1, #128	@ 0x80
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 ff6f 	bl	8006dac <UART_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e03b      	b.n	8005f56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	881a      	ldrh	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e007      	b.n	8005f0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1c9      	bne.n	8005ebe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2140      	movs	r1, #64	@ 0x40
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 ff39 	bl	8006dac <UART_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e005      	b.n	8005f56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b0ba      	sub	sp, #232	@ 0xe8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005f8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005f8e:	4013      	ands	r3, r2
 8005f90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d115      	bne.n	8005fc8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d009      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 82ca 	beq.w	8006552 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
      }
      return;
 8005fc6:	e2c4      	b.n	8006552 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8117 	beq.w	8006200 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005fe2:	4b85      	ldr	r3, [pc, #532]	@ (80061f8 <HAL_UART_IRQHandler+0x298>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 810a 	beq.w	8006200 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d011      	beq.n	800601c <HAL_UART_IRQHandler+0xbc>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2201      	movs	r2, #1
 800600a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006012:	f043 0201 	orr.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d011      	beq.n	800604c <HAL_UART_IRQHandler+0xec>
 8006028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00b      	beq.n	800604c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2202      	movs	r2, #2
 800603a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006042:	f043 0204 	orr.w	r2, r3, #4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800604c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d011      	beq.n	800607c <HAL_UART_IRQHandler+0x11c>
 8006058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2204      	movs	r2, #4
 800606a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006072:	f043 0202 	orr.w	r2, r3, #2
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800607c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d017      	beq.n	80060b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006098:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2208      	movs	r2, #8
 80060a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ae:	f043 0208 	orr.w	r2, r3, #8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d012      	beq.n	80060ea <HAL_UART_IRQHandler+0x18a>
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8230 	beq.w	8006556 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006124:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006132:	2b40      	cmp	r3, #64	@ 0x40
 8006134:	d005      	beq.n	8006142 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800613a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04f      	beq.n	80061e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 ff66 	bl	8007014 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006152:	2b40      	cmp	r3, #64	@ 0x40
 8006154:	d141      	bne.n	80061da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006182:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800618e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800619a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d9      	bne.n	8006156 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d013      	beq.n	80061d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ae:	4a13      	ldr	r2, [pc, #76]	@ (80061fc <HAL_UART_IRQHandler+0x29c>)
 80061b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fc ff68 	bl	800308c <HAL_DMA_Abort_IT>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061cc:	4610      	mov	r0, r2
 80061ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	e00f      	b.n	80061f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9de 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	e00b      	b.n	80061f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9da 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	e007      	b.n	80061f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9d6 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80061f0:	e1b1      	b.n	8006556 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f2:	bf00      	nop
    return;
 80061f4:	e1af      	b.n	8006556 <HAL_UART_IRQHandler+0x5f6>
 80061f6:	bf00      	nop
 80061f8:	04000120 	.word	0x04000120
 80061fc:	080072c5 	.word	0x080072c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006204:	2b01      	cmp	r3, #1
 8006206:	f040 816a 	bne.w	80064de <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8163 	beq.w	80064de <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 815c 	beq.w	80064de <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2210      	movs	r2, #16
 800622c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b40      	cmp	r3, #64	@ 0x40
 800623a:	f040 80d4 	bne.w	80063e6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800624a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80ad 	beq.w	80063ae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800625a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800625e:	429a      	cmp	r2, r3
 8006260:	f080 80a5 	bcs.w	80063ae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800626a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 8086 	bne.w	800638c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800629c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1da      	bne.n	8006280 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3308      	adds	r3, #8
 80062ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e1      	bne.n	80062ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800632a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800632c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006330:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e3      	bne.n	8006306 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800635a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800635c:	f023 0310 	bic.w	r3, r3, #16
 8006360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800636e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006370:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006374:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800637c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e4      	bne.n	800634c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006386:	4618      	mov	r0, r3
 8006388:	f7fc fe42 	bl	8003010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fa fba0 	bl	8000aec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80063ac:	e0d5      	b.n	800655a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063b8:	429a      	cmp	r2, r3
 80063ba:	f040 80ce 	bne.w	800655a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	f040 80c5 	bne.w	800655a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fa fb84 	bl	8000aec <HAL_UARTEx_RxEventCallback>
      return;
 80063e4:	e0b9      	b.n	800655a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 80ab 	beq.w	800655e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80a6 	beq.w	800655e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006434:	647b      	str	r3, [r7, #68]	@ 0x44
 8006436:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800643a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e4      	bne.n	8006412 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	623b      	str	r3, [r7, #32]
   return(result);
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800646c:	633a      	str	r2, [r7, #48]	@ 0x30
 800646e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e3      	bne.n	8006448 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 0310 	bic.w	r3, r3, #16
 80064a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	617b      	str	r3, [r7, #20]
   return(result);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e4      	bne.n	8006494 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fa fb08 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064dc:	e03f      	b.n	800655e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <HAL_UART_IRQHandler+0x5a8>
 80064ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 ff1f 	bl	8007344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006506:	e02d      	b.n	8006564 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00e      	beq.n	8006532 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01c      	beq.n	8006562 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
    }
    return;
 8006530:	e017      	b.n	8006562 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d012      	beq.n	8006564 <HAL_UART_IRQHandler+0x604>
 800653e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00c      	beq.n	8006564 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fed0 	bl	80072f0 <UART_EndTransmit_IT>
    return;
 8006550:	e008      	b.n	8006564 <HAL_UART_IRQHandler+0x604>
      return;
 8006552:	bf00      	nop
 8006554:	e006      	b.n	8006564 <HAL_UART_IRQHandler+0x604>
    return;
 8006556:	bf00      	nop
 8006558:	e004      	b.n	8006564 <HAL_UART_IRQHandler+0x604>
      return;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <HAL_UART_IRQHandler+0x604>
      return;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_UART_IRQHandler+0x604>
    return;
 8006562:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006564:	37e8      	adds	r7, #232	@ 0xe8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065ac:	b08a      	sub	sp, #40	@ 0x28
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4ba4      	ldr	r3, [pc, #656]	@ (8006868 <UART_SetConfig+0x2c0>)
 80065d8:	4013      	ands	r3, r2
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a99      	ldr	r2, [pc, #612]	@ (800686c <UART_SetConfig+0x2c4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006610:	4313      	orrs	r3, r2
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006624:	430a      	orrs	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a90      	ldr	r2, [pc, #576]	@ (8006870 <UART_SetConfig+0x2c8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d126      	bne.n	8006680 <UART_SetConfig+0xd8>
 8006632:	4b90      	ldr	r3, [pc, #576]	@ (8006874 <UART_SetConfig+0x2cc>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	2b03      	cmp	r3, #3
 800663e:	d81b      	bhi.n	8006678 <UART_SetConfig+0xd0>
 8006640:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <UART_SetConfig+0xa0>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	08006659 	.word	0x08006659
 800664c:	08006669 	.word	0x08006669
 8006650:	08006661 	.word	0x08006661
 8006654:	08006671 	.word	0x08006671
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e116      	b.n	800688e <UART_SetConfig+0x2e6>
 8006660:	2302      	movs	r3, #2
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006666:	e112      	b.n	800688e <UART_SetConfig+0x2e6>
 8006668:	2304      	movs	r3, #4
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666e:	e10e      	b.n	800688e <UART_SetConfig+0x2e6>
 8006670:	2308      	movs	r3, #8
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006676:	e10a      	b.n	800688e <UART_SetConfig+0x2e6>
 8006678:	2310      	movs	r3, #16
 800667a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667e:	e106      	b.n	800688e <UART_SetConfig+0x2e6>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a7c      	ldr	r2, [pc, #496]	@ (8006878 <UART_SetConfig+0x2d0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d138      	bne.n	80066fc <UART_SetConfig+0x154>
 800668a:	4b7a      	ldr	r3, [pc, #488]	@ (8006874 <UART_SetConfig+0x2cc>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006690:	f003 030c 	and.w	r3, r3, #12
 8006694:	2b0c      	cmp	r3, #12
 8006696:	d82d      	bhi.n	80066f4 <UART_SetConfig+0x14c>
 8006698:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <UART_SetConfig+0xf8>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066d5 	.word	0x080066d5
 80066a4:	080066f5 	.word	0x080066f5
 80066a8:	080066f5 	.word	0x080066f5
 80066ac:	080066f5 	.word	0x080066f5
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066f5 	.word	0x080066f5
 80066bc:	080066f5 	.word	0x080066f5
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066f5 	.word	0x080066f5
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066ed 	.word	0x080066ed
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066da:	e0d8      	b.n	800688e <UART_SetConfig+0x2e6>
 80066dc:	2302      	movs	r3, #2
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e0d4      	b.n	800688e <UART_SetConfig+0x2e6>
 80066e4:	2304      	movs	r3, #4
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ea:	e0d0      	b.n	800688e <UART_SetConfig+0x2e6>
 80066ec:	2308      	movs	r3, #8
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f2:	e0cc      	b.n	800688e <UART_SetConfig+0x2e6>
 80066f4:	2310      	movs	r3, #16
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fa:	e0c8      	b.n	800688e <UART_SetConfig+0x2e6>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a5e      	ldr	r2, [pc, #376]	@ (800687c <UART_SetConfig+0x2d4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d125      	bne.n	8006752 <UART_SetConfig+0x1aa>
 8006706:	4b5b      	ldr	r3, [pc, #364]	@ (8006874 <UART_SetConfig+0x2cc>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006710:	2b30      	cmp	r3, #48	@ 0x30
 8006712:	d016      	beq.n	8006742 <UART_SetConfig+0x19a>
 8006714:	2b30      	cmp	r3, #48	@ 0x30
 8006716:	d818      	bhi.n	800674a <UART_SetConfig+0x1a2>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d00a      	beq.n	8006732 <UART_SetConfig+0x18a>
 800671c:	2b20      	cmp	r3, #32
 800671e:	d814      	bhi.n	800674a <UART_SetConfig+0x1a2>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <UART_SetConfig+0x182>
 8006724:	2b10      	cmp	r3, #16
 8006726:	d008      	beq.n	800673a <UART_SetConfig+0x192>
 8006728:	e00f      	b.n	800674a <UART_SetConfig+0x1a2>
 800672a:	2300      	movs	r3, #0
 800672c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006730:	e0ad      	b.n	800688e <UART_SetConfig+0x2e6>
 8006732:	2302      	movs	r3, #2
 8006734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006738:	e0a9      	b.n	800688e <UART_SetConfig+0x2e6>
 800673a:	2304      	movs	r3, #4
 800673c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006740:	e0a5      	b.n	800688e <UART_SetConfig+0x2e6>
 8006742:	2308      	movs	r3, #8
 8006744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006748:	e0a1      	b.n	800688e <UART_SetConfig+0x2e6>
 800674a:	2310      	movs	r3, #16
 800674c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006750:	e09d      	b.n	800688e <UART_SetConfig+0x2e6>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a4a      	ldr	r2, [pc, #296]	@ (8006880 <UART_SetConfig+0x2d8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d125      	bne.n	80067a8 <UART_SetConfig+0x200>
 800675c:	4b45      	ldr	r3, [pc, #276]	@ (8006874 <UART_SetConfig+0x2cc>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006762:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006766:	2bc0      	cmp	r3, #192	@ 0xc0
 8006768:	d016      	beq.n	8006798 <UART_SetConfig+0x1f0>
 800676a:	2bc0      	cmp	r3, #192	@ 0xc0
 800676c:	d818      	bhi.n	80067a0 <UART_SetConfig+0x1f8>
 800676e:	2b80      	cmp	r3, #128	@ 0x80
 8006770:	d00a      	beq.n	8006788 <UART_SetConfig+0x1e0>
 8006772:	2b80      	cmp	r3, #128	@ 0x80
 8006774:	d814      	bhi.n	80067a0 <UART_SetConfig+0x1f8>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <UART_SetConfig+0x1d8>
 800677a:	2b40      	cmp	r3, #64	@ 0x40
 800677c:	d008      	beq.n	8006790 <UART_SetConfig+0x1e8>
 800677e:	e00f      	b.n	80067a0 <UART_SetConfig+0x1f8>
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006786:	e082      	b.n	800688e <UART_SetConfig+0x2e6>
 8006788:	2302      	movs	r3, #2
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e07e      	b.n	800688e <UART_SetConfig+0x2e6>
 8006790:	2304      	movs	r3, #4
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006796:	e07a      	b.n	800688e <UART_SetConfig+0x2e6>
 8006798:	2308      	movs	r3, #8
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679e:	e076      	b.n	800688e <UART_SetConfig+0x2e6>
 80067a0:	2310      	movs	r3, #16
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067a6:	e072      	b.n	800688e <UART_SetConfig+0x2e6>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a35      	ldr	r2, [pc, #212]	@ (8006884 <UART_SetConfig+0x2dc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d12a      	bne.n	8006808 <UART_SetConfig+0x260>
 80067b2:	4b30      	ldr	r3, [pc, #192]	@ (8006874 <UART_SetConfig+0x2cc>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067c0:	d01a      	beq.n	80067f8 <UART_SetConfig+0x250>
 80067c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067c6:	d81b      	bhi.n	8006800 <UART_SetConfig+0x258>
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067cc:	d00c      	beq.n	80067e8 <UART_SetConfig+0x240>
 80067ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d2:	d815      	bhi.n	8006800 <UART_SetConfig+0x258>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <UART_SetConfig+0x238>
 80067d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067dc:	d008      	beq.n	80067f0 <UART_SetConfig+0x248>
 80067de:	e00f      	b.n	8006800 <UART_SetConfig+0x258>
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e052      	b.n	800688e <UART_SetConfig+0x2e6>
 80067e8:	2302      	movs	r3, #2
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e04e      	b.n	800688e <UART_SetConfig+0x2e6>
 80067f0:	2304      	movs	r3, #4
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f6:	e04a      	b.n	800688e <UART_SetConfig+0x2e6>
 80067f8:	2308      	movs	r3, #8
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067fe:	e046      	b.n	800688e <UART_SetConfig+0x2e6>
 8006800:	2310      	movs	r3, #16
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006806:	e042      	b.n	800688e <UART_SetConfig+0x2e6>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a17      	ldr	r2, [pc, #92]	@ (800686c <UART_SetConfig+0x2c4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d13a      	bne.n	8006888 <UART_SetConfig+0x2e0>
 8006812:	4b18      	ldr	r3, [pc, #96]	@ (8006874 <UART_SetConfig+0x2cc>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800681c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006820:	d01a      	beq.n	8006858 <UART_SetConfig+0x2b0>
 8006822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006826:	d81b      	bhi.n	8006860 <UART_SetConfig+0x2b8>
 8006828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800682c:	d00c      	beq.n	8006848 <UART_SetConfig+0x2a0>
 800682e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006832:	d815      	bhi.n	8006860 <UART_SetConfig+0x2b8>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <UART_SetConfig+0x298>
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683c:	d008      	beq.n	8006850 <UART_SetConfig+0x2a8>
 800683e:	e00f      	b.n	8006860 <UART_SetConfig+0x2b8>
 8006840:	2300      	movs	r3, #0
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006846:	e022      	b.n	800688e <UART_SetConfig+0x2e6>
 8006848:	2302      	movs	r3, #2
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684e:	e01e      	b.n	800688e <UART_SetConfig+0x2e6>
 8006850:	2304      	movs	r3, #4
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006856:	e01a      	b.n	800688e <UART_SetConfig+0x2e6>
 8006858:	2308      	movs	r3, #8
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685e:	e016      	b.n	800688e <UART_SetConfig+0x2e6>
 8006860:	2310      	movs	r3, #16
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006866:	e012      	b.n	800688e <UART_SetConfig+0x2e6>
 8006868:	efff69f3 	.word	0xefff69f3
 800686c:	40008000 	.word	0x40008000
 8006870:	40013800 	.word	0x40013800
 8006874:	40021000 	.word	0x40021000
 8006878:	40004400 	.word	0x40004400
 800687c:	40004800 	.word	0x40004800
 8006880:	40004c00 	.word	0x40004c00
 8006884:	40005000 	.word	0x40005000
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a9f      	ldr	r2, [pc, #636]	@ (8006b10 <UART_SetConfig+0x568>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d17a      	bne.n	800698e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800689c:	2b08      	cmp	r3, #8
 800689e:	d824      	bhi.n	80068ea <UART_SetConfig+0x342>
 80068a0:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <UART_SetConfig+0x300>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068eb 	.word	0x080068eb
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068eb 	.word	0x080068eb
 80068b8:	080068db 	.word	0x080068db
 80068bc:	080068eb 	.word	0x080068eb
 80068c0:	080068eb 	.word	0x080068eb
 80068c4:	080068eb 	.word	0x080068eb
 80068c8:	080068e3 	.word	0x080068e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068cc:	f7fd fda4 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80068d0:	61f8      	str	r0, [r7, #28]
        break;
 80068d2:	e010      	b.n	80068f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b8f      	ldr	r3, [pc, #572]	@ (8006b14 <UART_SetConfig+0x56c>)
 80068d6:	61fb      	str	r3, [r7, #28]
        break;
 80068d8:	e00d      	b.n	80068f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068da:	f7fd fd05 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80068de:	61f8      	str	r0, [r7, #28]
        break;
 80068e0:	e009      	b.n	80068f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e6:	61fb      	str	r3, [r7, #28]
        break;
 80068e8:	e005      	b.n	80068f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 80fb 	beq.w	8006af4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4413      	add	r3, r2
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	429a      	cmp	r2, r3
 800690c:	d305      	bcc.n	800691a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006920:	e0e8      	b.n	8006af4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2200      	movs	r2, #0
 8006926:	461c      	mov	r4, r3
 8006928:	4615      	mov	r5, r2
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	022b      	lsls	r3, r5, #8
 8006934:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006938:	0222      	lsls	r2, r4, #8
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	6849      	ldr	r1, [r1, #4]
 800693e:	0849      	lsrs	r1, r1, #1
 8006940:	2000      	movs	r0, #0
 8006942:	4688      	mov	r8, r1
 8006944:	4681      	mov	r9, r0
 8006946:	eb12 0a08 	adds.w	sl, r2, r8
 800694a:	eb43 0b09 	adc.w	fp, r3, r9
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	603b      	str	r3, [r7, #0]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	4650      	mov	r0, sl
 800695e:	4659      	mov	r1, fp
 8006960:	f7f9 fe7a 	bl	8000658 <__aeabi_uldivmod>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4613      	mov	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006972:	d308      	bcc.n	8006986 <UART_SetConfig+0x3de>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800697a:	d204      	bcs.n	8006986 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	60da      	str	r2, [r3, #12]
 8006984:	e0b6      	b.n	8006af4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800698c:	e0b2      	b.n	8006af4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006996:	d15e      	bne.n	8006a56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006998:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800699c:	2b08      	cmp	r3, #8
 800699e:	d828      	bhi.n	80069f2 <UART_SetConfig+0x44a>
 80069a0:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <UART_SetConfig+0x400>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	080069f3 	.word	0x080069f3
 80069b8:	080069e3 	.word	0x080069e3
 80069bc:	080069f3 	.word	0x080069f3
 80069c0:	080069f3 	.word	0x080069f3
 80069c4:	080069f3 	.word	0x080069f3
 80069c8:	080069eb 	.word	0x080069eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069cc:	f7fd fd24 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80069d0:	61f8      	str	r0, [r7, #28]
        break;
 80069d2:	e014      	b.n	80069fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d4:	f7fd fd36 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80069d8:	61f8      	str	r0, [r7, #28]
        break;
 80069da:	e010      	b.n	80069fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006b14 <UART_SetConfig+0x56c>)
 80069de:	61fb      	str	r3, [r7, #28]
        break;
 80069e0:	e00d      	b.n	80069fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e2:	f7fd fc81 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80069e6:	61f8      	str	r0, [r7, #28]
        break;
 80069e8:	e009      	b.n	80069fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ee:	61fb      	str	r3, [r7, #28]
        break;
 80069f0:	e005      	b.n	80069fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d077      	beq.n	8006af4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	005a      	lsls	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	441a      	add	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b0f      	cmp	r3, #15
 8006a1e:	d916      	bls.n	8006a4e <UART_SetConfig+0x4a6>
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a26:	d212      	bcs.n	8006a4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f023 030f 	bic.w	r3, r3, #15
 8006a30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	8afb      	ldrh	r3, [r7, #22]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	8afa      	ldrh	r2, [r7, #22]
 8006a4a:	60da      	str	r2, [r3, #12]
 8006a4c:	e052      	b.n	8006af4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a54:	e04e      	b.n	8006af4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d827      	bhi.n	8006aae <UART_SetConfig+0x506>
 8006a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a64 <UART_SetConfig+0x4bc>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a91 	.word	0x08006a91
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	08006aaf 	.word	0x08006aaf
 8006a74:	08006a9f 	.word	0x08006a9f
 8006a78:	08006aaf 	.word	0x08006aaf
 8006a7c:	08006aaf 	.word	0x08006aaf
 8006a80:	08006aaf 	.word	0x08006aaf
 8006a84:	08006aa7 	.word	0x08006aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a88:	f7fd fcc6 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8006a8c:	61f8      	str	r0, [r7, #28]
        break;
 8006a8e:	e014      	b.n	8006aba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a90:	f7fd fcd8 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8006a94:	61f8      	str	r0, [r7, #28]
        break;
 8006a96:	e010      	b.n	8006aba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a98:	4b1e      	ldr	r3, [pc, #120]	@ (8006b14 <UART_SetConfig+0x56c>)
 8006a9a:	61fb      	str	r3, [r7, #28]
        break;
 8006a9c:	e00d      	b.n	8006aba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9e:	f7fd fc23 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8006aa2:	61f8      	str	r0, [r7, #28]
        break;
 8006aa4:	e009      	b.n	8006aba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aaa:	61fb      	str	r3, [r7, #28]
        break;
 8006aac:	e005      	b.n	8006aba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ab8:	bf00      	nop
    }

    if (pclk != 0U)
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d019      	beq.n	8006af4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	085a      	lsrs	r2, r3, #1
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	441a      	add	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d909      	bls.n	8006aee <UART_SetConfig+0x546>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae0:	d205      	bcs.n	8006aee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e002      	b.n	8006af4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3728      	adds	r7, #40	@ 0x28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0e:	bf00      	nop
 8006b10:	40008000 	.word	0x40008000
 8006b14:	00f42400 	.word	0x00f42400

08006b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c16:	d10a      	bne.n	8006c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b098      	sub	sp, #96	@ 0x60
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c6c:	f7fb ffa6 	bl	8002bbc <HAL_GetTick>
 8006c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d12e      	bne.n	8006cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f88c 	bl	8006dac <UART_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d021      	beq.n	8006cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e6      	bne.n	8006c9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e062      	b.n	8006da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d149      	bne.n	8006d80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f856 	bl	8006dac <UART_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03c      	beq.n	8006d80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	623b      	str	r3, [r7, #32]
   return(result);
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e6      	bne.n	8006d06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d58:	61fa      	str	r2, [r7, #28]
 8006d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	617b      	str	r3, [r7, #20]
   return(result);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e5      	bne.n	8006d38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e011      	b.n	8006da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3758      	adds	r7, #88	@ 0x58
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbc:	e04f      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d04b      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc6:	f7fb fef9 	bl	8002bbc <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d302      	bcc.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e04e      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0304 	and.w	r3, r3, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d037      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b80      	cmp	r3, #128	@ 0x80
 8006df2:	d034      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b40      	cmp	r3, #64	@ 0x40
 8006df8:	d031      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d110      	bne.n	8006e2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f8ff 	bl	8007014 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e029      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e38:	d111      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f8e5 	bl	8007014 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e00f      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d0a0      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b096      	sub	sp, #88	@ 0x58
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	88fa      	ldrh	r2, [r7, #6]
 8006ea0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2222      	movs	r2, #34	@ 0x22
 8006eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d028      	beq.n	8006f0e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8006fbc <UART_Start_Receive_DMA+0x134>)
 8006ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8006fc0 <UART_Start_Receive_DMA+0x138>)
 8006eca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8006fc4 <UART_Start_Receive_DMA+0x13c>)
 8006ed2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed8:	2200      	movs	r2, #0
 8006eda:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3324      	adds	r3, #36	@ 0x24
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eec:	461a      	mov	r2, r3
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	f7fc f82e 	bl	8002f50 <HAL_DMA_Start_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2210      	movs	r2, #16
 8006efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e051      	b.n	8006fb2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f36:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e6      	bne.n	8006f16 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f68:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e5      	bne.n	8006f48 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f9c:	623a      	str	r2, [r7, #32]
 8006f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	69f9      	ldr	r1, [r7, #28]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3758      	adds	r7, #88	@ 0x58
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	080070dd 	.word	0x080070dd
 8006fc0:	08007209 	.word	0x08007209
 8006fc4:	08007247 	.word	0x08007247

08006fc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b089      	sub	sp, #36	@ 0x24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006fe4:	61fb      	str	r3, [r7, #28]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e6      	bne.n	8006fd0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007008:	bf00      	nop
 800700a:	3724      	adds	r7, #36	@ 0x24
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b095      	sub	sp, #84	@ 0x54
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800703a:	643b      	str	r3, [r7, #64]	@ 0x40
 800703c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007040:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	61fb      	str	r3, [r7, #28]
   return(result);
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800706e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007086:	2b01      	cmp	r3, #1
 8007088:	d118      	bne.n	80070bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	60bb      	str	r3, [r7, #8]
   return(result);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f023 0310 	bic.w	r3, r3, #16
 800709e:	647b      	str	r3, [r7, #68]	@ 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6979      	ldr	r1, [r7, #20]
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	613b      	str	r3, [r7, #16]
   return(result);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e6      	bne.n	800708a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070d0:	bf00      	nop
 80070d2:	3754      	adds	r7, #84	@ 0x54
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b09c      	sub	sp, #112	@ 0x70
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d171      	bne.n	80071dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80070f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800710e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800711e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007120:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800712c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	667b      	str	r3, [r7, #100]	@ 0x64
 800714a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007152:	647a      	str	r2, [r7, #68]	@ 0x44
 8007154:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	623b      	str	r3, [r7, #32]
   return(result);
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800717c:	663b      	str	r3, [r7, #96]	@ 0x60
 800717e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007186:	633a      	str	r2, [r7, #48]	@ 0x30
 8007188:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800718c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800719a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d118      	bne.n	80071dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	69b9      	ldr	r1, [r7, #24]
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	617b      	str	r3, [r7, #20]
   return(result);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071de:	2200      	movs	r2, #0
 80071e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d107      	bne.n	80071fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071f0:	4619      	mov	r1, r3
 80071f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071f4:	f7f9 fc7a 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071f8:	e002      	b.n	8007200 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80071fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071fc:	f7ff f9b6 	bl	800656c <HAL_UART_RxCpltCallback>
}
 8007200:	bf00      	nop
 8007202:	3770      	adds	r7, #112	@ 0x70
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007214:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007220:	2b01      	cmp	r3, #1
 8007222:	d109      	bne.n	8007238 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	4619      	mov	r1, r3
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7f9 fc5b 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007236:	e002      	b.n	800723e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff f9a1 	bl	8006580 <HAL_UART_RxHalfCpltCallback>
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007252:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007258:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007260:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726c:	2b80      	cmp	r3, #128	@ 0x80
 800726e:	d109      	bne.n	8007284 <UART_DMAError+0x3e>
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b21      	cmp	r3, #33	@ 0x21
 8007274:	d106      	bne.n	8007284 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2200      	movs	r2, #0
 800727a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800727e:	6978      	ldr	r0, [r7, #20]
 8007280:	f7ff fea2 	bl	8006fc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728e:	2b40      	cmp	r3, #64	@ 0x40
 8007290:	d109      	bne.n	80072a6 <UART_DMAError+0x60>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b22      	cmp	r3, #34	@ 0x22
 8007296:	d106      	bne.n	80072a6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f7ff feb7 	bl	8007014 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ac:	f043 0210 	orr.w	r2, r3, #16
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	f7ff f96c 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072bc:	bf00      	nop
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff f956 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	60bb      	str	r3, [r7, #8]
   return(result);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	613b      	str	r3, [r7, #16]
   return(result);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e6      	bne.n	80072f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7f9 fc10 	bl	8000b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800733c:	bf00      	nop
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	@ 0x30
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800736c:	2b20      	cmp	r3, #32
 800736e:	d142      	bne.n	80073f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e03b      	b.n	80073f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	461a      	mov	r2, r3
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7ff fd78 	bl	8006e88 <UART_Start_Receive_DMA>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800739e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d124      	bne.n	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d11d      	bne.n	80073ea <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2210      	movs	r2, #16
 80073b4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	617b      	str	r3, [r7, #20]
   return(result);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f043 0310 	orr.w	r3, r3, #16
 80073ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6a39      	ldr	r1, [r7, #32]
 80073da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80073e8:	e002      	b.n	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80073f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073f4:	e000      	b.n	80073f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
  }
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3730      	adds	r7, #48	@ 0x30
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <__NVIC_SetPriority>:
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800740c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007410:	2b00      	cmp	r3, #0
 8007412:	db0a      	blt.n	800742a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	490c      	ldr	r1, [pc, #48]	@ (800744c <__NVIC_SetPriority+0x4c>)
 800741a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741e:	0112      	lsls	r2, r2, #4
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	440b      	add	r3, r1
 8007424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007428:	e00a      	b.n	8007440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	b2da      	uxtb	r2, r3
 800742e:	4908      	ldr	r1, [pc, #32]	@ (8007450 <__NVIC_SetPriority+0x50>)
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	3b04      	subs	r3, #4
 8007438:	0112      	lsls	r2, r2, #4
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	440b      	add	r3, r1
 800743e:	761a      	strb	r2, [r3, #24]
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	e000e100 	.word	0xe000e100
 8007450:	e000ed00 	.word	0xe000ed00

08007454 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007458:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <SysTick_Handler+0x1c>)
 800745a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800745c:	f001 fde6 	bl	800902c <xTaskGetSchedulerState>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d001      	beq.n	800746a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007466:	f002 fdcf 	bl	800a008 <xPortSysTickHandler>
  }
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	e000e010 	.word	0xe000e010

08007474 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007478:	2100      	movs	r1, #0
 800747a:	f06f 0004 	mvn.w	r0, #4
 800747e:	f7ff ffbf 	bl	8007400 <__NVIC_SetPriority>
#endif
}
 8007482:	bf00      	nop
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748e:	f3ef 8305 	mrs	r3, IPSR
 8007492:	603b      	str	r3, [r7, #0]
  return(result);
 8007494:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800749a:	f06f 0305 	mvn.w	r3, #5
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	e00c      	b.n	80074bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074a2:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <osKernelInitialize+0x44>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074aa:	4b08      	ldr	r3, [pc, #32]	@ (80074cc <osKernelInitialize+0x44>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	e002      	b.n	80074bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074b6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074bc:	687b      	ldr	r3, [r7, #4]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20000428 	.word	0x20000428

080074d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d6:	f3ef 8305 	mrs	r3, IPSR
 80074da:	603b      	str	r3, [r7, #0]
  return(result);
 80074dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80074e2:	f06f 0305 	mvn.w	r3, #5
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	e010      	b.n	800750c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <osKernelStart+0x48>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d109      	bne.n	8007506 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074f2:	f7ff ffbf 	bl	8007474 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074f6:	4b08      	ldr	r3, [pc, #32]	@ (8007518 <osKernelStart+0x48>)
 80074f8:	2202      	movs	r2, #2
 80074fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074fc:	f001 f948 	bl	8008790 <vTaskStartScheduler>
      stat = osOK;
 8007500:	2300      	movs	r3, #0
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	e002      	b.n	800750c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007506:	f04f 33ff 	mov.w	r3, #4294967295
 800750a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800750c:	687b      	ldr	r3, [r7, #4]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000428 	.word	0x20000428

0800751c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800751c:	b580      	push	{r7, lr}
 800751e:	b08e      	sub	sp, #56	@ 0x38
 8007520:	af04      	add	r7, sp, #16
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752c:	f3ef 8305 	mrs	r3, IPSR
 8007530:	617b      	str	r3, [r7, #20]
  return(result);
 8007532:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007534:	2b00      	cmp	r3, #0
 8007536:	d17e      	bne.n	8007636 <osThreadNew+0x11a>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d07b      	beq.n	8007636 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800753e:	2380      	movs	r3, #128	@ 0x80
 8007540:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007542:	2318      	movs	r3, #24
 8007544:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d045      	beq.n	80075e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osThreadNew+0x48>
        name = attr->name;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <osThreadNew+0x6e>
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b38      	cmp	r3, #56	@ 0x38
 800757c:	d805      	bhi.n	800758a <osThreadNew+0x6e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <osThreadNew+0x72>
        return (NULL);
 800758a:	2300      	movs	r3, #0
 800758c:	e054      	b.n	8007638 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <osThreadNew+0xa8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80075ac:	d90a      	bls.n	80075c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d006      	beq.n	80075c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <osThreadNew+0xa8>
        mem = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	e010      	b.n	80075e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10c      	bne.n	80075e6 <osThreadNew+0xca>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d108      	bne.n	80075e6 <osThreadNew+0xca>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <osThreadNew+0xca>
          mem = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	e001      	b.n	80075e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d110      	bne.n	800760e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075f4:	9202      	str	r2, [sp, #8]
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	6a3a      	ldr	r2, [r7, #32]
 8007600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fee8 	bl	80083d8 <xTaskCreateStatic>
 8007608:	4603      	mov	r3, r0
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	e013      	b.n	8007636 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d110      	bne.n	8007636 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	b29a      	uxth	r2, r3
 8007618:	f107 0310 	add.w	r3, r7, #16
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 ff36 	bl	8008498 <xTaskCreate>
 800762c:	4603      	mov	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	d001      	beq.n	8007636 <osThreadNew+0x11a>
            hTask = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007636:	693b      	ldr	r3, [r7, #16]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3728      	adds	r7, #40	@ 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <osThreadFlagsSet+0x1a>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	da03      	bge.n	8007662 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800765a:	f06f 0303 	mvn.w	r3, #3
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e035      	b.n	80076ce <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007668:	f3ef 8305 	mrs	r3, IPSR
 800766c:	613b      	str	r3, [r7, #16]
  return(result);
 800766e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01f      	beq.n	80076b4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007674:	2300      	movs	r3, #0
 8007676:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007678:	f107 0308 	add.w	r3, r7, #8
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	2201      	movs	r2, #1
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	f001 fe73 	bl	8009370 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800768a:	f107 030c 	add.w	r3, r7, #12
 800768e:	2200      	movs	r2, #0
 8007690:	9200      	str	r2, [sp, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	6978      	ldr	r0, [r7, #20]
 8007698:	f001 fe6a 	bl	8009370 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d015      	beq.n	80076ce <osThreadFlagsSet+0x8e>
 80076a2:	4b0d      	ldr	r3, [pc, #52]	@ (80076d8 <osThreadFlagsSet+0x98>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	e00c      	b.n	80076ce <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80076b4:	2300      	movs	r3, #0
 80076b6:	2201      	movs	r2, #1
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6978      	ldr	r0, [r7, #20]
 80076bc:	f001 fd9e 	bl	80091fc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80076c0:	f107 030c 	add.w	r3, r7, #12
 80076c4:	2200      	movs	r2, #0
 80076c6:	2100      	movs	r1, #0
 80076c8:	6978      	ldr	r0, [r7, #20]
 80076ca:	f001 fd97 	bl	80091fc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08c      	sub	sp, #48	@ 0x30
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e8:	f3ef 8305 	mrs	r3, IPSR
 80076ec:	617b      	str	r3, [r7, #20]
  return(result);
 80076ee:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80076f4:	f06f 0305 	mvn.w	r3, #5
 80076f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076fa:	e06b      	b.n	80077d4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da03      	bge.n	800770a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8007702:	f06f 0303 	mvn.w	r3, #3
 8007706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007708:	e064      	b.n	80077d4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007718:	e001      	b.n	800771e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8007726:	f001 f947 	bl	80089b8 <xTaskGetTickCount>
 800772a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800772c:	f107 0210 	add.w	r2, r7, #16
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007734:	2000      	movs	r0, #0
 8007736:	f001 fd07 	bl	8009148 <xTaskNotifyWait>
 800773a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d137      	bne.n	80077b2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8007742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4013      	ands	r3, r2
 8007748:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800774e:	4313      	orrs	r3, r2
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	4013      	ands	r3, r2
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	429a      	cmp	r2, r3
 8007766:	d032      	beq.n	80077ce <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10f      	bne.n	800778e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800776e:	f06f 0302 	mvn.w	r3, #2
 8007772:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8007774:	e02e      	b.n	80077d4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d128      	bne.n	80077d2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007786:	f06f 0302 	mvn.w	r3, #2
 800778a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800778c:	e022      	b.n	80077d4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800778e:	f001 f913 	bl	80089b8 <xTaskGetTickCount>
 8007792:	4602      	mov	r2, r0
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	429a      	cmp	r2, r3
 80077a0:	d902      	bls.n	80077a8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a6:	e00e      	b.n	80077c6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80077a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b0:	e009      	b.n	80077c6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80077b8:	f06f 0302 	mvn.w	r3, #2
 80077bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077be:	e002      	b.n	80077c6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80077c0:	f06f 0301 	mvn.w	r3, #1
 80077c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1af      	bne.n	800772c <osThreadFlagsWait+0x50>
 80077cc:	e002      	b.n	80077d4 <osThreadFlagsWait+0xf8>
            break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <osThreadFlagsWait+0xf8>
            break;
 80077d2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3730      	adds	r7, #48	@ 0x30
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e6:	f3ef 8305 	mrs	r3, IPSR
 80077ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <osDelay+0x1c>
    stat = osErrorISR;
 80077f2:	f06f 0305 	mvn.w	r3, #5
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e007      	b.n	800780a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 ff8d 	bl	8008724 <vTaskDelay>
    }
  }

  return (stat);
 800780a:	68fb      	ldr	r3, [r7, #12]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a07      	ldr	r2, [pc, #28]	@ (8007840 <vApplicationGetIdleTaskMemory+0x2c>)
 8007824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4a06      	ldr	r2, [pc, #24]	@ (8007844 <vApplicationGetIdleTaskMemory+0x30>)
 800782a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2280      	movs	r2, #128	@ 0x80
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2000042c 	.word	0x2000042c
 8007844:	20000488 	.word	0x20000488

08007848 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4a07      	ldr	r2, [pc, #28]	@ (8007874 <vApplicationGetTimerTaskMemory+0x2c>)
 8007858:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4a06      	ldr	r2, [pc, #24]	@ (8007878 <vApplicationGetTimerTaskMemory+0x30>)
 800785e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007866:	601a      	str	r2, [r3, #0]
}
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	20000688 	.word	0x20000688
 8007878:	200006e4 	.word	0x200006e4

0800787c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f103 0208 	add.w	r2, r3, #8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f103 0208 	add.w	r2, r3, #8
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f103 0208 	add.w	r2, r3, #8
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d103      	bne.n	800793e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e00c      	b.n	8007958 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3308      	adds	r3, #8
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	e002      	b.n	800794c <vListInsert+0x2e>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	d2f6      	bcs.n	8007946 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6892      	ldr	r2, [r2, #8]
 80079a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6852      	ldr	r2, [r2, #4]
 80079b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d103      	bne.n	80079c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	1e5a      	subs	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10b      	bne.n	8007a10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a10:	f002 fa6a 	bl	8009ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1c:	68f9      	ldr	r1, [r7, #12]
 8007a1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a20:	fb01 f303 	mul.w	r3, r1, r3
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a40:	3b01      	subs	r3, #1
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a46:	fb01 f303 	mul.w	r3, r1, r3
 8007a4a:	441a      	add	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	22ff      	movs	r2, #255	@ 0xff
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	22ff      	movs	r2, #255	@ 0xff
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d114      	bne.n	8007a90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01a      	beq.n	8007aa4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3310      	adds	r3, #16
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f91a 	bl	8008cac <xTaskRemoveFromEventList>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d012      	beq.n	8007aa4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <xQueueGenericReset+0xd0>)
 8007a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	e009      	b.n	8007aa4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3310      	adds	r3, #16
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff fef1 	bl	800787c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3324      	adds	r3, #36	@ 0x24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff feec 	bl	800787c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aa4:	f002 fa52 	bl	8009f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007aa8:	2301      	movs	r3, #1
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08e      	sub	sp, #56	@ 0x38
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10b      	bne.n	8007b02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	e7fd      	b.n	8007afe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <xQueueGenericCreateStatic+0x56>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <xQueueGenericCreateStatic+0x5a>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueGenericCreateStatic+0x5c>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10b      	bne.n	8007b30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	623b      	str	r3, [r7, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	e7fd      	b.n	8007b2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <xQueueGenericCreateStatic+0x84>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <xQueueGenericCreateStatic+0x88>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <xQueueGenericCreateStatic+0x8a>
 8007b40:	2300      	movs	r3, #0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	61fb      	str	r3, [r7, #28]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b5e:	2350      	movs	r3, #80	@ 0x50
 8007b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b50      	cmp	r3, #80	@ 0x50
 8007b66:	d00b      	beq.n	8007b80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61bb      	str	r3, [r7, #24]
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	e7fd      	b.n	8007b7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00d      	beq.n	8007ba8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f805 	bl	8007bb2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3730      	adds	r7, #48	@ 0x30
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	607a      	str	r2, [r7, #4]
 8007bbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e002      	b.n	8007bd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007be0:	2101      	movs	r1, #1
 8007be2:	69b8      	ldr	r0, [r7, #24]
 8007be4:	f7ff fefe 	bl	80079e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08e      	sub	sp, #56	@ 0x38
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c06:	2300      	movs	r3, #0
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <xQueueGenericSend+0x34>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c26:	bf00      	nop
 8007c28:	bf00      	nop
 8007c2a:	e7fd      	b.n	8007c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <xQueueGenericSend+0x42>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <xQueueGenericSend+0x46>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <xQueueGenericSend+0x48>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10b      	bne.n	8007c5c <xQueueGenericSend+0x64>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d103      	bne.n	8007c6a <xQueueGenericSend+0x72>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <xQueueGenericSend+0x76>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <xQueueGenericSend+0x78>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <xQueueGenericSend+0x94>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	623b      	str	r3, [r7, #32]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c8c:	f001 f9ce 	bl	800902c <xTaskGetSchedulerState>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <xQueueGenericSend+0xa4>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <xQueueGenericSend+0xa8>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <xQueueGenericSend+0xaa>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <xQueueGenericSend+0xc6>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	61fb      	str	r3, [r7, #28]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cbe:	f002 f913 	bl	8009ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d302      	bcc.n	8007cd4 <xQueueGenericSend+0xdc>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d129      	bne.n	8007d28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cda:	f000 fa0f 	bl	80080fc <prvCopyDataToQueue>
 8007cde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	3324      	adds	r3, #36	@ 0x24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 ffdd 	bl	8008cac <xTaskRemoveFromEventList>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d013      	beq.n	8007d20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8007df8 <xQueueGenericSend+0x200>)
 8007cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	e00a      	b.n	8007d20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d10:	4b39      	ldr	r3, [pc, #228]	@ (8007df8 <xQueueGenericSend+0x200>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d20:	f002 f914 	bl	8009f4c <vPortExitCritical>
				return pdPASS;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e063      	b.n	8007df0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d103      	bne.n	8007d36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d2e:	f002 f90d 	bl	8009f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	e05c      	b.n	8007df0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d3c:	f107 0314 	add.w	r3, r7, #20
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 f817 	bl	8008d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d46:	2301      	movs	r3, #1
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d4a:	f002 f8ff 	bl	8009f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d4e:	f000 fd87 	bl	8008860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d52:	f002 f8c9 	bl	8009ee8 <vPortEnterCritical>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d5c:	b25b      	sxtb	r3, r3
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d103      	bne.n	8007d6c <xQueueGenericSend+0x174>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d72:	b25b      	sxtb	r3, r3
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d103      	bne.n	8007d82 <xQueueGenericSend+0x18a>
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d82:	f002 f8e3 	bl	8009f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d86:	1d3a      	adds	r2, r7, #4
 8007d88:	f107 0314 	add.w	r3, r7, #20
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 f806 	bl	8008da0 <xTaskCheckForTimeOut>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d124      	bne.n	8007de4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d9c:	f000 faa6 	bl	80082ec <prvIsQueueFull>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d018      	beq.n	8007dd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	3310      	adds	r3, #16
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 ff2a 	bl	8008c08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007db6:	f000 fa31 	bl	800821c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dba:	f000 fd5f 	bl	800887c <xTaskResumeAll>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f47f af7c 	bne.w	8007cbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <xQueueGenericSend+0x200>)
 8007dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	e772      	b.n	8007cbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dda:	f000 fa1f 	bl	800821c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dde:	f000 fd4d 	bl	800887c <xTaskResumeAll>
 8007de2:	e76c      	b.n	8007cbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007de6:	f000 fa19 	bl	800821c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dea:	f000 fd47 	bl	800887c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3738      	adds	r7, #56	@ 0x38
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b090      	sub	sp, #64	@ 0x40
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	e7fd      	b.n	8007e28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d103      	bne.n	8007e3a <xQueueGenericSendFromISR+0x3e>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <xQueueGenericSendFromISR+0x42>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueGenericSendFromISR+0x44>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d103      	bne.n	8007e6a <xQueueGenericSendFromISR+0x6e>
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <xQueueGenericSendFromISR+0x72>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <xQueueGenericSendFromISR+0x74>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	623b      	str	r3, [r7, #32]
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	e7fd      	b.n	8007e88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e8c:	f002 f90c 	bl	800a0a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e90:	f3ef 8211 	mrs	r2, BASEPRI
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	61fa      	str	r2, [r7, #28]
 8007ea6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007eaa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <xQueueGenericSendFromISR+0xc2>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d12f      	bne.n	8007f1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ed4:	f000 f912 	bl	80080fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ed8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d112      	bne.n	8007f08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d016      	beq.n	8007f18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	3324      	adds	r3, #36	@ 0x24
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fedc 	bl	8008cac <xTaskRemoveFromEventList>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e007      	b.n	8007f18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	b25a      	sxtb	r2, r3
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f1c:	e001      	b.n	8007f22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3740      	adds	r7, #64	@ 0x40
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	@ 0x30
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <xQueueReceive+0x32>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	623b      	str	r3, [r7, #32]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <xQueueReceive+0x40>
 8007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <xQueueReceive+0x44>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <xQueueReceive+0x46>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <xQueueReceive+0x62>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	61fb      	str	r3, [r7, #28]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f9a:	f001 f847 	bl	800902c <xTaskGetSchedulerState>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <xQueueReceive+0x72>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <xQueueReceive+0x76>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <xQueueReceive+0x78>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <xQueueReceive+0x94>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	61bb      	str	r3, [r7, #24]
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fcc:	f001 ff8c 	bl	8009ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01f      	beq.n	800801c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe0:	f000 f8f6 	bl	80081d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	1e5a      	subs	r2, r3, #1
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00f      	beq.n	8008014 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff6:	3310      	adds	r3, #16
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fe57 	bl	8008cac <xTaskRemoveFromEventList>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b3c      	ldr	r3, [pc, #240]	@ (80080f8 <xQueueReceive+0x1c0>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008014:	f001 ff9a 	bl	8009f4c <vPortExitCritical>
				return pdPASS;
 8008018:	2301      	movs	r3, #1
 800801a:	e069      	b.n	80080f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008022:	f001 ff93 	bl	8009f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008026:	2300      	movs	r3, #0
 8008028:	e062      	b.n	80080f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d106      	bne.n	800803e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008030:	f107 0310 	add.w	r3, r7, #16
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fe9d 	bl	8008d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800803a:	2301      	movs	r3, #1
 800803c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800803e:	f001 ff85 	bl	8009f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008042:	f000 fc0d 	bl	8008860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008046:	f001 ff4f 	bl	8009ee8 <vPortEnterCritical>
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008050:	b25b      	sxtb	r3, r3
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008056:	d103      	bne.n	8008060 <xQueueReceive+0x128>
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008066:	b25b      	sxtb	r3, r3
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806c:	d103      	bne.n	8008076 <xQueueReceive+0x13e>
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008076:	f001 ff69 	bl	8009f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800807a:	1d3a      	adds	r2, r7, #4
 800807c:	f107 0310 	add.w	r3, r7, #16
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fe8c 	bl	8008da0 <xTaskCheckForTimeOut>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d123      	bne.n	80080d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800808e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008090:	f000 f916 	bl	80082c0 <prvIsQueueEmpty>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d017      	beq.n	80080ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800809a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809c:	3324      	adds	r3, #36	@ 0x24
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fdb0 	bl	8008c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080aa:	f000 f8b7 	bl	800821c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080ae:	f000 fbe5 	bl	800887c <xTaskResumeAll>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d189      	bne.n	8007fcc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80080b8:	4b0f      	ldr	r3, [pc, #60]	@ (80080f8 <xQueueReceive+0x1c0>)
 80080ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	e780      	b.n	8007fcc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080cc:	f000 f8a6 	bl	800821c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080d0:	f000 fbd4 	bl	800887c <xTaskResumeAll>
 80080d4:	e77a      	b.n	8007fcc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080d8:	f000 f8a0 	bl	800821c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080dc:	f000 fbce 	bl	800887c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e2:	f000 f8ed 	bl	80082c0 <prvIsQueueEmpty>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f43f af6f 	beq.w	8007fcc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3730      	adds	r7, #48	@ 0x30
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008108:	2300      	movs	r3, #0
 800810a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10d      	bne.n	8008136 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d14d      	bne.n	80081be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 ff9e 	bl	8009068 <xTaskPriorityDisinherit>
 800812c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	609a      	str	r2, [r3, #8]
 8008134:	e043      	b.n	80081be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d119      	bne.n	8008170 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6858      	ldr	r0, [r3, #4]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008144:	461a      	mov	r2, r3
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	f002 fd41 	bl	800abce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	441a      	add	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	429a      	cmp	r2, r3
 8008164:	d32b      	bcc.n	80081be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	605a      	str	r2, [r3, #4]
 800816e:	e026      	b.n	80081be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68d8      	ldr	r0, [r3, #12]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008178:	461a      	mov	r2, r3
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	f002 fd27 	bl	800abce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008188:	425b      	negs	r3, r3
 800818a:	441a      	add	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d207      	bcs.n	80081ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a4:	425b      	negs	r3, r3
 80081a6:	441a      	add	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d105      	bne.n	80081be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80081c6:	697b      	ldr	r3, [r7, #20]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d018      	beq.n	8008214 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68da      	ldr	r2, [r3, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ea:	441a      	add	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d303      	bcc.n	8008204 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68d9      	ldr	r1, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820c:	461a      	mov	r2, r3
 800820e:	6838      	ldr	r0, [r7, #0]
 8008210:	f002 fcdd 	bl	800abce <memcpy>
	}
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008224:	f001 fe60 	bl	8009ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800822e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008230:	e011      	b.n	8008256 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008236:	2b00      	cmp	r3, #0
 8008238:	d012      	beq.n	8008260 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3324      	adds	r3, #36	@ 0x24
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fd34 	bl	8008cac <xTaskRemoveFromEventList>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800824a:	f000 fe0d 	bl	8008e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	3b01      	subs	r3, #1
 8008252:	b2db      	uxtb	r3, r3
 8008254:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dce9      	bgt.n	8008232 <prvUnlockQueue+0x16>
 800825e:	e000      	b.n	8008262 <prvUnlockQueue+0x46>
					break;
 8008260:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	22ff      	movs	r2, #255	@ 0xff
 8008266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800826a:	f001 fe6f 	bl	8009f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800826e:	f001 fe3b 	bl	8009ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008278:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800827a:	e011      	b.n	80082a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d012      	beq.n	80082aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3310      	adds	r3, #16
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fd0f 	bl	8008cac <xTaskRemoveFromEventList>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008294:	f000 fde8 	bl	8008e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	3b01      	subs	r3, #1
 800829c:	b2db      	uxtb	r3, r3
 800829e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dce9      	bgt.n	800827c <prvUnlockQueue+0x60>
 80082a8:	e000      	b.n	80082ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	22ff      	movs	r2, #255	@ 0xff
 80082b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80082b4:	f001 fe4a 	bl	8009f4c <vPortExitCritical>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082c8:	f001 fe0e 	bl	8009ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082d4:	2301      	movs	r3, #1
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e001      	b.n	80082de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082de:	f001 fe35 	bl	8009f4c <vPortExitCritical>

	return xReturn;
 80082e2:	68fb      	ldr	r3, [r7, #12]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082f4:	f001 fdf8 	bl	8009ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008300:	429a      	cmp	r2, r3
 8008302:	d102      	bne.n	800830a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e001      	b.n	800830e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800830e:	f001 fe1d 	bl	8009f4c <vPortExitCritical>

	return xReturn;
 8008312:	68fb      	ldr	r3, [r7, #12]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	e014      	b.n	8008356 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800832c:	4a0f      	ldr	r2, [pc, #60]	@ (800836c <vQueueAddToRegistry+0x50>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10b      	bne.n	8008350 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008338:	490c      	ldr	r1, [pc, #48]	@ (800836c <vQueueAddToRegistry+0x50>)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008342:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <vQueueAddToRegistry+0x50>)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4413      	add	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800834e:	e006      	b.n	800835e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b07      	cmp	r3, #7
 800835a:	d9e7      	bls.n	800832c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000ae4 	.word	0x20000ae4

08008370 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008380:	f001 fdb2 	bl	8009ee8 <vPortEnterCritical>
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800838a:	b25b      	sxtb	r3, r3
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008390:	d103      	bne.n	800839a <vQueueWaitForMessageRestricted+0x2a>
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083a0:	b25b      	sxtb	r3, r3
 80083a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a6:	d103      	bne.n	80083b0 <vQueueWaitForMessageRestricted+0x40>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083b0:	f001 fdcc 	bl	8009f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	3324      	adds	r3, #36	@ 0x24
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 fc45 	bl	8008c54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083ca:	6978      	ldr	r0, [r7, #20]
 80083cc:	f7ff ff26 	bl	800821c <prvUnlockQueue>
	}
 80083d0:	bf00      	nop
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08e      	sub	sp, #56	@ 0x38
 80083dc:	af04      	add	r7, sp, #16
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <xTaskCreateStatic+0x2c>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	623b      	str	r3, [r7, #32]
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	e7fd      	b.n	8008400 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <xTaskCreateStatic+0x4a>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	61fb      	str	r3, [r7, #28]
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	e7fd      	b.n	800841e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008422:	235c      	movs	r3, #92	@ 0x5c
 8008424:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b5c      	cmp	r3, #92	@ 0x5c
 800842a:	d00b      	beq.n	8008444 <xTaskCreateStatic+0x6c>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	61bb      	str	r3, [r7, #24]
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008444:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <xTaskCreateStatic+0xb2>
 800844c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01b      	beq.n	800848a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800845a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008464:	2300      	movs	r3, #0
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	f107 0314 	add.w	r3, r7, #20
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f850 	bl	8008522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008482:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008484:	f000 f8de 	bl	8008644 <prvAddNewTaskToReadyList>
 8008488:	e001      	b.n	800848e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800848e:	697b      	ldr	r3, [r7, #20]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3728      	adds	r7, #40	@ 0x28
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08c      	sub	sp, #48	@ 0x30
 800849c:	af04      	add	r7, sp, #16
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fe3d 	bl	800a12c <pvPortMalloc>
 80084b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00e      	beq.n	80084d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084ba:	205c      	movs	r0, #92	@ 0x5c
 80084bc:	f001 fe36 	bl	800a12c <pvPortMalloc>
 80084c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80084ce:	e005      	b.n	80084dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f001 fef9 	bl	800a2c8 <vPortFree>
 80084d6:	e001      	b.n	80084dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d017      	beq.n	8008512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	2300      	movs	r3, #0
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 f80e 	bl	8008522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008506:	69f8      	ldr	r0, [r7, #28]
 8008508:	f000 f89c 	bl	8008644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800850c:	2301      	movs	r3, #1
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	e002      	b.n	8008518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008518:	69bb      	ldr	r3, [r7, #24]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b088      	sub	sp, #32
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008532:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	461a      	mov	r2, r3
 800853a:	21a5      	movs	r1, #165	@ 0xa5
 800853c:	f002 fa5f 	bl	800a9fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800854a:	3b01      	subs	r3, #1
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f023 0307 	bic.w	r3, r3, #7
 8008558:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	617b      	str	r3, [r7, #20]
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	e7fd      	b.n	8008578 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01f      	beq.n	80085c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	e012      	b.n	80085ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	7819      	ldrb	r1, [r3, #0]
 8008590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	3334      	adds	r3, #52	@ 0x34
 8008598:	460a      	mov	r2, r1
 800859a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	4413      	add	r3, r2
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	3301      	adds	r3, #1
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d9e9      	bls.n	8008588 <prvInitialiseNewTask+0x66>
 80085b4:	e000      	b.n	80085b8 <prvInitialiseNewTask+0x96>
			{
				break;
 80085b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085c0:	e003      	b.n	80085ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	2b37      	cmp	r3, #55	@ 0x37
 80085ce:	d901      	bls.n	80085d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085d0:	2337      	movs	r3, #55	@ 0x37
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085de:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	2200      	movs	r2, #0
 80085e4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff f966 	bl	80078bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	3318      	adds	r3, #24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff f961 	bl	80078bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	2200      	movs	r2, #0
 8008614:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	68f9      	ldr	r1, [r7, #12]
 8008622:	69b8      	ldr	r0, [r7, #24]
 8008624:	f001 fb32 	bl	8009c8c <pxPortInitialiseStack>
 8008628:	4602      	mov	r2, r0
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800862e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800863a:	bf00      	nop
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800864c:	f001 fc4c 	bl	8009ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008650:	4b2d      	ldr	r3, [pc, #180]	@ (8008708 <prvAddNewTaskToReadyList+0xc4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3301      	adds	r3, #1
 8008656:	4a2c      	ldr	r2, [pc, #176]	@ (8008708 <prvAddNewTaskToReadyList+0xc4>)
 8008658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800865a:	4b2c      	ldr	r3, [pc, #176]	@ (800870c <prvAddNewTaskToReadyList+0xc8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008662:	4a2a      	ldr	r2, [pc, #168]	@ (800870c <prvAddNewTaskToReadyList+0xc8>)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008668:	4b27      	ldr	r3, [pc, #156]	@ (8008708 <prvAddNewTaskToReadyList+0xc4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d110      	bne.n	8008692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008670:	f000 fc1e 	bl	8008eb0 <prvInitialiseTaskLists>
 8008674:	e00d      	b.n	8008692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008676:	4b26      	ldr	r3, [pc, #152]	@ (8008710 <prvAddNewTaskToReadyList+0xcc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800867e:	4b23      	ldr	r3, [pc, #140]	@ (800870c <prvAddNewTaskToReadyList+0xc8>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008688:	429a      	cmp	r2, r3
 800868a:	d802      	bhi.n	8008692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800868c:	4a1f      	ldr	r2, [pc, #124]	@ (800870c <prvAddNewTaskToReadyList+0xc8>)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008692:	4b20      	ldr	r3, [pc, #128]	@ (8008714 <prvAddNewTaskToReadyList+0xd0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	4a1e      	ldr	r2, [pc, #120]	@ (8008714 <prvAddNewTaskToReadyList+0xd0>)
 800869a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800869c:	4b1d      	ldr	r3, [pc, #116]	@ (8008714 <prvAddNewTaskToReadyList+0xd0>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008718 <prvAddNewTaskToReadyList+0xd4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d903      	bls.n	80086b8 <prvAddNewTaskToReadyList+0x74>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b4:	4a18      	ldr	r2, [pc, #96]	@ (8008718 <prvAddNewTaskToReadyList+0xd4>)
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4a15      	ldr	r2, [pc, #84]	@ (800871c <prvAddNewTaskToReadyList+0xd8>)
 80086c6:	441a      	add	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7ff f901 	bl	80078d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086d4:	f001 fc3a 	bl	8009f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008710 <prvAddNewTaskToReadyList+0xcc>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00e      	beq.n	80086fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086e0:	4b0a      	ldr	r3, [pc, #40]	@ (800870c <prvAddNewTaskToReadyList+0xc8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d207      	bcs.n	80086fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008720 <prvAddNewTaskToReadyList+0xdc>)
 80086f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000ff8 	.word	0x20000ff8
 800870c:	20000b24 	.word	0x20000b24
 8008710:	20001004 	.word	0x20001004
 8008714:	20001014 	.word	0x20001014
 8008718:	20001000 	.word	0x20001000
 800871c:	20000b28 	.word	0x20000b28
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d018      	beq.n	8008768 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008736:	4b14      	ldr	r3, [pc, #80]	@ (8008788 <vTaskDelay+0x64>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <vTaskDelay+0x32>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	60bb      	str	r3, [r7, #8]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008756:	f000 f883 	bl	8008860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800875a:	2100      	movs	r1, #0
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fee7 	bl	8009530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008762:	f000 f88b 	bl	800887c <xTaskResumeAll>
 8008766:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d107      	bne.n	800877e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800876e:	4b07      	ldr	r3, [pc, #28]	@ (800878c <vTaskDelay+0x68>)
 8008770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20001020 	.word	0x20001020
 800878c:	e000ed04 	.word	0xe000ed04

08008790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08a      	sub	sp, #40	@ 0x28
 8008794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008796:	2300      	movs	r3, #0
 8008798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800879e:	463a      	mov	r2, r7
 80087a0:	1d39      	adds	r1, r7, #4
 80087a2:	f107 0308 	add.w	r3, r7, #8
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff f834 	bl	8007814 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	9202      	str	r2, [sp, #8]
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	2300      	movs	r3, #0
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	460a      	mov	r2, r1
 80087be:	4922      	ldr	r1, [pc, #136]	@ (8008848 <vTaskStartScheduler+0xb8>)
 80087c0:	4822      	ldr	r0, [pc, #136]	@ (800884c <vTaskStartScheduler+0xbc>)
 80087c2:	f7ff fe09 	bl	80083d8 <xTaskCreateStatic>
 80087c6:	4603      	mov	r3, r0
 80087c8:	4a21      	ldr	r2, [pc, #132]	@ (8008850 <vTaskStartScheduler+0xc0>)
 80087ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087cc:	4b20      	ldr	r3, [pc, #128]	@ (8008850 <vTaskStartScheduler+0xc0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087d4:	2301      	movs	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e001      	b.n	80087de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d102      	bne.n	80087ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087e4:	f000 fef8 	bl	80095d8 <xTimerCreateTimerTask>
 80087e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d116      	bne.n	800881e <vTaskStartScheduler+0x8e>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	613b      	str	r3, [r7, #16]
}
 8008802:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008804:	4b13      	ldr	r3, [pc, #76]	@ (8008854 <vTaskStartScheduler+0xc4>)
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800880c:	4b12      	ldr	r3, [pc, #72]	@ (8008858 <vTaskStartScheduler+0xc8>)
 800880e:	2201      	movs	r2, #1
 8008810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008812:	4b12      	ldr	r3, [pc, #72]	@ (800885c <vTaskStartScheduler+0xcc>)
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008818:	f001 fac2 	bl	8009da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800881c:	e00f      	b.n	800883e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d10b      	bne.n	800883e <vTaskStartScheduler+0xae>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60fb      	str	r3, [r7, #12]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <vTaskStartScheduler+0xaa>
}
 800883e:	bf00      	nop
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	0800bc04 	.word	0x0800bc04
 800884c:	08008e81 	.word	0x08008e81
 8008850:	2000101c 	.word	0x2000101c
 8008854:	20001018 	.word	0x20001018
 8008858:	20001004 	.word	0x20001004
 800885c:	20000ffc 	.word	0x20000ffc

08008860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008864:	4b04      	ldr	r3, [pc, #16]	@ (8008878 <vTaskSuspendAll+0x18>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	4a03      	ldr	r2, [pc, #12]	@ (8008878 <vTaskSuspendAll+0x18>)
 800886c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20001020 	.word	0x20001020

0800887c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008886:	2300      	movs	r3, #0
 8008888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800888a:	4b42      	ldr	r3, [pc, #264]	@ (8008994 <xTaskResumeAll+0x118>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <xTaskResumeAll+0x2e>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	603b      	str	r3, [r7, #0]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088aa:	f001 fb1d 	bl	8009ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ae:	4b39      	ldr	r3, [pc, #228]	@ (8008994 <xTaskResumeAll+0x118>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	4a37      	ldr	r2, [pc, #220]	@ (8008994 <xTaskResumeAll+0x118>)
 80088b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b8:	4b36      	ldr	r3, [pc, #216]	@ (8008994 <xTaskResumeAll+0x118>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d162      	bne.n	8008986 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088c0:	4b35      	ldr	r3, [pc, #212]	@ (8008998 <xTaskResumeAll+0x11c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d05e      	beq.n	8008986 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088c8:	e02f      	b.n	800892a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ca:	4b34      	ldr	r3, [pc, #208]	@ (800899c <xTaskResumeAll+0x120>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3318      	adds	r3, #24
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff f85a 	bl	8007990 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3304      	adds	r3, #4
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff f855 	bl	8007990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	4b2d      	ldr	r3, [pc, #180]	@ (80089a0 <xTaskResumeAll+0x124>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d903      	bls.n	80088fa <xTaskResumeAll+0x7e>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f6:	4a2a      	ldr	r2, [pc, #168]	@ (80089a0 <xTaskResumeAll+0x124>)
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4a27      	ldr	r2, [pc, #156]	@ (80089a4 <xTaskResumeAll+0x128>)
 8008908:	441a      	add	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f7fe ffe0 	bl	80078d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891a:	4b23      	ldr	r3, [pc, #140]	@ (80089a8 <xTaskResumeAll+0x12c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008920:	429a      	cmp	r2, r3
 8008922:	d302      	bcc.n	800892a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008924:	4b21      	ldr	r3, [pc, #132]	@ (80089ac <xTaskResumeAll+0x130>)
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800892a:	4b1c      	ldr	r3, [pc, #112]	@ (800899c <xTaskResumeAll+0x120>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1cb      	bne.n	80088ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008938:	f000 fb58 	bl	8008fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800893c:	4b1c      	ldr	r3, [pc, #112]	@ (80089b0 <xTaskResumeAll+0x134>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d010      	beq.n	800896a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008948:	f000 f846 	bl	80089d8 <xTaskIncrementTick>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008952:	4b16      	ldr	r3, [pc, #88]	@ (80089ac <xTaskResumeAll+0x130>)
 8008954:	2201      	movs	r2, #1
 8008956:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3b01      	subs	r3, #1
 800895c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f1      	bne.n	8008948 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008964:	4b12      	ldr	r3, [pc, #72]	@ (80089b0 <xTaskResumeAll+0x134>)
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800896a:	4b10      	ldr	r3, [pc, #64]	@ (80089ac <xTaskResumeAll+0x130>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008972:	2301      	movs	r3, #1
 8008974:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008976:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <xTaskResumeAll+0x138>)
 8008978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008986:	f001 fae1 	bl	8009f4c <vPortExitCritical>

	return xAlreadyYielded;
 800898a:	68bb      	ldr	r3, [r7, #8]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20001020 	.word	0x20001020
 8008998:	20000ff8 	.word	0x20000ff8
 800899c:	20000fb8 	.word	0x20000fb8
 80089a0:	20001000 	.word	0x20001000
 80089a4:	20000b28 	.word	0x20000b28
 80089a8:	20000b24 	.word	0x20000b24
 80089ac:	2000100c 	.word	0x2000100c
 80089b0:	20001008 	.word	0x20001008
 80089b4:	e000ed04 	.word	0xe000ed04

080089b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089be:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <xTaskGetTickCount+0x1c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089c4:	687b      	ldr	r3, [r7, #4]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20000ffc 	.word	0x20000ffc

080089d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008b20 <xTaskIncrementTick+0x148>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 8090 	bne.w	8008b0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008b24 <xTaskIncrementTick+0x14c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3301      	adds	r3, #1
 80089f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089f4:	4a4b      	ldr	r2, [pc, #300]	@ (8008b24 <xTaskIncrementTick+0x14c>)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d121      	bne.n	8008a44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a00:	4b49      	ldr	r3, [pc, #292]	@ (8008b28 <xTaskIncrementTick+0x150>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	603b      	str	r3, [r7, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	e7fd      	b.n	8008a1e <xTaskIncrementTick+0x46>
 8008a22:	4b41      	ldr	r3, [pc, #260]	@ (8008b28 <xTaskIncrementTick+0x150>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	4b40      	ldr	r3, [pc, #256]	@ (8008b2c <xTaskIncrementTick+0x154>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b28 <xTaskIncrementTick+0x150>)
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	4a3e      	ldr	r2, [pc, #248]	@ (8008b2c <xTaskIncrementTick+0x154>)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	4b3e      	ldr	r3, [pc, #248]	@ (8008b30 <xTaskIncrementTick+0x158>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b30 <xTaskIncrementTick+0x158>)
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	f000 fad4 	bl	8008fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a44:	4b3b      	ldr	r3, [pc, #236]	@ (8008b34 <xTaskIncrementTick+0x15c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d349      	bcc.n	8008ae2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a4e:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <xTaskIncrementTick+0x150>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a58:	4b36      	ldr	r3, [pc, #216]	@ (8008b34 <xTaskIncrementTick+0x15c>)
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	601a      	str	r2, [r3, #0]
					break;
 8008a60:	e03f      	b.n	8008ae2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a62:	4b31      	ldr	r3, [pc, #196]	@ (8008b28 <xTaskIncrementTick+0x150>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d203      	bcs.n	8008a82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8008b34 <xTaskIncrementTick+0x15c>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a80:	e02f      	b.n	8008ae2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe ff82 	bl	8007990 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3318      	adds	r3, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe ff79 	bl	8007990 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <xTaskIncrementTick+0x160>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d903      	bls.n	8008ab2 <xTaskIncrementTick+0xda>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aae:	4a22      	ldr	r2, [pc, #136]	@ (8008b38 <xTaskIncrementTick+0x160>)
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4a1f      	ldr	r2, [pc, #124]	@ (8008b3c <xTaskIncrementTick+0x164>)
 8008ac0:	441a      	add	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fe ff04 	bl	80078d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b40 <xTaskIncrementTick+0x168>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d3b8      	bcc.n	8008a4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ae0:	e7b5      	b.n	8008a4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ae2:	4b17      	ldr	r3, [pc, #92]	@ (8008b40 <xTaskIncrementTick+0x168>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	4914      	ldr	r1, [pc, #80]	@ (8008b3c <xTaskIncrementTick+0x164>)
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d901      	bls.n	8008afe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008afa:	2301      	movs	r3, #1
 8008afc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008afe:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <xTaskIncrementTick+0x16c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	e004      	b.n	8008b16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b48 <xTaskIncrementTick+0x170>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	4a0d      	ldr	r2, [pc, #52]	@ (8008b48 <xTaskIncrementTick+0x170>)
 8008b14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b16:	697b      	ldr	r3, [r7, #20]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20001020 	.word	0x20001020
 8008b24:	20000ffc 	.word	0x20000ffc
 8008b28:	20000fb0 	.word	0x20000fb0
 8008b2c:	20000fb4 	.word	0x20000fb4
 8008b30:	20001010 	.word	0x20001010
 8008b34:	20001018 	.word	0x20001018
 8008b38:	20001000 	.word	0x20001000
 8008b3c:	20000b28 	.word	0x20000b28
 8008b40:	20000b24 	.word	0x20000b24
 8008b44:	2000100c 	.word	0x2000100c
 8008b48:	20001008 	.word	0x20001008

08008b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b52:	4b28      	ldr	r3, [pc, #160]	@ (8008bf4 <vTaskSwitchContext+0xa8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b5a:	4b27      	ldr	r3, [pc, #156]	@ (8008bf8 <vTaskSwitchContext+0xac>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b60:	e042      	b.n	8008be8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008b62:	4b25      	ldr	r3, [pc, #148]	@ (8008bf8 <vTaskSwitchContext+0xac>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b68:	4b24      	ldr	r3, [pc, #144]	@ (8008bfc <vTaskSwitchContext+0xb0>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	e011      	b.n	8008b94 <vTaskSwitchContext+0x48>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <vTaskSwitchContext+0x42>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	607b      	str	r3, [r7, #4]
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	e7fd      	b.n	8008b8a <vTaskSwitchContext+0x3e>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	491a      	ldr	r1, [pc, #104]	@ (8008c00 <vTaskSwitchContext+0xb4>)
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0e3      	beq.n	8008b70 <vTaskSwitchContext+0x24>
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4a13      	ldr	r2, [pc, #76]	@ (8008c00 <vTaskSwitchContext+0xb4>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	60bb      	str	r3, [r7, #8]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d104      	bne.n	8008bd8 <vTaskSwitchContext+0x8c>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	605a      	str	r2, [r3, #4]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	4a09      	ldr	r2, [pc, #36]	@ (8008c04 <vTaskSwitchContext+0xb8>)
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	4a06      	ldr	r2, [pc, #24]	@ (8008bfc <vTaskSwitchContext+0xb0>)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6013      	str	r3, [r2, #0]
}
 8008be8:	bf00      	nop
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20001020 	.word	0x20001020
 8008bf8:	2000100c 	.word	0x2000100c
 8008bfc:	20001000 	.word	0x20001000
 8008c00:	20000b28 	.word	0x20000b28
 8008c04:	20000b24 	.word	0x20000b24

08008c08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60fb      	str	r3, [r7, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c30:	4b07      	ldr	r3, [pc, #28]	@ (8008c50 <vTaskPlaceOnEventList+0x48>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3318      	adds	r3, #24
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7fe fe70 	bl	800791e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c3e:	2101      	movs	r1, #1
 8008c40:	6838      	ldr	r0, [r7, #0]
 8008c42:	f000 fc75 	bl	8009530 <prvAddCurrentTaskToDelayedList>
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000b24 	.word	0x20000b24

08008c54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10b      	bne.n	8008c7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	617b      	str	r3, [r7, #20]
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	e7fd      	b.n	8008c7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3318      	adds	r3, #24
 8008c84:	4619      	mov	r1, r3
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7fe fe25 	bl	80078d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008c92:	f04f 33ff 	mov.w	r3, #4294967295
 8008c96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	68b8      	ldr	r0, [r7, #8]
 8008c9c:	f000 fc48 	bl	8009530 <prvAddCurrentTaskToDelayedList>
	}
 8008ca0:	bf00      	nop
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000b24 	.word	0x20000b24

08008cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60fb      	str	r3, [r7, #12]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3318      	adds	r3, #24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fe56 	bl	8007990 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d5c <xTaskRemoveFromEventList+0xb0>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11d      	bne.n	8008d28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fe4d 	bl	8007990 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfa:	4b19      	ldr	r3, [pc, #100]	@ (8008d60 <xTaskRemoveFromEventList+0xb4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d903      	bls.n	8008d0a <xTaskRemoveFromEventList+0x5e>
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	4a16      	ldr	r2, [pc, #88]	@ (8008d60 <xTaskRemoveFromEventList+0xb4>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a13      	ldr	r2, [pc, #76]	@ (8008d64 <xTaskRemoveFromEventList+0xb8>)
 8008d18:	441a      	add	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe fdd8 	bl	80078d6 <vListInsertEnd>
 8008d26:	e005      	b.n	8008d34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	3318      	adds	r3, #24
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	480e      	ldr	r0, [pc, #56]	@ (8008d68 <xTaskRemoveFromEventList+0xbc>)
 8008d30:	f7fe fdd1 	bl	80078d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d38:	4b0c      	ldr	r3, [pc, #48]	@ (8008d6c <xTaskRemoveFromEventList+0xc0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d905      	bls.n	8008d4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d46:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <xTaskRemoveFromEventList+0xc4>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e001      	b.n	8008d52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d52:	697b      	ldr	r3, [r7, #20]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20001020 	.word	0x20001020
 8008d60:	20001000 	.word	0x20001000
 8008d64:	20000b28 	.word	0x20000b28
 8008d68:	20000fb8 	.word	0x20000fb8
 8008d6c:	20000b24 	.word	0x20000b24
 8008d70:	2000100c 	.word	0x2000100c

08008d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d7c:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <vTaskInternalSetTimeOutState+0x24>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <vTaskInternalSetTimeOutState+0x28>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	605a      	str	r2, [r3, #4]
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	20001010 	.word	0x20001010
 8008d9c:	20000ffc 	.word	0x20000ffc

08008da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	613b      	str	r3, [r7, #16]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10b      	bne.n	8008de6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60fb      	str	r3, [r7, #12]
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	e7fd      	b.n	8008de2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008de6:	f001 f87f 	bl	8009ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dea:	4b1d      	ldr	r3, [pc, #116]	@ (8008e60 <xTaskCheckForTimeOut+0xc0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d102      	bne.n	8008e0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e023      	b.n	8008e52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b15      	ldr	r3, [pc, #84]	@ (8008e64 <xTaskCheckForTimeOut+0xc4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d007      	beq.n	8008e26 <xTaskCheckForTimeOut+0x86>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d302      	bcc.n	8008e26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e015      	b.n	8008e52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d20b      	bcs.n	8008e48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ff99 	bl	8008d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e004      	b.n	8008e52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e52:	f001 f87b 	bl	8009f4c <vPortExitCritical>

	return xReturn;
 8008e56:	69fb      	ldr	r3, [r7, #28]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000ffc 	.word	0x20000ffc
 8008e64:	20001010 	.word	0x20001010

08008e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	@ (8008e7c <vTaskMissedYield+0x14>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	2000100c 	.word	0x2000100c

08008e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e88:	f000 f852 	bl	8008f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <prvIdleTask+0x28>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d9f9      	bls.n	8008e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e94:	4b05      	ldr	r3, [pc, #20]	@ (8008eac <prvIdleTask+0x2c>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ea4:	e7f0      	b.n	8008e88 <prvIdleTask+0x8>
 8008ea6:	bf00      	nop
 8008ea8:	20000b28 	.word	0x20000b28
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e00c      	b.n	8008ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a12      	ldr	r2, [pc, #72]	@ (8008f10 <prvInitialiseTaskLists+0x60>)
 8008ec8:	4413      	add	r3, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fcd6 	bl	800787c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b37      	cmp	r3, #55	@ 0x37
 8008eda:	d9ef      	bls.n	8008ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008edc:	480d      	ldr	r0, [pc, #52]	@ (8008f14 <prvInitialiseTaskLists+0x64>)
 8008ede:	f7fe fccd 	bl	800787c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ee2:	480d      	ldr	r0, [pc, #52]	@ (8008f18 <prvInitialiseTaskLists+0x68>)
 8008ee4:	f7fe fcca 	bl	800787c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ee8:	480c      	ldr	r0, [pc, #48]	@ (8008f1c <prvInitialiseTaskLists+0x6c>)
 8008eea:	f7fe fcc7 	bl	800787c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008eee:	480c      	ldr	r0, [pc, #48]	@ (8008f20 <prvInitialiseTaskLists+0x70>)
 8008ef0:	f7fe fcc4 	bl	800787c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ef4:	480b      	ldr	r0, [pc, #44]	@ (8008f24 <prvInitialiseTaskLists+0x74>)
 8008ef6:	f7fe fcc1 	bl	800787c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	@ (8008f28 <prvInitialiseTaskLists+0x78>)
 8008efc:	4a05      	ldr	r2, [pc, #20]	@ (8008f14 <prvInitialiseTaskLists+0x64>)
 8008efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	@ (8008f2c <prvInitialiseTaskLists+0x7c>)
 8008f02:	4a05      	ldr	r2, [pc, #20]	@ (8008f18 <prvInitialiseTaskLists+0x68>)
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000b28 	.word	0x20000b28
 8008f14:	20000f88 	.word	0x20000f88
 8008f18:	20000f9c 	.word	0x20000f9c
 8008f1c:	20000fb8 	.word	0x20000fb8
 8008f20:	20000fcc 	.word	0x20000fcc
 8008f24:	20000fe4 	.word	0x20000fe4
 8008f28:	20000fb0 	.word	0x20000fb0
 8008f2c:	20000fb4 	.word	0x20000fb4

08008f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f36:	e019      	b.n	8008f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f38:	f000 ffd6 	bl	8009ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f3c:	4b10      	ldr	r3, [pc, #64]	@ (8008f80 <prvCheckTasksWaitingTermination+0x50>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fd21 	bl	8007990 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a0b      	ldr	r2, [pc, #44]	@ (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f58:	4b0b      	ldr	r3, [pc, #44]	@ (8008f88 <prvCheckTasksWaitingTermination+0x58>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008f88 <prvCheckTasksWaitingTermination+0x58>)
 8008f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f62:	f000 fff3 	bl	8009f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f810 	bl	8008f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f6c:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <prvCheckTasksWaitingTermination+0x58>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e1      	bne.n	8008f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000fcc 	.word	0x20000fcc
 8008f84:	20000ff8 	.word	0x20000ff8
 8008f88:	20000fe0 	.word	0x20000fe0

08008f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d108      	bne.n	8008fb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 f990 	bl	800a2c8 <vPortFree>
				vPortFree( pxTCB );
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f98d 	bl	800a2c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fae:	e019      	b.n	8008fe4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d103      	bne.n	8008fc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 f984 	bl	800a2c8 <vPortFree>
	}
 8008fc0:	e010      	b.n	8008fe4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d00b      	beq.n	8008fe4 <prvDeleteTCB+0x58>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	60fb      	str	r3, [r7, #12]
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <prvDeleteTCB+0x54>
	}
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <prvResetNextTaskUnblockTime+0x38>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <prvResetNextTaskUnblockTime+0x3c>)
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009004:	e008      	b.n	8009018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009006:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <prvResetNextTaskUnblockTime+0x38>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	4a04      	ldr	r2, [pc, #16]	@ (8009028 <prvResetNextTaskUnblockTime+0x3c>)
 8009016:	6013      	str	r3, [r2, #0]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	20000fb0 	.word	0x20000fb0
 8009028:	20001018 	.word	0x20001018

0800902c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009032:	4b0b      	ldr	r3, [pc, #44]	@ (8009060 <xTaskGetSchedulerState+0x34>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d102      	bne.n	8009040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800903a:	2301      	movs	r3, #1
 800903c:	607b      	str	r3, [r7, #4]
 800903e:	e008      	b.n	8009052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009040:	4b08      	ldr	r3, [pc, #32]	@ (8009064 <xTaskGetSchedulerState+0x38>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009048:	2302      	movs	r3, #2
 800904a:	607b      	str	r3, [r7, #4]
 800904c:	e001      	b.n	8009052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800904e:	2300      	movs	r3, #0
 8009050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009052:	687b      	ldr	r3, [r7, #4]
	}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	20001004 	.word	0x20001004
 8009064:	20001020 	.word	0x20001020

08009068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009074:	2300      	movs	r3, #0
 8009076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d058      	beq.n	8009130 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800907e:	4b2f      	ldr	r3, [pc, #188]	@ (800913c <xTaskPriorityDisinherit+0xd4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	429a      	cmp	r2, r3
 8009086:	d00b      	beq.n	80090a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	60fb      	str	r3, [r7, #12]
}
 800909a:	bf00      	nop
 800909c:	bf00      	nop
 800909e:	e7fd      	b.n	800909c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10b      	bne.n	80090c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60bb      	str	r3, [r7, #8]
}
 80090ba:	bf00      	nop
 80090bc:	bf00      	nop
 80090be:	e7fd      	b.n	80090bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c4:	1e5a      	subs	r2, r3, #1
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d02c      	beq.n	8009130 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d128      	bne.n	8009130 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fc54 	bl	8007990 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009100:	4b0f      	ldr	r3, [pc, #60]	@ (8009140 <xTaskPriorityDisinherit+0xd8>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d903      	bls.n	8009110 <xTaskPriorityDisinherit+0xa8>
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	4a0c      	ldr	r2, [pc, #48]	@ (8009140 <xTaskPriorityDisinherit+0xd8>)
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4a09      	ldr	r2, [pc, #36]	@ (8009144 <xTaskPriorityDisinherit+0xdc>)
 800911e:	441a      	add	r2, r3
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fe fbd5 	bl	80078d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009130:	697b      	ldr	r3, [r7, #20]
	}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000b24 	.word	0x20000b24
 8009140:	20001000 	.word	0x20001000
 8009144:	20000b28 	.word	0x20000b28

08009148 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009156:	f000 fec7 	bl	8009ee8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800915a:	4b26      	ldr	r3, [pc, #152]	@ (80091f4 <xTaskNotifyWait+0xac>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d01a      	beq.n	800919e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009168:	4b22      	ldr	r3, [pc, #136]	@ (80091f4 <xTaskNotifyWait+0xac>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	43d2      	mvns	r2, r2
 8009172:	400a      	ands	r2, r1
 8009174:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009176:	4b1f      	ldr	r3, [pc, #124]	@ (80091f4 <xTaskNotifyWait+0xac>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00b      	beq.n	800919e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009186:	2101      	movs	r1, #1
 8009188:	6838      	ldr	r0, [r7, #0]
 800918a:	f000 f9d1 	bl	8009530 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800918e:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <xTaskNotifyWait+0xb0>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800919e:	f000 fed5 	bl	8009f4c <vPortExitCritical>

		taskENTER_CRITICAL();
 80091a2:	f000 fea1 	bl	8009ee8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80091ac:	4b11      	ldr	r3, [pc, #68]	@ (80091f4 <xTaskNotifyWait+0xac>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80091b6:	4b0f      	ldr	r3, [pc, #60]	@ (80091f4 <xTaskNotifyWait+0xac>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d002      	beq.n	80091ca <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80091c4:	2300      	movs	r3, #0
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e008      	b.n	80091dc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091ca:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <xTaskNotifyWait+0xac>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	43d2      	mvns	r2, r2
 80091d4:	400a      	ands	r2, r1
 80091d6:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091dc:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <xTaskNotifyWait+0xac>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80091e6:	f000 feb1 	bl	8009f4c <vPortExitCritical>

		return xReturn;
 80091ea:	697b      	ldr	r3, [r7, #20]
	}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000b24 	.word	0x20000b24
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800920c:	2301      	movs	r3, #1
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10b      	bne.n	800922e <xTaskGenericNotify+0x32>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	61bb      	str	r3, [r7, #24]
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	e7fd      	b.n	800922a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009232:	f000 fe59 	bl	8009ee8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800924a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	2b04      	cmp	r3, #4
 8009258:	d827      	bhi.n	80092aa <xTaskGenericNotify+0xae>
 800925a:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <xTaskGenericNotify+0x64>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	080092cd 	.word	0x080092cd
 8009264:	08009275 	.word	0x08009275
 8009268:	08009283 	.word	0x08009283
 800926c:	0800928f 	.word	0x0800928f
 8009270:	08009297 	.word	0x08009297
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	431a      	orrs	r2, r3
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009280:	e027      	b.n	80092d2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800928c:	e021      	b.n	80092d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009294:	e01d      	b.n	80092d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009296:	7ffb      	ldrb	r3, [r7, #31]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d003      	beq.n	80092a4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80092a2:	e016      	b.n	80092d2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80092a8:	e013      	b.n	80092d2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d00d      	beq.n	80092d0 <xTaskGenericNotify+0xd4>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	617b      	str	r3, [r7, #20]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTaskGenericNotify+0xcc>
					break;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <xTaskGenericNotify+0xd6>

					break;
 80092d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092d2:	7ffb      	ldrb	r3, [r7, #31]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d13b      	bne.n	8009350 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	3304      	adds	r3, #4
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fb57 	bl	8007990 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009360 <xTaskGenericNotify+0x164>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d903      	bls.n	80092f6 <xTaskGenericNotify+0xfa>
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009360 <xTaskGenericNotify+0x164>)
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4a18      	ldr	r2, [pc, #96]	@ (8009364 <xTaskGenericNotify+0x168>)
 8009304:	441a      	add	r2, r3
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fe fae2 	bl	80078d6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <xTaskGenericNotify+0x136>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	613b      	str	r3, [r7, #16]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009336:	4b0c      	ldr	r3, [pc, #48]	@ (8009368 <xTaskGenericNotify+0x16c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933c:	429a      	cmp	r2, r3
 800933e:	d907      	bls.n	8009350 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009340:	4b0a      	ldr	r3, [pc, #40]	@ (800936c <xTaskGenericNotify+0x170>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009350:	f000 fdfc 	bl	8009f4c <vPortExitCritical>

		return xReturn;
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009356:	4618      	mov	r0, r3
 8009358:	3728      	adds	r7, #40	@ 0x28
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20001000 	.word	0x20001000
 8009364:	20000b28 	.word	0x20000b28
 8009368:	20000b24 	.word	0x20000b24
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08e      	sub	sp, #56	@ 0x38
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	4613      	mov	r3, r2
 800937e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009380:	2301      	movs	r3, #1
 8009382:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10b      	bne.n	80093a2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	e7fd      	b.n	800939e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093a2:	f000 fe81 	bl	800a0a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80093aa:	f3ef 8211 	mrs	r2, BASEPRI
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	623a      	str	r2, [r7, #32]
 80093c0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80093c2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	2202      	movs	r2, #2
 80093e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d829      	bhi.n	8009440 <xTaskGenericNotifyFromISR+0xd0>
 80093ec:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <xTaskGenericNotifyFromISR+0x84>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	08009463 	.word	0x08009463
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009417 	.word	0x08009417
 8009400:	08009423 	.word	0x08009423
 8009404:	0800942b 	.word	0x0800942b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	431a      	orrs	r2, r3
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009414:	e028      	b.n	8009468 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009420:	e022      	b.n	8009468 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009428:	e01e      	b.n	8009468 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800942a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800942e:	2b02      	cmp	r3, #2
 8009430:	d003      	beq.n	800943a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009438:	e016      	b.n	8009468 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800943a:	2300      	movs	r3, #0
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800943e:	e013      	b.n	8009468 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d00d      	beq.n	8009466 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	61bb      	str	r3, [r7, #24]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <xTaskGenericNotifyFromISR+0xee>
					break;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8009466:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009468:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800946c:	2b01      	cmp	r3, #1
 800946e:	d147      	bne.n	8009500 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00b      	beq.n	8009490 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	617b      	str	r3, [r7, #20]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009490:	4b21      	ldr	r3, [pc, #132]	@ (8009518 <xTaskGenericNotifyFromISR+0x1a8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11d      	bne.n	80094d4 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	3304      	adds	r3, #4
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fa77 	bl	8007990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a6:	4b1d      	ldr	r3, [pc, #116]	@ (800951c <xTaskGenericNotifyFromISR+0x1ac>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d903      	bls.n	80094b6 <xTaskGenericNotifyFromISR+0x146>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b2:	4a1a      	ldr	r2, [pc, #104]	@ (800951c <xTaskGenericNotifyFromISR+0x1ac>)
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4a17      	ldr	r2, [pc, #92]	@ (8009520 <xTaskGenericNotifyFromISR+0x1b0>)
 80094c4:	441a      	add	r2, r3
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe fa02 	bl	80078d6 <vListInsertEnd>
 80094d2:	e005      	b.n	80094e0 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	3318      	adds	r3, #24
 80094d8:	4619      	mov	r1, r3
 80094da:	4812      	ldr	r0, [pc, #72]	@ (8009524 <xTaskGenericNotifyFromISR+0x1b4>)
 80094dc:	f7fe f9fb 	bl	80078d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e4:	4b10      	ldr	r3, [pc, #64]	@ (8009528 <xTaskGenericNotifyFromISR+0x1b8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d908      	bls.n	8009500 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80094ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80094f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80094fa:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <xTaskGenericNotifyFromISR+0x1bc>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009502:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f383 8811 	msr	BASEPRI, r3
}
 800950a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800950c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3738      	adds	r7, #56	@ 0x38
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20001020 	.word	0x20001020
 800951c:	20001000 	.word	0x20001000
 8009520:	20000b28 	.word	0x20000b28
 8009524:	20000fb8 	.word	0x20000fb8
 8009528:	20000b24 	.word	0x20000b24
 800952c:	2000100c 	.word	0x2000100c

08009530 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800953a:	4b21      	ldr	r3, [pc, #132]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009540:	4b20      	ldr	r3, [pc, #128]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3304      	adds	r3, #4
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fa22 	bl	8007990 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d10a      	bne.n	800956a <prvAddCurrentTaskToDelayedList+0x3a>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d007      	beq.n	800956a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800955a:	4b1a      	ldr	r3, [pc, #104]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4819      	ldr	r0, [pc, #100]	@ (80095c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009564:	f7fe f9b7 	bl	80078d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009568:	e026      	b.n	80095b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4413      	add	r3, r2
 8009570:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009572:	4b14      	ldr	r3, [pc, #80]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	429a      	cmp	r2, r3
 8009580:	d209      	bcs.n	8009596 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009582:	4b12      	ldr	r3, [pc, #72]	@ (80095cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b0f      	ldr	r3, [pc, #60]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f7fe f9c5 	bl	800791e <vListInsert>
}
 8009594:	e010      	b.n	80095b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009596:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4b0a      	ldr	r3, [pc, #40]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3304      	adds	r3, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7fe f9bb 	bl	800791e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095a8:	4b0a      	ldr	r3, [pc, #40]	@ (80095d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d202      	bcs.n	80095b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095b2:	4a08      	ldr	r2, [pc, #32]	@ (80095d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	6013      	str	r3, [r2, #0]
}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20000ffc 	.word	0x20000ffc
 80095c4:	20000b24 	.word	0x20000b24
 80095c8:	20000fe4 	.word	0x20000fe4
 80095cc:	20000fb4 	.word	0x20000fb4
 80095d0:	20000fb0 	.word	0x20000fb0
 80095d4:	20001018 	.word	0x20001018

080095d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08a      	sub	sp, #40	@ 0x28
 80095dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095e2:	f000 fb13 	bl	8009c0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095e6:	4b1d      	ldr	r3, [pc, #116]	@ (800965c <xTimerCreateTimerTask+0x84>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d021      	beq.n	8009632 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095f6:	1d3a      	adds	r2, r7, #4
 80095f8:	f107 0108 	add.w	r1, r7, #8
 80095fc:	f107 030c 	add.w	r3, r7, #12
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe f921 	bl	8007848 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	9202      	str	r2, [sp, #8]
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	2302      	movs	r3, #2
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2300      	movs	r3, #0
 8009616:	460a      	mov	r2, r1
 8009618:	4911      	ldr	r1, [pc, #68]	@ (8009660 <xTimerCreateTimerTask+0x88>)
 800961a:	4812      	ldr	r0, [pc, #72]	@ (8009664 <xTimerCreateTimerTask+0x8c>)
 800961c:	f7fe fedc 	bl	80083d8 <xTaskCreateStatic>
 8009620:	4603      	mov	r3, r0
 8009622:	4a11      	ldr	r2, [pc, #68]	@ (8009668 <xTimerCreateTimerTask+0x90>)
 8009624:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009626:	4b10      	ldr	r3, [pc, #64]	@ (8009668 <xTimerCreateTimerTask+0x90>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800962e:	2301      	movs	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	613b      	str	r3, [r7, #16]
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	e7fd      	b.n	800964c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009650:	697b      	ldr	r3, [r7, #20]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20001054 	.word	0x20001054
 8009660:	0800bc0c 	.word	0x0800bc0c
 8009664:	080097a5 	.word	0x080097a5
 8009668:	20001058 	.word	0x20001058

0800966c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	@ 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800967a:	2300      	movs	r3, #0
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <xTimerGenericCommand+0x30>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800969c:	4b19      	ldr	r3, [pc, #100]	@ (8009704 <xTimerGenericCommand+0x98>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d02a      	beq.n	80096fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	dc18      	bgt.n	80096e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096b6:	f7ff fcb9 	bl	800902c <xTaskGetSchedulerState>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d109      	bne.n	80096d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096c0:	4b10      	ldr	r3, [pc, #64]	@ (8009704 <xTimerGenericCommand+0x98>)
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	f107 0110 	add.w	r1, r7, #16
 80096c8:	2300      	movs	r3, #0
 80096ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096cc:	f7fe fa94 	bl	8007bf8 <xQueueGenericSend>
 80096d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80096d2:	e012      	b.n	80096fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009704 <xTimerGenericCommand+0x98>)
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	f107 0110 	add.w	r1, r7, #16
 80096dc:	2300      	movs	r3, #0
 80096de:	2200      	movs	r2, #0
 80096e0:	f7fe fa8a 	bl	8007bf8 <xQueueGenericSend>
 80096e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80096e6:	e008      	b.n	80096fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096e8:	4b06      	ldr	r3, [pc, #24]	@ (8009704 <xTimerGenericCommand+0x98>)
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	f107 0110 	add.w	r1, r7, #16
 80096f0:	2300      	movs	r3, #0
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	f7fe fb82 	bl	8007dfc <xQueueGenericSendFromISR>
 80096f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3728      	adds	r7, #40	@ 0x28
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20001054 	.word	0x20001054

08009708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af02      	add	r7, sp, #8
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009712:	4b23      	ldr	r3, [pc, #140]	@ (80097a0 <prvProcessExpiredTimer+0x98>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	3304      	adds	r3, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe f935 	bl	8007990 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d023      	beq.n	800977c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	18d1      	adds	r1, r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	6978      	ldr	r0, [r7, #20]
 8009742:	f000 f8d5 	bl	80098f0 <prvInsertTimerInActiveList>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d020      	beq.n	800978e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800974c:	2300      	movs	r3, #0
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	2300      	movs	r3, #0
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	2100      	movs	r1, #0
 8009756:	6978      	ldr	r0, [r7, #20]
 8009758:	f7ff ff88 	bl	800966c <xTimerGenericCommand>
 800975c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d114      	bne.n	800978e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	4798      	blx	r3
}
 8009796:	bf00      	nop
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000104c 	.word	0x2000104c

080097a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ac:	f107 0308 	add.w	r3, r7, #8
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f859 	bl	8009868 <prvGetNextExpireTime>
 80097b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4619      	mov	r1, r3
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 f805 	bl	80097cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097c2:	f000 f8d7 	bl	8009974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097c6:	bf00      	nop
 80097c8:	e7f0      	b.n	80097ac <prvTimerTask+0x8>
	...

080097cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097d6:	f7ff f843 	bl	8008860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f866 	bl	80098b0 <prvSampleTimeNow>
 80097e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d130      	bne.n	800984e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <prvProcessTimerOrBlockTask+0x3c>
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d806      	bhi.n	8009808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097fa:	f7ff f83f 	bl	800887c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff81 	bl	8009708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009806:	e024      	b.n	8009852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800980e:	4b13      	ldr	r3, [pc, #76]	@ (800985c <prvProcessTimerOrBlockTask+0x90>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <prvProcessTimerOrBlockTask+0x50>
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <prvProcessTimerOrBlockTask+0x52>
 800981c:	2300      	movs	r3, #0
 800981e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009820:	4b0f      	ldr	r3, [pc, #60]	@ (8009860 <prvProcessTimerOrBlockTask+0x94>)
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4619      	mov	r1, r3
 800982e:	f7fe fd9f 	bl	8008370 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009832:	f7ff f823 	bl	800887c <xTaskResumeAll>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800983c:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <prvProcessTimerOrBlockTask+0x98>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	f3bf 8f6f 	isb	sy
}
 800984c:	e001      	b.n	8009852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800984e:	f7ff f815 	bl	800887c <xTaskResumeAll>
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001050 	.word	0x20001050
 8009860:	20001054 	.word	0x20001054
 8009864:	e000ed04 	.word	0xe000ed04

08009868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009870:	4b0e      	ldr	r3, [pc, #56]	@ (80098ac <prvGetNextExpireTime+0x44>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <prvGetNextExpireTime+0x16>
 800987a:	2201      	movs	r2, #1
 800987c:	e000      	b.n	8009880 <prvGetNextExpireTime+0x18>
 800987e:	2200      	movs	r2, #0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800988c:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <prvGetNextExpireTime+0x44>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e001      	b.n	800989c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800989c:	68fb      	ldr	r3, [r7, #12]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	2000104c 	.word	0x2000104c

080098b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098b8:	f7ff f87e 	bl	80089b8 <xTaskGetTickCount>
 80098bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098be:	4b0b      	ldr	r3, [pc, #44]	@ (80098ec <prvSampleTimeNow+0x3c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d205      	bcs.n	80098d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098c8:	f000 f93a 	bl	8009b40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e002      	b.n	80098da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098da:	4a04      	ldr	r2, [pc, #16]	@ (80098ec <prvSampleTimeNow+0x3c>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	2000105c 	.word	0x2000105c

080098f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d812      	bhi.n	800993c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009924:	2301      	movs	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e01b      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800992a:	4b10      	ldr	r3, [pc, #64]	@ (800996c <prvInsertTimerInActiveList+0x7c>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3304      	adds	r3, #4
 8009932:	4619      	mov	r1, r3
 8009934:	4610      	mov	r0, r2
 8009936:	f7fd fff2 	bl	800791e <vListInsert>
 800993a:	e012      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d206      	bcs.n	8009952 <prvInsertTimerInActiveList+0x62>
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d302      	bcc.n	8009952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e007      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009952:	4b07      	ldr	r3, [pc, #28]	@ (8009970 <prvInsertTimerInActiveList+0x80>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fd ffde 	bl	800791e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009962:	697b      	ldr	r3, [r7, #20]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20001050 	.word	0x20001050
 8009970:	2000104c 	.word	0x2000104c

08009974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08e      	sub	sp, #56	@ 0x38
 8009978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800997a:	e0ce      	b.n	8009b1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	da19      	bge.n	80099b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	3304      	adds	r3, #4
 8009986:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10b      	bne.n	80099a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61fb      	str	r3, [r7, #28]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ac:	6850      	ldr	r0, [r2, #4]
 80099ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099b0:	6892      	ldr	r2, [r2, #8]
 80099b2:	4611      	mov	r1, r2
 80099b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f2c0 80ae 	blt.w	8009b1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	3304      	adds	r3, #4
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fd ffde 	bl	8007990 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099d4:	463b      	mov	r3, r7
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff ff6a 	bl	80098b0 <prvSampleTimeNow>
 80099dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b09      	cmp	r3, #9
 80099e2:	f200 8097 	bhi.w	8009b14 <prvProcessReceivedCommands+0x1a0>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <prvProcessReceivedCommands+0x78>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a8b 	.word	0x08009a8b
 80099fc:	08009a9f 	.word	0x08009a9f
 8009a00:	08009aeb 	.word	0x08009aeb
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a15 	.word	0x08009a15
 8009a0c:	08009a8b 	.word	0x08009a8b
 8009a10:	08009a9f 	.word	0x08009a9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a1a:	f043 0301 	orr.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	18d1      	adds	r1, r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a34:	f7ff ff5c 	bl	80098f0 <prvInsertTimerInActiveList>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d06c      	beq.n	8009b18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d061      	beq.n	8009b18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a66:	f7ff fe01 	bl	800966c <xTimerGenericCommand>
 8009a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d152      	bne.n	8009b18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	61bb      	str	r3, [r7, #24]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a9c:	e03d      	b.n	8009b1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa4:	f043 0301 	orr.w	r3, r3, #1
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10b      	bne.n	8009ad6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	617b      	str	r3, [r7, #20]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	18d1      	adds	r1, r2, r3
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ae4:	f7ff ff04 	bl	80098f0 <prvInsertTimerInActiveList>
					break;
 8009ae8:	e017      	b.n	8009b1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009afa:	f000 fbe5 	bl	800a2c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009afe:	e00c      	b.n	8009b1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b12:	e002      	b.n	8009b1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009b14:	bf00      	nop
 8009b16:	e000      	b.n	8009b1a <prvProcessReceivedCommands+0x1a6>
					break;
 8009b18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b1a:	4b08      	ldr	r3, [pc, #32]	@ (8009b3c <prvProcessReceivedCommands+0x1c8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	1d39      	adds	r1, r7, #4
 8009b20:	2200      	movs	r2, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fa08 	bl	8007f38 <xQueueReceive>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f47f af26 	bne.w	800997c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	3730      	adds	r7, #48	@ 0x30
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20001054 	.word	0x20001054

08009b40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b46:	e049      	b.n	8009bdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b48:	4b2e      	ldr	r3, [pc, #184]	@ (8009c04 <prvSwitchTimerLists+0xc4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b52:	4b2c      	ldr	r3, [pc, #176]	@ (8009c04 <prvSwitchTimerLists+0xc4>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fd ff15 	bl	8007990 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d02f      	beq.n	8009bdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4413      	add	r3, r2
 8009b84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d90e      	bls.n	8009bac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009c04 <prvSwitchTimerLists+0xc4>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	f7fd feba 	bl	800791e <vListInsert>
 8009baa:	e017      	b.n	8009bdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bac:	2300      	movs	r3, #0
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fd58 	bl	800966c <xTimerGenericCommand>
 8009bbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10b      	bne.n	8009bdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	603b      	str	r3, [r7, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
 8009bda:	e7fd      	b.n	8009bd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bdc:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <prvSwitchTimerLists+0xc4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1b0      	bne.n	8009b48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009be6:	4b07      	ldr	r3, [pc, #28]	@ (8009c04 <prvSwitchTimerLists+0xc4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bec:	4b06      	ldr	r3, [pc, #24]	@ (8009c08 <prvSwitchTimerLists+0xc8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a04      	ldr	r2, [pc, #16]	@ (8009c04 <prvSwitchTimerLists+0xc4>)
 8009bf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bf4:	4a04      	ldr	r2, [pc, #16]	@ (8009c08 <prvSwitchTimerLists+0xc8>)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6013      	str	r3, [r2, #0]
}
 8009bfa:	bf00      	nop
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	2000104c 	.word	0x2000104c
 8009c08:	20001050 	.word	0x20001050

08009c0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c12:	f000 f969 	bl	8009ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c16:	4b15      	ldr	r3, [pc, #84]	@ (8009c6c <prvCheckForValidListAndQueue+0x60>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d120      	bne.n	8009c60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c1e:	4814      	ldr	r0, [pc, #80]	@ (8009c70 <prvCheckForValidListAndQueue+0x64>)
 8009c20:	f7fd fe2c 	bl	800787c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c24:	4813      	ldr	r0, [pc, #76]	@ (8009c74 <prvCheckForValidListAndQueue+0x68>)
 8009c26:	f7fd fe29 	bl	800787c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c2a:	4b13      	ldr	r3, [pc, #76]	@ (8009c78 <prvCheckForValidListAndQueue+0x6c>)
 8009c2c:	4a10      	ldr	r2, [pc, #64]	@ (8009c70 <prvCheckForValidListAndQueue+0x64>)
 8009c2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c30:	4b12      	ldr	r3, [pc, #72]	@ (8009c7c <prvCheckForValidListAndQueue+0x70>)
 8009c32:	4a10      	ldr	r2, [pc, #64]	@ (8009c74 <prvCheckForValidListAndQueue+0x68>)
 8009c34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c36:	2300      	movs	r3, #0
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	4b11      	ldr	r3, [pc, #68]	@ (8009c80 <prvCheckForValidListAndQueue+0x74>)
 8009c3c:	4a11      	ldr	r2, [pc, #68]	@ (8009c84 <prvCheckForValidListAndQueue+0x78>)
 8009c3e:	2110      	movs	r1, #16
 8009c40:	200a      	movs	r0, #10
 8009c42:	f7fd ff39 	bl	8007ab8 <xQueueGenericCreateStatic>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4a08      	ldr	r2, [pc, #32]	@ (8009c6c <prvCheckForValidListAndQueue+0x60>)
 8009c4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <prvCheckForValidListAndQueue+0x60>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c54:	4b05      	ldr	r3, [pc, #20]	@ (8009c6c <prvCheckForValidListAndQueue+0x60>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	490b      	ldr	r1, [pc, #44]	@ (8009c88 <prvCheckForValidListAndQueue+0x7c>)
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe fb5e 	bl	800831c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c60:	f000 f974 	bl	8009f4c <vPortExitCritical>
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20001054 	.word	0x20001054
 8009c70:	20001024 	.word	0x20001024
 8009c74:	20001038 	.word	0x20001038
 8009c78:	2000104c 	.word	0x2000104c
 8009c7c:	20001050 	.word	0x20001050
 8009c80:	20001100 	.word	0x20001100
 8009c84:	20001060 	.word	0x20001060
 8009c88:	0800bc14 	.word	0x0800bc14

08009c8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3b04      	subs	r3, #4
 8009c9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3b04      	subs	r3, #4
 8009caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f023 0201 	bic.w	r2, r3, #1
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3b04      	subs	r3, #4
 8009cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8009cf0 <pxPortInitialiseStack+0x64>)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3b14      	subs	r3, #20
 8009cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f06f 0202 	mvn.w	r2, #2
 8009cda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3b20      	subs	r3, #32
 8009ce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	08009cf5 	.word	0x08009cf5

08009cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cfe:	4b13      	ldr	r3, [pc, #76]	@ (8009d4c <prvTaskExitError+0x58>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d06:	d00b      	beq.n	8009d20 <prvTaskExitError+0x2c>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	60fb      	str	r3, [r7, #12]
}
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	e7fd      	b.n	8009d1c <prvTaskExitError+0x28>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	60bb      	str	r3, [r7, #8]
}
 8009d32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d34:	bf00      	nop
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0fc      	beq.n	8009d36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	200000f0 	.word	0x200000f0

08009d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d50:	4b07      	ldr	r3, [pc, #28]	@ (8009d70 <pxCurrentTCBConst2>)
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	6808      	ldr	r0, [r1, #0]
 8009d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	f380 8809 	msr	PSP, r0
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8811 	msr	BASEPRI, r0
 8009d6a:	4770      	bx	lr
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst2>:
 8009d70:	20000b24 	.word	0x20000b24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d78:	4808      	ldr	r0, [pc, #32]	@ (8009d9c <prvPortStartFirstTask+0x24>)
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	6800      	ldr	r0, [r0, #0]
 8009d7e:	f380 8808 	msr	MSP, r0
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8814 	msr	CONTROL, r0
 8009d8a:	b662      	cpsie	i
 8009d8c:	b661      	cpsie	f
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	df00      	svc	0
 8009d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d9a:	bf00      	nop
 8009d9c:	e000ed08 	.word	0xe000ed08

08009da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009da6:	4b47      	ldr	r3, [pc, #284]	@ (8009ec4 <xPortStartScheduler+0x124>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a47      	ldr	r2, [pc, #284]	@ (8009ec8 <xPortStartScheduler+0x128>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10b      	bne.n	8009dc8 <xPortStartScheduler+0x28>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	613b      	str	r3, [r7, #16]
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ec4 <xPortStartScheduler+0x124>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ecc <xPortStartScheduler+0x12c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d10b      	bne.n	8009dea <xPortStartScheduler+0x4a>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	60fb      	str	r3, [r7, #12]
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop
 8009de8:	e7fd      	b.n	8009de6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dea:	4b39      	ldr	r3, [pc, #228]	@ (8009ed0 <xPortStartScheduler+0x130>)
 8009dec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	22ff      	movs	r2, #255	@ 0xff
 8009dfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	4b31      	ldr	r3, [pc, #196]	@ (8009ed4 <xPortStartScheduler+0x134>)
 8009e10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e12:	4b31      	ldr	r3, [pc, #196]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e14:	2207      	movs	r2, #7
 8009e16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e18:	e009      	b.n	8009e2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	4a2d      	ldr	r2, [pc, #180]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e36:	2b80      	cmp	r3, #128	@ 0x80
 8009e38:	d0ef      	beq.n	8009e1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e3a:	4b27      	ldr	r3, [pc, #156]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f1c3 0307 	rsb	r3, r3, #7
 8009e42:	2b04      	cmp	r3, #4
 8009e44:	d00b      	beq.n	8009e5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	bf00      	nop
 8009e5c:	e7fd      	b.n	8009e5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	021b      	lsls	r3, r3, #8
 8009e64:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e70:	4a19      	ldr	r2, [pc, #100]	@ (8009ed8 <xPortStartScheduler+0x138>)
 8009e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e7c:	4b17      	ldr	r3, [pc, #92]	@ (8009edc <xPortStartScheduler+0x13c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a16      	ldr	r2, [pc, #88]	@ (8009edc <xPortStartScheduler+0x13c>)
 8009e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e88:	4b14      	ldr	r3, [pc, #80]	@ (8009edc <xPortStartScheduler+0x13c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a13      	ldr	r2, [pc, #76]	@ (8009edc <xPortStartScheduler+0x13c>)
 8009e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e94:	f000 f8da 	bl	800a04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e98:	4b11      	ldr	r3, [pc, #68]	@ (8009ee0 <xPortStartScheduler+0x140>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e9e:	f000 f8f9 	bl	800a094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ea2:	4b10      	ldr	r3, [pc, #64]	@ (8009ee4 <xPortStartScheduler+0x144>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8009ee4 <xPortStartScheduler+0x144>)
 8009ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009eae:	f7ff ff63 	bl	8009d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009eb2:	f7fe fe4b 	bl	8008b4c <vTaskSwitchContext>
	prvTaskExitError();
 8009eb6:	f7ff ff1d 	bl	8009cf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	e000ed00 	.word	0xe000ed00
 8009ec8:	410fc271 	.word	0x410fc271
 8009ecc:	410fc270 	.word	0x410fc270
 8009ed0:	e000e400 	.word	0xe000e400
 8009ed4:	20001150 	.word	0x20001150
 8009ed8:	20001154 	.word	0x20001154
 8009edc:	e000ed20 	.word	0xe000ed20
 8009ee0:	200000f0 	.word	0x200000f0
 8009ee4:	e000ef34 	.word	0xe000ef34

08009ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f02:	4b10      	ldr	r3, [pc, #64]	@ (8009f44 <vPortEnterCritical+0x5c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3301      	adds	r3, #1
 8009f08:	4a0e      	ldr	r2, [pc, #56]	@ (8009f44 <vPortEnterCritical+0x5c>)
 8009f0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f44 <vPortEnterCritical+0x5c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d110      	bne.n	8009f36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f14:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <vPortEnterCritical+0x60>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	603b      	str	r3, [r7, #0]
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	e7fd      	b.n	8009f32 <vPortEnterCritical+0x4a>
	}
}
 8009f36:	bf00      	nop
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	200000f0 	.word	0x200000f0
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f52:	4b12      	ldr	r3, [pc, #72]	@ (8009f9c <vPortExitCritical+0x50>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <vPortExitCritical+0x26>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	607b      	str	r3, [r7, #4]
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	e7fd      	b.n	8009f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f72:	4b0a      	ldr	r3, [pc, #40]	@ (8009f9c <vPortExitCritical+0x50>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	4a08      	ldr	r2, [pc, #32]	@ (8009f9c <vPortExitCritical+0x50>)
 8009f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f7c:	4b07      	ldr	r3, [pc, #28]	@ (8009f9c <vPortExitCritical+0x50>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d105      	bne.n	8009f90 <vPortExitCritical+0x44>
 8009f84:	2300      	movs	r3, #0
 8009f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	f383 8811 	msr	BASEPRI, r3
}
 8009f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	200000f0 	.word	0x200000f0

08009fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fa0:	f3ef 8009 	mrs	r0, PSP
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	4b15      	ldr	r3, [pc, #84]	@ (800a000 <pxCurrentTCBConst>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	f01e 0f10 	tst.w	lr, #16
 8009fb0:	bf08      	it	eq
 8009fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	6010      	str	r0, [r2, #0]
 8009fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fc4:	f380 8811 	msr	BASEPRI, r0
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f7fe fdbc 	bl	8008b4c <vTaskSwitchContext>
 8009fd4:	f04f 0000 	mov.w	r0, #0
 8009fd8:	f380 8811 	msr	BASEPRI, r0
 8009fdc:	bc09      	pop	{r0, r3}
 8009fde:	6819      	ldr	r1, [r3, #0]
 8009fe0:	6808      	ldr	r0, [r1, #0]
 8009fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe6:	f01e 0f10 	tst.w	lr, #16
 8009fea:	bf08      	it	eq
 8009fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ff0:	f380 8809 	msr	PSP, r0
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	f3af 8000 	nop.w

0800a000 <pxCurrentTCBConst>:
 800a000:	20000b24 	.word	0x20000b24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop

0800a008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a022:	f7fe fcd9 	bl	80089d8 <xTaskIncrementTick>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a02c:	4b06      	ldr	r3, [pc, #24]	@ (800a048 <xPortSysTickHandler+0x40>)
 800a02e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	f383 8811 	msr	BASEPRI, r3
}
 800a03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a050:	4b0b      	ldr	r3, [pc, #44]	@ (800a080 <vPortSetupTimerInterrupt+0x34>)
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a056:	4b0b      	ldr	r3, [pc, #44]	@ (800a084 <vPortSetupTimerInterrupt+0x38>)
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a05c:	4b0a      	ldr	r3, [pc, #40]	@ (800a088 <vPortSetupTimerInterrupt+0x3c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a0a      	ldr	r2, [pc, #40]	@ (800a08c <vPortSetupTimerInterrupt+0x40>)
 800a062:	fba2 2303 	umull	r2, r3, r2, r3
 800a066:	099b      	lsrs	r3, r3, #6
 800a068:	4a09      	ldr	r2, [pc, #36]	@ (800a090 <vPortSetupTimerInterrupt+0x44>)
 800a06a:	3b01      	subs	r3, #1
 800a06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a06e:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <vPortSetupTimerInterrupt+0x34>)
 800a070:	2207      	movs	r2, #7
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	e000e010 	.word	0xe000e010
 800a084:	e000e018 	.word	0xe000e018
 800a088:	200000d8 	.word	0x200000d8
 800a08c:	10624dd3 	.word	0x10624dd3
 800a090:	e000e014 	.word	0xe000e014

0800a094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0a4 <vPortEnableVFP+0x10>
 800a098:	6801      	ldr	r1, [r0, #0]
 800a09a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a09e:	6001      	str	r1, [r0, #0]
 800a0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0a2:	bf00      	nop
 800a0a4:	e000ed88 	.word	0xe000ed88

0800a0a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ae:	f3ef 8305 	mrs	r3, IPSR
 800a0b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b0f      	cmp	r3, #15
 800a0b8:	d915      	bls.n	800a0e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0ba:	4a18      	ldr	r2, [pc, #96]	@ (800a11c <vPortValidateInterruptPriority+0x74>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0c4:	4b16      	ldr	r3, [pc, #88]	@ (800a120 <vPortValidateInterruptPriority+0x78>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	7afa      	ldrb	r2, [r7, #11]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d20b      	bcs.n	800a0e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	607b      	str	r3, [r7, #4]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a124 <vPortValidateInterruptPriority+0x7c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <vPortValidateInterruptPriority+0x80>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d90b      	bls.n	800a10e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	603b      	str	r3, [r7, #0]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <vPortValidateInterruptPriority+0x62>
	}
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	e000e3f0 	.word	0xe000e3f0
 800a120:	20001150 	.word	0x20001150
 800a124:	e000ed0c 	.word	0xe000ed0c
 800a128:	20001154 	.word	0x20001154

0800a12c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08a      	sub	sp, #40	@ 0x28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a134:	2300      	movs	r3, #0
 800a136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a138:	f7fe fb92 	bl	8008860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a13c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2b0 <pvPortMalloc+0x184>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a144:	f000 f924 	bl	800a390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a148:	4b5a      	ldr	r3, [pc, #360]	@ (800a2b4 <pvPortMalloc+0x188>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4013      	ands	r3, r2
 800a150:	2b00      	cmp	r3, #0
 800a152:	f040 8095 	bne.w	800a280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01e      	beq.n	800a19a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a15c:	2208      	movs	r2, #8
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4413      	add	r3, r2
 800a162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d015      	beq.n	800a19a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f023 0307 	bic.w	r3, r3, #7
 800a174:	3308      	adds	r3, #8
 800a176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f003 0307 	and.w	r3, r3, #7
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <pvPortMalloc+0x6e>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	617b      	str	r3, [r7, #20]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d06f      	beq.n	800a280 <pvPortMalloc+0x154>
 800a1a0:	4b45      	ldr	r3, [pc, #276]	@ (800a2b8 <pvPortMalloc+0x18c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d86a      	bhi.n	800a280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1aa:	4b44      	ldr	r3, [pc, #272]	@ (800a2bc <pvPortMalloc+0x190>)
 800a1ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1ae:	4b43      	ldr	r3, [pc, #268]	@ (800a2bc <pvPortMalloc+0x190>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1b4:	e004      	b.n	800a1c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d903      	bls.n	800a1d2 <pvPortMalloc+0xa6>
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1f1      	bne.n	800a1b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1d2:	4b37      	ldr	r3, [pc, #220]	@ (800a2b0 <pvPortMalloc+0x184>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d051      	beq.n	800a280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	4413      	add	r3, r2
 800a1e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	1ad2      	subs	r2, r2, r3
 800a1f6:	2308      	movs	r3, #8
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d920      	bls.n	800a240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4413      	add	r3, r2
 800a204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <pvPortMalloc+0xfc>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	613b      	str	r3, [r7, #16]
}
 800a222:	bf00      	nop
 800a224:	bf00      	nop
 800a226:	e7fd      	b.n	800a224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	1ad2      	subs	r2, r2, r3
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a23a:	69b8      	ldr	r0, [r7, #24]
 800a23c:	f000 f90a 	bl	800a454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a240:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b8 <pvPortMalloc+0x18c>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2b8 <pvPortMalloc+0x18c>)
 800a24c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a24e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b8 <pvPortMalloc+0x18c>)
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4b1b      	ldr	r3, [pc, #108]	@ (800a2c0 <pvPortMalloc+0x194>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d203      	bcs.n	800a262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a25a:	4b17      	ldr	r3, [pc, #92]	@ (800a2b8 <pvPortMalloc+0x18c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a18      	ldr	r2, [pc, #96]	@ (800a2c0 <pvPortMalloc+0x194>)
 800a260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4b13      	ldr	r3, [pc, #76]	@ (800a2b4 <pvPortMalloc+0x188>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a276:	4b13      	ldr	r3, [pc, #76]	@ (800a2c4 <pvPortMalloc+0x198>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	4a11      	ldr	r2, [pc, #68]	@ (800a2c4 <pvPortMalloc+0x198>)
 800a27e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a280:	f7fe fafc 	bl	800887c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00b      	beq.n	800a2a6 <pvPortMalloc+0x17a>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	60fb      	str	r3, [r7, #12]
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	e7fd      	b.n	800a2a2 <pvPortMalloc+0x176>
	return pvReturn;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3728      	adds	r7, #40	@ 0x28
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20001d18 	.word	0x20001d18
 800a2b4:	20001d2c 	.word	0x20001d2c
 800a2b8:	20001d1c 	.word	0x20001d1c
 800a2bc:	20001d10 	.word	0x20001d10
 800a2c0:	20001d20 	.word	0x20001d20
 800a2c4:	20001d24 	.word	0x20001d24

0800a2c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04f      	beq.n	800a37a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2da:	2308      	movs	r3, #8
 800a2dc:	425b      	negs	r3, r3
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	4b25      	ldr	r3, [pc, #148]	@ (800a384 <vPortFree+0xbc>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <vPortFree+0x46>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60fb      	str	r3, [r7, #12]
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00b      	beq.n	800a32e <vPortFree+0x66>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60bb      	str	r3, [r7, #8]
}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	e7fd      	b.n	800a32a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	4b14      	ldr	r3, [pc, #80]	@ (800a384 <vPortFree+0xbc>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4013      	ands	r3, r2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01e      	beq.n	800a37a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d11a      	bne.n	800a37a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	4b0e      	ldr	r3, [pc, #56]	@ (800a384 <vPortFree+0xbc>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	43db      	mvns	r3, r3
 800a34e:	401a      	ands	r2, r3
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a354:	f7fe fa84 	bl	8008860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	4b0a      	ldr	r3, [pc, #40]	@ (800a388 <vPortFree+0xc0>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4413      	add	r3, r2
 800a362:	4a09      	ldr	r2, [pc, #36]	@ (800a388 <vPortFree+0xc0>)
 800a364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a366:	6938      	ldr	r0, [r7, #16]
 800a368:	f000 f874 	bl	800a454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a36c:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <vPortFree+0xc4>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3301      	adds	r3, #1
 800a372:	4a06      	ldr	r2, [pc, #24]	@ (800a38c <vPortFree+0xc4>)
 800a374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a376:	f7fe fa81 	bl	800887c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a37a:	bf00      	nop
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20001d2c 	.word	0x20001d2c
 800a388:	20001d1c 	.word	0x20001d1c
 800a38c:	20001d28 	.word	0x20001d28

0800a390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a396:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a39a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a39c:	4b27      	ldr	r3, [pc, #156]	@ (800a43c <prvHeapInit+0xac>)
 800a39e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00c      	beq.n	800a3c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3307      	adds	r3, #7
 800a3ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 0307 	bic.w	r3, r3, #7
 800a3b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	4a1f      	ldr	r2, [pc, #124]	@ (800a43c <prvHeapInit+0xac>)
 800a3c0:	4413      	add	r3, r2
 800a3c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a440 <prvHeapInit+0xb0>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a440 <prvHeapInit+0xb0>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	4413      	add	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3dc:	2208      	movs	r2, #8
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1a9b      	subs	r3, r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f023 0307 	bic.w	r3, r3, #7
 800a3ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a15      	ldr	r2, [pc, #84]	@ (800a444 <prvHeapInit+0xb4>)
 800a3f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3f2:	4b14      	ldr	r3, [pc, #80]	@ (800a444 <prvHeapInit+0xb4>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3fa:	4b12      	ldr	r3, [pc, #72]	@ (800a444 <prvHeapInit+0xb4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	1ad2      	subs	r2, r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a410:	4b0c      	ldr	r3, [pc, #48]	@ (800a444 <prvHeapInit+0xb4>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	4a0a      	ldr	r2, [pc, #40]	@ (800a448 <prvHeapInit+0xb8>)
 800a41e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	4a09      	ldr	r2, [pc, #36]	@ (800a44c <prvHeapInit+0xbc>)
 800a426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a428:	4b09      	ldr	r3, [pc, #36]	@ (800a450 <prvHeapInit+0xc0>)
 800a42a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a42e:	601a      	str	r2, [r3, #0]
}
 800a430:	bf00      	nop
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20001158 	.word	0x20001158
 800a440:	20001d10 	.word	0x20001d10
 800a444:	20001d18 	.word	0x20001d18
 800a448:	20001d20 	.word	0x20001d20
 800a44c:	20001d1c 	.word	0x20001d1c
 800a450:	20001d2c 	.word	0x20001d2c

0800a454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a45c:	4b28      	ldr	r3, [pc, #160]	@ (800a500 <prvInsertBlockIntoFreeList+0xac>)
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e002      	b.n	800a468 <prvInsertBlockIntoFreeList+0x14>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d8f7      	bhi.n	800a462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d108      	bne.n	800a496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	441a      	add	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	441a      	add	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d118      	bne.n	800a4dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4b15      	ldr	r3, [pc, #84]	@ (800a504 <prvInsertBlockIntoFreeList+0xb0>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d00d      	beq.n	800a4d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	441a      	add	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	e008      	b.n	800a4e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a504 <prvInsertBlockIntoFreeList+0xb0>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	e003      	b.n	800a4e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d002      	beq.n	800a4f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20001d10 	.word	0x20001d10
 800a504:	20001d18 	.word	0x20001d18

0800a508 <calloc>:
 800a508:	4b02      	ldr	r3, [pc, #8]	@ (800a514 <calloc+0xc>)
 800a50a:	460a      	mov	r2, r1
 800a50c:	4601      	mov	r1, r0
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	f000 b802 	b.w	800a518 <_calloc_r>
 800a514:	20000100 	.word	0x20000100

0800a518 <_calloc_r>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	fba1 5402 	umull	r5, r4, r1, r2
 800a51e:	b93c      	cbnz	r4, 800a530 <_calloc_r+0x18>
 800a520:	4629      	mov	r1, r5
 800a522:	f000 f837 	bl	800a594 <_malloc_r>
 800a526:	4606      	mov	r6, r0
 800a528:	b928      	cbnz	r0, 800a536 <_calloc_r+0x1e>
 800a52a:	2600      	movs	r6, #0
 800a52c:	4630      	mov	r0, r6
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	220c      	movs	r2, #12
 800a532:	6002      	str	r2, [r0, #0]
 800a534:	e7f9      	b.n	800a52a <_calloc_r+0x12>
 800a536:	462a      	mov	r2, r5
 800a538:	4621      	mov	r1, r4
 800a53a:	f000 fa60 	bl	800a9fe <memset>
 800a53e:	e7f5      	b.n	800a52c <_calloc_r+0x14>

0800a540 <malloc>:
 800a540:	4b02      	ldr	r3, [pc, #8]	@ (800a54c <malloc+0xc>)
 800a542:	4601      	mov	r1, r0
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	f000 b825 	b.w	800a594 <_malloc_r>
 800a54a:	bf00      	nop
 800a54c:	20000100 	.word	0x20000100

0800a550 <sbrk_aligned>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	4e0f      	ldr	r6, [pc, #60]	@ (800a590 <sbrk_aligned+0x40>)
 800a554:	460c      	mov	r4, r1
 800a556:	6831      	ldr	r1, [r6, #0]
 800a558:	4605      	mov	r5, r0
 800a55a:	b911      	cbnz	r1, 800a562 <sbrk_aligned+0x12>
 800a55c:	f000 fae8 	bl	800ab30 <_sbrk_r>
 800a560:	6030      	str	r0, [r6, #0]
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f000 fae3 	bl	800ab30 <_sbrk_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	d103      	bne.n	800a576 <sbrk_aligned+0x26>
 800a56e:	f04f 34ff 	mov.w	r4, #4294967295
 800a572:	4620      	mov	r0, r4
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	1cc4      	adds	r4, r0, #3
 800a578:	f024 0403 	bic.w	r4, r4, #3
 800a57c:	42a0      	cmp	r0, r4
 800a57e:	d0f8      	beq.n	800a572 <sbrk_aligned+0x22>
 800a580:	1a21      	subs	r1, r4, r0
 800a582:	4628      	mov	r0, r5
 800a584:	f000 fad4 	bl	800ab30 <_sbrk_r>
 800a588:	3001      	adds	r0, #1
 800a58a:	d1f2      	bne.n	800a572 <sbrk_aligned+0x22>
 800a58c:	e7ef      	b.n	800a56e <sbrk_aligned+0x1e>
 800a58e:	bf00      	nop
 800a590:	20001d30 	.word	0x20001d30

0800a594 <_malloc_r>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	1ccd      	adds	r5, r1, #3
 800a59a:	f025 0503 	bic.w	r5, r5, #3
 800a59e:	3508      	adds	r5, #8
 800a5a0:	2d0c      	cmp	r5, #12
 800a5a2:	bf38      	it	cc
 800a5a4:	250c      	movcc	r5, #12
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	db01      	blt.n	800a5b0 <_malloc_r+0x1c>
 800a5ac:	42a9      	cmp	r1, r5
 800a5ae:	d904      	bls.n	800a5ba <_malloc_r+0x26>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	6033      	str	r3, [r6, #0]
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a690 <_malloc_r+0xfc>
 800a5be:	f000 f869 	bl	800a694 <__malloc_lock>
 800a5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c6:	461c      	mov	r4, r3
 800a5c8:	bb44      	cbnz	r4, 800a61c <_malloc_r+0x88>
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ffbf 	bl	800a550 <sbrk_aligned>
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	d158      	bne.n	800a68a <_malloc_r+0xf6>
 800a5d8:	f8d8 4000 	ldr.w	r4, [r8]
 800a5dc:	4627      	mov	r7, r4
 800a5de:	2f00      	cmp	r7, #0
 800a5e0:	d143      	bne.n	800a66a <_malloc_r+0xd6>
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	d04b      	beq.n	800a67e <_malloc_r+0xea>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	eb04 0903 	add.w	r9, r4, r3
 800a5f0:	f000 fa9e 	bl	800ab30 <_sbrk_r>
 800a5f4:	4581      	cmp	r9, r0
 800a5f6:	d142      	bne.n	800a67e <_malloc_r+0xea>
 800a5f8:	6821      	ldr	r1, [r4, #0]
 800a5fa:	1a6d      	subs	r5, r5, r1
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4630      	mov	r0, r6
 800a600:	f7ff ffa6 	bl	800a550 <sbrk_aligned>
 800a604:	3001      	adds	r0, #1
 800a606:	d03a      	beq.n	800a67e <_malloc_r+0xea>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	442b      	add	r3, r5
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	f8d8 3000 	ldr.w	r3, [r8]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	bb62      	cbnz	r2, 800a670 <_malloc_r+0xdc>
 800a616:	f8c8 7000 	str.w	r7, [r8]
 800a61a:	e00f      	b.n	800a63c <_malloc_r+0xa8>
 800a61c:	6822      	ldr	r2, [r4, #0]
 800a61e:	1b52      	subs	r2, r2, r5
 800a620:	d420      	bmi.n	800a664 <_malloc_r+0xd0>
 800a622:	2a0b      	cmp	r2, #11
 800a624:	d917      	bls.n	800a656 <_malloc_r+0xc2>
 800a626:	1961      	adds	r1, r4, r5
 800a628:	42a3      	cmp	r3, r4
 800a62a:	6025      	str	r5, [r4, #0]
 800a62c:	bf18      	it	ne
 800a62e:	6059      	strne	r1, [r3, #4]
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	bf08      	it	eq
 800a634:	f8c8 1000 	streq.w	r1, [r8]
 800a638:	5162      	str	r2, [r4, r5]
 800a63a:	604b      	str	r3, [r1, #4]
 800a63c:	4630      	mov	r0, r6
 800a63e:	f000 f82f 	bl	800a6a0 <__malloc_unlock>
 800a642:	f104 000b 	add.w	r0, r4, #11
 800a646:	1d23      	adds	r3, r4, #4
 800a648:	f020 0007 	bic.w	r0, r0, #7
 800a64c:	1ac2      	subs	r2, r0, r3
 800a64e:	bf1c      	itt	ne
 800a650:	1a1b      	subne	r3, r3, r0
 800a652:	50a3      	strne	r3, [r4, r2]
 800a654:	e7af      	b.n	800a5b6 <_malloc_r+0x22>
 800a656:	6862      	ldr	r2, [r4, #4]
 800a658:	42a3      	cmp	r3, r4
 800a65a:	bf0c      	ite	eq
 800a65c:	f8c8 2000 	streq.w	r2, [r8]
 800a660:	605a      	strne	r2, [r3, #4]
 800a662:	e7eb      	b.n	800a63c <_malloc_r+0xa8>
 800a664:	4623      	mov	r3, r4
 800a666:	6864      	ldr	r4, [r4, #4]
 800a668:	e7ae      	b.n	800a5c8 <_malloc_r+0x34>
 800a66a:	463c      	mov	r4, r7
 800a66c:	687f      	ldr	r7, [r7, #4]
 800a66e:	e7b6      	b.n	800a5de <_malloc_r+0x4a>
 800a670:	461a      	mov	r2, r3
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	42a3      	cmp	r3, r4
 800a676:	d1fb      	bne.n	800a670 <_malloc_r+0xdc>
 800a678:	2300      	movs	r3, #0
 800a67a:	6053      	str	r3, [r2, #4]
 800a67c:	e7de      	b.n	800a63c <_malloc_r+0xa8>
 800a67e:	230c      	movs	r3, #12
 800a680:	6033      	str	r3, [r6, #0]
 800a682:	4630      	mov	r0, r6
 800a684:	f000 f80c 	bl	800a6a0 <__malloc_unlock>
 800a688:	e794      	b.n	800a5b4 <_malloc_r+0x20>
 800a68a:	6005      	str	r5, [r0, #0]
 800a68c:	e7d6      	b.n	800a63c <_malloc_r+0xa8>
 800a68e:	bf00      	nop
 800a690:	20001d34 	.word	0x20001d34

0800a694 <__malloc_lock>:
 800a694:	4801      	ldr	r0, [pc, #4]	@ (800a69c <__malloc_lock+0x8>)
 800a696:	f000 ba98 	b.w	800abca <__retarget_lock_acquire_recursive>
 800a69a:	bf00      	nop
 800a69c:	20001e78 	.word	0x20001e78

0800a6a0 <__malloc_unlock>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	@ (800a6a8 <__malloc_unlock+0x8>)
 800a6a2:	f000 ba93 	b.w	800abcc <__retarget_lock_release_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	20001e78 	.word	0x20001e78

0800a6ac <_strtol_l.constprop.0>:
 800a6ac:	2b24      	cmp	r3, #36	@ 0x24
 800a6ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b2:	4686      	mov	lr, r0
 800a6b4:	4690      	mov	r8, r2
 800a6b6:	d801      	bhi.n	800a6bc <_strtol_l.constprop.0+0x10>
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d106      	bne.n	800a6ca <_strtol_l.constprop.0+0x1e>
 800a6bc:	f000 fa5a 	bl	800ab74 <__errno>
 800a6c0:	2316      	movs	r3, #22
 800a6c2:	6003      	str	r3, [r0, #0]
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ca:	4834      	ldr	r0, [pc, #208]	@ (800a79c <_strtol_l.constprop.0+0xf0>)
 800a6cc:	460d      	mov	r5, r1
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6d4:	5d06      	ldrb	r6, [r0, r4]
 800a6d6:	f016 0608 	ands.w	r6, r6, #8
 800a6da:	d1f8      	bne.n	800a6ce <_strtol_l.constprop.0+0x22>
 800a6dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6de:	d12d      	bne.n	800a73c <_strtol_l.constprop.0+0x90>
 800a6e0:	782c      	ldrb	r4, [r5, #0]
 800a6e2:	2601      	movs	r6, #1
 800a6e4:	1c95      	adds	r5, r2, #2
 800a6e6:	f033 0210 	bics.w	r2, r3, #16
 800a6ea:	d109      	bne.n	800a700 <_strtol_l.constprop.0+0x54>
 800a6ec:	2c30      	cmp	r4, #48	@ 0x30
 800a6ee:	d12a      	bne.n	800a746 <_strtol_l.constprop.0+0x9a>
 800a6f0:	782a      	ldrb	r2, [r5, #0]
 800a6f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6f6:	2a58      	cmp	r2, #88	@ 0x58
 800a6f8:	d125      	bne.n	800a746 <_strtol_l.constprop.0+0x9a>
 800a6fa:	786c      	ldrb	r4, [r5, #1]
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	3502      	adds	r5, #2
 800a700:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a704:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a708:	2200      	movs	r2, #0
 800a70a:	fbbc f9f3 	udiv	r9, ip, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	fb03 ca19 	mls	sl, r3, r9, ip
 800a714:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a718:	2f09      	cmp	r7, #9
 800a71a:	d81b      	bhi.n	800a754 <_strtol_l.constprop.0+0xa8>
 800a71c:	463c      	mov	r4, r7
 800a71e:	42a3      	cmp	r3, r4
 800a720:	dd27      	ble.n	800a772 <_strtol_l.constprop.0+0xc6>
 800a722:	1c57      	adds	r7, r2, #1
 800a724:	d007      	beq.n	800a736 <_strtol_l.constprop.0+0x8a>
 800a726:	4581      	cmp	r9, r0
 800a728:	d320      	bcc.n	800a76c <_strtol_l.constprop.0+0xc0>
 800a72a:	d101      	bne.n	800a730 <_strtol_l.constprop.0+0x84>
 800a72c:	45a2      	cmp	sl, r4
 800a72e:	db1d      	blt.n	800a76c <_strtol_l.constprop.0+0xc0>
 800a730:	fb00 4003 	mla	r0, r0, r3, r4
 800a734:	2201      	movs	r2, #1
 800a736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a73a:	e7eb      	b.n	800a714 <_strtol_l.constprop.0+0x68>
 800a73c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a73e:	bf04      	itt	eq
 800a740:	782c      	ldrbeq	r4, [r5, #0]
 800a742:	1c95      	addeq	r5, r2, #2
 800a744:	e7cf      	b.n	800a6e6 <_strtol_l.constprop.0+0x3a>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1da      	bne.n	800a700 <_strtol_l.constprop.0+0x54>
 800a74a:	2c30      	cmp	r4, #48	@ 0x30
 800a74c:	bf0c      	ite	eq
 800a74e:	2308      	moveq	r3, #8
 800a750:	230a      	movne	r3, #10
 800a752:	e7d5      	b.n	800a700 <_strtol_l.constprop.0+0x54>
 800a754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a758:	2f19      	cmp	r7, #25
 800a75a:	d801      	bhi.n	800a760 <_strtol_l.constprop.0+0xb4>
 800a75c:	3c37      	subs	r4, #55	@ 0x37
 800a75e:	e7de      	b.n	800a71e <_strtol_l.constprop.0+0x72>
 800a760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a764:	2f19      	cmp	r7, #25
 800a766:	d804      	bhi.n	800a772 <_strtol_l.constprop.0+0xc6>
 800a768:	3c57      	subs	r4, #87	@ 0x57
 800a76a:	e7d8      	b.n	800a71e <_strtol_l.constprop.0+0x72>
 800a76c:	f04f 32ff 	mov.w	r2, #4294967295
 800a770:	e7e1      	b.n	800a736 <_strtol_l.constprop.0+0x8a>
 800a772:	1c53      	adds	r3, r2, #1
 800a774:	d108      	bne.n	800a788 <_strtol_l.constprop.0+0xdc>
 800a776:	2322      	movs	r3, #34	@ 0x22
 800a778:	f8ce 3000 	str.w	r3, [lr]
 800a77c:	4660      	mov	r0, ip
 800a77e:	f1b8 0f00 	cmp.w	r8, #0
 800a782:	d0a0      	beq.n	800a6c6 <_strtol_l.constprop.0+0x1a>
 800a784:	1e69      	subs	r1, r5, #1
 800a786:	e006      	b.n	800a796 <_strtol_l.constprop.0+0xea>
 800a788:	b106      	cbz	r6, 800a78c <_strtol_l.constprop.0+0xe0>
 800a78a:	4240      	negs	r0, r0
 800a78c:	f1b8 0f00 	cmp.w	r8, #0
 800a790:	d099      	beq.n	800a6c6 <_strtol_l.constprop.0+0x1a>
 800a792:	2a00      	cmp	r2, #0
 800a794:	d1f6      	bne.n	800a784 <_strtol_l.constprop.0+0xd8>
 800a796:	f8c8 1000 	str.w	r1, [r8]
 800a79a:	e794      	b.n	800a6c6 <_strtol_l.constprop.0+0x1a>
 800a79c:	0800bcf5 	.word	0x0800bcf5

0800a7a0 <strtol>:
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	4601      	mov	r1, r0
 800a7a6:	4802      	ldr	r0, [pc, #8]	@ (800a7b0 <strtol+0x10>)
 800a7a8:	6800      	ldr	r0, [r0, #0]
 800a7aa:	f7ff bf7f 	b.w	800a6ac <_strtol_l.constprop.0>
 800a7ae:	bf00      	nop
 800a7b0:	20000100 	.word	0x20000100

0800a7b4 <std>:
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a7be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7c2:	6083      	str	r3, [r0, #8]
 800a7c4:	8181      	strh	r1, [r0, #12]
 800a7c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7c8:	81c2      	strh	r2, [r0, #14]
 800a7ca:	6183      	str	r3, [r0, #24]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	2208      	movs	r2, #8
 800a7d0:	305c      	adds	r0, #92	@ 0x5c
 800a7d2:	f000 f914 	bl	800a9fe <memset>
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <std+0x58>)
 800a7d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <std+0x5c>)
 800a7dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7de:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <std+0x60>)
 800a7e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a818 <std+0x64>)
 800a7e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a81c <std+0x68>)
 800a7e8:	6224      	str	r4, [r4, #32]
 800a7ea:	429c      	cmp	r4, r3
 800a7ec:	d006      	beq.n	800a7fc <std+0x48>
 800a7ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7f2:	4294      	cmp	r4, r2
 800a7f4:	d002      	beq.n	800a7fc <std+0x48>
 800a7f6:	33d0      	adds	r3, #208	@ 0xd0
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	d105      	bne.n	800a808 <std+0x54>
 800a7fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a804:	f000 b9e0 	b.w	800abc8 <__retarget_lock_init_recursive>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop
 800a80c:	0800a979 	.word	0x0800a979
 800a810:	0800a99b 	.word	0x0800a99b
 800a814:	0800a9d3 	.word	0x0800a9d3
 800a818:	0800a9f7 	.word	0x0800a9f7
 800a81c:	20001d38 	.word	0x20001d38

0800a820 <stdio_exit_handler>:
 800a820:	4a02      	ldr	r2, [pc, #8]	@ (800a82c <stdio_exit_handler+0xc>)
 800a822:	4903      	ldr	r1, [pc, #12]	@ (800a830 <stdio_exit_handler+0x10>)
 800a824:	4803      	ldr	r0, [pc, #12]	@ (800a834 <stdio_exit_handler+0x14>)
 800a826:	f000 b869 	b.w	800a8fc <_fwalk_sglue>
 800a82a:	bf00      	nop
 800a82c:	200000f4 	.word	0x200000f4
 800a830:	0800b391 	.word	0x0800b391
 800a834:	20000104 	.word	0x20000104

0800a838 <cleanup_stdio>:
 800a838:	6841      	ldr	r1, [r0, #4]
 800a83a:	4b0c      	ldr	r3, [pc, #48]	@ (800a86c <cleanup_stdio+0x34>)
 800a83c:	4299      	cmp	r1, r3
 800a83e:	b510      	push	{r4, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	d001      	beq.n	800a848 <cleanup_stdio+0x10>
 800a844:	f000 fda4 	bl	800b390 <_fflush_r>
 800a848:	68a1      	ldr	r1, [r4, #8]
 800a84a:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <cleanup_stdio+0x38>)
 800a84c:	4299      	cmp	r1, r3
 800a84e:	d002      	beq.n	800a856 <cleanup_stdio+0x1e>
 800a850:	4620      	mov	r0, r4
 800a852:	f000 fd9d 	bl	800b390 <_fflush_r>
 800a856:	68e1      	ldr	r1, [r4, #12]
 800a858:	4b06      	ldr	r3, [pc, #24]	@ (800a874 <cleanup_stdio+0x3c>)
 800a85a:	4299      	cmp	r1, r3
 800a85c:	d004      	beq.n	800a868 <cleanup_stdio+0x30>
 800a85e:	4620      	mov	r0, r4
 800a860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a864:	f000 bd94 	b.w	800b390 <_fflush_r>
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	bf00      	nop
 800a86c:	20001d38 	.word	0x20001d38
 800a870:	20001da0 	.word	0x20001da0
 800a874:	20001e08 	.word	0x20001e08

0800a878 <global_stdio_init.part.0>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a8 <global_stdio_init.part.0+0x30>)
 800a87c:	4c0b      	ldr	r4, [pc, #44]	@ (800a8ac <global_stdio_init.part.0+0x34>)
 800a87e:	4a0c      	ldr	r2, [pc, #48]	@ (800a8b0 <global_stdio_init.part.0+0x38>)
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	4620      	mov	r0, r4
 800a884:	2200      	movs	r2, #0
 800a886:	2104      	movs	r1, #4
 800a888:	f7ff ff94 	bl	800a7b4 <std>
 800a88c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a890:	2201      	movs	r2, #1
 800a892:	2109      	movs	r1, #9
 800a894:	f7ff ff8e 	bl	800a7b4 <std>
 800a898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a89c:	2202      	movs	r2, #2
 800a89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a2:	2112      	movs	r1, #18
 800a8a4:	f7ff bf86 	b.w	800a7b4 <std>
 800a8a8:	20001e70 	.word	0x20001e70
 800a8ac:	20001d38 	.word	0x20001d38
 800a8b0:	0800a821 	.word	0x0800a821

0800a8b4 <__sfp_lock_acquire>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	@ (800a8bc <__sfp_lock_acquire+0x8>)
 800a8b6:	f000 b988 	b.w	800abca <__retarget_lock_acquire_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20001e79 	.word	0x20001e79

0800a8c0 <__sfp_lock_release>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	@ (800a8c8 <__sfp_lock_release+0x8>)
 800a8c2:	f000 b983 	b.w	800abcc <__retarget_lock_release_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20001e79 	.word	0x20001e79

0800a8cc <__sinit>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	f7ff fff0 	bl	800a8b4 <__sfp_lock_acquire>
 800a8d4:	6a23      	ldr	r3, [r4, #32]
 800a8d6:	b11b      	cbz	r3, 800a8e0 <__sinit+0x14>
 800a8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8dc:	f7ff bff0 	b.w	800a8c0 <__sfp_lock_release>
 800a8e0:	4b04      	ldr	r3, [pc, #16]	@ (800a8f4 <__sinit+0x28>)
 800a8e2:	6223      	str	r3, [r4, #32]
 800a8e4:	4b04      	ldr	r3, [pc, #16]	@ (800a8f8 <__sinit+0x2c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f5      	bne.n	800a8d8 <__sinit+0xc>
 800a8ec:	f7ff ffc4 	bl	800a878 <global_stdio_init.part.0>
 800a8f0:	e7f2      	b.n	800a8d8 <__sinit+0xc>
 800a8f2:	bf00      	nop
 800a8f4:	0800a839 	.word	0x0800a839
 800a8f8:	20001e70 	.word	0x20001e70

0800a8fc <_fwalk_sglue>:
 800a8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a900:	4607      	mov	r7, r0
 800a902:	4688      	mov	r8, r1
 800a904:	4614      	mov	r4, r2
 800a906:	2600      	movs	r6, #0
 800a908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a90c:	f1b9 0901 	subs.w	r9, r9, #1
 800a910:	d505      	bpl.n	800a91e <_fwalk_sglue+0x22>
 800a912:	6824      	ldr	r4, [r4, #0]
 800a914:	2c00      	cmp	r4, #0
 800a916:	d1f7      	bne.n	800a908 <_fwalk_sglue+0xc>
 800a918:	4630      	mov	r0, r6
 800a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d907      	bls.n	800a934 <_fwalk_sglue+0x38>
 800a924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a928:	3301      	adds	r3, #1
 800a92a:	d003      	beq.n	800a934 <_fwalk_sglue+0x38>
 800a92c:	4629      	mov	r1, r5
 800a92e:	4638      	mov	r0, r7
 800a930:	47c0      	blx	r8
 800a932:	4306      	orrs	r6, r0
 800a934:	3568      	adds	r5, #104	@ 0x68
 800a936:	e7e9      	b.n	800a90c <_fwalk_sglue+0x10>

0800a938 <siprintf>:
 800a938:	b40e      	push	{r1, r2, r3}
 800a93a:	b500      	push	{lr}
 800a93c:	b09c      	sub	sp, #112	@ 0x70
 800a93e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a940:	9002      	str	r0, [sp, #8]
 800a942:	9006      	str	r0, [sp, #24]
 800a944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a948:	4809      	ldr	r0, [pc, #36]	@ (800a970 <siprintf+0x38>)
 800a94a:	9107      	str	r1, [sp, #28]
 800a94c:	9104      	str	r1, [sp, #16]
 800a94e:	4909      	ldr	r1, [pc, #36]	@ (800a974 <siprintf+0x3c>)
 800a950:	f853 2b04 	ldr.w	r2, [r3], #4
 800a954:	9105      	str	r1, [sp, #20]
 800a956:	6800      	ldr	r0, [r0, #0]
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	a902      	add	r1, sp, #8
 800a95c:	f000 fa0a 	bl	800ad74 <_svfiprintf_r>
 800a960:	9b02      	ldr	r3, [sp, #8]
 800a962:	2200      	movs	r2, #0
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	b01c      	add	sp, #112	@ 0x70
 800a968:	f85d eb04 	ldr.w	lr, [sp], #4
 800a96c:	b003      	add	sp, #12
 800a96e:	4770      	bx	lr
 800a970:	20000100 	.word	0x20000100
 800a974:	ffff0208 	.word	0xffff0208

0800a978 <__sread>:
 800a978:	b510      	push	{r4, lr}
 800a97a:	460c      	mov	r4, r1
 800a97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a980:	f000 f8c4 	bl	800ab0c <_read_r>
 800a984:	2800      	cmp	r0, #0
 800a986:	bfab      	itete	ge
 800a988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a98a:	89a3      	ldrhlt	r3, [r4, #12]
 800a98c:	181b      	addge	r3, r3, r0
 800a98e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a992:	bfac      	ite	ge
 800a994:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a996:	81a3      	strhlt	r3, [r4, #12]
 800a998:	bd10      	pop	{r4, pc}

0800a99a <__swrite>:
 800a99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99e:	461f      	mov	r7, r3
 800a9a0:	898b      	ldrh	r3, [r1, #12]
 800a9a2:	05db      	lsls	r3, r3, #23
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	4616      	mov	r6, r2
 800a9aa:	d505      	bpl.n	800a9b8 <__swrite+0x1e>
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f000 f898 	bl	800aae8 <_lseek_r>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	4632      	mov	r2, r6
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ce:	f000 b8bf 	b.w	800ab50 <_write_r>

0800a9d2 <__sseek>:
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9da:	f000 f885 	bl	800aae8 <_lseek_r>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	bf15      	itete	ne
 800a9e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9ee:	81a3      	strheq	r3, [r4, #12]
 800a9f0:	bf18      	it	ne
 800a9f2:	81a3      	strhne	r3, [r4, #12]
 800a9f4:	bd10      	pop	{r4, pc}

0800a9f6 <__sclose>:
 800a9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fa:	f000 b865 	b.w	800aac8 <_close_r>

0800a9fe <memset>:
 800a9fe:	4402      	add	r2, r0
 800aa00:	4603      	mov	r3, r0
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d100      	bne.n	800aa08 <memset+0xa>
 800aa06:	4770      	bx	lr
 800aa08:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0c:	e7f9      	b.n	800aa02 <memset+0x4>
	...

0800aa10 <strtok>:
 800aa10:	4b16      	ldr	r3, [pc, #88]	@ (800aa6c <strtok+0x5c>)
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	681f      	ldr	r7, [r3, #0]
 800aa18:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	460e      	mov	r6, r1
 800aa1e:	b9ec      	cbnz	r4, 800aa5c <strtok+0x4c>
 800aa20:	2050      	movs	r0, #80	@ 0x50
 800aa22:	f7ff fd8d 	bl	800a540 <malloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	6478      	str	r0, [r7, #68]	@ 0x44
 800aa2a:	b920      	cbnz	r0, 800aa36 <strtok+0x26>
 800aa2c:	4b10      	ldr	r3, [pc, #64]	@ (800aa70 <strtok+0x60>)
 800aa2e:	4811      	ldr	r0, [pc, #68]	@ (800aa74 <strtok+0x64>)
 800aa30:	215b      	movs	r1, #91	@ 0x5b
 800aa32:	f000 f8db 	bl	800abec <__assert_func>
 800aa36:	e9c0 4400 	strd	r4, r4, [r0]
 800aa3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aa3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aa42:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aa46:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aa4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800aa4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800aa52:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800aa56:	6184      	str	r4, [r0, #24]
 800aa58:	7704      	strb	r4, [r0, #28]
 800aa5a:	6244      	str	r4, [r0, #36]	@ 0x24
 800aa5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa5e:	4631      	mov	r1, r6
 800aa60:	4628      	mov	r0, r5
 800aa62:	2301      	movs	r3, #1
 800aa64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	f000 b806 	b.w	800aa78 <__strtok_r>
 800aa6c:	20000100 	.word	0x20000100
 800aa70:	0800bdf5 	.word	0x0800bdf5
 800aa74:	0800be0c 	.word	0x0800be0c

0800aa78 <__strtok_r>:
 800aa78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	b908      	cbnz	r0, 800aa82 <__strtok_r+0xa>
 800aa7e:	6814      	ldr	r4, [r2, #0]
 800aa80:	b144      	cbz	r4, 800aa94 <__strtok_r+0x1c>
 800aa82:	4620      	mov	r0, r4
 800aa84:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa88:	460f      	mov	r7, r1
 800aa8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa8e:	b91e      	cbnz	r6, 800aa98 <__strtok_r+0x20>
 800aa90:	b965      	cbnz	r5, 800aaac <__strtok_r+0x34>
 800aa92:	6015      	str	r5, [r2, #0]
 800aa94:	2000      	movs	r0, #0
 800aa96:	e005      	b.n	800aaa4 <__strtok_r+0x2c>
 800aa98:	42b5      	cmp	r5, r6
 800aa9a:	d1f6      	bne.n	800aa8a <__strtok_r+0x12>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1f0      	bne.n	800aa82 <__strtok_r+0xa>
 800aaa0:	6014      	str	r4, [r2, #0]
 800aaa2:	7003      	strb	r3, [r0, #0]
 800aaa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	e00c      	b.n	800aac4 <__strtok_r+0x4c>
 800aaaa:	b915      	cbnz	r5, 800aab2 <__strtok_r+0x3a>
 800aaac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aab0:	460e      	mov	r6, r1
 800aab2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aab6:	42ab      	cmp	r3, r5
 800aab8:	d1f7      	bne.n	800aaaa <__strtok_r+0x32>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0f3      	beq.n	800aaa6 <__strtok_r+0x2e>
 800aabe:	2300      	movs	r3, #0
 800aac0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aac4:	6014      	str	r4, [r2, #0]
 800aac6:	e7ed      	b.n	800aaa4 <__strtok_r+0x2c>

0800aac8 <_close_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_close_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f6 fce6 	bl	80014a4 <_close>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_close_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_close_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20001e74 	.word	0x20001e74

0800aae8 <_lseek_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	@ (800ab08 <_lseek_r+0x20>)
 800aaec:	4604      	mov	r4, r0
 800aaee:	4608      	mov	r0, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	602a      	str	r2, [r5, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7f6 fcfb 	bl	80014f2 <_lseek>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_lseek_r+0x1e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_lseek_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	20001e74 	.word	0x20001e74

0800ab0c <_read_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d07      	ldr	r5, [pc, #28]	@ (800ab2c <_read_r+0x20>)
 800ab10:	4604      	mov	r4, r0
 800ab12:	4608      	mov	r0, r1
 800ab14:	4611      	mov	r1, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	602a      	str	r2, [r5, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f6 fc89 	bl	8001432 <_read>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_read_r+0x1e>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_read_r+0x1e>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20001e74 	.word	0x20001e74

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	@ (800ab4c <_sbrk_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f6 fce6 	bl	800150c <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	20001e74 	.word	0x20001e74

0800ab50 <_write_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d07      	ldr	r5, [pc, #28]	@ (800ab70 <_write_r+0x20>)
 800ab54:	4604      	mov	r4, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f6 fc84 	bl	800146c <_write>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_write_r+0x1e>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_write_r+0x1e>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20001e74 	.word	0x20001e74

0800ab74 <__errno>:
 800ab74:	4b01      	ldr	r3, [pc, #4]	@ (800ab7c <__errno+0x8>)
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20000100 	.word	0x20000100

0800ab80 <__libc_init_array>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	4d0d      	ldr	r5, [pc, #52]	@ (800abb8 <__libc_init_array+0x38>)
 800ab84:	4c0d      	ldr	r4, [pc, #52]	@ (800abbc <__libc_init_array+0x3c>)
 800ab86:	1b64      	subs	r4, r4, r5
 800ab88:	10a4      	asrs	r4, r4, #2
 800ab8a:	2600      	movs	r6, #0
 800ab8c:	42a6      	cmp	r6, r4
 800ab8e:	d109      	bne.n	800aba4 <__libc_init_array+0x24>
 800ab90:	4d0b      	ldr	r5, [pc, #44]	@ (800abc0 <__libc_init_array+0x40>)
 800ab92:	4c0c      	ldr	r4, [pc, #48]	@ (800abc4 <__libc_init_array+0x44>)
 800ab94:	f000 ff2a 	bl	800b9ec <_init>
 800ab98:	1b64      	subs	r4, r4, r5
 800ab9a:	10a4      	asrs	r4, r4, #2
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	42a6      	cmp	r6, r4
 800aba0:	d105      	bne.n	800abae <__libc_init_array+0x2e>
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba8:	4798      	blx	r3
 800abaa:	3601      	adds	r6, #1
 800abac:	e7ee      	b.n	800ab8c <__libc_init_array+0xc>
 800abae:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb2:	4798      	blx	r3
 800abb4:	3601      	adds	r6, #1
 800abb6:	e7f2      	b.n	800ab9e <__libc_init_array+0x1e>
 800abb8:	0800bee0 	.word	0x0800bee0
 800abbc:	0800bee0 	.word	0x0800bee0
 800abc0:	0800bee0 	.word	0x0800bee0
 800abc4:	0800bee4 	.word	0x0800bee4

0800abc8 <__retarget_lock_init_recursive>:
 800abc8:	4770      	bx	lr

0800abca <__retarget_lock_acquire_recursive>:
 800abca:	4770      	bx	lr

0800abcc <__retarget_lock_release_recursive>:
 800abcc:	4770      	bx	lr

0800abce <memcpy>:
 800abce:	440a      	add	r2, r1
 800abd0:	4291      	cmp	r1, r2
 800abd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800abd6:	d100      	bne.n	800abda <memcpy+0xc>
 800abd8:	4770      	bx	lr
 800abda:	b510      	push	{r4, lr}
 800abdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abe4:	4291      	cmp	r1, r2
 800abe6:	d1f9      	bne.n	800abdc <memcpy+0xe>
 800abe8:	bd10      	pop	{r4, pc}
	...

0800abec <__assert_func>:
 800abec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abee:	4614      	mov	r4, r2
 800abf0:	461a      	mov	r2, r3
 800abf2:	4b09      	ldr	r3, [pc, #36]	@ (800ac18 <__assert_func+0x2c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4605      	mov	r5, r0
 800abf8:	68d8      	ldr	r0, [r3, #12]
 800abfa:	b954      	cbnz	r4, 800ac12 <__assert_func+0x26>
 800abfc:	4b07      	ldr	r3, [pc, #28]	@ (800ac1c <__assert_func+0x30>)
 800abfe:	461c      	mov	r4, r3
 800ac00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac04:	9100      	str	r1, [sp, #0]
 800ac06:	462b      	mov	r3, r5
 800ac08:	4905      	ldr	r1, [pc, #20]	@ (800ac20 <__assert_func+0x34>)
 800ac0a:	f000 fbe9 	bl	800b3e0 <fiprintf>
 800ac0e:	f000 fc13 	bl	800b438 <abort>
 800ac12:	4b04      	ldr	r3, [pc, #16]	@ (800ac24 <__assert_func+0x38>)
 800ac14:	e7f4      	b.n	800ac00 <__assert_func+0x14>
 800ac16:	bf00      	nop
 800ac18:	20000100 	.word	0x20000100
 800ac1c:	0800bea1 	.word	0x0800bea1
 800ac20:	0800be73 	.word	0x0800be73
 800ac24:	0800be66 	.word	0x0800be66

0800ac28 <_free_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	2900      	cmp	r1, #0
 800ac2e:	d041      	beq.n	800acb4 <_free_r+0x8c>
 800ac30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac34:	1f0c      	subs	r4, r1, #4
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfb8      	it	lt
 800ac3a:	18e4      	addlt	r4, r4, r3
 800ac3c:	f7ff fd2a 	bl	800a694 <__malloc_lock>
 800ac40:	4a1d      	ldr	r2, [pc, #116]	@ (800acb8 <_free_r+0x90>)
 800ac42:	6813      	ldr	r3, [r2, #0]
 800ac44:	b933      	cbnz	r3, 800ac54 <_free_r+0x2c>
 800ac46:	6063      	str	r3, [r4, #4]
 800ac48:	6014      	str	r4, [r2, #0]
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac50:	f7ff bd26 	b.w	800a6a0 <__malloc_unlock>
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	d908      	bls.n	800ac6a <_free_r+0x42>
 800ac58:	6820      	ldr	r0, [r4, #0]
 800ac5a:	1821      	adds	r1, r4, r0
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	bf01      	itttt	eq
 800ac60:	6819      	ldreq	r1, [r3, #0]
 800ac62:	685b      	ldreq	r3, [r3, #4]
 800ac64:	1809      	addeq	r1, r1, r0
 800ac66:	6021      	streq	r1, [r4, #0]
 800ac68:	e7ed      	b.n	800ac46 <_free_r+0x1e>
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	b10b      	cbz	r3, 800ac74 <_free_r+0x4c>
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	d9fa      	bls.n	800ac6a <_free_r+0x42>
 800ac74:	6811      	ldr	r1, [r2, #0]
 800ac76:	1850      	adds	r0, r2, r1
 800ac78:	42a0      	cmp	r0, r4
 800ac7a:	d10b      	bne.n	800ac94 <_free_r+0x6c>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	4401      	add	r1, r0
 800ac80:	1850      	adds	r0, r2, r1
 800ac82:	4283      	cmp	r3, r0
 800ac84:	6011      	str	r1, [r2, #0]
 800ac86:	d1e0      	bne.n	800ac4a <_free_r+0x22>
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	6053      	str	r3, [r2, #4]
 800ac8e:	4408      	add	r0, r1
 800ac90:	6010      	str	r0, [r2, #0]
 800ac92:	e7da      	b.n	800ac4a <_free_r+0x22>
 800ac94:	d902      	bls.n	800ac9c <_free_r+0x74>
 800ac96:	230c      	movs	r3, #12
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	e7d6      	b.n	800ac4a <_free_r+0x22>
 800ac9c:	6820      	ldr	r0, [r4, #0]
 800ac9e:	1821      	adds	r1, r4, r0
 800aca0:	428b      	cmp	r3, r1
 800aca2:	bf04      	itt	eq
 800aca4:	6819      	ldreq	r1, [r3, #0]
 800aca6:	685b      	ldreq	r3, [r3, #4]
 800aca8:	6063      	str	r3, [r4, #4]
 800acaa:	bf04      	itt	eq
 800acac:	1809      	addeq	r1, r1, r0
 800acae:	6021      	streq	r1, [r4, #0]
 800acb0:	6054      	str	r4, [r2, #4]
 800acb2:	e7ca      	b.n	800ac4a <_free_r+0x22>
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
 800acb6:	bf00      	nop
 800acb8:	20001d34 	.word	0x20001d34

0800acbc <__ssputs_r>:
 800acbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	688e      	ldr	r6, [r1, #8]
 800acc2:	461f      	mov	r7, r3
 800acc4:	42be      	cmp	r6, r7
 800acc6:	680b      	ldr	r3, [r1, #0]
 800acc8:	4682      	mov	sl, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4690      	mov	r8, r2
 800acce:	d82d      	bhi.n	800ad2c <__ssputs_r+0x70>
 800acd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acd8:	d026      	beq.n	800ad28 <__ssputs_r+0x6c>
 800acda:	6965      	ldr	r5, [r4, #20]
 800acdc:	6909      	ldr	r1, [r1, #16]
 800acde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace2:	eba3 0901 	sub.w	r9, r3, r1
 800ace6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acea:	1c7b      	adds	r3, r7, #1
 800acec:	444b      	add	r3, r9
 800acee:	106d      	asrs	r5, r5, #1
 800acf0:	429d      	cmp	r5, r3
 800acf2:	bf38      	it	cc
 800acf4:	461d      	movcc	r5, r3
 800acf6:	0553      	lsls	r3, r2, #21
 800acf8:	d527      	bpl.n	800ad4a <__ssputs_r+0x8e>
 800acfa:	4629      	mov	r1, r5
 800acfc:	f7ff fc4a 	bl	800a594 <_malloc_r>
 800ad00:	4606      	mov	r6, r0
 800ad02:	b360      	cbz	r0, 800ad5e <__ssputs_r+0xa2>
 800ad04:	6921      	ldr	r1, [r4, #16]
 800ad06:	464a      	mov	r2, r9
 800ad08:	f7ff ff61 	bl	800abce <memcpy>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	6126      	str	r6, [r4, #16]
 800ad1a:	6165      	str	r5, [r4, #20]
 800ad1c:	444e      	add	r6, r9
 800ad1e:	eba5 0509 	sub.w	r5, r5, r9
 800ad22:	6026      	str	r6, [r4, #0]
 800ad24:	60a5      	str	r5, [r4, #8]
 800ad26:	463e      	mov	r6, r7
 800ad28:	42be      	cmp	r6, r7
 800ad2a:	d900      	bls.n	800ad2e <__ssputs_r+0x72>
 800ad2c:	463e      	mov	r6, r7
 800ad2e:	6820      	ldr	r0, [r4, #0]
 800ad30:	4632      	mov	r2, r6
 800ad32:	4641      	mov	r1, r8
 800ad34:	f000 fb66 	bl	800b404 <memmove>
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	1b9b      	subs	r3, r3, r6
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	4433      	add	r3, r6
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	2000      	movs	r0, #0
 800ad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4a:	462a      	mov	r2, r5
 800ad4c:	f000 fb7b 	bl	800b446 <_realloc_r>
 800ad50:	4606      	mov	r6, r0
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1e0      	bne.n	800ad18 <__ssputs_r+0x5c>
 800ad56:	6921      	ldr	r1, [r4, #16]
 800ad58:	4650      	mov	r0, sl
 800ad5a:	f7ff ff65 	bl	800ac28 <_free_r>
 800ad5e:	230c      	movs	r3, #12
 800ad60:	f8ca 3000 	str.w	r3, [sl]
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	e7e9      	b.n	800ad46 <__ssputs_r+0x8a>
	...

0800ad74 <_svfiprintf_r>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	4698      	mov	r8, r3
 800ad7a:	898b      	ldrh	r3, [r1, #12]
 800ad7c:	061b      	lsls	r3, r3, #24
 800ad7e:	b09d      	sub	sp, #116	@ 0x74
 800ad80:	4607      	mov	r7, r0
 800ad82:	460d      	mov	r5, r1
 800ad84:	4614      	mov	r4, r2
 800ad86:	d510      	bpl.n	800adaa <_svfiprintf_r+0x36>
 800ad88:	690b      	ldr	r3, [r1, #16]
 800ad8a:	b973      	cbnz	r3, 800adaa <_svfiprintf_r+0x36>
 800ad8c:	2140      	movs	r1, #64	@ 0x40
 800ad8e:	f7ff fc01 	bl	800a594 <_malloc_r>
 800ad92:	6028      	str	r0, [r5, #0]
 800ad94:	6128      	str	r0, [r5, #16]
 800ad96:	b930      	cbnz	r0, 800ada6 <_svfiprintf_r+0x32>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	603b      	str	r3, [r7, #0]
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	2340      	movs	r3, #64	@ 0x40
 800ada8:	616b      	str	r3, [r5, #20]
 800adaa:	2300      	movs	r3, #0
 800adac:	9309      	str	r3, [sp, #36]	@ 0x24
 800adae:	2320      	movs	r3, #32
 800adb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb8:	2330      	movs	r3, #48	@ 0x30
 800adba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af58 <_svfiprintf_r+0x1e4>
 800adbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adc2:	f04f 0901 	mov.w	r9, #1
 800adc6:	4623      	mov	r3, r4
 800adc8:	469a      	mov	sl, r3
 800adca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adce:	b10a      	cbz	r2, 800add4 <_svfiprintf_r+0x60>
 800add0:	2a25      	cmp	r2, #37	@ 0x25
 800add2:	d1f9      	bne.n	800adc8 <_svfiprintf_r+0x54>
 800add4:	ebba 0b04 	subs.w	fp, sl, r4
 800add8:	d00b      	beq.n	800adf2 <_svfiprintf_r+0x7e>
 800adda:	465b      	mov	r3, fp
 800addc:	4622      	mov	r2, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	4638      	mov	r0, r7
 800ade2:	f7ff ff6b 	bl	800acbc <__ssputs_r>
 800ade6:	3001      	adds	r0, #1
 800ade8:	f000 80a7 	beq.w	800af3a <_svfiprintf_r+0x1c6>
 800adec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adee:	445a      	add	r2, fp
 800adf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800adf2:	f89a 3000 	ldrb.w	r3, [sl]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 809f 	beq.w	800af3a <_svfiprintf_r+0x1c6>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae06:	f10a 0a01 	add.w	sl, sl, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae12:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae14:	4654      	mov	r4, sl
 800ae16:	2205      	movs	r2, #5
 800ae18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1c:	484e      	ldr	r0, [pc, #312]	@ (800af58 <_svfiprintf_r+0x1e4>)
 800ae1e:	f7f5 f9ef 	bl	8000200 <memchr>
 800ae22:	9a04      	ldr	r2, [sp, #16]
 800ae24:	b9d8      	cbnz	r0, 800ae5e <_svfiprintf_r+0xea>
 800ae26:	06d0      	lsls	r0, r2, #27
 800ae28:	bf44      	itt	mi
 800ae2a:	2320      	movmi	r3, #32
 800ae2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae30:	0711      	lsls	r1, r2, #28
 800ae32:	bf44      	itt	mi
 800ae34:	232b      	movmi	r3, #43	@ 0x2b
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae40:	d015      	beq.n	800ae6e <_svfiprintf_r+0xfa>
 800ae42:	9a07      	ldr	r2, [sp, #28]
 800ae44:	4654      	mov	r4, sl
 800ae46:	2000      	movs	r0, #0
 800ae48:	f04f 0c0a 	mov.w	ip, #10
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae52:	3b30      	subs	r3, #48	@ 0x30
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	d94b      	bls.n	800aef0 <_svfiprintf_r+0x17c>
 800ae58:	b1b0      	cbz	r0, 800ae88 <_svfiprintf_r+0x114>
 800ae5a:	9207      	str	r2, [sp, #28]
 800ae5c:	e014      	b.n	800ae88 <_svfiprintf_r+0x114>
 800ae5e:	eba0 0308 	sub.w	r3, r0, r8
 800ae62:	fa09 f303 	lsl.w	r3, r9, r3
 800ae66:	4313      	orrs	r3, r2
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	46a2      	mov	sl, r4
 800ae6c:	e7d2      	b.n	800ae14 <_svfiprintf_r+0xa0>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	9103      	str	r1, [sp, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bfbb      	ittet	lt
 800ae7a:	425b      	neglt	r3, r3
 800ae7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae80:	9307      	strge	r3, [sp, #28]
 800ae82:	9307      	strlt	r3, [sp, #28]
 800ae84:	bfb8      	it	lt
 800ae86:	9204      	strlt	r2, [sp, #16]
 800ae88:	7823      	ldrb	r3, [r4, #0]
 800ae8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae8c:	d10a      	bne.n	800aea4 <_svfiprintf_r+0x130>
 800ae8e:	7863      	ldrb	r3, [r4, #1]
 800ae90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae92:	d132      	bne.n	800aefa <_svfiprintf_r+0x186>
 800ae94:	9b03      	ldr	r3, [sp, #12]
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	9203      	str	r2, [sp, #12]
 800ae9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aea0:	3402      	adds	r4, #2
 800aea2:	9305      	str	r3, [sp, #20]
 800aea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af68 <_svfiprintf_r+0x1f4>
 800aea8:	7821      	ldrb	r1, [r4, #0]
 800aeaa:	2203      	movs	r2, #3
 800aeac:	4650      	mov	r0, sl
 800aeae:	f7f5 f9a7 	bl	8000200 <memchr>
 800aeb2:	b138      	cbz	r0, 800aec4 <_svfiprintf_r+0x150>
 800aeb4:	9b04      	ldr	r3, [sp, #16]
 800aeb6:	eba0 000a 	sub.w	r0, r0, sl
 800aeba:	2240      	movs	r2, #64	@ 0x40
 800aebc:	4082      	lsls	r2, r0
 800aebe:	4313      	orrs	r3, r2
 800aec0:	3401      	adds	r4, #1
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec8:	4824      	ldr	r0, [pc, #144]	@ (800af5c <_svfiprintf_r+0x1e8>)
 800aeca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aece:	2206      	movs	r2, #6
 800aed0:	f7f5 f996 	bl	8000200 <memchr>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d036      	beq.n	800af46 <_svfiprintf_r+0x1d2>
 800aed8:	4b21      	ldr	r3, [pc, #132]	@ (800af60 <_svfiprintf_r+0x1ec>)
 800aeda:	bb1b      	cbnz	r3, 800af24 <_svfiprintf_r+0x1b0>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	3307      	adds	r3, #7
 800aee0:	f023 0307 	bic.w	r3, r3, #7
 800aee4:	3308      	adds	r3, #8
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeea:	4433      	add	r3, r6
 800aeec:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeee:	e76a      	b.n	800adc6 <_svfiprintf_r+0x52>
 800aef0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef4:	460c      	mov	r4, r1
 800aef6:	2001      	movs	r0, #1
 800aef8:	e7a8      	b.n	800ae4c <_svfiprintf_r+0xd8>
 800aefa:	2300      	movs	r3, #0
 800aefc:	3401      	adds	r4, #1
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	4619      	mov	r1, r3
 800af02:	f04f 0c0a 	mov.w	ip, #10
 800af06:	4620      	mov	r0, r4
 800af08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0c:	3a30      	subs	r2, #48	@ 0x30
 800af0e:	2a09      	cmp	r2, #9
 800af10:	d903      	bls.n	800af1a <_svfiprintf_r+0x1a6>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0c6      	beq.n	800aea4 <_svfiprintf_r+0x130>
 800af16:	9105      	str	r1, [sp, #20]
 800af18:	e7c4      	b.n	800aea4 <_svfiprintf_r+0x130>
 800af1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1e:	4604      	mov	r4, r0
 800af20:	2301      	movs	r3, #1
 800af22:	e7f0      	b.n	800af06 <_svfiprintf_r+0x192>
 800af24:	ab03      	add	r3, sp, #12
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	462a      	mov	r2, r5
 800af2a:	4b0e      	ldr	r3, [pc, #56]	@ (800af64 <_svfiprintf_r+0x1f0>)
 800af2c:	a904      	add	r1, sp, #16
 800af2e:	4638      	mov	r0, r7
 800af30:	f3af 8000 	nop.w
 800af34:	1c42      	adds	r2, r0, #1
 800af36:	4606      	mov	r6, r0
 800af38:	d1d6      	bne.n	800aee8 <_svfiprintf_r+0x174>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	065b      	lsls	r3, r3, #25
 800af3e:	f53f af2d 	bmi.w	800ad9c <_svfiprintf_r+0x28>
 800af42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af44:	e72c      	b.n	800ada0 <_svfiprintf_r+0x2c>
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4b05      	ldr	r3, [pc, #20]	@ (800af64 <_svfiprintf_r+0x1f0>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	4638      	mov	r0, r7
 800af52:	f000 f879 	bl	800b048 <_printf_i>
 800af56:	e7ed      	b.n	800af34 <_svfiprintf_r+0x1c0>
 800af58:	0800bea2 	.word	0x0800bea2
 800af5c:	0800beac 	.word	0x0800beac
 800af60:	00000000 	.word	0x00000000
 800af64:	0800acbd 	.word	0x0800acbd
 800af68:	0800bea8 	.word	0x0800bea8

0800af6c <_printf_common>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	4616      	mov	r6, r2
 800af72:	4698      	mov	r8, r3
 800af74:	688a      	ldr	r2, [r1, #8]
 800af76:	690b      	ldr	r3, [r1, #16]
 800af78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af7c:	4293      	cmp	r3, r2
 800af7e:	bfb8      	it	lt
 800af80:	4613      	movlt	r3, r2
 800af82:	6033      	str	r3, [r6, #0]
 800af84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af88:	4607      	mov	r7, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b10a      	cbz	r2, 800af92 <_printf_common+0x26>
 800af8e:	3301      	adds	r3, #1
 800af90:	6033      	str	r3, [r6, #0]
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	0699      	lsls	r1, r3, #26
 800af96:	bf42      	ittt	mi
 800af98:	6833      	ldrmi	r3, [r6, #0]
 800af9a:	3302      	addmi	r3, #2
 800af9c:	6033      	strmi	r3, [r6, #0]
 800af9e:	6825      	ldr	r5, [r4, #0]
 800afa0:	f015 0506 	ands.w	r5, r5, #6
 800afa4:	d106      	bne.n	800afb4 <_printf_common+0x48>
 800afa6:	f104 0a19 	add.w	sl, r4, #25
 800afaa:	68e3      	ldr	r3, [r4, #12]
 800afac:	6832      	ldr	r2, [r6, #0]
 800afae:	1a9b      	subs	r3, r3, r2
 800afb0:	42ab      	cmp	r3, r5
 800afb2:	dc26      	bgt.n	800b002 <_printf_common+0x96>
 800afb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afb8:	6822      	ldr	r2, [r4, #0]
 800afba:	3b00      	subs	r3, #0
 800afbc:	bf18      	it	ne
 800afbe:	2301      	movne	r3, #1
 800afc0:	0692      	lsls	r2, r2, #26
 800afc2:	d42b      	bmi.n	800b01c <_printf_common+0xb0>
 800afc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afc8:	4641      	mov	r1, r8
 800afca:	4638      	mov	r0, r7
 800afcc:	47c8      	blx	r9
 800afce:	3001      	adds	r0, #1
 800afd0:	d01e      	beq.n	800b010 <_printf_common+0xa4>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	6922      	ldr	r2, [r4, #16]
 800afd6:	f003 0306 	and.w	r3, r3, #6
 800afda:	2b04      	cmp	r3, #4
 800afdc:	bf02      	ittt	eq
 800afde:	68e5      	ldreq	r5, [r4, #12]
 800afe0:	6833      	ldreq	r3, [r6, #0]
 800afe2:	1aed      	subeq	r5, r5, r3
 800afe4:	68a3      	ldr	r3, [r4, #8]
 800afe6:	bf0c      	ite	eq
 800afe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afec:	2500      	movne	r5, #0
 800afee:	4293      	cmp	r3, r2
 800aff0:	bfc4      	itt	gt
 800aff2:	1a9b      	subgt	r3, r3, r2
 800aff4:	18ed      	addgt	r5, r5, r3
 800aff6:	2600      	movs	r6, #0
 800aff8:	341a      	adds	r4, #26
 800affa:	42b5      	cmp	r5, r6
 800affc:	d11a      	bne.n	800b034 <_printf_common+0xc8>
 800affe:	2000      	movs	r0, #0
 800b000:	e008      	b.n	800b014 <_printf_common+0xa8>
 800b002:	2301      	movs	r3, #1
 800b004:	4652      	mov	r2, sl
 800b006:	4641      	mov	r1, r8
 800b008:	4638      	mov	r0, r7
 800b00a:	47c8      	blx	r9
 800b00c:	3001      	adds	r0, #1
 800b00e:	d103      	bne.n	800b018 <_printf_common+0xac>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b018:	3501      	adds	r5, #1
 800b01a:	e7c6      	b.n	800afaa <_printf_common+0x3e>
 800b01c:	18e1      	adds	r1, r4, r3
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	2030      	movs	r0, #48	@ 0x30
 800b022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b026:	4422      	add	r2, r4
 800b028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b02c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b030:	3302      	adds	r3, #2
 800b032:	e7c7      	b.n	800afc4 <_printf_common+0x58>
 800b034:	2301      	movs	r3, #1
 800b036:	4622      	mov	r2, r4
 800b038:	4641      	mov	r1, r8
 800b03a:	4638      	mov	r0, r7
 800b03c:	47c8      	blx	r9
 800b03e:	3001      	adds	r0, #1
 800b040:	d0e6      	beq.n	800b010 <_printf_common+0xa4>
 800b042:	3601      	adds	r6, #1
 800b044:	e7d9      	b.n	800affa <_printf_common+0x8e>
	...

0800b048 <_printf_i>:
 800b048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b04c:	7e0f      	ldrb	r7, [r1, #24]
 800b04e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b050:	2f78      	cmp	r7, #120	@ 0x78
 800b052:	4691      	mov	r9, r2
 800b054:	4680      	mov	r8, r0
 800b056:	460c      	mov	r4, r1
 800b058:	469a      	mov	sl, r3
 800b05a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b05e:	d807      	bhi.n	800b070 <_printf_i+0x28>
 800b060:	2f62      	cmp	r7, #98	@ 0x62
 800b062:	d80a      	bhi.n	800b07a <_printf_i+0x32>
 800b064:	2f00      	cmp	r7, #0
 800b066:	f000 80d2 	beq.w	800b20e <_printf_i+0x1c6>
 800b06a:	2f58      	cmp	r7, #88	@ 0x58
 800b06c:	f000 80b9 	beq.w	800b1e2 <_printf_i+0x19a>
 800b070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b078:	e03a      	b.n	800b0f0 <_printf_i+0xa8>
 800b07a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b07e:	2b15      	cmp	r3, #21
 800b080:	d8f6      	bhi.n	800b070 <_printf_i+0x28>
 800b082:	a101      	add	r1, pc, #4	@ (adr r1, 800b088 <_printf_i+0x40>)
 800b084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b088:	0800b0e1 	.word	0x0800b0e1
 800b08c:	0800b0f5 	.word	0x0800b0f5
 800b090:	0800b071 	.word	0x0800b071
 800b094:	0800b071 	.word	0x0800b071
 800b098:	0800b071 	.word	0x0800b071
 800b09c:	0800b071 	.word	0x0800b071
 800b0a0:	0800b0f5 	.word	0x0800b0f5
 800b0a4:	0800b071 	.word	0x0800b071
 800b0a8:	0800b071 	.word	0x0800b071
 800b0ac:	0800b071 	.word	0x0800b071
 800b0b0:	0800b071 	.word	0x0800b071
 800b0b4:	0800b1f5 	.word	0x0800b1f5
 800b0b8:	0800b11f 	.word	0x0800b11f
 800b0bc:	0800b1af 	.word	0x0800b1af
 800b0c0:	0800b071 	.word	0x0800b071
 800b0c4:	0800b071 	.word	0x0800b071
 800b0c8:	0800b217 	.word	0x0800b217
 800b0cc:	0800b071 	.word	0x0800b071
 800b0d0:	0800b11f 	.word	0x0800b11f
 800b0d4:	0800b071 	.word	0x0800b071
 800b0d8:	0800b071 	.word	0x0800b071
 800b0dc:	0800b1b7 	.word	0x0800b1b7
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	1d1a      	adds	r2, r3, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6032      	str	r2, [r6, #0]
 800b0e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e09d      	b.n	800b230 <_printf_i+0x1e8>
 800b0f4:	6833      	ldr	r3, [r6, #0]
 800b0f6:	6820      	ldr	r0, [r4, #0]
 800b0f8:	1d19      	adds	r1, r3, #4
 800b0fa:	6031      	str	r1, [r6, #0]
 800b0fc:	0606      	lsls	r6, r0, #24
 800b0fe:	d501      	bpl.n	800b104 <_printf_i+0xbc>
 800b100:	681d      	ldr	r5, [r3, #0]
 800b102:	e003      	b.n	800b10c <_printf_i+0xc4>
 800b104:	0645      	lsls	r5, r0, #25
 800b106:	d5fb      	bpl.n	800b100 <_printf_i+0xb8>
 800b108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b10c:	2d00      	cmp	r5, #0
 800b10e:	da03      	bge.n	800b118 <_printf_i+0xd0>
 800b110:	232d      	movs	r3, #45	@ 0x2d
 800b112:	426d      	negs	r5, r5
 800b114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b118:	4859      	ldr	r0, [pc, #356]	@ (800b280 <_printf_i+0x238>)
 800b11a:	230a      	movs	r3, #10
 800b11c:	e011      	b.n	800b142 <_printf_i+0xfa>
 800b11e:	6821      	ldr	r1, [r4, #0]
 800b120:	6833      	ldr	r3, [r6, #0]
 800b122:	0608      	lsls	r0, r1, #24
 800b124:	f853 5b04 	ldr.w	r5, [r3], #4
 800b128:	d402      	bmi.n	800b130 <_printf_i+0xe8>
 800b12a:	0649      	lsls	r1, r1, #25
 800b12c:	bf48      	it	mi
 800b12e:	b2ad      	uxthmi	r5, r5
 800b130:	2f6f      	cmp	r7, #111	@ 0x6f
 800b132:	4853      	ldr	r0, [pc, #332]	@ (800b280 <_printf_i+0x238>)
 800b134:	6033      	str	r3, [r6, #0]
 800b136:	bf14      	ite	ne
 800b138:	230a      	movne	r3, #10
 800b13a:	2308      	moveq	r3, #8
 800b13c:	2100      	movs	r1, #0
 800b13e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b142:	6866      	ldr	r6, [r4, #4]
 800b144:	60a6      	str	r6, [r4, #8]
 800b146:	2e00      	cmp	r6, #0
 800b148:	bfa2      	ittt	ge
 800b14a:	6821      	ldrge	r1, [r4, #0]
 800b14c:	f021 0104 	bicge.w	r1, r1, #4
 800b150:	6021      	strge	r1, [r4, #0]
 800b152:	b90d      	cbnz	r5, 800b158 <_printf_i+0x110>
 800b154:	2e00      	cmp	r6, #0
 800b156:	d04b      	beq.n	800b1f0 <_printf_i+0x1a8>
 800b158:	4616      	mov	r6, r2
 800b15a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b15e:	fb03 5711 	mls	r7, r3, r1, r5
 800b162:	5dc7      	ldrb	r7, [r0, r7]
 800b164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b168:	462f      	mov	r7, r5
 800b16a:	42bb      	cmp	r3, r7
 800b16c:	460d      	mov	r5, r1
 800b16e:	d9f4      	bls.n	800b15a <_printf_i+0x112>
 800b170:	2b08      	cmp	r3, #8
 800b172:	d10b      	bne.n	800b18c <_printf_i+0x144>
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	07df      	lsls	r7, r3, #31
 800b178:	d508      	bpl.n	800b18c <_printf_i+0x144>
 800b17a:	6923      	ldr	r3, [r4, #16]
 800b17c:	6861      	ldr	r1, [r4, #4]
 800b17e:	4299      	cmp	r1, r3
 800b180:	bfde      	ittt	le
 800b182:	2330      	movle	r3, #48	@ 0x30
 800b184:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b18c:	1b92      	subs	r2, r2, r6
 800b18e:	6122      	str	r2, [r4, #16]
 800b190:	f8cd a000 	str.w	sl, [sp]
 800b194:	464b      	mov	r3, r9
 800b196:	aa03      	add	r2, sp, #12
 800b198:	4621      	mov	r1, r4
 800b19a:	4640      	mov	r0, r8
 800b19c:	f7ff fee6 	bl	800af6c <_printf_common>
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	d14a      	bne.n	800b23a <_printf_i+0x1f2>
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	b004      	add	sp, #16
 800b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f043 0320 	orr.w	r3, r3, #32
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	4833      	ldr	r0, [pc, #204]	@ (800b284 <_printf_i+0x23c>)
 800b1b8:	2778      	movs	r7, #120	@ 0x78
 800b1ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	6831      	ldr	r1, [r6, #0]
 800b1c2:	061f      	lsls	r7, r3, #24
 800b1c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1c8:	d402      	bmi.n	800b1d0 <_printf_i+0x188>
 800b1ca:	065f      	lsls	r7, r3, #25
 800b1cc:	bf48      	it	mi
 800b1ce:	b2ad      	uxthmi	r5, r5
 800b1d0:	6031      	str	r1, [r6, #0]
 800b1d2:	07d9      	lsls	r1, r3, #31
 800b1d4:	bf44      	itt	mi
 800b1d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1da:	6023      	strmi	r3, [r4, #0]
 800b1dc:	b11d      	cbz	r5, 800b1e6 <_printf_i+0x19e>
 800b1de:	2310      	movs	r3, #16
 800b1e0:	e7ac      	b.n	800b13c <_printf_i+0xf4>
 800b1e2:	4827      	ldr	r0, [pc, #156]	@ (800b280 <_printf_i+0x238>)
 800b1e4:	e7e9      	b.n	800b1ba <_printf_i+0x172>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	f023 0320 	bic.w	r3, r3, #32
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	e7f6      	b.n	800b1de <_printf_i+0x196>
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	e7bd      	b.n	800b170 <_printf_i+0x128>
 800b1f4:	6833      	ldr	r3, [r6, #0]
 800b1f6:	6825      	ldr	r5, [r4, #0]
 800b1f8:	6961      	ldr	r1, [r4, #20]
 800b1fa:	1d18      	adds	r0, r3, #4
 800b1fc:	6030      	str	r0, [r6, #0]
 800b1fe:	062e      	lsls	r6, r5, #24
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	d501      	bpl.n	800b208 <_printf_i+0x1c0>
 800b204:	6019      	str	r1, [r3, #0]
 800b206:	e002      	b.n	800b20e <_printf_i+0x1c6>
 800b208:	0668      	lsls	r0, r5, #25
 800b20a:	d5fb      	bpl.n	800b204 <_printf_i+0x1bc>
 800b20c:	8019      	strh	r1, [r3, #0]
 800b20e:	2300      	movs	r3, #0
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	4616      	mov	r6, r2
 800b214:	e7bc      	b.n	800b190 <_printf_i+0x148>
 800b216:	6833      	ldr	r3, [r6, #0]
 800b218:	1d1a      	adds	r2, r3, #4
 800b21a:	6032      	str	r2, [r6, #0]
 800b21c:	681e      	ldr	r6, [r3, #0]
 800b21e:	6862      	ldr	r2, [r4, #4]
 800b220:	2100      	movs	r1, #0
 800b222:	4630      	mov	r0, r6
 800b224:	f7f4 ffec 	bl	8000200 <memchr>
 800b228:	b108      	cbz	r0, 800b22e <_printf_i+0x1e6>
 800b22a:	1b80      	subs	r0, r0, r6
 800b22c:	6060      	str	r0, [r4, #4]
 800b22e:	6863      	ldr	r3, [r4, #4]
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	2300      	movs	r3, #0
 800b234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b238:	e7aa      	b.n	800b190 <_printf_i+0x148>
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	4632      	mov	r2, r6
 800b23e:	4649      	mov	r1, r9
 800b240:	4640      	mov	r0, r8
 800b242:	47d0      	blx	sl
 800b244:	3001      	adds	r0, #1
 800b246:	d0ad      	beq.n	800b1a4 <_printf_i+0x15c>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	079b      	lsls	r3, r3, #30
 800b24c:	d413      	bmi.n	800b276 <_printf_i+0x22e>
 800b24e:	68e0      	ldr	r0, [r4, #12]
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	4298      	cmp	r0, r3
 800b254:	bfb8      	it	lt
 800b256:	4618      	movlt	r0, r3
 800b258:	e7a6      	b.n	800b1a8 <_printf_i+0x160>
 800b25a:	2301      	movs	r3, #1
 800b25c:	4632      	mov	r2, r6
 800b25e:	4649      	mov	r1, r9
 800b260:	4640      	mov	r0, r8
 800b262:	47d0      	blx	sl
 800b264:	3001      	adds	r0, #1
 800b266:	d09d      	beq.n	800b1a4 <_printf_i+0x15c>
 800b268:	3501      	adds	r5, #1
 800b26a:	68e3      	ldr	r3, [r4, #12]
 800b26c:	9903      	ldr	r1, [sp, #12]
 800b26e:	1a5b      	subs	r3, r3, r1
 800b270:	42ab      	cmp	r3, r5
 800b272:	dcf2      	bgt.n	800b25a <_printf_i+0x212>
 800b274:	e7eb      	b.n	800b24e <_printf_i+0x206>
 800b276:	2500      	movs	r5, #0
 800b278:	f104 0619 	add.w	r6, r4, #25
 800b27c:	e7f5      	b.n	800b26a <_printf_i+0x222>
 800b27e:	bf00      	nop
 800b280:	0800beb3 	.word	0x0800beb3
 800b284:	0800bec4 	.word	0x0800bec4

0800b288 <__sflush_r>:
 800b288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	0716      	lsls	r6, r2, #28
 800b292:	4605      	mov	r5, r0
 800b294:	460c      	mov	r4, r1
 800b296:	d454      	bmi.n	800b342 <__sflush_r+0xba>
 800b298:	684b      	ldr	r3, [r1, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dc02      	bgt.n	800b2a4 <__sflush_r+0x1c>
 800b29e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dd48      	ble.n	800b336 <__sflush_r+0xae>
 800b2a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2a6:	2e00      	cmp	r6, #0
 800b2a8:	d045      	beq.n	800b336 <__sflush_r+0xae>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2b0:	682f      	ldr	r7, [r5, #0]
 800b2b2:	6a21      	ldr	r1, [r4, #32]
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	d030      	beq.n	800b31a <__sflush_r+0x92>
 800b2b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	0759      	lsls	r1, r3, #29
 800b2be:	d505      	bpl.n	800b2cc <__sflush_r+0x44>
 800b2c0:	6863      	ldr	r3, [r4, #4]
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2c6:	b10b      	cbz	r3, 800b2cc <__sflush_r+0x44>
 800b2c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2d0:	6a21      	ldr	r1, [r4, #32]
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b0      	blx	r6
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	d106      	bne.n	800b2ea <__sflush_r+0x62>
 800b2dc:	6829      	ldr	r1, [r5, #0]
 800b2de:	291d      	cmp	r1, #29
 800b2e0:	d82b      	bhi.n	800b33a <__sflush_r+0xb2>
 800b2e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b38c <__sflush_r+0x104>)
 800b2e4:	410a      	asrs	r2, r1
 800b2e6:	07d6      	lsls	r6, r2, #31
 800b2e8:	d427      	bmi.n	800b33a <__sflush_r+0xb2>
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	6062      	str	r2, [r4, #4]
 800b2ee:	04d9      	lsls	r1, r3, #19
 800b2f0:	6922      	ldr	r2, [r4, #16]
 800b2f2:	6022      	str	r2, [r4, #0]
 800b2f4:	d504      	bpl.n	800b300 <__sflush_r+0x78>
 800b2f6:	1c42      	adds	r2, r0, #1
 800b2f8:	d101      	bne.n	800b2fe <__sflush_r+0x76>
 800b2fa:	682b      	ldr	r3, [r5, #0]
 800b2fc:	b903      	cbnz	r3, 800b300 <__sflush_r+0x78>
 800b2fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b302:	602f      	str	r7, [r5, #0]
 800b304:	b1b9      	cbz	r1, 800b336 <__sflush_r+0xae>
 800b306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b30a:	4299      	cmp	r1, r3
 800b30c:	d002      	beq.n	800b314 <__sflush_r+0x8c>
 800b30e:	4628      	mov	r0, r5
 800b310:	f7ff fc8a 	bl	800ac28 <_free_r>
 800b314:	2300      	movs	r3, #0
 800b316:	6363      	str	r3, [r4, #52]	@ 0x34
 800b318:	e00d      	b.n	800b336 <__sflush_r+0xae>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4628      	mov	r0, r5
 800b31e:	47b0      	blx	r6
 800b320:	4602      	mov	r2, r0
 800b322:	1c50      	adds	r0, r2, #1
 800b324:	d1c9      	bne.n	800b2ba <__sflush_r+0x32>
 800b326:	682b      	ldr	r3, [r5, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0c6      	beq.n	800b2ba <__sflush_r+0x32>
 800b32c:	2b1d      	cmp	r3, #29
 800b32e:	d001      	beq.n	800b334 <__sflush_r+0xac>
 800b330:	2b16      	cmp	r3, #22
 800b332:	d11e      	bne.n	800b372 <__sflush_r+0xea>
 800b334:	602f      	str	r7, [r5, #0]
 800b336:	2000      	movs	r0, #0
 800b338:	e022      	b.n	800b380 <__sflush_r+0xf8>
 800b33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b33e:	b21b      	sxth	r3, r3
 800b340:	e01b      	b.n	800b37a <__sflush_r+0xf2>
 800b342:	690f      	ldr	r7, [r1, #16]
 800b344:	2f00      	cmp	r7, #0
 800b346:	d0f6      	beq.n	800b336 <__sflush_r+0xae>
 800b348:	0793      	lsls	r3, r2, #30
 800b34a:	680e      	ldr	r6, [r1, #0]
 800b34c:	bf08      	it	eq
 800b34e:	694b      	ldreq	r3, [r1, #20]
 800b350:	600f      	str	r7, [r1, #0]
 800b352:	bf18      	it	ne
 800b354:	2300      	movne	r3, #0
 800b356:	eba6 0807 	sub.w	r8, r6, r7
 800b35a:	608b      	str	r3, [r1, #8]
 800b35c:	f1b8 0f00 	cmp.w	r8, #0
 800b360:	dde9      	ble.n	800b336 <__sflush_r+0xae>
 800b362:	6a21      	ldr	r1, [r4, #32]
 800b364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b366:	4643      	mov	r3, r8
 800b368:	463a      	mov	r2, r7
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b0      	blx	r6
 800b36e:	2800      	cmp	r0, #0
 800b370:	dc08      	bgt.n	800b384 <__sflush_r+0xfc>
 800b372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	4407      	add	r7, r0
 800b386:	eba8 0800 	sub.w	r8, r8, r0
 800b38a:	e7e7      	b.n	800b35c <__sflush_r+0xd4>
 800b38c:	dfbffffe 	.word	0xdfbffffe

0800b390 <_fflush_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	690b      	ldr	r3, [r1, #16]
 800b394:	4605      	mov	r5, r0
 800b396:	460c      	mov	r4, r1
 800b398:	b913      	cbnz	r3, 800b3a0 <_fflush_r+0x10>
 800b39a:	2500      	movs	r5, #0
 800b39c:	4628      	mov	r0, r5
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	b118      	cbz	r0, 800b3aa <_fflush_r+0x1a>
 800b3a2:	6a03      	ldr	r3, [r0, #32]
 800b3a4:	b90b      	cbnz	r3, 800b3aa <_fflush_r+0x1a>
 800b3a6:	f7ff fa91 	bl	800a8cc <__sinit>
 800b3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0f3      	beq.n	800b39a <_fflush_r+0xa>
 800b3b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3b4:	07d0      	lsls	r0, r2, #31
 800b3b6:	d404      	bmi.n	800b3c2 <_fflush_r+0x32>
 800b3b8:	0599      	lsls	r1, r3, #22
 800b3ba:	d402      	bmi.n	800b3c2 <_fflush_r+0x32>
 800b3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3be:	f7ff fc04 	bl	800abca <__retarget_lock_acquire_recursive>
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	f7ff ff5f 	bl	800b288 <__sflush_r>
 800b3ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3cc:	07da      	lsls	r2, r3, #31
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	d4e4      	bmi.n	800b39c <_fflush_r+0xc>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	059b      	lsls	r3, r3, #22
 800b3d6:	d4e1      	bmi.n	800b39c <_fflush_r+0xc>
 800b3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3da:	f7ff fbf7 	bl	800abcc <__retarget_lock_release_recursive>
 800b3de:	e7dd      	b.n	800b39c <_fflush_r+0xc>

0800b3e0 <fiprintf>:
 800b3e0:	b40e      	push	{r1, r2, r3}
 800b3e2:	b503      	push	{r0, r1, lr}
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	ab03      	add	r3, sp, #12
 800b3e8:	4805      	ldr	r0, [pc, #20]	@ (800b400 <fiprintf+0x20>)
 800b3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ee:	6800      	ldr	r0, [r0, #0]
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	f000 f87f 	bl	800b4f4 <_vfiprintf_r>
 800b3f6:	b002      	add	sp, #8
 800b3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3fc:	b003      	add	sp, #12
 800b3fe:	4770      	bx	lr
 800b400:	20000100 	.word	0x20000100

0800b404 <memmove>:
 800b404:	4288      	cmp	r0, r1
 800b406:	b510      	push	{r4, lr}
 800b408:	eb01 0402 	add.w	r4, r1, r2
 800b40c:	d902      	bls.n	800b414 <memmove+0x10>
 800b40e:	4284      	cmp	r4, r0
 800b410:	4623      	mov	r3, r4
 800b412:	d807      	bhi.n	800b424 <memmove+0x20>
 800b414:	1e43      	subs	r3, r0, #1
 800b416:	42a1      	cmp	r1, r4
 800b418:	d008      	beq.n	800b42c <memmove+0x28>
 800b41a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b41e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b422:	e7f8      	b.n	800b416 <memmove+0x12>
 800b424:	4402      	add	r2, r0
 800b426:	4601      	mov	r1, r0
 800b428:	428a      	cmp	r2, r1
 800b42a:	d100      	bne.n	800b42e <memmove+0x2a>
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b436:	e7f7      	b.n	800b428 <memmove+0x24>

0800b438 <abort>:
 800b438:	b508      	push	{r3, lr}
 800b43a:	2006      	movs	r0, #6
 800b43c:	f000 fa2e 	bl	800b89c <raise>
 800b440:	2001      	movs	r0, #1
 800b442:	f7f5 ffeb 	bl	800141c <_exit>

0800b446 <_realloc_r>:
 800b446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44a:	4680      	mov	r8, r0
 800b44c:	4615      	mov	r5, r2
 800b44e:	460c      	mov	r4, r1
 800b450:	b921      	cbnz	r1, 800b45c <_realloc_r+0x16>
 800b452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b456:	4611      	mov	r1, r2
 800b458:	f7ff b89c 	b.w	800a594 <_malloc_r>
 800b45c:	b92a      	cbnz	r2, 800b46a <_realloc_r+0x24>
 800b45e:	f7ff fbe3 	bl	800ac28 <_free_r>
 800b462:	2400      	movs	r4, #0
 800b464:	4620      	mov	r0, r4
 800b466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46a:	f000 fa33 	bl	800b8d4 <_malloc_usable_size_r>
 800b46e:	4285      	cmp	r5, r0
 800b470:	4606      	mov	r6, r0
 800b472:	d802      	bhi.n	800b47a <_realloc_r+0x34>
 800b474:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b478:	d8f4      	bhi.n	800b464 <_realloc_r+0x1e>
 800b47a:	4629      	mov	r1, r5
 800b47c:	4640      	mov	r0, r8
 800b47e:	f7ff f889 	bl	800a594 <_malloc_r>
 800b482:	4607      	mov	r7, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d0ec      	beq.n	800b462 <_realloc_r+0x1c>
 800b488:	42b5      	cmp	r5, r6
 800b48a:	462a      	mov	r2, r5
 800b48c:	4621      	mov	r1, r4
 800b48e:	bf28      	it	cs
 800b490:	4632      	movcs	r2, r6
 800b492:	f7ff fb9c 	bl	800abce <memcpy>
 800b496:	4621      	mov	r1, r4
 800b498:	4640      	mov	r0, r8
 800b49a:	f7ff fbc5 	bl	800ac28 <_free_r>
 800b49e:	463c      	mov	r4, r7
 800b4a0:	e7e0      	b.n	800b464 <_realloc_r+0x1e>

0800b4a2 <__sfputc_r>:
 800b4a2:	6893      	ldr	r3, [r2, #8]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	b410      	push	{r4}
 800b4aa:	6093      	str	r3, [r2, #8]
 800b4ac:	da08      	bge.n	800b4c0 <__sfputc_r+0x1e>
 800b4ae:	6994      	ldr	r4, [r2, #24]
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	db01      	blt.n	800b4b8 <__sfputc_r+0x16>
 800b4b4:	290a      	cmp	r1, #10
 800b4b6:	d103      	bne.n	800b4c0 <__sfputc_r+0x1e>
 800b4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4bc:	f000 b932 	b.w	800b724 <__swbuf_r>
 800b4c0:	6813      	ldr	r3, [r2, #0]
 800b4c2:	1c58      	adds	r0, r3, #1
 800b4c4:	6010      	str	r0, [r2, #0]
 800b4c6:	7019      	strb	r1, [r3, #0]
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <__sfputs_r>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	4614      	mov	r4, r2
 800b4d8:	18d5      	adds	r5, r2, r3
 800b4da:	42ac      	cmp	r4, r5
 800b4dc:	d101      	bne.n	800b4e2 <__sfputs_r+0x12>
 800b4de:	2000      	movs	r0, #0
 800b4e0:	e007      	b.n	800b4f2 <__sfputs_r+0x22>
 800b4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e6:	463a      	mov	r2, r7
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7ff ffda 	bl	800b4a2 <__sfputc_r>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d1f3      	bne.n	800b4da <__sfputs_r+0xa>
 800b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4f4 <_vfiprintf_r>:
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	b09d      	sub	sp, #116	@ 0x74
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	4698      	mov	r8, r3
 800b500:	4606      	mov	r6, r0
 800b502:	b118      	cbz	r0, 800b50c <_vfiprintf_r+0x18>
 800b504:	6a03      	ldr	r3, [r0, #32]
 800b506:	b90b      	cbnz	r3, 800b50c <_vfiprintf_r+0x18>
 800b508:	f7ff f9e0 	bl	800a8cc <__sinit>
 800b50c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b50e:	07d9      	lsls	r1, r3, #31
 800b510:	d405      	bmi.n	800b51e <_vfiprintf_r+0x2a>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	059a      	lsls	r2, r3, #22
 800b516:	d402      	bmi.n	800b51e <_vfiprintf_r+0x2a>
 800b518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b51a:	f7ff fb56 	bl	800abca <__retarget_lock_acquire_recursive>
 800b51e:	89ab      	ldrh	r3, [r5, #12]
 800b520:	071b      	lsls	r3, r3, #28
 800b522:	d501      	bpl.n	800b528 <_vfiprintf_r+0x34>
 800b524:	692b      	ldr	r3, [r5, #16]
 800b526:	b99b      	cbnz	r3, 800b550 <_vfiprintf_r+0x5c>
 800b528:	4629      	mov	r1, r5
 800b52a:	4630      	mov	r0, r6
 800b52c:	f000 f938 	bl	800b7a0 <__swsetup_r>
 800b530:	b170      	cbz	r0, 800b550 <_vfiprintf_r+0x5c>
 800b532:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b534:	07dc      	lsls	r4, r3, #31
 800b536:	d504      	bpl.n	800b542 <_vfiprintf_r+0x4e>
 800b538:	f04f 30ff 	mov.w	r0, #4294967295
 800b53c:	b01d      	add	sp, #116	@ 0x74
 800b53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	0598      	lsls	r0, r3, #22
 800b546:	d4f7      	bmi.n	800b538 <_vfiprintf_r+0x44>
 800b548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b54a:	f7ff fb3f 	bl	800abcc <__retarget_lock_release_recursive>
 800b54e:	e7f3      	b.n	800b538 <_vfiprintf_r+0x44>
 800b550:	2300      	movs	r3, #0
 800b552:	9309      	str	r3, [sp, #36]	@ 0x24
 800b554:	2320      	movs	r3, #32
 800b556:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b55a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b55e:	2330      	movs	r3, #48	@ 0x30
 800b560:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b710 <_vfiprintf_r+0x21c>
 800b564:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b568:	f04f 0901 	mov.w	r9, #1
 800b56c:	4623      	mov	r3, r4
 800b56e:	469a      	mov	sl, r3
 800b570:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b574:	b10a      	cbz	r2, 800b57a <_vfiprintf_r+0x86>
 800b576:	2a25      	cmp	r2, #37	@ 0x25
 800b578:	d1f9      	bne.n	800b56e <_vfiprintf_r+0x7a>
 800b57a:	ebba 0b04 	subs.w	fp, sl, r4
 800b57e:	d00b      	beq.n	800b598 <_vfiprintf_r+0xa4>
 800b580:	465b      	mov	r3, fp
 800b582:	4622      	mov	r2, r4
 800b584:	4629      	mov	r1, r5
 800b586:	4630      	mov	r0, r6
 800b588:	f7ff ffa2 	bl	800b4d0 <__sfputs_r>
 800b58c:	3001      	adds	r0, #1
 800b58e:	f000 80a7 	beq.w	800b6e0 <_vfiprintf_r+0x1ec>
 800b592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b594:	445a      	add	r2, fp
 800b596:	9209      	str	r2, [sp, #36]	@ 0x24
 800b598:	f89a 3000 	ldrb.w	r3, [sl]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 809f 	beq.w	800b6e0 <_vfiprintf_r+0x1ec>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ac:	f10a 0a01 	add.w	sl, sl, #1
 800b5b0:	9304      	str	r3, [sp, #16]
 800b5b2:	9307      	str	r3, [sp, #28]
 800b5b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5ba:	4654      	mov	r4, sl
 800b5bc:	2205      	movs	r2, #5
 800b5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c2:	4853      	ldr	r0, [pc, #332]	@ (800b710 <_vfiprintf_r+0x21c>)
 800b5c4:	f7f4 fe1c 	bl	8000200 <memchr>
 800b5c8:	9a04      	ldr	r2, [sp, #16]
 800b5ca:	b9d8      	cbnz	r0, 800b604 <_vfiprintf_r+0x110>
 800b5cc:	06d1      	lsls	r1, r2, #27
 800b5ce:	bf44      	itt	mi
 800b5d0:	2320      	movmi	r3, #32
 800b5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5d6:	0713      	lsls	r3, r2, #28
 800b5d8:	bf44      	itt	mi
 800b5da:	232b      	movmi	r3, #43	@ 0x2b
 800b5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5e6:	d015      	beq.n	800b614 <_vfiprintf_r+0x120>
 800b5e8:	9a07      	ldr	r2, [sp, #28]
 800b5ea:	4654      	mov	r4, sl
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f04f 0c0a 	mov.w	ip, #10
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5f8:	3b30      	subs	r3, #48	@ 0x30
 800b5fa:	2b09      	cmp	r3, #9
 800b5fc:	d94b      	bls.n	800b696 <_vfiprintf_r+0x1a2>
 800b5fe:	b1b0      	cbz	r0, 800b62e <_vfiprintf_r+0x13a>
 800b600:	9207      	str	r2, [sp, #28]
 800b602:	e014      	b.n	800b62e <_vfiprintf_r+0x13a>
 800b604:	eba0 0308 	sub.w	r3, r0, r8
 800b608:	fa09 f303 	lsl.w	r3, r9, r3
 800b60c:	4313      	orrs	r3, r2
 800b60e:	9304      	str	r3, [sp, #16]
 800b610:	46a2      	mov	sl, r4
 800b612:	e7d2      	b.n	800b5ba <_vfiprintf_r+0xc6>
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	1d19      	adds	r1, r3, #4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	9103      	str	r1, [sp, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	bfbb      	ittet	lt
 800b620:	425b      	neglt	r3, r3
 800b622:	f042 0202 	orrlt.w	r2, r2, #2
 800b626:	9307      	strge	r3, [sp, #28]
 800b628:	9307      	strlt	r3, [sp, #28]
 800b62a:	bfb8      	it	lt
 800b62c:	9204      	strlt	r2, [sp, #16]
 800b62e:	7823      	ldrb	r3, [r4, #0]
 800b630:	2b2e      	cmp	r3, #46	@ 0x2e
 800b632:	d10a      	bne.n	800b64a <_vfiprintf_r+0x156>
 800b634:	7863      	ldrb	r3, [r4, #1]
 800b636:	2b2a      	cmp	r3, #42	@ 0x2a
 800b638:	d132      	bne.n	800b6a0 <_vfiprintf_r+0x1ac>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	1d1a      	adds	r2, r3, #4
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	9203      	str	r2, [sp, #12]
 800b642:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b646:	3402      	adds	r4, #2
 800b648:	9305      	str	r3, [sp, #20]
 800b64a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b720 <_vfiprintf_r+0x22c>
 800b64e:	7821      	ldrb	r1, [r4, #0]
 800b650:	2203      	movs	r2, #3
 800b652:	4650      	mov	r0, sl
 800b654:	f7f4 fdd4 	bl	8000200 <memchr>
 800b658:	b138      	cbz	r0, 800b66a <_vfiprintf_r+0x176>
 800b65a:	9b04      	ldr	r3, [sp, #16]
 800b65c:	eba0 000a 	sub.w	r0, r0, sl
 800b660:	2240      	movs	r2, #64	@ 0x40
 800b662:	4082      	lsls	r2, r0
 800b664:	4313      	orrs	r3, r2
 800b666:	3401      	adds	r4, #1
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66e:	4829      	ldr	r0, [pc, #164]	@ (800b714 <_vfiprintf_r+0x220>)
 800b670:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b674:	2206      	movs	r2, #6
 800b676:	f7f4 fdc3 	bl	8000200 <memchr>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d03f      	beq.n	800b6fe <_vfiprintf_r+0x20a>
 800b67e:	4b26      	ldr	r3, [pc, #152]	@ (800b718 <_vfiprintf_r+0x224>)
 800b680:	bb1b      	cbnz	r3, 800b6ca <_vfiprintf_r+0x1d6>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	3307      	adds	r3, #7
 800b686:	f023 0307 	bic.w	r3, r3, #7
 800b68a:	3308      	adds	r3, #8
 800b68c:	9303      	str	r3, [sp, #12]
 800b68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b690:	443b      	add	r3, r7
 800b692:	9309      	str	r3, [sp, #36]	@ 0x24
 800b694:	e76a      	b.n	800b56c <_vfiprintf_r+0x78>
 800b696:	fb0c 3202 	mla	r2, ip, r2, r3
 800b69a:	460c      	mov	r4, r1
 800b69c:	2001      	movs	r0, #1
 800b69e:	e7a8      	b.n	800b5f2 <_vfiprintf_r+0xfe>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	3401      	adds	r4, #1
 800b6a4:	9305      	str	r3, [sp, #20]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	f04f 0c0a 	mov.w	ip, #10
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b2:	3a30      	subs	r2, #48	@ 0x30
 800b6b4:	2a09      	cmp	r2, #9
 800b6b6:	d903      	bls.n	800b6c0 <_vfiprintf_r+0x1cc>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0c6      	beq.n	800b64a <_vfiprintf_r+0x156>
 800b6bc:	9105      	str	r1, [sp, #20]
 800b6be:	e7c4      	b.n	800b64a <_vfiprintf_r+0x156>
 800b6c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e7f0      	b.n	800b6ac <_vfiprintf_r+0x1b8>
 800b6ca:	ab03      	add	r3, sp, #12
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	462a      	mov	r2, r5
 800b6d0:	4b12      	ldr	r3, [pc, #72]	@ (800b71c <_vfiprintf_r+0x228>)
 800b6d2:	a904      	add	r1, sp, #16
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f3af 8000 	nop.w
 800b6da:	4607      	mov	r7, r0
 800b6dc:	1c78      	adds	r0, r7, #1
 800b6de:	d1d6      	bne.n	800b68e <_vfiprintf_r+0x19a>
 800b6e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6e2:	07d9      	lsls	r1, r3, #31
 800b6e4:	d405      	bmi.n	800b6f2 <_vfiprintf_r+0x1fe>
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	059a      	lsls	r2, r3, #22
 800b6ea:	d402      	bmi.n	800b6f2 <_vfiprintf_r+0x1fe>
 800b6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6ee:	f7ff fa6d 	bl	800abcc <__retarget_lock_release_recursive>
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	065b      	lsls	r3, r3, #25
 800b6f6:	f53f af1f 	bmi.w	800b538 <_vfiprintf_r+0x44>
 800b6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6fc:	e71e      	b.n	800b53c <_vfiprintf_r+0x48>
 800b6fe:	ab03      	add	r3, sp, #12
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	462a      	mov	r2, r5
 800b704:	4b05      	ldr	r3, [pc, #20]	@ (800b71c <_vfiprintf_r+0x228>)
 800b706:	a904      	add	r1, sp, #16
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff fc9d 	bl	800b048 <_printf_i>
 800b70e:	e7e4      	b.n	800b6da <_vfiprintf_r+0x1e6>
 800b710:	0800bea2 	.word	0x0800bea2
 800b714:	0800beac 	.word	0x0800beac
 800b718:	00000000 	.word	0x00000000
 800b71c:	0800b4d1 	.word	0x0800b4d1
 800b720:	0800bea8 	.word	0x0800bea8

0800b724 <__swbuf_r>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	460e      	mov	r6, r1
 800b728:	4614      	mov	r4, r2
 800b72a:	4605      	mov	r5, r0
 800b72c:	b118      	cbz	r0, 800b736 <__swbuf_r+0x12>
 800b72e:	6a03      	ldr	r3, [r0, #32]
 800b730:	b90b      	cbnz	r3, 800b736 <__swbuf_r+0x12>
 800b732:	f7ff f8cb 	bl	800a8cc <__sinit>
 800b736:	69a3      	ldr	r3, [r4, #24]
 800b738:	60a3      	str	r3, [r4, #8]
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	071a      	lsls	r2, r3, #28
 800b73e:	d501      	bpl.n	800b744 <__swbuf_r+0x20>
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	b943      	cbnz	r3, 800b756 <__swbuf_r+0x32>
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f000 f82a 	bl	800b7a0 <__swsetup_r>
 800b74c:	b118      	cbz	r0, 800b756 <__swbuf_r+0x32>
 800b74e:	f04f 37ff 	mov.w	r7, #4294967295
 800b752:	4638      	mov	r0, r7
 800b754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	6922      	ldr	r2, [r4, #16]
 800b75a:	1a98      	subs	r0, r3, r2
 800b75c:	6963      	ldr	r3, [r4, #20]
 800b75e:	b2f6      	uxtb	r6, r6
 800b760:	4283      	cmp	r3, r0
 800b762:	4637      	mov	r7, r6
 800b764:	dc05      	bgt.n	800b772 <__swbuf_r+0x4e>
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f7ff fe11 	bl	800b390 <_fflush_r>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d1ed      	bne.n	800b74e <__swbuf_r+0x2a>
 800b772:	68a3      	ldr	r3, [r4, #8]
 800b774:	3b01      	subs	r3, #1
 800b776:	60a3      	str	r3, [r4, #8]
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	6022      	str	r2, [r4, #0]
 800b77e:	701e      	strb	r6, [r3, #0]
 800b780:	6962      	ldr	r2, [r4, #20]
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	429a      	cmp	r2, r3
 800b786:	d004      	beq.n	800b792 <__swbuf_r+0x6e>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	07db      	lsls	r3, r3, #31
 800b78c:	d5e1      	bpl.n	800b752 <__swbuf_r+0x2e>
 800b78e:	2e0a      	cmp	r6, #10
 800b790:	d1df      	bne.n	800b752 <__swbuf_r+0x2e>
 800b792:	4621      	mov	r1, r4
 800b794:	4628      	mov	r0, r5
 800b796:	f7ff fdfb 	bl	800b390 <_fflush_r>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d0d9      	beq.n	800b752 <__swbuf_r+0x2e>
 800b79e:	e7d6      	b.n	800b74e <__swbuf_r+0x2a>

0800b7a0 <__swsetup_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4b29      	ldr	r3, [pc, #164]	@ (800b848 <__swsetup_r+0xa8>)
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	b118      	cbz	r0, 800b7b4 <__swsetup_r+0x14>
 800b7ac:	6a03      	ldr	r3, [r0, #32]
 800b7ae:	b90b      	cbnz	r3, 800b7b4 <__swsetup_r+0x14>
 800b7b0:	f7ff f88c 	bl	800a8cc <__sinit>
 800b7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b8:	0719      	lsls	r1, r3, #28
 800b7ba:	d422      	bmi.n	800b802 <__swsetup_r+0x62>
 800b7bc:	06da      	lsls	r2, r3, #27
 800b7be:	d407      	bmi.n	800b7d0 <__swsetup_r+0x30>
 800b7c0:	2209      	movs	r2, #9
 800b7c2:	602a      	str	r2, [r5, #0]
 800b7c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ce:	e033      	b.n	800b838 <__swsetup_r+0x98>
 800b7d0:	0758      	lsls	r0, r3, #29
 800b7d2:	d512      	bpl.n	800b7fa <__swsetup_r+0x5a>
 800b7d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7d6:	b141      	cbz	r1, 800b7ea <__swsetup_r+0x4a>
 800b7d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	d002      	beq.n	800b7e6 <__swsetup_r+0x46>
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f7ff fa21 	bl	800ac28 <_free_r>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7f0:	81a3      	strh	r3, [r4, #12]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	6063      	str	r3, [r4, #4]
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f043 0308 	orr.w	r3, r3, #8
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	b94b      	cbnz	r3, 800b81a <__swsetup_r+0x7a>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b810:	d003      	beq.n	800b81a <__swsetup_r+0x7a>
 800b812:	4621      	mov	r1, r4
 800b814:	4628      	mov	r0, r5
 800b816:	f000 f88b 	bl	800b930 <__smakebuf_r>
 800b81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81e:	f013 0201 	ands.w	r2, r3, #1
 800b822:	d00a      	beq.n	800b83a <__swsetup_r+0x9a>
 800b824:	2200      	movs	r2, #0
 800b826:	60a2      	str	r2, [r4, #8]
 800b828:	6962      	ldr	r2, [r4, #20]
 800b82a:	4252      	negs	r2, r2
 800b82c:	61a2      	str	r2, [r4, #24]
 800b82e:	6922      	ldr	r2, [r4, #16]
 800b830:	b942      	cbnz	r2, 800b844 <__swsetup_r+0xa4>
 800b832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b836:	d1c5      	bne.n	800b7c4 <__swsetup_r+0x24>
 800b838:	bd38      	pop	{r3, r4, r5, pc}
 800b83a:	0799      	lsls	r1, r3, #30
 800b83c:	bf58      	it	pl
 800b83e:	6962      	ldrpl	r2, [r4, #20]
 800b840:	60a2      	str	r2, [r4, #8]
 800b842:	e7f4      	b.n	800b82e <__swsetup_r+0x8e>
 800b844:	2000      	movs	r0, #0
 800b846:	e7f7      	b.n	800b838 <__swsetup_r+0x98>
 800b848:	20000100 	.word	0x20000100

0800b84c <_raise_r>:
 800b84c:	291f      	cmp	r1, #31
 800b84e:	b538      	push	{r3, r4, r5, lr}
 800b850:	4605      	mov	r5, r0
 800b852:	460c      	mov	r4, r1
 800b854:	d904      	bls.n	800b860 <_raise_r+0x14>
 800b856:	2316      	movs	r3, #22
 800b858:	6003      	str	r3, [r0, #0]
 800b85a:	f04f 30ff 	mov.w	r0, #4294967295
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b862:	b112      	cbz	r2, 800b86a <_raise_r+0x1e>
 800b864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b868:	b94b      	cbnz	r3, 800b87e <_raise_r+0x32>
 800b86a:	4628      	mov	r0, r5
 800b86c:	f000 f830 	bl	800b8d0 <_getpid_r>
 800b870:	4622      	mov	r2, r4
 800b872:	4601      	mov	r1, r0
 800b874:	4628      	mov	r0, r5
 800b876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b87a:	f000 b817 	b.w	800b8ac <_kill_r>
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d00a      	beq.n	800b898 <_raise_r+0x4c>
 800b882:	1c59      	adds	r1, r3, #1
 800b884:	d103      	bne.n	800b88e <_raise_r+0x42>
 800b886:	2316      	movs	r3, #22
 800b888:	6003      	str	r3, [r0, #0]
 800b88a:	2001      	movs	r0, #1
 800b88c:	e7e7      	b.n	800b85e <_raise_r+0x12>
 800b88e:	2100      	movs	r1, #0
 800b890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b894:	4620      	mov	r0, r4
 800b896:	4798      	blx	r3
 800b898:	2000      	movs	r0, #0
 800b89a:	e7e0      	b.n	800b85e <_raise_r+0x12>

0800b89c <raise>:
 800b89c:	4b02      	ldr	r3, [pc, #8]	@ (800b8a8 <raise+0xc>)
 800b89e:	4601      	mov	r1, r0
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	f7ff bfd3 	b.w	800b84c <_raise_r>
 800b8a6:	bf00      	nop
 800b8a8:	20000100 	.word	0x20000100

0800b8ac <_kill_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d07      	ldr	r5, [pc, #28]	@ (800b8cc <_kill_r+0x20>)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	602b      	str	r3, [r5, #0]
 800b8ba:	f7f5 fd9f 	bl	80013fc <_kill>
 800b8be:	1c43      	adds	r3, r0, #1
 800b8c0:	d102      	bne.n	800b8c8 <_kill_r+0x1c>
 800b8c2:	682b      	ldr	r3, [r5, #0]
 800b8c4:	b103      	cbz	r3, 800b8c8 <_kill_r+0x1c>
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20001e74 	.word	0x20001e74

0800b8d0 <_getpid_r>:
 800b8d0:	f7f5 bd8c 	b.w	80013ec <_getpid>

0800b8d4 <_malloc_usable_size_r>:
 800b8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d8:	1f18      	subs	r0, r3, #4
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	bfbc      	itt	lt
 800b8de:	580b      	ldrlt	r3, [r1, r0]
 800b8e0:	18c0      	addlt	r0, r0, r3
 800b8e2:	4770      	bx	lr

0800b8e4 <__swhatbuf_r>:
 800b8e4:	b570      	push	{r4, r5, r6, lr}
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	b096      	sub	sp, #88	@ 0x58
 800b8f0:	4615      	mov	r5, r2
 800b8f2:	461e      	mov	r6, r3
 800b8f4:	da0d      	bge.n	800b912 <__swhatbuf_r+0x2e>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8fc:	f04f 0100 	mov.w	r1, #0
 800b900:	bf14      	ite	ne
 800b902:	2340      	movne	r3, #64	@ 0x40
 800b904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b908:	2000      	movs	r0, #0
 800b90a:	6031      	str	r1, [r6, #0]
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	b016      	add	sp, #88	@ 0x58
 800b910:	bd70      	pop	{r4, r5, r6, pc}
 800b912:	466a      	mov	r2, sp
 800b914:	f000 f848 	bl	800b9a8 <_fstat_r>
 800b918:	2800      	cmp	r0, #0
 800b91a:	dbec      	blt.n	800b8f6 <__swhatbuf_r+0x12>
 800b91c:	9901      	ldr	r1, [sp, #4]
 800b91e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b926:	4259      	negs	r1, r3
 800b928:	4159      	adcs	r1, r3
 800b92a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b92e:	e7eb      	b.n	800b908 <__swhatbuf_r+0x24>

0800b930 <__smakebuf_r>:
 800b930:	898b      	ldrh	r3, [r1, #12]
 800b932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b934:	079d      	lsls	r5, r3, #30
 800b936:	4606      	mov	r6, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	d507      	bpl.n	800b94c <__smakebuf_r+0x1c>
 800b93c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	2301      	movs	r3, #1
 800b946:	6163      	str	r3, [r4, #20]
 800b948:	b003      	add	sp, #12
 800b94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94c:	ab01      	add	r3, sp, #4
 800b94e:	466a      	mov	r2, sp
 800b950:	f7ff ffc8 	bl	800b8e4 <__swhatbuf_r>
 800b954:	9f00      	ldr	r7, [sp, #0]
 800b956:	4605      	mov	r5, r0
 800b958:	4639      	mov	r1, r7
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7fe fe1a 	bl	800a594 <_malloc_r>
 800b960:	b948      	cbnz	r0, 800b976 <__smakebuf_r+0x46>
 800b962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b966:	059a      	lsls	r2, r3, #22
 800b968:	d4ee      	bmi.n	800b948 <__smakebuf_r+0x18>
 800b96a:	f023 0303 	bic.w	r3, r3, #3
 800b96e:	f043 0302 	orr.w	r3, r3, #2
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	e7e2      	b.n	800b93c <__smakebuf_r+0xc>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	6020      	str	r0, [r4, #0]
 800b97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b986:	b15b      	cbz	r3, 800b9a0 <__smakebuf_r+0x70>
 800b988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f81d 	bl	800b9cc <_isatty_r>
 800b992:	b128      	cbz	r0, 800b9a0 <__smakebuf_r+0x70>
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	f023 0303 	bic.w	r3, r3, #3
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	89a3      	ldrh	r3, [r4, #12]
 800b9a2:	431d      	orrs	r5, r3
 800b9a4:	81a5      	strh	r5, [r4, #12]
 800b9a6:	e7cf      	b.n	800b948 <__smakebuf_r+0x18>

0800b9a8 <_fstat_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d07      	ldr	r5, [pc, #28]	@ (800b9c8 <_fstat_r+0x20>)
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	f7f5 fd81 	bl	80014bc <_fstat>
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	d102      	bne.n	800b9c4 <_fstat_r+0x1c>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	b103      	cbz	r3, 800b9c4 <_fstat_r+0x1c>
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20001e74 	.word	0x20001e74

0800b9cc <_isatty_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d06      	ldr	r5, [pc, #24]	@ (800b9e8 <_isatty_r+0x1c>)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	602b      	str	r3, [r5, #0]
 800b9d8:	f7f5 fd80 	bl	80014dc <_isatty>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d102      	bne.n	800b9e6 <_isatty_r+0x1a>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	b103      	cbz	r3, 800b9e6 <_isatty_r+0x1a>
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	20001e74 	.word	0x20001e74

0800b9ec <_init>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <_fini>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr
