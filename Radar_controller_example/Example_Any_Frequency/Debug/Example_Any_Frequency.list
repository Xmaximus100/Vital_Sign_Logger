
Example_Any_Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b774  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800b904  0800b904  0000c904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd40  0800bd40  0000d124  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd40  0800bd40  0000cd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd48  0800bd48  0000d124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd48  0800bd48  0000cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd4c  0800bd4c  0000cd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  0800bd50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d28  20000128  0800be74  0000d128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  0800be74  0000de50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231d6  00000000  00000000  0000d154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056bd  00000000  00000000  0003032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e60  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001744  00000000  00000000  00037848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7a0  00000000  00000000  00038f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026d77  00000000  00000000  0006672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105374  00000000  00000000  0008d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a28  00000000  00000000  0019285c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  0019b284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8ec 	.word	0x0800b8ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0800b8ec 	.word	0x0800b8ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b96a 	b.w	8000944 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	460c      	mov	r4, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14e      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000694:	4694      	mov	ip, r2
 8000696:	458c      	cmp	ip, r1
 8000698:	4686      	mov	lr, r0
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	d962      	bls.n	8000766 <__udivmoddi4+0xde>
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0320 	rsb	r3, r2, #32
 80006a6:	4091      	lsls	r1, r2
 80006a8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b0:	4319      	orrs	r1, r3
 80006b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ba:	fa1f f68c 	uxth.w	r6, ip
 80006be:	fbb1 f4f7 	udiv	r4, r1, r7
 80006c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006c6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ce:	fb04 f106 	mul.w	r1, r4, r6
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f104 30ff 	add.w	r0, r4, #4294967295
 80006de:	f080 8112 	bcs.w	8000906 <__udivmoddi4+0x27e>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 810f 	bls.w	8000906 <__udivmoddi4+0x27e>
 80006e8:	3c02      	subs	r4, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a59      	subs	r1, r3, r1
 80006ee:	fa1f f38e 	uxth.w	r3, lr
 80006f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f6:	fb07 1110 	mls	r1, r7, r0, r1
 80006fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006fe:	fb00 f606 	mul.w	r6, r0, r6
 8000702:	429e      	cmp	r6, r3
 8000704:	d90a      	bls.n	800071c <__udivmoddi4+0x94>
 8000706:	eb1c 0303 	adds.w	r3, ip, r3
 800070a:	f100 31ff 	add.w	r1, r0, #4294967295
 800070e:	f080 80fc 	bcs.w	800090a <__udivmoddi4+0x282>
 8000712:	429e      	cmp	r6, r3
 8000714:	f240 80f9 	bls.w	800090a <__udivmoddi4+0x282>
 8000718:	4463      	add	r3, ip
 800071a:	3802      	subs	r0, #2
 800071c:	1b9b      	subs	r3, r3, r6
 800071e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000722:	2100      	movs	r1, #0
 8000724:	b11d      	cbz	r5, 800072e <__udivmoddi4+0xa6>
 8000726:	40d3      	lsrs	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	e9c5 3200 	strd	r3, r2, [r5]
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d905      	bls.n	8000742 <__udivmoddi4+0xba>
 8000736:	b10d      	cbz	r5, 800073c <__udivmoddi4+0xb4>
 8000738:	e9c5 0100 	strd	r0, r1, [r5]
 800073c:	2100      	movs	r1, #0
 800073e:	4608      	mov	r0, r1
 8000740:	e7f5      	b.n	800072e <__udivmoddi4+0xa6>
 8000742:	fab3 f183 	clz	r1, r3
 8000746:	2900      	cmp	r1, #0
 8000748:	d146      	bne.n	80007d8 <__udivmoddi4+0x150>
 800074a:	42a3      	cmp	r3, r4
 800074c:	d302      	bcc.n	8000754 <__udivmoddi4+0xcc>
 800074e:	4290      	cmp	r0, r2
 8000750:	f0c0 80f0 	bcc.w	8000934 <__udivmoddi4+0x2ac>
 8000754:	1a86      	subs	r6, r0, r2
 8000756:	eb64 0303 	sbc.w	r3, r4, r3
 800075a:	2001      	movs	r0, #1
 800075c:	2d00      	cmp	r5, #0
 800075e:	d0e6      	beq.n	800072e <__udivmoddi4+0xa6>
 8000760:	e9c5 6300 	strd	r6, r3, [r5]
 8000764:	e7e3      	b.n	800072e <__udivmoddi4+0xa6>
 8000766:	2a00      	cmp	r2, #0
 8000768:	f040 8090 	bne.w	800088c <__udivmoddi4+0x204>
 800076c:	eba1 040c 	sub.w	r4, r1, ip
 8000770:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000774:	fa1f f78c 	uxth.w	r7, ip
 8000778:	2101      	movs	r1, #1
 800077a:	fbb4 f6f8 	udiv	r6, r4, r8
 800077e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000782:	fb08 4416 	mls	r4, r8, r6, r4
 8000786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078a:	fb07 f006 	mul.w	r0, r7, r6
 800078e:	4298      	cmp	r0, r3
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x11c>
 8000792:	eb1c 0303 	adds.w	r3, ip, r3
 8000796:	f106 34ff 	add.w	r4, r6, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x11a>
 800079c:	4298      	cmp	r0, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2b4>
 80007a2:	4626      	mov	r6, r4
 80007a4:	1a1c      	subs	r4, r3, r0
 80007a6:	fa1f f38e 	uxth.w	r3, lr
 80007aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ae:	fb08 4410 	mls	r4, r8, r0, r4
 80007b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007b6:	fb00 f707 	mul.w	r7, r0, r7
 80007ba:	429f      	cmp	r7, r3
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x148>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c6:	d202      	bcs.n	80007ce <__udivmoddi4+0x146>
 80007c8:	429f      	cmp	r7, r3
 80007ca:	f200 80b0 	bhi.w	800092e <__udivmoddi4+0x2a6>
 80007ce:	4620      	mov	r0, r4
 80007d0:	1bdb      	subs	r3, r3, r7
 80007d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007d6:	e7a5      	b.n	8000724 <__udivmoddi4+0x9c>
 80007d8:	f1c1 0620 	rsb	r6, r1, #32
 80007dc:	408b      	lsls	r3, r1
 80007de:	fa22 f706 	lsr.w	r7, r2, r6
 80007e2:	431f      	orrs	r7, r3
 80007e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007e8:	fa04 f301 	lsl.w	r3, r4, r1
 80007ec:	ea43 030c 	orr.w	r3, r3, ip
 80007f0:	40f4      	lsrs	r4, r6
 80007f2:	fa00 f801 	lsl.w	r8, r0, r1
 80007f6:	0c38      	lsrs	r0, r7, #16
 80007f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000800:	fa1f fc87 	uxth.w	ip, r7
 8000804:	fb00 441e 	mls	r4, r0, lr, r4
 8000808:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080c:	fb0e f90c 	mul.w	r9, lr, ip
 8000810:	45a1      	cmp	r9, r4
 8000812:	fa02 f201 	lsl.w	r2, r2, r1
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x1a6>
 8000818:	193c      	adds	r4, r7, r4
 800081a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800081e:	f080 8084 	bcs.w	800092a <__udivmoddi4+0x2a2>
 8000822:	45a1      	cmp	r9, r4
 8000824:	f240 8081 	bls.w	800092a <__udivmoddi4+0x2a2>
 8000828:	f1ae 0e02 	sub.w	lr, lr, #2
 800082c:	443c      	add	r4, r7
 800082e:	eba4 0409 	sub.w	r4, r4, r9
 8000832:	fa1f f983 	uxth.w	r9, r3
 8000836:	fbb4 f3f0 	udiv	r3, r4, r0
 800083a:	fb00 4413 	mls	r4, r0, r3, r4
 800083e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000842:	fb03 fc0c 	mul.w	ip, r3, ip
 8000846:	45a4      	cmp	ip, r4
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x1d2>
 800084a:	193c      	adds	r4, r7, r4
 800084c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000850:	d267      	bcs.n	8000922 <__udivmoddi4+0x29a>
 8000852:	45a4      	cmp	ip, r4
 8000854:	d965      	bls.n	8000922 <__udivmoddi4+0x29a>
 8000856:	3b02      	subs	r3, #2
 8000858:	443c      	add	r4, r7
 800085a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800085e:	fba0 9302 	umull	r9, r3, r0, r2
 8000862:	eba4 040c 	sub.w	r4, r4, ip
 8000866:	429c      	cmp	r4, r3
 8000868:	46ce      	mov	lr, r9
 800086a:	469c      	mov	ip, r3
 800086c:	d351      	bcc.n	8000912 <__udivmoddi4+0x28a>
 800086e:	d04e      	beq.n	800090e <__udivmoddi4+0x286>
 8000870:	b155      	cbz	r5, 8000888 <__udivmoddi4+0x200>
 8000872:	ebb8 030e 	subs.w	r3, r8, lr
 8000876:	eb64 040c 	sbc.w	r4, r4, ip
 800087a:	fa04 f606 	lsl.w	r6, r4, r6
 800087e:	40cb      	lsrs	r3, r1
 8000880:	431e      	orrs	r6, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c5 6400 	strd	r6, r4, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	e750      	b.n	800072e <__udivmoddi4+0xa6>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f103 	lsr.w	r1, r0, r3
 8000894:	fa0c fc02 	lsl.w	ip, ip, r2
 8000898:	fa24 f303 	lsr.w	r3, r4, r3
 800089c:	4094      	lsls	r4, r2
 800089e:	430c      	orrs	r4, r1
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a8:	fa1f f78c 	uxth.w	r7, ip
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3110 	mls	r1, r8, r0, r3
 80008b4:	0c23      	lsrs	r3, r4, #16
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f107 	mul.w	r1, r0, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x24c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ca:	d22c      	bcs.n	8000926 <__udivmoddi4+0x29e>
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d92a      	bls.n	8000926 <__udivmoddi4+0x29e>
 80008d0:	3802      	subs	r0, #2
 80008d2:	4463      	add	r3, ip
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008dc:	fb08 3311 	mls	r3, r8, r1, r3
 80008e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e4:	fb01 f307 	mul.w	r3, r1, r7
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x276>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008f4:	d213      	bcs.n	800091e <__udivmoddi4+0x296>
 80008f6:	42a3      	cmp	r3, r4
 80008f8:	d911      	bls.n	800091e <__udivmoddi4+0x296>
 80008fa:	3902      	subs	r1, #2
 80008fc:	4464      	add	r4, ip
 80008fe:	1ae4      	subs	r4, r4, r3
 8000900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000904:	e739      	b.n	800077a <__udivmoddi4+0xf2>
 8000906:	4604      	mov	r4, r0
 8000908:	e6f0      	b.n	80006ec <__udivmoddi4+0x64>
 800090a:	4608      	mov	r0, r1
 800090c:	e706      	b.n	800071c <__udivmoddi4+0x94>
 800090e:	45c8      	cmp	r8, r9
 8000910:	d2ae      	bcs.n	8000870 <__udivmoddi4+0x1e8>
 8000912:	ebb9 0e02 	subs.w	lr, r9, r2
 8000916:	eb63 0c07 	sbc.w	ip, r3, r7
 800091a:	3801      	subs	r0, #1
 800091c:	e7a8      	b.n	8000870 <__udivmoddi4+0x1e8>
 800091e:	4631      	mov	r1, r6
 8000920:	e7ed      	b.n	80008fe <__udivmoddi4+0x276>
 8000922:	4603      	mov	r3, r0
 8000924:	e799      	b.n	800085a <__udivmoddi4+0x1d2>
 8000926:	4630      	mov	r0, r6
 8000928:	e7d4      	b.n	80008d4 <__udivmoddi4+0x24c>
 800092a:	46d6      	mov	lr, sl
 800092c:	e77f      	b.n	800082e <__udivmoddi4+0x1a6>
 800092e:	4463      	add	r3, ip
 8000930:	3802      	subs	r0, #2
 8000932:	e74d      	b.n	80007d0 <__udivmoddi4+0x148>
 8000934:	4606      	mov	r6, r0
 8000936:	4623      	mov	r3, r4
 8000938:	4608      	mov	r0, r1
 800093a:	e70f      	b.n	800075c <__udivmoddi4+0xd4>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	e730      	b.n	80007a4 <__udivmoddi4+0x11c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <Initialize_Delay>:
/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

HAL_StatusTypeDef Initialize_Delay()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <Initialize_Delay+0x10>)
 800094e:	f004 fe5b 	bl	8005608 <HAL_TIM_Base_Start>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000254 	.word	0x20000254

0800095c <delay_us>:

void delay_us(uint32_t us)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
//	if (us > 999)
//	{
//		adf5355_delay_ms(ceil(us/1000));
//		return;
//	}
	taskENTER_CRITICAL();
 8000964:	f009 fa40 	bl	8009de8 <vPortEnterCritical>
	int timer_val_start = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000968:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <delay_us+0x44>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096e:	60bb      	str	r3, [r7, #8]
	int timer_val = timer_val_start;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 8000974:	e003      	b.n	800097e <delay_us+0x22>
		timer_val = __HAL_TIM_GET_COUNTER(&s_TimerInstance);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <delay_us+0x44>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097c:	60fb      	str	r3, [r7, #12]
	while(abs(timer_val - timer_val_start) < us){
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	bfb8      	it	lt
 8000988:	425b      	neglt	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4293      	cmp	r3, r2
 8000990:	d8f1      	bhi.n	8000976 <delay_us+0x1a>
	}
	taskEXIT_CRITICAL();
 8000992:	f009 fa5b 	bl	8009e4c <vPortExitCritical>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000

080009a4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f002 f891 	bl	8002ad4 <HAL_Delay>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_DMA_Init+0x2c>)
 80009d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009f0:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_FREERTOS_Init+0x48>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <MX_FREERTOS_Init+0x4c>)
 80009f6:	f006 fd11 	bl	800741c <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <MX_FREERTOS_Init+0x50>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of adc_handler */
  adc_handlerHandle = osThreadNew(StartADC, NULL, &adc_handler_attributes);
 8000a00:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <MX_FREERTOS_Init+0x54>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <MX_FREERTOS_Init+0x58>)
 8000a06:	f006 fd09 	bl	800741c <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <MX_FREERTOS_Init+0x5c>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of pll_handler */
  pll_handlerHandle = osThreadNew(StartPLL, NULL, &pll_handler_attributes);
 8000a10:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <MX_FREERTOS_Init+0x60>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <MX_FREERTOS_Init+0x64>)
 8000a16:	f006 fd01 	bl	800741c <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <MX_FREERTOS_Init+0x68>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* creation of at_cmds_handler */
  at_cmds_handlerHandle = osThreadNew(StartATCmds, NULL, &at_cmds_handler_attributes);
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <MX_FREERTOS_Init+0x6c>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_FREERTOS_Init+0x70>)
 8000a26:	f006 fcf9 	bl	800741c <osThreadNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <MX_FREERTOS_Init+0x74>)
 8000a2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0800ba84 	.word	0x0800ba84
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	20000190 	.word	0x20000190
 8000a40:	0800baa8 	.word	0x0800baa8
 8000a44:	08000a71 	.word	0x08000a71
 8000a48:	20000194 	.word	0x20000194
 8000a4c:	0800bacc 	.word	0x0800bacc
 8000a50:	08000a8d 	.word	0x08000a8d
 8000a54:	20000198 	.word	0x20000198
 8000a58:	0800baf0 	.word	0x0800baf0
 8000a5c:	08000a9d 	.word	0x08000a9d
 8000a60:	2000019c 	.word	0x2000019c

08000a64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t tmp_buf[20];
	uint8_t len;
  /* Infinite loop */
	for(;;)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <StartDefaultTask+0x8>

08000a70 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
	for(;;)
	{
	//	  UARTLog("Hello World\n\r");
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f006 fdac 	bl	80075dc <osThreadFlagsWait>
		ad7676_start_conversion();
 8000a84:	f000 ff8e 	bl	80019a4 <ad7676_start_conversion>
		osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8000a88:	bf00      	nop
 8000a8a:	e7f5      	b.n	8000a78 <StartADC+0x8>

08000a8c <StartPLL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPLL */
void StartPLL(void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
//	ADF5355_Param_Init();
//	basic_example_main(&hadf5355);
  /* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f006 fe22 	bl	80076de <osDelay>
 8000a9a:	e7fb      	b.n	8000a94 <StartPLL+0x8>

08000a9c <StartATCmds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartATCmds */
void StartATCmds(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartATCmds */
	uint8_t received_data[32];
	//	HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <StartATCmds+0x40>)
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <StartATCmds+0x44>)
 8000aaa:	f006 fbd5 	bl	8007258 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
	for(;;)
	{
		if(received_lines > 0){
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <StartATCmds+0x48>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0fb      	beq.n	8000aae <StartATCmds+0x12>
		  ParserTakeLine(&buffer, received_data);
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	480a      	ldr	r0, [pc, #40]	@ (8000ae8 <StartATCmds+0x4c>)
 8000abe:	f000 f9d9 	bl	8000e74 <ParserTakeLine>
		  ParserParse((char*)received_data);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f9fa 	bl	8000ec0 <ParserParse>
		  received_lines--;
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <StartATCmds+0x48>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <StartATCmds+0x48>)
 8000ad6:	701a      	strb	r2, [r3, #0]
		if(received_lines > 0){
 8000ad8:	e7e9      	b.n	8000aae <StartATCmds+0x12>
 8000ada:	bf00      	nop
 8000adc:	2000016c 	.word	0x2000016c
 8000ae0:	200002a0 	.word	0x200002a0
 8000ae4:	2000018c 	.word	0x2000018c
 8000ae8:	20000148 	.word	0x20000148

08000aec <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART2){
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d11e      	bne.n	8000b40 <HAL_UARTEx_RxEventCallback+0x54>
		if(RB_OK == WriteToBuffer(&buffer, receive_tmp, Size)){
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4910      	ldr	r1, [pc, #64]	@ (8000b4c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b0a:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b0c:	f000 fa68 	bl	8000fe0 <WriteToBuffer>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10c      	bne.n	8000b30 <HAL_UARTEx_RxEventCallback+0x44>
			if(receive_tmp[Size-1] == ENDLINE){
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b1c:	5cd3      	ldrb	r3, [r2, r3]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d109      	bne.n	8000b36 <HAL_UARTEx_RxEventCallback+0x4a>
				received_lines++;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e002      	b.n	8000b36 <HAL_UARTEx_RxEventCallback+0x4a>
			}
		}
		else FlushBuffer(&buffer);
 8000b30:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b32:	f000 fabd 	bl	80010b0 <FlushBuffer>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_tmp, 32);
 8000b36:	2220      	movs	r2, #32
 8000b38:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <HAL_UARTEx_RxEventCallback+0x60>)
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b3c:	f006 fb8c 	bl	8007258 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	2000016c 	.word	0x2000016c
 8000b50:	20000148 	.word	0x20000148
 8000b54:	2000018c 	.word	0x2000018c
 8000b58:	200002a0 	.word	0x200002a0

08000b5c <HAL_UART_TxCpltCallback>:
//		HAL_UART_Receive_IT(&huart2, &receive_tmp, 1);
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2){

  }
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == AD_BUSY_Pin){
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b80:	d107      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x22>
		ad7676_read_one_sample();
 8000b82:	f000 fee5 	bl	8001950 <ad7676_read_one_sample>
		osThreadFlagsSet(adc_handlerHandle, 0x01);
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f006 fcd7 	bl	8007540 <osThreadFlagsSet>
	}
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000194 	.word	0x20000194

08000ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b57      	ldr	r3, [pc, #348]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a56      	ldr	r2, [pc, #344]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a50      	ldr	r2, [pc, #320]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b4e      	ldr	r3, [pc, #312]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a4a      	ldr	r2, [pc, #296]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b48      	ldr	r3, [pc, #288]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b45      	ldr	r3, [pc, #276]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a44      	ldr	r2, [pc, #272]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <MX_GPIO_Init+0x174>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f002 fd73 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2101      	movs	r1, #1
 8000c26:	483c      	ldr	r0, [pc, #240]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c28:	f002 fd6e 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CNVST_GPIO_Port, AD_CNVST_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c32:	483a      	ldr	r0, [pc, #232]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c34:	f002 fd68 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADF_CS_GPIO_Port, ADF_CS_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c42:	f002 fd61 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|AD_BUSY_Pin;
 8000c46:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482f      	ldr	r0, [pc, #188]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c5e:	f002 fab5 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D15_Pin;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D15_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4829      	ldr	r0, [pc, #164]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c76:	f002 faa9 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c7a:	2320      	movs	r3, #32
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f002 fa9a 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	481a      	ldr	r0, [pc, #104]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000cb0:	f002 fa8c 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D9_Pin|D10_Pin
 8000cb4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8000cb8:	617b      	str	r3, [r7, #20]
                          |D11_Pin|D12_Pin|D13_Pin|D14_Pin
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000cca:	f002 fa7f 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_CNVST_Pin;
 8000cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD_CNVST_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000ce8:	f002 fa70 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin;
 8000cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADF_CS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 fa60 	bl	80031cc <HAL_GPIO_Init>

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	@ 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f001 fe96 	bl	8002a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f816 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f7ff ff38 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d30:	f7ff fe44 	bl	80009bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d34:	f000 fc88 	bl	8001648 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000d38:	f000 fc30 	bl	800159c <MX_TIM6_Init>
  MX_SPI3_Init();
 8000d3c:	f000 f9c8 	bl	80010d0 <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d40:	f000 f85b 	bl	8000dfa <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Initialize_Delay();
 8000d44:	f7ff fe00 	bl	8000948 <Initialize_Delay>
//	  ReadFromBuffer(&rb, test_val+i);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d48:	f006 fb1e 	bl	8007388 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d4c:	f7ff fe4e 	bl	80009ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d50:	f006 fb3e 	bl	80073d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <main+0x34>

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b096      	sub	sp, #88	@ 0x58
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	2244      	movs	r2, #68	@ 0x44
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f009 fdc9 	bl	800a8fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d7e:	f002 fd01 	bl	8003784 <HAL_PWREx_ControlVoltageScaling>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d88:	f000 f86e 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d96:	2310      	movs	r3, #16
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000daa:	2307      	movs	r3, #7
 8000dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fd38 	bl	8003830 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f84f 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2104      	movs	r1, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f900 	bl	8003fe8 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dee:	f000 f83b 	bl	8000e68 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3758      	adds	r7, #88	@ 0x58
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2017      	movs	r0, #23
 8000e04:	f001 ff42 	bl	8002c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e08:	2017      	movs	r0, #23
 8000e0a:	f001 ff5b 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	2026      	movs	r0, #38	@ 0x26
 8000e14:	f001 ff3a 	bl	8002c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e18:	2026      	movs	r0, #38	@ 0x26
 8000e1a:	f001 ff53 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2011      	movs	r0, #17
 8000e24:	f001 ff32 	bl	8002c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e28:	2011      	movs	r0, #17
 8000e2a:	f001 ff4b 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2010      	movs	r0, #16
 8000e34:	f001 ff2a 	bl	8002c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f001 ff43 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e56:	f001 fe1d 	bl	8002a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40000c00 	.word	0x40000c00

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <ParserTakeLine>:
	{"POW", "POW set to %ld\n\r", "Type POW between -10 and 10 in dBm\n\r", ADF5355_SetPower, 0},
	{"EN", "EN set to %ld\n\r", "Type EN 0 or 1\n\r", ADF5355_Enable, 0},
	{"RUN", "Configuration succeed\n\r", "Configuration failed\n\r", LoadADF5355, 1},
};

void ParserTakeLine(RingBuffer* buffer, uint8_t* destination){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp;
	  do{
		  ReadFromBuffer(buffer, &tmp);
 8000e82:	f107 030e 	add.w	r3, r7, #14
 8000e86:	4619      	mov	r1, r3
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f8e9 	bl	8001060 <ReadFromBuffer>
		  if(tmp == ENDLINE){
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	2b0a      	cmp	r3, #10
 8000e92:	d105      	bne.n	8000ea0 <ParserTakeLine+0x2c>
			  destination[i] = 0;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e004      	b.n	8000eaa <ParserTakeLine+0x36>
		  }
		  else{
			  destination[i] = tmp;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	7bba      	ldrb	r2, [r7, #14]
 8000ea8:	701a      	strb	r2, [r3, #0]
		  }
		  i++;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	3301      	adds	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
	  }while(tmp != ENDLINE);
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	2b0a      	cmp	r3, #10
 8000eb4:	d1e5      	bne.n	8000e82 <ParserTakeLine+0xe>
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ParserParse>:

void ParserParse(char* received_string){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b096      	sub	sp, #88	@ 0x58
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	char* endptr;
	char* parse_pointer = strtok(received_string, "=");
 8000ec8:	4941      	ldr	r1, [pc, #260]	@ (8000fd0 <ParserParse+0x110>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f009 fd20 	bl	800a910 <strtok>
 8000ed0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int32_t value = strtol(strtok(NULL,","), &endptr, 10);
 8000ed2:	4940      	ldr	r1, [pc, #256]	@ (8000fd4 <ParserParse+0x114>)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f009 fd1b 	bl	800a910 <strtok>
 8000eda:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ede:	220a      	movs	r2, #10
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f009 fbdd 	bl	800a6a0 <strtol>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	643b      	str	r3, [r7, #64]	@ 0x40
	char buffer[54];
	bool cmd_matched = false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ef4:	e053      	b.n	8000f9e <ParserParse+0xde>
		if(strcmp(at_cmds[i].command, parse_pointer) == 0){
 8000ef6:	4938      	ldr	r1, [pc, #224]	@ (8000fd8 <ParserParse+0x118>)
 8000ef8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f961 	bl	80001d0 <strcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d141      	bne.n	8000f98 <ParserParse+0xd8>
			bool* result = at_cmds[i].function(&value);
 8000f14:	4930      	ldr	r1, [pc, #192]	@ (8000fd8 <ParserParse+0x118>)
 8000f16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	330c      	adds	r3, #12
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4798      	blx	r3
 8000f2e:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (*result == true && (endptr != 0x00 || at_cmds[i].optional_argument == 1)){
 8000f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01d      	beq.n	8000f74 <ParserParse+0xb4>
 8000f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <ParserParse+0x94>
 8000f3e:	4926      	ldr	r1, [pc, #152]	@ (8000fd8 <ParserParse+0x118>)
 8000f40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10f      	bne.n	8000f74 <ParserParse+0xb4>
				sprintf(buffer, at_cmds[i].responsePositive, value);
 8000f54:	4920      	ldr	r1, [pc, #128]	@ (8000fd8 <ParserParse+0x118>)
 8000f56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3304      	adds	r3, #4
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 fc63 	bl	800a838 <siprintf>
 8000f72:	e00e      	b.n	8000f92 <ParserParse+0xd2>
			}
			else {
				sprintf(buffer, at_cmds[i].responseNegative, value);
 8000f74:	4918      	ldr	r1, [pc, #96]	@ (8000fd8 <ParserParse+0x118>)
 8000f76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3308      	adds	r3, #8
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f009 fc53 	bl	800a838 <siprintf>
			}
			cmd_matched = true;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (int i=0; i<sizeof(at_cmds)/sizeof(at_Commands_TypeDef); i++){
 8000f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d9a8      	bls.n	8000ef6 <ParserParse+0x36>
		}
	}
	if (!cmd_matched){
 8000fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fa8:	f083 0301 	eor.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <ParserParse+0xfe>
		sprintf(buffer, "Available commands are LED, FREQ, POW, EN and RUN\n\r");
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4909      	ldr	r1, [pc, #36]	@ (8000fdc <ParserParse+0x11c>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f009 fc3d 	bl	800a838 <siprintf>
	}
	UARTLog(buffer);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fc28 	bl	8001818 <UARTLog>
}
 8000fc8:	bf00      	nop
 8000fca:	3758      	adds	r7, #88	@ 0x58
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	0800ba30 	.word	0x0800ba30
 8000fd4:	0800ba34 	.word	0x0800ba34
 8000fd8:	2000004c 	.word	0x2000004c
 8000fdc:	0800ba38 	.word	0x0800ba38

08000fe0 <WriteToBuffer>:
 */

#include "ring_buffer.h"

uint8_t WriteToBuffer(RingBuffer *Buffer, uint8_t *Data, uint8_t Len)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHead;

	for(int i=0; i<Len; i++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e02a      	b.n	800104a <WriteToBuffer+0x6a>
		TempHead = (Buffer->Head + 1) % BUFFER_SIZE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	8c1b      	ldrh	r3, [r3, #32]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	425a      	negs	r2, r3
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	f002 021f 	and.w	r2, r2, #31
 8001004:	bf58      	it	pl
 8001006:	4253      	negpl	r3, r2
 8001008:	74fb      	strb	r3, [r7, #19]

		if( TempHead == Buffer->Tail) // No room for new data
 800100a:	7cfb      	ldrb	r3, [r7, #19]
 800100c:	b29a      	uxth	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001012:	429a      	cmp	r2, r3
 8001014:	d101      	bne.n	800101a <WriteToBuffer+0x3a>
		{
			return RB_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e01c      	b.n	8001054 <WriteToBuffer+0x74>
		}
		else
		{
			Buffer->Buffer[Buffer->Head] = *(Data+i);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	8c12      	ldrh	r2, [r2, #32]
 8001024:	7819      	ldrb	r1, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	5499      	strb	r1, [r3, r2]

			Buffer->Head++;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8c1b      	ldrh	r3, [r3, #32]
 800102e:	3301      	adds	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	841a      	strh	r2, [r3, #32]
			Buffer->Head %= BUFFER_SIZE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8c1b      	ldrh	r3, [r3, #32]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	b29a      	uxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	841a      	strh	r2, [r3, #32]
	for(int i=0; i<Len; i++){
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbd0      	blt.n	8000ff4 <WriteToBuffer+0x14>
		}
	}
	return RB_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <ReadFromBuffer>:

uint8_t ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	8c1b      	ldrh	r3, [r3, #32]
 8001072:	429a      	cmp	r2, r3
 8001074:	d101      	bne.n	800107a <ReadFromBuffer+0x1a>
	{
		return RB_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e014      	b.n	80010a4 <ReadFromBuffer+0x44>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	5c9a      	ldrb	r2, [r3, r2]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800108c:	3301      	adds	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	845a      	strh	r2, [r3, #34]	@ 0x22
		Buffer->Tail %= BUFFER_SIZE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	return RB_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <FlushBuffer>:

void FlushBuffer(RingBuffer *Buffer)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	Buffer->Tail = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	845a      	strh	r2, [r3, #34]	@ 0x22
	Buffer->Head = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	841a      	strh	r2, [r3, #32]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_SPI3_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_SPI3_Init+0x74>)
 80010fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001102:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001106:	2220      	movs	r2, #32
 8001108:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_SPI3_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_SPI3_Init+0x74>)
 800111e:	2207      	movs	r2, #7
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_SPI3_Init+0x74>)
 800112a:	2208      	movs	r2, #8
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_SPI3_Init+0x74>)
 8001130:	f003 fe6c 	bl	8004e0c <HAL_SPI_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800113a:	f7ff fe95 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001a0 	.word	0x200001a0
 8001148:	40003c00 	.word	0x40003c00

0800114c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <HAL_SPI_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d128      	bne.n	80011c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a16      	ldr	r2, [pc, #88]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800119e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b0:	2306      	movs	r3, #6
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_SPI_MspInit+0x84>)
 80011bc:	f002 f806 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40003c00 	.word	0x40003c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800

080011d4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_SPI_MspDeInit+0x30>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10a      	bne.n	80011fc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_SPI_MspDeInit+0x34>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_SPI_MspDeInit+0x34>)
 80011ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80011f0:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80011f2:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_SPI_MspDeInit+0x38>)
 80011f8:	f002 f992 	bl	8003520 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40003c00 	.word	0x40003c00
 8001208:	40021000 	.word	0x40021000
 800120c:	48000800 	.word	0x48000800

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_MspInit+0x4c>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_MspInit+0x4c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	@ 0x60
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_MspInit+0x4c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_MspInit+0x4c>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6593      	str	r3, [r2, #88]	@ 0x58
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_MspInit+0x4c>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	210f      	movs	r1, #15
 800124a:	f06f 0001 	mvn.w	r0, #1
 800124e:	f001 fd1d 	bl	8002c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	@ 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_InitTick+0xe0>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <HAL_InitTick+0xe0>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <HAL_InitTick+0xe0>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001286:	f107 0210 	add.w	r2, r7, #16
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f003 f86d 	bl	8004370 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800129a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012a0:	f003 f83a 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80012a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012a8:	f003 f836 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <HAL_InitTick+0xe4>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3b01      	subs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_InitTick+0xe8>)
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_InitTick+0xec>)
 80012c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_InitTick+0xe8>)
 80012c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012cc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <HAL_InitTick+0xe8>)
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_InitTick+0xe8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_InitTick+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_InitTick+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <HAL_InitTick+0xe8>)
 80012e8:	f004 f936 	bl	8005558 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11b      	bne.n	8001332 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <HAL_InitTick+0xe8>)
 80012fc:	f004 f9ec 	bl	80056d8 <HAL_TIM_Base_Start_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800130e:	2032      	movs	r0, #50	@ 0x32
 8001310:	f001 fcd8 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d808      	bhi.n	800132c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800131a:	2200      	movs	r2, #0
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2032      	movs	r0, #50	@ 0x32
 8001320:	f001 fcb4 	bl	8002c8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_InitTick+0xf0>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e002      	b.n	8001332 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001332:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001336:	4618      	mov	r0, r3
 8001338:	3738      	adds	r7, #56	@ 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	431bde83 	.word	0x431bde83
 8001348:	20000204 	.word	0x20000204
 800134c:	40000c00 	.word	0x40000c00
 8001350:	200000bc 	.word	0x200000bc

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <DMA1_Channel6_IRQHandler+0x10>)
 8001392:	f001 fe3c 	bl	800300e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000328 	.word	0x20000328

080013a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Channel7_IRQHandler+0x10>)
 80013a6:	f001 fe32 	bl	800300e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000370 	.word	0x20000370

080013b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_BUSY_Pin);
 80013b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013bc:	f002 f9bc 	bl	8003738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <USART2_IRQHandler+0x10>)
 80013ca:	f004 fd49 	bl	8005e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002a0 	.word	0x200002a0

080013d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <TIM5_IRQHandler+0x10>)
 80013de:	f004 f9eb 	bl	80057b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000204 	.word	0x20000204

080013ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_kill>:

int _kill(int pid, int sig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001406:	f009 fb35 	bl	800aa74 <__errno>
 800140a:	4603      	mov	r3, r0
 800140c:	2216      	movs	r2, #22
 800140e:	601a      	str	r2, [r3, #0]
  return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_exit>:

void _exit (int status)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffe7 	bl	80013fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <_exit+0x12>

08001432 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e00a      	b.n	800145a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001444:	f3af 8000 	nop.w
 8001448:	4601      	mov	r1, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	60ba      	str	r2, [r7, #8]
 8001450:	b2ca      	uxtb	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	dbf0      	blt.n	8001444 <_read+0x12>
  }

  return len;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e009      	b.n	8001492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf1      	blt.n	800147e <_write+0x12>
  }
  return len;
 800149a:	687b      	ldr	r3, [r7, #4]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_close>:

int _close(int file)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014cc:	605a      	str	r2, [r3, #4]
  return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_isatty>:

int _isatty(int file)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f009 fa9a 	bl	800aa74 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20018000 	.word	0x20018000
 800156c:	00000400 	.word	0x00000400
 8001570:	20000250 	.word	0x20000250
 8001574:	20001e50 	.word	0x20001e50

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <MX_TIM6_Init+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015b4:	224f      	movs	r2, #79	@ 0x4f
 80015b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ce:	f003 ffc3 	bl	8005558 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015d8:	f7ff fc46 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_TIM6_Init+0x64>)
 80015ea:	f004 fabb 	bl	8005b64 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f7ff fc38 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000254 	.word	0x20000254
 8001604:	40001000 	.word	0x40001000

08001608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_TIM_Base_MspInit+0x38>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10b      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6593      	str	r3, [r2, #88]	@ 0x58
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40001000 	.word	0x40001000
 8001644:	40021000 	.word	0x40021000

08001648 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <MX_USART2_UART_Init+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART2_UART_Init+0x58>)
 800168c:	f004 fb10 	bl	8005cb0 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001696:	f7ff fbe7 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002a0 	.word	0x200002a0
 80016a4:	40004400 	.word	0x40004400

080016a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0ac      	sub	sp, #176	@ 0xb0
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2288      	movs	r2, #136	@ 0x88
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 f918 	bl	800a8fe <memset>
  if(uartHandle->Instance==USART2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001800 <HAL_UART_MspInit+0x158>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f040 808e 	bne.w	80017f6 <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016da:	2302      	movs	r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016de:	2300      	movs	r3, #0
 80016e0:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fed4 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016f2:	f7ff fbb9 	bl	8000e68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f6:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a42      	ldr	r2, [pc, #264]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a3c      	ldr	r2, [pc, #240]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <HAL_UART_MspInit+0x15c>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001726:	230c      	movs	r3, #12
 8001728:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174e:	f001 fd3d 	bl	80031cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001754:	4a2d      	ldr	r2, [pc, #180]	@ (800180c <HAL_UART_MspInit+0x164>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001758:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800175a:	2202      	movs	r2, #2
 800175c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_UART_MspInit+0x160>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001788:	481f      	ldr	r0, [pc, #124]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800178a:	f001 faa9 	bl	8002ce0 <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001794:	f7ff fb68 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <HAL_UART_MspInit+0x160>)
 800179c:	675a      	str	r2, [r3, #116]	@ 0x74
 800179e:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <HAL_UART_MspInit+0x160>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <HAL_UART_MspInit+0x16c>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80017aa:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017b2:	2210      	movs	r2, #16
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017da:	480d      	ldr	r0, [pc, #52]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017dc:	f001 fa80 	bl	8002ce0 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80017e6:	f7ff fb3f 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_UART_MspInit+0x168>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017f6:	bf00      	nop
 80017f8:	37b0      	adds	r7, #176	@ 0xb0
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000
 8001808:	20000328 	.word	0x20000328
 800180c:	4002006c 	.word	0x4002006c
 8001810:	20000370 	.word	0x20000370
 8001814:	40020080 	.word	0x40020080

08001818 <UARTLog>:

extern struct adf5355_init_param hadf5355;
extern struct adf5355_dev* dev;

void UARTLog(char* message)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7fe fcdf 	bl	80001e4 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <UARTLog+0x28>)
 8001832:	f004 fa8b 	bl	8005d4c <HAL_UART_Transmit>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002a0 	.word	0x200002a0

08001844 <LightLED>:

void* LightLED(void* state){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <LightLED+0x24>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d003      	beq.n	8001868 <LightLED+0x24>
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <LightLED+0x44>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e00a      	b.n	800187e <LightLED+0x3a>
	else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, *value);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	2120      	movs	r1, #32
 8001870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001874:	f001 ff48 	bl	8003708 <HAL_GPIO_WritePin>
		ret = true;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <LightLED+0x44>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 800187e:	4b02      	ldr	r3, [pc, #8]	@ (8001888 <LightLED+0x44>)
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200003b8 	.word	0x200003b8

0800188c <LoadADF5355>:

void* LoadADF5355(void* arg){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	ADF5355_Param_Init();
 8001894:	f000 f90a 	bl	8001aac <ADF5355_Param_Init>
	static bool ret = false;
	int32_t response = adf5355_init(&dev, &hadf5355);
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <LoadADF5355+0x2c>)
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <LoadADF5355+0x30>)
 800189c:	f000 ff54 	bl	8002748 <adf5355_init>
 80018a0:	60f8      	str	r0, [r7, #12]
	if (response == 0) ret = true;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <LoadADF5355+0x22>
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <LoadADF5355+0x34>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	return &ret;
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <LoadADF5355+0x34>)

}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200003c0 	.word	0x200003c0
 80018bc:	200003f0 	.word	0x200003f0
 80018c0:	200003b9 	.word	0x200003b9

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff fe56 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f009 f8c5 	bl	800aa80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff fa13 	bl	8000d20 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001908:	0800bd50 	.word	0x0800bd50
  ldr r2, =_sbss
 800190c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001910:	20001e50 	.word	0x20001e50

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>

08001916 <ad7676_acquire_data>:

	*ad7676_data = init_data;
}

void ad7676_acquire_data(data_Collector_TypeDef* ad7676_data, int16_t sample)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
	ad7676_data->data_buf[ad7676_data->data_ptr++] = sample;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8001928:	f8b3 3ffe 	ldrh.w	r3, [r3, #4094]	@ 0xffe
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	b291      	uxth	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 8001936:	f8a2 1ffe 	strh.w	r1, [r2, #4094]	@ 0xffe
 800193a:	461a      	mov	r2, r3
 800193c:	8879      	ldrh	r1, [r7, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <ad7676_read_one_sample>:

void ad7676_read_one_sample()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

//	(GPIOx->IDR & GPIO_Pin);
//	GPIO_TypeDef GPIOB, D0_GPIO_Port, D15_GPIO_Port
//	Pin PB3 reserved for SWD
	int16_t sample = (GPIOB->IDR & AD7676_GPIOB_MASK) | ((GPIOC->IDR & AD7676_GPIOC_MASK) << 15);
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <ad7676_read_one_sample+0x48>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	b29b      	uxth	r3, r3
 800195c:	f023 030c 	bic.w	r3, r3, #12
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <ad7676_read_one_sample+0x4c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	b29b      	uxth	r3, r3
 8001968:	03db      	lsls	r3, r3, #15
 800196a:	b29b      	uxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	80fb      	strh	r3, [r7, #6]
	ad7676_acquire_data(ad7676_data, sample);
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <ad7676_read_one_sample+0x50>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffca 	bl	8001916 <ad7676_acquire_data>
	AD7676_CNVST_ON;
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <ad7676_read_one_sample+0x4c>)
 800198a:	f001 febd 	bl	8003708 <HAL_GPIO_WritePin>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	48000400 	.word	0x48000400
 800199c:	48000800 	.word	0x48000800
 80019a0:	20000144 	.word	0x20000144

080019a4 <ad7676_start_conversion>:
	}
	ad7676_data->data_ptr = 0;
}

void ad7676_start_conversion()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	AD7676_CNVST_OFF;
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <ad7676_start_conversion+0x14>)
 80019b0:	f001 feaa 	bl	8003708 <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	48000800 	.word	0x48000800

080019bc <ADF5355_SetFrequency>:

/******************************************************************************/
/************************** Functions Implementation **************************/
/******************************************************************************/

void* ADF5355_SetFrequency(void* new_freq){
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint32_t* value = (uint32_t*)new_freq;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	60fb      	str	r3, [r7, #12]
	if (*value > 15000 || *value < 100) ret = false;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d803      	bhi.n	80019dc <ADF5355_SetFrequency+0x20>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b63      	cmp	r3, #99	@ 0x63
 80019da:	d803      	bhi.n	80019e4 <ADF5355_SetFrequency+0x28>
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <ADF5355_SetFrequency+0x44>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e006      	b.n	80019f2 <ADF5355_SetFrequency+0x36>
	else {
		freq = *value;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <ADF5355_SetFrequency+0x48>)
 80019ea:	6013      	str	r3, [r2, #0]
		ret = true;
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <ADF5355_SetFrequency+0x44>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 80019f2:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <ADF5355_SetFrequency+0x44>)
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	200003f4 	.word	0x200003f4
 8001a04:	200000b4 	.word	0x200000b4

08001a08 <ADF5355_SetPower>:

void* ADF5355_SetPower(void* new_pow){
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	static bool ret;
	int8_t* value = (int8_t*)new_pow;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
	if (*value > 10 || *value < -10) ret = false;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	dc05      	bgt.n	8001a2a <ADF5355_SetPower+0x22>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f993 3000 	ldrsb.w	r3, [r3]
 8001a24:	f113 0f0a 	cmn.w	r3, #10
 8001a28:	da03      	bge.n	8001a32 <ADF5355_SetPower+0x2a>
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <ADF5355_SetPower+0x48>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <ADF5355_SetPower+0x3a>
	else {
		outa_power = *value;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f993 2000 	ldrsb.w	r2, [r3]
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <ADF5355_SetPower+0x4c>)
 8001a3a:	701a      	strb	r2, [r3, #0]
		ret = true;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <ADF5355_SetPower+0x48>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8001a42:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <ADF5355_SetPower+0x48>)
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	200003f5 	.word	0x200003f5
 8001a54:	200000b9 	.word	0x200000b9

08001a58 <ADF5355_Enable>:

void* ADF5355_Enable(void* state){
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	static bool ret;
	uint8_t* value = (uint8_t*)state;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60fb      	str	r3, [r7, #12]
	if (*value != 0 && *value != 1) ret = false;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <ADF5355_Enable+0x24>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d003      	beq.n	8001a7c <ADF5355_Enable+0x24>
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <ADF5355_Enable+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e00b      	b.n	8001a94 <ADF5355_Enable+0x3c>
	else {
		outa_en = *value;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <ADF5355_Enable+0x50>)
 8001a8c:	701a      	strb	r2, [r3, #0]
		ret = true;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <ADF5355_Enable+0x4c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
	}
	return &ret;
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <ADF5355_Enable+0x4c>)
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200003f6 	.word	0x200003f6
 8001aa8:	200000b8 	.word	0x200000b8

08001aac <ADF5355_Param_Init>:

void ADF5355_Param_Init(void){
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	hadf5355.spi_init = &hspi3; // Wskaźnik do struktury SPI init
 8001ab0:	492d      	ldr	r1, [pc, #180]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ab2:	482e      	ldr	r0, [pc, #184]	@ (8001b6c <ADF5355_Param_Init+0xc0>)
 8001ab4:	6008      	str	r0, [r1, #0]
	hadf5355.dev_id = 1; // Identyfikator urządzenia ADF5355
 8001ab6:	492c      	ldr	r1, [pc, #176]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ab8:	2001      	movs	r0, #1
 8001aba:	7108      	strb	r0, [r1, #4]
	hadf5355.freq_req = freq*1000000; // Żądana częstotliwość wyjściowa w Hz
 8001abc:	492c      	ldr	r1, [pc, #176]	@ (8001b70 <ADF5355_Param_Init+0xc4>)
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	482c      	ldr	r0, [pc, #176]	@ (8001b74 <ADF5355_Param_Init+0xc8>)
 8001ac2:	fb00 f101 	mul.w	r1, r0, r1
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	4603      	mov	r3, r0
 8001acc:	4926      	ldr	r1, [pc, #152]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ace:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hadf5355.freq_req_chan = 0; // Kanał częstotliwości
 8001ad2:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	741a      	strb	r2, [r3, #16]
	hadf5355.clkin_freq = 120000000; // Częstotliwość zegara wejściowego w Hz
 8001ad8:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <ADF5355_Param_Init+0xcc>)
 8001adc:	615a      	str	r2, [r3, #20]
	hadf5355.cp_ua = 1000; // Prąd pompy ładunkowej w mikroamperach
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ae0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ae4:	619a      	str	r2, [r3, #24]
	hadf5355.cp_neg_bleed_en = false; // Flaga aktywacji negatywnego prądu wycieku
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	771a      	strb	r2, [r3, #28]
	hadf5355.cp_gated_bleed_en = false;  // Flaga aktywacji bramkowania prądu wycieku
 8001aec:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	775a      	strb	r2, [r3, #29]
	hadf5355.cp_bleed_current_polarity_en = false;  // Flaga aktywacji biegunowości prądu wycieku
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	779a      	strb	r2, [r3, #30]
	hadf5355.mute_till_lock_en = false; // Flaga aktywacji funkcji mute till lock
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	77da      	strb	r2, [r3, #31]
	hadf5355.outa_en = outa_en;  // Flaga aktywacji wyjścia A
 8001afe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <ADF5355_Param_Init+0xd0>)
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b04:	f883 2020 	strb.w	r2, [r3, #32]
	hadf5355.outb_en = false;  // Flaga aktywacji wyjścia B
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hadf5355.outa_power = outa_power;  // Moc wyjścia A
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <ADF5355_Param_Init+0xd4>)
 8001b12:	f993 3000 	ldrsb.w	r3, [r3]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b1a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	hadf5355.outb_power = 0;  // Moc wyjścia B
 8001b1e:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	hadf5355.phase_detector_polarity_neg = true;  // Flaga aktywacji negatywnej polaryzacji detektora fazy
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadf5355.ref_diff_en = false;  // Flaga aktywacji różnicowego wejścia referencyjnego
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	hadf5355.mux_out_3v3_en = true;  // Flaga aktywacji wyjścia mux na 3,3V
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	hadf5355.ref_doubler_en = false;  // Flaga aktywacji podwajacza częstotliwości referencyjnej
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	hadf5355.ref_div2_en = false;  // Flaga aktywacji podzielnika przez 2
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	hadf5355.mux_out_sel = 0;  // Wybór wyjścia mux
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	hadf5355.outb_sel_fund = false;  // Flaga wyboru częstotliwości podstawowej na wyjściu B
 8001b56:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <ADF5355_Param_Init+0xbc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200003c0 	.word	0x200003c0
 8001b6c:	200001a0 	.word	0x200001a0
 8001b70:	200000b4 	.word	0x200000b4
 8001b74:	000f4240 	.word	0x000f4240
 8001b78:	07270e00 	.word	0x07270e00
 8001b7c:	200000b8 	.word	0x200000b8
 8001b80:	200000b9 	.word	0x200000b9

08001b84 <adf5355_calc_pfd>:

static void adf5355_calc_pfd(struct adf5355_dev *dev)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	dev->ref_div_factor = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	/* Calculate and maximize PFD frequency */
	do {
		dev->ref_div_factor++;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <adf5355_calc_pfd+0x32>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e000      	b.n	8001bb8 <adf5355_calc_pfd+0x34>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
			    (dev->ref_div_factor * (dev->ref_div2_en ? 2 : 1));
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f8b2 2090 	ldrh.w	r2, [r2, #144]	@ 0x90
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d001      	beq.n	8001bd2 <adf5355_calc_pfd+0x4e>
 8001bce:	2202      	movs	r2, #2
 8001bd0:	e000      	b.n	8001bd4 <adf5355_calc_pfd+0x50>
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	fb01 f202 	mul.w	r2, r1, r2
		dev->fpfd = (dev->clkin_freq * (dev->ref_doubler_en ? 2 : 1)) /
 8001bd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	669a      	str	r2, [r3, #104]	@ 0x68
	} while (dev->fpfd > ADF5355_MAX_FREQ_PFD);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001be4:	4a29      	ldr	r2, [pc, #164]	@ (8001c8c <adf5355_calc_pfd+0x108>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d8d4      	bhi.n	8001b94 <adf5355_calc_pfd+0x10>

	tmp = NO_OS_DIV_ROUND_CLOSEST(dev->cp_ua - 315, 315U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001bee:	f1a3 029e 	sub.w	r2, r3, #158	@ 0x9e
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <adf5355_calc_pfd+0x10c>)
 8001bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	0852      	lsrs	r2, r2, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 0U, 15U);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <adf5355_calc_pfd+0x8e>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	bf28      	it	cs
 8001c0e:	230f      	movcs	r3, #15
 8001c10:	e000      	b.n	8001c14 <adf5355_calc_pfd+0x90>
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(0) |
				    ADF5355_REG4_CP_THREESTATE_EN(0) |
				    ADF5355_REG4_POWER_DOWN_EN(0) |
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
				    ADF5355_REG4_POWER_DOWN_EN(0) |
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <adf5355_calc_pfd+0xa0>
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	e000      	b.n	8001c26 <adf5355_calc_pfd+0xa2>
 8001c24:	2200      	movs	r2, #0
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8001c2c:	021b      	lsls	r3, r3, #8
				    ADF5355_REG4_PD_POLARITY_POS(!dev->phase_detector_polarity_neg) |
 8001c2e:	431a      	orrs	r2, r3
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001c36:	025b      	lsls	r3, r3, #9
				    ADF5355_REG4_MUX_LOGIC(dev->mux_out_3v3_en) |
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	461a      	mov	r2, r3
				    ADF5355_REG4_CHARGE_PUMP_CURR(tmp) |
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
				    ADF5355_REG4_REFIN_MODE_DIFF(dev->ref_diff_en) |
 8001c44:	431a      	orrs	r2, r3
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001c4c:	03d9      	lsls	r1, r3, #15
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <adf5355_calc_pfd+0x110>)
 8001c50:	400b      	ands	r3, r1
				    ADF5355_REG4_DOUBLE_BUFF_EN(1) |
 8001c52:	431a      	orrs	r2, r3
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001c5a:	065b      	lsls	r3, r3, #25
				    ADF5355_REG4_10BIT_R_CNT(dev->ref_div_factor) |
 8001c5c:	431a      	orrs	r2, r3
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001c64:	069b      	lsls	r3, r3, #26
				    ADF5355_REG4_RDIV2_EN(dev->ref_div2_en) |
 8001c66:	431a      	orrs	r2, r3
				    ADF5355_REG4_MUXOUT(dev->mux_out_sel);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001c6e:	06db      	lsls	r3, r3, #27
 8001c70:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
				    ADF5355_REG4_RMULT2_EN(dev->ref_doubler_en) |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
	dev->regs[ADF5355_REG(4)] = ADF5355_REG4_COUNTER_RESET_EN(0) |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	619a      	str	r2, [r3, #24]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	047868c0 	.word	0x047868c0
 8001c90:	a01a01a1 	.word	0xa01a01a1
 8001c94:	01ff8000 	.word	0x01ff8000

08001c98 <adf5355_write>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_write(struct adf5355_dev *dev,
			     uint8_t reg_addr,
			     uint32_t data)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[ADF5355_SPI_NO_BYTES];
	uint8_t ret;
	data = data | reg_addr;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	607b      	str	r3, [r7, #4]

	buf[0] = data >> 24;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0e1b      	lsrs	r3, r3, #24
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	743b      	strb	r3, [r7, #16]
	buf[1] = data >> 16;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	747b      	strb	r3, [r7, #17]
	buf[2] = data >> 8;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	74bb      	strb	r3, [r7, #18]
	buf[3] = data;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	74fb      	strb	r3, [r7, #19]

	ADF5355_CS_OFF;
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd6:	f001 fd17 	bl	8003708 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(dev->spi_desc, buf, NO_OS_ARRAY_SIZE(buf), HAL_MAX_DELAY);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f107 0110 	add.w	r1, r7, #16
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	f003 f95b 	bl	8004fa2 <HAL_SPI_Transmit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]
	ADF5355_CS_ON;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfa:	f001 fd05 	bl	8003708 <HAL_GPIO_WritePin>

	return ret;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <adf5355_pll_fract_n_compute>:
					uint32_t *integer,
					uint32_t *fract1,
					uint32_t *fract2,
					uint32_t *mod2,
					uint32_t max_modulus2)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d12:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t tmp;
	uint32_t gcd_div;

	tmp = no_os_do_div(&vco, pfd);
 8001d16:	f107 0108 	add.w	r1, r7, #8
 8001d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d1e:	4608      	mov	r0, r1
 8001d20:	f000 fe70 	bl	8002a04 <no_os_do_div>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp = tmp * ADF5355_MODULUS1;
 8001d2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	060b      	lsls	r3, r1, #24
 8001d3a:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001d3e:	0602      	lsls	r2, r0, #24
 8001d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*fract2 = no_os_do_div(&tmp, pfd);
 8001d44:	f107 0110 	add.w	r1, r7, #16
 8001d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	f000 fe59 	bl	8002a04 <no_os_do_div>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d58:	601a      	str	r2, [r3, #0]

	*integer = vco;
 8001d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d60:	601a      	str	r2, [r3, #0]
	*fract1 = tmp;
 8001d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	601a      	str	r2, [r3, #0]

	*mod2 = pfd;
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	601a      	str	r2, [r3, #0]

	while (*mod2 > max_modulus2) {
 8001d70:	e009      	b.n	8001d86 <adf5355_pll_fract_n_compute+0x7e>
		*mod2 >>= 1;
 8001d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	085a      	lsrs	r2, r3, #1
 8001d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7a:	601a      	str	r2, [r3, #0]
		*fract2 >>= 1;
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	085a      	lsrs	r2, r3, #1
 8001d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d84:	601a      	str	r2, [r3, #0]
	while (*mod2 > max_modulus2) {
 8001d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3f0      	bcc.n	8001d72 <adf5355_pll_fract_n_compute+0x6a>
	}

	gcd_div = no_os_greatest_common_divisor(*fract2, *mod2);
 8001d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 fe0a 	bl	80029b4 <no_os_greatest_common_divisor>
 8001da0:	61f8      	str	r0, [r7, #28]
	*mod2 /= gcd_div;
 8001da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dae:	601a      	str	r2, [r3, #0]
	*fract2 /= gcd_div;
 8001db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <adf5355_reg_config>:
 * @param dev - The device structure.
 * @param sync_all - Enable/diable full register synchronization.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_reg_config(struct adf5355_dev *dev, bool sync_all)
{
 8001dc8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001dcc:	b08e      	sub	sp, #56	@ 0x38
 8001dce:	af06      	add	r7, sp, #24
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
	int32_t ret;
	uint32_t max_reg, i;

	max_reg = ((dev->dev_id == ADF4356)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	791b      	ldrb	r3, [r3, #4]
		   || (dev->dev_id == ADF5356)) ? ADF5355_REG(13) : ADF5355_REG(12);
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d003      	beq.n	8001de6 <adf5355_reg_config+0x1e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d101      	bne.n	8001dea <adf5355_reg_config+0x22>
 8001de6:	230d      	movs	r3, #13
 8001de8:	e000      	b.n	8001dec <adf5355_reg_config+0x24>
 8001dea:	230c      	movs	r3, #12
	max_reg = ((dev->dev_id == ADF4356)
 8001dec:	617b      	str	r3, [r7, #20]

	if ((sync_all || !dev->all_synced) && dev->fpfd <= 75000000) {
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <adf5355_reg_config+0x3a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	795b      	ldrb	r3, [r3, #5]
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d022      	beq.n	8001e48 <adf5355_reg_config+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e06:	4a99      	ldr	r2, [pc, #612]	@ (800206c <adf5355_reg_config+0x2a4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d81d      	bhi.n	8001e48 <adf5355_reg_config+0x80>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	e013      	b.n	8001e3a <adf5355_reg_config+0x72>
			ret = adf5355_write(dev, ADF5355_REG(i), dev->regs[i]);
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	b2d9      	uxtb	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	3202      	adds	r2, #2
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	461a      	mov	r2, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff38 	bl	8001c98 <adf5355_write>
 8001e28:	6138      	str	r0, [r7, #16]
			if (ret != 0)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <adf5355_reg_config+0x6c>
				return ret;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	e191      	b.n	8002158 <adf5355_reg_config+0x390>
		for (i = max_reg; i >= ADF5355_REG(1); i--) {
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e8      	bne.n	8001e12 <adf5355_reg_config+0x4a>
		}

		dev->all_synced = true;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	715a      	strb	r2, [r3, #5]
 8001e46:	e082      	b.n	8001f4e <adf5355_reg_config+0x186>

	}
	else if ((sync_all || !dev->all_synced) && dev->fpfd > 75000000 ) {
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <adf5355_reg_config+0x94>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	795b      	ldrb	r3, [r3, #5]
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <adf5355_reg_config+0x9e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e60:	4a82      	ldr	r2, [pc, #520]	@ (800206c <adf5355_reg_config+0x2a4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d873      	bhi.n	8001f4e <adf5355_reg_config+0x186>

	}
	else {
		if((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	791b      	ldrb	r3, [r3, #4]
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d003      	beq.n	8001e76 <adf5355_reg_config+0xae>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <adf5355_reg_config+0xc8>
			ret = adf5355_write(dev, ADF5355_REG(13), dev->regs[ADF5355_REG(13)]);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	210d      	movs	r1, #13
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff0a 	bl	8001c98 <adf5355_write>
 8001e84:	6138      	str	r0, [r7, #16]
			if (ret != 0)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <adf5355_reg_config+0xc8>
				return ret;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	e163      	b.n	8002158 <adf5355_reg_config+0x390>
		}

		ret = adf5355_write(dev, ADF5355_REG(10), dev->regs[ADF5355_REG(10)]);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	461a      	mov	r2, r3
 8001e96:	210a      	movs	r1, #10
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fefd 	bl	8001c98 <adf5355_write>
 8001e9e:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <adf5355_reg_config+0xe2>
			return ret;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	e156      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(6), dev->regs[ADF5355_REG(6)]);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2106      	movs	r1, #6
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fef0 	bl	8001c98 <adf5355_write>
 8001eb8:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <adf5355_reg_config+0xfc>
			return ret;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	e149      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(4),
				    dev->regs[ADF5355_REG(4)] | ADF5355_REG4_COUNTER_RESET_EN(1));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
		ret = adf5355_write(dev, ADF5355_REG(4),
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2104      	movs	r1, #4
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fee1 	bl	8001c98 <adf5355_write>
 8001ed6:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <adf5355_reg_config+0x11a>
			return ret;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	e13a      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[ADF5355_REG(2)]);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2102      	movs	r1, #2
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fed4 	bl	8001c98 <adf5355_write>
 8001ef0:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <adf5355_reg_config+0x134>
			return ret;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	e12d      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[ADF5355_REG(1)]);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	461a      	mov	r2, r3
 8001f02:	2101      	movs	r1, #1
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fec7 	bl	8001c98 <adf5355_write>
 8001f0a:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <adf5355_reg_config+0x14e>
			return ret;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	e120      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(0),
				    dev->regs[ADF5355_REG(0)] & ~ADF5355_REG0_AUTOCAL(1));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
		ret = adf5355_write(dev, ADF5355_REG(0),
 8001f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff feb8 	bl	8001c98 <adf5355_write>
 8001f28:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <adf5355_reg_config+0x16c>
			return ret;
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	e111      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[ADF5355_REG(4)]);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff feab 	bl	8001c98 <adf5355_write>
 8001f42:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <adf5355_reg_config+0x186>
			return ret;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	e104      	b.n	8002158 <adf5355_reg_config+0x390>
	}

	if (dev->delay_us > 999)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f58:	d314      	bcc.n	8001f84 <adf5355_reg_config+0x1bc>
	{
		delay_ms(ceil(dev->delay_us/1000));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f60:	4a43      	ldr	r2, [pc, #268]	@ (8002070 <adf5355_reg_config+0x2a8>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fadb 	bl	8000524 <__aeabi_ui2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fb4f 	bl	8000618 <__aeabi_d2uiz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fd11 	bl	80009a4 <delay_ms>
 8001f82:	e005      	b.n	8001f90 <adf5355_reg_config+0x1c8>
	}
	else
	{
		delay_us(dev->delay_us);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fce6 	bl	800095c <delay_us>
	}

	if (dev->fpfd > 75000000) { //needs to be verified
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f94:	4a35      	ldr	r2, [pc, #212]	@ (800206c <adf5355_reg_config+0x2a4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	f240 80d6 	bls.w	8002148 <adf5355_reg_config+0x380>
		ret = adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fe77 	bl	8001c98 <adf5355_write>
 8001faa:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <adf5355_reg_config+0x1ee>
			return ret;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	e0d0      	b.n	8002158 <adf5355_reg_config+0x390>

		uint32_t cp_bleed;
		bool prescaler, cp_neg_bleed_en;
		dev->ref_div2_en = false;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

		adf5355_calc_pfd(dev);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fde0 	bl	8001b84 <adf5355_calc_pfd>

		adf5355_pll_fract_n_compute(dev->freq_req, dev->fpfd, &dev->integer, &dev->fract1,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	e9d3 bc10 	ldrd	fp, ip, [r3, #64]	@ 0x40
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fce:	2200      	movs	r2, #0
 8001fd0:	461c      	mov	r4, r3
 8001fd2:	4615      	mov	r5, r2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	336c      	adds	r3, #108	@ 0x6c
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	3270      	adds	r2, #112	@ 0x70
 8001fdc:	687e      	ldr	r6, [r7, #4]
 8001fde:	3674      	adds	r6, #116	@ 0x74
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	3178      	adds	r1, #120	@ 0x78
 8001fe4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001fe8:	9004      	str	r0, [sp, #16]
 8001fea:	9103      	str	r1, [sp, #12]
 8001fec:	9602      	str	r6, [sp, #8]
 8001fee:	9201      	str	r2, [sp, #4]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	4658      	mov	r0, fp
 8001ff8:	4661      	mov	r1, ip
 8001ffa:	f7ff fe85 	bl	8001d08 <adf5355_pll_fract_n_compute>
						    &dev->fract2, &dev->mod2, ADF5355_MAX_MODULUS2);

		prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002002:	2b4a      	cmp	r3, #74	@ 0x4a
 8002004:	bf8c      	ite	hi
 8002006:	2301      	movhi	r3, #1
 8002008:	2300      	movls	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

		if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002010:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <adf5355_reg_config+0x2ac>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d807      	bhi.n	8002026 <adf5355_reg_config+0x25e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <adf5355_reg_config+0x264>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <adf5355_reg_config+0x264>
			cp_neg_bleed_en = false;
 8002026:	2300      	movs	r3, #0
 8002028:	73bb      	strb	r3, [r7, #14]
 800202a:	e003      	b.n	8002034 <adf5355_reg_config+0x26c>
		else
			cp_neg_bleed_en = dev->cp_neg_bleed_en;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002032:	73bb      	strb	r3, [r7, #14]

		if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d003      	beq.n	8002044 <adf5355_reg_config+0x27c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d11b      	bne.n	800207c <adf5355_reg_config+0x2b4>
			cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <adf5355_reg_config+0x2a8>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8002054:	fb03 f202 	mul.w	r2, r3, r2
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	0b9b      	lsrs	r3, r3, #14
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <adf5355_reg_config+0x2b0>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	e01e      	b.n	80020aa <adf5355_reg_config+0x2e2>
 800206c:	047868c0 	.word	0x047868c0
 8002070:	10624dd3 	.word	0x10624dd3
 8002074:	05f5e100 	.word	0x05f5e100
 8002078:	00136b0b 	.word	0x00136b0b
		} else {
			cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002080:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002084:	fb03 f202 	mul.w	r2, r3, r2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208c:	f240 1177 	movw	r1, #375	@ 0x177
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	1e5a      	subs	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209c:	f240 1177 	movw	r1, #375	@ 0x177
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	61bb      	str	r3, [r7, #24]
		}

		cp_bleed = no_os_clamp(cp_bleed, 1U, 255U);
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d904      	bls.n	80020ba <adf5355_reg_config+0x2f2>
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	@ 0xff
 80020b4:	bf28      	it	cs
 80020b6:	23ff      	movcs	r3, #255	@ 0xff
 80020b8:	e000      	b.n	80020bc <adf5355_reg_config+0x2f4>
 80020ba:	2301      	movs	r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]

		dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020c2:	011a      	lsls	r2, r3, #4
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <adf5355_reg_config+0x39c>)
 80020c6:	4013      	ands	r3, r2
						ADF5355_REG0_PRESCALER(prescaler) |
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	0512      	lsls	r2, r2, #20
 80020cc:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]
						ADF5355_REG0_AUTOCAL(0); //autocalibration needs to be disabled

		dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80020dc:	f023 030f 	bic.w	r3, r3, #15
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	60d3      	str	r3, [r2, #12]

		dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020e8:	011a      	lsls	r2, r3, #4
 80020ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <adf5355_reg_config+0x3a0>)
 80020ec:	4013      	ands	r3, r2
						ADF5355_REG2_FRAC2(dev->fract2);
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020f2:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

		ret = adf5355_write(dev, ADF5355_REG(4), dev->regs[4]);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	461a      	mov	r2, r3
 8002100:	2104      	movs	r1, #4
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fdc8 	bl	8001c98 <adf5355_write>
 8002108:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <adf5355_reg_config+0x34c>
			return ret;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	e021      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(2), dev->regs[2]);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	461a      	mov	r2, r3
 800211a:	2102      	movs	r1, #2
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fdbb 	bl	8001c98 <adf5355_write>
 8002122:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <adf5355_reg_config+0x366>
			return ret;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	e014      	b.n	8002158 <adf5355_reg_config+0x390>

		ret = adf5355_write(dev, ADF5355_REG(1), dev->regs[1]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	461a      	mov	r2, r3
 8002134:	2101      	movs	r1, #1
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fdae 	bl	8001c98 <adf5355_write>
 800213c:	6138      	str	r0, [r7, #16]
		if (ret != 0)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <adf5355_reg_config+0x380>
			return ret;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	e007      	b.n	8002158 <adf5355_reg_config+0x390>
		//REGs 0 for halved, 4 for desired, then 2, 1, 0
	}

	return adf5355_write(dev, ADF5355_REG(0), dev->regs[0]);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	461a      	mov	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fda1 	bl	8001c98 <adf5355_write>
 8002156:	4603      	mov	r3, r0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002162:	bf00      	nop
 8002164:	000ffff0 	.word	0x000ffff0
 8002168:	0003fff0 	.word	0x0003fff0

0800216c <adf5355_set_freq>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_set_freq(struct adf5355_dev *dev,
				uint64_t freq,
				uint8_t chan)
{
 800216c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002170:	b08c      	sub	sp, #48	@ 0x30
 8002172:	af06      	add	r7, sp, #24
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t cp_bleed;
	bool prescaler, cp_neg_bleed_en;

	if (chan > dev->num_channels)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002180:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002184:	429a      	cmp	r2, r3
 8002186:	d902      	bls.n	800218e <adf5355_set_freq+0x22>
		return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e1d6      	b.n	800253c <adf5355_set_freq+0x3d0>

	if (chan == 0) {
 800218e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002192:	2b00      	cmp	r3, #0
 8002194:	d13c      	bne.n	8002210 <adf5355_set_freq+0xa4>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800219c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021a0:	4290      	cmp	r0, r2
 80021a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80021a6:	d308      	bcc.n	80021ba <adf5355_set_freq+0x4e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80021ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021b2:	4290      	cmp	r0, r2
 80021b4:	eb71 0303 	sbcs.w	r3, r1, r3
 80021b8:	d202      	bcs.n	80021c0 <adf5355_set_freq+0x54>
			return -EINVAL;
 80021ba:	f06f 0315 	mvn.w	r3, #21
 80021be:	e1bd      	b.n	800253c <adf5355_set_freq+0x3d0>

		dev->rf_div_sel = 0;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUT_EN(dev->outa_en);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80021d2:	019b      	lsls	r3, r3, #6
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 80021da:	e00f      	b.n	80021fc <adf5355_set_freq+0x90>
			freq <<= 1;
 80021dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e0:	eb12 0802 	adds.w	r8, r2, r2
 80021e4:	eb43 0903 	adc.w	r9, r3, r3
 80021e8:	e9c7 8900 	strd	r8, r9, [r7]
			dev->rf_div_sel++;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80021f2:	3301      	adds	r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002202:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002206:	4290      	cmp	r0, r2
 8002208:	eb71 0303 	sbcs.w	r3, r1, r3
 800220c:	d3e6      	bcc.n	80021dc <adf5355_set_freq+0x70>
 800220e:	e074      	b.n	80022fa <adf5355_set_freq+0x18e>
		}
	} else if (dev->dev_id == ADF4356) {
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d14a      	bne.n	80022ae <adf5355_set_freq+0x142>
		if ((freq > dev->max_out_freq) || (freq < dev->min_out_freq)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800221e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002222:	4290      	cmp	r0, r2
 8002224:	eb71 0303 	sbcs.w	r3, r1, r3
 8002228:	d310      	bcc.n	800224c <adf5355_set_freq+0xe0>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002234:	4290      	cmp	r0, r2
 8002236:	eb71 0303 	sbcs.w	r3, r1, r3
 800223a:	d307      	bcc.n	800224c <adf5355_set_freq+0xe0>
		    || (!dev->outb_sel_fund))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8002242:	f083 0301 	eor.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <adf5355_set_freq+0xe6>
			return -EINVAL;
 800224c:	f06f 0315 	mvn.w	r3, #21
 8002250:	e174      	b.n	800253c <adf5355_set_freq+0x3d0>

		dev->rf_div_sel = 0;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1a      	ldr	r2, [r3, #32]
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002264:	025b      	lsls	r3, r3, #9
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002266:	431a      	orrs	r2, r3
					    ADF4355_REG6_OUTPUTB_PWR(dev->outb_power);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
					    ADF4355_REG6_RF_OUTB_EN(dev->outb_en) |
 8002274:	431a      	orrs	r2, r3
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	621a      	str	r2, [r3, #32]

		while (freq < dev->min_vco_freq) {
 800227a:	e00e      	b.n	800229a <adf5355_set_freq+0x12e>
			freq <<= 1;
 800227c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002280:	1894      	adds	r4, r2, r2
 8002282:	eb43 0503 	adc.w	r5, r3, r3
 8002286:	e9c7 4500 	strd	r4, r5, [r7]
			dev->rf_div_sel++;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8002290:	3301      	adds	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
		while (freq < dev->min_vco_freq) {
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80022a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022a4:	4290      	cmp	r0, r2
 80022a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80022aa:	d3e7      	bcc.n	800227c <adf5355_set_freq+0x110>
 80022ac:	e025      	b.n	80022fa <adf5355_set_freq+0x18e>
		}
	} else {
		/* ADF5355 RFoutB 6800...13600 MHz */
		if ((freq > ADF5355_MAX_OUTB_FREQ) || (freq < ADF5355_MIN_OUTB_FREQ))
 80022ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022b2:	49a5      	ldr	r1, [pc, #660]	@ (8002548 <adf5355_set_freq+0x3dc>)
 80022b4:	428a      	cmp	r2, r1
 80022b6:	f173 0303 	sbcs.w	r3, r3, #3
 80022ba:	d206      	bcs.n	80022ca <adf5355_set_freq+0x15e>
 80022bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022c0:	49a2      	ldr	r1, [pc, #648]	@ (800254c <adf5355_set_freq+0x3e0>)
 80022c2:	428a      	cmp	r2, r1
 80022c4:	f173 0301 	sbcs.w	r3, r3, #1
 80022c8:	d202      	bcs.n	80022d0 <adf5355_set_freq+0x164>
			return -EINVAL;
 80022ca:	f06f 0315 	mvn.w	r3, #21
 80022ce:	e135      	b.n	800253c <adf5355_set_freq+0x3d0>

		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
					    ADF5355_REG6_RF_OUTB_EN(dev->outb_en);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80022da:	029b      	lsls	r3, r3, #10
		dev->regs[ADF5355_REG(6)] = dev->regs[ADF5355_REG(6)] |
 80022dc:	431a      	orrs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	621a      	str	r2, [r3, #32]

		freq >>= 1;
 80022e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	0842      	lsrs	r2, r0, #1
 80022f0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80022f4:	084b      	lsrs	r3, r1, #1
 80022f6:	e9c7 2300 	strd	r2, r3, [r7]
	}

	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022fe:	2200      	movs	r2, #0
 8002300:	469a      	mov	sl, r3
 8002302:	4693      	mov	fp, r2
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	336c      	adds	r3, #108	@ 0x6c
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	3270      	adds	r2, #112	@ 0x70
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	3174      	adds	r1, #116	@ 0x74
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	3078      	adds	r0, #120	@ 0x78
				    &dev->fract2, &dev->mod2,
				    ((dev->dev_id == ADF4356)
 8002314:	68fc      	ldr	r4, [r7, #12]
 8002316:	7924      	ldrb	r4, [r4, #4]
	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8002318:	2c04      	cmp	r4, #4
 800231a:	d003      	beq.n	8002324 <adf5355_set_freq+0x1b8>
				     || (dev->dev_id == ADF5356)) ? ADF5356_MAX_MODULUS2 : ADF5355_MAX_MODULUS2);
 800231c:	68fc      	ldr	r4, [r7, #12]
 800231e:	7924      	ldrb	r4, [r4, #4]
 8002320:	2c05      	cmp	r4, #5
 8002322:	d102      	bne.n	800232a <adf5355_set_freq+0x1be>
	adf5355_pll_fract_n_compute(freq, dev->fpfd, &dev->integer, &dev->fract1,
 8002324:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
 8002328:	e001      	b.n	800232e <adf5355_set_freq+0x1c2>
 800232a:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 800232e:	9404      	str	r4, [sp, #16]
 8002330:	9003      	str	r0, [sp, #12]
 8002332:	9102      	str	r1, [sp, #8]
 8002334:	9201      	str	r2, [sp, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4652      	mov	r2, sl
 800233a:	465b      	mov	r3, fp
 800233c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002340:	f7ff fce2 	bl	8001d08 <adf5355_pll_fract_n_compute>

	prescaler = (dev->integer >= ADF5355_MIN_INT_PRESCALER_89);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002348:	2b4a      	cmp	r3, #74	@ 0x4a
 800234a:	bf8c      	ite	hi
 800234c:	2301      	movhi	r3, #1
 800234e:	2300      	movls	r3, #0
 8002350:	74fb      	strb	r3, [r7, #19]

	if (dev->fpfd > 100000000UL || ((dev->fract1 == 0) && (dev->fract2 == 0)))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002356:	4a7e      	ldr	r2, [pc, #504]	@ (8002550 <adf5355_set_freq+0x3e4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d807      	bhi.n	800236c <adf5355_set_freq+0x200>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <adf5355_set_freq+0x206>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <adf5355_set_freq+0x206>
		cp_neg_bleed_en = false;
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
 8002370:	e003      	b.n	800237a <adf5355_set_freq+0x20e>
	else
		cp_neg_bleed_en = dev->cp_neg_bleed_en;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002378:	74bb      	strb	r3, [r7, #18]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) {
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d003      	beq.n	800238a <adf5355_set_freq+0x21e>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	791b      	ldrb	r3, [r3, #4]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d113      	bne.n	80023b2 <adf5355_set_freq+0x246>
		cp_bleed = (24U * (dev->fpfd / 1000) * dev->cp_ua) / (61440 * 900);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800238e:	4a71      	ldr	r2, [pc, #452]	@ (8002554 <adf5355_set_freq+0x3e8>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800239a:	fb03 f202 	mul.w	r2, r3, r2
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	0b9b      	lsrs	r3, r3, #14
 80023a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002558 <adf5355_set_freq+0x3ec>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e016      	b.n	80023e0 <adf5355_set_freq+0x274>
	} else {
		cp_bleed = NO_OS_DIV_ROUND_UP(400 * dev->cp_ua, dev->integer * 375);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c2:	f240 1177 	movw	r1, #375	@ 0x177
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d2:	f240 1177 	movw	r1, #375	@ 0x177
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
	}

	cp_bleed = no_os_clamp(cp_bleed, 1U, 255U);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d904      	bls.n	80023f0 <adf5355_set_freq+0x284>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2bff      	cmp	r3, #255	@ 0xff
 80023ea:	bf28      	it	cs
 80023ec:	23ff      	movcs	r3, #255	@ 0xff
 80023ee:	e000      	b.n	80023f2 <adf5355_set_freq+0x286>
 80023f0:	2301      	movs	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]

	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023f8:	011a      	lsls	r2, r3, #4
 80023fa:	4b58      	ldr	r3, [pc, #352]	@ (800255c <adf5355_set_freq+0x3f0>)
 80023fc:	4013      	ands	r3, r2
				    ADF5355_REG0_PRESCALER(prescaler) |
 80023fe:	7cfa      	ldrb	r2, [r7, #19]
 8002400:	0512      	lsls	r2, r2, #20
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8002402:	4313      	orrs	r3, r2
				    ADF5355_REG0_PRESCALER(prescaler) |
 8002404:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
	dev->regs[ADF5355_REG(0)] = ADF5355_REG0_INT(dev->integer) |
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
				    ADF5355_REG0_AUTOCAL(1);

	dev->regs[ADF5355_REG(1)] = ADF5355_REG1_FRACT(dev->fract1);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002416:	f023 030f 	bic.w	r3, r3, #15
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	60d3      	str	r3, [r2, #12]

	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002422:	011a      	lsls	r2, r3, #4
 8002424:	4b4e      	ldr	r3, [pc, #312]	@ (8002560 <adf5355_set_freq+0x3f4>)
 8002426:	4013      	ands	r3, r2
				    ADF5355_REG2_FRAC2(dev->fract2);
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800242c:	0492      	lsls	r2, r2, #18
	dev->regs[ADF5355_REG(2)] = ADF5355_REG2_MOD2(dev->mod2) |
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	611a      	str	r2, [r3, #16]

	if ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d003      	beq.n	8002444 <adf5355_set_freq+0x2d8>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	2b05      	cmp	r3, #5
 8002442:	d10c      	bne.n	800245e <adf5355_set_freq+0x2f2>
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002448:	0b9b      	lsrs	r3, r3, #14
 800244a:	011a      	lsls	r2, r3, #4
 800244c:	4b44      	ldr	r3, [pc, #272]	@ (8002560 <adf5355_set_freq+0x3f4>)
 800244e:	4013      	ands	r3, r2
					     ADF5356_REG13_FRAC2_MSB(dev->fract2 >> 14);
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002454:	0b92      	lsrs	r2, r2, #14
 8002456:	0492      	lsls	r2, r2, #18
		dev->regs[ADF5355_REG(13)] = ADF5356_REG13_MOD2_MSB(dev->mod2 >> 14) |
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	63da      	str	r2, [r3, #60]	@ 0x3c

	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	f003 0230 	and.w	r2, r3, #48	@ 0x30
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002470:	019b      	lsls	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8002472:	431a      	orrs	r2, r3
				    (((dev->dev_id == ADF5355)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <adf5355_set_freq+0x318>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d107      	bne.n	8002494 <adf5355_set_freq+0x328>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	e00a      	b.n	80024aa <adf5355_set_freq+0x33e>
				     ADF4355_REG6_OUTPUTB_PWR(dev->outb_power) |
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800249a:	01db      	lsls	r3, r3, #7
 800249c:	f403 71c0 	and.w	r1, r3, #384	@ 0x180
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80024a6:	025b      	lsls	r3, r3, #9
				      || (dev->dev_id == ADF5356)) ? ADF5355_REG6_RF_OUTB_EN(!dev->outb_en) :
 80024a8:	430b      	orrs	r3, r1
				    ADF5355_REG6_RF_OUT_EN(dev->outa_en) |
 80024aa:	431a      	orrs	r2, r3
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80024b2:	02db      	lsls	r3, r3, #11
				     ADF4355_REG6_RF_OUTB_EN(dev->outb_en)) |
 80024b4:	4313      	orrs	r3, r2
 80024b6:	461a      	mov	r2, r3
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	035b      	lsls	r3, r3, #13
 80024bc:	f403 13ff 	and.w	r3, r3, #2088960	@ 0x1fe000
				    ADF5355_REG6_MUTE_TILL_LOCK_EN(dev->mute_till_lock_en) |
 80024c0:	431a      	orrs	r2, r3
				    ADF5355_REG6_RF_DIV_SEL(dev->rf_div_sel) |
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80024c8:	055b      	lsls	r3, r3, #21
 80024ca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
				    ADF5355_REG6_CP_BLEED_CURR(cp_bleed) |
 80024ce:	431a      	orrs	r2, r3
				    ADF5355_REG6_FEEDBACK_FUND(1) |
				    ADF4356_REG6_RF_OUTB_SEL((dev->dev_id == ADF4356) ?
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	791b      	ldrb	r3, [r3, #4]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d104      	bne.n	80024e2 <adf5355_set_freq+0x376>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80024de:	065b      	lsls	r3, r3, #25
 80024e0:	e000      	b.n	80024e4 <adf5355_set_freq+0x378>
 80024e2:	2300      	movs	r3, #0
				    ADF5355_REG6_FEEDBACK_FUND(1) |
 80024e4:	431a      	orrs	r2, r3
						    dev->outb_sel_fund : 0) |
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80024ec:	075b      	lsls	r3, r3, #29
						    dev->outb_sel_fund : 0) |
 80024ee:	431a      	orrs	r2, r3
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80024f6:	079b      	lsls	r3, r3, #30
				    ADF5355_REG6_NEG_BLEED_EN(dev->cp_neg_bleed_en) |
 80024f8:	431a      	orrs	r2, r3
				    ADF5356_REG6_BLEED_POLARITY(((dev->dev_id == ADF4356)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	791b      	ldrb	r3, [r3, #4]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d003      	beq.n	800250a <adf5355_set_freq+0x39e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d104      	bne.n	8002514 <adf5355_set_freq+0x3a8>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002510:	07db      	lsls	r3, r3, #31
 8002512:	e000      	b.n	8002516 <adf5355_set_freq+0x3aa>
 8002514:	2300      	movs	r3, #0
				    ADF5355_REG6_GATED_BLEED_EN(dev->cp_gated_bleed_en) |
 8002516:	4313      	orrs	r3, r2
						    || (dev->dev_id == ADF5356)) ?
						    dev->cp_bleed_current_polarity_en : 0) |
 8002518:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 800251c:	f043 0306 	orr.w	r3, r3, #6
	dev->regs[ADF5355_REG(6)] = ADF5355_REG6_OUTPUT_PWR(dev->outa_power) |
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6213      	str	r3, [r2, #32]
				    ADF5355_REG6_DEFAULT;

	dev->freq_req = freq;
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return adf5355_reg_config(dev, dev->all_synced);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	795b      	ldrb	r3, [r3, #5]
 8002532:	4619      	mov	r1, r3
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fc47 	bl	8001dc8 <adf5355_reg_config>
 800253a:	4603      	mov	r3, r0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002546:	bf00      	nop
 8002548:	2a9f8801 	.word	0x2a9f8801
 800254c:	954fc400 	.word	0x954fc400
 8002550:	05f5e100 	.word	0x05f5e100
 8002554:	10624dd3 	.word	0x10624dd3
 8002558:	00136b0b 	.word	0x00136b0b
 800255c:	000ffff0 	.word	0x000ffff0
 8002560:	0003fff0 	.word	0x0003fff0

08002564 <adf5355_setup>:
 * Setup the device.
 * @param dev - The device structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t adf5355_setup(struct adf5355_dev *dev)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
 800256a:	6078      	str	r0, [r7, #4]
	adf5355_calc_pfd(dev);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fb09 	bl	8001b84 <adf5355_calc_pfd>

	dev->regs[ADF5355_REG(5)] = ADF5355_REG5_DEFAULT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a66      	ldr	r2, [pc, #408]	@ (8002710 <adf5355_setup+0x1ac>)
 8002576:	61da      	str	r2, [r3, #28]

	dev->regs[ADF5355_REG(7)] = ADF5355_REG7_LD_MODE_INT_N_EN(0) |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a66      	ldr	r2, [pc, #408]	@ (8002714 <adf5355_setup+0x1b0>)
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24
				    ADF5355_REG7_LD_CYCLE_CNT(0) |
				    ADF5355_REG7_LE_SYNCED_REFIN_EN(1) |
				    ADF5356_REG7_LE_SYNCE_EDGE_RISING_EN(0) |
				    (dev->dev_id == ADF5356) ? ADF5356_REG7_DEFAULT : ADF5355_REG7_DEFAULT;

	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	791b      	ldrb	r3, [r3, #4]
				     || (dev->dev_id == ADF5356)) ? ADF5356_REG8_DEFAULT :
 8002582:	2b04      	cmp	r3, #4
 8002584:	d003      	beq.n	800258e <adf5355_setup+0x2a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d101      	bne.n	8002592 <adf5355_setup+0x2e>
 800258e:	4a62      	ldr	r2, [pc, #392]	@ (8002718 <adf5355_setup+0x1b4>)
 8002590:	e000      	b.n	8002594 <adf5355_setup+0x30>
 8002592:	4a62      	ldr	r2, [pc, #392]	@ (800271c <adf5355_setup+0x1b8>)
	dev->regs[ADF5355_REG(8)] = ((dev->dev_id == ADF4356)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
				    ADF5355_REG8_DEFAULT;

	uint32_t tmp;

	/* Calculate Timeouts */
	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd, 20000U * 30U);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259c:	f503 2312 	add.w	r3, r3, #598016	@ 0x92000
 80025a0:	f203 73bf 	addw	r3, r3, #1983	@ 0x7bf
 80025a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002720 <adf5355_setup+0x1bc>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9b      	lsrs	r3, r3, #18
 80025ac:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 1023U);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d906      	bls.n	80025c2 <adf5355_setup+0x5e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80025ba:	4293      	cmp	r3, r2
 80025bc:	bf28      	it	cs
 80025be:	4613      	movcs	r3, r2
 80025c0:	e000      	b.n	80025c4 <adf5355_setup+0x60>
 80025c2:	2301      	movs	r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]

	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	039a      	lsls	r2, r3, #14
 80025ca:	4b56      	ldr	r3, [pc, #344]	@ (8002724 <adf5355_setup+0x1c0>)
 80025cc:	4013      	ands	r3, r2
				    ADF5355_REG9_SYNTH_LOCK_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 2U,
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025d8:	fb00 f202 	mul.w	r2, r0, r2
 80025dc:	440a      	add	r2, r1
 80025de:	0052      	lsls	r2, r2, #1
 80025e0:	1e51      	subs	r1, r2, #1
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4850      	ldr	r0, [pc, #320]	@ (8002728 <adf5355_setup+0x1c4>)
 80025e6:	fb00 f202 	mul.w	r2, r0, r2
 80025ea:	fbb1 f2f2 	udiv	r2, r1, r2
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 80025f4:	ea43 0102 	orr.w	r1, r3, r2
						    100000U * tmp)) |
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4848      	ldr	r0, [pc, #288]	@ (8002728 <adf5355_setup+0x1c4>)
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	4413      	add	r3, r2
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4845      	ldr	r0, [pc, #276]	@ (8002728 <adf5355_setup+0x1c4>)
 8002612:	fb00 f303 	mul.w	r3, r0, r3
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
						    100000U * tmp)) |
 8002620:	ea41 0203 	orr.w	r2, r1, r3
				    ADF5355_REG9_VCO_BAND_DIV(NO_OS_DIV_ROUND_UP(dev->fpfd,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	7909      	ldrb	r1, [r1, #4]
 800262c:	2904      	cmp	r1, #4
 800262e:	d003      	beq.n	8002638 <adf5355_setup+0xd4>
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	7909      	ldrb	r1, [r1, #4]
 8002634:	2905      	cmp	r1, #5
 8002636:	d101      	bne.n	800263c <adf5355_setup+0xd8>
 8002638:	493c      	ldr	r1, [pc, #240]	@ (800272c <adf5355_setup+0x1c8>)
 800263a:	e000      	b.n	800263e <adf5355_setup+0xda>
 800263c:	493c      	ldr	r1, [pc, #240]	@ (8002730 <adf5355_setup+0x1cc>)
 800263e:	440b      	add	r3, r1
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	791b      	ldrb	r3, [r3, #4]
 8002646:	2b04      	cmp	r3, #4
 8002648:	d003      	beq.n	8002652 <adf5355_setup+0xee>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	791b      	ldrb	r3, [r3, #4]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d101      	bne.n	8002656 <adf5355_setup+0xf2>
 8002652:	4b36      	ldr	r3, [pc, #216]	@ (800272c <adf5355_setup+0x1c8>)
 8002654:	e000      	b.n	8002658 <adf5355_setup+0xf4>
 8002656:	4b36      	ldr	r3, [pc, #216]	@ (8002730 <adf5355_setup+0x1cc>)
 8002658:	fbb1 f3f3 	udiv	r3, r1, r3
 800265c:	061b      	lsls	r3, r3, #24
				    ADF5355_REG9_ALC_TIMEOUT(NO_OS_DIV_ROUND_UP(dev->fpfd * 5U, 100000U * tmp)) |
 800265e:	431a      	orrs	r2, r3
	dev->regs[ADF5355_REG(9)] = ADF5355_REG9_TIMEOUT(tmp) |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c
						    ((dev->dev_id == ADF4356) || (dev->dev_id == ADF5356)) ? 1600000U : 2400000U));

	tmp = NO_OS_DIV_ROUND_UP(dev->fpfd / 100000U - 2, 4);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	4a32      	ldr	r2, [pc, #200]	@ (8002734 <adf5355_setup+0x1d0>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	09db      	lsrs	r3, r3, #7
 8002672:	3301      	adds	r3, #1
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	60fb      	str	r3, [r7, #12]
	tmp = no_os_clamp(tmp, 1U, 255U);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d904      	bls.n	8002688 <adf5355_setup+0x124>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2bff      	cmp	r3, #255	@ 0xff
 8002682:	bf28      	it	cs
 8002684:	23ff      	movcs	r3, #255	@ 0xff
 8002686:	e000      	b.n	800268a <adf5355_setup+0x126>
 8002688:	2301      	movs	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]

	/* Delay > 16 ADC_CLK cycles */
	dev->delay_us = NO_OS_DIV_ROUND_UP(16000000UL, dev->fpfd / (4 * tmp + 2));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	fbb2 f2f3 	udiv	r2, r2, r3
 800269a:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <adf5355_setup+0x1d4>)
 800269c:	4413      	add	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	3202      	adds	r2, #2
 80026a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80026ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
				     ADF5355_REG10_ADC_CONV_EN(1) |
				     ADF5355_REG10_ADC_CLK_DIV(tmp) |
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	f403 537f 	and.w	r3, r3, #16320	@ 0x3fc0
 80026be:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80026c2:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
	dev->regs[ADF5355_REG(10)] = ADF5355_REG10_ADC_EN(1) |
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
				     ADF5355_REG10_DEFAULT;

	dev->regs[ADF5355_REG(11)] = ADF5355_REG11_DEFAULT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1b      	ldr	r2, [pc, #108]	@ (800273c <adf5355_setup+0x1d8>)
 80026ce:	635a      	str	r2, [r3, #52]	@ 0x34

	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	791b      	ldrb	r3, [r3, #4]
				      || (dev->dev_id == ADF5356))?
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d003      	beq.n	80026e0 <adf5355_setup+0x17c>
				      || (dev->dev_id == ADF5356))?
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	791b      	ldrb	r3, [r3, #4]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d102      	bne.n	80026e6 <adf5355_setup+0x182>
				     ADF5356_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5356_REG12_DEFAULT :
 80026e0:	f241 52fc 	movw	r2, #5628	@ 0x15fc
 80026e4:	e000      	b.n	80026e8 <adf5355_setup+0x184>
 80026e6:	4a16      	ldr	r2, [pc, #88]	@ (8002740 <adf5355_setup+0x1dc>)
	dev->regs[ADF5355_REG(12)] = ((dev->dev_id == ADF4356)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38
				     ADF5355_REG12_PHASE_RESYNC_CLK_DIV(1) | ADF5355_REG12_DEFAULT;

	dev->all_synced = false;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	715a      	strb	r2, [r3, #5]

	return adf5355_set_freq(dev, dev->freq_req, dev->freq_req_chan);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 80026fe:	9100      	str	r1, [sp, #0]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fd33 	bl	800216c <adf5355_set_freq>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00800025 	.word	0x00800025
 8002714:	04000007 	.word	0x04000007
 8002718:	15596568 	.word	0x15596568
 800271c:	102d0428 	.word	0x102d0428
 8002720:	6fd91d85 	.word	0x6fd91d85
 8002724:	00ffc000 	.word	0x00ffc000
 8002728:	000186a0 	.word	0x000186a0
 800272c:	00186a00 	.word	0x00186a00
 8002730:	00249f00 	.word	0x00249f00
 8002734:	0a7c5ac5 	.word	0x0a7c5ac5
 8002738:	00f423ff 	.word	0x00f423ff
 800273c:	0061300b 	.word	0x0061300b
 8002740:	0001041c 	.word	0x0001041c
 8002744:	00000000 	.word	0x00000000

08002748 <adf5355_init>:
 * @param init_param - The structure containing the device initial parameters.
 * @return Returns 0 in case of success or negative error code.
 */
int32_t adf5355_init(struct adf5355_dev **device,
		     const struct adf5355_init_param *init_param)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	int32_t ret;
	struct adf5355_dev *dev;

	dev = (struct adf5355_dev *)no_os_calloc(1, sizeof(*dev));
 8002752:	2198      	movs	r1, #152	@ 0x98
 8002754:	2001      	movs	r0, #1
 8002756:	f000 f91f 	bl	8002998 <no_os_calloc>
 800275a:	60f8      	str	r0, [r7, #12]
	if (!dev)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <adf5355_init+0x20>
		return -ENOMEM;
 8002762:	f06f 030b 	mvn.w	r3, #11
 8002766:	e0f0      	b.n	800294a <adf5355_init+0x202>

	dev->spi_desc = init_param->spi_init;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]
	dev->dev_id = init_param->dev_id;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	791a      	ldrb	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	711a      	strb	r2, [r3, #4]
	dev->freq_req = init_param->freq_req;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	dev->freq_req_chan = init_param->freq_req_chan;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	7c1a      	ldrb	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	dev->clkin_freq = init_param->clkin_freq;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->cp_ua = init_param->cp_ua;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	67da      	str	r2, [r3, #124]	@ 0x7c
	dev->cp_neg_bleed_en = init_param->cp_neg_bleed_en;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	7f1a      	ldrb	r2, [r3, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	dev->cp_gated_bleed_en = init_param->cp_gated_bleed_en;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7f5a      	ldrb	r2, [r3, #29]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	dev->cp_bleed_current_polarity_en = init_param->cp_bleed_current_polarity_en;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7f9a      	ldrb	r2, [r3, #30]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	dev->mute_till_lock_en = init_param->mute_till_lock_en;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	7fda      	ldrb	r2, [r3, #31]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	dev->outa_en = init_param->outa_en;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	dev->outb_en = init_param->outb_en;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	dev->outa_power = init_param->outa_power;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	dev->outb_power = init_param->outb_power;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	dev->phase_detector_polarity_neg = init_param->phase_detector_polarity_neg;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027fc:	461a      	mov	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	dev->ref_diff_en = init_param->ref_diff_en;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	dev->mux_out_3v3_en = init_param->mux_out_3v3_en;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	dev->ref_doubler_en = init_param->ref_doubler_en;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	dev->ref_div2_en = init_param->ref_div2_en;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	dev->mux_out_sel = init_param->mux_out_sel;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	dev->outb_sel_fund = init_param->outb_sel_fund;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	dev->num_channels = 2;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	if (dev->clkin_freq > 75000000) dev->ref_div2_en = true;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002858:	4a4d      	ldr	r2, [pc, #308]	@ (8002990 <adf5355_init+0x248>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d903      	bls.n	8002866 <adf5355_init+0x11e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	switch (dev->dev_id) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	791b      	ldrb	r3, [r3, #4]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d85a      	bhi.n	8002924 <adf5355_init+0x1dc>
 800286e:	a201      	add	r2, pc, #4	@ (adr r2, 8002874 <adf5355_init+0x12c>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	0800288d 	.word	0x0800288d
 8002878:	080028b3 	.word	0x080028b3
 800287c:	080028d9 	.word	0x080028d9
 8002880:	080028ff 	.word	0x080028ff
 8002884:	0800288d 	.word	0x0800288d
 8002888:	0800288d 	.word	0x0800288d
	case ADF4356:
	case ADF5356:
	case ADF5355:
		dev->max_out_freq = ADF5355_MAX_OUT_FREQ;
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	a332      	add	r3, pc, #200	@ (adr r3, 8002958 <adf5355_init+0x210>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF5355_MIN_OUT_FREQ;
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	a331      	add	r3, pc, #196	@ (adr r3, 8002960 <adf5355_init+0x218>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF5355_MIN_VCO_FREQ;
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	a330      	add	r3, pc, #192	@ (adr r3, 8002968 <adf5355_init+0x220>)
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80028b0:	e038      	b.n	8002924 <adf5355_init+0x1dc>
	case ADF4355:
		dev->max_out_freq = ADF4355_MAX_OUT_FREQ;
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	a32e      	add	r3, pc, #184	@ (adr r3, 8002970 <adf5355_init+0x228>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_MIN_OUT_FREQ;
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	a327      	add	r3, pc, #156	@ (adr r3, 8002960 <adf5355_init+0x218>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_MIN_VCO_FREQ;
 80028ca:	68f9      	ldr	r1, [r7, #12]
 80028cc:	a326      	add	r3, pc, #152	@ (adr r3, 8002968 <adf5355_init+0x220>)
 80028ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80028d6:	e025      	b.n	8002924 <adf5355_init+0x1dc>
	case ADF4355_2:
		dev->max_out_freq = ADF4355_2_MAX_OUT_FREQ;
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4a2e      	ldr	r2, [pc, #184]	@ (8002994 <adf5355_init+0x24c>)
 80028dc:	f04f 0301 	mov.w	r3, #1
 80028e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_2_MIN_OUT_FREQ;
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	a31e      	add	r3, pc, #120	@ (adr r3, 8002960 <adf5355_init+0x218>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_2_MIN_VCO_FREQ;
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8002968 <adf5355_init+0x220>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 80028fc:	e012      	b.n	8002924 <adf5355_init+0x1dc>
	case ADF4355_3:
		dev->max_out_freq = ADF4355_3_MAX_OUT_FREQ;
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	a31d      	add	r3, pc, #116	@ (adr r3, 8002978 <adf5355_init+0x230>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		dev->min_out_freq = ADF4355_3_MIN_OUT_FREQ;
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	a31c      	add	r3, pc, #112	@ (adr r3, 8002980 <adf5355_init+0x238>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		dev->min_vco_freq = ADF4355_3_MIN_VCO_FREQ;
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	a31b      	add	r3, pc, #108	@ (adr r3, 8002988 <adf5355_init+0x240>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		break;
 8002922:	bf00      	nop
	}

	ret = adf5355_setup(dev);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff fe1d 	bl	8002564 <adf5355_setup>
 800292a:	60b8      	str	r0, [r7, #8]
	if (ret != 0)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <adf5355_init+0x1f4>
		goto error_spi;

	*device = dev;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

	return ret;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	e006      	b.n	800294a <adf5355_init+0x202>
		goto error_spi;
 800293c:	bf00      	nop

error_spi:
	HAL_SPI_DeInit(dev->spi_desc);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f002 fb05 	bl	8004f52 <HAL_SPI_DeInit>

	return ret;
 8002948:	68bb      	ldr	r3, [r7, #8]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	954fc400 	.word	0x954fc400
 800295c:	00000001 	.word	0x00000001
 8002960:	032a9f88 	.word	0x032a9f88
 8002964:	00000000 	.word	0x00000000
 8002968:	caa7e200 	.word	0xcaa7e200
 800296c:	00000000 	.word	0x00000000
 8002970:	2a9f8800 	.word	0x2a9f8800
 8002974:	00000003 	.word	0x00000003
 8002978:	89640200 	.word	0x89640200
 800297c:	00000001 	.word	0x00000001
 8002980:	0312c804 	.word	0x0312c804
 8002984:	00000000 	.word	0x00000000
 8002988:	c4b20100 	.word	0xc4b20100
 800298c:	00000000 	.word	0x00000000
 8002990:	047868c0 	.word	0x047868c0
 8002994:	0642ac00 	.word	0x0642ac00

08002998 <no_os_calloc>:
 * @param nitems - Number of elements to be allocated.
 * @param size - Size of elements.
 * @return Pointer to the allocated memory, or NULL if the request fails.
 */
__attribute__((weak)) void *no_os_calloc(size_t nitems, size_t size)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	return calloc(nitems, size);
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f007 fd2f 	bl	800a408 <calloc>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <no_os_greatest_common_divisor>:
/**
 * Find greatest common divisor of the given two numbers.
 */
uint32_t no_os_greatest_common_divisor(uint32_t a,
				       uint32_t b)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	uint32_t div;

	if ((a == 0) || (b == 0))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <no_os_greatest_common_divisor+0x16>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d112      	bne.n	80029f0 <no_os_greatest_common_divisor+0x3c>
		return no_os_max(a, b);
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4293      	cmp	r3, r2
 80029d0:	bf38      	it	cc
 80029d2:	4613      	movcc	r3, r2
 80029d4:	e010      	b.n	80029f8 <no_os_greatest_common_divisor+0x44>

	while (b != 0) {
		div = a % b;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	fbb3 f2f2 	udiv	r2, r3, r2
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	fb01 f202 	mul.w	r2, r1, r2
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
		a = b;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	607b      	str	r3, [r7, #4]
		b = div;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	603b      	str	r3, [r7, #0]
	while (b != 0) {
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ef      	bne.n	80029d6 <no_os_greatest_common_divisor+0x22>
	}

	return a;
 80029f6:	687b      	ldr	r3, [r7, #4]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <no_os_do_div>:
/**
 * Calculate the quotient and the remainder of an integer division.
 */
uint64_t no_os_do_div(uint64_t* n,
		      uint64_t base)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t mod = 0;
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9c7 2304 	strd	r2, r3, [r7, #16]

	mod = *n % base;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a26:	f7fd fe17 	bl	8000658 <__aeabi_uldivmod>
 8002a2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*n = *n / base;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a38:	f7fd fe0e 	bl	8000658 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	e9c1 2300 	strd	r2, r3, [r1]

	return mod;
 8002a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <HAL_Init+0x3c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0b      	ldr	r2, [pc, #44]	@ (8002a90 <HAL_Init+0x3c>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	f000 f903 	bl	8002c76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a70:	200f      	movs	r0, #15
 8002a72:	f7fe fbf5 	bl	8001260 <HAL_InitTick>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	e001      	b.n	8002a86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a82:	f7fe fbc5 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a86:	79fb      	ldrb	r3, [r7, #7]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40022000 	.word	0x40022000

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	200000c0 	.word	0x200000c0
 8002ab8:	200003f8 	.word	0x200003f8

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200003f8 	.word	0x200003f8

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200000c0 	.word	0x200000c0

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	@ (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	@ (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	@ (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	@ 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ff4c 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9e:	f7ff ff61 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ca2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	6978      	ldr	r0, [r7, #20]
 8002caa:	f7ff ffb1 	bl	8002c10 <NVIC_EncodePriority>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff80 	bl	8002bbc <__NVIC_SetPriority>
}
 8002cbc:	bf00      	nop
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff54 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e098      	b.n	8002e24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <HAL_DMA_Init+0x150>)
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d80f      	bhi.n	8002d1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <HAL_DMA_Init+0x154>)
 8002d06:	4413      	add	r3, r2
 8002d08:	4a4b      	ldr	r2, [pc, #300]	@ (8002e38 <HAL_DMA_Init+0x158>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	009a      	lsls	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a48      	ldr	r2, [pc, #288]	@ (8002e3c <HAL_DMA_Init+0x15c>)
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d1c:	e00e      	b.n	8002d3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b46      	ldr	r3, [pc, #280]	@ (8002e40 <HAL_DMA_Init+0x160>)
 8002d26:	4413      	add	r3, r2
 8002d28:	4a43      	ldr	r2, [pc, #268]	@ (8002e38 <HAL_DMA_Init+0x158>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	009a      	lsls	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a42      	ldr	r2, [pc, #264]	@ (8002e44 <HAL_DMA_Init+0x164>)
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d96:	d039      	beq.n	8002e0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <HAL_DMA_Init+0x15c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d11a      	bne.n	8002dd8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002da2:	4b29      	ldr	r3, [pc, #164]	@ (8002e48 <HAL_DMA_Init+0x168>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	f003 031c 	and.w	r3, r3, #28
 8002dae:	210f      	movs	r1, #15
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4924      	ldr	r1, [pc, #144]	@ (8002e48 <HAL_DMA_Init+0x168>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dbc:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <HAL_DMA_Init+0x168>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	f003 031c 	and.w	r3, r3, #28
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	491d      	ldr	r1, [pc, #116]	@ (8002e48 <HAL_DMA_Init+0x168>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
 8002dd6:	e019      	b.n	8002e0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <HAL_DMA_Init+0x16c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	f003 031c 	and.w	r3, r3, #28
 8002de4:	210f      	movs	r1, #15
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	4917      	ldr	r1, [pc, #92]	@ (8002e4c <HAL_DMA_Init+0x16c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002df2:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <HAL_DMA_Init+0x16c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f003 031c 	and.w	r3, r3, #28
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	4911      	ldr	r1, [pc, #68]	@ (8002e4c <HAL_DMA_Init+0x16c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40020407 	.word	0x40020407
 8002e34:	bffdfff8 	.word	0xbffdfff8
 8002e38:	cccccccd 	.word	0xcccccccd
 8002e3c:	40020000 	.word	0x40020000
 8002e40:	bffdfbf8 	.word	0xbffdfbf8
 8002e44:	40020400 	.word	0x40020400
 8002e48:	400200a8 	.word	0x400200a8
 8002e4c:	400204a8 	.word	0x400204a8

08002e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_DMA_Start_IT+0x20>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e04b      	b.n	8002f08 <HAL_DMA_Start_IT+0xb8>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d13a      	bne.n	8002efa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f95f 	bl	800316c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 020e 	orr.w	r2, r2, #14
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e00f      	b.n	8002ee8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 020a 	orr.w	r2, r2, #10
 8002ee6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e005      	b.n	8002f06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d008      	beq.n	8002f3a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e022      	b.n	8002f80 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020e 	bic.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f003 021c 	and.w	r2, r3, #28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d005      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e029      	b.n	8003004 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 020e 	bic.w	r2, r2, #14
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	f003 021c 	and.w	r2, r3, #28
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
    }
  }
  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	f003 031c 	and.w	r3, r3, #28
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d026      	beq.n	8003088 <HAL_DMA_IRQHandler+0x7a>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d021      	beq.n	8003088 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0204 	bic.w	r2, r2, #4
 8003060:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f003 021c 	and.w	r2, r3, #28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	2104      	movs	r1, #4
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	2b00      	cmp	r3, #0
 800307c:	d071      	beq.n	8003162 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003086:	e06c      	b.n	8003162 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308c:	f003 031c 	and.w	r3, r3, #28
 8003090:	2202      	movs	r2, #2
 8003092:	409a      	lsls	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d02e      	beq.n	80030fa <HAL_DMA_IRQHandler+0xec>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d029      	beq.n	80030fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 020a 	bic.w	r2, r2, #10
 80030c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	f003 021c 	and.w	r2, r3, #28
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	2102      	movs	r1, #2
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d038      	beq.n	8003162 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030f8:	e033      	b.n	8003162 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f003 031c 	and.w	r3, r3, #28
 8003102:	2208      	movs	r2, #8
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02a      	beq.n	8003164 <HAL_DMA_IRQHandler+0x156>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d025      	beq.n	8003164 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 020e 	bic.w	r2, r2, #14
 8003126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312c:	f003 021c 	and.w	r2, r3, #28
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003162:	bf00      	nop
 8003164:	bf00      	nop
}
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f003 021c 	and.w	r2, r3, #28
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f202 	lsl.w	r2, r1, r2
 800318c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b10      	cmp	r3, #16
 800319c:	d108      	bne.n	80031b0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031ae:	e007      	b.n	80031c0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031da:	e17f      	b.n	80034dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8171 	beq.w	80034d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d005      	beq.n	800320c <HAL_GPIO_Init+0x40>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d130      	bne.n	800326e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003242:	2201      	movs	r2, #1
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 0201 	and.w	r2, r3, #1
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b03      	cmp	r3, #3
 8003278:	d118      	bne.n	80032ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d017      	beq.n	80032e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	6939      	ldr	r1, [r7, #16]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80ac 	beq.w	80034d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	4b5f      	ldr	r3, [pc, #380]	@ (80034fc <HAL_GPIO_Init+0x330>)
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	4a5e      	ldr	r2, [pc, #376]	@ (80034fc <HAL_GPIO_Init+0x330>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6613      	str	r3, [r2, #96]	@ 0x60
 800338a:	4b5c      	ldr	r3, [pc, #368]	@ (80034fc <HAL_GPIO_Init+0x330>)
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003396:	4a5a      	ldr	r2, [pc, #360]	@ (8003500 <HAL_GPIO_Init+0x334>)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x242>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003504 <HAL_GPIO_Init+0x338>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003508 <HAL_GPIO_Init+0x33c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4d      	ldr	r2, [pc, #308]	@ (800350c <HAL_GPIO_Init+0x340>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003510 <HAL_GPIO_Init+0x344>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003514 <HAL_GPIO_Init+0x348>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003518 <HAL_GPIO_Init+0x34c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x22a>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00c      	b.n	8003410 <HAL_GPIO_Init+0x244>
 80033f6:	2307      	movs	r3, #7
 80033f8:	e00a      	b.n	8003410 <HAL_GPIO_Init+0x244>
 80033fa:	2305      	movs	r3, #5
 80033fc:	e008      	b.n	8003410 <HAL_GPIO_Init+0x244>
 80033fe:	2304      	movs	r3, #4
 8003400:	e006      	b.n	8003410 <HAL_GPIO_Init+0x244>
 8003402:	2303      	movs	r3, #3
 8003404:	e004      	b.n	8003410 <HAL_GPIO_Init+0x244>
 8003406:	2302      	movs	r3, #2
 8003408:	e002      	b.n	8003410 <HAL_GPIO_Init+0x244>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_GPIO_Init+0x244>
 800340e:	2300      	movs	r3, #0
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	f002 0203 	and.w	r2, r2, #3
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	4093      	lsls	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003420:	4937      	ldr	r1, [pc, #220]	@ (8003500 <HAL_GPIO_Init+0x334>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800342e:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_GPIO_Init+0x350>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003452:	4a32      	ldr	r2, [pc, #200]	@ (800351c <HAL_GPIO_Init+0x350>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003458:	4b30      	ldr	r3, [pc, #192]	@ (800351c <HAL_GPIO_Init+0x350>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800347c:	4a27      	ldr	r2, [pc, #156]	@ (800351c <HAL_GPIO_Init+0x350>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003482:	4b26      	ldr	r3, [pc, #152]	@ (800351c <HAL_GPIO_Init+0x350>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034a6:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <HAL_GPIO_Init+0x350>)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_GPIO_Init+0x350>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d0:	4a12      	ldr	r2, [pc, #72]	@ (800351c <HAL_GPIO_Init+0x350>)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f47f ae78 	bne.w	80031dc <HAL_GPIO_Init+0x10>
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	40010000 	.word	0x40010000
 8003504:	48000400 	.word	0x48000400
 8003508:	48000800 	.word	0x48000800
 800350c:	48000c00 	.word	0x48000c00
 8003510:	48001000 	.word	0x48001000
 8003514:	48001400 	.word	0x48001400
 8003518:	48001800 	.word	0x48001800
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800352e:	e0cd      	b.n	80036cc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003530:	2201      	movs	r2, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80c0 	beq.w	80036c6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003546:	4a68      	ldr	r2, [pc, #416]	@ (80036e8 <HAL_GPIO_DeInit+0x1c8>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800356e:	d025      	beq.n	80035bc <HAL_GPIO_DeInit+0x9c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a5e      	ldr	r2, [pc, #376]	@ (80036ec <HAL_GPIO_DeInit+0x1cc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d01f      	beq.n	80035b8 <HAL_GPIO_DeInit+0x98>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a5d      	ldr	r2, [pc, #372]	@ (80036f0 <HAL_GPIO_DeInit+0x1d0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d019      	beq.n	80035b4 <HAL_GPIO_DeInit+0x94>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a5c      	ldr	r2, [pc, #368]	@ (80036f4 <HAL_GPIO_DeInit+0x1d4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_GPIO_DeInit+0x90>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a5b      	ldr	r2, [pc, #364]	@ (80036f8 <HAL_GPIO_DeInit+0x1d8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <HAL_GPIO_DeInit+0x8c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a5a      	ldr	r2, [pc, #360]	@ (80036fc <HAL_GPIO_DeInit+0x1dc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <HAL_GPIO_DeInit+0x88>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a59      	ldr	r2, [pc, #356]	@ (8003700 <HAL_GPIO_DeInit+0x1e0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_GPIO_DeInit+0x84>
 80035a0:	2306      	movs	r3, #6
 80035a2:	e00c      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035a4:	2307      	movs	r3, #7
 80035a6:	e00a      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035a8:	2305      	movs	r3, #5
 80035aa:	e008      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e006      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035b0:	2303      	movs	r3, #3
 80035b2:	e004      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e002      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_GPIO_DeInit+0x9e>
 80035bc:	2300      	movs	r3, #0
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	f002 0203 	and.w	r2, r2, #3
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	4093      	lsls	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d132      	bne.n	8003634 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80035ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	494b      	ldr	r1, [pc, #300]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035d8:	4013      	ands	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80035dc:	4b49      	ldr	r3, [pc, #292]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	4947      	ldr	r1, [pc, #284]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80035ea:	4b46      	ldr	r3, [pc, #280]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4944      	ldr	r1, [pc, #272]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80035f8:	4b42      	ldr	r3, [pc, #264]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	4940      	ldr	r1, [pc, #256]	@ (8003704 <HAL_GPIO_DeInit+0x1e4>)
 8003602:	4013      	ands	r3, r2
 8003604:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003616:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <HAL_GPIO_DeInit+0x1c8>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43da      	mvns	r2, r3
 8003626:	4830      	ldr	r0, [pc, #192]	@ (80036e8 <HAL_GPIO_DeInit+0x1c8>)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	400a      	ands	r2, r1
 800362e:	3302      	adds	r3, #2
 8003630:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2103      	movs	r1, #3
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	08da      	lsrs	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3208      	adds	r2, #8
 8003650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	08d2      	lsrs	r2, r2, #3
 8003668:	4019      	ands	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3208      	adds	r2, #8
 800366e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2103      	movs	r1, #3
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	2101      	movs	r1, #1
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2103      	movs	r1, #3
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	401a      	ands	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b6:	2101      	movs	r1, #1
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	401a      	ands	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3301      	adds	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f af2b 	bne.w	8003530 <HAL_GPIO_DeInit+0x10>
  }
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40010000 	.word	0x40010000
 80036ec:	48000400 	.word	0x48000400
 80036f0:	48000800 	.word	0x48000800
 80036f4:	48000c00 	.word	0x48000c00
 80036f8:	48001000 	.word	0x48001000
 80036fc:	48001400 	.word	0x48001400
 8003700:	48001800 	.word	0x48001800
 8003704:	40010400 	.word	0x40010400

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003724:	e002      	b.n	800372c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003742:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fa0a 	bl	8000b70 <HAL_GPIO_EXTI_Callback>
  }
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <HAL_PWREx_GetVoltageRange+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000

08003784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003792:	d130      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003794:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800379c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a0:	d038      	beq.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037a2:	4b20      	ldr	r3, [pc, #128]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2232      	movs	r2, #50	@ 0x32
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0c9b      	lsrs	r3, r3, #18
 80037c4:	3301      	adds	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c8:	e002      	b.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d0:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037dc:	d102      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f2      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f0:	d110      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003802:	d007      	beq.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003804:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800380c:	4a05      	ldr	r2, [pc, #20]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000
 8003828:	200000b0 	.word	0x200000b0
 800382c:	431bde83 	.word	0x431bde83

08003830 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e3ca      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003842:	4b97      	ldr	r3, [pc, #604]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384c:	4b94      	ldr	r3, [pc, #592]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80e4 	beq.w	8003a2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_RCC_OscConfig+0x4a>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f040 808b 	bne.w	8003988 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 8087 	bne.w	8003988 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800387a:	4b89      	ldr	r3, [pc, #548]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e3a2      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	4b82      	ldr	r3, [pc, #520]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_RCC_OscConfig+0x7c>
 80038a2:	4b7f      	ldr	r3, [pc, #508]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038aa:	e005      	b.n	80038b8 <HAL_RCC_OscConfig+0x88>
 80038ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d223      	bcs.n	8003904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fd87 	bl	80043d4 <RCC_SetFlashLatencyFromMSIRange>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e383      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d0:	4b73      	ldr	r3, [pc, #460]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a72      	ldr	r2, [pc, #456]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b70      	ldr	r3, [pc, #448]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	496d      	ldr	r1, [pc, #436]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ee:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	4968      	ldr	r1, [pc, #416]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 8003902:	e025      	b.n	8003950 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003904:	4b66      	ldr	r3, [pc, #408]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a65      	ldr	r2, [pc, #404]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b63      	ldr	r3, [pc, #396]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4960      	ldr	r1, [pc, #384]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003922:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	495b      	ldr	r1, [pc, #364]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd47 	bl	80043d4 <RCC_SetFlashLatencyFromMSIRange>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e343      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003950:	f000 fc4a 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4950      	ldr	r1, [pc, #320]	@ (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa8 <HAL_RCC_OscConfig+0x278>)
 800396e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003970:	4b4e      	ldr	r3, [pc, #312]	@ (8003aac <HAL_RCC_OscConfig+0x27c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fc73 	bl	8001260 <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d052      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	e327      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d032      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003990:	4b43      	ldr	r3, [pc, #268]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a42      	ldr	r2, [pc, #264]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800399c:	f7ff f88e 	bl	8002abc <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039a4:	f7ff f88a 	bl	8002abc <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e310      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b6:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a36      	ldr	r2, [pc, #216]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039c8:	f043 0308 	orr.w	r3, r3, #8
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b34      	ldr	r3, [pc, #208]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4931      	ldr	r1, [pc, #196]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e0:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	492c      	ldr	r1, [pc, #176]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	e01a      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039f6:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a02:	f7ff f85b 	bl	8002abc <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a0a:	f7ff f857 	bl	8002abc <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e2dd      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a1c:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1da>
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d074      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x21a>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	d10e      	bne.n	8003a62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d10b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d064      	beq.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d160      	bne.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e2ba      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x24a>
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e026      	b.n	8003ac8 <HAL_RCC_OscConfig+0x298>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a82:	d115      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x280>
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a02      	ldr	r2, [pc, #8]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCC_OscConfig+0x298>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	0800bb14 	.word	0x0800bb14
 8003aa8:	200000b0 	.word	0x200000b0
 8003aac:	200000bc 	.word	0x200000bc
 8003ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b9d      	ldr	r3, [pc, #628]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fff4 	bl	8002abc <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fff0 	bl	8002abc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	@ 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e276      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	4b92      	ldr	r3, [pc, #584]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2a8>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fe ffe0 	bl	8002abc <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe ffdc 	bl	8002abc <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	@ 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e262      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b12:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2d0>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d060      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x310>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d116      	bne.n	8003b6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b40:	4b7c      	ldr	r3, [pc, #496]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x328>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e23f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b76      	ldr	r3, [pc, #472]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	4973      	ldr	r1, [pc, #460]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	e040      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d023      	beq.n	8003bbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b76:	4b6f      	ldr	r3, [pc, #444]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe ff9b 	bl	8002abc <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe ff97 	bl	8002abc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e21d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b9c:	4b65      	ldr	r3, [pc, #404]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b62      	ldr	r3, [pc, #392]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	495f      	ldr	r1, [pc, #380]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	e018      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe ff77 	bl	8002abc <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fe ff73 	bl	8002abc <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1f9      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003be4:	4b53      	ldr	r3, [pc, #332]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c04:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe ff52 	bl	8002abc <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7fe ff4e 	bl	8002abc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1d4      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c2e:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <HAL_RCC_OscConfig+0x3ec>
 8003c3c:	e01b      	b.n	8003c76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c44:	4a3b      	ldr	r2, [pc, #236]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe ff35 	bl	8002abc <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fe ff31 	bl	8002abc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1b7      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ef      	bne.n	8003c56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80a6 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c88:	4b2a      	ldr	r3, [pc, #168]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10d      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb0:	4b21      	ldr	r3, [pc, #132]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d118      	bne.n	8003cee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc8:	f7fe fef8 	bl	8002abc <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd0:	f7fe fef4 	bl	8002abc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e17a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4d8>
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d06:	e029      	b.n	8003d5c <HAL_RCC_OscConfig+0x52c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d115      	bne.n	8003d3c <HAL_RCC_OscConfig+0x50c>
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a07      	ldr	r2, [pc, #28]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	4a03      	ldr	r2, [pc, #12]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d30:	e014      	b.n	8003d5c <HAL_RCC_OscConfig+0x52c>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a9b      	ldr	r2, [pc, #620]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d4c:	4b98      	ldr	r3, [pc, #608]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	4a97      	ldr	r2, [pc, #604]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d016      	beq.n	8003d92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe feaa 	bl	8002abc <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fea6 	bl	8002abc <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e12a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d82:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ed      	beq.n	8003d6c <HAL_RCC_OscConfig+0x53c>
 8003d90:	e015      	b.n	8003dbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fe fe93 	bl	8002abc <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fe fe8f 	bl	8002abc <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e113      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db0:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ed      	bne.n	8003d9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	4a79      	ldr	r2, [pc, #484]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80fe 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 80d0 	bne.w	8003f84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003de4:	4b72      	ldr	r3, [pc, #456]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d130      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d127      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e24:	2a07      	cmp	r2, #7
 8003e26:	bf14      	ite	ne
 8003e28:	2201      	movne	r2, #1
 8003e2a:	2200      	moveq	r2, #0
 8003e2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d109      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	3b01      	subs	r3, #1
 8003e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d06e      	beq.n	8003f38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d069      	beq.n	8003f34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ad      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e88:	f7fe fe18 	bl	8002abc <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fe fe14 	bl	8002abc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e09a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea2:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eae:	4b40      	ldr	r3, [pc, #256]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	4b40      	ldr	r3, [pc, #256]	@ (8003fb4 <HAL_RCC_OscConfig+0x784>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ec8:	0212      	lsls	r2, r2, #8
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ed0:	0852      	lsrs	r2, r2, #1
 8003ed2:	3a01      	subs	r2, #1
 8003ed4:	0552      	lsls	r2, r2, #21
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0652      	lsls	r2, r2, #25
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ee8:	0912      	lsrs	r2, r2, #4
 8003eea:	0452      	lsls	r2, r2, #17
 8003eec:	430a      	orrs	r2, r1
 8003eee:	4930      	ldr	r1, [pc, #192]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f00:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f0c:	f7fe fdd6 	bl	8002abc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fdd2 	bl	8002abc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e058      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f32:	e050      	b.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f38:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d148      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a19      	ldr	r2, [pc, #100]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f5c:	f7fe fdae 	bl	8002abc <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fdaa 	bl	8002abc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e030      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x734>
 8003f82:	e028      	b.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d023      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe fd91 	bl	8002abc <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9c:	e00c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe fd8d 	bl	8002abc <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d905      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e013      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <HAL_RCC_OscConfig+0x7b0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ec      	bne.n	8003f9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCC_OscConfig+0x7b0>)
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4905      	ldr	r1, [pc, #20]	@ (8003fe0 <HAL_RCC_OscConfig+0x7b0>)
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_RCC_OscConfig+0x7b4>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60cb      	str	r3, [r1, #12]
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	feeefffc 	.word	0xfeeefffc

08003fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0e7      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b75      	ldr	r3, [pc, #468]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b72      	ldr	r3, [pc, #456]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0207 	bic.w	r2, r3, #7
 8004012:	4970      	ldr	r1, [pc, #448]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b6e      	ldr	r3, [pc, #440]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0cf      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b66      	ldr	r3, [pc, #408]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004044:	429a      	cmp	r2, r3
 8004046:	d908      	bls.n	800405a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b63      	ldr	r3, [pc, #396]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4960      	ldr	r1, [pc, #384]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d04c      	beq.n	8004100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	4b5a      	ldr	r3, [pc, #360]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d121      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0a6      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	4b54      	ldr	r3, [pc, #336]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d115      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e09a      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409e:	4b4e      	ldr	r3, [pc, #312]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e08e      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ae:	4b4a      	ldr	r3, [pc, #296]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e086      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040be:	4b46      	ldr	r3, [pc, #280]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 0203 	bic.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4943      	ldr	r1, [pc, #268]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fe fcf4 	bl	8002abc <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d8:	f7fe fcf0 	bl	8002abc <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e06e      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 020c 	and.w	r2, r3, #12
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d1eb      	bne.n	80040d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004118:	429a      	cmp	r2, r3
 800411a:	d208      	bcs.n	800412e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	492b      	ldr	r1, [pc, #172]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d210      	bcs.n	800415e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413c:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 0207 	bic.w	r2, r3, #7
 8004144:	4923      	ldr	r1, [pc, #140]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e036      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4918      	ldr	r1, [pc, #96]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4910      	ldr	r1, [pc, #64]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800419c:	f000 f824 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	490b      	ldr	r1, [pc, #44]	@ (80041dc <HAL_RCC_ClockConfig+0x1f4>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	4a09      	ldr	r2, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041bc:	4b09      	ldr	r3, [pc, #36]	@ (80041e4 <HAL_RCC_ClockConfig+0x1fc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd f84d 	bl	8001260 <HAL_InitTick>
 80041c6:	4603      	mov	r3, r0
 80041c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ca:	7afb      	ldrb	r3, [r7, #11]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40022000 	.word	0x40022000
 80041d8:	40021000 	.word	0x40021000
 80041dc:	0800bb14 	.word	0x0800bb14
 80041e0:	200000b0 	.word	0x200000b0
 80041e4:	200000bc 	.word	0x200000bc

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004200:	4b3b      	ldr	r3, [pc, #236]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x34>
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d121      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d11e      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800421c:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004228:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e005      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004244:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d102      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004260:	4b25      	ldr	r3, [pc, #148]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e004      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d101      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800426c:	4b23      	ldr	r3, [pc, #140]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x114>)
 800426e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d134      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004276:	4b1e      	ldr	r3, [pc, #120]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0xa6>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d003      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0xac>
 800428c:	e005      	b.n	800429a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800428e:	4b1a      	ldr	r3, [pc, #104]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004290:	617b      	str	r3, [r7, #20]
      break;
 8004292:	e005      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004294:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004296:	617b      	str	r3, [r7, #20]
      break;
 8004298:	e002      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042a0:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	3301      	adds	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	fb03 f202 	mul.w	r2, r3, r2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	0e5b      	lsrs	r3, r3, #25
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	3301      	adds	r3, #1
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	fbb2 f3f3 	udiv	r3, r2, r3
 80042de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042e0:	69bb      	ldr	r3, [r7, #24]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3724      	adds	r7, #36	@ 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	0800bb2c 	.word	0x0800bb2c
 80042f8:	00f42400 	.word	0x00f42400
 80042fc:	007a1200 	.word	0x007a1200

08004300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <HAL_RCC_GetHCLKFreq+0x14>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	200000b0 	.word	0x200000b0

08004318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800431c:	f7ff fff0 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4904      	ldr	r1, [pc, #16]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	0800bb24 	.word	0x0800bb24

08004344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004348:	f7ff ffda 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0adb      	lsrs	r3, r3, #11
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4904      	ldr	r1, [pc, #16]	@ (800436c <HAL_RCC_GetPCLK2Freq+0x28>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	0800bb24 	.word	0x0800bb24

08004370 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	220f      	movs	r2, #15
 800437e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004380:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <HAL_RCC_GetClockConfig+0x5c>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0203 	and.w	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800438c:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004398:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <HAL_RCC_GetClockConfig+0x5c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_GetClockConfig+0x5c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	08db      	lsrs	r3, r3, #3
 80043aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <HAL_RCC_GetClockConfig+0x60>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0207 	and.w	r2, r3, #7
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	601a      	str	r2, [r3, #0]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40022000 	.word	0x40022000

080043d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043e0:	4b2a      	ldr	r3, [pc, #168]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043ec:	f7ff f9bc 	bl	8003768 <HAL_PWREx_GetVoltageRange>
 80043f0:	6178      	str	r0, [r7, #20]
 80043f2:	e014      	b.n	800441e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f4:	4b25      	ldr	r3, [pc, #148]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f8:	4a24      	ldr	r2, [pc, #144]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004400:	4b22      	ldr	r3, [pc, #136]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800440c:	f7ff f9ac 	bl	8003768 <HAL_PWREx_GetVoltageRange>
 8004410:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004416:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800441c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004424:	d10b      	bne.n	800443e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b80      	cmp	r3, #128	@ 0x80
 800442a:	d919      	bls.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004430:	d902      	bls.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004432:	2302      	movs	r3, #2
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	e013      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004438:	2301      	movs	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e010      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b80      	cmp	r3, #128	@ 0x80
 8004442:	d902      	bls.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004444:	2303      	movs	r3, #3
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e00a      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b80      	cmp	r3, #128	@ 0x80
 800444e:	d102      	bne.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004450:	2302      	movs	r3, #2
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e004      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b70      	cmp	r3, #112	@ 0x70
 800445a:	d101      	bne.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800445c:	2301      	movs	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 0207 	bic.w	r2, r3, #7
 8004468:	4909      	ldr	r1, [pc, #36]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004470:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	40022000 	.word	0x40022000

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800449c:	2300      	movs	r3, #0
 800449e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a0:	2300      	movs	r3, #0
 80044a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d041      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044b8:	d02a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044be:	d824      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044c4:	d008      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ca:	d81e      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d4:	d010      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044d6:	e018      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044d8:	4b86      	ldr	r3, [pc, #536]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a85      	ldr	r2, [pc, #532]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e4:	e015      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fabb 	bl	8004a68 <RCCEx_PLLSAI1_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f6:	e00c      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3320      	adds	r3, #32
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fba6 	bl	8004c50 <RCCEx_PLLSAI2_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004508:	e003      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	74fb      	strb	r3, [r7, #19]
      break;
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004518:	4b76      	ldr	r3, [pc, #472]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004526:	4973      	ldr	r1, [pc, #460]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800452e:	e001      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d041      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004544:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004548:	d02a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800454a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800454e:	d824      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004554:	d008      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800455a:	d81e      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004564:	d010      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004566:	e018      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004568:	4b62      	ldr	r3, [pc, #392]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a61      	ldr	r2, [pc, #388]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004572:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004574:	e015      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa73 	bl	8004a68 <RCCEx_PLLSAI1_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004586:	e00c      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3320      	adds	r3, #32
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fb5e 	bl	8004c50 <RCCEx_PLLSAI2_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	74fb      	strb	r3, [r7, #19]
      break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045a8:	4b52      	ldr	r3, [pc, #328]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b6:	494f      	ldr	r1, [pc, #316]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045be:	e001      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a0 	beq.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045d6:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ec:	4b41      	ldr	r3, [pc, #260]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f0:	4a40      	ldr	r2, [pc, #256]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045f8:	4b3e      	ldr	r3, [pc, #248]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004604:	2301      	movs	r3, #1
 8004606:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004608:	4b3b      	ldr	r3, [pc, #236]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3a      	ldr	r2, [pc, #232]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004614:	f7fe fa52 	bl	8002abc <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461a:	e009      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461c:	f7fe fa4e 	bl	8002abc <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d902      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	74fb      	strb	r3, [r7, #19]
        break;
 800462e:	e005      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004630:	4b31      	ldr	r3, [pc, #196]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ef      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d15c      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004642:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01f      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	429a      	cmp	r2, r3
 800465e:	d019      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004660:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800466c:	4b21      	ldr	r3, [pc, #132]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004672:	4a20      	ldr	r2, [pc, #128]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800467c:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	4a1c      	ldr	r2, [pc, #112]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800468c:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe fa0d 	bl	8002abc <HAL_GetTick>
 80046a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a4:	e00b      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fe fa09 	bl	8002abc <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d902      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	74fb      	strb	r3, [r7, #19]
            break;
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ec      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10c      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d2:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e2:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046ea:	e009      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004700:	7c7b      	ldrb	r3, [r7, #17]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004706:	4b9e      	ldr	r3, [pc, #632]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	4a9d      	ldr	r2, [pc, #628]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471e:	4b98      	ldr	r3, [pc, #608]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004724:	f023 0203 	bic.w	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	4994      	ldr	r1, [pc, #592]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004740:	4b8f      	ldr	r3, [pc, #572]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004746:	f023 020c 	bic.w	r2, r3, #12
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474e:	498c      	ldr	r1, [pc, #560]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004762:	4b87      	ldr	r3, [pc, #540]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004768:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	4983      	ldr	r1, [pc, #524]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004784:	4b7e      	ldr	r3, [pc, #504]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	497b      	ldr	r1, [pc, #492]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047a6:	4b76      	ldr	r3, [pc, #472]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b4:	4972      	ldr	r1, [pc, #456]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d6:	496a      	ldr	r1, [pc, #424]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ea:	4b65      	ldr	r3, [pc, #404]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	4961      	ldr	r1, [pc, #388]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800480c:	4b5c      	ldr	r3, [pc, #368]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	4959      	ldr	r1, [pc, #356]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800482e:	4b54      	ldr	r3, [pc, #336]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004834:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483c:	4950      	ldr	r1, [pc, #320]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004850:	4b4b      	ldr	r3, [pc, #300]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	4948      	ldr	r1, [pc, #288]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004872:	4b43      	ldr	r3, [pc, #268]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	493f      	ldr	r1, [pc, #252]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d028      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004894:	4b3a      	ldr	r3, [pc, #232]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a2:	4937      	ldr	r1, [pc, #220]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b2:	d106      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b32      	ldr	r3, [pc, #200]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a31      	ldr	r2, [pc, #196]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
 80048c0:	e011      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f8c8 	bl	8004a68 <RCCEx_PLLSAI1_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d028      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048f2:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004900:	491f      	ldr	r1, [pc, #124]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004910:	d106      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	4a1a      	ldr	r2, [pc, #104]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800491c:	60d3      	str	r3, [r2, #12]
 800491e:	e011      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004928:	d10c      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3304      	adds	r3, #4
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f899 	bl	8004a68 <RCCEx_PLLSAI1_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02b      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495e:	4908      	ldr	r1, [pc, #32]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800496e:	d109      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a02      	ldr	r2, [pc, #8]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800497a:	60d3      	str	r3, [r2, #12]
 800497c:	e014      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3304      	adds	r3, #4
 8004992:	2101      	movs	r1, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f867 	bl	8004a68 <RCCEx_PLLSAI1_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02f      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c2:	4928      	ldr	r1, [pc, #160]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049d2:	d10d      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	2102      	movs	r1, #2
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f844 	bl	8004a68 <RCCEx_PLLSAI1_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d014      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	74bb      	strb	r3, [r7, #18]
 80049ee:	e011      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3320      	adds	r3, #32
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f925 	bl	8004c50 <RCCEx_PLLSAI2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a20:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a2e:	490d      	ldr	r1, [pc, #52]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a42:	4b08      	ldr	r3, [pc, #32]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a52:	4904      	ldr	r1, [pc, #16]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000

08004a68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a76:	4b75      	ldr	r3, [pc, #468]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d018      	beq.n	8004ab4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a82:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0203 	and.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d10d      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
       ||
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d047      	beq.n	8004b3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
 8004ab2:	e044      	b.n	8004b3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d018      	beq.n	8004aee <RCCEx_PLLSAI1_Config+0x86>
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d825      	bhi.n	8004b0c <RCCEx_PLLSAI1_Config+0xa4>
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d002      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0x62>
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d009      	beq.n	8004adc <RCCEx_PLLSAI1_Config+0x74>
 8004ac8:	e020      	b.n	8004b0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aca:	4b60      	ldr	r3, [pc, #384]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d11d      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ada:	e01a      	b.n	8004b12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004adc:	4b5b      	ldr	r3, [pc, #364]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d116      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aec:	e013      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aee:	4b57      	ldr	r3, [pc, #348]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004afa:	4b54      	ldr	r3, [pc, #336]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b0a:	e006      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b10:	e004      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b12:	bf00      	nop
 8004b14:	e002      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10d      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b22:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6819      	ldr	r1, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	430b      	orrs	r3, r1
 8004b38:	4944      	ldr	r1, [pc, #272]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d17d      	bne.n	8004c40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b44:	4b41      	ldr	r3, [pc, #260]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a40      	ldr	r2, [pc, #256]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b50:	f7fd ffb4 	bl	8002abc <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b56:	e009      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b58:	f7fd ffb0 	bl	8002abc <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
        break;
 8004b6a:	e005      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b6c:	4b37      	ldr	r3, [pc, #220]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ef      	bne.n	8004b58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d160      	bne.n	8004c40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b84:	4b31      	ldr	r3, [pc, #196]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6892      	ldr	r2, [r2, #8]
 8004b94:	0211      	lsls	r1, r2, #8
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	0912      	lsrs	r2, r2, #4
 8004b9c:	0452      	lsls	r2, r2, #17
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	492a      	ldr	r1, [pc, #168]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	610b      	str	r3, [r1, #16]
 8004ba6:	e027      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d112      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bae:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004bb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6892      	ldr	r2, [r2, #8]
 8004bbe:	0211      	lsls	r1, r2, #8
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6912      	ldr	r2, [r2, #16]
 8004bc4:	0852      	lsrs	r2, r2, #1
 8004bc6:	3a01      	subs	r2, #1
 8004bc8:	0552      	lsls	r2, r2, #21
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	491f      	ldr	r1, [pc, #124]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	610b      	str	r3, [r1, #16]
 8004bd2:	e011      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6892      	ldr	r2, [r2, #8]
 8004be4:	0211      	lsls	r1, r2, #8
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6952      	ldr	r2, [r2, #20]
 8004bea:	0852      	lsrs	r2, r2, #1
 8004bec:	3a01      	subs	r2, #1
 8004bee:	0652      	lsls	r2, r2, #25
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	4916      	ldr	r1, [pc, #88]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bf8:	4b14      	ldr	r3, [pc, #80]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fd ff5a 	bl	8002abc <HAL_GetTick>
 8004c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c0a:	e009      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c0c:	f7fd ff56 	bl	8002abc <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d902      	bls.n	8004c20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c1e:	e005      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ef      	beq.n	8004c0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	4904      	ldr	r1, [pc, #16]	@ (8004c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d018      	beq.n	8004c9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c6a:	4b67      	ldr	r3, [pc, #412]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0203 	and.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d10d      	bne.n	8004c96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c82:	4b61      	ldr	r3, [pc, #388]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
       ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d047      	beq.n	8004d26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	e044      	b.n	8004d26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d018      	beq.n	8004cd6 <RCCEx_PLLSAI2_Config+0x86>
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d825      	bhi.n	8004cf4 <RCCEx_PLLSAI2_Config+0xa4>
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d002      	beq.n	8004cb2 <RCCEx_PLLSAI2_Config+0x62>
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d009      	beq.n	8004cc4 <RCCEx_PLLSAI2_Config+0x74>
 8004cb0:	e020      	b.n	8004cf4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cb2:	4b55      	ldr	r3, [pc, #340]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d11d      	bne.n	8004cfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc2:	e01a      	b.n	8004cfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cc4:	4b50      	ldr	r3, [pc, #320]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d116      	bne.n	8004cfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd4:	e013      	b.n	8004cfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10f      	bne.n	8004d02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ce2:	4b49      	ldr	r3, [pc, #292]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cf2:	e006      	b.n	8004d02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf8:	e004      	b.n	8004d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10d      	bne.n	8004d26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6819      	ldr	r1, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	4939      	ldr	r1, [pc, #228]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d167      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d2c:	4b36      	ldr	r3, [pc, #216]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a35      	ldr	r2, [pc, #212]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fd fec0 	bl	8002abc <HAL_GetTick>
 8004d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d3e:	e009      	b.n	8004d54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d40:	f7fd febc 	bl	8002abc <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d902      	bls.n	8004d54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	73fb      	strb	r3, [r7, #15]
        break;
 8004d52:	e005      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d54:	4b2c      	ldr	r3, [pc, #176]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ef      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d14a      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d111      	bne.n	8004d90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d6c:	4b26      	ldr	r3, [pc, #152]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	0211      	lsls	r1, r2, #8
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	0912      	lsrs	r2, r2, #4
 8004d84:	0452      	lsls	r2, r2, #17
 8004d86:	430a      	orrs	r2, r1
 8004d88:	491f      	ldr	r1, [pc, #124]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	614b      	str	r3, [r1, #20]
 8004d8e:	e011      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d90:	4b1d      	ldr	r3, [pc, #116]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6892      	ldr	r2, [r2, #8]
 8004da0:	0211      	lsls	r1, r2, #8
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6912      	ldr	r2, [r2, #16]
 8004da6:	0852      	lsrs	r2, r2, #1
 8004da8:	3a01      	subs	r2, #1
 8004daa:	0652      	lsls	r2, r2, #25
 8004dac:	430a      	orrs	r2, r1
 8004dae:	4916      	ldr	r1, [pc, #88]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004db4:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a13      	ldr	r2, [pc, #76]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fe7c 	bl	8002abc <HAL_GetTick>
 8004dc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc6:	e009      	b.n	8004ddc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc8:	f7fd fe78 	bl	8002abc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d902      	bls.n	8004ddc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	73fb      	strb	r3, [r7, #15]
          break;
 8004dda:	e005      	b.n	8004de8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ef      	beq.n	8004dc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dee:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	4904      	ldr	r1, [pc, #16]	@ (8004e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000

08004e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e095      	b.n	8004f4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d108      	bne.n	8004e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2e:	d009      	beq.n	8004e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
 8004e36:	e005      	b.n	8004e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fc f974 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e84:	d902      	bls.n	8004e8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e002      	b.n	8004e92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e9a:	d007      	beq.n	8004eac <HAL_SPI_Init+0xa0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	ea42 0103 	orr.w	r1, r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	f003 0204 	and.w	r2, r3, #4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f28:	ea42 0103 	orr.w	r1, r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e01a      	b.n	8004f9a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc f929 	bl	80011d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b088      	sub	sp, #32
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb2:	f7fd fd83 	bl	8002abc <HAL_GetTick>
 8004fb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e15c      	b.n	8005286 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_SPI_Transmit+0x36>
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e154      	b.n	8005286 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_SPI_Transmit+0x48>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e14d      	b.n	8005286 <HAL_SPI_Transmit+0x2e4>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800503c:	d10f      	bne.n	800505e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800504c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800505c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	d007      	beq.n	800507c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005084:	d952      	bls.n	800512c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_SPI_Transmit+0xf2>
 800508e:	8b7b      	ldrh	r3, [r7, #26]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d145      	bne.n	8005120 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	1c9a      	adds	r2, r3, #2
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050b8:	e032      	b.n	8005120 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d112      	bne.n	80050ee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	881a      	ldrh	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d8:	1c9a      	adds	r2, r3, #2
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050ec:	e018      	b.n	8005120 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ee:	f7fd fce5 	bl	8002abc <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d803      	bhi.n	8005106 <HAL_SPI_Transmit+0x164>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d102      	bne.n	800510c <HAL_SPI_Transmit+0x16a>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e0b2      	b.n	8005286 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1c7      	bne.n	80050ba <HAL_SPI_Transmit+0x118>
 800512a:	e083      	b.n	8005234 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_Transmit+0x198>
 8005134:	8b7b      	ldrh	r3, [r7, #26]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d177      	bne.n	800522a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d912      	bls.n	800516a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005148:	881a      	ldrh	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	1c9a      	adds	r2, r3, #2
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b02      	subs	r3, #2
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005168:	e05f      	b.n	800522a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005190:	e04b      	b.n	800522a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d12b      	bne.n	80051f8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d912      	bls.n	80051d0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b02      	subs	r3, #2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051ce:	e02c      	b.n	800522a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051f6:	e018      	b.n	800522a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051f8:	f7fd fc60 	bl	8002abc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d803      	bhi.n	8005210 <HAL_SPI_Transmit+0x26e>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d102      	bne.n	8005216 <HAL_SPI_Transmit+0x274>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e02d      	b.n	8005286 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1ae      	bne.n	8005192 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f947 	bl	80054cc <SPI_EndRxTxTransaction>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005284:	2300      	movs	r3, #0
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052a0:	f7fd fc0c 	bl	8002abc <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4413      	add	r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052b0:	f7fd fc04 	bl	8002abc <HAL_GetTick>
 80052b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052b6:	4b39      	ldr	r3, [pc, #228]	@ (800539c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	015b      	lsls	r3, r3, #5
 80052bc:	0d1b      	lsrs	r3, r3, #20
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052c6:	e054      	b.n	8005372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d050      	beq.n	8005372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052d0:	f7fd fbf4 	bl	8002abc <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d902      	bls.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d13d      	bne.n	8005362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052fe:	d111      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005308:	d004      	beq.n	8005314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005312:	d107      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800532c:	d10f      	bne.n	800534e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800534c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e017      	b.n	8005392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3b01      	subs	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	429a      	cmp	r2, r3
 800538e:	d19b      	bne.n	80052c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	200000b0 	.word	0x200000b0

080053a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	@ 0x28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80053b2:	f7fd fb83 	bl	8002abc <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80053c2:	f7fd fb7b 	bl	8002abc <HAL_GetTick>
 80053c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053d0:	4b3d      	ldr	r3, [pc, #244]	@ (80054c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	00da      	lsls	r2, r3, #3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	0d1b      	lsrs	r3, r3, #20
 80053e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053e8:	e060      	b.n	80054ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053f0:	d107      	bne.n	8005402 <SPI_WaitFifoStateUntilTimeout+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005400:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d050      	beq.n	80054ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800540a:	f7fd fb57 	bl	8002abc <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005416:	429a      	cmp	r2, r3
 8005418:	d902      	bls.n	8005420 <SPI_WaitFifoStateUntilTimeout+0x80>
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d13d      	bne.n	800549c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800542e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005438:	d111      	bne.n	800545e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005442:	d004      	beq.n	800544e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544c:	d107      	bne.n	800545e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800545c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005466:	d10f      	bne.n	8005488 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005486:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e010      	b.n	80054be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d196      	bne.n	80053ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3728      	adds	r7, #40	@ 0x28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200000b0 	.word	0x200000b0

080054cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff ff5b 	bl	80053a0 <SPI_WaitFifoStateUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f4:	f043 0220 	orr.w	r2, r3, #32
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e027      	b.n	8005550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	2180      	movs	r1, #128	@ 0x80
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff fec0 	bl	8005290 <SPI_WaitFlagStateUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e014      	b.n	8005550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff ff34 	bl	80053a0 <SPI_WaitFifoStateUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e000      	b.n	8005550 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e049      	b.n	80055fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc f842 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f000 fa3e 	bl	8005a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d001      	beq.n	8005620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e047      	b.n	80056b0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a23      	ldr	r2, [pc, #140]	@ (80056bc <HAL_TIM_Base_Start+0xb4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01d      	beq.n	800566e <HAL_TIM_Base_Start+0x66>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563a:	d018      	beq.n	800566e <HAL_TIM_Base_Start+0x66>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1f      	ldr	r2, [pc, #124]	@ (80056c0 <HAL_TIM_Base_Start+0xb8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_TIM_Base_Start+0x66>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1e      	ldr	r2, [pc, #120]	@ (80056c4 <HAL_TIM_Base_Start+0xbc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_TIM_Base_Start+0x66>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1c      	ldr	r2, [pc, #112]	@ (80056c8 <HAL_TIM_Base_Start+0xc0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_TIM_Base_Start+0x66>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <HAL_TIM_Base_Start+0xc4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIM_Base_Start+0x66>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a19      	ldr	r2, [pc, #100]	@ (80056d0 <HAL_TIM_Base_Start+0xc8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d115      	bne.n	800569a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b17      	ldr	r3, [pc, #92]	@ (80056d4 <HAL_TIM_Base_Start+0xcc>)
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d015      	beq.n	80056ac <HAL_TIM_Base_Start+0xa4>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005686:	d011      	beq.n	80056ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	e008      	b.n	80056ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e000      	b.n	80056ae <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40013400 	.word	0x40013400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	00010007 	.word	0x00010007

080056d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d001      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e04f      	b.n	8005790 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a23      	ldr	r2, [pc, #140]	@ (800579c <HAL_TIM_Base_Start_IT+0xc4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01d      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x76>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571a:	d018      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x76>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1f      	ldr	r2, [pc, #124]	@ (80057a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x76>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1e      	ldr	r2, [pc, #120]	@ (80057a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x76>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1c      	ldr	r2, [pc, #112]	@ (80057a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x76>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1b      	ldr	r2, [pc, #108]	@ (80057ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x76>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d115      	bne.n	800577a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	4b17      	ldr	r3, [pc, #92]	@ (80057b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005756:	4013      	ands	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d015      	beq.n	800578c <HAL_TIM_Base_Start_IT+0xb4>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005766:	d011      	beq.n	800578c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005778:	e008      	b.n	800578c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e000      	b.n	800578e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	00010007 	.word	0x00010007

080057b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d020      	beq.n	800581c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01b      	beq.n	800581c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0202 	mvn.w	r2, #2
 80057ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8e9 	bl	80059da <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8db 	bl	80059c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8ec 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d020      	beq.n	8005868 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01b      	beq.n	8005868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0204 	mvn.w	r2, #4
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8c3 	bl	80059da <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f8b5 	bl	80059c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f8c6 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d020      	beq.n	80058b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0208 	mvn.w	r2, #8
 8005884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2204      	movs	r2, #4
 800588a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f89d 	bl	80059da <HAL_TIM_IC_CaptureCallback>
 80058a0:	e005      	b.n	80058ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f88f 	bl	80059c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f8a0 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d020      	beq.n	8005900 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0210 	mvn.w	r2, #16
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2208      	movs	r2, #8
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f877 	bl	80059da <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f869 	bl	80059c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f87a 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0201 	mvn.w	r2, #1
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fb fa90 	bl	8000e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800594a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f99b 	bl	8005c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800596e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f993 	bl	8005c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00c      	beq.n	800599a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f834 	bl	8005a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f06f 0220 	mvn.w	r2, #32
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f95b 	bl	8005c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a46      	ldr	r2, [pc, #280]	@ (8005b44 <TIM_Base_SetConfig+0x12c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a36:	d00f      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a43      	ldr	r2, [pc, #268]	@ (8005b48 <TIM_Base_SetConfig+0x130>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00b      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a42      	ldr	r2, [pc, #264]	@ (8005b4c <TIM_Base_SetConfig+0x134>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d007      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a41      	ldr	r2, [pc, #260]	@ (8005b50 <TIM_Base_SetConfig+0x138>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a40      	ldr	r2, [pc, #256]	@ (8005b54 <TIM_Base_SetConfig+0x13c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d108      	bne.n	8005a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a35      	ldr	r2, [pc, #212]	@ (8005b44 <TIM_Base_SetConfig+0x12c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01f      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a78:	d01b      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a32      	ldr	r2, [pc, #200]	@ (8005b48 <TIM_Base_SetConfig+0x130>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d017      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a31      	ldr	r2, [pc, #196]	@ (8005b4c <TIM_Base_SetConfig+0x134>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a30      	ldr	r2, [pc, #192]	@ (8005b50 <TIM_Base_SetConfig+0x138>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00f      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2f      	ldr	r2, [pc, #188]	@ (8005b54 <TIM_Base_SetConfig+0x13c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b58 <TIM_Base_SetConfig+0x140>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b5c <TIM_Base_SetConfig+0x144>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	@ (8005b60 <TIM_Base_SetConfig+0x148>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a16      	ldr	r2, [pc, #88]	@ (8005b44 <TIM_Base_SetConfig+0x12c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00f      	beq.n	8005b10 <TIM_Base_SetConfig+0xf8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a18      	ldr	r2, [pc, #96]	@ (8005b54 <TIM_Base_SetConfig+0x13c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0xf8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a17      	ldr	r2, [pc, #92]	@ (8005b58 <TIM_Base_SetConfig+0x140>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0xf8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <TIM_Base_SetConfig+0x144>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0xf8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <TIM_Base_SetConfig+0x148>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d103      	bne.n	8005b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d105      	bne.n	8005b36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]
  }
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800

08005b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e068      	b.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2d      	ldr	r2, [pc, #180]	@ (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bee:	d018      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a13      	ldr	r2, [pc, #76]	@ (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	@ (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10c      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40014000 	.word	0x40014000

08005c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e040      	b.n	8005d44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb fce8 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	@ 0x24
 8005cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fe8e 	bl	8006a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fbd3 	bl	80064a8 <UART_SetConfig>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e01b      	b.n	8005d44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 ff0d 	bl	8006b5c <UART_CheckIdleState>
 8005d42:	4603      	mov	r3, r0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	@ 0x28
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d177      	bne.n	8005e54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_UART_Transmit+0x24>
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e070      	b.n	8005e56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2221      	movs	r2, #33	@ 0x21
 8005d80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d82:	f7fc fe9b 	bl	8002abc <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	88fa      	ldrh	r2, [r7, #6]
 8005d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da0:	d108      	bne.n	8005db4 <HAL_UART_Transmit+0x68>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e003      	b.n	8005dbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dbc:	e02f      	b.n	8005e1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	@ 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 ff6f 	bl	8006cac <UART_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e03b      	b.n	8005e56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10b      	bne.n	8005dfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	881a      	ldrh	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df0:	b292      	uxth	r2, r2
 8005df2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	3302      	adds	r3, #2
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e007      	b.n	8005e0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1c9      	bne.n	8005dbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2140      	movs	r1, #64	@ 0x40
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 ff39 	bl	8006cac <UART_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e005      	b.n	8005e56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b0ba      	sub	sp, #232	@ 0xe8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e8e:	4013      	ands	r3, r2
 8005e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d115      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 82ca 	beq.w	8006452 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
      }
      return;
 8005ec6:	e2c4      	b.n	8006452 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8117 	beq.w	8006100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ee2:	4b85      	ldr	r3, [pc, #532]	@ (80060f8 <HAL_UART_IRQHandler+0x298>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 810a 	beq.w	8006100 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0xbc>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d011      	beq.n	8005f4c <HAL_UART_IRQHandler+0xec>
 8005f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f42:	f043 0204 	orr.w	r2, r3, #4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d011      	beq.n	8005f7c <HAL_UART_IRQHandler+0x11c>
 8005f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f72:	f043 0202 	orr.w	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d017      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fae:	f043 0208 	orr.w	r2, r3, #8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <HAL_UART_IRQHandler+0x18a>
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8230 	beq.w	8006456 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	2b40      	cmp	r3, #64	@ 0x40
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04f      	beq.n	80060e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 ff66 	bl	8006f14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d141      	bne.n	80060da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800606c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800608e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800609a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1d9      	bne.n	8006056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d013      	beq.n	80060d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ae:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <HAL_UART_IRQHandler+0x29c>)
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc ff68 	bl	8002f8c <HAL_DMA_Abort_IT>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	e00f      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9de 	bl	8006494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00b      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9da 	bl	8006494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e007      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9d6 	bl	8006494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80060f0:	e1b1      	b.n	8006456 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f2:	bf00      	nop
    return;
 80060f4:	e1af      	b.n	8006456 <HAL_UART_IRQHandler+0x5f6>
 80060f6:	bf00      	nop
 80060f8:	04000120 	.word	0x04000120
 80060fc:	080071c5 	.word	0x080071c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006104:	2b01      	cmp	r3, #1
 8006106:	f040 816a 	bne.w	80063de <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8163 	beq.w	80063de <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 815c 	beq.w	80063de <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2210      	movs	r2, #16
 800612c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	f040 80d4 	bne.w	80062e6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800614a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80ad 	beq.w	80062ae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800615a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800615e:	429a      	cmp	r2, r3
 8006160:	f080 80a5 	bcs.w	80062ae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800616a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	f040 8086 	bne.w	800628c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1da      	bne.n	8006180 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e1      	bne.n	80061ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800621c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800622a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800622c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006230:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800625a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800625c:	f023 0310 	bic.w	r3, r3, #16
 8006260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800626e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006270:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006274:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800627c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e4      	bne.n	800624c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006286:	4618      	mov	r0, r3
 8006288:	f7fc fe42 	bl	8002f10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fa fc20 	bl	8000aec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80062ac:	e0d5      	b.n	800645a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062b8:	429a      	cmp	r2, r3
 80062ba:	f040 80ce 	bne.w	800645a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f040 80c5 	bne.w	800645a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fa fc04 	bl	8000aec <HAL_UARTEx_RxEventCallback>
      return;
 80062e4:	e0b9      	b.n	800645a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80ab 	beq.w	800645e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a6 	beq.w	800645e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006334:	647b      	str	r3, [r7, #68]	@ 0x44
 8006336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800633a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e4      	bne.n	8006312 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	623b      	str	r3, [r7, #32]
   return(result);
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800636c:	633a      	str	r2, [r7, #48]	@ 0x30
 800636e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e3      	bne.n	8006348 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 0310 	bic.w	r3, r3, #16
 80063a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69b9      	ldr	r1, [r7, #24]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	617b      	str	r3, [r7, #20]
   return(result);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e4      	bne.n	8006394 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fa fb88 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063dc:	e03f      	b.n	800645e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <HAL_UART_IRQHandler+0x5a8>
 80063ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 ff1f 	bl	8007244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006406:	e02d      	b.n	8006464 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00e      	beq.n	8006432 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01c      	beq.n	8006462 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
    }
    return;
 8006430:	e017      	b.n	8006462 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d012      	beq.n	8006464 <HAL_UART_IRQHandler+0x604>
 800643e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fed0 	bl	80071f0 <UART_EndTransmit_IT>
    return;
 8006450:	e008      	b.n	8006464 <HAL_UART_IRQHandler+0x604>
      return;
 8006452:	bf00      	nop
 8006454:	e006      	b.n	8006464 <HAL_UART_IRQHandler+0x604>
    return;
 8006456:	bf00      	nop
 8006458:	e004      	b.n	8006464 <HAL_UART_IRQHandler+0x604>
      return;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <HAL_UART_IRQHandler+0x604>
      return;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_UART_IRQHandler+0x604>
    return;
 8006462:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006464:	37e8      	adds	r7, #232	@ 0xe8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop

0800646c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ac:	b08a      	sub	sp, #40	@ 0x28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4ba4      	ldr	r3, [pc, #656]	@ (8006768 <UART_SetConfig+0x2c0>)
 80064d8:	4013      	ands	r3, r2
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a99      	ldr	r2, [pc, #612]	@ (800676c <UART_SetConfig+0x2c4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006510:	4313      	orrs	r3, r2
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006524:	430a      	orrs	r2, r1
 8006526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a90      	ldr	r2, [pc, #576]	@ (8006770 <UART_SetConfig+0x2c8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d126      	bne.n	8006580 <UART_SetConfig+0xd8>
 8006532:	4b90      	ldr	r3, [pc, #576]	@ (8006774 <UART_SetConfig+0x2cc>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b03      	cmp	r3, #3
 800653e:	d81b      	bhi.n	8006578 <UART_SetConfig+0xd0>
 8006540:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0xa0>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	08006559 	.word	0x08006559
 800654c:	08006569 	.word	0x08006569
 8006550:	08006561 	.word	0x08006561
 8006554:	08006571 	.word	0x08006571
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655e:	e116      	b.n	800678e <UART_SetConfig+0x2e6>
 8006560:	2302      	movs	r3, #2
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006566:	e112      	b.n	800678e <UART_SetConfig+0x2e6>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e10e      	b.n	800678e <UART_SetConfig+0x2e6>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e10a      	b.n	800678e <UART_SetConfig+0x2e6>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e106      	b.n	800678e <UART_SetConfig+0x2e6>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a7c      	ldr	r2, [pc, #496]	@ (8006778 <UART_SetConfig+0x2d0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d138      	bne.n	80065fc <UART_SetConfig+0x154>
 800658a:	4b7a      	ldr	r3, [pc, #488]	@ (8006774 <UART_SetConfig+0x2cc>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006590:	f003 030c 	and.w	r3, r3, #12
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d82d      	bhi.n	80065f4 <UART_SetConfig+0x14c>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0xf8>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	080065f5 	.word	0x080065f5
 80065a8:	080065f5 	.word	0x080065f5
 80065ac:	080065f5 	.word	0x080065f5
 80065b0:	080065e5 	.word	0x080065e5
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065f5 	.word	0x080065f5
 80065bc:	080065f5 	.word	0x080065f5
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065da:	e0d8      	b.n	800678e <UART_SetConfig+0x2e6>
 80065dc:	2302      	movs	r3, #2
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e2:	e0d4      	b.n	800678e <UART_SetConfig+0x2e6>
 80065e4:	2304      	movs	r3, #4
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ea:	e0d0      	b.n	800678e <UART_SetConfig+0x2e6>
 80065ec:	2308      	movs	r3, #8
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f2:	e0cc      	b.n	800678e <UART_SetConfig+0x2e6>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fa:	e0c8      	b.n	800678e <UART_SetConfig+0x2e6>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a5e      	ldr	r2, [pc, #376]	@ (800677c <UART_SetConfig+0x2d4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d125      	bne.n	8006652 <UART_SetConfig+0x1aa>
 8006606:	4b5b      	ldr	r3, [pc, #364]	@ (8006774 <UART_SetConfig+0x2cc>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006610:	2b30      	cmp	r3, #48	@ 0x30
 8006612:	d016      	beq.n	8006642 <UART_SetConfig+0x19a>
 8006614:	2b30      	cmp	r3, #48	@ 0x30
 8006616:	d818      	bhi.n	800664a <UART_SetConfig+0x1a2>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d00a      	beq.n	8006632 <UART_SetConfig+0x18a>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d814      	bhi.n	800664a <UART_SetConfig+0x1a2>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <UART_SetConfig+0x182>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d008      	beq.n	800663a <UART_SetConfig+0x192>
 8006628:	e00f      	b.n	800664a <UART_SetConfig+0x1a2>
 800662a:	2300      	movs	r3, #0
 800662c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006630:	e0ad      	b.n	800678e <UART_SetConfig+0x2e6>
 8006632:	2302      	movs	r3, #2
 8006634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006638:	e0a9      	b.n	800678e <UART_SetConfig+0x2e6>
 800663a:	2304      	movs	r3, #4
 800663c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006640:	e0a5      	b.n	800678e <UART_SetConfig+0x2e6>
 8006642:	2308      	movs	r3, #8
 8006644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006648:	e0a1      	b.n	800678e <UART_SetConfig+0x2e6>
 800664a:	2310      	movs	r3, #16
 800664c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006650:	e09d      	b.n	800678e <UART_SetConfig+0x2e6>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4a      	ldr	r2, [pc, #296]	@ (8006780 <UART_SetConfig+0x2d8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d125      	bne.n	80066a8 <UART_SetConfig+0x200>
 800665c:	4b45      	ldr	r3, [pc, #276]	@ (8006774 <UART_SetConfig+0x2cc>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006662:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006666:	2bc0      	cmp	r3, #192	@ 0xc0
 8006668:	d016      	beq.n	8006698 <UART_SetConfig+0x1f0>
 800666a:	2bc0      	cmp	r3, #192	@ 0xc0
 800666c:	d818      	bhi.n	80066a0 <UART_SetConfig+0x1f8>
 800666e:	2b80      	cmp	r3, #128	@ 0x80
 8006670:	d00a      	beq.n	8006688 <UART_SetConfig+0x1e0>
 8006672:	2b80      	cmp	r3, #128	@ 0x80
 8006674:	d814      	bhi.n	80066a0 <UART_SetConfig+0x1f8>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <UART_SetConfig+0x1d8>
 800667a:	2b40      	cmp	r3, #64	@ 0x40
 800667c:	d008      	beq.n	8006690 <UART_SetConfig+0x1e8>
 800667e:	e00f      	b.n	80066a0 <UART_SetConfig+0x1f8>
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006686:	e082      	b.n	800678e <UART_SetConfig+0x2e6>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668e:	e07e      	b.n	800678e <UART_SetConfig+0x2e6>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006696:	e07a      	b.n	800678e <UART_SetConfig+0x2e6>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669e:	e076      	b.n	800678e <UART_SetConfig+0x2e6>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e072      	b.n	800678e <UART_SetConfig+0x2e6>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a35      	ldr	r2, [pc, #212]	@ (8006784 <UART_SetConfig+0x2dc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d12a      	bne.n	8006708 <UART_SetConfig+0x260>
 80066b2:	4b30      	ldr	r3, [pc, #192]	@ (8006774 <UART_SetConfig+0x2cc>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c0:	d01a      	beq.n	80066f8 <UART_SetConfig+0x250>
 80066c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c6:	d81b      	bhi.n	8006700 <UART_SetConfig+0x258>
 80066c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066cc:	d00c      	beq.n	80066e8 <UART_SetConfig+0x240>
 80066ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d2:	d815      	bhi.n	8006700 <UART_SetConfig+0x258>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <UART_SetConfig+0x238>
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066dc:	d008      	beq.n	80066f0 <UART_SetConfig+0x248>
 80066de:	e00f      	b.n	8006700 <UART_SetConfig+0x258>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e6:	e052      	b.n	800678e <UART_SetConfig+0x2e6>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ee:	e04e      	b.n	800678e <UART_SetConfig+0x2e6>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f6:	e04a      	b.n	800678e <UART_SetConfig+0x2e6>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fe:	e046      	b.n	800678e <UART_SetConfig+0x2e6>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006706:	e042      	b.n	800678e <UART_SetConfig+0x2e6>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a17      	ldr	r2, [pc, #92]	@ (800676c <UART_SetConfig+0x2c4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d13a      	bne.n	8006788 <UART_SetConfig+0x2e0>
 8006712:	4b18      	ldr	r3, [pc, #96]	@ (8006774 <UART_SetConfig+0x2cc>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800671c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006720:	d01a      	beq.n	8006758 <UART_SetConfig+0x2b0>
 8006722:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006726:	d81b      	bhi.n	8006760 <UART_SetConfig+0x2b8>
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672c:	d00c      	beq.n	8006748 <UART_SetConfig+0x2a0>
 800672e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006732:	d815      	bhi.n	8006760 <UART_SetConfig+0x2b8>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <UART_SetConfig+0x298>
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800673c:	d008      	beq.n	8006750 <UART_SetConfig+0x2a8>
 800673e:	e00f      	b.n	8006760 <UART_SetConfig+0x2b8>
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006746:	e022      	b.n	800678e <UART_SetConfig+0x2e6>
 8006748:	2302      	movs	r3, #2
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674e:	e01e      	b.n	800678e <UART_SetConfig+0x2e6>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006756:	e01a      	b.n	800678e <UART_SetConfig+0x2e6>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675e:	e016      	b.n	800678e <UART_SetConfig+0x2e6>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006766:	e012      	b.n	800678e <UART_SetConfig+0x2e6>
 8006768:	efff69f3 	.word	0xefff69f3
 800676c:	40008000 	.word	0x40008000
 8006770:	40013800 	.word	0x40013800
 8006774:	40021000 	.word	0x40021000
 8006778:	40004400 	.word	0x40004400
 800677c:	40004800 	.word	0x40004800
 8006780:	40004c00 	.word	0x40004c00
 8006784:	40005000 	.word	0x40005000
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a9f      	ldr	r2, [pc, #636]	@ (8006a10 <UART_SetConfig+0x568>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d17a      	bne.n	800688e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800679c:	2b08      	cmp	r3, #8
 800679e:	d824      	bhi.n	80067ea <UART_SetConfig+0x342>
 80067a0:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <UART_SetConfig+0x300>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067cd 	.word	0x080067cd
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067db 	.word	0x080067db
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067eb 	.word	0x080067eb
 80067c4:	080067eb 	.word	0x080067eb
 80067c8:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067cc:	f7fd fda4 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80067d0:	61f8      	str	r0, [r7, #28]
        break;
 80067d2:	e010      	b.n	80067f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b8f      	ldr	r3, [pc, #572]	@ (8006a14 <UART_SetConfig+0x56c>)
 80067d6:	61fb      	str	r3, [r7, #28]
        break;
 80067d8:	e00d      	b.n	80067f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fd fd05 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80067de:	61f8      	str	r0, [r7, #28]
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e6:	61fb      	str	r3, [r7, #28]
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80fb 	beq.w	80069f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4413      	add	r3, r2
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	429a      	cmp	r2, r3
 800680c:	d305      	bcc.n	800681a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	429a      	cmp	r2, r3
 8006818:	d903      	bls.n	8006822 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006820:	e0e8      	b.n	80069f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2200      	movs	r2, #0
 8006826:	461c      	mov	r4, r3
 8006828:	4615      	mov	r5, r2
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	022b      	lsls	r3, r5, #8
 8006834:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006838:	0222      	lsls	r2, r4, #8
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6849      	ldr	r1, [r1, #4]
 800683e:	0849      	lsrs	r1, r1, #1
 8006840:	2000      	movs	r0, #0
 8006842:	4688      	mov	r8, r1
 8006844:	4681      	mov	r9, r0
 8006846:	eb12 0a08 	adds.w	sl, r2, r8
 800684a:	eb43 0b09 	adc.w	fp, r3, r9
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685c:	4650      	mov	r0, sl
 800685e:	4659      	mov	r1, fp
 8006860:	f7f9 fefa 	bl	8000658 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4613      	mov	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006872:	d308      	bcc.n	8006886 <UART_SetConfig+0x3de>
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800687a:	d204      	bcs.n	8006886 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	60da      	str	r2, [r3, #12]
 8006884:	e0b6      	b.n	80069f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800688c:	e0b2      	b.n	80069f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006896:	d15e      	bne.n	8006956 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800689c:	2b08      	cmp	r3, #8
 800689e:	d828      	bhi.n	80068f2 <UART_SetConfig+0x44a>
 80068a0:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <UART_SetConfig+0x400>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068d5 	.word	0x080068d5
 80068b0:	080068dd 	.word	0x080068dd
 80068b4:	080068f3 	.word	0x080068f3
 80068b8:	080068e3 	.word	0x080068e3
 80068bc:	080068f3 	.word	0x080068f3
 80068c0:	080068f3 	.word	0x080068f3
 80068c4:	080068f3 	.word	0x080068f3
 80068c8:	080068eb 	.word	0x080068eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068cc:	f7fd fd24 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80068d0:	61f8      	str	r0, [r7, #28]
        break;
 80068d2:	e014      	b.n	80068fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d4:	f7fd fd36 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 80068d8:	61f8      	str	r0, [r7, #28]
        break;
 80068da:	e010      	b.n	80068fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006a14 <UART_SetConfig+0x56c>)
 80068de:	61fb      	str	r3, [r7, #28]
        break;
 80068e0:	e00d      	b.n	80068fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e2:	f7fd fc81 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80068e6:	61f8      	str	r0, [r7, #28]
        break;
 80068e8:	e009      	b.n	80068fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ee:	61fb      	str	r3, [r7, #28]
        break;
 80068f0:	e005      	b.n	80068fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d077      	beq.n	80069f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	005a      	lsls	r2, r3, #1
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d916      	bls.n	800694e <UART_SetConfig+0x4a6>
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006926:	d212      	bcs.n	800694e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f023 030f 	bic.w	r3, r3, #15
 8006930:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	b29a      	uxth	r2, r3
 800693e:	8afb      	ldrh	r3, [r7, #22]
 8006940:	4313      	orrs	r3, r2
 8006942:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	8afa      	ldrh	r2, [r7, #22]
 800694a:	60da      	str	r2, [r3, #12]
 800694c:	e052      	b.n	80069f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006954:	e04e      	b.n	80069f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006956:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800695a:	2b08      	cmp	r3, #8
 800695c:	d827      	bhi.n	80069ae <UART_SetConfig+0x506>
 800695e:	a201      	add	r2, pc, #4	@ (adr r2, 8006964 <UART_SetConfig+0x4bc>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006989 	.word	0x08006989
 8006968:	08006991 	.word	0x08006991
 800696c:	08006999 	.word	0x08006999
 8006970:	080069af 	.word	0x080069af
 8006974:	0800699f 	.word	0x0800699f
 8006978:	080069af 	.word	0x080069af
 800697c:	080069af 	.word	0x080069af
 8006980:	080069af 	.word	0x080069af
 8006984:	080069a7 	.word	0x080069a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006988:	f7fd fcc6 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 800698c:	61f8      	str	r0, [r7, #28]
        break;
 800698e:	e014      	b.n	80069ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006990:	f7fd fcd8 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8006994:	61f8      	str	r0, [r7, #28]
        break;
 8006996:	e010      	b.n	80069ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006998:	4b1e      	ldr	r3, [pc, #120]	@ (8006a14 <UART_SetConfig+0x56c>)
 800699a:	61fb      	str	r3, [r7, #28]
        break;
 800699c:	e00d      	b.n	80069ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800699e:	f7fd fc23 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80069a2:	61f8      	str	r0, [r7, #28]
        break;
 80069a4:	e009      	b.n	80069ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069aa:	61fb      	str	r3, [r7, #28]
        break;
 80069ac:	e005      	b.n	80069ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069b8:	bf00      	nop
    }

    if (pclk != 0U)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d019      	beq.n	80069f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	085a      	lsrs	r2, r3, #1
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	441a      	add	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d909      	bls.n	80069ee <UART_SetConfig+0x546>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d205      	bcs.n	80069ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60da      	str	r2, [r3, #12]
 80069ec:	e002      	b.n	80069f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3728      	adds	r7, #40	@ 0x28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a0e:	bf00      	nop
 8006a10:	40008000 	.word	0x40008000
 8006a14:	00f42400 	.word	0x00f42400

08006a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b16:	d10a      	bne.n	8006b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b098      	sub	sp, #96	@ 0x60
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b6c:	f7fb ffa6 	bl	8002abc <HAL_GetTick>
 8006b70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d12e      	bne.n	8006bde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f88c 	bl	8006cac <UART_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d021      	beq.n	8006bde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e6      	bne.n	8006b9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e062      	b.n	8006ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d149      	bne.n	8006c80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f856 	bl	8006cac <UART_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d03c      	beq.n	8006c80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	623b      	str	r3, [r7, #32]
   return(result);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	617b      	str	r3, [r7, #20]
   return(result);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e011      	b.n	8006ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3758      	adds	r7, #88	@ 0x58
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbc:	e04f      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d04b      	beq.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc6:	f7fb fef9 	bl	8002abc <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d302      	bcc.n	8006cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e04e      	b.n	8006d7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d037      	beq.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b80      	cmp	r3, #128	@ 0x80
 8006cf2:	d034      	beq.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b40      	cmp	r3, #64	@ 0x40
 8006cf8:	d031      	beq.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d110      	bne.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f8ff 	bl	8006f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e029      	b.n	8006d7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d38:	d111      	bne.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f8e5 	bl	8006f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e00f      	b.n	8006d7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4013      	ands	r3, r2
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	bf0c      	ite	eq
 8006d6e:	2301      	moveq	r3, #1
 8006d70:	2300      	movne	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d0a0      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b096      	sub	sp, #88	@ 0x58
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2222      	movs	r2, #34	@ 0x22
 8006db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d028      	beq.n	8006e0e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8006ebc <UART_Start_Receive_DMA+0x134>)
 8006dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec0 <UART_Start_Receive_DMA+0x138>)
 8006dca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec4 <UART_Start_Receive_DMA+0x13c>)
 8006dd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd8:	2200      	movs	r2, #0
 8006dda:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3324      	adds	r3, #36	@ 0x24
 8006de6:	4619      	mov	r1, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	461a      	mov	r2, r3
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	f7fc f82e 	bl	8002e50 <HAL_DMA_Start_IT>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e051      	b.n	8006eb2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d018      	beq.n	8006e48 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e36:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e68:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3308      	adds	r3, #8
 8006e9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e9c:	623a      	str	r2, [r7, #32]
 8006e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	6a3a      	ldr	r2, [r7, #32]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3758      	adds	r7, #88	@ 0x58
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	08006fdd 	.word	0x08006fdd
 8006ec0:	08007109 	.word	0x08007109
 8006ec4:	08007147 	.word	0x08007147

08006ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b089      	sub	sp, #36	@ 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6979      	ldr	r1, [r7, #20]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	613b      	str	r3, [r7, #16]
   return(result);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e6      	bne.n	8006ed0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006f08:	bf00      	nop
 8006f0a:	3724      	adds	r7, #36	@ 0x24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b095      	sub	sp, #84	@ 0x54
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e6      	bne.n	8006f1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f023 0301 	bic.w	r3, r3, #1
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e5      	bne.n	8006f4e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d118      	bne.n	8006fbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6979      	ldr	r1, [r7, #20]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e6      	bne.n	8006f8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006fd0:	bf00      	nop
 8006fd2:	3754      	adds	r7, #84	@ 0x54
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b09c      	sub	sp, #112	@ 0x70
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d171      	bne.n	80070dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800700e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800701e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007020:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800702c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	667b      	str	r3, [r7, #100]	@ 0x64
 800704a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007052:	647a      	str	r2, [r7, #68]	@ 0x44
 8007054:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	623b      	str	r3, [r7, #32]
   return(result);
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800707c:	663b      	str	r3, [r7, #96]	@ 0x60
 800707e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007086:	633a      	str	r2, [r7, #48]	@ 0x30
 8007088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800708c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800709a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d118      	bne.n	80070dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	69b9      	ldr	r1, [r7, #24]
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	617b      	str	r3, [r7, #20]
   return(result);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070de:	2200      	movs	r2, #0
 80070e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d107      	bne.n	80070fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070f0:	4619      	mov	r1, r3
 80070f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070f4:	f7f9 fcfa 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070f8:	e002      	b.n	8007100 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070fc:	f7ff f9b6 	bl	800646c <HAL_UART_RxCpltCallback>
}
 8007100:	bf00      	nop
 8007102:	3770      	adds	r7, #112	@ 0x70
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007120:	2b01      	cmp	r3, #1
 8007122:	d109      	bne.n	8007138 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	4619      	mov	r1, r3
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7f9 fcdb 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007136:	e002      	b.n	800713e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff f9a1 	bl	8006480 <HAL_UART_RxHalfCpltCallback>
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007152:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007158:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007160:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716c:	2b80      	cmp	r3, #128	@ 0x80
 800716e:	d109      	bne.n	8007184 <UART_DMAError+0x3e>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b21      	cmp	r3, #33	@ 0x21
 8007174:	d106      	bne.n	8007184 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2200      	movs	r2, #0
 800717a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800717e:	6978      	ldr	r0, [r7, #20]
 8007180:	f7ff fea2 	bl	8006ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718e:	2b40      	cmp	r3, #64	@ 0x40
 8007190:	d109      	bne.n	80071a6 <UART_DMAError+0x60>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b22      	cmp	r3, #34	@ 0x22
 8007196:	d106      	bne.n	80071a6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2200      	movs	r2, #0
 800719c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80071a0:	6978      	ldr	r0, [r7, #20]
 80071a2:	f7ff feb7 	bl	8006f14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ac:	f043 0210 	orr.w	r2, r3, #16
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b6:	6978      	ldr	r0, [r7, #20]
 80071b8:	f7ff f96c 	bl	8006494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071bc:	bf00      	nop
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff f956 	bl	8006494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	60bb      	str	r3, [r7, #8]
   return(result);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800720c:	61fb      	str	r3, [r7, #28]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6979      	ldr	r1, [r7, #20]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	613b      	str	r3, [r7, #16]
   return(result);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e6      	bne.n	80071f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 fc90 	bl	8000b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723c:	bf00      	nop
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08c      	sub	sp, #48	@ 0x30
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726c:	2b20      	cmp	r3, #32
 800726e:	d142      	bne.n	80072f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e03b      	b.n	80072f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	461a      	mov	r2, r3
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff fd78 	bl	8006d88 <UART_Start_Receive_DMA>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800729e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d124      	bne.n	80072f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d11d      	bne.n	80072ea <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2210      	movs	r2, #16
 80072b4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	617b      	str	r3, [r7, #20]
   return(result);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f043 0310 	orr.w	r3, r3, #16
 80072ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6a39      	ldr	r1, [r7, #32]
 80072da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e6      	bne.n	80072b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80072e8:	e002      	b.n	80072f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80072f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072f4:	e000      	b.n	80072f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3730      	adds	r7, #48	@ 0x30
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <__NVIC_SetPriority>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800730c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007310:	2b00      	cmp	r3, #0
 8007312:	db0a      	blt.n	800732a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	490c      	ldr	r1, [pc, #48]	@ (800734c <__NVIC_SetPriority+0x4c>)
 800731a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731e:	0112      	lsls	r2, r2, #4
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	440b      	add	r3, r1
 8007324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007328:	e00a      	b.n	8007340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4908      	ldr	r1, [pc, #32]	@ (8007350 <__NVIC_SetPriority+0x50>)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3b04      	subs	r3, #4
 8007338:	0112      	lsls	r2, r2, #4
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	440b      	add	r3, r1
 800733e:	761a      	strb	r2, [r3, #24]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	e000e100 	.word	0xe000e100
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <SysTick_Handler+0x1c>)
 800735a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800735c:	f001 fde6 	bl	8008f2c <xTaskGetSchedulerState>
 8007360:	4603      	mov	r3, r0
 8007362:	2b01      	cmp	r3, #1
 8007364:	d001      	beq.n	800736a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007366:	f002 fdcf 	bl	8009f08 <xPortSysTickHandler>
  }
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	e000e010 	.word	0xe000e010

08007374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007378:	2100      	movs	r1, #0
 800737a:	f06f 0004 	mvn.w	r0, #4
 800737e:	f7ff ffbf 	bl	8007300 <__NVIC_SetPriority>
#endif
}
 8007382:	bf00      	nop
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800738e:	f3ef 8305 	mrs	r3, IPSR
 8007392:	603b      	str	r3, [r7, #0]
  return(result);
 8007394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800739a:	f06f 0305 	mvn.w	r3, #5
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	e00c      	b.n	80073bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073a2:	4b0a      	ldr	r3, [pc, #40]	@ (80073cc <osKernelInitialize+0x44>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d105      	bne.n	80073b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073aa:	4b08      	ldr	r3, [pc, #32]	@ (80073cc <osKernelInitialize+0x44>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e002      	b.n	80073bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073bc:	687b      	ldr	r3, [r7, #4]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	200003fc 	.word	0x200003fc

080073d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d6:	f3ef 8305 	mrs	r3, IPSR
 80073da:	603b      	str	r3, [r7, #0]
  return(result);
 80073dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80073e2:	f06f 0305 	mvn.w	r3, #5
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	e010      	b.n	800740c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <osKernelStart+0x48>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d109      	bne.n	8007406 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073f2:	f7ff ffbf 	bl	8007374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073f6:	4b08      	ldr	r3, [pc, #32]	@ (8007418 <osKernelStart+0x48>)
 80073f8:	2202      	movs	r2, #2
 80073fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073fc:	f001 f948 	bl	8008690 <vTaskStartScheduler>
      stat = osOK;
 8007400:	2300      	movs	r3, #0
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	e002      	b.n	800740c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
 800740a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800740c:	687b      	ldr	r3, [r7, #4]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200003fc 	.word	0x200003fc

0800741c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	@ 0x38
 8007420:	af04      	add	r7, sp, #16
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742c:	f3ef 8305 	mrs	r3, IPSR
 8007430:	617b      	str	r3, [r7, #20]
  return(result);
 8007432:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007434:	2b00      	cmp	r3, #0
 8007436:	d17e      	bne.n	8007536 <osThreadNew+0x11a>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d07b      	beq.n	8007536 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800743e:	2380      	movs	r3, #128	@ 0x80
 8007440:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007442:	2318      	movs	r3, #24
 8007444:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800744a:	f04f 33ff 	mov.w	r3, #4294967295
 800744e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d045      	beq.n	80074e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <osThreadNew+0x48>
        name = attr->name;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d008      	beq.n	800748a <osThreadNew+0x6e>
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b38      	cmp	r3, #56	@ 0x38
 800747c:	d805      	bhi.n	800748a <osThreadNew+0x6e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <osThreadNew+0x72>
        return (NULL);
 800748a:	2300      	movs	r3, #0
 800748c:	e054      	b.n	8007538 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	089b      	lsrs	r3, r3, #2
 800749c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <osThreadNew+0xa8>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80074ac:	d90a      	bls.n	80074c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <osThreadNew+0xa8>
        mem = 1;
 80074be:	2301      	movs	r3, #1
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e010      	b.n	80074e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10c      	bne.n	80074e6 <osThreadNew+0xca>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d108      	bne.n	80074e6 <osThreadNew+0xca>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d104      	bne.n	80074e6 <osThreadNew+0xca>
          mem = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	e001      	b.n	80074e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d110      	bne.n	800750e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074f4:	9202      	str	r2, [sp, #8]
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6a3a      	ldr	r2, [r7, #32]
 8007500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fee8 	bl	80082d8 <xTaskCreateStatic>
 8007508:	4603      	mov	r3, r0
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	e013      	b.n	8007536 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d110      	bne.n	8007536 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	b29a      	uxth	r2, r3
 8007518:	f107 0310 	add.w	r3, r7, #16
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 ff36 	bl	8008398 <xTaskCreate>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d001      	beq.n	8007536 <osThreadNew+0x11a>
            hTask = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007536:	693b      	ldr	r3, [r7, #16]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3728      	adds	r7, #40	@ 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <osThreadFlagsSet+0x1a>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	da03      	bge.n	8007562 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800755a:	f06f 0303 	mvn.w	r3, #3
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e035      	b.n	80075ce <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
 8007566:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007568:	f3ef 8305 	mrs	r3, IPSR
 800756c:	613b      	str	r3, [r7, #16]
  return(result);
 800756e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01f      	beq.n	80075b4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	2300      	movs	r3, #0
 8007580:	2201      	movs	r2, #1
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6978      	ldr	r0, [r7, #20]
 8007586:	f001 fe73 	bl	8009270 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800758a:	f107 030c 	add.w	r3, r7, #12
 800758e:	2200      	movs	r2, #0
 8007590:	9200      	str	r2, [sp, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	2100      	movs	r1, #0
 8007596:	6978      	ldr	r0, [r7, #20]
 8007598:	f001 fe6a 	bl	8009270 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d015      	beq.n	80075ce <osThreadFlagsSet+0x8e>
 80075a2:	4b0d      	ldr	r3, [pc, #52]	@ (80075d8 <osThreadFlagsSet+0x98>)
 80075a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	e00c      	b.n	80075ce <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80075b4:	2300      	movs	r3, #0
 80075b6:	2201      	movs	r2, #1
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6978      	ldr	r0, [r7, #20]
 80075bc:	f001 fd9e 	bl	80090fc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80075c0:	f107 030c 	add.w	r3, r7, #12
 80075c4:	2200      	movs	r2, #0
 80075c6:	2100      	movs	r1, #0
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	f001 fd97 	bl	80090fc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80075ce:	68fb      	ldr	r3, [r7, #12]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08c      	sub	sp, #48	@ 0x30
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e8:	f3ef 8305 	mrs	r3, IPSR
 80075ec:	617b      	str	r3, [r7, #20]
  return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80075f4:	f06f 0305 	mvn.w	r3, #5
 80075f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075fa:	e06b      	b.n	80076d4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da03      	bge.n	800760a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8007602:	f06f 0303 	mvn.w	r3, #3
 8007606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007608:	e064      	b.n	80076d4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007618:	e001      	b.n	800761e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8007626:	f001 f947 	bl	80088b8 <xTaskGetTickCount>
 800762a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800762c:	f107 0210 	add.w	r2, r7, #16
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007634:	2000      	movs	r0, #0
 8007636:	f001 fd07 	bl	8009048 <xTaskNotifyWait>
 800763a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d137      	bne.n	80076b2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8007642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4013      	ands	r3, r2
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800764e:	4313      	orrs	r3, r2
 8007650:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	4013      	ands	r3, r2
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	429a      	cmp	r2, r3
 8007666:	d032      	beq.n	80076ce <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10f      	bne.n	800768e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800766e:	f06f 0302 	mvn.w	r3, #2
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8007674:	e02e      	b.n	80076d4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d128      	bne.n	80076d2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007686:	f06f 0302 	mvn.w	r3, #2
 800768a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800768c:	e022      	b.n	80076d4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800768e:	f001 f913 	bl	80088b8 <xTaskGetTickCount>
 8007692:	4602      	mov	r2, r0
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	429a      	cmp	r2, r3
 80076a0:	d902      	bls.n	80076a8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a6:	e00e      	b.n	80076c6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80076a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b0:	e009      	b.n	80076c6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d103      	bne.n	80076c0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80076b8:	f06f 0302 	mvn.w	r3, #2
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076be:	e002      	b.n	80076c6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80076c0:	f06f 0301 	mvn.w	r3, #1
 80076c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1af      	bne.n	800762c <osThreadFlagsWait+0x50>
 80076cc:	e002      	b.n	80076d4 <osThreadFlagsWait+0xf8>
            break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <osThreadFlagsWait+0xf8>
            break;
 80076d2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3730      	adds	r7, #48	@ 0x30
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e6:	f3ef 8305 	mrs	r3, IPSR
 80076ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80076ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <osDelay+0x1c>
    stat = osErrorISR;
 80076f2:	f06f 0305 	mvn.w	r3, #5
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	e007      	b.n	800770a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 ff8d 	bl	8008624 <vTaskDelay>
    }
  }

  return (stat);
 800770a:	68fb      	ldr	r3, [r7, #12]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a07      	ldr	r2, [pc, #28]	@ (8007740 <vApplicationGetIdleTaskMemory+0x2c>)
 8007724:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4a06      	ldr	r2, [pc, #24]	@ (8007744 <vApplicationGetIdleTaskMemory+0x30>)
 800772a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	601a      	str	r2, [r3, #0]
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000400 	.word	0x20000400
 8007744:	2000045c 	.word	0x2000045c

08007748 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a07      	ldr	r2, [pc, #28]	@ (8007774 <vApplicationGetTimerTaskMemory+0x2c>)
 8007758:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a06      	ldr	r2, [pc, #24]	@ (8007778 <vApplicationGetTimerTaskMemory+0x30>)
 800775e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007766:	601a      	str	r2, [r3, #0]
}
 8007768:	bf00      	nop
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	2000065c 	.word	0x2000065c
 8007778:	200006b8 	.word	0x200006b8

0800777c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f103 0208 	add.w	r2, r3, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f04f 32ff 	mov.w	r2, #4294967295
 8007794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f103 0208 	add.w	r2, r3, #8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f103 0208 	add.w	r2, r3, #8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d103      	bne.n	800783e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e00c      	b.n	8007858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3308      	adds	r3, #8
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	e002      	b.n	800784c <vListInsert+0x2e>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	d2f6      	bcs.n	8007846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6892      	ldr	r2, [r2, #8]
 80078a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6852      	ldr	r2, [r2, #4]
 80078b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d103      	bne.n	80078c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	1e5a      	subs	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	e7fd      	b.n	800790c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007910:	f002 fa6a 	bl	8009de8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791c:	68f9      	ldr	r1, [r7, #12]
 800791e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	441a      	add	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	3b01      	subs	r3, #1
 8007942:	68f9      	ldr	r1, [r7, #12]
 8007944:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	441a      	add	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	22ff      	movs	r2, #255	@ 0xff
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	22ff      	movs	r2, #255	@ 0xff
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d114      	bne.n	8007990 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01a      	beq.n	80079a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3310      	adds	r3, #16
 8007972:	4618      	mov	r0, r3
 8007974:	f001 f91a 	bl	8008bac <xTaskRemoveFromEventList>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d012      	beq.n	80079a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <xQueueGenericReset+0xd0>)
 8007980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	e009      	b.n	80079a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3310      	adds	r3, #16
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff fef1 	bl	800777c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3324      	adds	r3, #36	@ 0x24
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff feec 	bl	800777c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079a4:	f002 fa52 	bl	8009e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079a8:	2301      	movs	r3, #1
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08e      	sub	sp, #56	@ 0x38
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10b      	bne.n	80079e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <xQueueGenericCreateStatic+0x56>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xQueueGenericCreateStatic+0x5a>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <xQueueGenericCreateStatic+0x5c>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	623b      	str	r3, [r7, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <xQueueGenericCreateStatic+0x84>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <xQueueGenericCreateStatic+0x88>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <xQueueGenericCreateStatic+0x8a>
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	61fb      	str	r3, [r7, #28]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a5e:	2350      	movs	r3, #80	@ 0x50
 8007a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b50      	cmp	r3, #80	@ 0x50
 8007a66:	d00b      	beq.n	8007a80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	61bb      	str	r3, [r7, #24]
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	e7fd      	b.n	8007a7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f805 	bl	8007ab2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3730      	adds	r7, #48	@ 0x30
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	607a      	str	r2, [r7, #4]
 8007abe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	e002      	b.n	8007ad4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	69b8      	ldr	r0, [r7, #24]
 8007ae4:	f7ff fefe 	bl	80078e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	78fa      	ldrb	r2, [r7, #3]
 8007aec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	@ 0x38
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b06:	2300      	movs	r3, #0
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <xQueueGenericSend+0x34>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <xQueueGenericSend+0x42>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <xQueueGenericSend+0x46>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <xQueueGenericSend+0x48>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10b      	bne.n	8007b5c <xQueueGenericSend+0x64>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d103      	bne.n	8007b6a <xQueueGenericSend+0x72>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <xQueueGenericSend+0x76>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <xQueueGenericSend+0x78>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <xQueueGenericSend+0x94>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	623b      	str	r3, [r7, #32]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b8c:	f001 f9ce 	bl	8008f2c <xTaskGetSchedulerState>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <xQueueGenericSend+0xa4>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <xQueueGenericSend+0xa8>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <xQueueGenericSend+0xaa>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <xQueueGenericSend+0xc6>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61fb      	str	r3, [r7, #28]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bbe:	f002 f913 	bl	8009de8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <xQueueGenericSend+0xdc>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d129      	bne.n	8007c28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bda:	f000 fa0f 	bl	8007ffc <prvCopyDataToQueue>
 8007bde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	3324      	adds	r3, #36	@ 0x24
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 ffdd 	bl	8008bac <xTaskRemoveFromEventList>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d013      	beq.n	8007c20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8007cf8 <xQueueGenericSend+0x200>)
 8007bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	e00a      	b.n	8007c20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c10:	4b39      	ldr	r3, [pc, #228]	@ (8007cf8 <xQueueGenericSend+0x200>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c20:	f002 f914 	bl	8009e4c <vPortExitCritical>
				return pdPASS;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e063      	b.n	8007cf0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d103      	bne.n	8007c36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c2e:	f002 f90d 	bl	8009e4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e05c      	b.n	8007cf0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c3c:	f107 0314 	add.w	r3, r7, #20
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 f817 	bl	8008c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c46:	2301      	movs	r3, #1
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c4a:	f002 f8ff 	bl	8009e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c4e:	f000 fd87 	bl	8008760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c52:	f002 f8c9 	bl	8009de8 <vPortEnterCritical>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d103      	bne.n	8007c6c <xQueueGenericSend+0x174>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c72:	b25b      	sxtb	r3, r3
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d103      	bne.n	8007c82 <xQueueGenericSend+0x18a>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c82:	f002 f8e3 	bl	8009e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c86:	1d3a      	adds	r2, r7, #4
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 f806 	bl	8008ca0 <xTaskCheckForTimeOut>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d124      	bne.n	8007ce4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c9c:	f000 faa6 	bl	80081ec <prvIsQueueFull>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d018      	beq.n	8007cd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	3310      	adds	r3, #16
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 ff2a 	bl	8008b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cb6:	f000 fa31 	bl	800811c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cba:	f000 fd5f 	bl	800877c <xTaskResumeAll>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f47f af7c 	bne.w	8007bbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf8 <xQueueGenericSend+0x200>)
 8007cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	e772      	b.n	8007bbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cda:	f000 fa1f 	bl	800811c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cde:	f000 fd4d 	bl	800877c <xTaskResumeAll>
 8007ce2:	e76c      	b.n	8007bbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ce6:	f000 fa19 	bl	800811c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cea:	f000 fd47 	bl	800877c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3738      	adds	r7, #56	@ 0x38
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b090      	sub	sp, #64	@ 0x40
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	e7fd      	b.n	8007d28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSendFromISR+0x3e>
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSendFromISR+0x42>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSendFromISR+0x44>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d103      	bne.n	8007d6a <xQueueGenericSendFromISR+0x6e>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <xQueueGenericSendFromISR+0x72>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e000      	b.n	8007d70 <xQueueGenericSendFromISR+0x74>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	623b      	str	r3, [r7, #32]
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d8c:	f002 f90c 	bl	8009fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d90:	f3ef 8211 	mrs	r2, BASEPRI
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	61fa      	str	r2, [r7, #28]
 8007da6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007da8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007daa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d302      	bcc.n	8007dbe <xQueueGenericSendFromISR+0xc2>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d12f      	bne.n	8007e1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007dd4:	f000 f912 	bl	8007ffc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d112      	bne.n	8007e08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d016      	beq.n	8007e18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	3324      	adds	r3, #36	@ 0x24
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fedc 	bl	8008bac <xTaskRemoveFromEventList>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00e      	beq.n	8007e18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	e007      	b.n	8007e18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	b25a      	sxtb	r2, r3
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007e1c:	e001      	b.n	8007e22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3740      	adds	r7, #64	@ 0x40
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	@ 0x30
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <xQueueReceive+0x32>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	623b      	str	r3, [r7, #32]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d103      	bne.n	8007e78 <xQueueReceive+0x40>
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <xQueueReceive+0x44>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e000      	b.n	8007e7e <xQueueReceive+0x46>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <xQueueReceive+0x62>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	61fb      	str	r3, [r7, #28]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e9a:	f001 f847 	bl	8008f2c <xTaskGetSchedulerState>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <xQueueReceive+0x72>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <xQueueReceive+0x76>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <xQueueReceive+0x78>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <xQueueReceive+0x94>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	61bb      	str	r3, [r7, #24]
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ecc:	f001 ff8c 	bl	8009de8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01f      	beq.n	8007f1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee0:	f000 f8f6 	bl	80080d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	1e5a      	subs	r2, r3, #1
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00f      	beq.n	8007f14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	3310      	adds	r3, #16
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fe57 	bl	8008bac <xTaskRemoveFromEventList>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f04:	4b3c      	ldr	r3, [pc, #240]	@ (8007ff8 <xQueueReceive+0x1c0>)
 8007f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f14:	f001 ff9a 	bl	8009e4c <vPortExitCritical>
				return pdPASS;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e069      	b.n	8007ff0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f22:	f001 ff93 	bl	8009e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e062      	b.n	8007ff0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d106      	bne.n	8007f3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f30:	f107 0310 	add.w	r3, r7, #16
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fe9d 	bl	8008c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f3e:	f001 ff85 	bl	8009e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f42:	f000 fc0d 	bl	8008760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f46:	f001 ff4f 	bl	8009de8 <vPortEnterCritical>
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f50:	b25b      	sxtb	r3, r3
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d103      	bne.n	8007f60 <xQueueReceive+0x128>
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f66:	b25b      	sxtb	r3, r3
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6c:	d103      	bne.n	8007f76 <xQueueReceive+0x13e>
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f76:	f001 ff69 	bl	8009e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f7a:	1d3a      	adds	r2, r7, #4
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fe8c 	bl	8008ca0 <xTaskCheckForTimeOut>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d123      	bne.n	8007fd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f90:	f000 f916 	bl	80081c0 <prvIsQueueEmpty>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d017      	beq.n	8007fca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	3324      	adds	r3, #36	@ 0x24
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fdb0 	bl	8008b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007faa:	f000 f8b7 	bl	800811c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fae:	f000 fbe5 	bl	800877c <xTaskResumeAll>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d189      	bne.n	8007ecc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff8 <xQueueReceive+0x1c0>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	e780      	b.n	8007ecc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fcc:	f000 f8a6 	bl	800811c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fd0:	f000 fbd4 	bl	800877c <xTaskResumeAll>
 8007fd4:	e77a      	b.n	8007ecc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fd8:	f000 f8a0 	bl	800811c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fdc:	f000 fbce 	bl	800877c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe2:	f000 f8ed 	bl	80081c0 <prvIsQueueEmpty>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f43f af6f 	beq.w	8007ecc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3730      	adds	r7, #48	@ 0x30
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008010:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10d      	bne.n	8008036 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d14d      	bne.n	80080be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff9e 	bl	8008f68 <xTaskPriorityDisinherit>
 800802c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	609a      	str	r2, [r3, #8]
 8008034:	e043      	b.n	80080be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d119      	bne.n	8008070 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6858      	ldr	r0, [r3, #4]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008044:	461a      	mov	r2, r3
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	f002 fd41 	bl	800aace <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	441a      	add	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	429a      	cmp	r2, r3
 8008064:	d32b      	bcc.n	80080be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	e026      	b.n	80080be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68d8      	ldr	r0, [r3, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008078:	461a      	mov	r2, r3
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	f002 fd27 	bl	800aace <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008088:	425b      	negs	r3, r3
 800808a:	441a      	add	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d207      	bcs.n	80080ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a4:	425b      	negs	r3, r3
 80080a6:	441a      	add	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d105      	bne.n	80080be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80080c6:	697b      	ldr	r3, [r7, #20]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d018      	beq.n	8008114 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	441a      	add	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d303      	bcc.n	8008104 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68d9      	ldr	r1, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810c:	461a      	mov	r2, r3
 800810e:	6838      	ldr	r0, [r7, #0]
 8008110:	f002 fcdd 	bl	800aace <memcpy>
	}
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008124:	f001 fe60 	bl	8009de8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800812e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008130:	e011      	b.n	8008156 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d012      	beq.n	8008160 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3324      	adds	r3, #36	@ 0x24
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fd34 	bl	8008bac <xTaskRemoveFromEventList>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800814a:	f000 fe0d 	bl	8008d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	3b01      	subs	r3, #1
 8008152:	b2db      	uxtb	r3, r3
 8008154:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800815a:	2b00      	cmp	r3, #0
 800815c:	dce9      	bgt.n	8008132 <prvUnlockQueue+0x16>
 800815e:	e000      	b.n	8008162 <prvUnlockQueue+0x46>
					break;
 8008160:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	22ff      	movs	r2, #255	@ 0xff
 8008166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800816a:	f001 fe6f 	bl	8009e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800816e:	f001 fe3b 	bl	8009de8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008178:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800817a:	e011      	b.n	80081a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d012      	beq.n	80081aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3310      	adds	r3, #16
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fd0f 	bl	8008bac <xTaskRemoveFromEventList>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008194:	f000 fde8 	bl	8008d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	3b01      	subs	r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	dce9      	bgt.n	800817c <prvUnlockQueue+0x60>
 80081a8:	e000      	b.n	80081ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	22ff      	movs	r2, #255	@ 0xff
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80081b4:	f001 fe4a 	bl	8009e4c <vPortExitCritical>
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081c8:	f001 fe0e 	bl	8009de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081d4:	2301      	movs	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e001      	b.n	80081de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081de:	f001 fe35 	bl	8009e4c <vPortExitCritical>

	return xReturn;
 80081e2:	68fb      	ldr	r3, [r7, #12]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081f4:	f001 fdf8 	bl	8009de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	429a      	cmp	r2, r3
 8008202:	d102      	bne.n	800820a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008204:	2301      	movs	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e001      	b.n	800820e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800820e:	f001 fe1d 	bl	8009e4c <vPortExitCritical>

	return xReturn;
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e014      	b.n	8008256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800822c:	4a0f      	ldr	r2, [pc, #60]	@ (800826c <vQueueAddToRegistry+0x50>)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10b      	bne.n	8008250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008238:	490c      	ldr	r1, [pc, #48]	@ (800826c <vQueueAddToRegistry+0x50>)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008242:	4a0a      	ldr	r2, [pc, #40]	@ (800826c <vQueueAddToRegistry+0x50>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800824e:	e006      	b.n	800825e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3301      	adds	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b07      	cmp	r3, #7
 800825a:	d9e7      	bls.n	800822c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000ab8 	.word	0x20000ab8

08008270 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008280:	f001 fdb2 	bl	8009de8 <vPortEnterCritical>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800828a:	b25b      	sxtb	r3, r3
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d103      	bne.n	800829a <vQueueWaitForMessageRestricted+0x2a>
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d103      	bne.n	80082b0 <vQueueWaitForMessageRestricted+0x40>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082b0:	f001 fdcc 	bl	8009e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	3324      	adds	r3, #36	@ 0x24
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fc45 	bl	8008b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082ca:	6978      	ldr	r0, [r7, #20]
 80082cc:	f7ff ff26 	bl	800811c <prvUnlockQueue>
	}
 80082d0:	bf00      	nop
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	@ 0x38
 80082dc:	af04      	add	r7, sp, #16
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <xTaskCreateStatic+0x2c>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	623b      	str	r3, [r7, #32]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10b      	bne.n	8008322 <xTaskCreateStatic+0x4a>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	61fb      	str	r3, [r7, #28]
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	e7fd      	b.n	800831e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008322:	235c      	movs	r3, #92	@ 0x5c
 8008324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b5c      	cmp	r3, #92	@ 0x5c
 800832a:	d00b      	beq.n	8008344 <xTaskCreateStatic+0x6c>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	61bb      	str	r3, [r7, #24]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008344:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01e      	beq.n	800838a <xTaskCreateStatic+0xb2>
 800834c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008364:	2300      	movs	r3, #0
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f850 	bl	8008422 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008382:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008384:	f000 f8de 	bl	8008544 <prvAddNewTaskToReadyList>
 8008388:	e001      	b.n	800838e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800838e:	697b      	ldr	r3, [r7, #20]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3728      	adds	r7, #40	@ 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	@ 0x30
 800839c:	af04      	add	r7, sp, #16
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 fe3d 	bl	800a02c <pvPortMalloc>
 80083b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00e      	beq.n	80083d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083ba:	205c      	movs	r0, #92	@ 0x5c
 80083bc:	f001 fe36 	bl	800a02c <pvPortMalloc>
 80083c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80083ce:	e005      	b.n	80083dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083d0:	6978      	ldr	r0, [r7, #20]
 80083d2:	f001 fef9 	bl	800a1c8 <vPortFree>
 80083d6:	e001      	b.n	80083dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d017      	beq.n	8008412 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	2300      	movs	r3, #0
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f80e 	bl	8008422 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008406:	69f8      	ldr	r0, [r7, #28]
 8008408:	f000 f89c 	bl	8008544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800840c:	2301      	movs	r3, #1
 800840e:	61bb      	str	r3, [r7, #24]
 8008410:	e002      	b.n	8008418 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008412:	f04f 33ff 	mov.w	r3, #4294967295
 8008416:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008418:	69bb      	ldr	r3, [r7, #24]
	}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b088      	sub	sp, #32
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	461a      	mov	r2, r3
 800843a:	21a5      	movs	r1, #165	@ 0xa5
 800843c:	f002 fa5f 	bl	800a8fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800844a:	3b01      	subs	r3, #1
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f023 0307 	bic.w	r3, r3, #7
 8008458:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	617b      	str	r3, [r7, #20]
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01f      	beq.n	80084c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	e012      	b.n	80084ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	7819      	ldrb	r1, [r3, #0]
 8008490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	4413      	add	r3, r2
 8008496:	3334      	adds	r3, #52	@ 0x34
 8008498:	460a      	mov	r2, r1
 800849a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d006      	beq.n	80084b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	3301      	adds	r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	2b0f      	cmp	r3, #15
 80084b2:	d9e9      	bls.n	8008488 <prvInitialiseNewTask+0x66>
 80084b4:	e000      	b.n	80084b8 <prvInitialiseNewTask+0x96>
			{
				break;
 80084b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084c0:	e003      	b.n	80084ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	2b37      	cmp	r3, #55	@ 0x37
 80084ce:	d901      	bls.n	80084d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084d0:	2337      	movs	r3, #55	@ 0x37
 80084d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084de:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	2200      	movs	r2, #0
 80084e4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff f966 	bl	80077bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	3318      	adds	r3, #24
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff f961 	bl	80077bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800850e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008512:	2200      	movs	r2, #0
 8008514:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	69b8      	ldr	r0, [r7, #24]
 8008524:	f001 fb32 	bl	8009b8c <pxPortInitialiseStack>
 8008528:	4602      	mov	r2, r0
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800853a:	bf00      	nop
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800854c:	f001 fc4c 	bl	8009de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008550:	4b2d      	ldr	r3, [pc, #180]	@ (8008608 <prvAddNewTaskToReadyList+0xc4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	4a2c      	ldr	r2, [pc, #176]	@ (8008608 <prvAddNewTaskToReadyList+0xc4>)
 8008558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800855a:	4b2c      	ldr	r3, [pc, #176]	@ (800860c <prvAddNewTaskToReadyList+0xc8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d109      	bne.n	8008576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008562:	4a2a      	ldr	r2, [pc, #168]	@ (800860c <prvAddNewTaskToReadyList+0xc8>)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008568:	4b27      	ldr	r3, [pc, #156]	@ (8008608 <prvAddNewTaskToReadyList+0xc4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d110      	bne.n	8008592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008570:	f000 fc1e 	bl	8008db0 <prvInitialiseTaskLists>
 8008574:	e00d      	b.n	8008592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008576:	4b26      	ldr	r3, [pc, #152]	@ (8008610 <prvAddNewTaskToReadyList+0xcc>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800857e:	4b23      	ldr	r3, [pc, #140]	@ (800860c <prvAddNewTaskToReadyList+0xc8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008588:	429a      	cmp	r2, r3
 800858a:	d802      	bhi.n	8008592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800858c:	4a1f      	ldr	r2, [pc, #124]	@ (800860c <prvAddNewTaskToReadyList+0xc8>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008592:	4b20      	ldr	r3, [pc, #128]	@ (8008614 <prvAddNewTaskToReadyList+0xd0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	4a1e      	ldr	r2, [pc, #120]	@ (8008614 <prvAddNewTaskToReadyList+0xd0>)
 800859a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800859c:	4b1d      	ldr	r3, [pc, #116]	@ (8008614 <prvAddNewTaskToReadyList+0xd0>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <prvAddNewTaskToReadyList+0xd4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <prvAddNewTaskToReadyList+0x74>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	4a18      	ldr	r2, [pc, #96]	@ (8008618 <prvAddNewTaskToReadyList+0xd4>)
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a15      	ldr	r2, [pc, #84]	@ (800861c <prvAddNewTaskToReadyList+0xd8>)
 80085c6:	441a      	add	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7ff f901 	bl	80077d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085d4:	f001 fc3a 	bl	8009e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008610 <prvAddNewTaskToReadyList+0xcc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00e      	beq.n	80085fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085e0:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <prvAddNewTaskToReadyList+0xc8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d207      	bcs.n	80085fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008620 <prvAddNewTaskToReadyList+0xdc>)
 80085f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000fcc 	.word	0x20000fcc
 800860c:	20000af8 	.word	0x20000af8
 8008610:	20000fd8 	.word	0x20000fd8
 8008614:	20000fe8 	.word	0x20000fe8
 8008618:	20000fd4 	.word	0x20000fd4
 800861c:	20000afc 	.word	0x20000afc
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008636:	4b14      	ldr	r3, [pc, #80]	@ (8008688 <vTaskDelay+0x64>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <vTaskDelay+0x32>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60bb      	str	r3, [r7, #8]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008656:	f000 f883 	bl	8008760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fee7 	bl	8009430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008662:	f000 f88b 	bl	800877c <xTaskResumeAll>
 8008666:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d107      	bne.n	800867e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800866e:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vTaskDelay+0x68>)
 8008670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000ff4 	.word	0x20000ff4
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	@ 0x28
 8008694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800869e:	463a      	mov	r2, r7
 80086a0:	1d39      	adds	r1, r7, #4
 80086a2:	f107 0308 	add.w	r3, r7, #8
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff f834 	bl	8007714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	9202      	str	r2, [sp, #8]
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	460a      	mov	r2, r1
 80086be:	4922      	ldr	r1, [pc, #136]	@ (8008748 <vTaskStartScheduler+0xb8>)
 80086c0:	4822      	ldr	r0, [pc, #136]	@ (800874c <vTaskStartScheduler+0xbc>)
 80086c2:	f7ff fe09 	bl	80082d8 <xTaskCreateStatic>
 80086c6:	4603      	mov	r3, r0
 80086c8:	4a21      	ldr	r2, [pc, #132]	@ (8008750 <vTaskStartScheduler+0xc0>)
 80086ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086cc:	4b20      	ldr	r3, [pc, #128]	@ (8008750 <vTaskStartScheduler+0xc0>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086d4:	2301      	movs	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e001      	b.n	80086de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d102      	bne.n	80086ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086e4:	f000 fef8 	bl	80094d8 <xTimerCreateTimerTask>
 80086e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d116      	bne.n	800871e <vTaskStartScheduler+0x8e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	613b      	str	r3, [r7, #16]
}
 8008702:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008704:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <vTaskStartScheduler+0xc4>)
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800870c:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <vTaskStartScheduler+0xc8>)
 800870e:	2201      	movs	r2, #1
 8008710:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008712:	4b12      	ldr	r3, [pc, #72]	@ (800875c <vTaskStartScheduler+0xcc>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008718:	f001 fac2 	bl	8009ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800871c:	e00f      	b.n	800873e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d10b      	bne.n	800873e <vTaskStartScheduler+0xae>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60fb      	str	r3, [r7, #12]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <vTaskStartScheduler+0xaa>
}
 800873e:	bf00      	nop
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	0800ba6c 	.word	0x0800ba6c
 800874c:	08008d81 	.word	0x08008d81
 8008750:	20000ff0 	.word	0x20000ff0
 8008754:	20000fec 	.word	0x20000fec
 8008758:	20000fd8 	.word	0x20000fd8
 800875c:	20000fd0 	.word	0x20000fd0

08008760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008764:	4b04      	ldr	r3, [pc, #16]	@ (8008778 <vTaskSuspendAll+0x18>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	4a03      	ldr	r2, [pc, #12]	@ (8008778 <vTaskSuspendAll+0x18>)
 800876c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800876e:	bf00      	nop
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	20000ff4 	.word	0x20000ff4

0800877c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800878a:	4b42      	ldr	r3, [pc, #264]	@ (8008894 <xTaskResumeAll+0x118>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <xTaskResumeAll+0x2e>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	603b      	str	r3, [r7, #0]
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	e7fd      	b.n	80087a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087aa:	f001 fb1d 	bl	8009de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087ae:	4b39      	ldr	r3, [pc, #228]	@ (8008894 <xTaskResumeAll+0x118>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	4a37      	ldr	r2, [pc, #220]	@ (8008894 <xTaskResumeAll+0x118>)
 80087b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b8:	4b36      	ldr	r3, [pc, #216]	@ (8008894 <xTaskResumeAll+0x118>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d162      	bne.n	8008886 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087c0:	4b35      	ldr	r3, [pc, #212]	@ (8008898 <xTaskResumeAll+0x11c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d05e      	beq.n	8008886 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087c8:	e02f      	b.n	800882a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ca:	4b34      	ldr	r3, [pc, #208]	@ (800889c <xTaskResumeAll+0x120>)
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3318      	adds	r3, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff f85a 	bl	8007890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff f855 	bl	8007890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ea:	4b2d      	ldr	r3, [pc, #180]	@ (80088a0 <xTaskResumeAll+0x124>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d903      	bls.n	80087fa <xTaskResumeAll+0x7e>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	4a2a      	ldr	r2, [pc, #168]	@ (80088a0 <xTaskResumeAll+0x124>)
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4a27      	ldr	r2, [pc, #156]	@ (80088a4 <xTaskResumeAll+0x128>)
 8008808:	441a      	add	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7fe ffe0 	bl	80077d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881a:	4b23      	ldr	r3, [pc, #140]	@ (80088a8 <xTaskResumeAll+0x12c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008820:	429a      	cmp	r2, r3
 8008822:	d302      	bcc.n	800882a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008824:	4b21      	ldr	r3, [pc, #132]	@ (80088ac <xTaskResumeAll+0x130>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800882a:	4b1c      	ldr	r3, [pc, #112]	@ (800889c <xTaskResumeAll+0x120>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1cb      	bne.n	80087ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008838:	f000 fb58 	bl	8008eec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800883c:	4b1c      	ldr	r3, [pc, #112]	@ (80088b0 <xTaskResumeAll+0x134>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d010      	beq.n	800886a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008848:	f000 f846 	bl	80088d8 <xTaskIncrementTick>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008852:	4b16      	ldr	r3, [pc, #88]	@ (80088ac <xTaskResumeAll+0x130>)
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3b01      	subs	r3, #1
 800885c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f1      	bne.n	8008848 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008864:	4b12      	ldr	r3, [pc, #72]	@ (80088b0 <xTaskResumeAll+0x134>)
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800886a:	4b10      	ldr	r3, [pc, #64]	@ (80088ac <xTaskResumeAll+0x130>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008872:	2301      	movs	r3, #1
 8008874:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008876:	4b0f      	ldr	r3, [pc, #60]	@ (80088b4 <xTaskResumeAll+0x138>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008886:	f001 fae1 	bl	8009e4c <vPortExitCritical>

	return xAlreadyYielded;
 800888a:	68bb      	ldr	r3, [r7, #8]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000ff4 	.word	0x20000ff4
 8008898:	20000fcc 	.word	0x20000fcc
 800889c:	20000f8c 	.word	0x20000f8c
 80088a0:	20000fd4 	.word	0x20000fd4
 80088a4:	20000afc 	.word	0x20000afc
 80088a8:	20000af8 	.word	0x20000af8
 80088ac:	20000fe0 	.word	0x20000fe0
 80088b0:	20000fdc 	.word	0x20000fdc
 80088b4:	e000ed04 	.word	0xe000ed04

080088b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088be:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <xTaskGetTickCount+0x1c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088c4:	687b      	ldr	r3, [r7, #4]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000fd0 	.word	0x20000fd0

080088d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008a20 <xTaskIncrementTick+0x148>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f040 8090 	bne.w	8008a0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008a24 <xTaskIncrementTick+0x14c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088f4:	4a4b      	ldr	r2, [pc, #300]	@ (8008a24 <xTaskIncrementTick+0x14c>)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d121      	bne.n	8008944 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008900:	4b49      	ldr	r3, [pc, #292]	@ (8008a28 <xTaskIncrementTick+0x150>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <xTaskIncrementTick+0x4a>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	603b      	str	r3, [r7, #0]
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	e7fd      	b.n	800891e <xTaskIncrementTick+0x46>
 8008922:	4b41      	ldr	r3, [pc, #260]	@ (8008a28 <xTaskIncrementTick+0x150>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	4b40      	ldr	r3, [pc, #256]	@ (8008a2c <xTaskIncrementTick+0x154>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a3e      	ldr	r2, [pc, #248]	@ (8008a28 <xTaskIncrementTick+0x150>)
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	4a3e      	ldr	r2, [pc, #248]	@ (8008a2c <xTaskIncrementTick+0x154>)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	4b3e      	ldr	r3, [pc, #248]	@ (8008a30 <xTaskIncrementTick+0x158>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	4a3c      	ldr	r2, [pc, #240]	@ (8008a30 <xTaskIncrementTick+0x158>)
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	f000 fad4 	bl	8008eec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008944:	4b3b      	ldr	r3, [pc, #236]	@ (8008a34 <xTaskIncrementTick+0x15c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	429a      	cmp	r2, r3
 800894c:	d349      	bcc.n	80089e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894e:	4b36      	ldr	r3, [pc, #216]	@ (8008a28 <xTaskIncrementTick+0x150>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008958:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <xTaskIncrementTick+0x15c>)
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	601a      	str	r2, [r3, #0]
					break;
 8008960:	e03f      	b.n	80089e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008962:	4b31      	ldr	r3, [pc, #196]	@ (8008a28 <xTaskIncrementTick+0x150>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d203      	bcs.n	8008982 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800897a:	4a2e      	ldr	r2, [pc, #184]	@ (8008a34 <xTaskIncrementTick+0x15c>)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008980:	e02f      	b.n	80089e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe ff82 	bl	8007890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	3318      	adds	r3, #24
 8008998:	4618      	mov	r0, r3
 800899a:	f7fe ff79 	bl	8007890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a2:	4b25      	ldr	r3, [pc, #148]	@ (8008a38 <xTaskIncrementTick+0x160>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d903      	bls.n	80089b2 <xTaskIncrementTick+0xda>
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ae:	4a22      	ldr	r2, [pc, #136]	@ (8008a38 <xTaskIncrementTick+0x160>)
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4a1f      	ldr	r2, [pc, #124]	@ (8008a3c <xTaskIncrementTick+0x164>)
 80089c0:	441a      	add	r2, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f7fe ff04 	bl	80077d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a40 <xTaskIncrementTick+0x168>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d8:	429a      	cmp	r2, r3
 80089da:	d3b8      	bcc.n	800894e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80089dc:	2301      	movs	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e0:	e7b5      	b.n	800894e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089e2:	4b17      	ldr	r3, [pc, #92]	@ (8008a40 <xTaskIncrementTick+0x168>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e8:	4914      	ldr	r1, [pc, #80]	@ (8008a3c <xTaskIncrementTick+0x164>)
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d901      	bls.n	80089fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089fe:	4b11      	ldr	r3, [pc, #68]	@ (8008a44 <xTaskIncrementTick+0x16c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d007      	beq.n	8008a16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008a06:	2301      	movs	r3, #1
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e004      	b.n	8008a16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a48 <xTaskIncrementTick+0x170>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	4a0d      	ldr	r2, [pc, #52]	@ (8008a48 <xTaskIncrementTick+0x170>)
 8008a14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a16:	697b      	ldr	r3, [r7, #20]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20000ff4 	.word	0x20000ff4
 8008a24:	20000fd0 	.word	0x20000fd0
 8008a28:	20000f84 	.word	0x20000f84
 8008a2c:	20000f88 	.word	0x20000f88
 8008a30:	20000fe4 	.word	0x20000fe4
 8008a34:	20000fec 	.word	0x20000fec
 8008a38:	20000fd4 	.word	0x20000fd4
 8008a3c:	20000afc 	.word	0x20000afc
 8008a40:	20000af8 	.word	0x20000af8
 8008a44:	20000fe0 	.word	0x20000fe0
 8008a48:	20000fdc 	.word	0x20000fdc

08008a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a52:	4b28      	ldr	r3, [pc, #160]	@ (8008af4 <vTaskSwitchContext+0xa8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a5a:	4b27      	ldr	r3, [pc, #156]	@ (8008af8 <vTaskSwitchContext+0xac>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a60:	e042      	b.n	8008ae8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008a62:	4b25      	ldr	r3, [pc, #148]	@ (8008af8 <vTaskSwitchContext+0xac>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a68:	4b24      	ldr	r3, [pc, #144]	@ (8008afc <vTaskSwitchContext+0xb0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e011      	b.n	8008a94 <vTaskSwitchContext+0x48>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <vTaskSwitchContext+0x42>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	607b      	str	r3, [r7, #4]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <vTaskSwitchContext+0x3e>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	491a      	ldr	r1, [pc, #104]	@ (8008b00 <vTaskSwitchContext+0xb4>)
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0e3      	beq.n	8008a70 <vTaskSwitchContext+0x24>
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4a13      	ldr	r2, [pc, #76]	@ (8008b00 <vTaskSwitchContext+0xb4>)
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60bb      	str	r3, [r7, #8]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	605a      	str	r2, [r3, #4]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d104      	bne.n	8008ad8 <vTaskSwitchContext+0x8c>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	605a      	str	r2, [r3, #4]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	4a09      	ldr	r2, [pc, #36]	@ (8008b04 <vTaskSwitchContext+0xb8>)
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	4a06      	ldr	r2, [pc, #24]	@ (8008afc <vTaskSwitchContext+0xb0>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6013      	str	r3, [r2, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	20000ff4 	.word	0x20000ff4
 8008af8:	20000fe0 	.word	0x20000fe0
 8008afc:	20000fd4 	.word	0x20000fd4
 8008b00:	20000afc 	.word	0x20000afc
 8008b04:	20000af8 	.word	0x20000af8

08008b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	60fb      	str	r3, [r7, #12]
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	e7fd      	b.n	8008b2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <vTaskPlaceOnEventList+0x48>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3318      	adds	r3, #24
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fe fe70 	bl	800781e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b3e:	2101      	movs	r1, #1
 8008b40:	6838      	ldr	r0, [r7, #0]
 8008b42:	f000 fc75 	bl	8009430 <prvAddCurrentTaskToDelayedList>
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000af8 	.word	0x20000af8

08008b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	617b      	str	r3, [r7, #20]
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	e7fd      	b.n	8008b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3318      	adds	r3, #24
 8008b84:	4619      	mov	r1, r3
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7fe fe25 	bl	80077d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b92:	f04f 33ff 	mov.w	r3, #4294967295
 8008b96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	68b8      	ldr	r0, [r7, #8]
 8008b9c:	f000 fc48 	bl	8009430 <prvAddCurrentTaskToDelayedList>
	}
 8008ba0:	bf00      	nop
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000af8 	.word	0x20000af8

08008bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10b      	bne.n	8008bda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60fb      	str	r3, [r7, #12]
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	3318      	adds	r3, #24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fe56 	bl	8007890 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c5c <xTaskRemoveFromEventList+0xb0>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d11d      	bne.n	8008c28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe fe4d 	bl	8007890 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfa:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <xTaskRemoveFromEventList+0xb4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d903      	bls.n	8008c0a <xTaskRemoveFromEventList+0x5e>
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c06:	4a16      	ldr	r2, [pc, #88]	@ (8008c60 <xTaskRemoveFromEventList+0xb4>)
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4a13      	ldr	r2, [pc, #76]	@ (8008c64 <xTaskRemoveFromEventList+0xb8>)
 8008c18:	441a      	add	r2, r3
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7fe fdd8 	bl	80077d6 <vListInsertEnd>
 8008c26:	e005      	b.n	8008c34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3318      	adds	r3, #24
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	480e      	ldr	r0, [pc, #56]	@ (8008c68 <xTaskRemoveFromEventList+0xbc>)
 8008c30:	f7fe fdd1 	bl	80077d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c38:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <xTaskRemoveFromEventList+0xc0>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d905      	bls.n	8008c4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c46:	4b0a      	ldr	r3, [pc, #40]	@ (8008c70 <xTaskRemoveFromEventList+0xc4>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	e001      	b.n	8008c52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c52:	697b      	ldr	r3, [r7, #20]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000ff4 	.word	0x20000ff4
 8008c60:	20000fd4 	.word	0x20000fd4
 8008c64:	20000afc 	.word	0x20000afc
 8008c68:	20000f8c 	.word	0x20000f8c
 8008c6c:	20000af8 	.word	0x20000af8
 8008c70:	20000fe0 	.word	0x20000fe0

08008c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c7c:	4b06      	ldr	r3, [pc, #24]	@ (8008c98 <vTaskInternalSetTimeOutState+0x24>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <vTaskInternalSetTimeOutState+0x28>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	20000fe4 	.word	0x20000fe4
 8008c9c:	20000fd0 	.word	0x20000fd0

08008ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ce6:	f001 f87f 	bl	8009de8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cea:	4b1d      	ldr	r3, [pc, #116]	@ (8008d60 <xTaskCheckForTimeOut+0xc0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d02:	d102      	bne.n	8008d0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e023      	b.n	8008d52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	4b15      	ldr	r3, [pc, #84]	@ (8008d64 <xTaskCheckForTimeOut+0xc4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d007      	beq.n	8008d26 <xTaskCheckForTimeOut+0x86>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d302      	bcc.n	8008d26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	e015      	b.n	8008d52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d20b      	bcs.n	8008d48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	1ad2      	subs	r2, r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff ff99 	bl	8008c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61fb      	str	r3, [r7, #28]
 8008d46:	e004      	b.n	8008d52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d52:	f001 f87b 	bl	8009e4c <vPortExitCritical>

	return xReturn;
 8008d56:	69fb      	ldr	r3, [r7, #28]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000fd0 	.word	0x20000fd0
 8008d64:	20000fe4 	.word	0x20000fe4

08008d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d6c:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <vTaskMissedYield+0x14>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	601a      	str	r2, [r3, #0]
}
 8008d72:	bf00      	nop
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	20000fe0 	.word	0x20000fe0

08008d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d88:	f000 f852 	bl	8008e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d8c:	4b06      	ldr	r3, [pc, #24]	@ (8008da8 <prvIdleTask+0x28>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d9f9      	bls.n	8008d88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d94:	4b05      	ldr	r3, [pc, #20]	@ (8008dac <prvIdleTask+0x2c>)
 8008d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008da4:	e7f0      	b.n	8008d88 <prvIdleTask+0x8>
 8008da6:	bf00      	nop
 8008da8:	20000afc 	.word	0x20000afc
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
 8008dba:	e00c      	b.n	8008dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4a12      	ldr	r2, [pc, #72]	@ (8008e10 <prvInitialiseTaskLists+0x60>)
 8008dc8:	4413      	add	r3, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fcd6 	bl	800777c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b37      	cmp	r3, #55	@ 0x37
 8008dda:	d9ef      	bls.n	8008dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ddc:	480d      	ldr	r0, [pc, #52]	@ (8008e14 <prvInitialiseTaskLists+0x64>)
 8008dde:	f7fe fccd 	bl	800777c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008de2:	480d      	ldr	r0, [pc, #52]	@ (8008e18 <prvInitialiseTaskLists+0x68>)
 8008de4:	f7fe fcca 	bl	800777c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008de8:	480c      	ldr	r0, [pc, #48]	@ (8008e1c <prvInitialiseTaskLists+0x6c>)
 8008dea:	f7fe fcc7 	bl	800777c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dee:	480c      	ldr	r0, [pc, #48]	@ (8008e20 <prvInitialiseTaskLists+0x70>)
 8008df0:	f7fe fcc4 	bl	800777c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008df4:	480b      	ldr	r0, [pc, #44]	@ (8008e24 <prvInitialiseTaskLists+0x74>)
 8008df6:	f7fe fcc1 	bl	800777c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008e28 <prvInitialiseTaskLists+0x78>)
 8008dfc:	4a05      	ldr	r2, [pc, #20]	@ (8008e14 <prvInitialiseTaskLists+0x64>)
 8008dfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e00:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <prvInitialiseTaskLists+0x7c>)
 8008e02:	4a05      	ldr	r2, [pc, #20]	@ (8008e18 <prvInitialiseTaskLists+0x68>)
 8008e04:	601a      	str	r2, [r3, #0]
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000afc 	.word	0x20000afc
 8008e14:	20000f5c 	.word	0x20000f5c
 8008e18:	20000f70 	.word	0x20000f70
 8008e1c:	20000f8c 	.word	0x20000f8c
 8008e20:	20000fa0 	.word	0x20000fa0
 8008e24:	20000fb8 	.word	0x20000fb8
 8008e28:	20000f84 	.word	0x20000f84
 8008e2c:	20000f88 	.word	0x20000f88

08008e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e36:	e019      	b.n	8008e6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e38:	f000 ffd6 	bl	8009de8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3c:	4b10      	ldr	r3, [pc, #64]	@ (8008e80 <prvCheckTasksWaitingTermination+0x50>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fd21 	bl	8007890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <prvCheckTasksWaitingTermination+0x54>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	4a0b      	ldr	r2, [pc, #44]	@ (8008e84 <prvCheckTasksWaitingTermination+0x54>)
 8008e56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e58:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <prvCheckTasksWaitingTermination+0x58>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e88 <prvCheckTasksWaitingTermination+0x58>)
 8008e60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e62:	f000 fff3 	bl	8009e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f810 	bl	8008e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e6c:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <prvCheckTasksWaitingTermination+0x58>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e1      	bne.n	8008e38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000fa0 	.word	0x20000fa0
 8008e84:	20000fcc 	.word	0x20000fcc
 8008e88:	20000fb4 	.word	0x20000fb4

08008e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f990 	bl	800a1c8 <vPortFree>
				vPortFree( pxTCB );
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f98d 	bl	800a1c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008eae:	e019      	b.n	8008ee4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d103      	bne.n	8008ec2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 f984 	bl	800a1c8 <vPortFree>
	}
 8008ec0:	e010      	b.n	8008ee4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d00b      	beq.n	8008ee4 <prvDeleteTCB+0x58>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	bf00      	nop
 8008ee2:	e7fd      	b.n	8008ee0 <prvDeleteTCB+0x54>
	}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f24 <prvResetNextTaskUnblockTime+0x38>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d104      	bne.n	8008f06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <prvResetNextTaskUnblockTime+0x3c>)
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f04:	e008      	b.n	8008f18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f06:	4b07      	ldr	r3, [pc, #28]	@ (8008f24 <prvResetNextTaskUnblockTime+0x38>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	4a04      	ldr	r2, [pc, #16]	@ (8008f28 <prvResetNextTaskUnblockTime+0x3c>)
 8008f16:	6013      	str	r3, [r2, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	20000f84 	.word	0x20000f84
 8008f28:	20000fec 	.word	0x20000fec

08008f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f32:	4b0b      	ldr	r3, [pc, #44]	@ (8008f60 <xTaskGetSchedulerState+0x34>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	607b      	str	r3, [r7, #4]
 8008f3e:	e008      	b.n	8008f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f40:	4b08      	ldr	r3, [pc, #32]	@ (8008f64 <xTaskGetSchedulerState+0x38>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e001      	b.n	8008f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f52:	687b      	ldr	r3, [r7, #4]
	}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	20000fd8 	.word	0x20000fd8
 8008f64:	20000ff4 	.word	0x20000ff4

08008f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d058      	beq.n	8009030 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800903c <xTaskPriorityDisinherit+0xd4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d00b      	beq.n	8008fa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	60fb      	str	r3, [r7, #12]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10b      	bne.n	8008fc0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	60bb      	str	r3, [r7, #8]
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc4:	1e5a      	subs	r2, r3, #1
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d02c      	beq.n	8009030 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d128      	bne.n	8009030 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fc54 	bl	8007890 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009000:	4b0f      	ldr	r3, [pc, #60]	@ (8009040 <xTaskPriorityDisinherit+0xd8>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d903      	bls.n	8009010 <xTaskPriorityDisinherit+0xa8>
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900c:	4a0c      	ldr	r2, [pc, #48]	@ (8009040 <xTaskPriorityDisinherit+0xd8>)
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4a09      	ldr	r2, [pc, #36]	@ (8009044 <xTaskPriorityDisinherit+0xdc>)
 800901e:	441a      	add	r2, r3
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fe fbd5 	bl	80077d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009030:	697b      	ldr	r3, [r7, #20]
	}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000af8 	.word	0x20000af8
 8009040:	20000fd4 	.word	0x20000fd4
 8009044:	20000afc 	.word	0x20000afc

08009048 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009056:	f000 fec7 	bl	8009de8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800905a:	4b26      	ldr	r3, [pc, #152]	@ (80090f4 <xTaskNotifyWait+0xac>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d01a      	beq.n	800909e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009068:	4b22      	ldr	r3, [pc, #136]	@ (80090f4 <xTaskNotifyWait+0xac>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	43d2      	mvns	r2, r2
 8009072:	400a      	ands	r2, r1
 8009074:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009076:	4b1f      	ldr	r3, [pc, #124]	@ (80090f4 <xTaskNotifyWait+0xac>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009086:	2101      	movs	r1, #1
 8009088:	6838      	ldr	r0, [r7, #0]
 800908a:	f000 f9d1 	bl	8009430 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800908e:	4b1a      	ldr	r3, [pc, #104]	@ (80090f8 <xTaskNotifyWait+0xb0>)
 8009090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800909e:	f000 fed5 	bl	8009e4c <vPortExitCritical>

		taskENTER_CRITICAL();
 80090a2:	f000 fea1 	bl	8009de8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80090ac:	4b11      	ldr	r3, [pc, #68]	@ (80090f4 <xTaskNotifyWait+0xac>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80090b6:	4b0f      	ldr	r3, [pc, #60]	@ (80090f4 <xTaskNotifyWait+0xac>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d002      	beq.n	80090ca <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e008      	b.n	80090dc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80090ca:	4b0a      	ldr	r3, [pc, #40]	@ (80090f4 <xTaskNotifyWait+0xac>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	43d2      	mvns	r2, r2
 80090d4:	400a      	ands	r2, r1
 80090d6:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 80090d8:	2301      	movs	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090dc:	4b05      	ldr	r3, [pc, #20]	@ (80090f4 <xTaskNotifyWait+0xac>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80090e6:	f000 feb1 	bl	8009e4c <vPortExitCritical>

		return xReturn;
 80090ea:	697b      	ldr	r3, [r7, #20]
	}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000af8 	.word	0x20000af8
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08a      	sub	sp, #40	@ 0x28
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	4613      	mov	r3, r2
 800910a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800910c:	2301      	movs	r3, #1
 800910e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <xTaskGenericNotify+0x32>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	61bb      	str	r3, [r7, #24]
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	e7fd      	b.n	800912a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009132:	f000 fe59 	bl	8009de8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800914a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	2b04      	cmp	r3, #4
 8009158:	d827      	bhi.n	80091aa <xTaskGenericNotify+0xae>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <xTaskGenericNotify+0x64>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	080091cd 	.word	0x080091cd
 8009164:	08009175 	.word	0x08009175
 8009168:	08009183 	.word	0x08009183
 800916c:	0800918f 	.word	0x0800918f
 8009170:	08009197 	.word	0x08009197
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	431a      	orrs	r2, r3
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009180:	e027      	b.n	80091d2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800918c:	e021      	b.n	80091d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009194:	e01d      	b.n	80091d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009196:	7ffb      	ldrb	r3, [r7, #31]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d003      	beq.n	80091a4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80091a2:	e016      	b.n	80091d2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80091a8:	e013      	b.n	80091d2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b2:	d00d      	beq.n	80091d0 <xTaskGenericNotify+0xd4>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	617b      	str	r3, [r7, #20]
}
 80091c6:	bf00      	nop
 80091c8:	bf00      	nop
 80091ca:	e7fd      	b.n	80091c8 <xTaskGenericNotify+0xcc>
					break;
 80091cc:	bf00      	nop
 80091ce:	e000      	b.n	80091d2 <xTaskGenericNotify+0xd6>

					break;
 80091d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80091d2:	7ffb      	ldrb	r3, [r7, #31]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d13b      	bne.n	8009250 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	3304      	adds	r3, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fb57 	bl	8007890 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009260 <xTaskGenericNotify+0x164>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d903      	bls.n	80091f6 <xTaskGenericNotify+0xfa>
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009260 <xTaskGenericNotify+0x164>)
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4a18      	ldr	r2, [pc, #96]	@ (8009264 <xTaskGenericNotify+0x168>)
 8009204:	441a      	add	r2, r3
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	3304      	adds	r3, #4
 800920a:	4619      	mov	r1, r3
 800920c:	4610      	mov	r0, r2
 800920e:	f7fe fae2 	bl	80077d6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <xTaskGenericNotify+0x136>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	613b      	str	r3, [r7, #16]
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	e7fd      	b.n	800922e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009236:	4b0c      	ldr	r3, [pc, #48]	@ (8009268 <xTaskGenericNotify+0x16c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d907      	bls.n	8009250 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009240:	4b0a      	ldr	r3, [pc, #40]	@ (800926c <xTaskGenericNotify+0x170>)
 8009242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009250:	f000 fdfc 	bl	8009e4c <vPortExitCritical>

		return xReturn;
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009256:	4618      	mov	r0, r3
 8009258:	3728      	adds	r7, #40	@ 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000fd4 	.word	0x20000fd4
 8009264:	20000afc 	.word	0x20000afc
 8009268:	20000af8 	.word	0x20000af8
 800926c:	e000ed04 	.word	0xe000ed04

08009270 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08e      	sub	sp, #56	@ 0x38
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009280:	2301      	movs	r3, #1
 8009282:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a2:	f000 fe81 	bl	8009fa8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80092aa:	f3ef 8211 	mrs	r2, BASEPRI
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	623a      	str	r2, [r7, #32]
 80092c0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80092c2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80092da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d829      	bhi.n	8009340 <xTaskGenericNotifyFromISR+0xd0>
 80092ec:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <xTaskGenericNotifyFromISR+0x84>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009363 	.word	0x08009363
 80092f8:	08009309 	.word	0x08009309
 80092fc:	08009317 	.word	0x08009317
 8009300:	08009323 	.word	0x08009323
 8009304:	0800932b 	.word	0x0800932b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	431a      	orrs	r2, r3
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009314:	e028      	b.n	8009368 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009320:	e022      	b.n	8009368 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009328:	e01e      	b.n	8009368 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800932a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800932e:	2b02      	cmp	r3, #2
 8009330:	d003      	beq.n	800933a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009338:	e016      	b.n	8009368 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800933a:	2300      	movs	r3, #0
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800933e:	e013      	b.n	8009368 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009348:	d00d      	beq.n	8009366 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	61bb      	str	r3, [r7, #24]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <xTaskGenericNotifyFromISR+0xee>
					break;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8009366:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009368:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800936c:	2b01      	cmp	r3, #1
 800936e:	d147      	bne.n	8009400 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	617b      	str	r3, [r7, #20]
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	e7fd      	b.n	800938c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009390:	4b21      	ldr	r3, [pc, #132]	@ (8009418 <xTaskGenericNotifyFromISR+0x1a8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d11d      	bne.n	80093d4 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fa77 	bl	8007890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a6:	4b1d      	ldr	r3, [pc, #116]	@ (800941c <xTaskGenericNotifyFromISR+0x1ac>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d903      	bls.n	80093b6 <xTaskGenericNotifyFromISR+0x146>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b2:	4a1a      	ldr	r2, [pc, #104]	@ (800941c <xTaskGenericNotifyFromISR+0x1ac>)
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4a17      	ldr	r2, [pc, #92]	@ (8009420 <xTaskGenericNotifyFromISR+0x1b0>)
 80093c4:	441a      	add	r2, r3
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fe fa02 	bl	80077d6 <vListInsertEnd>
 80093d2:	e005      	b.n	80093e0 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	3318      	adds	r3, #24
 80093d8:	4619      	mov	r1, r3
 80093da:	4812      	ldr	r0, [pc, #72]	@ (8009424 <xTaskGenericNotifyFromISR+0x1b4>)
 80093dc:	f7fe f9fb 	bl	80077d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e4:	4b10      	ldr	r3, [pc, #64]	@ (8009428 <xTaskGenericNotifyFromISR+0x1b8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d908      	bls.n	8009400 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80093ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80093f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80093fa:	4b0c      	ldr	r3, [pc, #48]	@ (800942c <xTaskGenericNotifyFromISR+0x1bc>)
 80093fc:	2201      	movs	r2, #1
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f383 8811 	msr	BASEPRI, r3
}
 800940a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800940c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800940e:	4618      	mov	r0, r3
 8009410:	3738      	adds	r7, #56	@ 0x38
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000ff4 	.word	0x20000ff4
 800941c:	20000fd4 	.word	0x20000fd4
 8009420:	20000afc 	.word	0x20000afc
 8009424:	20000f8c 	.word	0x20000f8c
 8009428:	20000af8 	.word	0x20000af8
 800942c:	20000fe0 	.word	0x20000fe0

08009430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800943a:	4b21      	ldr	r3, [pc, #132]	@ (80094c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009440:	4b20      	ldr	r3, [pc, #128]	@ (80094c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3304      	adds	r3, #4
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fa22 	bl	8007890 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d10a      	bne.n	800946a <prvAddCurrentTaskToDelayedList+0x3a>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d007      	beq.n	800946a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800945a:	4b1a      	ldr	r3, [pc, #104]	@ (80094c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4819      	ldr	r0, [pc, #100]	@ (80094c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009464:	f7fe f9b7 	bl	80077d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009468:	e026      	b.n	80094b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4413      	add	r3, r2
 8009470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009472:	4b14      	ldr	r3, [pc, #80]	@ (80094c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	429a      	cmp	r2, r3
 8009480:	d209      	bcs.n	8009496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009482:	4b12      	ldr	r3, [pc, #72]	@ (80094cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b0f      	ldr	r3, [pc, #60]	@ (80094c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3304      	adds	r3, #4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fe f9c5 	bl	800781e <vListInsert>
}
 8009494:	e010      	b.n	80094b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009496:	4b0e      	ldr	r3, [pc, #56]	@ (80094d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f7fe f9bb 	bl	800781e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094a8:	4b0a      	ldr	r3, [pc, #40]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d202      	bcs.n	80094b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094b2:	4a08      	ldr	r2, [pc, #32]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	6013      	str	r3, [r2, #0]
}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20000fd0 	.word	0x20000fd0
 80094c4:	20000af8 	.word	0x20000af8
 80094c8:	20000fb8 	.word	0x20000fb8
 80094cc:	20000f88 	.word	0x20000f88
 80094d0:	20000f84 	.word	0x20000f84
 80094d4:	20000fec 	.word	0x20000fec

080094d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	@ 0x28
 80094dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094e2:	f000 fb13 	bl	8009b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094e6:	4b1d      	ldr	r3, [pc, #116]	@ (800955c <xTimerCreateTimerTask+0x84>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d021      	beq.n	8009532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094f6:	1d3a      	adds	r2, r7, #4
 80094f8:	f107 0108 	add.w	r1, r7, #8
 80094fc:	f107 030c 	add.w	r3, r7, #12
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe f921 	bl	8007748 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	9202      	str	r2, [sp, #8]
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	2302      	movs	r3, #2
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	460a      	mov	r2, r1
 8009518:	4911      	ldr	r1, [pc, #68]	@ (8009560 <xTimerCreateTimerTask+0x88>)
 800951a:	4812      	ldr	r0, [pc, #72]	@ (8009564 <xTimerCreateTimerTask+0x8c>)
 800951c:	f7fe fedc 	bl	80082d8 <xTaskCreateStatic>
 8009520:	4603      	mov	r3, r0
 8009522:	4a11      	ldr	r2, [pc, #68]	@ (8009568 <xTimerCreateTimerTask+0x90>)
 8009524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009526:	4b10      	ldr	r3, [pc, #64]	@ (8009568 <xTimerCreateTimerTask+0x90>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800952e:	2301      	movs	r3, #1
 8009530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	613b      	str	r3, [r7, #16]
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	e7fd      	b.n	800954c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009550:	697b      	ldr	r3, [r7, #20]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20001028 	.word	0x20001028
 8009560:	0800ba74 	.word	0x0800ba74
 8009564:	080096a5 	.word	0x080096a5
 8009568:	2000102c 	.word	0x2000102c

0800956c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	@ 0x28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800957a:	2300      	movs	r3, #0
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10b      	bne.n	800959c <xTimerGenericCommand+0x30>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	623b      	str	r3, [r7, #32]
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	e7fd      	b.n	8009598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800959c:	4b19      	ldr	r3, [pc, #100]	@ (8009604 <xTimerGenericCommand+0x98>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d02a      	beq.n	80095fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	dc18      	bgt.n	80095e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095b6:	f7ff fcb9 	bl	8008f2c <xTaskGetSchedulerState>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d109      	bne.n	80095d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095c0:	4b10      	ldr	r3, [pc, #64]	@ (8009604 <xTimerGenericCommand+0x98>)
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	f107 0110 	add.w	r1, r7, #16
 80095c8:	2300      	movs	r3, #0
 80095ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095cc:	f7fe fa94 	bl	8007af8 <xQueueGenericSend>
 80095d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80095d2:	e012      	b.n	80095fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009604 <xTimerGenericCommand+0x98>)
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	f107 0110 	add.w	r1, r7, #16
 80095dc:	2300      	movs	r3, #0
 80095de:	2200      	movs	r2, #0
 80095e0:	f7fe fa8a 	bl	8007af8 <xQueueGenericSend>
 80095e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80095e6:	e008      	b.n	80095fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095e8:	4b06      	ldr	r3, [pc, #24]	@ (8009604 <xTimerGenericCommand+0x98>)
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	f107 0110 	add.w	r1, r7, #16
 80095f0:	2300      	movs	r3, #0
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	f7fe fb82 	bl	8007cfc <xQueueGenericSendFromISR>
 80095f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3728      	adds	r7, #40	@ 0x28
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	20001028 	.word	0x20001028

08009608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af02      	add	r7, sp, #8
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009612:	4b23      	ldr	r3, [pc, #140]	@ (80096a0 <prvProcessExpiredTimer+0x98>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe f935 	bl	8007890 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	d023      	beq.n	800967c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	18d1      	adds	r1, r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	f000 f8d5 	bl	80097f0 <prvInsertTimerInActiveList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d020      	beq.n	800968e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800964c:	2300      	movs	r3, #0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2300      	movs	r3, #0
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	6978      	ldr	r0, [r7, #20]
 8009658:	f7ff ff88 	bl	800956c <xTimerGenericCommand>
 800965c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d114      	bne.n	800968e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	60fb      	str	r3, [r7, #12]
}
 8009676:	bf00      	nop
 8009678:	bf00      	nop
 800967a:	e7fd      	b.n	8009678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	6978      	ldr	r0, [r7, #20]
 8009694:	4798      	blx	r3
}
 8009696:	bf00      	nop
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20001020 	.word	0x20001020

080096a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ac:	f107 0308 	add.w	r3, r7, #8
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f859 	bl	8009768 <prvGetNextExpireTime>
 80096b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4619      	mov	r1, r3
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 f805 	bl	80096cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096c2:	f000 f8d7 	bl	8009874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096c6:	bf00      	nop
 80096c8:	e7f0      	b.n	80096ac <prvTimerTask+0x8>
	...

080096cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096d6:	f7ff f843 	bl	8008760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f866 	bl	80097b0 <prvSampleTimeNow>
 80096e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d130      	bne.n	800974e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <prvProcessTimerOrBlockTask+0x3c>
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d806      	bhi.n	8009708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096fa:	f7ff f83f 	bl	800877c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096fe:	68f9      	ldr	r1, [r7, #12]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ff81 	bl	8009608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009706:	e024      	b.n	8009752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d008      	beq.n	8009720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800970e:	4b13      	ldr	r3, [pc, #76]	@ (800975c <prvProcessTimerOrBlockTask+0x90>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <prvProcessTimerOrBlockTask+0x50>
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <prvProcessTimerOrBlockTask+0x52>
 800971c:	2300      	movs	r3, #0
 800971e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009720:	4b0f      	ldr	r3, [pc, #60]	@ (8009760 <prvProcessTimerOrBlockTask+0x94>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4619      	mov	r1, r3
 800972e:	f7fe fd9f 	bl	8008270 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009732:	f7ff f823 	bl	800877c <xTaskResumeAll>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800973c:	4b09      	ldr	r3, [pc, #36]	@ (8009764 <prvProcessTimerOrBlockTask+0x98>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	f3bf 8f6f 	isb	sy
}
 800974c:	e001      	b.n	8009752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800974e:	f7ff f815 	bl	800877c <xTaskResumeAll>
}
 8009752:	bf00      	nop
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20001024 	.word	0x20001024
 8009760:	20001028 	.word	0x20001028
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009770:	4b0e      	ldr	r3, [pc, #56]	@ (80097ac <prvGetNextExpireTime+0x44>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <prvGetNextExpireTime+0x16>
 800977a:	2201      	movs	r2, #1
 800977c:	e000      	b.n	8009780 <prvGetNextExpireTime+0x18>
 800977e:	2200      	movs	r2, #0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800978c:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <prvGetNextExpireTime+0x44>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]
 8009796:	e001      	b.n	800979c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20001020 	.word	0x20001020

080097b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097b8:	f7ff f87e 	bl	80088b8 <xTaskGetTickCount>
 80097bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097be:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <prvSampleTimeNow+0x3c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d205      	bcs.n	80097d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097c8:	f000 f93a 	bl	8009a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	e002      	b.n	80097da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097da:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <prvSampleTimeNow+0x3c>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097e0:	68fb      	ldr	r3, [r7, #12]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20001030 	.word	0x20001030

080097f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097fe:	2300      	movs	r3, #0
 8009800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	429a      	cmp	r2, r3
 8009814:	d812      	bhi.n	800983c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	429a      	cmp	r2, r3
 8009822:	d302      	bcc.n	800982a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	e01b      	b.n	8009862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800982a:	4b10      	ldr	r3, [pc, #64]	@ (800986c <prvInsertTimerInActiveList+0x7c>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3304      	adds	r3, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7fd fff2 	bl	800781e <vListInsert>
 800983a:	e012      	b.n	8009862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d206      	bcs.n	8009852 <prvInsertTimerInActiveList+0x62>
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e007      	b.n	8009862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009852:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <prvInsertTimerInActiveList+0x80>)
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3304      	adds	r3, #4
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f7fd ffde 	bl	800781e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009862:	697b      	ldr	r3, [r7, #20]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20001024 	.word	0x20001024
 8009870:	20001020 	.word	0x20001020

08009874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	@ 0x38
 8009878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800987a:	e0ce      	b.n	8009a1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	da19      	bge.n	80098b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009882:	1d3b      	adds	r3, r7, #4
 8009884:	3304      	adds	r3, #4
 8009886:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	61fb      	str	r3, [r7, #28]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ac:	6850      	ldr	r0, [r2, #4]
 80098ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b0:	6892      	ldr	r2, [r2, #8]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f2c0 80ae 	blt.w	8009a1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd ffde 	bl	8007890 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098d4:	463b      	mov	r3, r7
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff ff6a 	bl	80097b0 <prvSampleTimeNow>
 80098dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b09      	cmp	r3, #9
 80098e2:	f200 8097 	bhi.w	8009a14 <prvProcessReceivedCommands+0x1a0>
 80098e6:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <prvProcessReceivedCommands+0x78>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009915 	.word	0x08009915
 80098f0:	08009915 	.word	0x08009915
 80098f4:	08009915 	.word	0x08009915
 80098f8:	0800998b 	.word	0x0800998b
 80098fc:	0800999f 	.word	0x0800999f
 8009900:	080099eb 	.word	0x080099eb
 8009904:	08009915 	.word	0x08009915
 8009908:	08009915 	.word	0x08009915
 800990c:	0800998b 	.word	0x0800998b
 8009910:	0800999f 	.word	0x0800999f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	b2da      	uxtb	r2, r3
 8009920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	18d1      	adds	r1, r2, r3
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009934:	f7ff ff5c 	bl	80097f0 <prvInsertTimerInActiveList>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d06c      	beq.n	8009a18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d061      	beq.n	8009a18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	441a      	add	r2, r3
 800995c:	2300      	movs	r3, #0
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	2300      	movs	r3, #0
 8009962:	2100      	movs	r1, #0
 8009964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009966:	f7ff fe01 	bl	800956c <xTimerGenericCommand>
 800996a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d152      	bne.n	8009a18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	61bb      	str	r3, [r7, #24]
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009990:	f023 0301 	bic.w	r3, r3, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800999c:	e03d      	b.n	8009a1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099a4:	f043 0301 	orr.w	r3, r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10b      	bne.n	80099d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	617b      	str	r3, [r7, #20]
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	e7fd      	b.n	80099d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	18d1      	adds	r1, r2, r3
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099e4:	f7ff ff04 	bl	80097f0 <prvInsertTimerInActiveList>
					break;
 80099e8:	e017      	b.n	8009a1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d103      	bne.n	8009a00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80099f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099fa:	f000 fbe5 	bl	800a1c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099fe:	e00c      	b.n	8009a1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a06:	f023 0301 	bic.w	r3, r3, #1
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a12:	e002      	b.n	8009a1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a14:	bf00      	nop
 8009a16:	e000      	b.n	8009a1a <prvProcessReceivedCommands+0x1a6>
					break;
 8009a18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a1a:	4b08      	ldr	r3, [pc, #32]	@ (8009a3c <prvProcessReceivedCommands+0x1c8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	1d39      	adds	r1, r7, #4
 8009a20:	2200      	movs	r2, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fa08 	bl	8007e38 <xQueueReceive>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f47f af26 	bne.w	800987c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	3730      	adds	r7, #48	@ 0x30
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20001028 	.word	0x20001028

08009a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a46:	e049      	b.n	8009adc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a48:	4b2e      	ldr	r3, [pc, #184]	@ (8009b04 <prvSwitchTimerLists+0xc4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a52:	4b2c      	ldr	r3, [pc, #176]	@ (8009b04 <prvSwitchTimerLists+0xc4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fd ff15 	bl	8007890 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d02f      	beq.n	8009adc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	4413      	add	r3, r2
 8009a84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d90e      	bls.n	8009aac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b04 <prvSwitchTimerLists+0xc4>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fd feba 	bl	800781e <vListInsert>
 8009aaa:	e017      	b.n	8009adc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aac:	2300      	movs	r3, #0
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7ff fd58 	bl	800956c <xTimerGenericCommand>
 8009abc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	603b      	str	r3, [r7, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009adc:	4b09      	ldr	r3, [pc, #36]	@ (8009b04 <prvSwitchTimerLists+0xc4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1b0      	bne.n	8009a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ae6:	4b07      	ldr	r3, [pc, #28]	@ (8009b04 <prvSwitchTimerLists+0xc4>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009aec:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <prvSwitchTimerLists+0xc8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a04      	ldr	r2, [pc, #16]	@ (8009b04 <prvSwitchTimerLists+0xc4>)
 8009af2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009af4:	4a04      	ldr	r2, [pc, #16]	@ (8009b08 <prvSwitchTimerLists+0xc8>)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6013      	str	r3, [r2, #0]
}
 8009afa:	bf00      	nop
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20001020 	.word	0x20001020
 8009b08:	20001024 	.word	0x20001024

08009b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b12:	f000 f969 	bl	8009de8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b16:	4b15      	ldr	r3, [pc, #84]	@ (8009b6c <prvCheckForValidListAndQueue+0x60>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d120      	bne.n	8009b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b1e:	4814      	ldr	r0, [pc, #80]	@ (8009b70 <prvCheckForValidListAndQueue+0x64>)
 8009b20:	f7fd fe2c 	bl	800777c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b24:	4813      	ldr	r0, [pc, #76]	@ (8009b74 <prvCheckForValidListAndQueue+0x68>)
 8009b26:	f7fd fe29 	bl	800777c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b2a:	4b13      	ldr	r3, [pc, #76]	@ (8009b78 <prvCheckForValidListAndQueue+0x6c>)
 8009b2c:	4a10      	ldr	r2, [pc, #64]	@ (8009b70 <prvCheckForValidListAndQueue+0x64>)
 8009b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b30:	4b12      	ldr	r3, [pc, #72]	@ (8009b7c <prvCheckForValidListAndQueue+0x70>)
 8009b32:	4a10      	ldr	r2, [pc, #64]	@ (8009b74 <prvCheckForValidListAndQueue+0x68>)
 8009b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b36:	2300      	movs	r3, #0
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	4b11      	ldr	r3, [pc, #68]	@ (8009b80 <prvCheckForValidListAndQueue+0x74>)
 8009b3c:	4a11      	ldr	r2, [pc, #68]	@ (8009b84 <prvCheckForValidListAndQueue+0x78>)
 8009b3e:	2110      	movs	r1, #16
 8009b40:	200a      	movs	r0, #10
 8009b42:	f7fd ff39 	bl	80079b8 <xQueueGenericCreateStatic>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4a08      	ldr	r2, [pc, #32]	@ (8009b6c <prvCheckForValidListAndQueue+0x60>)
 8009b4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b4c:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <prvCheckForValidListAndQueue+0x60>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b54:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <prvCheckForValidListAndQueue+0x60>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	490b      	ldr	r1, [pc, #44]	@ (8009b88 <prvCheckForValidListAndQueue+0x7c>)
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fb5e 	bl	800821c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b60:	f000 f974 	bl	8009e4c <vPortExitCritical>
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20001028 	.word	0x20001028
 8009b70:	20000ff8 	.word	0x20000ff8
 8009b74:	2000100c 	.word	0x2000100c
 8009b78:	20001020 	.word	0x20001020
 8009b7c:	20001024 	.word	0x20001024
 8009b80:	200010d4 	.word	0x200010d4
 8009b84:	20001034 	.word	0x20001034
 8009b88:	0800ba7c 	.word	0x0800ba7c

08009b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3b04      	subs	r3, #4
 8009b9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3b04      	subs	r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f023 0201 	bic.w	r2, r3, #1
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3b04      	subs	r3, #4
 8009bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf0 <pxPortInitialiseStack+0x64>)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3b14      	subs	r3, #20
 8009bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3b04      	subs	r3, #4
 8009bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f06f 0202 	mvn.w	r2, #2
 8009bda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3b20      	subs	r3, #32
 8009be0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009be2:	68fb      	ldr	r3, [r7, #12]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	08009bf5 	.word	0x08009bf5

08009bf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bfe:	4b13      	ldr	r3, [pc, #76]	@ (8009c4c <prvTaskExitError+0x58>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c06:	d00b      	beq.n	8009c20 <prvTaskExitError+0x2c>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	60fb      	str	r3, [r7, #12]
}
 8009c1a:	bf00      	nop
 8009c1c:	bf00      	nop
 8009c1e:	e7fd      	b.n	8009c1c <prvTaskExitError+0x28>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	60bb      	str	r3, [r7, #8]
}
 8009c32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c34:	bf00      	nop
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0fc      	beq.n	8009c36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	200000c4 	.word	0x200000c4

08009c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c50:	4b07      	ldr	r3, [pc, #28]	@ (8009c70 <pxCurrentTCBConst2>)
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	6808      	ldr	r0, [r1, #0]
 8009c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	f380 8809 	msr	PSP, r0
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8811 	msr	BASEPRI, r0
 8009c6a:	4770      	bx	lr
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst2>:
 8009c70:	20000af8 	.word	0x20000af8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c78:	4808      	ldr	r0, [pc, #32]	@ (8009c9c <prvPortStartFirstTask+0x24>)
 8009c7a:	6800      	ldr	r0, [r0, #0]
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f380 8808 	msr	MSP, r0
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8814 	msr	CONTROL, r0
 8009c8a:	b662      	cpsie	i
 8009c8c:	b661      	cpsie	f
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	df00      	svc	0
 8009c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c9a:	bf00      	nop
 8009c9c:	e000ed08 	.word	0xe000ed08

08009ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ca6:	4b47      	ldr	r3, [pc, #284]	@ (8009dc4 <xPortStartScheduler+0x124>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a47      	ldr	r2, [pc, #284]	@ (8009dc8 <xPortStartScheduler+0x128>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d10b      	bne.n	8009cc8 <xPortStartScheduler+0x28>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	613b      	str	r3, [r7, #16]
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	e7fd      	b.n	8009cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8009dc4 <xPortStartScheduler+0x124>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8009dcc <xPortStartScheduler+0x12c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d10b      	bne.n	8009cea <xPortStartScheduler+0x4a>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60fb      	str	r3, [r7, #12]
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	e7fd      	b.n	8009ce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cea:	4b39      	ldr	r3, [pc, #228]	@ (8009dd0 <xPortStartScheduler+0x130>)
 8009cec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	22ff      	movs	r2, #255	@ 0xff
 8009cfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	4b31      	ldr	r3, [pc, #196]	@ (8009dd4 <xPortStartScheduler+0x134>)
 8009d10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d12:	4b31      	ldr	r3, [pc, #196]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d14:	2207      	movs	r2, #7
 8009d16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d18:	e009      	b.n	8009d2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d36:	2b80      	cmp	r3, #128	@ 0x80
 8009d38:	d0ef      	beq.n	8009d1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d3a:	4b27      	ldr	r3, [pc, #156]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f1c3 0307 	rsb	r3, r3, #7
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d00b      	beq.n	8009d5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60bb      	str	r3, [r7, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	4a1c      	ldr	r2, [pc, #112]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d68:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d70:	4a19      	ldr	r2, [pc, #100]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d7c:	4b17      	ldr	r3, [pc, #92]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a16      	ldr	r2, [pc, #88]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d88:	4b14      	ldr	r3, [pc, #80]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a13      	ldr	r2, [pc, #76]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d94:	f000 f8da 	bl	8009f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d98:	4b11      	ldr	r3, [pc, #68]	@ (8009de0 <xPortStartScheduler+0x140>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d9e:	f000 f8f9 	bl	8009f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009da2:	4b10      	ldr	r3, [pc, #64]	@ (8009de4 <xPortStartScheduler+0x144>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a0f      	ldr	r2, [pc, #60]	@ (8009de4 <xPortStartScheduler+0x144>)
 8009da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dae:	f7ff ff63 	bl	8009c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009db2:	f7fe fe4b 	bl	8008a4c <vTaskSwitchContext>
	prvTaskExitError();
 8009db6:	f7ff ff1d 	bl	8009bf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	e000ed00 	.word	0xe000ed00
 8009dc8:	410fc271 	.word	0x410fc271
 8009dcc:	410fc270 	.word	0x410fc270
 8009dd0:	e000e400 	.word	0xe000e400
 8009dd4:	20001124 	.word	0x20001124
 8009dd8:	20001128 	.word	0x20001128
 8009ddc:	e000ed20 	.word	0xe000ed20
 8009de0:	200000c4 	.word	0x200000c4
 8009de4:	e000ef34 	.word	0xe000ef34

08009de8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	607b      	str	r3, [r7, #4]
}
 8009e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e02:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <vPortEnterCritical+0x5c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3301      	adds	r3, #1
 8009e08:	4a0e      	ldr	r2, [pc, #56]	@ (8009e44 <vPortEnterCritical+0x5c>)
 8009e0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e44 <vPortEnterCritical+0x5c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d110      	bne.n	8009e36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e14:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <vPortEnterCritical+0x60>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	603b      	str	r3, [r7, #0]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <vPortEnterCritical+0x4a>
	}
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	200000c4 	.word	0x200000c4
 8009e48:	e000ed04 	.word	0xe000ed04

08009e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e52:	4b12      	ldr	r3, [pc, #72]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10b      	bne.n	8009e72 <vPortExitCritical+0x26>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	607b      	str	r3, [r7, #4]
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	e7fd      	b.n	8009e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e72:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4a08      	ldr	r2, [pc, #32]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e7c:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <vPortExitCritical+0x44>
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
}
 8009e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	200000c4 	.word	0x200000c4

08009ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ea0:	f3ef 8009 	mrs	r0, PSP
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4b15      	ldr	r3, [pc, #84]	@ (8009f00 <pxCurrentTCBConst>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	f01e 0f10 	tst.w	lr, #16
 8009eb0:	bf08      	it	eq
 8009eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	6010      	str	r0, [r2, #0]
 8009ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ec4:	f380 8811 	msr	BASEPRI, r0
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f7fe fdbc 	bl	8008a4c <vTaskSwitchContext>
 8009ed4:	f04f 0000 	mov.w	r0, #0
 8009ed8:	f380 8811 	msr	BASEPRI, r0
 8009edc:	bc09      	pop	{r0, r3}
 8009ede:	6819      	ldr	r1, [r3, #0]
 8009ee0:	6808      	ldr	r0, [r1, #0]
 8009ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee6:	f01e 0f10 	tst.w	lr, #16
 8009eea:	bf08      	it	eq
 8009eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ef0:	f380 8809 	msr	PSP, r0
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst>:
 8009f00:	20000af8 	.word	0x20000af8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	607b      	str	r3, [r7, #4]
}
 8009f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f22:	f7fe fcd9 	bl	80088d8 <xTaskIncrementTick>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f2c:	4b06      	ldr	r3, [pc, #24]	@ (8009f48 <xPortSysTickHandler+0x40>)
 8009f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f383 8811 	msr	BASEPRI, r3
}
 8009f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f50:	4b0b      	ldr	r3, [pc, #44]	@ (8009f80 <vPortSetupTimerInterrupt+0x34>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f56:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <vPortSetupTimerInterrupt+0x38>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <vPortSetupTimerInterrupt+0x3c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a0a      	ldr	r2, [pc, #40]	@ (8009f8c <vPortSetupTimerInterrupt+0x40>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	099b      	lsrs	r3, r3, #6
 8009f68:	4a09      	ldr	r2, [pc, #36]	@ (8009f90 <vPortSetupTimerInterrupt+0x44>)
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f6e:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <vPortSetupTimerInterrupt+0x34>)
 8009f70:	2207      	movs	r2, #7
 8009f72:	601a      	str	r2, [r3, #0]
}
 8009f74:	bf00      	nop
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	e000e010 	.word	0xe000e010
 8009f84:	e000e018 	.word	0xe000e018
 8009f88:	200000b0 	.word	0x200000b0
 8009f8c:	10624dd3 	.word	0x10624dd3
 8009f90:	e000e014 	.word	0xe000e014

08009f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fa4 <vPortEnableVFP+0x10>
 8009f98:	6801      	ldr	r1, [r0, #0]
 8009f9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f9e:	6001      	str	r1, [r0, #0]
 8009fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fa2:	bf00      	nop
 8009fa4:	e000ed88 	.word	0xe000ed88

08009fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fae:	f3ef 8305 	mrs	r3, IPSR
 8009fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b0f      	cmp	r3, #15
 8009fb8:	d915      	bls.n	8009fe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fba:	4a18      	ldr	r2, [pc, #96]	@ (800a01c <vPortValidateInterruptPriority+0x74>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fc4:	4b16      	ldr	r3, [pc, #88]	@ (800a020 <vPortValidateInterruptPriority+0x78>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	7afa      	ldrb	r2, [r7, #11]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d20b      	bcs.n	8009fe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	e7fd      	b.n	8009fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <vPortValidateInterruptPriority+0x7c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009fee:	4b0e      	ldr	r3, [pc, #56]	@ (800a028 <vPortValidateInterruptPriority+0x80>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d90b      	bls.n	800a00e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	603b      	str	r3, [r7, #0]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortValidateInterruptPriority+0x62>
	}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	e000e3f0 	.word	0xe000e3f0
 800a020:	20001124 	.word	0x20001124
 800a024:	e000ed0c 	.word	0xe000ed0c
 800a028:	20001128 	.word	0x20001128

0800a02c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08a      	sub	sp, #40	@ 0x28
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a038:	f7fe fb92 	bl	8008760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a03c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1b0 <pvPortMalloc+0x184>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a044:	f000 f924 	bl	800a290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a048:	4b5a      	ldr	r3, [pc, #360]	@ (800a1b4 <pvPortMalloc+0x188>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 8095 	bne.w	800a180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01e      	beq.n	800a09a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a05c:	2208      	movs	r2, #8
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d015      	beq.n	800a09a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f023 0307 	bic.w	r3, r3, #7
 800a074:	3308      	adds	r3, #8
 800a076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <pvPortMalloc+0x6e>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	617b      	str	r3, [r7, #20]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d06f      	beq.n	800a180 <pvPortMalloc+0x154>
 800a0a0:	4b45      	ldr	r3, [pc, #276]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d86a      	bhi.n	800a180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0aa:	4b44      	ldr	r3, [pc, #272]	@ (800a1bc <pvPortMalloc+0x190>)
 800a0ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0ae:	4b43      	ldr	r3, [pc, #268]	@ (800a1bc <pvPortMalloc+0x190>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0b4:	e004      	b.n	800a0c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d903      	bls.n	800a0d2 <pvPortMalloc+0xa6>
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1f1      	bne.n	800a0b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0d2:	4b37      	ldr	r3, [pc, #220]	@ (800a1b0 <pvPortMalloc+0x184>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d051      	beq.n	800a180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	1ad2      	subs	r2, r2, r3
 800a0f6:	2308      	movs	r3, #8
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d920      	bls.n	800a140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4413      	add	r3, r2
 800a104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f003 0307 	and.w	r3, r3, #7
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <pvPortMalloc+0xfc>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	e7fd      	b.n	800a124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a13a:	69b8      	ldr	r0, [r7, #24]
 800a13c:	f000 f90a 	bl	800a354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a140:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a14c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a14e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c0 <pvPortMalloc+0x194>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d203      	bcs.n	800a162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a15a:	4b17      	ldr	r3, [pc, #92]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a18      	ldr	r2, [pc, #96]	@ (800a1c0 <pvPortMalloc+0x194>)
 800a160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	4b13      	ldr	r3, [pc, #76]	@ (800a1b4 <pvPortMalloc+0x188>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	431a      	orrs	r2, r3
 800a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a176:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <pvPortMalloc+0x198>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	4a11      	ldr	r2, [pc, #68]	@ (800a1c4 <pvPortMalloc+0x198>)
 800a17e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a180:	f7fe fafc 	bl	800877c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <pvPortMalloc+0x17a>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	60fb      	str	r3, [r7, #12]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1a6:	69fb      	ldr	r3, [r7, #28]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3728      	adds	r7, #40	@ 0x28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20001cec 	.word	0x20001cec
 800a1b4:	20001d00 	.word	0x20001d00
 800a1b8:	20001cf0 	.word	0x20001cf0
 800a1bc:	20001ce4 	.word	0x20001ce4
 800a1c0:	20001cf4 	.word	0x20001cf4
 800a1c4:	20001cf8 	.word	0x20001cf8

0800a1c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d04f      	beq.n	800a27a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1da:	2308      	movs	r3, #8
 800a1dc:	425b      	negs	r3, r3
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4b25      	ldr	r3, [pc, #148]	@ (800a284 <vPortFree+0xbc>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <vPortFree+0x46>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <vPortFree+0x66>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60bb      	str	r3, [r7, #8]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	4b14      	ldr	r3, [pc, #80]	@ (800a284 <vPortFree+0xbc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01e      	beq.n	800a27a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d11a      	bne.n	800a27a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	4b0e      	ldr	r3, [pc, #56]	@ (800a284 <vPortFree+0xbc>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	43db      	mvns	r3, r3
 800a24e:	401a      	ands	r2, r3
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a254:	f7fe fa84 	bl	8008760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	4b0a      	ldr	r3, [pc, #40]	@ (800a288 <vPortFree+0xc0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4413      	add	r3, r2
 800a262:	4a09      	ldr	r2, [pc, #36]	@ (800a288 <vPortFree+0xc0>)
 800a264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a266:	6938      	ldr	r0, [r7, #16]
 800a268:	f000 f874 	bl	800a354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a26c:	4b07      	ldr	r3, [pc, #28]	@ (800a28c <vPortFree+0xc4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3301      	adds	r3, #1
 800a272:	4a06      	ldr	r2, [pc, #24]	@ (800a28c <vPortFree+0xc4>)
 800a274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a276:	f7fe fa81 	bl	800877c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a27a:	bf00      	nop
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20001d00 	.word	0x20001d00
 800a288:	20001cf0 	.word	0x20001cf0
 800a28c:	20001cfc 	.word	0x20001cfc

0800a290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a296:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a29a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a29c:	4b27      	ldr	r3, [pc, #156]	@ (800a33c <prvHeapInit+0xac>)
 800a29e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00c      	beq.n	800a2c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3307      	adds	r3, #7
 800a2ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	4a1f      	ldr	r2, [pc, #124]	@ (800a33c <prvHeapInit+0xac>)
 800a2c0:	4413      	add	r3, r2
 800a2c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a340 <prvHeapInit+0xb0>)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a340 <prvHeapInit+0xb0>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	4413      	add	r3, r2
 800a2da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2dc:	2208      	movs	r2, #8
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4a15      	ldr	r2, [pc, #84]	@ (800a344 <prvHeapInit+0xb4>)
 800a2f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2f2:	4b14      	ldr	r3, [pc, #80]	@ (800a344 <prvHeapInit+0xb4>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2fa:	4b12      	ldr	r3, [pc, #72]	@ (800a344 <prvHeapInit+0xb4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	1ad2      	subs	r2, r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a310:	4b0c      	ldr	r3, [pc, #48]	@ (800a344 <prvHeapInit+0xb4>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	4a0a      	ldr	r2, [pc, #40]	@ (800a348 <prvHeapInit+0xb8>)
 800a31e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	4a09      	ldr	r2, [pc, #36]	@ (800a34c <prvHeapInit+0xbc>)
 800a326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a328:	4b09      	ldr	r3, [pc, #36]	@ (800a350 <prvHeapInit+0xc0>)
 800a32a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a32e:	601a      	str	r2, [r3, #0]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	2000112c 	.word	0x2000112c
 800a340:	20001ce4 	.word	0x20001ce4
 800a344:	20001cec 	.word	0x20001cec
 800a348:	20001cf4 	.word	0x20001cf4
 800a34c:	20001cf0 	.word	0x20001cf0
 800a350:	20001d00 	.word	0x20001d00

0800a354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a35c:	4b28      	ldr	r3, [pc, #160]	@ (800a400 <prvInsertBlockIntoFreeList+0xac>)
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e002      	b.n	800a368 <prvInsertBlockIntoFreeList+0x14>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d8f7      	bhi.n	800a362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d108      	bne.n	800a396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	441a      	add	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d118      	bne.n	800a3dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	4b15      	ldr	r3, [pc, #84]	@ (800a404 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d00d      	beq.n	800a3d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e008      	b.n	800a3e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a404 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e003      	b.n	800a3e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d002      	beq.n	800a3f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20001ce4 	.word	0x20001ce4
 800a404:	20001cec 	.word	0x20001cec

0800a408 <calloc>:
 800a408:	4b02      	ldr	r3, [pc, #8]	@ (800a414 <calloc+0xc>)
 800a40a:	460a      	mov	r2, r1
 800a40c:	4601      	mov	r1, r0
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	f000 b802 	b.w	800a418 <_calloc_r>
 800a414:	200000d4 	.word	0x200000d4

0800a418 <_calloc_r>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	fba1 5402 	umull	r5, r4, r1, r2
 800a41e:	b93c      	cbnz	r4, 800a430 <_calloc_r+0x18>
 800a420:	4629      	mov	r1, r5
 800a422:	f000 f837 	bl	800a494 <_malloc_r>
 800a426:	4606      	mov	r6, r0
 800a428:	b928      	cbnz	r0, 800a436 <_calloc_r+0x1e>
 800a42a:	2600      	movs	r6, #0
 800a42c:	4630      	mov	r0, r6
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	220c      	movs	r2, #12
 800a432:	6002      	str	r2, [r0, #0]
 800a434:	e7f9      	b.n	800a42a <_calloc_r+0x12>
 800a436:	462a      	mov	r2, r5
 800a438:	4621      	mov	r1, r4
 800a43a:	f000 fa60 	bl	800a8fe <memset>
 800a43e:	e7f5      	b.n	800a42c <_calloc_r+0x14>

0800a440 <malloc>:
 800a440:	4b02      	ldr	r3, [pc, #8]	@ (800a44c <malloc+0xc>)
 800a442:	4601      	mov	r1, r0
 800a444:	6818      	ldr	r0, [r3, #0]
 800a446:	f000 b825 	b.w	800a494 <_malloc_r>
 800a44a:	bf00      	nop
 800a44c:	200000d4 	.word	0x200000d4

0800a450 <sbrk_aligned>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	4e0f      	ldr	r6, [pc, #60]	@ (800a490 <sbrk_aligned+0x40>)
 800a454:	460c      	mov	r4, r1
 800a456:	6831      	ldr	r1, [r6, #0]
 800a458:	4605      	mov	r5, r0
 800a45a:	b911      	cbnz	r1, 800a462 <sbrk_aligned+0x12>
 800a45c:	f000 fae8 	bl	800aa30 <_sbrk_r>
 800a460:	6030      	str	r0, [r6, #0]
 800a462:	4621      	mov	r1, r4
 800a464:	4628      	mov	r0, r5
 800a466:	f000 fae3 	bl	800aa30 <_sbrk_r>
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	d103      	bne.n	800a476 <sbrk_aligned+0x26>
 800a46e:	f04f 34ff 	mov.w	r4, #4294967295
 800a472:	4620      	mov	r0, r4
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	1cc4      	adds	r4, r0, #3
 800a478:	f024 0403 	bic.w	r4, r4, #3
 800a47c:	42a0      	cmp	r0, r4
 800a47e:	d0f8      	beq.n	800a472 <sbrk_aligned+0x22>
 800a480:	1a21      	subs	r1, r4, r0
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fad4 	bl	800aa30 <_sbrk_r>
 800a488:	3001      	adds	r0, #1
 800a48a:	d1f2      	bne.n	800a472 <sbrk_aligned+0x22>
 800a48c:	e7ef      	b.n	800a46e <sbrk_aligned+0x1e>
 800a48e:	bf00      	nop
 800a490:	20001d04 	.word	0x20001d04

0800a494 <_malloc_r>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	1ccd      	adds	r5, r1, #3
 800a49a:	f025 0503 	bic.w	r5, r5, #3
 800a49e:	3508      	adds	r5, #8
 800a4a0:	2d0c      	cmp	r5, #12
 800a4a2:	bf38      	it	cc
 800a4a4:	250c      	movcc	r5, #12
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	db01      	blt.n	800a4b0 <_malloc_r+0x1c>
 800a4ac:	42a9      	cmp	r1, r5
 800a4ae:	d904      	bls.n	800a4ba <_malloc_r+0x26>
 800a4b0:	230c      	movs	r3, #12
 800a4b2:	6033      	str	r3, [r6, #0]
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a590 <_malloc_r+0xfc>
 800a4be:	f000 f869 	bl	800a594 <__malloc_lock>
 800a4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4c6:	461c      	mov	r4, r3
 800a4c8:	bb44      	cbnz	r4, 800a51c <_malloc_r+0x88>
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7ff ffbf 	bl	800a450 <sbrk_aligned>
 800a4d2:	1c43      	adds	r3, r0, #1
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	d158      	bne.n	800a58a <_malloc_r+0xf6>
 800a4d8:	f8d8 4000 	ldr.w	r4, [r8]
 800a4dc:	4627      	mov	r7, r4
 800a4de:	2f00      	cmp	r7, #0
 800a4e0:	d143      	bne.n	800a56a <_malloc_r+0xd6>
 800a4e2:	2c00      	cmp	r4, #0
 800a4e4:	d04b      	beq.n	800a57e <_malloc_r+0xea>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	eb04 0903 	add.w	r9, r4, r3
 800a4f0:	f000 fa9e 	bl	800aa30 <_sbrk_r>
 800a4f4:	4581      	cmp	r9, r0
 800a4f6:	d142      	bne.n	800a57e <_malloc_r+0xea>
 800a4f8:	6821      	ldr	r1, [r4, #0]
 800a4fa:	1a6d      	subs	r5, r5, r1
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ffa6 	bl	800a450 <sbrk_aligned>
 800a504:	3001      	adds	r0, #1
 800a506:	d03a      	beq.n	800a57e <_malloc_r+0xea>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	442b      	add	r3, r5
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	f8d8 3000 	ldr.w	r3, [r8]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	bb62      	cbnz	r2, 800a570 <_malloc_r+0xdc>
 800a516:	f8c8 7000 	str.w	r7, [r8]
 800a51a:	e00f      	b.n	800a53c <_malloc_r+0xa8>
 800a51c:	6822      	ldr	r2, [r4, #0]
 800a51e:	1b52      	subs	r2, r2, r5
 800a520:	d420      	bmi.n	800a564 <_malloc_r+0xd0>
 800a522:	2a0b      	cmp	r2, #11
 800a524:	d917      	bls.n	800a556 <_malloc_r+0xc2>
 800a526:	1961      	adds	r1, r4, r5
 800a528:	42a3      	cmp	r3, r4
 800a52a:	6025      	str	r5, [r4, #0]
 800a52c:	bf18      	it	ne
 800a52e:	6059      	strne	r1, [r3, #4]
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	bf08      	it	eq
 800a534:	f8c8 1000 	streq.w	r1, [r8]
 800a538:	5162      	str	r2, [r4, r5]
 800a53a:	604b      	str	r3, [r1, #4]
 800a53c:	4630      	mov	r0, r6
 800a53e:	f000 f82f 	bl	800a5a0 <__malloc_unlock>
 800a542:	f104 000b 	add.w	r0, r4, #11
 800a546:	1d23      	adds	r3, r4, #4
 800a548:	f020 0007 	bic.w	r0, r0, #7
 800a54c:	1ac2      	subs	r2, r0, r3
 800a54e:	bf1c      	itt	ne
 800a550:	1a1b      	subne	r3, r3, r0
 800a552:	50a3      	strne	r3, [r4, r2]
 800a554:	e7af      	b.n	800a4b6 <_malloc_r+0x22>
 800a556:	6862      	ldr	r2, [r4, #4]
 800a558:	42a3      	cmp	r3, r4
 800a55a:	bf0c      	ite	eq
 800a55c:	f8c8 2000 	streq.w	r2, [r8]
 800a560:	605a      	strne	r2, [r3, #4]
 800a562:	e7eb      	b.n	800a53c <_malloc_r+0xa8>
 800a564:	4623      	mov	r3, r4
 800a566:	6864      	ldr	r4, [r4, #4]
 800a568:	e7ae      	b.n	800a4c8 <_malloc_r+0x34>
 800a56a:	463c      	mov	r4, r7
 800a56c:	687f      	ldr	r7, [r7, #4]
 800a56e:	e7b6      	b.n	800a4de <_malloc_r+0x4a>
 800a570:	461a      	mov	r2, r3
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	42a3      	cmp	r3, r4
 800a576:	d1fb      	bne.n	800a570 <_malloc_r+0xdc>
 800a578:	2300      	movs	r3, #0
 800a57a:	6053      	str	r3, [r2, #4]
 800a57c:	e7de      	b.n	800a53c <_malloc_r+0xa8>
 800a57e:	230c      	movs	r3, #12
 800a580:	6033      	str	r3, [r6, #0]
 800a582:	4630      	mov	r0, r6
 800a584:	f000 f80c 	bl	800a5a0 <__malloc_unlock>
 800a588:	e794      	b.n	800a4b4 <_malloc_r+0x20>
 800a58a:	6005      	str	r5, [r0, #0]
 800a58c:	e7d6      	b.n	800a53c <_malloc_r+0xa8>
 800a58e:	bf00      	nop
 800a590:	20001d08 	.word	0x20001d08

0800a594 <__malloc_lock>:
 800a594:	4801      	ldr	r0, [pc, #4]	@ (800a59c <__malloc_lock+0x8>)
 800a596:	f000 ba98 	b.w	800aaca <__retarget_lock_acquire_recursive>
 800a59a:	bf00      	nop
 800a59c:	20001e4c 	.word	0x20001e4c

0800a5a0 <__malloc_unlock>:
 800a5a0:	4801      	ldr	r0, [pc, #4]	@ (800a5a8 <__malloc_unlock+0x8>)
 800a5a2:	f000 ba93 	b.w	800aacc <__retarget_lock_release_recursive>
 800a5a6:	bf00      	nop
 800a5a8:	20001e4c 	.word	0x20001e4c

0800a5ac <_strtol_l.constprop.0>:
 800a5ac:	2b24      	cmp	r3, #36	@ 0x24
 800a5ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b2:	4686      	mov	lr, r0
 800a5b4:	4690      	mov	r8, r2
 800a5b6:	d801      	bhi.n	800a5bc <_strtol_l.constprop.0+0x10>
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d106      	bne.n	800a5ca <_strtol_l.constprop.0+0x1e>
 800a5bc:	f000 fa5a 	bl	800aa74 <__errno>
 800a5c0:	2316      	movs	r3, #22
 800a5c2:	6003      	str	r3, [r0, #0]
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	4834      	ldr	r0, [pc, #208]	@ (800a69c <_strtol_l.constprop.0+0xf0>)
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5d4:	5d06      	ldrb	r6, [r0, r4]
 800a5d6:	f016 0608 	ands.w	r6, r6, #8
 800a5da:	d1f8      	bne.n	800a5ce <_strtol_l.constprop.0+0x22>
 800a5dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5de:	d12d      	bne.n	800a63c <_strtol_l.constprop.0+0x90>
 800a5e0:	782c      	ldrb	r4, [r5, #0]
 800a5e2:	2601      	movs	r6, #1
 800a5e4:	1c95      	adds	r5, r2, #2
 800a5e6:	f033 0210 	bics.w	r2, r3, #16
 800a5ea:	d109      	bne.n	800a600 <_strtol_l.constprop.0+0x54>
 800a5ec:	2c30      	cmp	r4, #48	@ 0x30
 800a5ee:	d12a      	bne.n	800a646 <_strtol_l.constprop.0+0x9a>
 800a5f0:	782a      	ldrb	r2, [r5, #0]
 800a5f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a5f6:	2a58      	cmp	r2, #88	@ 0x58
 800a5f8:	d125      	bne.n	800a646 <_strtol_l.constprop.0+0x9a>
 800a5fa:	786c      	ldrb	r4, [r5, #1]
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	3502      	adds	r5, #2
 800a600:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a604:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a608:	2200      	movs	r2, #0
 800a60a:	fbbc f9f3 	udiv	r9, ip, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	fb03 ca19 	mls	sl, r3, r9, ip
 800a614:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a618:	2f09      	cmp	r7, #9
 800a61a:	d81b      	bhi.n	800a654 <_strtol_l.constprop.0+0xa8>
 800a61c:	463c      	mov	r4, r7
 800a61e:	42a3      	cmp	r3, r4
 800a620:	dd27      	ble.n	800a672 <_strtol_l.constprop.0+0xc6>
 800a622:	1c57      	adds	r7, r2, #1
 800a624:	d007      	beq.n	800a636 <_strtol_l.constprop.0+0x8a>
 800a626:	4581      	cmp	r9, r0
 800a628:	d320      	bcc.n	800a66c <_strtol_l.constprop.0+0xc0>
 800a62a:	d101      	bne.n	800a630 <_strtol_l.constprop.0+0x84>
 800a62c:	45a2      	cmp	sl, r4
 800a62e:	db1d      	blt.n	800a66c <_strtol_l.constprop.0+0xc0>
 800a630:	fb00 4003 	mla	r0, r0, r3, r4
 800a634:	2201      	movs	r2, #1
 800a636:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a63a:	e7eb      	b.n	800a614 <_strtol_l.constprop.0+0x68>
 800a63c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a63e:	bf04      	itt	eq
 800a640:	782c      	ldrbeq	r4, [r5, #0]
 800a642:	1c95      	addeq	r5, r2, #2
 800a644:	e7cf      	b.n	800a5e6 <_strtol_l.constprop.0+0x3a>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1da      	bne.n	800a600 <_strtol_l.constprop.0+0x54>
 800a64a:	2c30      	cmp	r4, #48	@ 0x30
 800a64c:	bf0c      	ite	eq
 800a64e:	2308      	moveq	r3, #8
 800a650:	230a      	movne	r3, #10
 800a652:	e7d5      	b.n	800a600 <_strtol_l.constprop.0+0x54>
 800a654:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a658:	2f19      	cmp	r7, #25
 800a65a:	d801      	bhi.n	800a660 <_strtol_l.constprop.0+0xb4>
 800a65c:	3c37      	subs	r4, #55	@ 0x37
 800a65e:	e7de      	b.n	800a61e <_strtol_l.constprop.0+0x72>
 800a660:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a664:	2f19      	cmp	r7, #25
 800a666:	d804      	bhi.n	800a672 <_strtol_l.constprop.0+0xc6>
 800a668:	3c57      	subs	r4, #87	@ 0x57
 800a66a:	e7d8      	b.n	800a61e <_strtol_l.constprop.0+0x72>
 800a66c:	f04f 32ff 	mov.w	r2, #4294967295
 800a670:	e7e1      	b.n	800a636 <_strtol_l.constprop.0+0x8a>
 800a672:	1c53      	adds	r3, r2, #1
 800a674:	d108      	bne.n	800a688 <_strtol_l.constprop.0+0xdc>
 800a676:	2322      	movs	r3, #34	@ 0x22
 800a678:	f8ce 3000 	str.w	r3, [lr]
 800a67c:	4660      	mov	r0, ip
 800a67e:	f1b8 0f00 	cmp.w	r8, #0
 800a682:	d0a0      	beq.n	800a5c6 <_strtol_l.constprop.0+0x1a>
 800a684:	1e69      	subs	r1, r5, #1
 800a686:	e006      	b.n	800a696 <_strtol_l.constprop.0+0xea>
 800a688:	b106      	cbz	r6, 800a68c <_strtol_l.constprop.0+0xe0>
 800a68a:	4240      	negs	r0, r0
 800a68c:	f1b8 0f00 	cmp.w	r8, #0
 800a690:	d099      	beq.n	800a5c6 <_strtol_l.constprop.0+0x1a>
 800a692:	2a00      	cmp	r2, #0
 800a694:	d1f6      	bne.n	800a684 <_strtol_l.constprop.0+0xd8>
 800a696:	f8c8 1000 	str.w	r1, [r8]
 800a69a:	e794      	b.n	800a5c6 <_strtol_l.constprop.0+0x1a>
 800a69c:	0800bb5d 	.word	0x0800bb5d

0800a6a0 <strtol>:
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	460a      	mov	r2, r1
 800a6a4:	4601      	mov	r1, r0
 800a6a6:	4802      	ldr	r0, [pc, #8]	@ (800a6b0 <strtol+0x10>)
 800a6a8:	6800      	ldr	r0, [r0, #0]
 800a6aa:	f7ff bf7f 	b.w	800a5ac <_strtol_l.constprop.0>
 800a6ae:	bf00      	nop
 800a6b0:	200000d4 	.word	0x200000d4

0800a6b4 <std>:
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6c2:	6083      	str	r3, [r0, #8]
 800a6c4:	8181      	strh	r1, [r0, #12]
 800a6c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6c8:	81c2      	strh	r2, [r0, #14]
 800a6ca:	6183      	str	r3, [r0, #24]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	2208      	movs	r2, #8
 800a6d0:	305c      	adds	r0, #92	@ 0x5c
 800a6d2:	f000 f914 	bl	800a8fe <memset>
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a70c <std+0x58>)
 800a6d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6da:	4b0d      	ldr	r3, [pc, #52]	@ (800a710 <std+0x5c>)
 800a6dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6de:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <std+0x60>)
 800a6e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <std+0x64>)
 800a6e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <std+0x68>)
 800a6e8:	6224      	str	r4, [r4, #32]
 800a6ea:	429c      	cmp	r4, r3
 800a6ec:	d006      	beq.n	800a6fc <std+0x48>
 800a6ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6f2:	4294      	cmp	r4, r2
 800a6f4:	d002      	beq.n	800a6fc <std+0x48>
 800a6f6:	33d0      	adds	r3, #208	@ 0xd0
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d105      	bne.n	800a708 <std+0x54>
 800a6fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a704:	f000 b9e0 	b.w	800aac8 <__retarget_lock_init_recursive>
 800a708:	bd10      	pop	{r4, pc}
 800a70a:	bf00      	nop
 800a70c:	0800a879 	.word	0x0800a879
 800a710:	0800a89b 	.word	0x0800a89b
 800a714:	0800a8d3 	.word	0x0800a8d3
 800a718:	0800a8f7 	.word	0x0800a8f7
 800a71c:	20001d0c 	.word	0x20001d0c

0800a720 <stdio_exit_handler>:
 800a720:	4a02      	ldr	r2, [pc, #8]	@ (800a72c <stdio_exit_handler+0xc>)
 800a722:	4903      	ldr	r1, [pc, #12]	@ (800a730 <stdio_exit_handler+0x10>)
 800a724:	4803      	ldr	r0, [pc, #12]	@ (800a734 <stdio_exit_handler+0x14>)
 800a726:	f000 b869 	b.w	800a7fc <_fwalk_sglue>
 800a72a:	bf00      	nop
 800a72c:	200000c8 	.word	0x200000c8
 800a730:	0800b291 	.word	0x0800b291
 800a734:	200000d8 	.word	0x200000d8

0800a738 <cleanup_stdio>:
 800a738:	6841      	ldr	r1, [r0, #4]
 800a73a:	4b0c      	ldr	r3, [pc, #48]	@ (800a76c <cleanup_stdio+0x34>)
 800a73c:	4299      	cmp	r1, r3
 800a73e:	b510      	push	{r4, lr}
 800a740:	4604      	mov	r4, r0
 800a742:	d001      	beq.n	800a748 <cleanup_stdio+0x10>
 800a744:	f000 fda4 	bl	800b290 <_fflush_r>
 800a748:	68a1      	ldr	r1, [r4, #8]
 800a74a:	4b09      	ldr	r3, [pc, #36]	@ (800a770 <cleanup_stdio+0x38>)
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d002      	beq.n	800a756 <cleanup_stdio+0x1e>
 800a750:	4620      	mov	r0, r4
 800a752:	f000 fd9d 	bl	800b290 <_fflush_r>
 800a756:	68e1      	ldr	r1, [r4, #12]
 800a758:	4b06      	ldr	r3, [pc, #24]	@ (800a774 <cleanup_stdio+0x3c>)
 800a75a:	4299      	cmp	r1, r3
 800a75c:	d004      	beq.n	800a768 <cleanup_stdio+0x30>
 800a75e:	4620      	mov	r0, r4
 800a760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a764:	f000 bd94 	b.w	800b290 <_fflush_r>
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	bf00      	nop
 800a76c:	20001d0c 	.word	0x20001d0c
 800a770:	20001d74 	.word	0x20001d74
 800a774:	20001ddc 	.word	0x20001ddc

0800a778 <global_stdio_init.part.0>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a8 <global_stdio_init.part.0+0x30>)
 800a77c:	4c0b      	ldr	r4, [pc, #44]	@ (800a7ac <global_stdio_init.part.0+0x34>)
 800a77e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7b0 <global_stdio_init.part.0+0x38>)
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	4620      	mov	r0, r4
 800a784:	2200      	movs	r2, #0
 800a786:	2104      	movs	r1, #4
 800a788:	f7ff ff94 	bl	800a6b4 <std>
 800a78c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a790:	2201      	movs	r2, #1
 800a792:	2109      	movs	r1, #9
 800a794:	f7ff ff8e 	bl	800a6b4 <std>
 800a798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a79c:	2202      	movs	r2, #2
 800a79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a2:	2112      	movs	r1, #18
 800a7a4:	f7ff bf86 	b.w	800a6b4 <std>
 800a7a8:	20001e44 	.word	0x20001e44
 800a7ac:	20001d0c 	.word	0x20001d0c
 800a7b0:	0800a721 	.word	0x0800a721

0800a7b4 <__sfp_lock_acquire>:
 800a7b4:	4801      	ldr	r0, [pc, #4]	@ (800a7bc <__sfp_lock_acquire+0x8>)
 800a7b6:	f000 b988 	b.w	800aaca <__retarget_lock_acquire_recursive>
 800a7ba:	bf00      	nop
 800a7bc:	20001e4d 	.word	0x20001e4d

0800a7c0 <__sfp_lock_release>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	@ (800a7c8 <__sfp_lock_release+0x8>)
 800a7c2:	f000 b983 	b.w	800aacc <__retarget_lock_release_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20001e4d 	.word	0x20001e4d

0800a7cc <__sinit>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	f7ff fff0 	bl	800a7b4 <__sfp_lock_acquire>
 800a7d4:	6a23      	ldr	r3, [r4, #32]
 800a7d6:	b11b      	cbz	r3, 800a7e0 <__sinit+0x14>
 800a7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7dc:	f7ff bff0 	b.w	800a7c0 <__sfp_lock_release>
 800a7e0:	4b04      	ldr	r3, [pc, #16]	@ (800a7f4 <__sinit+0x28>)
 800a7e2:	6223      	str	r3, [r4, #32]
 800a7e4:	4b04      	ldr	r3, [pc, #16]	@ (800a7f8 <__sinit+0x2c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f5      	bne.n	800a7d8 <__sinit+0xc>
 800a7ec:	f7ff ffc4 	bl	800a778 <global_stdio_init.part.0>
 800a7f0:	e7f2      	b.n	800a7d8 <__sinit+0xc>
 800a7f2:	bf00      	nop
 800a7f4:	0800a739 	.word	0x0800a739
 800a7f8:	20001e44 	.word	0x20001e44

0800a7fc <_fwalk_sglue>:
 800a7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a800:	4607      	mov	r7, r0
 800a802:	4688      	mov	r8, r1
 800a804:	4614      	mov	r4, r2
 800a806:	2600      	movs	r6, #0
 800a808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a80c:	f1b9 0901 	subs.w	r9, r9, #1
 800a810:	d505      	bpl.n	800a81e <_fwalk_sglue+0x22>
 800a812:	6824      	ldr	r4, [r4, #0]
 800a814:	2c00      	cmp	r4, #0
 800a816:	d1f7      	bne.n	800a808 <_fwalk_sglue+0xc>
 800a818:	4630      	mov	r0, r6
 800a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d907      	bls.n	800a834 <_fwalk_sglue+0x38>
 800a824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a828:	3301      	adds	r3, #1
 800a82a:	d003      	beq.n	800a834 <_fwalk_sglue+0x38>
 800a82c:	4629      	mov	r1, r5
 800a82e:	4638      	mov	r0, r7
 800a830:	47c0      	blx	r8
 800a832:	4306      	orrs	r6, r0
 800a834:	3568      	adds	r5, #104	@ 0x68
 800a836:	e7e9      	b.n	800a80c <_fwalk_sglue+0x10>

0800a838 <siprintf>:
 800a838:	b40e      	push	{r1, r2, r3}
 800a83a:	b500      	push	{lr}
 800a83c:	b09c      	sub	sp, #112	@ 0x70
 800a83e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a840:	9002      	str	r0, [sp, #8]
 800a842:	9006      	str	r0, [sp, #24]
 800a844:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a848:	4809      	ldr	r0, [pc, #36]	@ (800a870 <siprintf+0x38>)
 800a84a:	9107      	str	r1, [sp, #28]
 800a84c:	9104      	str	r1, [sp, #16]
 800a84e:	4909      	ldr	r1, [pc, #36]	@ (800a874 <siprintf+0x3c>)
 800a850:	f853 2b04 	ldr.w	r2, [r3], #4
 800a854:	9105      	str	r1, [sp, #20]
 800a856:	6800      	ldr	r0, [r0, #0]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	a902      	add	r1, sp, #8
 800a85c:	f000 fa0a 	bl	800ac74 <_svfiprintf_r>
 800a860:	9b02      	ldr	r3, [sp, #8]
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	b01c      	add	sp, #112	@ 0x70
 800a868:	f85d eb04 	ldr.w	lr, [sp], #4
 800a86c:	b003      	add	sp, #12
 800a86e:	4770      	bx	lr
 800a870:	200000d4 	.word	0x200000d4
 800a874:	ffff0208 	.word	0xffff0208

0800a878 <__sread>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a880:	f000 f8c4 	bl	800aa0c <_read_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	bfab      	itete	ge
 800a888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a88a:	89a3      	ldrhlt	r3, [r4, #12]
 800a88c:	181b      	addge	r3, r3, r0
 800a88e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a892:	bfac      	ite	ge
 800a894:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a896:	81a3      	strhlt	r3, [r4, #12]
 800a898:	bd10      	pop	{r4, pc}

0800a89a <__swrite>:
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	461f      	mov	r7, r3
 800a8a0:	898b      	ldrh	r3, [r1, #12]
 800a8a2:	05db      	lsls	r3, r3, #23
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	d505      	bpl.n	800a8b8 <__swrite+0x1e>
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f000 f898 	bl	800a9e8 <_lseek_r>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	f000 b8bf 	b.w	800aa50 <_write_r>

0800a8d2 <__sseek>:
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8da:	f000 f885 	bl	800a9e8 <_lseek_r>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	bf15      	itete	ne
 800a8e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8ee:	81a3      	strheq	r3, [r4, #12]
 800a8f0:	bf18      	it	ne
 800a8f2:	81a3      	strhne	r3, [r4, #12]
 800a8f4:	bd10      	pop	{r4, pc}

0800a8f6 <__sclose>:
 800a8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fa:	f000 b865 	b.w	800a9c8 <_close_r>

0800a8fe <memset>:
 800a8fe:	4402      	add	r2, r0
 800a900:	4603      	mov	r3, r0
 800a902:	4293      	cmp	r3, r2
 800a904:	d100      	bne.n	800a908 <memset+0xa>
 800a906:	4770      	bx	lr
 800a908:	f803 1b01 	strb.w	r1, [r3], #1
 800a90c:	e7f9      	b.n	800a902 <memset+0x4>
	...

0800a910 <strtok>:
 800a910:	4b16      	ldr	r3, [pc, #88]	@ (800a96c <strtok+0x5c>)
 800a912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a916:	681f      	ldr	r7, [r3, #0]
 800a918:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a91a:	4605      	mov	r5, r0
 800a91c:	460e      	mov	r6, r1
 800a91e:	b9ec      	cbnz	r4, 800a95c <strtok+0x4c>
 800a920:	2050      	movs	r0, #80	@ 0x50
 800a922:	f7ff fd8d 	bl	800a440 <malloc>
 800a926:	4602      	mov	r2, r0
 800a928:	6478      	str	r0, [r7, #68]	@ 0x44
 800a92a:	b920      	cbnz	r0, 800a936 <strtok+0x26>
 800a92c:	4b10      	ldr	r3, [pc, #64]	@ (800a970 <strtok+0x60>)
 800a92e:	4811      	ldr	r0, [pc, #68]	@ (800a974 <strtok+0x64>)
 800a930:	215b      	movs	r1, #91	@ 0x5b
 800a932:	f000 f8db 	bl	800aaec <__assert_func>
 800a936:	e9c0 4400 	strd	r4, r4, [r0]
 800a93a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a93e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a942:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a946:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a94a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a94e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a952:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a956:	6184      	str	r4, [r0, #24]
 800a958:	7704      	strb	r4, [r0, #28]
 800a95a:	6244      	str	r4, [r0, #36]	@ 0x24
 800a95c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	2301      	movs	r3, #1
 800a964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a968:	f000 b806 	b.w	800a978 <__strtok_r>
 800a96c:	200000d4 	.word	0x200000d4
 800a970:	0800bc5d 	.word	0x0800bc5d
 800a974:	0800bc74 	.word	0x0800bc74

0800a978 <__strtok_r>:
 800a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97a:	4604      	mov	r4, r0
 800a97c:	b908      	cbnz	r0, 800a982 <__strtok_r+0xa>
 800a97e:	6814      	ldr	r4, [r2, #0]
 800a980:	b144      	cbz	r4, 800a994 <__strtok_r+0x1c>
 800a982:	4620      	mov	r0, r4
 800a984:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a988:	460f      	mov	r7, r1
 800a98a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a98e:	b91e      	cbnz	r6, 800a998 <__strtok_r+0x20>
 800a990:	b965      	cbnz	r5, 800a9ac <__strtok_r+0x34>
 800a992:	6015      	str	r5, [r2, #0]
 800a994:	2000      	movs	r0, #0
 800a996:	e005      	b.n	800a9a4 <__strtok_r+0x2c>
 800a998:	42b5      	cmp	r5, r6
 800a99a:	d1f6      	bne.n	800a98a <__strtok_r+0x12>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1f0      	bne.n	800a982 <__strtok_r+0xa>
 800a9a0:	6014      	str	r4, [r2, #0]
 800a9a2:	7003      	strb	r3, [r0, #0]
 800a9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a6:	461c      	mov	r4, r3
 800a9a8:	e00c      	b.n	800a9c4 <__strtok_r+0x4c>
 800a9aa:	b915      	cbnz	r5, 800a9b2 <__strtok_r+0x3a>
 800a9ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9b0:	460e      	mov	r6, r1
 800a9b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a9b6:	42ab      	cmp	r3, r5
 800a9b8:	d1f7      	bne.n	800a9aa <__strtok_r+0x32>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0f3      	beq.n	800a9a6 <__strtok_r+0x2e>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a9c4:	6014      	str	r4, [r2, #0]
 800a9c6:	e7ed      	b.n	800a9a4 <__strtok_r+0x2c>

0800a9c8 <_close_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d06      	ldr	r5, [pc, #24]	@ (800a9e4 <_close_r+0x1c>)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	602b      	str	r3, [r5, #0]
 800a9d4:	f7f6 fd66 	bl	80014a4 <_close>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_close_r+0x1a>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_close_r+0x1a>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	20001e48 	.word	0x20001e48

0800a9e8 <_lseek_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d07      	ldr	r5, [pc, #28]	@ (800aa08 <_lseek_r+0x20>)
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	4608      	mov	r0, r1
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	602a      	str	r2, [r5, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f7f6 fd7b 	bl	80014f2 <_lseek>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_lseek_r+0x1e>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_lseek_r+0x1e>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20001e48 	.word	0x20001e48

0800aa0c <_read_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d07      	ldr	r5, [pc, #28]	@ (800aa2c <_read_r+0x20>)
 800aa10:	4604      	mov	r4, r0
 800aa12:	4608      	mov	r0, r1
 800aa14:	4611      	mov	r1, r2
 800aa16:	2200      	movs	r2, #0
 800aa18:	602a      	str	r2, [r5, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f7f6 fd09 	bl	8001432 <_read>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_read_r+0x1e>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_read_r+0x1e>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20001e48 	.word	0x20001e48

0800aa30 <_sbrk_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d06      	ldr	r5, [pc, #24]	@ (800aa4c <_sbrk_r+0x1c>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f6 fd66 	bl	800150c <_sbrk>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_sbrk_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_sbrk_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20001e48 	.word	0x20001e48

0800aa50 <_write_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d07      	ldr	r5, [pc, #28]	@ (800aa70 <_write_r+0x20>)
 800aa54:	4604      	mov	r4, r0
 800aa56:	4608      	mov	r0, r1
 800aa58:	4611      	mov	r1, r2
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	602a      	str	r2, [r5, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f7f6 fd04 	bl	800146c <_write>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_write_r+0x1e>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_write_r+0x1e>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	20001e48 	.word	0x20001e48

0800aa74 <__errno>:
 800aa74:	4b01      	ldr	r3, [pc, #4]	@ (800aa7c <__errno+0x8>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	200000d4 	.word	0x200000d4

0800aa80 <__libc_init_array>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4d0d      	ldr	r5, [pc, #52]	@ (800aab8 <__libc_init_array+0x38>)
 800aa84:	4c0d      	ldr	r4, [pc, #52]	@ (800aabc <__libc_init_array+0x3c>)
 800aa86:	1b64      	subs	r4, r4, r5
 800aa88:	10a4      	asrs	r4, r4, #2
 800aa8a:	2600      	movs	r6, #0
 800aa8c:	42a6      	cmp	r6, r4
 800aa8e:	d109      	bne.n	800aaa4 <__libc_init_array+0x24>
 800aa90:	4d0b      	ldr	r5, [pc, #44]	@ (800aac0 <__libc_init_array+0x40>)
 800aa92:	4c0c      	ldr	r4, [pc, #48]	@ (800aac4 <__libc_init_array+0x44>)
 800aa94:	f000 ff2a 	bl	800b8ec <_init>
 800aa98:	1b64      	subs	r4, r4, r5
 800aa9a:	10a4      	asrs	r4, r4, #2
 800aa9c:	2600      	movs	r6, #0
 800aa9e:	42a6      	cmp	r6, r4
 800aaa0:	d105      	bne.n	800aaae <__libc_init_array+0x2e>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa8:	4798      	blx	r3
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7ee      	b.n	800aa8c <__libc_init_array+0xc>
 800aaae:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab2:	4798      	blx	r3
 800aab4:	3601      	adds	r6, #1
 800aab6:	e7f2      	b.n	800aa9e <__libc_init_array+0x1e>
 800aab8:	0800bd48 	.word	0x0800bd48
 800aabc:	0800bd48 	.word	0x0800bd48
 800aac0:	0800bd48 	.word	0x0800bd48
 800aac4:	0800bd4c 	.word	0x0800bd4c

0800aac8 <__retarget_lock_init_recursive>:
 800aac8:	4770      	bx	lr

0800aaca <__retarget_lock_acquire_recursive>:
 800aaca:	4770      	bx	lr

0800aacc <__retarget_lock_release_recursive>:
 800aacc:	4770      	bx	lr

0800aace <memcpy>:
 800aace:	440a      	add	r2, r1
 800aad0:	4291      	cmp	r1, r2
 800aad2:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad6:	d100      	bne.n	800aada <memcpy+0xc>
 800aad8:	4770      	bx	lr
 800aada:	b510      	push	{r4, lr}
 800aadc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae4:	4291      	cmp	r1, r2
 800aae6:	d1f9      	bne.n	800aadc <memcpy+0xe>
 800aae8:	bd10      	pop	{r4, pc}
	...

0800aaec <__assert_func>:
 800aaec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaee:	4614      	mov	r4, r2
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4b09      	ldr	r3, [pc, #36]	@ (800ab18 <__assert_func+0x2c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	68d8      	ldr	r0, [r3, #12]
 800aafa:	b954      	cbnz	r4, 800ab12 <__assert_func+0x26>
 800aafc:	4b07      	ldr	r3, [pc, #28]	@ (800ab1c <__assert_func+0x30>)
 800aafe:	461c      	mov	r4, r3
 800ab00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab04:	9100      	str	r1, [sp, #0]
 800ab06:	462b      	mov	r3, r5
 800ab08:	4905      	ldr	r1, [pc, #20]	@ (800ab20 <__assert_func+0x34>)
 800ab0a:	f000 fbe9 	bl	800b2e0 <fiprintf>
 800ab0e:	f000 fc13 	bl	800b338 <abort>
 800ab12:	4b04      	ldr	r3, [pc, #16]	@ (800ab24 <__assert_func+0x38>)
 800ab14:	e7f4      	b.n	800ab00 <__assert_func+0x14>
 800ab16:	bf00      	nop
 800ab18:	200000d4 	.word	0x200000d4
 800ab1c:	0800bd09 	.word	0x0800bd09
 800ab20:	0800bcdb 	.word	0x0800bcdb
 800ab24:	0800bcce 	.word	0x0800bcce

0800ab28 <_free_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d041      	beq.n	800abb4 <_free_r+0x8c>
 800ab30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab34:	1f0c      	subs	r4, r1, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfb8      	it	lt
 800ab3a:	18e4      	addlt	r4, r4, r3
 800ab3c:	f7ff fd2a 	bl	800a594 <__malloc_lock>
 800ab40:	4a1d      	ldr	r2, [pc, #116]	@ (800abb8 <_free_r+0x90>)
 800ab42:	6813      	ldr	r3, [r2, #0]
 800ab44:	b933      	cbnz	r3, 800ab54 <_free_r+0x2c>
 800ab46:	6063      	str	r3, [r4, #4]
 800ab48:	6014      	str	r4, [r2, #0]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab50:	f7ff bd26 	b.w	800a5a0 <__malloc_unlock>
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d908      	bls.n	800ab6a <_free_r+0x42>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	1821      	adds	r1, r4, r0
 800ab5c:	428b      	cmp	r3, r1
 800ab5e:	bf01      	itttt	eq
 800ab60:	6819      	ldreq	r1, [r3, #0]
 800ab62:	685b      	ldreq	r3, [r3, #4]
 800ab64:	1809      	addeq	r1, r1, r0
 800ab66:	6021      	streq	r1, [r4, #0]
 800ab68:	e7ed      	b.n	800ab46 <_free_r+0x1e>
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	b10b      	cbz	r3, 800ab74 <_free_r+0x4c>
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d9fa      	bls.n	800ab6a <_free_r+0x42>
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	1850      	adds	r0, r2, r1
 800ab78:	42a0      	cmp	r0, r4
 800ab7a:	d10b      	bne.n	800ab94 <_free_r+0x6c>
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	4401      	add	r1, r0
 800ab80:	1850      	adds	r0, r2, r1
 800ab82:	4283      	cmp	r3, r0
 800ab84:	6011      	str	r1, [r2, #0]
 800ab86:	d1e0      	bne.n	800ab4a <_free_r+0x22>
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	6053      	str	r3, [r2, #4]
 800ab8e:	4408      	add	r0, r1
 800ab90:	6010      	str	r0, [r2, #0]
 800ab92:	e7da      	b.n	800ab4a <_free_r+0x22>
 800ab94:	d902      	bls.n	800ab9c <_free_r+0x74>
 800ab96:	230c      	movs	r3, #12
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	e7d6      	b.n	800ab4a <_free_r+0x22>
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	1821      	adds	r1, r4, r0
 800aba0:	428b      	cmp	r3, r1
 800aba2:	bf04      	itt	eq
 800aba4:	6819      	ldreq	r1, [r3, #0]
 800aba6:	685b      	ldreq	r3, [r3, #4]
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	bf04      	itt	eq
 800abac:	1809      	addeq	r1, r1, r0
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	6054      	str	r4, [r2, #4]
 800abb2:	e7ca      	b.n	800ab4a <_free_r+0x22>
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	20001d08 	.word	0x20001d08

0800abbc <__ssputs_r>:
 800abbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	688e      	ldr	r6, [r1, #8]
 800abc2:	461f      	mov	r7, r3
 800abc4:	42be      	cmp	r6, r7
 800abc6:	680b      	ldr	r3, [r1, #0]
 800abc8:	4682      	mov	sl, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	4690      	mov	r8, r2
 800abce:	d82d      	bhi.n	800ac2c <__ssputs_r+0x70>
 800abd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abd8:	d026      	beq.n	800ac28 <__ssputs_r+0x6c>
 800abda:	6965      	ldr	r5, [r4, #20]
 800abdc:	6909      	ldr	r1, [r1, #16]
 800abde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abe2:	eba3 0901 	sub.w	r9, r3, r1
 800abe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abea:	1c7b      	adds	r3, r7, #1
 800abec:	444b      	add	r3, r9
 800abee:	106d      	asrs	r5, r5, #1
 800abf0:	429d      	cmp	r5, r3
 800abf2:	bf38      	it	cc
 800abf4:	461d      	movcc	r5, r3
 800abf6:	0553      	lsls	r3, r2, #21
 800abf8:	d527      	bpl.n	800ac4a <__ssputs_r+0x8e>
 800abfa:	4629      	mov	r1, r5
 800abfc:	f7ff fc4a 	bl	800a494 <_malloc_r>
 800ac00:	4606      	mov	r6, r0
 800ac02:	b360      	cbz	r0, 800ac5e <__ssputs_r+0xa2>
 800ac04:	6921      	ldr	r1, [r4, #16]
 800ac06:	464a      	mov	r2, r9
 800ac08:	f7ff ff61 	bl	800aace <memcpy>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	6126      	str	r6, [r4, #16]
 800ac1a:	6165      	str	r5, [r4, #20]
 800ac1c:	444e      	add	r6, r9
 800ac1e:	eba5 0509 	sub.w	r5, r5, r9
 800ac22:	6026      	str	r6, [r4, #0]
 800ac24:	60a5      	str	r5, [r4, #8]
 800ac26:	463e      	mov	r6, r7
 800ac28:	42be      	cmp	r6, r7
 800ac2a:	d900      	bls.n	800ac2e <__ssputs_r+0x72>
 800ac2c:	463e      	mov	r6, r7
 800ac2e:	6820      	ldr	r0, [r4, #0]
 800ac30:	4632      	mov	r2, r6
 800ac32:	4641      	mov	r1, r8
 800ac34:	f000 fb66 	bl	800b304 <memmove>
 800ac38:	68a3      	ldr	r3, [r4, #8]
 800ac3a:	1b9b      	subs	r3, r3, r6
 800ac3c:	60a3      	str	r3, [r4, #8]
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	4433      	add	r3, r6
 800ac42:	6023      	str	r3, [r4, #0]
 800ac44:	2000      	movs	r0, #0
 800ac46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4a:	462a      	mov	r2, r5
 800ac4c:	f000 fb7b 	bl	800b346 <_realloc_r>
 800ac50:	4606      	mov	r6, r0
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d1e0      	bne.n	800ac18 <__ssputs_r+0x5c>
 800ac56:	6921      	ldr	r1, [r4, #16]
 800ac58:	4650      	mov	r0, sl
 800ac5a:	f7ff ff65 	bl	800ab28 <_free_r>
 800ac5e:	230c      	movs	r3, #12
 800ac60:	f8ca 3000 	str.w	r3, [sl]
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	e7e9      	b.n	800ac46 <__ssputs_r+0x8a>
	...

0800ac74 <_svfiprintf_r>:
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	4698      	mov	r8, r3
 800ac7a:	898b      	ldrh	r3, [r1, #12]
 800ac7c:	061b      	lsls	r3, r3, #24
 800ac7e:	b09d      	sub	sp, #116	@ 0x74
 800ac80:	4607      	mov	r7, r0
 800ac82:	460d      	mov	r5, r1
 800ac84:	4614      	mov	r4, r2
 800ac86:	d510      	bpl.n	800acaa <_svfiprintf_r+0x36>
 800ac88:	690b      	ldr	r3, [r1, #16]
 800ac8a:	b973      	cbnz	r3, 800acaa <_svfiprintf_r+0x36>
 800ac8c:	2140      	movs	r1, #64	@ 0x40
 800ac8e:	f7ff fc01 	bl	800a494 <_malloc_r>
 800ac92:	6028      	str	r0, [r5, #0]
 800ac94:	6128      	str	r0, [r5, #16]
 800ac96:	b930      	cbnz	r0, 800aca6 <_svfiprintf_r+0x32>
 800ac98:	230c      	movs	r3, #12
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	b01d      	add	sp, #116	@ 0x74
 800aca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca6:	2340      	movs	r3, #64	@ 0x40
 800aca8:	616b      	str	r3, [r5, #20]
 800acaa:	2300      	movs	r3, #0
 800acac:	9309      	str	r3, [sp, #36]	@ 0x24
 800acae:	2320      	movs	r3, #32
 800acb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb8:	2330      	movs	r3, #48	@ 0x30
 800acba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae58 <_svfiprintf_r+0x1e4>
 800acbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acc2:	f04f 0901 	mov.w	r9, #1
 800acc6:	4623      	mov	r3, r4
 800acc8:	469a      	mov	sl, r3
 800acca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acce:	b10a      	cbz	r2, 800acd4 <_svfiprintf_r+0x60>
 800acd0:	2a25      	cmp	r2, #37	@ 0x25
 800acd2:	d1f9      	bne.n	800acc8 <_svfiprintf_r+0x54>
 800acd4:	ebba 0b04 	subs.w	fp, sl, r4
 800acd8:	d00b      	beq.n	800acf2 <_svfiprintf_r+0x7e>
 800acda:	465b      	mov	r3, fp
 800acdc:	4622      	mov	r2, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ff6b 	bl	800abbc <__ssputs_r>
 800ace6:	3001      	adds	r0, #1
 800ace8:	f000 80a7 	beq.w	800ae3a <_svfiprintf_r+0x1c6>
 800acec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acee:	445a      	add	r2, fp
 800acf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800acf2:	f89a 3000 	ldrb.w	r3, [sl]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 809f 	beq.w	800ae3a <_svfiprintf_r+0x1c6>
 800acfc:	2300      	movs	r3, #0
 800acfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ad02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad06:	f10a 0a01 	add.w	sl, sl, #1
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	9307      	str	r3, [sp, #28]
 800ad0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad12:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad14:	4654      	mov	r4, sl
 800ad16:	2205      	movs	r2, #5
 800ad18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1c:	484e      	ldr	r0, [pc, #312]	@ (800ae58 <_svfiprintf_r+0x1e4>)
 800ad1e:	f7f5 fa6f 	bl	8000200 <memchr>
 800ad22:	9a04      	ldr	r2, [sp, #16]
 800ad24:	b9d8      	cbnz	r0, 800ad5e <_svfiprintf_r+0xea>
 800ad26:	06d0      	lsls	r0, r2, #27
 800ad28:	bf44      	itt	mi
 800ad2a:	2320      	movmi	r3, #32
 800ad2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad30:	0711      	lsls	r1, r2, #28
 800ad32:	bf44      	itt	mi
 800ad34:	232b      	movmi	r3, #43	@ 0x2b
 800ad36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad40:	d015      	beq.n	800ad6e <_svfiprintf_r+0xfa>
 800ad42:	9a07      	ldr	r2, [sp, #28]
 800ad44:	4654      	mov	r4, sl
 800ad46:	2000      	movs	r0, #0
 800ad48:	f04f 0c0a 	mov.w	ip, #10
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad52:	3b30      	subs	r3, #48	@ 0x30
 800ad54:	2b09      	cmp	r3, #9
 800ad56:	d94b      	bls.n	800adf0 <_svfiprintf_r+0x17c>
 800ad58:	b1b0      	cbz	r0, 800ad88 <_svfiprintf_r+0x114>
 800ad5a:	9207      	str	r2, [sp, #28]
 800ad5c:	e014      	b.n	800ad88 <_svfiprintf_r+0x114>
 800ad5e:	eba0 0308 	sub.w	r3, r0, r8
 800ad62:	fa09 f303 	lsl.w	r3, r9, r3
 800ad66:	4313      	orrs	r3, r2
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	46a2      	mov	sl, r4
 800ad6c:	e7d2      	b.n	800ad14 <_svfiprintf_r+0xa0>
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	1d19      	adds	r1, r3, #4
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	9103      	str	r1, [sp, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	bfbb      	ittet	lt
 800ad7a:	425b      	neglt	r3, r3
 800ad7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad80:	9307      	strge	r3, [sp, #28]
 800ad82:	9307      	strlt	r3, [sp, #28]
 800ad84:	bfb8      	it	lt
 800ad86:	9204      	strlt	r2, [sp, #16]
 800ad88:	7823      	ldrb	r3, [r4, #0]
 800ad8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad8c:	d10a      	bne.n	800ada4 <_svfiprintf_r+0x130>
 800ad8e:	7863      	ldrb	r3, [r4, #1]
 800ad90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad92:	d132      	bne.n	800adfa <_svfiprintf_r+0x186>
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	1d1a      	adds	r2, r3, #4
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	9203      	str	r2, [sp, #12]
 800ad9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ada0:	3402      	adds	r4, #2
 800ada2:	9305      	str	r3, [sp, #20]
 800ada4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae68 <_svfiprintf_r+0x1f4>
 800ada8:	7821      	ldrb	r1, [r4, #0]
 800adaa:	2203      	movs	r2, #3
 800adac:	4650      	mov	r0, sl
 800adae:	f7f5 fa27 	bl	8000200 <memchr>
 800adb2:	b138      	cbz	r0, 800adc4 <_svfiprintf_r+0x150>
 800adb4:	9b04      	ldr	r3, [sp, #16]
 800adb6:	eba0 000a 	sub.w	r0, r0, sl
 800adba:	2240      	movs	r2, #64	@ 0x40
 800adbc:	4082      	lsls	r2, r0
 800adbe:	4313      	orrs	r3, r2
 800adc0:	3401      	adds	r4, #1
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc8:	4824      	ldr	r0, [pc, #144]	@ (800ae5c <_svfiprintf_r+0x1e8>)
 800adca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adce:	2206      	movs	r2, #6
 800add0:	f7f5 fa16 	bl	8000200 <memchr>
 800add4:	2800      	cmp	r0, #0
 800add6:	d036      	beq.n	800ae46 <_svfiprintf_r+0x1d2>
 800add8:	4b21      	ldr	r3, [pc, #132]	@ (800ae60 <_svfiprintf_r+0x1ec>)
 800adda:	bb1b      	cbnz	r3, 800ae24 <_svfiprintf_r+0x1b0>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	3307      	adds	r3, #7
 800ade0:	f023 0307 	bic.w	r3, r3, #7
 800ade4:	3308      	adds	r3, #8
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adea:	4433      	add	r3, r6
 800adec:	9309      	str	r3, [sp, #36]	@ 0x24
 800adee:	e76a      	b.n	800acc6 <_svfiprintf_r+0x52>
 800adf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf4:	460c      	mov	r4, r1
 800adf6:	2001      	movs	r0, #1
 800adf8:	e7a8      	b.n	800ad4c <_svfiprintf_r+0xd8>
 800adfa:	2300      	movs	r3, #0
 800adfc:	3401      	adds	r4, #1
 800adfe:	9305      	str	r3, [sp, #20]
 800ae00:	4619      	mov	r1, r3
 800ae02:	f04f 0c0a 	mov.w	ip, #10
 800ae06:	4620      	mov	r0, r4
 800ae08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0c:	3a30      	subs	r2, #48	@ 0x30
 800ae0e:	2a09      	cmp	r2, #9
 800ae10:	d903      	bls.n	800ae1a <_svfiprintf_r+0x1a6>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0c6      	beq.n	800ada4 <_svfiprintf_r+0x130>
 800ae16:	9105      	str	r1, [sp, #20]
 800ae18:	e7c4      	b.n	800ada4 <_svfiprintf_r+0x130>
 800ae1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae1e:	4604      	mov	r4, r0
 800ae20:	2301      	movs	r3, #1
 800ae22:	e7f0      	b.n	800ae06 <_svfiprintf_r+0x192>
 800ae24:	ab03      	add	r3, sp, #12
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae64 <_svfiprintf_r+0x1f0>)
 800ae2c:	a904      	add	r1, sp, #16
 800ae2e:	4638      	mov	r0, r7
 800ae30:	f3af 8000 	nop.w
 800ae34:	1c42      	adds	r2, r0, #1
 800ae36:	4606      	mov	r6, r0
 800ae38:	d1d6      	bne.n	800ade8 <_svfiprintf_r+0x174>
 800ae3a:	89ab      	ldrh	r3, [r5, #12]
 800ae3c:	065b      	lsls	r3, r3, #25
 800ae3e:	f53f af2d 	bmi.w	800ac9c <_svfiprintf_r+0x28>
 800ae42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae44:	e72c      	b.n	800aca0 <_svfiprintf_r+0x2c>
 800ae46:	ab03      	add	r3, sp, #12
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	4b05      	ldr	r3, [pc, #20]	@ (800ae64 <_svfiprintf_r+0x1f0>)
 800ae4e:	a904      	add	r1, sp, #16
 800ae50:	4638      	mov	r0, r7
 800ae52:	f000 f879 	bl	800af48 <_printf_i>
 800ae56:	e7ed      	b.n	800ae34 <_svfiprintf_r+0x1c0>
 800ae58:	0800bd0a 	.word	0x0800bd0a
 800ae5c:	0800bd14 	.word	0x0800bd14
 800ae60:	00000000 	.word	0x00000000
 800ae64:	0800abbd 	.word	0x0800abbd
 800ae68:	0800bd10 	.word	0x0800bd10

0800ae6c <_printf_common>:
 800ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	4616      	mov	r6, r2
 800ae72:	4698      	mov	r8, r3
 800ae74:	688a      	ldr	r2, [r1, #8]
 800ae76:	690b      	ldr	r3, [r1, #16]
 800ae78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	bfb8      	it	lt
 800ae80:	4613      	movlt	r3, r2
 800ae82:	6033      	str	r3, [r6, #0]
 800ae84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae88:	4607      	mov	r7, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	b10a      	cbz	r2, 800ae92 <_printf_common+0x26>
 800ae8e:	3301      	adds	r3, #1
 800ae90:	6033      	str	r3, [r6, #0]
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	0699      	lsls	r1, r3, #26
 800ae96:	bf42      	ittt	mi
 800ae98:	6833      	ldrmi	r3, [r6, #0]
 800ae9a:	3302      	addmi	r3, #2
 800ae9c:	6033      	strmi	r3, [r6, #0]
 800ae9e:	6825      	ldr	r5, [r4, #0]
 800aea0:	f015 0506 	ands.w	r5, r5, #6
 800aea4:	d106      	bne.n	800aeb4 <_printf_common+0x48>
 800aea6:	f104 0a19 	add.w	sl, r4, #25
 800aeaa:	68e3      	ldr	r3, [r4, #12]
 800aeac:	6832      	ldr	r2, [r6, #0]
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	42ab      	cmp	r3, r5
 800aeb2:	dc26      	bgt.n	800af02 <_printf_common+0x96>
 800aeb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aeb8:	6822      	ldr	r2, [r4, #0]
 800aeba:	3b00      	subs	r3, #0
 800aebc:	bf18      	it	ne
 800aebe:	2301      	movne	r3, #1
 800aec0:	0692      	lsls	r2, r2, #26
 800aec2:	d42b      	bmi.n	800af1c <_printf_common+0xb0>
 800aec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aec8:	4641      	mov	r1, r8
 800aeca:	4638      	mov	r0, r7
 800aecc:	47c8      	blx	r9
 800aece:	3001      	adds	r0, #1
 800aed0:	d01e      	beq.n	800af10 <_printf_common+0xa4>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	6922      	ldr	r2, [r4, #16]
 800aed6:	f003 0306 	and.w	r3, r3, #6
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	bf02      	ittt	eq
 800aede:	68e5      	ldreq	r5, [r4, #12]
 800aee0:	6833      	ldreq	r3, [r6, #0]
 800aee2:	1aed      	subeq	r5, r5, r3
 800aee4:	68a3      	ldr	r3, [r4, #8]
 800aee6:	bf0c      	ite	eq
 800aee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeec:	2500      	movne	r5, #0
 800aeee:	4293      	cmp	r3, r2
 800aef0:	bfc4      	itt	gt
 800aef2:	1a9b      	subgt	r3, r3, r2
 800aef4:	18ed      	addgt	r5, r5, r3
 800aef6:	2600      	movs	r6, #0
 800aef8:	341a      	adds	r4, #26
 800aefa:	42b5      	cmp	r5, r6
 800aefc:	d11a      	bne.n	800af34 <_printf_common+0xc8>
 800aefe:	2000      	movs	r0, #0
 800af00:	e008      	b.n	800af14 <_printf_common+0xa8>
 800af02:	2301      	movs	r3, #1
 800af04:	4652      	mov	r2, sl
 800af06:	4641      	mov	r1, r8
 800af08:	4638      	mov	r0, r7
 800af0a:	47c8      	blx	r9
 800af0c:	3001      	adds	r0, #1
 800af0e:	d103      	bne.n	800af18 <_printf_common+0xac>
 800af10:	f04f 30ff 	mov.w	r0, #4294967295
 800af14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af18:	3501      	adds	r5, #1
 800af1a:	e7c6      	b.n	800aeaa <_printf_common+0x3e>
 800af1c:	18e1      	adds	r1, r4, r3
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	2030      	movs	r0, #48	@ 0x30
 800af22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af26:	4422      	add	r2, r4
 800af28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af30:	3302      	adds	r3, #2
 800af32:	e7c7      	b.n	800aec4 <_printf_common+0x58>
 800af34:	2301      	movs	r3, #1
 800af36:	4622      	mov	r2, r4
 800af38:	4641      	mov	r1, r8
 800af3a:	4638      	mov	r0, r7
 800af3c:	47c8      	blx	r9
 800af3e:	3001      	adds	r0, #1
 800af40:	d0e6      	beq.n	800af10 <_printf_common+0xa4>
 800af42:	3601      	adds	r6, #1
 800af44:	e7d9      	b.n	800aefa <_printf_common+0x8e>
	...

0800af48 <_printf_i>:
 800af48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af4c:	7e0f      	ldrb	r7, [r1, #24]
 800af4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af50:	2f78      	cmp	r7, #120	@ 0x78
 800af52:	4691      	mov	r9, r2
 800af54:	4680      	mov	r8, r0
 800af56:	460c      	mov	r4, r1
 800af58:	469a      	mov	sl, r3
 800af5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af5e:	d807      	bhi.n	800af70 <_printf_i+0x28>
 800af60:	2f62      	cmp	r7, #98	@ 0x62
 800af62:	d80a      	bhi.n	800af7a <_printf_i+0x32>
 800af64:	2f00      	cmp	r7, #0
 800af66:	f000 80d2 	beq.w	800b10e <_printf_i+0x1c6>
 800af6a:	2f58      	cmp	r7, #88	@ 0x58
 800af6c:	f000 80b9 	beq.w	800b0e2 <_printf_i+0x19a>
 800af70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af78:	e03a      	b.n	800aff0 <_printf_i+0xa8>
 800af7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af7e:	2b15      	cmp	r3, #21
 800af80:	d8f6      	bhi.n	800af70 <_printf_i+0x28>
 800af82:	a101      	add	r1, pc, #4	@ (adr r1, 800af88 <_printf_i+0x40>)
 800af84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af88:	0800afe1 	.word	0x0800afe1
 800af8c:	0800aff5 	.word	0x0800aff5
 800af90:	0800af71 	.word	0x0800af71
 800af94:	0800af71 	.word	0x0800af71
 800af98:	0800af71 	.word	0x0800af71
 800af9c:	0800af71 	.word	0x0800af71
 800afa0:	0800aff5 	.word	0x0800aff5
 800afa4:	0800af71 	.word	0x0800af71
 800afa8:	0800af71 	.word	0x0800af71
 800afac:	0800af71 	.word	0x0800af71
 800afb0:	0800af71 	.word	0x0800af71
 800afb4:	0800b0f5 	.word	0x0800b0f5
 800afb8:	0800b01f 	.word	0x0800b01f
 800afbc:	0800b0af 	.word	0x0800b0af
 800afc0:	0800af71 	.word	0x0800af71
 800afc4:	0800af71 	.word	0x0800af71
 800afc8:	0800b117 	.word	0x0800b117
 800afcc:	0800af71 	.word	0x0800af71
 800afd0:	0800b01f 	.word	0x0800b01f
 800afd4:	0800af71 	.word	0x0800af71
 800afd8:	0800af71 	.word	0x0800af71
 800afdc:	0800b0b7 	.word	0x0800b0b7
 800afe0:	6833      	ldr	r3, [r6, #0]
 800afe2:	1d1a      	adds	r2, r3, #4
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6032      	str	r2, [r6, #0]
 800afe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aff0:	2301      	movs	r3, #1
 800aff2:	e09d      	b.n	800b130 <_printf_i+0x1e8>
 800aff4:	6833      	ldr	r3, [r6, #0]
 800aff6:	6820      	ldr	r0, [r4, #0]
 800aff8:	1d19      	adds	r1, r3, #4
 800affa:	6031      	str	r1, [r6, #0]
 800affc:	0606      	lsls	r6, r0, #24
 800affe:	d501      	bpl.n	800b004 <_printf_i+0xbc>
 800b000:	681d      	ldr	r5, [r3, #0]
 800b002:	e003      	b.n	800b00c <_printf_i+0xc4>
 800b004:	0645      	lsls	r5, r0, #25
 800b006:	d5fb      	bpl.n	800b000 <_printf_i+0xb8>
 800b008:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b00c:	2d00      	cmp	r5, #0
 800b00e:	da03      	bge.n	800b018 <_printf_i+0xd0>
 800b010:	232d      	movs	r3, #45	@ 0x2d
 800b012:	426d      	negs	r5, r5
 800b014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b018:	4859      	ldr	r0, [pc, #356]	@ (800b180 <_printf_i+0x238>)
 800b01a:	230a      	movs	r3, #10
 800b01c:	e011      	b.n	800b042 <_printf_i+0xfa>
 800b01e:	6821      	ldr	r1, [r4, #0]
 800b020:	6833      	ldr	r3, [r6, #0]
 800b022:	0608      	lsls	r0, r1, #24
 800b024:	f853 5b04 	ldr.w	r5, [r3], #4
 800b028:	d402      	bmi.n	800b030 <_printf_i+0xe8>
 800b02a:	0649      	lsls	r1, r1, #25
 800b02c:	bf48      	it	mi
 800b02e:	b2ad      	uxthmi	r5, r5
 800b030:	2f6f      	cmp	r7, #111	@ 0x6f
 800b032:	4853      	ldr	r0, [pc, #332]	@ (800b180 <_printf_i+0x238>)
 800b034:	6033      	str	r3, [r6, #0]
 800b036:	bf14      	ite	ne
 800b038:	230a      	movne	r3, #10
 800b03a:	2308      	moveq	r3, #8
 800b03c:	2100      	movs	r1, #0
 800b03e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b042:	6866      	ldr	r6, [r4, #4]
 800b044:	60a6      	str	r6, [r4, #8]
 800b046:	2e00      	cmp	r6, #0
 800b048:	bfa2      	ittt	ge
 800b04a:	6821      	ldrge	r1, [r4, #0]
 800b04c:	f021 0104 	bicge.w	r1, r1, #4
 800b050:	6021      	strge	r1, [r4, #0]
 800b052:	b90d      	cbnz	r5, 800b058 <_printf_i+0x110>
 800b054:	2e00      	cmp	r6, #0
 800b056:	d04b      	beq.n	800b0f0 <_printf_i+0x1a8>
 800b058:	4616      	mov	r6, r2
 800b05a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b05e:	fb03 5711 	mls	r7, r3, r1, r5
 800b062:	5dc7      	ldrb	r7, [r0, r7]
 800b064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b068:	462f      	mov	r7, r5
 800b06a:	42bb      	cmp	r3, r7
 800b06c:	460d      	mov	r5, r1
 800b06e:	d9f4      	bls.n	800b05a <_printf_i+0x112>
 800b070:	2b08      	cmp	r3, #8
 800b072:	d10b      	bne.n	800b08c <_printf_i+0x144>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	07df      	lsls	r7, r3, #31
 800b078:	d508      	bpl.n	800b08c <_printf_i+0x144>
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	6861      	ldr	r1, [r4, #4]
 800b07e:	4299      	cmp	r1, r3
 800b080:	bfde      	ittt	le
 800b082:	2330      	movle	r3, #48	@ 0x30
 800b084:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b08c:	1b92      	subs	r2, r2, r6
 800b08e:	6122      	str	r2, [r4, #16]
 800b090:	f8cd a000 	str.w	sl, [sp]
 800b094:	464b      	mov	r3, r9
 800b096:	aa03      	add	r2, sp, #12
 800b098:	4621      	mov	r1, r4
 800b09a:	4640      	mov	r0, r8
 800b09c:	f7ff fee6 	bl	800ae6c <_printf_common>
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d14a      	bne.n	800b13a <_printf_i+0x1f2>
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	b004      	add	sp, #16
 800b0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	f043 0320 	orr.w	r3, r3, #32
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	4833      	ldr	r0, [pc, #204]	@ (800b184 <_printf_i+0x23c>)
 800b0b8:	2778      	movs	r7, #120	@ 0x78
 800b0ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	6831      	ldr	r1, [r6, #0]
 800b0c2:	061f      	lsls	r7, r3, #24
 800b0c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0c8:	d402      	bmi.n	800b0d0 <_printf_i+0x188>
 800b0ca:	065f      	lsls	r7, r3, #25
 800b0cc:	bf48      	it	mi
 800b0ce:	b2ad      	uxthmi	r5, r5
 800b0d0:	6031      	str	r1, [r6, #0]
 800b0d2:	07d9      	lsls	r1, r3, #31
 800b0d4:	bf44      	itt	mi
 800b0d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0da:	6023      	strmi	r3, [r4, #0]
 800b0dc:	b11d      	cbz	r5, 800b0e6 <_printf_i+0x19e>
 800b0de:	2310      	movs	r3, #16
 800b0e0:	e7ac      	b.n	800b03c <_printf_i+0xf4>
 800b0e2:	4827      	ldr	r0, [pc, #156]	@ (800b180 <_printf_i+0x238>)
 800b0e4:	e7e9      	b.n	800b0ba <_printf_i+0x172>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	f023 0320 	bic.w	r3, r3, #32
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	e7f6      	b.n	800b0de <_printf_i+0x196>
 800b0f0:	4616      	mov	r6, r2
 800b0f2:	e7bd      	b.n	800b070 <_printf_i+0x128>
 800b0f4:	6833      	ldr	r3, [r6, #0]
 800b0f6:	6825      	ldr	r5, [r4, #0]
 800b0f8:	6961      	ldr	r1, [r4, #20]
 800b0fa:	1d18      	adds	r0, r3, #4
 800b0fc:	6030      	str	r0, [r6, #0]
 800b0fe:	062e      	lsls	r6, r5, #24
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	d501      	bpl.n	800b108 <_printf_i+0x1c0>
 800b104:	6019      	str	r1, [r3, #0]
 800b106:	e002      	b.n	800b10e <_printf_i+0x1c6>
 800b108:	0668      	lsls	r0, r5, #25
 800b10a:	d5fb      	bpl.n	800b104 <_printf_i+0x1bc>
 800b10c:	8019      	strh	r1, [r3, #0]
 800b10e:	2300      	movs	r3, #0
 800b110:	6123      	str	r3, [r4, #16]
 800b112:	4616      	mov	r6, r2
 800b114:	e7bc      	b.n	800b090 <_printf_i+0x148>
 800b116:	6833      	ldr	r3, [r6, #0]
 800b118:	1d1a      	adds	r2, r3, #4
 800b11a:	6032      	str	r2, [r6, #0]
 800b11c:	681e      	ldr	r6, [r3, #0]
 800b11e:	6862      	ldr	r2, [r4, #4]
 800b120:	2100      	movs	r1, #0
 800b122:	4630      	mov	r0, r6
 800b124:	f7f5 f86c 	bl	8000200 <memchr>
 800b128:	b108      	cbz	r0, 800b12e <_printf_i+0x1e6>
 800b12a:	1b80      	subs	r0, r0, r6
 800b12c:	6060      	str	r0, [r4, #4]
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	2300      	movs	r3, #0
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b138:	e7aa      	b.n	800b090 <_printf_i+0x148>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	4632      	mov	r2, r6
 800b13e:	4649      	mov	r1, r9
 800b140:	4640      	mov	r0, r8
 800b142:	47d0      	blx	sl
 800b144:	3001      	adds	r0, #1
 800b146:	d0ad      	beq.n	800b0a4 <_printf_i+0x15c>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	079b      	lsls	r3, r3, #30
 800b14c:	d413      	bmi.n	800b176 <_printf_i+0x22e>
 800b14e:	68e0      	ldr	r0, [r4, #12]
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	4298      	cmp	r0, r3
 800b154:	bfb8      	it	lt
 800b156:	4618      	movlt	r0, r3
 800b158:	e7a6      	b.n	800b0a8 <_printf_i+0x160>
 800b15a:	2301      	movs	r3, #1
 800b15c:	4632      	mov	r2, r6
 800b15e:	4649      	mov	r1, r9
 800b160:	4640      	mov	r0, r8
 800b162:	47d0      	blx	sl
 800b164:	3001      	adds	r0, #1
 800b166:	d09d      	beq.n	800b0a4 <_printf_i+0x15c>
 800b168:	3501      	adds	r5, #1
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	9903      	ldr	r1, [sp, #12]
 800b16e:	1a5b      	subs	r3, r3, r1
 800b170:	42ab      	cmp	r3, r5
 800b172:	dcf2      	bgt.n	800b15a <_printf_i+0x212>
 800b174:	e7eb      	b.n	800b14e <_printf_i+0x206>
 800b176:	2500      	movs	r5, #0
 800b178:	f104 0619 	add.w	r6, r4, #25
 800b17c:	e7f5      	b.n	800b16a <_printf_i+0x222>
 800b17e:	bf00      	nop
 800b180:	0800bd1b 	.word	0x0800bd1b
 800b184:	0800bd2c 	.word	0x0800bd2c

0800b188 <__sflush_r>:
 800b188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	0716      	lsls	r6, r2, #28
 800b192:	4605      	mov	r5, r0
 800b194:	460c      	mov	r4, r1
 800b196:	d454      	bmi.n	800b242 <__sflush_r+0xba>
 800b198:	684b      	ldr	r3, [r1, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc02      	bgt.n	800b1a4 <__sflush_r+0x1c>
 800b19e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dd48      	ble.n	800b236 <__sflush_r+0xae>
 800b1a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	d045      	beq.n	800b236 <__sflush_r+0xae>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1b0:	682f      	ldr	r7, [r5, #0]
 800b1b2:	6a21      	ldr	r1, [r4, #32]
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	d030      	beq.n	800b21a <__sflush_r+0x92>
 800b1b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	0759      	lsls	r1, r3, #29
 800b1be:	d505      	bpl.n	800b1cc <__sflush_r+0x44>
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	1ad2      	subs	r2, r2, r3
 800b1c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1c6:	b10b      	cbz	r3, 800b1cc <__sflush_r+0x44>
 800b1c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1ca:	1ad2      	subs	r2, r2, r3
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1d0:	6a21      	ldr	r1, [r4, #32]
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	47b0      	blx	r6
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	d106      	bne.n	800b1ea <__sflush_r+0x62>
 800b1dc:	6829      	ldr	r1, [r5, #0]
 800b1de:	291d      	cmp	r1, #29
 800b1e0:	d82b      	bhi.n	800b23a <__sflush_r+0xb2>
 800b1e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b28c <__sflush_r+0x104>)
 800b1e4:	410a      	asrs	r2, r1
 800b1e6:	07d6      	lsls	r6, r2, #31
 800b1e8:	d427      	bmi.n	800b23a <__sflush_r+0xb2>
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	6062      	str	r2, [r4, #4]
 800b1ee:	04d9      	lsls	r1, r3, #19
 800b1f0:	6922      	ldr	r2, [r4, #16]
 800b1f2:	6022      	str	r2, [r4, #0]
 800b1f4:	d504      	bpl.n	800b200 <__sflush_r+0x78>
 800b1f6:	1c42      	adds	r2, r0, #1
 800b1f8:	d101      	bne.n	800b1fe <__sflush_r+0x76>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	b903      	cbnz	r3, 800b200 <__sflush_r+0x78>
 800b1fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b202:	602f      	str	r7, [r5, #0]
 800b204:	b1b9      	cbz	r1, 800b236 <__sflush_r+0xae>
 800b206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b20a:	4299      	cmp	r1, r3
 800b20c:	d002      	beq.n	800b214 <__sflush_r+0x8c>
 800b20e:	4628      	mov	r0, r5
 800b210:	f7ff fc8a 	bl	800ab28 <_free_r>
 800b214:	2300      	movs	r3, #0
 800b216:	6363      	str	r3, [r4, #52]	@ 0x34
 800b218:	e00d      	b.n	800b236 <__sflush_r+0xae>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b0      	blx	r6
 800b220:	4602      	mov	r2, r0
 800b222:	1c50      	adds	r0, r2, #1
 800b224:	d1c9      	bne.n	800b1ba <__sflush_r+0x32>
 800b226:	682b      	ldr	r3, [r5, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0c6      	beq.n	800b1ba <__sflush_r+0x32>
 800b22c:	2b1d      	cmp	r3, #29
 800b22e:	d001      	beq.n	800b234 <__sflush_r+0xac>
 800b230:	2b16      	cmp	r3, #22
 800b232:	d11e      	bne.n	800b272 <__sflush_r+0xea>
 800b234:	602f      	str	r7, [r5, #0]
 800b236:	2000      	movs	r0, #0
 800b238:	e022      	b.n	800b280 <__sflush_r+0xf8>
 800b23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b23e:	b21b      	sxth	r3, r3
 800b240:	e01b      	b.n	800b27a <__sflush_r+0xf2>
 800b242:	690f      	ldr	r7, [r1, #16]
 800b244:	2f00      	cmp	r7, #0
 800b246:	d0f6      	beq.n	800b236 <__sflush_r+0xae>
 800b248:	0793      	lsls	r3, r2, #30
 800b24a:	680e      	ldr	r6, [r1, #0]
 800b24c:	bf08      	it	eq
 800b24e:	694b      	ldreq	r3, [r1, #20]
 800b250:	600f      	str	r7, [r1, #0]
 800b252:	bf18      	it	ne
 800b254:	2300      	movne	r3, #0
 800b256:	eba6 0807 	sub.w	r8, r6, r7
 800b25a:	608b      	str	r3, [r1, #8]
 800b25c:	f1b8 0f00 	cmp.w	r8, #0
 800b260:	dde9      	ble.n	800b236 <__sflush_r+0xae>
 800b262:	6a21      	ldr	r1, [r4, #32]
 800b264:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b266:	4643      	mov	r3, r8
 800b268:	463a      	mov	r2, r7
 800b26a:	4628      	mov	r0, r5
 800b26c:	47b0      	blx	r6
 800b26e:	2800      	cmp	r0, #0
 800b270:	dc08      	bgt.n	800b284 <__sflush_r+0xfc>
 800b272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b284:	4407      	add	r7, r0
 800b286:	eba8 0800 	sub.w	r8, r8, r0
 800b28a:	e7e7      	b.n	800b25c <__sflush_r+0xd4>
 800b28c:	dfbffffe 	.word	0xdfbffffe

0800b290 <_fflush_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	690b      	ldr	r3, [r1, #16]
 800b294:	4605      	mov	r5, r0
 800b296:	460c      	mov	r4, r1
 800b298:	b913      	cbnz	r3, 800b2a0 <_fflush_r+0x10>
 800b29a:	2500      	movs	r5, #0
 800b29c:	4628      	mov	r0, r5
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	b118      	cbz	r0, 800b2aa <_fflush_r+0x1a>
 800b2a2:	6a03      	ldr	r3, [r0, #32]
 800b2a4:	b90b      	cbnz	r3, 800b2aa <_fflush_r+0x1a>
 800b2a6:	f7ff fa91 	bl	800a7cc <__sinit>
 800b2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0f3      	beq.n	800b29a <_fflush_r+0xa>
 800b2b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2b4:	07d0      	lsls	r0, r2, #31
 800b2b6:	d404      	bmi.n	800b2c2 <_fflush_r+0x32>
 800b2b8:	0599      	lsls	r1, r3, #22
 800b2ba:	d402      	bmi.n	800b2c2 <_fflush_r+0x32>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2be:	f7ff fc04 	bl	800aaca <__retarget_lock_acquire_recursive>
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	f7ff ff5f 	bl	800b188 <__sflush_r>
 800b2ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2cc:	07da      	lsls	r2, r3, #31
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	d4e4      	bmi.n	800b29c <_fflush_r+0xc>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	059b      	lsls	r3, r3, #22
 800b2d6:	d4e1      	bmi.n	800b29c <_fflush_r+0xc>
 800b2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2da:	f7ff fbf7 	bl	800aacc <__retarget_lock_release_recursive>
 800b2de:	e7dd      	b.n	800b29c <_fflush_r+0xc>

0800b2e0 <fiprintf>:
 800b2e0:	b40e      	push	{r1, r2, r3}
 800b2e2:	b503      	push	{r0, r1, lr}
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	4805      	ldr	r0, [pc, #20]	@ (800b300 <fiprintf+0x20>)
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	6800      	ldr	r0, [r0, #0]
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	f000 f87f 	bl	800b3f4 <_vfiprintf_r>
 800b2f6:	b002      	add	sp, #8
 800b2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2fc:	b003      	add	sp, #12
 800b2fe:	4770      	bx	lr
 800b300:	200000d4 	.word	0x200000d4

0800b304 <memmove>:
 800b304:	4288      	cmp	r0, r1
 800b306:	b510      	push	{r4, lr}
 800b308:	eb01 0402 	add.w	r4, r1, r2
 800b30c:	d902      	bls.n	800b314 <memmove+0x10>
 800b30e:	4284      	cmp	r4, r0
 800b310:	4623      	mov	r3, r4
 800b312:	d807      	bhi.n	800b324 <memmove+0x20>
 800b314:	1e43      	subs	r3, r0, #1
 800b316:	42a1      	cmp	r1, r4
 800b318:	d008      	beq.n	800b32c <memmove+0x28>
 800b31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b322:	e7f8      	b.n	800b316 <memmove+0x12>
 800b324:	4402      	add	r2, r0
 800b326:	4601      	mov	r1, r0
 800b328:	428a      	cmp	r2, r1
 800b32a:	d100      	bne.n	800b32e <memmove+0x2a>
 800b32c:	bd10      	pop	{r4, pc}
 800b32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b336:	e7f7      	b.n	800b328 <memmove+0x24>

0800b338 <abort>:
 800b338:	b508      	push	{r3, lr}
 800b33a:	2006      	movs	r0, #6
 800b33c:	f000 fa2e 	bl	800b79c <raise>
 800b340:	2001      	movs	r0, #1
 800b342:	f7f6 f86b 	bl	800141c <_exit>

0800b346 <_realloc_r>:
 800b346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34a:	4680      	mov	r8, r0
 800b34c:	4615      	mov	r5, r2
 800b34e:	460c      	mov	r4, r1
 800b350:	b921      	cbnz	r1, 800b35c <_realloc_r+0x16>
 800b352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b356:	4611      	mov	r1, r2
 800b358:	f7ff b89c 	b.w	800a494 <_malloc_r>
 800b35c:	b92a      	cbnz	r2, 800b36a <_realloc_r+0x24>
 800b35e:	f7ff fbe3 	bl	800ab28 <_free_r>
 800b362:	2400      	movs	r4, #0
 800b364:	4620      	mov	r0, r4
 800b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36a:	f000 fa33 	bl	800b7d4 <_malloc_usable_size_r>
 800b36e:	4285      	cmp	r5, r0
 800b370:	4606      	mov	r6, r0
 800b372:	d802      	bhi.n	800b37a <_realloc_r+0x34>
 800b374:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b378:	d8f4      	bhi.n	800b364 <_realloc_r+0x1e>
 800b37a:	4629      	mov	r1, r5
 800b37c:	4640      	mov	r0, r8
 800b37e:	f7ff f889 	bl	800a494 <_malloc_r>
 800b382:	4607      	mov	r7, r0
 800b384:	2800      	cmp	r0, #0
 800b386:	d0ec      	beq.n	800b362 <_realloc_r+0x1c>
 800b388:	42b5      	cmp	r5, r6
 800b38a:	462a      	mov	r2, r5
 800b38c:	4621      	mov	r1, r4
 800b38e:	bf28      	it	cs
 800b390:	4632      	movcs	r2, r6
 800b392:	f7ff fb9c 	bl	800aace <memcpy>
 800b396:	4621      	mov	r1, r4
 800b398:	4640      	mov	r0, r8
 800b39a:	f7ff fbc5 	bl	800ab28 <_free_r>
 800b39e:	463c      	mov	r4, r7
 800b3a0:	e7e0      	b.n	800b364 <_realloc_r+0x1e>

0800b3a2 <__sfputc_r>:
 800b3a2:	6893      	ldr	r3, [r2, #8]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	b410      	push	{r4}
 800b3aa:	6093      	str	r3, [r2, #8]
 800b3ac:	da08      	bge.n	800b3c0 <__sfputc_r+0x1e>
 800b3ae:	6994      	ldr	r4, [r2, #24]
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	db01      	blt.n	800b3b8 <__sfputc_r+0x16>
 800b3b4:	290a      	cmp	r1, #10
 800b3b6:	d103      	bne.n	800b3c0 <__sfputc_r+0x1e>
 800b3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3bc:	f000 b932 	b.w	800b624 <__swbuf_r>
 800b3c0:	6813      	ldr	r3, [r2, #0]
 800b3c2:	1c58      	adds	r0, r3, #1
 800b3c4:	6010      	str	r0, [r2, #0]
 800b3c6:	7019      	strb	r1, [r3, #0]
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <__sfputs_r>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	4614      	mov	r4, r2
 800b3d8:	18d5      	adds	r5, r2, r3
 800b3da:	42ac      	cmp	r4, r5
 800b3dc:	d101      	bne.n	800b3e2 <__sfputs_r+0x12>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	e007      	b.n	800b3f2 <__sfputs_r+0x22>
 800b3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e6:	463a      	mov	r2, r7
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f7ff ffda 	bl	800b3a2 <__sfputc_r>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	d1f3      	bne.n	800b3da <__sfputs_r+0xa>
 800b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3f4 <_vfiprintf_r>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	460d      	mov	r5, r1
 800b3fa:	b09d      	sub	sp, #116	@ 0x74
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	4698      	mov	r8, r3
 800b400:	4606      	mov	r6, r0
 800b402:	b118      	cbz	r0, 800b40c <_vfiprintf_r+0x18>
 800b404:	6a03      	ldr	r3, [r0, #32]
 800b406:	b90b      	cbnz	r3, 800b40c <_vfiprintf_r+0x18>
 800b408:	f7ff f9e0 	bl	800a7cc <__sinit>
 800b40c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b40e:	07d9      	lsls	r1, r3, #31
 800b410:	d405      	bmi.n	800b41e <_vfiprintf_r+0x2a>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	059a      	lsls	r2, r3, #22
 800b416:	d402      	bmi.n	800b41e <_vfiprintf_r+0x2a>
 800b418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b41a:	f7ff fb56 	bl	800aaca <__retarget_lock_acquire_recursive>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	071b      	lsls	r3, r3, #28
 800b422:	d501      	bpl.n	800b428 <_vfiprintf_r+0x34>
 800b424:	692b      	ldr	r3, [r5, #16]
 800b426:	b99b      	cbnz	r3, 800b450 <_vfiprintf_r+0x5c>
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f000 f938 	bl	800b6a0 <__swsetup_r>
 800b430:	b170      	cbz	r0, 800b450 <_vfiprintf_r+0x5c>
 800b432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b434:	07dc      	lsls	r4, r3, #31
 800b436:	d504      	bpl.n	800b442 <_vfiprintf_r+0x4e>
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	b01d      	add	sp, #116	@ 0x74
 800b43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b442:	89ab      	ldrh	r3, [r5, #12]
 800b444:	0598      	lsls	r0, r3, #22
 800b446:	d4f7      	bmi.n	800b438 <_vfiprintf_r+0x44>
 800b448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b44a:	f7ff fb3f 	bl	800aacc <__retarget_lock_release_recursive>
 800b44e:	e7f3      	b.n	800b438 <_vfiprintf_r+0x44>
 800b450:	2300      	movs	r3, #0
 800b452:	9309      	str	r3, [sp, #36]	@ 0x24
 800b454:	2320      	movs	r3, #32
 800b456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45e:	2330      	movs	r3, #48	@ 0x30
 800b460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b610 <_vfiprintf_r+0x21c>
 800b464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b468:	f04f 0901 	mov.w	r9, #1
 800b46c:	4623      	mov	r3, r4
 800b46e:	469a      	mov	sl, r3
 800b470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b474:	b10a      	cbz	r2, 800b47a <_vfiprintf_r+0x86>
 800b476:	2a25      	cmp	r2, #37	@ 0x25
 800b478:	d1f9      	bne.n	800b46e <_vfiprintf_r+0x7a>
 800b47a:	ebba 0b04 	subs.w	fp, sl, r4
 800b47e:	d00b      	beq.n	800b498 <_vfiprintf_r+0xa4>
 800b480:	465b      	mov	r3, fp
 800b482:	4622      	mov	r2, r4
 800b484:	4629      	mov	r1, r5
 800b486:	4630      	mov	r0, r6
 800b488:	f7ff ffa2 	bl	800b3d0 <__sfputs_r>
 800b48c:	3001      	adds	r0, #1
 800b48e:	f000 80a7 	beq.w	800b5e0 <_vfiprintf_r+0x1ec>
 800b492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b494:	445a      	add	r2, fp
 800b496:	9209      	str	r2, [sp, #36]	@ 0x24
 800b498:	f89a 3000 	ldrb.w	r3, [sl]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 809f 	beq.w	800b5e0 <_vfiprintf_r+0x1ec>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ac:	f10a 0a01 	add.w	sl, sl, #1
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	9307      	str	r3, [sp, #28]
 800b4b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ba:	4654      	mov	r4, sl
 800b4bc:	2205      	movs	r2, #5
 800b4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c2:	4853      	ldr	r0, [pc, #332]	@ (800b610 <_vfiprintf_r+0x21c>)
 800b4c4:	f7f4 fe9c 	bl	8000200 <memchr>
 800b4c8:	9a04      	ldr	r2, [sp, #16]
 800b4ca:	b9d8      	cbnz	r0, 800b504 <_vfiprintf_r+0x110>
 800b4cc:	06d1      	lsls	r1, r2, #27
 800b4ce:	bf44      	itt	mi
 800b4d0:	2320      	movmi	r3, #32
 800b4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d6:	0713      	lsls	r3, r2, #28
 800b4d8:	bf44      	itt	mi
 800b4da:	232b      	movmi	r3, #43	@ 0x2b
 800b4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e6:	d015      	beq.n	800b514 <_vfiprintf_r+0x120>
 800b4e8:	9a07      	ldr	r2, [sp, #28]
 800b4ea:	4654      	mov	r4, sl
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f04f 0c0a 	mov.w	ip, #10
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f8:	3b30      	subs	r3, #48	@ 0x30
 800b4fa:	2b09      	cmp	r3, #9
 800b4fc:	d94b      	bls.n	800b596 <_vfiprintf_r+0x1a2>
 800b4fe:	b1b0      	cbz	r0, 800b52e <_vfiprintf_r+0x13a>
 800b500:	9207      	str	r2, [sp, #28]
 800b502:	e014      	b.n	800b52e <_vfiprintf_r+0x13a>
 800b504:	eba0 0308 	sub.w	r3, r0, r8
 800b508:	fa09 f303 	lsl.w	r3, r9, r3
 800b50c:	4313      	orrs	r3, r2
 800b50e:	9304      	str	r3, [sp, #16]
 800b510:	46a2      	mov	sl, r4
 800b512:	e7d2      	b.n	800b4ba <_vfiprintf_r+0xc6>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1d19      	adds	r1, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	9103      	str	r1, [sp, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfbb      	ittet	lt
 800b520:	425b      	neglt	r3, r3
 800b522:	f042 0202 	orrlt.w	r2, r2, #2
 800b526:	9307      	strge	r3, [sp, #28]
 800b528:	9307      	strlt	r3, [sp, #28]
 800b52a:	bfb8      	it	lt
 800b52c:	9204      	strlt	r2, [sp, #16]
 800b52e:	7823      	ldrb	r3, [r4, #0]
 800b530:	2b2e      	cmp	r3, #46	@ 0x2e
 800b532:	d10a      	bne.n	800b54a <_vfiprintf_r+0x156>
 800b534:	7863      	ldrb	r3, [r4, #1]
 800b536:	2b2a      	cmp	r3, #42	@ 0x2a
 800b538:	d132      	bne.n	800b5a0 <_vfiprintf_r+0x1ac>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	1d1a      	adds	r2, r3, #4
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	9203      	str	r2, [sp, #12]
 800b542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b546:	3402      	adds	r4, #2
 800b548:	9305      	str	r3, [sp, #20]
 800b54a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b620 <_vfiprintf_r+0x22c>
 800b54e:	7821      	ldrb	r1, [r4, #0]
 800b550:	2203      	movs	r2, #3
 800b552:	4650      	mov	r0, sl
 800b554:	f7f4 fe54 	bl	8000200 <memchr>
 800b558:	b138      	cbz	r0, 800b56a <_vfiprintf_r+0x176>
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	eba0 000a 	sub.w	r0, r0, sl
 800b560:	2240      	movs	r2, #64	@ 0x40
 800b562:	4082      	lsls	r2, r0
 800b564:	4313      	orrs	r3, r2
 800b566:	3401      	adds	r4, #1
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	4829      	ldr	r0, [pc, #164]	@ (800b614 <_vfiprintf_r+0x220>)
 800b570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b574:	2206      	movs	r2, #6
 800b576:	f7f4 fe43 	bl	8000200 <memchr>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d03f      	beq.n	800b5fe <_vfiprintf_r+0x20a>
 800b57e:	4b26      	ldr	r3, [pc, #152]	@ (800b618 <_vfiprintf_r+0x224>)
 800b580:	bb1b      	cbnz	r3, 800b5ca <_vfiprintf_r+0x1d6>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	3307      	adds	r3, #7
 800b586:	f023 0307 	bic.w	r3, r3, #7
 800b58a:	3308      	adds	r3, #8
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b590:	443b      	add	r3, r7
 800b592:	9309      	str	r3, [sp, #36]	@ 0x24
 800b594:	e76a      	b.n	800b46c <_vfiprintf_r+0x78>
 800b596:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59a:	460c      	mov	r4, r1
 800b59c:	2001      	movs	r0, #1
 800b59e:	e7a8      	b.n	800b4f2 <_vfiprintf_r+0xfe>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	3401      	adds	r4, #1
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	f04f 0c0a 	mov.w	ip, #10
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b2:	3a30      	subs	r2, #48	@ 0x30
 800b5b4:	2a09      	cmp	r2, #9
 800b5b6:	d903      	bls.n	800b5c0 <_vfiprintf_r+0x1cc>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0c6      	beq.n	800b54a <_vfiprintf_r+0x156>
 800b5bc:	9105      	str	r1, [sp, #20]
 800b5be:	e7c4      	b.n	800b54a <_vfiprintf_r+0x156>
 800b5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e7f0      	b.n	800b5ac <_vfiprintf_r+0x1b8>
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4b12      	ldr	r3, [pc, #72]	@ (800b61c <_vfiprintf_r+0x228>)
 800b5d2:	a904      	add	r1, sp, #16
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f3af 8000 	nop.w
 800b5da:	4607      	mov	r7, r0
 800b5dc:	1c78      	adds	r0, r7, #1
 800b5de:	d1d6      	bne.n	800b58e <_vfiprintf_r+0x19a>
 800b5e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5e2:	07d9      	lsls	r1, r3, #31
 800b5e4:	d405      	bmi.n	800b5f2 <_vfiprintf_r+0x1fe>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	059a      	lsls	r2, r3, #22
 800b5ea:	d402      	bmi.n	800b5f2 <_vfiprintf_r+0x1fe>
 800b5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ee:	f7ff fa6d 	bl	800aacc <__retarget_lock_release_recursive>
 800b5f2:	89ab      	ldrh	r3, [r5, #12]
 800b5f4:	065b      	lsls	r3, r3, #25
 800b5f6:	f53f af1f 	bmi.w	800b438 <_vfiprintf_r+0x44>
 800b5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5fc:	e71e      	b.n	800b43c <_vfiprintf_r+0x48>
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	462a      	mov	r2, r5
 800b604:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <_vfiprintf_r+0x228>)
 800b606:	a904      	add	r1, sp, #16
 800b608:	4630      	mov	r0, r6
 800b60a:	f7ff fc9d 	bl	800af48 <_printf_i>
 800b60e:	e7e4      	b.n	800b5da <_vfiprintf_r+0x1e6>
 800b610:	0800bd0a 	.word	0x0800bd0a
 800b614:	0800bd14 	.word	0x0800bd14
 800b618:	00000000 	.word	0x00000000
 800b61c:	0800b3d1 	.word	0x0800b3d1
 800b620:	0800bd10 	.word	0x0800bd10

0800b624 <__swbuf_r>:
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	460e      	mov	r6, r1
 800b628:	4614      	mov	r4, r2
 800b62a:	4605      	mov	r5, r0
 800b62c:	b118      	cbz	r0, 800b636 <__swbuf_r+0x12>
 800b62e:	6a03      	ldr	r3, [r0, #32]
 800b630:	b90b      	cbnz	r3, 800b636 <__swbuf_r+0x12>
 800b632:	f7ff f8cb 	bl	800a7cc <__sinit>
 800b636:	69a3      	ldr	r3, [r4, #24]
 800b638:	60a3      	str	r3, [r4, #8]
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	071a      	lsls	r2, r3, #28
 800b63e:	d501      	bpl.n	800b644 <__swbuf_r+0x20>
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	b943      	cbnz	r3, 800b656 <__swbuf_r+0x32>
 800b644:	4621      	mov	r1, r4
 800b646:	4628      	mov	r0, r5
 800b648:	f000 f82a 	bl	800b6a0 <__swsetup_r>
 800b64c:	b118      	cbz	r0, 800b656 <__swbuf_r+0x32>
 800b64e:	f04f 37ff 	mov.w	r7, #4294967295
 800b652:	4638      	mov	r0, r7
 800b654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	6922      	ldr	r2, [r4, #16]
 800b65a:	1a98      	subs	r0, r3, r2
 800b65c:	6963      	ldr	r3, [r4, #20]
 800b65e:	b2f6      	uxtb	r6, r6
 800b660:	4283      	cmp	r3, r0
 800b662:	4637      	mov	r7, r6
 800b664:	dc05      	bgt.n	800b672 <__swbuf_r+0x4e>
 800b666:	4621      	mov	r1, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f7ff fe11 	bl	800b290 <_fflush_r>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d1ed      	bne.n	800b64e <__swbuf_r+0x2a>
 800b672:	68a3      	ldr	r3, [r4, #8]
 800b674:	3b01      	subs	r3, #1
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	6022      	str	r2, [r4, #0]
 800b67e:	701e      	strb	r6, [r3, #0]
 800b680:	6962      	ldr	r2, [r4, #20]
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	429a      	cmp	r2, r3
 800b686:	d004      	beq.n	800b692 <__swbuf_r+0x6e>
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	07db      	lsls	r3, r3, #31
 800b68c:	d5e1      	bpl.n	800b652 <__swbuf_r+0x2e>
 800b68e:	2e0a      	cmp	r6, #10
 800b690:	d1df      	bne.n	800b652 <__swbuf_r+0x2e>
 800b692:	4621      	mov	r1, r4
 800b694:	4628      	mov	r0, r5
 800b696:	f7ff fdfb 	bl	800b290 <_fflush_r>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d0d9      	beq.n	800b652 <__swbuf_r+0x2e>
 800b69e:	e7d6      	b.n	800b64e <__swbuf_r+0x2a>

0800b6a0 <__swsetup_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4b29      	ldr	r3, [pc, #164]	@ (800b748 <__swsetup_r+0xa8>)
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	b118      	cbz	r0, 800b6b4 <__swsetup_r+0x14>
 800b6ac:	6a03      	ldr	r3, [r0, #32]
 800b6ae:	b90b      	cbnz	r3, 800b6b4 <__swsetup_r+0x14>
 800b6b0:	f7ff f88c 	bl	800a7cc <__sinit>
 800b6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b8:	0719      	lsls	r1, r3, #28
 800b6ba:	d422      	bmi.n	800b702 <__swsetup_r+0x62>
 800b6bc:	06da      	lsls	r2, r3, #27
 800b6be:	d407      	bmi.n	800b6d0 <__swsetup_r+0x30>
 800b6c0:	2209      	movs	r2, #9
 800b6c2:	602a      	str	r2, [r5, #0]
 800b6c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ce:	e033      	b.n	800b738 <__swsetup_r+0x98>
 800b6d0:	0758      	lsls	r0, r3, #29
 800b6d2:	d512      	bpl.n	800b6fa <__swsetup_r+0x5a>
 800b6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6d6:	b141      	cbz	r1, 800b6ea <__swsetup_r+0x4a>
 800b6d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6dc:	4299      	cmp	r1, r3
 800b6de:	d002      	beq.n	800b6e6 <__swsetup_r+0x46>
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7ff fa21 	bl	800ab28 <_free_r>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	f043 0308 	orr.w	r3, r3, #8
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	b94b      	cbnz	r3, 800b71a <__swsetup_r+0x7a>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b70c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b710:	d003      	beq.n	800b71a <__swsetup_r+0x7a>
 800b712:	4621      	mov	r1, r4
 800b714:	4628      	mov	r0, r5
 800b716:	f000 f88b 	bl	800b830 <__smakebuf_r>
 800b71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71e:	f013 0201 	ands.w	r2, r3, #1
 800b722:	d00a      	beq.n	800b73a <__swsetup_r+0x9a>
 800b724:	2200      	movs	r2, #0
 800b726:	60a2      	str	r2, [r4, #8]
 800b728:	6962      	ldr	r2, [r4, #20]
 800b72a:	4252      	negs	r2, r2
 800b72c:	61a2      	str	r2, [r4, #24]
 800b72e:	6922      	ldr	r2, [r4, #16]
 800b730:	b942      	cbnz	r2, 800b744 <__swsetup_r+0xa4>
 800b732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b736:	d1c5      	bne.n	800b6c4 <__swsetup_r+0x24>
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	0799      	lsls	r1, r3, #30
 800b73c:	bf58      	it	pl
 800b73e:	6962      	ldrpl	r2, [r4, #20]
 800b740:	60a2      	str	r2, [r4, #8]
 800b742:	e7f4      	b.n	800b72e <__swsetup_r+0x8e>
 800b744:	2000      	movs	r0, #0
 800b746:	e7f7      	b.n	800b738 <__swsetup_r+0x98>
 800b748:	200000d4 	.word	0x200000d4

0800b74c <_raise_r>:
 800b74c:	291f      	cmp	r1, #31
 800b74e:	b538      	push	{r3, r4, r5, lr}
 800b750:	4605      	mov	r5, r0
 800b752:	460c      	mov	r4, r1
 800b754:	d904      	bls.n	800b760 <_raise_r+0x14>
 800b756:	2316      	movs	r3, #22
 800b758:	6003      	str	r3, [r0, #0]
 800b75a:	f04f 30ff 	mov.w	r0, #4294967295
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b762:	b112      	cbz	r2, 800b76a <_raise_r+0x1e>
 800b764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b768:	b94b      	cbnz	r3, 800b77e <_raise_r+0x32>
 800b76a:	4628      	mov	r0, r5
 800b76c:	f000 f830 	bl	800b7d0 <_getpid_r>
 800b770:	4622      	mov	r2, r4
 800b772:	4601      	mov	r1, r0
 800b774:	4628      	mov	r0, r5
 800b776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b77a:	f000 b817 	b.w	800b7ac <_kill_r>
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d00a      	beq.n	800b798 <_raise_r+0x4c>
 800b782:	1c59      	adds	r1, r3, #1
 800b784:	d103      	bne.n	800b78e <_raise_r+0x42>
 800b786:	2316      	movs	r3, #22
 800b788:	6003      	str	r3, [r0, #0]
 800b78a:	2001      	movs	r0, #1
 800b78c:	e7e7      	b.n	800b75e <_raise_r+0x12>
 800b78e:	2100      	movs	r1, #0
 800b790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b794:	4620      	mov	r0, r4
 800b796:	4798      	blx	r3
 800b798:	2000      	movs	r0, #0
 800b79a:	e7e0      	b.n	800b75e <_raise_r+0x12>

0800b79c <raise>:
 800b79c:	4b02      	ldr	r3, [pc, #8]	@ (800b7a8 <raise+0xc>)
 800b79e:	4601      	mov	r1, r0
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	f7ff bfd3 	b.w	800b74c <_raise_r>
 800b7a6:	bf00      	nop
 800b7a8:	200000d4 	.word	0x200000d4

0800b7ac <_kill_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d07      	ldr	r5, [pc, #28]	@ (800b7cc <_kill_r+0x20>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	f7f5 fe1f 	bl	80013fc <_kill>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d102      	bne.n	800b7c8 <_kill_r+0x1c>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b103      	cbz	r3, 800b7c8 <_kill_r+0x1c>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20001e48 	.word	0x20001e48

0800b7d0 <_getpid_r>:
 800b7d0:	f7f5 be0c 	b.w	80013ec <_getpid>

0800b7d4 <_malloc_usable_size_r>:
 800b7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d8:	1f18      	subs	r0, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfbc      	itt	lt
 800b7de:	580b      	ldrlt	r3, [r1, r0]
 800b7e0:	18c0      	addlt	r0, r0, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <__swhatbuf_r>:
 800b7e4:	b570      	push	{r4, r5, r6, lr}
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ec:	2900      	cmp	r1, #0
 800b7ee:	b096      	sub	sp, #88	@ 0x58
 800b7f0:	4615      	mov	r5, r2
 800b7f2:	461e      	mov	r6, r3
 800b7f4:	da0d      	bge.n	800b812 <__swhatbuf_r+0x2e>
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7fc:	f04f 0100 	mov.w	r1, #0
 800b800:	bf14      	ite	ne
 800b802:	2340      	movne	r3, #64	@ 0x40
 800b804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b808:	2000      	movs	r0, #0
 800b80a:	6031      	str	r1, [r6, #0]
 800b80c:	602b      	str	r3, [r5, #0]
 800b80e:	b016      	add	sp, #88	@ 0x58
 800b810:	bd70      	pop	{r4, r5, r6, pc}
 800b812:	466a      	mov	r2, sp
 800b814:	f000 f848 	bl	800b8a8 <_fstat_r>
 800b818:	2800      	cmp	r0, #0
 800b81a:	dbec      	blt.n	800b7f6 <__swhatbuf_r+0x12>
 800b81c:	9901      	ldr	r1, [sp, #4]
 800b81e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b826:	4259      	negs	r1, r3
 800b828:	4159      	adcs	r1, r3
 800b82a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b82e:	e7eb      	b.n	800b808 <__swhatbuf_r+0x24>

0800b830 <__smakebuf_r>:
 800b830:	898b      	ldrh	r3, [r1, #12]
 800b832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b834:	079d      	lsls	r5, r3, #30
 800b836:	4606      	mov	r6, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	d507      	bpl.n	800b84c <__smakebuf_r+0x1c>
 800b83c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	6123      	str	r3, [r4, #16]
 800b844:	2301      	movs	r3, #1
 800b846:	6163      	str	r3, [r4, #20]
 800b848:	b003      	add	sp, #12
 800b84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84c:	ab01      	add	r3, sp, #4
 800b84e:	466a      	mov	r2, sp
 800b850:	f7ff ffc8 	bl	800b7e4 <__swhatbuf_r>
 800b854:	9f00      	ldr	r7, [sp, #0]
 800b856:	4605      	mov	r5, r0
 800b858:	4639      	mov	r1, r7
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7fe fe1a 	bl	800a494 <_malloc_r>
 800b860:	b948      	cbnz	r0, 800b876 <__smakebuf_r+0x46>
 800b862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b866:	059a      	lsls	r2, r3, #22
 800b868:	d4ee      	bmi.n	800b848 <__smakebuf_r+0x18>
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	f043 0302 	orr.w	r3, r3, #2
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	e7e2      	b.n	800b83c <__smakebuf_r+0xc>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	6020      	str	r0, [r4, #0]
 800b87a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b87e:	81a3      	strh	r3, [r4, #12]
 800b880:	9b01      	ldr	r3, [sp, #4]
 800b882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b886:	b15b      	cbz	r3, 800b8a0 <__smakebuf_r+0x70>
 800b888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b88c:	4630      	mov	r0, r6
 800b88e:	f000 f81d 	bl	800b8cc <_isatty_r>
 800b892:	b128      	cbz	r0, 800b8a0 <__smakebuf_r+0x70>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	f043 0301 	orr.w	r3, r3, #1
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	431d      	orrs	r5, r3
 800b8a4:	81a5      	strh	r5, [r4, #12]
 800b8a6:	e7cf      	b.n	800b848 <__smakebuf_r+0x18>

0800b8a8 <_fstat_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	@ (800b8c8 <_fstat_r+0x20>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	f7f5 fe01 	bl	80014bc <_fstat>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d102      	bne.n	800b8c4 <_fstat_r+0x1c>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b103      	cbz	r3, 800b8c4 <_fstat_r+0x1c>
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	bd38      	pop	{r3, r4, r5, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20001e48 	.word	0x20001e48

0800b8cc <_isatty_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d06      	ldr	r5, [pc, #24]	@ (800b8e8 <_isatty_r+0x1c>)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	602b      	str	r3, [r5, #0]
 800b8d8:	f7f5 fe00 	bl	80014dc <_isatty>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_isatty_r+0x1a>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_isatty_r+0x1a>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	20001e48 	.word	0x20001e48

0800b8ec <_init>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	bf00      	nop
 800b8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f2:	bc08      	pop	{r3}
 800b8f4:	469e      	mov	lr, r3
 800b8f6:	4770      	bx	lr

0800b8f8 <_fini>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	bf00      	nop
 800b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	469e      	mov	lr, r3
 800b902:	4770      	bx	lr
